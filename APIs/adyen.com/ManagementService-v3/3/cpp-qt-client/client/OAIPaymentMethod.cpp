/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethod::OAIPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethod::OAIPaymentMethod() {
    this->initializeModel();
}

OAIPaymentMethod::~OAIPaymentMethod() {}

void OAIPaymentMethod::initializeModel() {

    m_afterpay_touch_isSet = false;
    m_afterpay_touch_isValid = false;

    m_allowed_isSet = false;
    m_allowed_isValid = false;

    m_apple_pay_isSet = false;
    m_apple_pay_isValid = false;

    m_bcmc_isSet = false;
    m_bcmc_isValid = false;

    m_business_line_id_isSet = false;
    m_business_line_id_isValid = false;

    m_cartes_bancaires_isSet = false;
    m_cartes_bancaires_isValid = false;

    m_clearpay_isSet = false;
    m_clearpay_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_cup_isSet = false;
    m_cup_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_custom_routing_flags_isSet = false;
    m_custom_routing_flags_isValid = false;

    m_diners_isSet = false;
    m_diners_isValid = false;

    m_discover_isSet = false;
    m_discover_isValid = false;

    m_eftpos_australia_isSet = false;
    m_eftpos_australia_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_giro_pay_isSet = false;
    m_giro_pay_isValid = false;

    m_girocard_isSet = false;
    m_girocard_isValid = false;

    m_google_pay_isSet = false;
    m_google_pay_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ideal_isSet = false;
    m_ideal_isValid = false;

    m_interac_card_isSet = false;
    m_interac_card_isValid = false;

    m_jcb_isSet = false;
    m_jcb_isValid = false;

    m_klarna_isSet = false;
    m_klarna_isValid = false;

    m_maestro_isSet = false;
    m_maestro_isValid = false;

    m_mc_isSet = false;
    m_mc_isValid = false;

    m_meal_voucher_fr_isSet = false;
    m_meal_voucher_fr_isValid = false;

    m_paypal_isSet = false;
    m_paypal_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_sofort_isSet = false;
    m_sofort_isValid = false;

    m_store_ids_isSet = false;
    m_store_ids_isValid = false;

    m_swish_isSet = false;
    m_swish_isValid = false;

    m_twint_isSet = false;
    m_twint_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_verification_status_isSet = false;
    m_verification_status_isValid = false;

    m_vipps_isSet = false;
    m_vipps_isValid = false;

    m_visa_isSet = false;
    m_visa_isValid = false;
}

void OAIPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethod::fromJsonObject(QJsonObject json) {

    m_afterpay_touch_isValid = ::OpenAPI::fromJsonValue(m_afterpay_touch, json[QString("afterpayTouch")]);
    m_afterpay_touch_isSet = !json[QString("afterpayTouch")].isNull() && m_afterpay_touch_isValid;

    m_allowed_isValid = ::OpenAPI::fromJsonValue(m_allowed, json[QString("allowed")]);
    m_allowed_isSet = !json[QString("allowed")].isNull() && m_allowed_isValid;

    m_apple_pay_isValid = ::OpenAPI::fromJsonValue(m_apple_pay, json[QString("applePay")]);
    m_apple_pay_isSet = !json[QString("applePay")].isNull() && m_apple_pay_isValid;

    m_bcmc_isValid = ::OpenAPI::fromJsonValue(m_bcmc, json[QString("bcmc")]);
    m_bcmc_isSet = !json[QString("bcmc")].isNull() && m_bcmc_isValid;

    m_business_line_id_isValid = ::OpenAPI::fromJsonValue(m_business_line_id, json[QString("businessLineId")]);
    m_business_line_id_isSet = !json[QString("businessLineId")].isNull() && m_business_line_id_isValid;

    m_cartes_bancaires_isValid = ::OpenAPI::fromJsonValue(m_cartes_bancaires, json[QString("cartesBancaires")]);
    m_cartes_bancaires_isSet = !json[QString("cartesBancaires")].isNull() && m_cartes_bancaires_isValid;

    m_clearpay_isValid = ::OpenAPI::fromJsonValue(m_clearpay, json[QString("clearpay")]);
    m_clearpay_isSet = !json[QString("clearpay")].isNull() && m_clearpay_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_cup_isValid = ::OpenAPI::fromJsonValue(m_cup, json[QString("cup")]);
    m_cup_isSet = !json[QString("cup")].isNull() && m_cup_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_custom_routing_flags_isValid = ::OpenAPI::fromJsonValue(m_custom_routing_flags, json[QString("customRoutingFlags")]);
    m_custom_routing_flags_isSet = !json[QString("customRoutingFlags")].isNull() && m_custom_routing_flags_isValid;

    m_diners_isValid = ::OpenAPI::fromJsonValue(m_diners, json[QString("diners")]);
    m_diners_isSet = !json[QString("diners")].isNull() && m_diners_isValid;

    m_discover_isValid = ::OpenAPI::fromJsonValue(m_discover, json[QString("discover")]);
    m_discover_isSet = !json[QString("discover")].isNull() && m_discover_isValid;

    m_eftpos_australia_isValid = ::OpenAPI::fromJsonValue(m_eftpos_australia, json[QString("eftpos_australia")]);
    m_eftpos_australia_isSet = !json[QString("eftpos_australia")].isNull() && m_eftpos_australia_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_giro_pay_isValid = ::OpenAPI::fromJsonValue(m_giro_pay, json[QString("giroPay")]);
    m_giro_pay_isSet = !json[QString("giroPay")].isNull() && m_giro_pay_isValid;

    m_girocard_isValid = ::OpenAPI::fromJsonValue(m_girocard, json[QString("girocard")]);
    m_girocard_isSet = !json[QString("girocard")].isNull() && m_girocard_isValid;

    m_google_pay_isValid = ::OpenAPI::fromJsonValue(m_google_pay, json[QString("googlePay")]);
    m_google_pay_isSet = !json[QString("googlePay")].isNull() && m_google_pay_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ideal_isValid = ::OpenAPI::fromJsonValue(m_ideal, json[QString("ideal")]);
    m_ideal_isSet = !json[QString("ideal")].isNull() && m_ideal_isValid;

    m_interac_card_isValid = ::OpenAPI::fromJsonValue(m_interac_card, json[QString("interac_card")]);
    m_interac_card_isSet = !json[QString("interac_card")].isNull() && m_interac_card_isValid;

    m_jcb_isValid = ::OpenAPI::fromJsonValue(m_jcb, json[QString("jcb")]);
    m_jcb_isSet = !json[QString("jcb")].isNull() && m_jcb_isValid;

    m_klarna_isValid = ::OpenAPI::fromJsonValue(m_klarna, json[QString("klarna")]);
    m_klarna_isSet = !json[QString("klarna")].isNull() && m_klarna_isValid;

    m_maestro_isValid = ::OpenAPI::fromJsonValue(m_maestro, json[QString("maestro")]);
    m_maestro_isSet = !json[QString("maestro")].isNull() && m_maestro_isValid;

    m_mc_isValid = ::OpenAPI::fromJsonValue(m_mc, json[QString("mc")]);
    m_mc_isSet = !json[QString("mc")].isNull() && m_mc_isValid;

    m_meal_voucher_fr_isValid = ::OpenAPI::fromJsonValue(m_meal_voucher_fr, json[QString("mealVoucher_FR")]);
    m_meal_voucher_fr_isSet = !json[QString("mealVoucher_FR")].isNull() && m_meal_voucher_fr_isValid;

    m_paypal_isValid = ::OpenAPI::fromJsonValue(m_paypal, json[QString("paypal")]);
    m_paypal_isSet = !json[QString("paypal")].isNull() && m_paypal_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_sofort_isValid = ::OpenAPI::fromJsonValue(m_sofort, json[QString("sofort")]);
    m_sofort_isSet = !json[QString("sofort")].isNull() && m_sofort_isValid;

    m_store_ids_isValid = ::OpenAPI::fromJsonValue(m_store_ids, json[QString("storeIds")]);
    m_store_ids_isSet = !json[QString("storeIds")].isNull() && m_store_ids_isValid;

    m_swish_isValid = ::OpenAPI::fromJsonValue(m_swish, json[QString("swish")]);
    m_swish_isSet = !json[QString("swish")].isNull() && m_swish_isValid;

    m_twint_isValid = ::OpenAPI::fromJsonValue(m_twint, json[QString("twint")]);
    m_twint_isSet = !json[QString("twint")].isNull() && m_twint_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_verification_status_isValid = ::OpenAPI::fromJsonValue(m_verification_status, json[QString("verificationStatus")]);
    m_verification_status_isSet = !json[QString("verificationStatus")].isNull() && m_verification_status_isValid;

    m_vipps_isValid = ::OpenAPI::fromJsonValue(m_vipps, json[QString("vipps")]);
    m_vipps_isSet = !json[QString("vipps")].isNull() && m_vipps_isValid;

    m_visa_isValid = ::OpenAPI::fromJsonValue(m_visa, json[QString("visa")]);
    m_visa_isSet = !json[QString("visa")].isNull() && m_visa_isValid;
}

QString OAIPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_afterpay_touch.isSet()) {
        obj.insert(QString("afterpayTouch"), ::OpenAPI::toJsonValue(m_afterpay_touch));
    }
    if (m_allowed_isSet) {
        obj.insert(QString("allowed"), ::OpenAPI::toJsonValue(m_allowed));
    }
    if (m_apple_pay.isSet()) {
        obj.insert(QString("applePay"), ::OpenAPI::toJsonValue(m_apple_pay));
    }
    if (m_bcmc.isSet()) {
        obj.insert(QString("bcmc"), ::OpenAPI::toJsonValue(m_bcmc));
    }
    if (m_business_line_id_isSet) {
        obj.insert(QString("businessLineId"), ::OpenAPI::toJsonValue(m_business_line_id));
    }
    if (m_cartes_bancaires.isSet()) {
        obj.insert(QString("cartesBancaires"), ::OpenAPI::toJsonValue(m_cartes_bancaires));
    }
    if (m_clearpay.isSet()) {
        obj.insert(QString("clearpay"), ::OpenAPI::toJsonValue(m_clearpay));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_cup.isSet()) {
        obj.insert(QString("cup"), ::OpenAPI::toJsonValue(m_cup));
    }
    if (m_currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_custom_routing_flags.size() > 0) {
        obj.insert(QString("customRoutingFlags"), ::OpenAPI::toJsonValue(m_custom_routing_flags));
    }
    if (m_diners.isSet()) {
        obj.insert(QString("diners"), ::OpenAPI::toJsonValue(m_diners));
    }
    if (m_discover.isSet()) {
        obj.insert(QString("discover"), ::OpenAPI::toJsonValue(m_discover));
    }
    if (m_eftpos_australia.isSet()) {
        obj.insert(QString("eftpos_australia"), ::OpenAPI::toJsonValue(m_eftpos_australia));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_giro_pay.isSet()) {
        obj.insert(QString("giroPay"), ::OpenAPI::toJsonValue(m_giro_pay));
    }
    if (m_girocard.isSet()) {
        obj.insert(QString("girocard"), ::OpenAPI::toJsonValue(m_girocard));
    }
    if (m_google_pay.isSet()) {
        obj.insert(QString("googlePay"), ::OpenAPI::toJsonValue(m_google_pay));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ideal.isSet()) {
        obj.insert(QString("ideal"), ::OpenAPI::toJsonValue(m_ideal));
    }
    if (m_interac_card.isSet()) {
        obj.insert(QString("interac_card"), ::OpenAPI::toJsonValue(m_interac_card));
    }
    if (m_jcb.isSet()) {
        obj.insert(QString("jcb"), ::OpenAPI::toJsonValue(m_jcb));
    }
    if (m_klarna.isSet()) {
        obj.insert(QString("klarna"), ::OpenAPI::toJsonValue(m_klarna));
    }
    if (m_maestro.isSet()) {
        obj.insert(QString("maestro"), ::OpenAPI::toJsonValue(m_maestro));
    }
    if (m_mc.isSet()) {
        obj.insert(QString("mc"), ::OpenAPI::toJsonValue(m_mc));
    }
    if (m_meal_voucher_fr.isSet()) {
        obj.insert(QString("mealVoucher_FR"), ::OpenAPI::toJsonValue(m_meal_voucher_fr));
    }
    if (m_paypal.isSet()) {
        obj.insert(QString("paypal"), ::OpenAPI::toJsonValue(m_paypal));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_sofort.isSet()) {
        obj.insert(QString("sofort"), ::OpenAPI::toJsonValue(m_sofort));
    }
    if (m_store_ids.size() > 0) {
        obj.insert(QString("storeIds"), ::OpenAPI::toJsonValue(m_store_ids));
    }
    if (m_swish.isSet()) {
        obj.insert(QString("swish"), ::OpenAPI::toJsonValue(m_swish));
    }
    if (m_twint.isSet()) {
        obj.insert(QString("twint"), ::OpenAPI::toJsonValue(m_twint));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_verification_status_isSet) {
        obj.insert(QString("verificationStatus"), ::OpenAPI::toJsonValue(m_verification_status));
    }
    if (m_vipps.isSet()) {
        obj.insert(QString("vipps"), ::OpenAPI::toJsonValue(m_vipps));
    }
    if (m_visa.isSet()) {
        obj.insert(QString("visa"), ::OpenAPI::toJsonValue(m_visa));
    }
    return obj;
}

OAIAfterpayTouchInfo OAIPaymentMethod::getAfterpayTouch() const {
    return m_afterpay_touch;
}
void OAIPaymentMethod::setAfterpayTouch(const OAIAfterpayTouchInfo &afterpay_touch) {
    m_afterpay_touch = afterpay_touch;
    m_afterpay_touch_isSet = true;
}

bool OAIPaymentMethod::is_afterpay_touch_Set() const{
    return m_afterpay_touch_isSet;
}

bool OAIPaymentMethod::is_afterpay_touch_Valid() const{
    return m_afterpay_touch_isValid;
}

bool OAIPaymentMethod::isAllowed() const {
    return m_allowed;
}
void OAIPaymentMethod::setAllowed(const bool &allowed) {
    m_allowed = allowed;
    m_allowed_isSet = true;
}

bool OAIPaymentMethod::is_allowed_Set() const{
    return m_allowed_isSet;
}

bool OAIPaymentMethod::is_allowed_Valid() const{
    return m_allowed_isValid;
}

OAIApplePayInfo OAIPaymentMethod::getApplePay() const {
    return m_apple_pay;
}
void OAIPaymentMethod::setApplePay(const OAIApplePayInfo &apple_pay) {
    m_apple_pay = apple_pay;
    m_apple_pay_isSet = true;
}

bool OAIPaymentMethod::is_apple_pay_Set() const{
    return m_apple_pay_isSet;
}

bool OAIPaymentMethod::is_apple_pay_Valid() const{
    return m_apple_pay_isValid;
}

OAIBcmcInfo OAIPaymentMethod::getBcmc() const {
    return m_bcmc;
}
void OAIPaymentMethod::setBcmc(const OAIBcmcInfo &bcmc) {
    m_bcmc = bcmc;
    m_bcmc_isSet = true;
}

bool OAIPaymentMethod::is_bcmc_Set() const{
    return m_bcmc_isSet;
}

bool OAIPaymentMethod::is_bcmc_Valid() const{
    return m_bcmc_isValid;
}

QString OAIPaymentMethod::getBusinessLineId() const {
    return m_business_line_id;
}
void OAIPaymentMethod::setBusinessLineId(const QString &business_line_id) {
    m_business_line_id = business_line_id;
    m_business_line_id_isSet = true;
}

bool OAIPaymentMethod::is_business_line_id_Set() const{
    return m_business_line_id_isSet;
}

bool OAIPaymentMethod::is_business_line_id_Valid() const{
    return m_business_line_id_isValid;
}

OAICartesBancairesInfo OAIPaymentMethod::getCartesBancaires() const {
    return m_cartes_bancaires;
}
void OAIPaymentMethod::setCartesBancaires(const OAICartesBancairesInfo &cartes_bancaires) {
    m_cartes_bancaires = cartes_bancaires;
    m_cartes_bancaires_isSet = true;
}

bool OAIPaymentMethod::is_cartes_bancaires_Set() const{
    return m_cartes_bancaires_isSet;
}

bool OAIPaymentMethod::is_cartes_bancaires_Valid() const{
    return m_cartes_bancaires_isValid;
}

OAIClearpayInfo OAIPaymentMethod::getClearpay() const {
    return m_clearpay;
}
void OAIPaymentMethod::setClearpay(const OAIClearpayInfo &clearpay) {
    m_clearpay = clearpay;
    m_clearpay_isSet = true;
}

bool OAIPaymentMethod::is_clearpay_Set() const{
    return m_clearpay_isSet;
}

bool OAIPaymentMethod::is_clearpay_Valid() const{
    return m_clearpay_isValid;
}

QList<QString> OAIPaymentMethod::getCountries() const {
    return m_countries;
}
void OAIPaymentMethod::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIPaymentMethod::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIPaymentMethod::is_countries_Valid() const{
    return m_countries_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getCup() const {
    return m_cup;
}
void OAIPaymentMethod::setCup(const OAIGenericPmWithTdiInfo &cup) {
    m_cup = cup;
    m_cup_isSet = true;
}

bool OAIPaymentMethod::is_cup_Set() const{
    return m_cup_isSet;
}

bool OAIPaymentMethod::is_cup_Valid() const{
    return m_cup_isValid;
}

QList<QString> OAIPaymentMethod::getCurrencies() const {
    return m_currencies;
}
void OAIPaymentMethod::setCurrencies(const QList<QString> &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIPaymentMethod::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIPaymentMethod::is_currencies_Valid() const{
    return m_currencies_isValid;
}

QList<QString> OAIPaymentMethod::getCustomRoutingFlags() const {
    return m_custom_routing_flags;
}
void OAIPaymentMethod::setCustomRoutingFlags(const QList<QString> &custom_routing_flags) {
    m_custom_routing_flags = custom_routing_flags;
    m_custom_routing_flags_isSet = true;
}

bool OAIPaymentMethod::is_custom_routing_flags_Set() const{
    return m_custom_routing_flags_isSet;
}

bool OAIPaymentMethod::is_custom_routing_flags_Valid() const{
    return m_custom_routing_flags_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getDiners() const {
    return m_diners;
}
void OAIPaymentMethod::setDiners(const OAIGenericPmWithTdiInfo &diners) {
    m_diners = diners;
    m_diners_isSet = true;
}

bool OAIPaymentMethod::is_diners_Set() const{
    return m_diners_isSet;
}

bool OAIPaymentMethod::is_diners_Valid() const{
    return m_diners_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getDiscover() const {
    return m_discover;
}
void OAIPaymentMethod::setDiscover(const OAIGenericPmWithTdiInfo &discover) {
    m_discover = discover;
    m_discover_isSet = true;
}

bool OAIPaymentMethod::is_discover_Set() const{
    return m_discover_isSet;
}

bool OAIPaymentMethod::is_discover_Valid() const{
    return m_discover_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getEftposAustralia() const {
    return m_eftpos_australia;
}
void OAIPaymentMethod::setEftposAustralia(const OAIGenericPmWithTdiInfo &eftpos_australia) {
    m_eftpos_australia = eftpos_australia;
    m_eftpos_australia_isSet = true;
}

bool OAIPaymentMethod::is_eftpos_australia_Set() const{
    return m_eftpos_australia_isSet;
}

bool OAIPaymentMethod::is_eftpos_australia_Valid() const{
    return m_eftpos_australia_isValid;
}

bool OAIPaymentMethod::isEnabled() const {
    return m_enabled;
}
void OAIPaymentMethod::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIPaymentMethod::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIPaymentMethod::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIGiroPayInfo OAIPaymentMethod::getGiroPay() const {
    return m_giro_pay;
}
void OAIPaymentMethod::setGiroPay(const OAIGiroPayInfo &giro_pay) {
    m_giro_pay = giro_pay;
    m_giro_pay_isSet = true;
}

bool OAIPaymentMethod::is_giro_pay_Set() const{
    return m_giro_pay_isSet;
}

bool OAIPaymentMethod::is_giro_pay_Valid() const{
    return m_giro_pay_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getGirocard() const {
    return m_girocard;
}
void OAIPaymentMethod::setGirocard(const OAIGenericPmWithTdiInfo &girocard) {
    m_girocard = girocard;
    m_girocard_isSet = true;
}

bool OAIPaymentMethod::is_girocard_Set() const{
    return m_girocard_isSet;
}

bool OAIPaymentMethod::is_girocard_Valid() const{
    return m_girocard_isValid;
}

OAIGooglePayInfo OAIPaymentMethod::getGooglePay() const {
    return m_google_pay;
}
void OAIPaymentMethod::setGooglePay(const OAIGooglePayInfo &google_pay) {
    m_google_pay = google_pay;
    m_google_pay_isSet = true;
}

bool OAIPaymentMethod::is_google_pay_Set() const{
    return m_google_pay_isSet;
}

bool OAIPaymentMethod::is_google_pay_Valid() const{
    return m_google_pay_isValid;
}

QString OAIPaymentMethod::getId() const {
    return m_id;
}
void OAIPaymentMethod::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPaymentMethod::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPaymentMethod::is_id_Valid() const{
    return m_id_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getIdeal() const {
    return m_ideal;
}
void OAIPaymentMethod::setIdeal(const OAIGenericPmWithTdiInfo &ideal) {
    m_ideal = ideal;
    m_ideal_isSet = true;
}

bool OAIPaymentMethod::is_ideal_Set() const{
    return m_ideal_isSet;
}

bool OAIPaymentMethod::is_ideal_Valid() const{
    return m_ideal_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getInteracCard() const {
    return m_interac_card;
}
void OAIPaymentMethod::setInteracCard(const OAIGenericPmWithTdiInfo &interac_card) {
    m_interac_card = interac_card;
    m_interac_card_isSet = true;
}

bool OAIPaymentMethod::is_interac_card_Set() const{
    return m_interac_card_isSet;
}

bool OAIPaymentMethod::is_interac_card_Valid() const{
    return m_interac_card_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getJcb() const {
    return m_jcb;
}
void OAIPaymentMethod::setJcb(const OAIGenericPmWithTdiInfo &jcb) {
    m_jcb = jcb;
    m_jcb_isSet = true;
}

bool OAIPaymentMethod::is_jcb_Set() const{
    return m_jcb_isSet;
}

bool OAIPaymentMethod::is_jcb_Valid() const{
    return m_jcb_isValid;
}

OAIKlarnaInfo OAIPaymentMethod::getKlarna() const {
    return m_klarna;
}
void OAIPaymentMethod::setKlarna(const OAIKlarnaInfo &klarna) {
    m_klarna = klarna;
    m_klarna_isSet = true;
}

bool OAIPaymentMethod::is_klarna_Set() const{
    return m_klarna_isSet;
}

bool OAIPaymentMethod::is_klarna_Valid() const{
    return m_klarna_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getMaestro() const {
    return m_maestro;
}
void OAIPaymentMethod::setMaestro(const OAIGenericPmWithTdiInfo &maestro) {
    m_maestro = maestro;
    m_maestro_isSet = true;
}

bool OAIPaymentMethod::is_maestro_Set() const{
    return m_maestro_isSet;
}

bool OAIPaymentMethod::is_maestro_Valid() const{
    return m_maestro_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getMc() const {
    return m_mc;
}
void OAIPaymentMethod::setMc(const OAIGenericPmWithTdiInfo &mc) {
    m_mc = mc;
    m_mc_isSet = true;
}

bool OAIPaymentMethod::is_mc_Set() const{
    return m_mc_isSet;
}

bool OAIPaymentMethod::is_mc_Valid() const{
    return m_mc_isValid;
}

OAIMealVoucherFRInfo OAIPaymentMethod::getMealVoucherFr() const {
    return m_meal_voucher_fr;
}
void OAIPaymentMethod::setMealVoucherFr(const OAIMealVoucherFRInfo &meal_voucher_fr) {
    m_meal_voucher_fr = meal_voucher_fr;
    m_meal_voucher_fr_isSet = true;
}

bool OAIPaymentMethod::is_meal_voucher_fr_Set() const{
    return m_meal_voucher_fr_isSet;
}

bool OAIPaymentMethod::is_meal_voucher_fr_Valid() const{
    return m_meal_voucher_fr_isValid;
}

OAIPayPalInfo OAIPaymentMethod::getPaypal() const {
    return m_paypal;
}
void OAIPaymentMethod::setPaypal(const OAIPayPalInfo &paypal) {
    m_paypal = paypal;
    m_paypal_isSet = true;
}

bool OAIPaymentMethod::is_paypal_Set() const{
    return m_paypal_isSet;
}

bool OAIPaymentMethod::is_paypal_Valid() const{
    return m_paypal_isValid;
}

QString OAIPaymentMethod::getReference() const {
    return m_reference;
}
void OAIPaymentMethod::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentMethod::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentMethod::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentMethod::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIPaymentMethod::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIPaymentMethod::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIPaymentMethod::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

OAISofortInfo OAIPaymentMethod::getSofort() const {
    return m_sofort;
}
void OAIPaymentMethod::setSofort(const OAISofortInfo &sofort) {
    m_sofort = sofort;
    m_sofort_isSet = true;
}

bool OAIPaymentMethod::is_sofort_Set() const{
    return m_sofort_isSet;
}

bool OAIPaymentMethod::is_sofort_Valid() const{
    return m_sofort_isValid;
}

QList<QString> OAIPaymentMethod::getStoreIds() const {
    return m_store_ids;
}
void OAIPaymentMethod::setStoreIds(const QList<QString> &store_ids) {
    m_store_ids = store_ids;
    m_store_ids_isSet = true;
}

bool OAIPaymentMethod::is_store_ids_Set() const{
    return m_store_ids_isSet;
}

bool OAIPaymentMethod::is_store_ids_Valid() const{
    return m_store_ids_isValid;
}

OAISwishInfo OAIPaymentMethod::getSwish() const {
    return m_swish;
}
void OAIPaymentMethod::setSwish(const OAISwishInfo &swish) {
    m_swish = swish;
    m_swish_isSet = true;
}

bool OAIPaymentMethod::is_swish_Set() const{
    return m_swish_isSet;
}

bool OAIPaymentMethod::is_swish_Valid() const{
    return m_swish_isValid;
}

OAITwintInfo OAIPaymentMethod::getTwint() const {
    return m_twint;
}
void OAIPaymentMethod::setTwint(const OAITwintInfo &twint) {
    m_twint = twint;
    m_twint_isSet = true;
}

bool OAIPaymentMethod::is_twint_Set() const{
    return m_twint_isSet;
}

bool OAIPaymentMethod::is_twint_Valid() const{
    return m_twint_isValid;
}

QString OAIPaymentMethod::getType() const {
    return m_type;
}
void OAIPaymentMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentMethod::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPaymentMethod::getVerificationStatus() const {
    return m_verification_status;
}
void OAIPaymentMethod::setVerificationStatus(const QString &verification_status) {
    m_verification_status = verification_status;
    m_verification_status_isSet = true;
}

bool OAIPaymentMethod::is_verification_status_Set() const{
    return m_verification_status_isSet;
}

bool OAIPaymentMethod::is_verification_status_Valid() const{
    return m_verification_status_isValid;
}

OAIVippsInfo OAIPaymentMethod::getVipps() const {
    return m_vipps;
}
void OAIPaymentMethod::setVipps(const OAIVippsInfo &vipps) {
    m_vipps = vipps;
    m_vipps_isSet = true;
}

bool OAIPaymentMethod::is_vipps_Set() const{
    return m_vipps_isSet;
}

bool OAIPaymentMethod::is_vipps_Valid() const{
    return m_vipps_isValid;
}

OAIGenericPmWithTdiInfo OAIPaymentMethod::getVisa() const {
    return m_visa;
}
void OAIPaymentMethod::setVisa(const OAIGenericPmWithTdiInfo &visa) {
    m_visa = visa;
    m_visa_isSet = true;
}

bool OAIPaymentMethod::is_visa_Set() const{
    return m_visa_isSet;
}

bool OAIPaymentMethod::is_visa_Valid() const{
    return m_visa_isValid;
}

bool OAIPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_afterpay_touch.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apple_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bcmc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cartes_bancaires.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clearpay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_routing_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eftpos_australia.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_giro_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_girocard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ideal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interac_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jcb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_klarna.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maestro.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_meal_voucher_fr.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paypal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sofort.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_swish.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vipps.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_visa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
