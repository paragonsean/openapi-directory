/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreCreationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreCreationRequest::OAIStoreCreationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreCreationRequest::OAIStoreCreationRequest() {
    this->initializeModel();
}

OAIStoreCreationRequest::~OAIStoreCreationRequest() {}

void OAIStoreCreationRequest::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_line_ids_isSet = false;
    m_business_line_ids_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_external_reference_id_isSet = false;
    m_external_reference_id_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shopper_statement_isSet = false;
    m_shopper_statement_isValid = false;

    m_split_configuration_isSet = false;
    m_split_configuration_isValid = false;
}

void OAIStoreCreationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreCreationRequest::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_line_ids_isValid = ::OpenAPI::fromJsonValue(m_business_line_ids, json[QString("businessLineIds")]);
    m_business_line_ids_isSet = !json[QString("businessLineIds")].isNull() && m_business_line_ids_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_external_reference_id_isValid = ::OpenAPI::fromJsonValue(m_external_reference_id, json[QString("externalReferenceId")]);
    m_external_reference_id_isSet = !json[QString("externalReferenceId")].isNull() && m_external_reference_id_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shopper_statement_isValid = ::OpenAPI::fromJsonValue(m_shopper_statement, json[QString("shopperStatement")]);
    m_shopper_statement_isSet = !json[QString("shopperStatement")].isNull() && m_shopper_statement_isValid;

    m_split_configuration_isValid = ::OpenAPI::fromJsonValue(m_split_configuration, json[QString("splitConfiguration")]);
    m_split_configuration_isSet = !json[QString("splitConfiguration")].isNull() && m_split_configuration_isValid;
}

QString OAIStoreCreationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreCreationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_line_ids.size() > 0) {
        obj.insert(QString("businessLineIds"), ::OpenAPI::toJsonValue(m_business_line_ids));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_external_reference_id_isSet) {
        obj.insert(QString("externalReferenceId"), ::OpenAPI::toJsonValue(m_external_reference_id));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shopper_statement_isSet) {
        obj.insert(QString("shopperStatement"), ::OpenAPI::toJsonValue(m_shopper_statement));
    }
    if (m_split_configuration.isSet()) {
        obj.insert(QString("splitConfiguration"), ::OpenAPI::toJsonValue(m_split_configuration));
    }
    return obj;
}

OAIStoreLocation OAIStoreCreationRequest::getAddress() const {
    return m_address;
}
void OAIStoreCreationRequest::setAddress(const OAIStoreLocation &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIStoreCreationRequest::is_address_Set() const{
    return m_address_isSet;
}

bool OAIStoreCreationRequest::is_address_Valid() const{
    return m_address_isValid;
}

QList<QString> OAIStoreCreationRequest::getBusinessLineIds() const {
    return m_business_line_ids;
}
void OAIStoreCreationRequest::setBusinessLineIds(const QList<QString> &business_line_ids) {
    m_business_line_ids = business_line_ids;
    m_business_line_ids_isSet = true;
}

bool OAIStoreCreationRequest::is_business_line_ids_Set() const{
    return m_business_line_ids_isSet;
}

bool OAIStoreCreationRequest::is_business_line_ids_Valid() const{
    return m_business_line_ids_isValid;
}

QString OAIStoreCreationRequest::getDescription() const {
    return m_description;
}
void OAIStoreCreationRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStoreCreationRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStoreCreationRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStoreCreationRequest::getExternalReferenceId() const {
    return m_external_reference_id;
}
void OAIStoreCreationRequest::setExternalReferenceId(const QString &external_reference_id) {
    m_external_reference_id = external_reference_id;
    m_external_reference_id_isSet = true;
}

bool OAIStoreCreationRequest::is_external_reference_id_Set() const{
    return m_external_reference_id_isSet;
}

bool OAIStoreCreationRequest::is_external_reference_id_Valid() const{
    return m_external_reference_id_isValid;
}

QString OAIStoreCreationRequest::getPhoneNumber() const {
    return m_phone_number;
}
void OAIStoreCreationRequest::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIStoreCreationRequest::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIStoreCreationRequest::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAIStoreCreationRequest::getReference() const {
    return m_reference;
}
void OAIStoreCreationRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIStoreCreationRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIStoreCreationRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIStoreCreationRequest::getShopperStatement() const {
    return m_shopper_statement;
}
void OAIStoreCreationRequest::setShopperStatement(const QString &shopper_statement) {
    m_shopper_statement = shopper_statement;
    m_shopper_statement_isSet = true;
}

bool OAIStoreCreationRequest::is_shopper_statement_Set() const{
    return m_shopper_statement_isSet;
}

bool OAIStoreCreationRequest::is_shopper_statement_Valid() const{
    return m_shopper_statement_isValid;
}

OAIStoreSplitConfiguration OAIStoreCreationRequest::getSplitConfiguration() const {
    return m_split_configuration;
}
void OAIStoreCreationRequest::setSplitConfiguration(const OAIStoreSplitConfiguration &split_configuration) {
    m_split_configuration = split_configuration;
    m_split_configuration_isSet = true;
}

bool OAIStoreCreationRequest::is_split_configuration_Set() const{
    return m_split_configuration_isSet;
}

bool OAIStoreCreationRequest::is_split_configuration_Valid() const{
    return m_split_configuration_isValid;
}

bool OAIStoreCreationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_line_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreCreationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_description_isValid && m_phone_number_isValid && m_shopper_statement_isValid && true;
}

} // namespace OpenAPI
