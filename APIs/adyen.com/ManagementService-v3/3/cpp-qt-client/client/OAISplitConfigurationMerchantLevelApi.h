/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISplitConfigurationMerchantLevelApi_H
#define OAI_OAISplitConfigurationMerchantLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRestServiceError.h"
#include "OAISplitConfiguration.h"
#include "OAISplitConfigurationList.h"
#include "OAISplitConfigurationRule.h"
#include "OAIUpdateSplitConfigurationLogicRequest.h"
#include "OAIUpdateSplitConfigurationRequest.h"
#include "OAIUpdateSplitConfigurationRuleRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISplitConfigurationMerchantLevelApi : public QObject {
    Q_OBJECT

public:
    OAISplitConfigurationMerchantLevelApi(const int timeOut = 0);
    ~OAISplitConfigurationMerchantLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    */
    virtual void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(const QString &merchant_id, const QString &split_configuration_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    * @param[in]  rule_id QString [required]
    */
    virtual void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(const QString &merchant_id, const QString &split_configuration_id, const QString &rule_id);

    /**
    * @param[in]  merchant_id QString [required]
    */
    virtual void getMerchantsMerchantIdSplitConfigurations(const QString &merchant_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    */
    virtual void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(const QString &merchant_id, const QString &split_configuration_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    * @param[in]  oai_update_split_configuration_request OAIUpdateSplitConfigurationRequest [optional]
    */
    virtual void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(const QString &merchant_id, const QString &split_configuration_id, const ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationRequest> &oai_update_split_configuration_request = ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  oai_update_split_configuration_rule_request OAIUpdateSplitConfigurationRuleRequest [optional]
    */
    virtual void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(const QString &merchant_id, const QString &split_configuration_id, const QString &rule_id, const ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationRuleRequest> &oai_update_split_configuration_rule_request = ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationRuleRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    * @param[in]  rule_id QString [required]
    * @param[in]  split_logic_id QString [required]
    * @param[in]  oai_update_split_configuration_logic_request OAIUpdateSplitConfigurationLogicRequest [optional]
    */
    virtual void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(const QString &merchant_id, const QString &split_configuration_id, const QString &rule_id, const QString &split_logic_id, const ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationLogicRequest> &oai_update_split_configuration_logic_request = ::OpenAPI::OptionalParam<OAIUpdateSplitConfigurationLogicRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_split_configuration OAISplitConfiguration [optional]
    */
    virtual void postMerchantsMerchantIdSplitConfigurations(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAISplitConfiguration> &oai_split_configuration = ::OpenAPI::OptionalParam<OAISplitConfiguration>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  split_configuration_id QString [required]
    * @param[in]  oai_split_configuration_rule OAISplitConfigurationRule [optional]
    */
    virtual void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(const QString &merchant_id, const QString &split_configuration_id, const ::OpenAPI::OptionalParam<OAISplitConfigurationRule> &oai_split_configuration_rule = ::OpenAPI::OptionalParam<OAISplitConfigurationRule>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCallback(OAIHttpRequestWorker *worker);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdSplitConfigurationsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdSplitConfigurationsCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignal(OAISplitConfiguration summary);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignal(OAISplitConfiguration summary);
    void getMerchantsMerchantIdSplitConfigurationsSignal(OAISplitConfigurationList summary);
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignal(OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignal(OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignal(OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignal(OAISplitConfiguration summary);
    void postMerchantsMerchantIdSplitConfigurationsSignal(OAISplitConfiguration summary);
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignal(OAISplitConfiguration summary);


    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void getMerchantsMerchantIdSplitConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAISplitConfigurationList summary);
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void postMerchantsMerchantIdSplitConfigurationsSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalFull(OAIHttpRequestWorker *worker, OAISplitConfiguration summary);

    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError() instead")
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalError() instead")
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdSplitConfigurationsSignalError() instead")
    void getMerchantsMerchantIdSplitConfigurationsSignalE(OAISplitConfigurationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdSplitConfigurationsSignalError(OAISplitConfigurationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError() instead")
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalError() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalError() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdSplitConfigurationsSignalError() instead")
    void postMerchantsMerchantIdSplitConfigurationsSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdSplitConfigurationsSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError() instead")
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalE(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalError(OAISplitConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull() instead")
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalErrorFull() instead")
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdSplitConfigurationsSignalErrorFull() instead")
    void getMerchantsMerchantIdSplitConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdSplitConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull() instead")
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdSplitConfigurationsSignalErrorFull() instead")
    void postMerchantsMerchantIdSplitConfigurationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdSplitConfigurationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull() instead")
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
