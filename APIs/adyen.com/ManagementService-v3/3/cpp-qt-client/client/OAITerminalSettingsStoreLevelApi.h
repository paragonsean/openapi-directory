/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITerminalSettingsStoreLevelApi_H
#define OAI_OAITerminalSettingsStoreLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILogo.h"
#include "OAIRestServiceError.h"
#include "OAITerminalSettings.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITerminalSettingsStoreLevelApi : public QObject {
    Q_OBJECT

public:
    OAITerminalSettingsStoreLevelApi(const int timeOut = 0);
    ~OAITerminalSettingsStoreLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  reference QString [required]
    * @param[in]  model QString [required]
    */
    virtual void getMerchantsMerchantIdStoresReferenceTerminalLogos(const QString &merchant_id, const QString &reference, const QString &model);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  reference QString [required]
    */
    virtual void getMerchantsMerchantIdStoresReferenceTerminalSettings(const QString &merchant_id, const QString &reference);

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  model QString [required]
    */
    virtual void getStoresStoreIdTerminalLogos(const QString &store_id, const QString &model);

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void getStoresStoreIdTerminalSettings(const QString &store_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  reference QString [required]
    * @param[in]  model QString [required]
    * @param[in]  oai_logo OAILogo [optional]
    */
    virtual void patchMerchantsMerchantIdStoresReferenceTerminalLogos(const QString &merchant_id, const QString &reference, const QString &model, const ::OpenAPI::OptionalParam<OAILogo> &oai_logo = ::OpenAPI::OptionalParam<OAILogo>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  reference QString [required]
    * @param[in]  oai_terminal_settings OAITerminalSettings [optional]
    */
    virtual void patchMerchantsMerchantIdStoresReferenceTerminalSettings(const QString &merchant_id, const QString &reference, const ::OpenAPI::OptionalParam<OAITerminalSettings> &oai_terminal_settings = ::OpenAPI::OptionalParam<OAITerminalSettings>());

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  model QString [required]
    * @param[in]  oai_logo OAILogo [optional]
    */
    virtual void patchStoresStoreIdTerminalLogos(const QString &store_id, const QString &model, const ::OpenAPI::OptionalParam<OAILogo> &oai_logo = ::OpenAPI::OptionalParam<OAILogo>());

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_terminal_settings OAITerminalSettings [optional]
    */
    virtual void patchStoresStoreIdTerminalSettings(const QString &store_id, const ::OpenAPI::OptionalParam<OAITerminalSettings> &oai_terminal_settings = ::OpenAPI::OptionalParam<OAITerminalSettings>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMerchantsMerchantIdStoresReferenceTerminalLogosCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsCallback(OAIHttpRequestWorker *worker);
    void getStoresStoreIdTerminalLogosCallback(OAIHttpRequestWorker *worker);
    void getStoresStoreIdTerminalSettingsCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsCallback(OAIHttpRequestWorker *worker);
    void patchStoresStoreIdTerminalLogosCallback(OAIHttpRequestWorker *worker);
    void patchStoresStoreIdTerminalSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignal(OAILogo summary);
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignal(OAITerminalSettings summary);
    void getStoresStoreIdTerminalLogosSignal(OAILogo summary);
    void getStoresStoreIdTerminalSettingsSignal(OAITerminalSettings summary);
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignal(OAILogo summary);
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignal(OAITerminalSettings summary);
    void patchStoresStoreIdTerminalLogosSignal(OAILogo summary);
    void patchStoresStoreIdTerminalSettingsSignal(OAITerminalSettings summary);


    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignalFull(OAIHttpRequestWorker *worker, OAILogo summary);
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalFull(OAIHttpRequestWorker *worker, OAITerminalSettings summary);
    void getStoresStoreIdTerminalLogosSignalFull(OAIHttpRequestWorker *worker, OAILogo summary);
    void getStoresStoreIdTerminalSettingsSignalFull(OAIHttpRequestWorker *worker, OAITerminalSettings summary);
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalFull(OAIHttpRequestWorker *worker, OAILogo summary);
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalFull(OAIHttpRequestWorker *worker, OAITerminalSettings summary);
    void patchStoresStoreIdTerminalLogosSignalFull(OAIHttpRequestWorker *worker, OAILogo summary);
    void patchStoresStoreIdTerminalSettingsSignalFull(OAIHttpRequestWorker *worker, OAITerminalSettings summary);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresReferenceTerminalLogosSignalError() instead")
    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignalE(OAILogo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignalError(OAILogo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalError() instead")
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalE(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalError(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdTerminalLogosSignalError() instead")
    void getStoresStoreIdTerminalLogosSignalE(OAILogo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdTerminalLogosSignalError(OAILogo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdTerminalSettingsSignalError() instead")
    void getStoresStoreIdTerminalSettingsSignalE(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdTerminalSettingsSignalError(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalError() instead")
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalE(OAILogo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalError(OAILogo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalError() instead")
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalE(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalError(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdTerminalLogosSignalError() instead")
    void patchStoresStoreIdTerminalLogosSignalE(OAILogo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdTerminalLogosSignalError(OAILogo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdTerminalSettingsSignalError() instead")
    void patchStoresStoreIdTerminalSettingsSignalE(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdTerminalSettingsSignalError(OAITerminalSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresReferenceTerminalLogosSignalErrorFull() instead")
    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresReferenceTerminalLogosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalErrorFull() instead")
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresReferenceTerminalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdTerminalLogosSignalErrorFull() instead")
    void getStoresStoreIdTerminalLogosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdTerminalLogosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdTerminalSettingsSignalErrorFull() instead")
    void getStoresStoreIdTerminalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdTerminalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalErrorFull() instead")
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresReferenceTerminalLogosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalErrorFull() instead")
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresReferenceTerminalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdTerminalLogosSignalErrorFull() instead")
    void patchStoresStoreIdTerminalLogosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdTerminalLogosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdTerminalSettingsSignalErrorFull() instead")
    void patchStoresStoreIdTerminalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdTerminalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
