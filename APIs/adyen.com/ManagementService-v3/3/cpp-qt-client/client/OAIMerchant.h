/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMerchant.h
 *
 * 
 */

#ifndef OAIMerchant_H
#define OAIMerchant_H

#include <QJsonObject>

#include "OAIDataCenter.h"
#include "OAIMerchantLinks.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMerchantLinks;
class OAIDataCenter;

class OAIMerchant : public OAIObject {
public:
    OAIMerchant();
    OAIMerchant(QString json);
    ~OAIMerchant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIMerchantLinks getLinks() const;
    void setLinks(const OAIMerchantLinks &_links);
    bool is__links_Set() const;
    bool is__links_Valid() const;

    QString getCaptureDelay() const;
    void setCaptureDelay(const QString &capture_delay);
    bool is_capture_delay_Set() const;
    bool is_capture_delay_Valid() const;

    QString getCompanyId() const;
    void setCompanyId(const QString &company_id);
    bool is_company_id_Set() const;
    bool is_company_id_Valid() const;

    QList<OAIDataCenter> getDataCenters() const;
    void setDataCenters(const QList<OAIDataCenter> &data_centers);
    bool is_data_centers_Set() const;
    bool is_data_centers_Valid() const;

    QString getDefaultShopperInteraction() const;
    void setDefaultShopperInteraction(const QString &default_shopper_interaction);
    bool is_default_shopper_interaction_Set() const;
    bool is_default_shopper_interaction_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getMerchantCity() const;
    void setMerchantCity(const QString &merchant_city);
    bool is_merchant_city_Set() const;
    bool is_merchant_city_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPricingPlan() const;
    void setPricingPlan(const QString &pricing_plan);
    bool is_pricing_plan_Set() const;
    bool is_pricing_plan_Valid() const;

    QString getPrimarySettlementCurrency() const;
    void setPrimarySettlementCurrency(const QString &primary_settlement_currency);
    bool is_primary_settlement_currency_Set() const;
    bool is_primary_settlement_currency_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getShopWebAddress() const;
    void setShopWebAddress(const QString &shop_web_address);
    bool is_shop_web_address_Set() const;
    bool is_shop_web_address_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIMerchantLinks m__links;
    bool m__links_isSet;
    bool m__links_isValid;

    QString m_capture_delay;
    bool m_capture_delay_isSet;
    bool m_capture_delay_isValid;

    QString m_company_id;
    bool m_company_id_isSet;
    bool m_company_id_isValid;

    QList<OAIDataCenter> m_data_centers;
    bool m_data_centers_isSet;
    bool m_data_centers_isValid;

    QString m_default_shopper_interaction;
    bool m_default_shopper_interaction_isSet;
    bool m_default_shopper_interaction_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_merchant_city;
    bool m_merchant_city_isSet;
    bool m_merchant_city_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_pricing_plan;
    bool m_pricing_plan_isSet;
    bool m_pricing_plan_isValid;

    QString m_primary_settlement_currency;
    bool m_primary_settlement_currency_isSet;
    bool m_primary_settlement_currency_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_shop_web_address;
    bool m_shop_web_address_isSet;
    bool m_shop_web_address_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMerchant)

#endif // OAIMerchant_H
