/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalReassignmentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalReassignmentRequest::OAITerminalReassignmentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalReassignmentRequest::OAITerminalReassignmentRequest() {
    this->initializeModel();
}

OAITerminalReassignmentRequest::~OAITerminalReassignmentRequest() {}

void OAITerminalReassignmentRequest::initializeModel() {

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_inventory_isSet = false;
    m_inventory_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;
}

void OAITerminalReassignmentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalReassignmentRequest::fromJsonObject(QJsonObject json) {

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_inventory_isValid = ::OpenAPI::fromJsonValue(m_inventory, json[QString("inventory")]);
    m_inventory_isSet = !json[QString("inventory")].isNull() && m_inventory_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("merchantId")]);
    m_merchant_id_isSet = !json[QString("merchantId")].isNull() && m_merchant_id_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;
}

QString OAITerminalReassignmentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalReassignmentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_inventory_isSet) {
        obj.insert(QString("inventory"), ::OpenAPI::toJsonValue(m_inventory));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("merchantId"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    return obj;
}

QString OAITerminalReassignmentRequest::getCompanyId() const {
    return m_company_id;
}
void OAITerminalReassignmentRequest::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAITerminalReassignmentRequest::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAITerminalReassignmentRequest::is_company_id_Valid() const{
    return m_company_id_isValid;
}

bool OAITerminalReassignmentRequest::isInventory() const {
    return m_inventory;
}
void OAITerminalReassignmentRequest::setInventory(const bool &inventory) {
    m_inventory = inventory;
    m_inventory_isSet = true;
}

bool OAITerminalReassignmentRequest::is_inventory_Set() const{
    return m_inventory_isSet;
}

bool OAITerminalReassignmentRequest::is_inventory_Valid() const{
    return m_inventory_isValid;
}

QString OAITerminalReassignmentRequest::getMerchantId() const {
    return m_merchant_id;
}
void OAITerminalReassignmentRequest::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAITerminalReassignmentRequest::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAITerminalReassignmentRequest::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

QString OAITerminalReassignmentRequest::getStoreId() const {
    return m_store_id;
}
void OAITerminalReassignmentRequest::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAITerminalReassignmentRequest::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAITerminalReassignmentRequest::is_store_id_Valid() const{
    return m_store_id_isValid;
}

bool OAITerminalReassignmentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalReassignmentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
