/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration::OAIConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration::OAIConfiguration() {
    this->initializeModel();
}

OAIConfiguration::~OAIConfiguration() {}

void OAIConfiguration::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAIConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAIConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

QString OAIConfiguration::getBrand() const {
    return m_brand;
}
void OAIConfiguration::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIConfiguration::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIConfiguration::is_brand_Valid() const{
    return m_brand_isValid;
}

QList<QString> OAIConfiguration::getCountry() const {
    return m_country;
}
void OAIConfiguration::setCountry(const QList<QString> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIConfiguration::is_country_Set() const{
    return m_country_isSet;
}

bool OAIConfiguration::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAICurrency> OAIConfiguration::getCurrencies() const {
    return m_currencies;
}
void OAIConfiguration::setCurrencies(const QList<OAICurrency> &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIConfiguration::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIConfiguration::is_currencies_Valid() const{
    return m_currencies_isValid;
}

QList<QString> OAIConfiguration::getSources() const {
    return m_sources;
}
void OAIConfiguration::setSources(const QList<QString> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIConfiguration::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIConfiguration::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAIConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_brand_isValid && m_currencies_isValid && true;
}

} // namespace OpenAPI
