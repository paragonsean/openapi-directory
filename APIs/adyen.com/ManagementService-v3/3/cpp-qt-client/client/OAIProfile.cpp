/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile::OAIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile::OAIProfile() {
    this->initializeModel();
}

OAIProfile::~OAIProfile() {}

void OAIProfile::initializeModel() {

    m_auth_type_isSet = false;
    m_auth_type_isValid = false;

    m_auto_wifi_isSet = false;
    m_auto_wifi_isValid = false;

    m_bss_type_isSet = false;
    m_bss_type_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_default_profile_isSet = false;
    m_default_profile_isValid = false;

    m_eap_isSet = false;
    m_eap_isValid = false;

    m_eap_ca_cert_isSet = false;
    m_eap_ca_cert_isValid = false;

    m_eap_client_cert_isSet = false;
    m_eap_client_cert_isValid = false;

    m_eap_client_key_isSet = false;
    m_eap_client_key_isValid = false;

    m_eap_client_pwd_isSet = false;
    m_eap_client_pwd_isValid = false;

    m_eap_identity_isSet = false;
    m_eap_identity_isValid = false;

    m_eap_intermediate_cert_isSet = false;
    m_eap_intermediate_cert_isValid = false;

    m_eap_pwd_isSet = false;
    m_eap_pwd_isValid = false;

    m_hidden_ssid_isSet = false;
    m_hidden_ssid_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_psk_isSet = false;
    m_psk_isValid = false;

    m_ssid_isSet = false;
    m_ssid_isValid = false;

    m_wsec_isSet = false;
    m_wsec_isValid = false;
}

void OAIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile::fromJsonObject(QJsonObject json) {

    m_auth_type_isValid = ::OpenAPI::fromJsonValue(m_auth_type, json[QString("authType")]);
    m_auth_type_isSet = !json[QString("authType")].isNull() && m_auth_type_isValid;

    m_auto_wifi_isValid = ::OpenAPI::fromJsonValue(m_auto_wifi, json[QString("autoWifi")]);
    m_auto_wifi_isSet = !json[QString("autoWifi")].isNull() && m_auto_wifi_isValid;

    m_bss_type_isValid = ::OpenAPI::fromJsonValue(m_bss_type, json[QString("bssType")]);
    m_bss_type_isSet = !json[QString("bssType")].isNull() && m_bss_type_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_default_profile_isValid = ::OpenAPI::fromJsonValue(m_default_profile, json[QString("defaultProfile")]);
    m_default_profile_isSet = !json[QString("defaultProfile")].isNull() && m_default_profile_isValid;

    m_eap_isValid = ::OpenAPI::fromJsonValue(m_eap, json[QString("eap")]);
    m_eap_isSet = !json[QString("eap")].isNull() && m_eap_isValid;

    m_eap_ca_cert_isValid = ::OpenAPI::fromJsonValue(m_eap_ca_cert, json[QString("eapCaCert")]);
    m_eap_ca_cert_isSet = !json[QString("eapCaCert")].isNull() && m_eap_ca_cert_isValid;

    m_eap_client_cert_isValid = ::OpenAPI::fromJsonValue(m_eap_client_cert, json[QString("eapClientCert")]);
    m_eap_client_cert_isSet = !json[QString("eapClientCert")].isNull() && m_eap_client_cert_isValid;

    m_eap_client_key_isValid = ::OpenAPI::fromJsonValue(m_eap_client_key, json[QString("eapClientKey")]);
    m_eap_client_key_isSet = !json[QString("eapClientKey")].isNull() && m_eap_client_key_isValid;

    m_eap_client_pwd_isValid = ::OpenAPI::fromJsonValue(m_eap_client_pwd, json[QString("eapClientPwd")]);
    m_eap_client_pwd_isSet = !json[QString("eapClientPwd")].isNull() && m_eap_client_pwd_isValid;

    m_eap_identity_isValid = ::OpenAPI::fromJsonValue(m_eap_identity, json[QString("eapIdentity")]);
    m_eap_identity_isSet = !json[QString("eapIdentity")].isNull() && m_eap_identity_isValid;

    m_eap_intermediate_cert_isValid = ::OpenAPI::fromJsonValue(m_eap_intermediate_cert, json[QString("eapIntermediateCert")]);
    m_eap_intermediate_cert_isSet = !json[QString("eapIntermediateCert")].isNull() && m_eap_intermediate_cert_isValid;

    m_eap_pwd_isValid = ::OpenAPI::fromJsonValue(m_eap_pwd, json[QString("eapPwd")]);
    m_eap_pwd_isSet = !json[QString("eapPwd")].isNull() && m_eap_pwd_isValid;

    m_hidden_ssid_isValid = ::OpenAPI::fromJsonValue(m_hidden_ssid, json[QString("hiddenSsid")]);
    m_hidden_ssid_isSet = !json[QString("hiddenSsid")].isNull() && m_hidden_ssid_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_psk_isValid = ::OpenAPI::fromJsonValue(m_psk, json[QString("psk")]);
    m_psk_isSet = !json[QString("psk")].isNull() && m_psk_isValid;

    m_ssid_isValid = ::OpenAPI::fromJsonValue(m_ssid, json[QString("ssid")]);
    m_ssid_isSet = !json[QString("ssid")].isNull() && m_ssid_isValid;

    m_wsec_isValid = ::OpenAPI::fromJsonValue(m_wsec, json[QString("wsec")]);
    m_wsec_isSet = !json[QString("wsec")].isNull() && m_wsec_isValid;
}

QString OAIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_type_isSet) {
        obj.insert(QString("authType"), ::OpenAPI::toJsonValue(m_auth_type));
    }
    if (m_auto_wifi_isSet) {
        obj.insert(QString("autoWifi"), ::OpenAPI::toJsonValue(m_auto_wifi));
    }
    if (m_bss_type_isSet) {
        obj.insert(QString("bssType"), ::OpenAPI::toJsonValue(m_bss_type));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_default_profile_isSet) {
        obj.insert(QString("defaultProfile"), ::OpenAPI::toJsonValue(m_default_profile));
    }
    if (m_eap_isSet) {
        obj.insert(QString("eap"), ::OpenAPI::toJsonValue(m_eap));
    }
    if (m_eap_ca_cert.isSet()) {
        obj.insert(QString("eapCaCert"), ::OpenAPI::toJsonValue(m_eap_ca_cert));
    }
    if (m_eap_client_cert.isSet()) {
        obj.insert(QString("eapClientCert"), ::OpenAPI::toJsonValue(m_eap_client_cert));
    }
    if (m_eap_client_key.isSet()) {
        obj.insert(QString("eapClientKey"), ::OpenAPI::toJsonValue(m_eap_client_key));
    }
    if (m_eap_client_pwd_isSet) {
        obj.insert(QString("eapClientPwd"), ::OpenAPI::toJsonValue(m_eap_client_pwd));
    }
    if (m_eap_identity_isSet) {
        obj.insert(QString("eapIdentity"), ::OpenAPI::toJsonValue(m_eap_identity));
    }
    if (m_eap_intermediate_cert.isSet()) {
        obj.insert(QString("eapIntermediateCert"), ::OpenAPI::toJsonValue(m_eap_intermediate_cert));
    }
    if (m_eap_pwd_isSet) {
        obj.insert(QString("eapPwd"), ::OpenAPI::toJsonValue(m_eap_pwd));
    }
    if (m_hidden_ssid_isSet) {
        obj.insert(QString("hiddenSsid"), ::OpenAPI::toJsonValue(m_hidden_ssid));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_psk_isSet) {
        obj.insert(QString("psk"), ::OpenAPI::toJsonValue(m_psk));
    }
    if (m_ssid_isSet) {
        obj.insert(QString("ssid"), ::OpenAPI::toJsonValue(m_ssid));
    }
    if (m_wsec_isSet) {
        obj.insert(QString("wsec"), ::OpenAPI::toJsonValue(m_wsec));
    }
    return obj;
}

QString OAIProfile::getAuthType() const {
    return m_auth_type;
}
void OAIProfile::setAuthType(const QString &auth_type) {
    m_auth_type = auth_type;
    m_auth_type_isSet = true;
}

bool OAIProfile::is_auth_type_Set() const{
    return m_auth_type_isSet;
}

bool OAIProfile::is_auth_type_Valid() const{
    return m_auth_type_isValid;
}

bool OAIProfile::isAutoWifi() const {
    return m_auto_wifi;
}
void OAIProfile::setAutoWifi(const bool &auto_wifi) {
    m_auto_wifi = auto_wifi;
    m_auto_wifi_isSet = true;
}

bool OAIProfile::is_auto_wifi_Set() const{
    return m_auto_wifi_isSet;
}

bool OAIProfile::is_auto_wifi_Valid() const{
    return m_auto_wifi_isValid;
}

QString OAIProfile::getBssType() const {
    return m_bss_type;
}
void OAIProfile::setBssType(const QString &bss_type) {
    m_bss_type = bss_type;
    m_bss_type_isSet = true;
}

bool OAIProfile::is_bss_type_Set() const{
    return m_bss_type_isSet;
}

bool OAIProfile::is_bss_type_Valid() const{
    return m_bss_type_isValid;
}

qint32 OAIProfile::getChannel() const {
    return m_channel;
}
void OAIProfile::setChannel(const qint32 &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIProfile::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIProfile::is_channel_Valid() const{
    return m_channel_isValid;
}

bool OAIProfile::isDefaultProfile() const {
    return m_default_profile;
}
void OAIProfile::setDefaultProfile(const bool &default_profile) {
    m_default_profile = default_profile;
    m_default_profile_isSet = true;
}

bool OAIProfile::is_default_profile_Set() const{
    return m_default_profile_isSet;
}

bool OAIProfile::is_default_profile_Valid() const{
    return m_default_profile_isValid;
}

QString OAIProfile::getEap() const {
    return m_eap;
}
void OAIProfile::setEap(const QString &eap) {
    m_eap = eap;
    m_eap_isSet = true;
}

bool OAIProfile::is_eap_Set() const{
    return m_eap_isSet;
}

bool OAIProfile::is_eap_Valid() const{
    return m_eap_isValid;
}

OAIFile OAIProfile::getEapCaCert() const {
    return m_eap_ca_cert;
}
void OAIProfile::setEapCaCert(const OAIFile &eap_ca_cert) {
    m_eap_ca_cert = eap_ca_cert;
    m_eap_ca_cert_isSet = true;
}

bool OAIProfile::is_eap_ca_cert_Set() const{
    return m_eap_ca_cert_isSet;
}

bool OAIProfile::is_eap_ca_cert_Valid() const{
    return m_eap_ca_cert_isValid;
}

OAIFile OAIProfile::getEapClientCert() const {
    return m_eap_client_cert;
}
void OAIProfile::setEapClientCert(const OAIFile &eap_client_cert) {
    m_eap_client_cert = eap_client_cert;
    m_eap_client_cert_isSet = true;
}

bool OAIProfile::is_eap_client_cert_Set() const{
    return m_eap_client_cert_isSet;
}

bool OAIProfile::is_eap_client_cert_Valid() const{
    return m_eap_client_cert_isValid;
}

OAIFile OAIProfile::getEapClientKey() const {
    return m_eap_client_key;
}
void OAIProfile::setEapClientKey(const OAIFile &eap_client_key) {
    m_eap_client_key = eap_client_key;
    m_eap_client_key_isSet = true;
}

bool OAIProfile::is_eap_client_key_Set() const{
    return m_eap_client_key_isSet;
}

bool OAIProfile::is_eap_client_key_Valid() const{
    return m_eap_client_key_isValid;
}

QString OAIProfile::getEapClientPwd() const {
    return m_eap_client_pwd;
}
void OAIProfile::setEapClientPwd(const QString &eap_client_pwd) {
    m_eap_client_pwd = eap_client_pwd;
    m_eap_client_pwd_isSet = true;
}

bool OAIProfile::is_eap_client_pwd_Set() const{
    return m_eap_client_pwd_isSet;
}

bool OAIProfile::is_eap_client_pwd_Valid() const{
    return m_eap_client_pwd_isValid;
}

QString OAIProfile::getEapIdentity() const {
    return m_eap_identity;
}
void OAIProfile::setEapIdentity(const QString &eap_identity) {
    m_eap_identity = eap_identity;
    m_eap_identity_isSet = true;
}

bool OAIProfile::is_eap_identity_Set() const{
    return m_eap_identity_isSet;
}

bool OAIProfile::is_eap_identity_Valid() const{
    return m_eap_identity_isValid;
}

OAIFile OAIProfile::getEapIntermediateCert() const {
    return m_eap_intermediate_cert;
}
void OAIProfile::setEapIntermediateCert(const OAIFile &eap_intermediate_cert) {
    m_eap_intermediate_cert = eap_intermediate_cert;
    m_eap_intermediate_cert_isSet = true;
}

bool OAIProfile::is_eap_intermediate_cert_Set() const{
    return m_eap_intermediate_cert_isSet;
}

bool OAIProfile::is_eap_intermediate_cert_Valid() const{
    return m_eap_intermediate_cert_isValid;
}

QString OAIProfile::getEapPwd() const {
    return m_eap_pwd;
}
void OAIProfile::setEapPwd(const QString &eap_pwd) {
    m_eap_pwd = eap_pwd;
    m_eap_pwd_isSet = true;
}

bool OAIProfile::is_eap_pwd_Set() const{
    return m_eap_pwd_isSet;
}

bool OAIProfile::is_eap_pwd_Valid() const{
    return m_eap_pwd_isValid;
}

bool OAIProfile::isHiddenSsid() const {
    return m_hidden_ssid;
}
void OAIProfile::setHiddenSsid(const bool &hidden_ssid) {
    m_hidden_ssid = hidden_ssid;
    m_hidden_ssid_isSet = true;
}

bool OAIProfile::is_hidden_ssid_Set() const{
    return m_hidden_ssid_isSet;
}

bool OAIProfile::is_hidden_ssid_Valid() const{
    return m_hidden_ssid_isValid;
}

QString OAIProfile::getName() const {
    return m_name;
}
void OAIProfile::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProfile::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProfile::getPsk() const {
    return m_psk;
}
void OAIProfile::setPsk(const QString &psk) {
    m_psk = psk;
    m_psk_isSet = true;
}

bool OAIProfile::is_psk_Set() const{
    return m_psk_isSet;
}

bool OAIProfile::is_psk_Valid() const{
    return m_psk_isValid;
}

QString OAIProfile::getSsid() const {
    return m_ssid;
}
void OAIProfile::setSsid(const QString &ssid) {
    m_ssid = ssid;
    m_ssid_isSet = true;
}

bool OAIProfile::is_ssid_Set() const{
    return m_ssid_isSet;
}

bool OAIProfile::is_ssid_Valid() const{
    return m_ssid_isValid;
}

QString OAIProfile::getWsec() const {
    return m_wsec;
}
void OAIProfile::setWsec(const QString &wsec) {
    m_wsec = wsec;
    m_wsec_isSet = true;
}

bool OAIProfile::is_wsec_Set() const{
    return m_wsec_isSet;
}

bool OAIProfile::is_wsec_Valid() const{
    return m_wsec_isValid;
}

bool OAIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auto_wifi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bss_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_ca_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_client_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_client_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_client_pwd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_identity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_intermediate_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eap_pwd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hidden_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wsec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auth_type_isValid && m_bss_type_isValid && m_ssid_isValid && m_wsec_isValid && true;
}

} // namespace OpenAPI
