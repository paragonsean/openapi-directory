/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITerminalsTerminalLevelApi_H
#define OAI_OAITerminalsTerminalLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListTerminalsResponse.h"
#include "OAIRestServiceError.h"
#include "OAITerminalReassignmentRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITerminalsTerminalLevelApi : public QObject {
    Q_OBJECT

public:
    OAITerminalsTerminalLevelApi(const int timeOut = 0);
    ~OAITerminalsTerminalLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  search_query QString [optional]
    * @param[in]  otp_query QString [optional]
    * @param[in]  countries QString [optional]
    * @param[in]  merchant_ids QString [optional]
    * @param[in]  store_ids QString [optional]
    * @param[in]  brand_models QString [optional]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getTerminals(const ::OpenAPI::OptionalParam<QString> &search_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &otp_query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &countries = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &merchant_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &store_ids = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &brand_models = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  terminal_id QString [required]
    * @param[in]  oai_terminal_reassignment_request OAITerminalReassignmentRequest [optional]
    */
    virtual void postTerminalsTerminalIdReassign(const QString &terminal_id, const ::OpenAPI::OptionalParam<OAITerminalReassignmentRequest> &oai_terminal_reassignment_request = ::OpenAPI::OptionalParam<OAITerminalReassignmentRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getTerminalsCallback(OAIHttpRequestWorker *worker);
    void postTerminalsTerminalIdReassignCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getTerminalsSignal(OAIListTerminalsResponse summary);
    void postTerminalsTerminalIdReassignSignal();


    void getTerminalsSignalFull(OAIHttpRequestWorker *worker, OAIListTerminalsResponse summary);
    void postTerminalsTerminalIdReassignSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getTerminalsSignalError() instead")
    void getTerminalsSignalE(OAIListTerminalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalsSignalError(OAIListTerminalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTerminalsTerminalIdReassignSignalError() instead")
    void postTerminalsTerminalIdReassignSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postTerminalsTerminalIdReassignSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getTerminalsSignalErrorFull() instead")
    void getTerminalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTerminalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTerminalsTerminalIdReassignSignalErrorFull() instead")
    void postTerminalsTerminalIdReassignSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTerminalsTerminalIdReassignSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
