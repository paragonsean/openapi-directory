/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomNotification::OAICustomNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomNotification::OAICustomNotification() {
    this->initializeModel();
}

OAICustomNotification::~OAICustomNotification() {}

void OAICustomNotification::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_event_code_isSet = false;
    m_event_code_isValid = false;

    m_event_date_isSet = false;
    m_event_date_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAICustomNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomNotification::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_event_code_isValid = ::OpenAPI::fromJsonValue(m_event_code, json[QString("eventCode")]);
    m_event_code_isSet = !json[QString("eventCode")].isNull() && m_event_code_isValid;

    m_event_date_isValid = ::OpenAPI::fromJsonValue(m_event_date, json[QString("eventDate")]);
    m_event_date_isSet = !json[QString("eventDate")].isNull() && m_event_date_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAICustomNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_event_code_isSet) {
        obj.insert(QString("eventCode"), ::OpenAPI::toJsonValue(m_event_code));
    }
    if (m_event_date_isSet) {
        obj.insert(QString("eventDate"), ::OpenAPI::toJsonValue(m_event_date));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

OAIAmount OAICustomNotification::getAmount() const {
    return m_amount;
}
void OAICustomNotification::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICustomNotification::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICustomNotification::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICustomNotification::getEventCode() const {
    return m_event_code;
}
void OAICustomNotification::setEventCode(const QString &event_code) {
    m_event_code = event_code;
    m_event_code_isSet = true;
}

bool OAICustomNotification::is_event_code_Set() const{
    return m_event_code_isSet;
}

bool OAICustomNotification::is_event_code_Valid() const{
    return m_event_code_isValid;
}

QDateTime OAICustomNotification::getEventDate() const {
    return m_event_date;
}
void OAICustomNotification::setEventDate(const QDateTime &event_date) {
    m_event_date = event_date;
    m_event_date_isSet = true;
}

bool OAICustomNotification::is_event_date_Set() const{
    return m_event_date_isSet;
}

bool OAICustomNotification::is_event_date_Valid() const{
    return m_event_date_isValid;
}

QString OAICustomNotification::getMerchantReference() const {
    return m_merchant_reference;
}
void OAICustomNotification::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAICustomNotification::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAICustomNotification::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAICustomNotification::getPaymentMethod() const {
    return m_payment_method;
}
void OAICustomNotification::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAICustomNotification::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAICustomNotification::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAICustomNotification::getReason() const {
    return m_reason;
}
void OAICustomNotification::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICustomNotification::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICustomNotification::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAICustomNotification::isSuccess() const {
    return m_success;
}
void OAICustomNotification::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAICustomNotification::is_success_Set() const{
    return m_success_isSet;
}

bool OAICustomNotification::is_success_Valid() const{
    return m_success_isValid;
}

bool OAICustomNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
