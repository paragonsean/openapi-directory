/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_account_groups_isSet = false;
    m_account_groups_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_apps_isSet = false;
    m_apps_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_time_zone_code_isSet = false;
    m_time_zone_code_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_account_groups_isValid = ::OpenAPI::fromJsonValue(m_account_groups, json[QString("accountGroups")]);
    m_account_groups_isSet = !json[QString("accountGroups")].isNull() && m_account_groups_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_apps_isValid = ::OpenAPI::fromJsonValue(m_apps, json[QString("apps")]);
    m_apps_isSet = !json[QString("apps")].isNull() && m_apps_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_time_zone_code_isValid = ::OpenAPI::fromJsonValue(m_time_zone_code, json[QString("timeZoneCode")]);
    m_time_zone_code_isSet = !json[QString("timeZoneCode")].isNull() && m_time_zone_code_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_account_groups.size() > 0) {
        obj.insert(QString("accountGroups"), ::OpenAPI::toJsonValue(m_account_groups));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_apps.size() > 0) {
        obj.insert(QString("apps"), ::OpenAPI::toJsonValue(m_apps));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_time_zone_code_isSet) {
        obj.insert(QString("timeZoneCode"), ::OpenAPI::toJsonValue(m_time_zone_code));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAILinks OAIUser::getLinks() const {
    return m__links;
}
void OAIUser::setLinks(const OAILinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIUser::is__links_Set() const{
    return m__links_isSet;
}

bool OAIUser::is__links_Valid() const{
    return m__links_isValid;
}

QList<QString> OAIUser::getAccountGroups() const {
    return m_account_groups;
}
void OAIUser::setAccountGroups(const QList<QString> &account_groups) {
    m_account_groups = account_groups;
    m_account_groups_isSet = true;
}

bool OAIUser::is_account_groups_Set() const{
    return m_account_groups_isSet;
}

bool OAIUser::is_account_groups_Valid() const{
    return m_account_groups_isValid;
}

bool OAIUser::isActive() const {
    return m_active;
}
void OAIUser::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAIUser::is_active_Set() const{
    return m_active_isSet;
}

bool OAIUser::is_active_Valid() const{
    return m_active_isValid;
}

QList<QString> OAIUser::getApps() const {
    return m_apps;
}
void OAIUser::setApps(const QList<QString> &apps) {
    m_apps = apps;
    m_apps_isSet = true;
}

bool OAIUser::is_apps_Set() const{
    return m_apps_isSet;
}

bool OAIUser::is_apps_Valid() const{
    return m_apps_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIUser::getRoles() const {
    return m_roles;
}
void OAIUser::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAIUser::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAIUser::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAIUser::getTimeZoneCode() const {
    return m_time_zone_code;
}
void OAIUser::setTimeZoneCode(const QString &time_zone_code) {
    m_time_zone_code = time_zone_code;
    m_time_zone_code_isSet = true;
}

bool OAIUser::is_time_zone_code_Set() const{
    return m_time_zone_code_isSet;
}

bool OAIUser::is_time_zone_code_Valid() const{
    return m_time_zone_code_isValid;
}

QString OAIUser::getUsername() const {
    return m_username;
}
void OAIUser::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUser::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUser::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_id_isValid && m_roles_isValid && m_time_zone_code_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
