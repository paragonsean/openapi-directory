/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchant::OAIMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchant::OAIMerchant() {
    this->initializeModel();
}

OAIMerchant::~OAIMerchant() {}

void OAIMerchant::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_capture_delay_isSet = false;
    m_capture_delay_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_data_centers_isSet = false;
    m_data_centers_isValid = false;

    m_default_shopper_interaction_isSet = false;
    m_default_shopper_interaction_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_merchant_city_isSet = false;
    m_merchant_city_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_primary_settlement_currency_isSet = false;
    m_primary_settlement_currency_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shop_web_address_isSet = false;
    m_shop_web_address_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchant::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_capture_delay_isValid = ::OpenAPI::fromJsonValue(m_capture_delay, json[QString("captureDelay")]);
    m_capture_delay_isSet = !json[QString("captureDelay")].isNull() && m_capture_delay_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_data_centers_isValid = ::OpenAPI::fromJsonValue(m_data_centers, json[QString("dataCenters")]);
    m_data_centers_isSet = !json[QString("dataCenters")].isNull() && m_data_centers_isValid;

    m_default_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_default_shopper_interaction, json[QString("defaultShopperInteraction")]);
    m_default_shopper_interaction_isSet = !json[QString("defaultShopperInteraction")].isNull() && m_default_shopper_interaction_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_merchant_city, json[QString("merchantCity")]);
    m_merchant_city_isSet = !json[QString("merchantCity")].isNull() && m_merchant_city_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("pricingPlan")]);
    m_pricing_plan_isSet = !json[QString("pricingPlan")].isNull() && m_pricing_plan_isValid;

    m_primary_settlement_currency_isValid = ::OpenAPI::fromJsonValue(m_primary_settlement_currency, json[QString("primarySettlementCurrency")]);
    m_primary_settlement_currency_isSet = !json[QString("primarySettlementCurrency")].isNull() && m_primary_settlement_currency_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shop_web_address_isValid = ::OpenAPI::fromJsonValue(m_shop_web_address, json[QString("shopWebAddress")]);
    m_shop_web_address_isSet = !json[QString("shopWebAddress")].isNull() && m_shop_web_address_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_capture_delay_isSet) {
        obj.insert(QString("captureDelay"), ::OpenAPI::toJsonValue(m_capture_delay));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_data_centers.size() > 0) {
        obj.insert(QString("dataCenters"), ::OpenAPI::toJsonValue(m_data_centers));
    }
    if (m_default_shopper_interaction_isSet) {
        obj.insert(QString("defaultShopperInteraction"), ::OpenAPI::toJsonValue(m_default_shopper_interaction));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_merchant_city_isSet) {
        obj.insert(QString("merchantCity"), ::OpenAPI::toJsonValue(m_merchant_city));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pricing_plan_isSet) {
        obj.insert(QString("pricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_primary_settlement_currency_isSet) {
        obj.insert(QString("primarySettlementCurrency"), ::OpenAPI::toJsonValue(m_primary_settlement_currency));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shop_web_address_isSet) {
        obj.insert(QString("shopWebAddress"), ::OpenAPI::toJsonValue(m_shop_web_address));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIMerchantLinks OAIMerchant::getLinks() const {
    return m__links;
}
void OAIMerchant::setLinks(const OAIMerchantLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIMerchant::is__links_Set() const{
    return m__links_isSet;
}

bool OAIMerchant::is__links_Valid() const{
    return m__links_isValid;
}

QString OAIMerchant::getCaptureDelay() const {
    return m_capture_delay;
}
void OAIMerchant::setCaptureDelay(const QString &capture_delay) {
    m_capture_delay = capture_delay;
    m_capture_delay_isSet = true;
}

bool OAIMerchant::is_capture_delay_Set() const{
    return m_capture_delay_isSet;
}

bool OAIMerchant::is_capture_delay_Valid() const{
    return m_capture_delay_isValid;
}

QString OAIMerchant::getCompanyId() const {
    return m_company_id;
}
void OAIMerchant::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAIMerchant::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAIMerchant::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QList<OAIDataCenter> OAIMerchant::getDataCenters() const {
    return m_data_centers;
}
void OAIMerchant::setDataCenters(const QList<OAIDataCenter> &data_centers) {
    m_data_centers = data_centers;
    m_data_centers_isSet = true;
}

bool OAIMerchant::is_data_centers_Set() const{
    return m_data_centers_isSet;
}

bool OAIMerchant::is_data_centers_Valid() const{
    return m_data_centers_isValid;
}

QString OAIMerchant::getDefaultShopperInteraction() const {
    return m_default_shopper_interaction;
}
void OAIMerchant::setDefaultShopperInteraction(const QString &default_shopper_interaction) {
    m_default_shopper_interaction = default_shopper_interaction;
    m_default_shopper_interaction_isSet = true;
}

bool OAIMerchant::is_default_shopper_interaction_Set() const{
    return m_default_shopper_interaction_isSet;
}

bool OAIMerchant::is_default_shopper_interaction_Valid() const{
    return m_default_shopper_interaction_isValid;
}

QString OAIMerchant::getDescription() const {
    return m_description;
}
void OAIMerchant::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMerchant::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMerchant::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIMerchant::getId() const {
    return m_id;
}
void OAIMerchant::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIMerchant::is_id_Set() const{
    return m_id_isSet;
}

bool OAIMerchant::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIMerchant::getMerchantCity() const {
    return m_merchant_city;
}
void OAIMerchant::setMerchantCity(const QString &merchant_city) {
    m_merchant_city = merchant_city;
    m_merchant_city_isSet = true;
}

bool OAIMerchant::is_merchant_city_Set() const{
    return m_merchant_city_isSet;
}

bool OAIMerchant::is_merchant_city_Valid() const{
    return m_merchant_city_isValid;
}

QString OAIMerchant::getName() const {
    return m_name;
}
void OAIMerchant::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMerchant::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMerchant::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIMerchant::getPricingPlan() const {
    return m_pricing_plan;
}
void OAIMerchant::setPricingPlan(const QString &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAIMerchant::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAIMerchant::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QString OAIMerchant::getPrimarySettlementCurrency() const {
    return m_primary_settlement_currency;
}
void OAIMerchant::setPrimarySettlementCurrency(const QString &primary_settlement_currency) {
    m_primary_settlement_currency = primary_settlement_currency;
    m_primary_settlement_currency_isSet = true;
}

bool OAIMerchant::is_primary_settlement_currency_Set() const{
    return m_primary_settlement_currency_isSet;
}

bool OAIMerchant::is_primary_settlement_currency_Valid() const{
    return m_primary_settlement_currency_isValid;
}

QString OAIMerchant::getReference() const {
    return m_reference;
}
void OAIMerchant::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIMerchant::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIMerchant::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIMerchant::getShopWebAddress() const {
    return m_shop_web_address;
}
void OAIMerchant::setShopWebAddress(const QString &shop_web_address) {
    m_shop_web_address = shop_web_address;
    m_shop_web_address_isSet = true;
}

bool OAIMerchant::is_shop_web_address_Set() const{
    return m_shop_web_address_isSet;
}

bool OAIMerchant::is_shop_web_address_Valid() const{
    return m_shop_web_address_isValid;
}

QString OAIMerchant::getStatus() const {
    return m_status;
}
void OAIMerchant::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMerchant::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMerchant::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_delay_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_centers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_settlement_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shop_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
