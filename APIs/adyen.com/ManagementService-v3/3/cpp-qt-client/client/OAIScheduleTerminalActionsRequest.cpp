/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleTerminalActionsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleTerminalActionsRequest::OAIScheduleTerminalActionsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleTerminalActionsRequest::OAIScheduleTerminalActionsRequest() {
    this->initializeModel();
}

OAIScheduleTerminalActionsRequest::~OAIScheduleTerminalActionsRequest() {}

void OAIScheduleTerminalActionsRequest::initializeModel() {

    m_action_details_isSet = false;
    m_action_details_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_terminal_ids_isSet = false;
    m_terminal_ids_isValid = false;
}

void OAIScheduleTerminalActionsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleTerminalActionsRequest::fromJsonObject(QJsonObject json) {

    m_action_details_isValid = ::OpenAPI::fromJsonValue(m_action_details, json[QString("actionDetails")]);
    m_action_details_isSet = !json[QString("actionDetails")].isNull() && m_action_details_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduledAt")]);
    m_scheduled_at_isSet = !json[QString("scheduledAt")].isNull() && m_scheduled_at_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;

    m_terminal_ids_isValid = ::OpenAPI::fromJsonValue(m_terminal_ids, json[QString("terminalIds")]);
    m_terminal_ids_isSet = !json[QString("terminalIds")].isNull() && m_terminal_ids_isValid;
}

QString OAIScheduleTerminalActionsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleTerminalActionsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_action_details.isSet()) {
        obj.insert(QString("actionDetails"), ::OpenAPI::toJsonValue(m_action_details));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduledAt"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_terminal_ids.size() > 0) {
        obj.insert(QString("terminalIds"), ::OpenAPI::toJsonValue(m_terminal_ids));
    }
    return obj;
}

OAIScheduleTerminalActionsRequest_actionDetails OAIScheduleTerminalActionsRequest::getActionDetails() const {
    return m_action_details;
}
void OAIScheduleTerminalActionsRequest::setActionDetails(const OAIScheduleTerminalActionsRequest_actionDetails &action_details) {
    m_action_details = action_details;
    m_action_details_isSet = true;
}

bool OAIScheduleTerminalActionsRequest::is_action_details_Set() const{
    return m_action_details_isSet;
}

bool OAIScheduleTerminalActionsRequest::is_action_details_Valid() const{
    return m_action_details_isValid;
}

QString OAIScheduleTerminalActionsRequest::getScheduledAt() const {
    return m_scheduled_at;
}
void OAIScheduleTerminalActionsRequest::setScheduledAt(const QString &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAIScheduleTerminalActionsRequest::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAIScheduleTerminalActionsRequest::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

QString OAIScheduleTerminalActionsRequest::getStoreId() const {
    return m_store_id;
}
void OAIScheduleTerminalActionsRequest::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIScheduleTerminalActionsRequest::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIScheduleTerminalActionsRequest::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QList<QString> OAIScheduleTerminalActionsRequest::getTerminalIds() const {
    return m_terminal_ids;
}
void OAIScheduleTerminalActionsRequest::setTerminalIds(const QList<QString> &terminal_ids) {
    m_terminal_ids = terminal_ids;
    m_terminal_ids_isSet = true;
}

bool OAIScheduleTerminalActionsRequest::is_terminal_ids_Set() const{
    return m_terminal_ids_isSet;
}

bool OAIScheduleTerminalActionsRequest::is_terminal_ids_Valid() const{
    return m_terminal_ids_isValid;
}

bool OAIScheduleTerminalActionsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleTerminalActionsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
