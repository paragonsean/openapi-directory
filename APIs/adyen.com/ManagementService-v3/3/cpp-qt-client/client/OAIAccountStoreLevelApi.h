/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountStoreLevelApi_H
#define OAI_OAIAccountStoreLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIListStoresResponse.h"
#include "OAIRestServiceError.h"
#include "OAIStore.h"
#include "OAIStoreCreationRequest.h"
#include "OAIStoreCreationWithMerchantCodeRequest.h"
#include "OAIUpdateStoreRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountStoreLevelApi : public QObject {
    Q_OBJECT

public:
    OAIAccountStoreLevelApi(const int timeOut = 0);
    ~OAIAccountStoreLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  reference QString [optional]
    */
    virtual void getMerchantsMerchantIdStores(const QString &merchant_id, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &reference = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  store_id QString [required]
    */
    virtual void getMerchantsMerchantIdStoresStoreId(const QString &merchant_id, const QString &store_id);

    /**
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  reference QString [optional]
    * @param[in]  merchant_id QString [optional]
    */
    virtual void getStores(const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &merchant_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  store_id QString [required]
    */
    virtual void getStoresStoreId(const QString &store_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  store_id QString [required]
    * @param[in]  oai_update_store_request OAIUpdateStoreRequest [optional]
    */
    virtual void patchMerchantsMerchantIdStoresStoreId(const QString &merchant_id, const QString &store_id, const ::OpenAPI::OptionalParam<OAIUpdateStoreRequest> &oai_update_store_request = ::OpenAPI::OptionalParam<OAIUpdateStoreRequest>());

    /**
    * @param[in]  store_id QString [required]
    * @param[in]  oai_update_store_request OAIUpdateStoreRequest [optional]
    */
    virtual void patchStoresStoreId(const QString &store_id, const ::OpenAPI::OptionalParam<OAIUpdateStoreRequest> &oai_update_store_request = ::OpenAPI::OptionalParam<OAIUpdateStoreRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_store_creation_request OAIStoreCreationRequest [optional]
    */
    virtual void postMerchantsMerchantIdStores(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAIStoreCreationRequest> &oai_store_creation_request = ::OpenAPI::OptionalParam<OAIStoreCreationRequest>());

    /**
    * @param[in]  oai_store_creation_with_merchant_code_request OAIStoreCreationWithMerchantCodeRequest [optional]
    */
    virtual void postStores(const ::OpenAPI::OptionalParam<OAIStoreCreationWithMerchantCodeRequest> &oai_store_creation_with_merchant_code_request = ::OpenAPI::OptionalParam<OAIStoreCreationWithMerchantCodeRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMerchantsMerchantIdStoresCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdStoresStoreIdCallback(OAIHttpRequestWorker *worker);
    void getStoresCallback(OAIHttpRequestWorker *worker);
    void getStoresStoreIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdStoresStoreIdCallback(OAIHttpRequestWorker *worker);
    void patchStoresStoreIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdStoresCallback(OAIHttpRequestWorker *worker);
    void postStoresCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMerchantsMerchantIdStoresSignal(OAIListStoresResponse summary);
    void getMerchantsMerchantIdStoresStoreIdSignal(OAIStore summary);
    void getStoresSignal(OAIListStoresResponse summary);
    void getStoresStoreIdSignal(OAIStore summary);
    void patchMerchantsMerchantIdStoresStoreIdSignal(OAIStore summary);
    void patchStoresStoreIdSignal(OAIStore summary);
    void postMerchantsMerchantIdStoresSignal(OAIStore summary);
    void postStoresSignal(OAIStore summary);


    void getMerchantsMerchantIdStoresSignalFull(OAIHttpRequestWorker *worker, OAIListStoresResponse summary);
    void getMerchantsMerchantIdStoresStoreIdSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);
    void getStoresSignalFull(OAIHttpRequestWorker *worker, OAIListStoresResponse summary);
    void getStoresStoreIdSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);
    void patchMerchantsMerchantIdStoresStoreIdSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);
    void patchStoresStoreIdSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);
    void postMerchantsMerchantIdStoresSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);
    void postStoresSignalFull(OAIHttpRequestWorker *worker, OAIStore summary);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresSignalError() instead")
    void getMerchantsMerchantIdStoresSignalE(OAIListStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresSignalError(OAIListStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresStoreIdSignalError() instead")
    void getMerchantsMerchantIdStoresStoreIdSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresStoreIdSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresSignalError() instead")
    void getStoresSignalE(OAIListStoresResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresSignalError(OAIListStoresResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdSignalError() instead")
    void getStoresStoreIdSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresStoreIdSignalError() instead")
    void patchMerchantsMerchantIdStoresStoreIdSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresStoreIdSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdSignalError() instead")
    void patchStoresStoreIdSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdStoresSignalError() instead")
    void postMerchantsMerchantIdStoresSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdStoresSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postStoresSignalError() instead")
    void postStoresSignalE(OAIStore summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoresSignalError(OAIStore summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresSignalErrorFull() instead")
    void getMerchantsMerchantIdStoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdStoresStoreIdSignalErrorFull() instead")
    void getMerchantsMerchantIdStoresStoreIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdStoresStoreIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresSignalErrorFull() instead")
    void getStoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStoresStoreIdSignalErrorFull() instead")
    void getStoresStoreIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStoresStoreIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdStoresStoreIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdStoresStoreIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdStoresStoreIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchStoresStoreIdSignalErrorFull() instead")
    void patchStoresStoreIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchStoresStoreIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdStoresSignalErrorFull() instead")
    void postMerchantsMerchantIdStoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdStoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postStoresSignalErrorFull() instead")
    void postStoresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postStoresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
