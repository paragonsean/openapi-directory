/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISplitConfigurationLogic.h
 *
 * 
 */

#ifndef OAISplitConfigurationLogic_H
#define OAISplitConfigurationLogic_H

#include <QJsonObject>

#include "OAIAdditionalCommission.h"
#include "OAICommission.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdditionalCommission;
class OAICommission;

class OAISplitConfigurationLogic : public OAIObject {
public:
    OAISplitConfigurationLogic();
    OAISplitConfigurationLogic(QString json);
    ~OAISplitConfigurationLogic() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcquiringFees() const;
    void setAcquiringFees(const QString &acquiring_fees);
    bool is_acquiring_fees_Set() const;
    bool is_acquiring_fees_Valid() const;

    OAIAdditionalCommission getAdditionalCommission() const;
    void setAdditionalCommission(const OAIAdditionalCommission &additional_commission);
    bool is_additional_commission_Set() const;
    bool is_additional_commission_Valid() const;

    QString getAdyenCommission() const;
    void setAdyenCommission(const QString &adyen_commission);
    bool is_adyen_commission_Set() const;
    bool is_adyen_commission_Valid() const;

    QString getAdyenFees() const;
    void setAdyenFees(const QString &adyen_fees);
    bool is_adyen_fees_Set() const;
    bool is_adyen_fees_Valid() const;

    QString getAdyenMarkup() const;
    void setAdyenMarkup(const QString &adyen_markup);
    bool is_adyen_markup_Set() const;
    bool is_adyen_markup_Valid() const;

    QString getChargeback() const;
    void setChargeback(const QString &chargeback);
    bool is_chargeback_Set() const;
    bool is_chargeback_Valid() const;

    QString getChargebackCostAllocation() const;
    void setChargebackCostAllocation(const QString &chargeback_cost_allocation);
    bool is_chargeback_cost_allocation_Set() const;
    bool is_chargeback_cost_allocation_Valid() const;

    OAICommission getCommission() const;
    void setCommission(const OAICommission &commission);
    bool is_commission_Set() const;
    bool is_commission_Valid() const;

    QString getInterchange() const;
    void setInterchange(const QString &interchange);
    bool is_interchange_Set() const;
    bool is_interchange_Valid() const;

    QString getPaymentFee() const;
    void setPaymentFee(const QString &payment_fee);
    bool is_payment_fee_Set() const;
    bool is_payment_fee_Valid() const;

    QString getRemainder() const;
    void setRemainder(const QString &remainder);
    bool is_remainder_Set() const;
    bool is_remainder_Valid() const;

    QString getSchemeFee() const;
    void setSchemeFee(const QString &scheme_fee);
    bool is_scheme_fee_Set() const;
    bool is_scheme_fee_Valid() const;

    QString getSplitLogicId() const;
    void setSplitLogicId(const QString &split_logic_id);
    bool is_split_logic_id_Set() const;
    bool is_split_logic_id_Valid() const;

    QString getSurcharge() const;
    void setSurcharge(const QString &surcharge);
    bool is_surcharge_Set() const;
    bool is_surcharge_Valid() const;

    QString getTip() const;
    void setTip(const QString &tip);
    bool is_tip_Set() const;
    bool is_tip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acquiring_fees;
    bool m_acquiring_fees_isSet;
    bool m_acquiring_fees_isValid;

    OAIAdditionalCommission m_additional_commission;
    bool m_additional_commission_isSet;
    bool m_additional_commission_isValid;

    QString m_adyen_commission;
    bool m_adyen_commission_isSet;
    bool m_adyen_commission_isValid;

    QString m_adyen_fees;
    bool m_adyen_fees_isSet;
    bool m_adyen_fees_isValid;

    QString m_adyen_markup;
    bool m_adyen_markup_isSet;
    bool m_adyen_markup_isValid;

    QString m_chargeback;
    bool m_chargeback_isSet;
    bool m_chargeback_isValid;

    QString m_chargeback_cost_allocation;
    bool m_chargeback_cost_allocation_isSet;
    bool m_chargeback_cost_allocation_isValid;

    OAICommission m_commission;
    bool m_commission_isSet;
    bool m_commission_isValid;

    QString m_interchange;
    bool m_interchange_isSet;
    bool m_interchange_isValid;

    QString m_payment_fee;
    bool m_payment_fee_isSet;
    bool m_payment_fee_isValid;

    QString m_remainder;
    bool m_remainder_isSet;
    bool m_remainder_isValid;

    QString m_scheme_fee;
    bool m_scheme_fee_isSet;
    bool m_scheme_fee_isValid;

    QString m_split_logic_id;
    bool m_split_logic_id_isSet;
    bool m_split_logic_id_isValid;

    QString m_surcharge;
    bool m_surcharge_isSet;
    bool m_surcharge_isValid;

    QString m_tip;
    bool m_tip_isSet;
    bool m_tip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISplitConfigurationLogic)

#endif // OAISplitConfigurationLogic_H
