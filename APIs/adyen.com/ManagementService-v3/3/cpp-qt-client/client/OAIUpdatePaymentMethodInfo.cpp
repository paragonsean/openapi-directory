/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatePaymentMethodInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatePaymentMethodInfo::OAIUpdatePaymentMethodInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatePaymentMethodInfo::OAIUpdatePaymentMethodInfo() {
    this->initializeModel();
}

OAIUpdatePaymentMethodInfo::~OAIUpdatePaymentMethodInfo() {}

void OAIUpdatePaymentMethodInfo::initializeModel() {

    m_bcmc_isSet = false;
    m_bcmc_isValid = false;

    m_cartes_bancaires_isSet = false;
    m_cartes_bancaires_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_cup_isSet = false;
    m_cup_isValid = false;

    m_currencies_isSet = false;
    m_currencies_isValid = false;

    m_custom_routing_flags_isSet = false;
    m_custom_routing_flags_isValid = false;

    m_diners_isSet = false;
    m_diners_isValid = false;

    m_discover_isSet = false;
    m_discover_isValid = false;

    m_eftpos_australia_isSet = false;
    m_eftpos_australia_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_girocard_isSet = false;
    m_girocard_isValid = false;

    m_ideal_isSet = false;
    m_ideal_isValid = false;

    m_interac_card_isSet = false;
    m_interac_card_isValid = false;

    m_jcb_isSet = false;
    m_jcb_isValid = false;

    m_maestro_isSet = false;
    m_maestro_isValid = false;

    m_mc_isSet = false;
    m_mc_isValid = false;

    m_store_ids_isSet = false;
    m_store_ids_isValid = false;

    m_visa_isSet = false;
    m_visa_isValid = false;
}

void OAIUpdatePaymentMethodInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatePaymentMethodInfo::fromJsonObject(QJsonObject json) {

    m_bcmc_isValid = ::OpenAPI::fromJsonValue(m_bcmc, json[QString("bcmc")]);
    m_bcmc_isSet = !json[QString("bcmc")].isNull() && m_bcmc_isValid;

    m_cartes_bancaires_isValid = ::OpenAPI::fromJsonValue(m_cartes_bancaires, json[QString("cartesBancaires")]);
    m_cartes_bancaires_isSet = !json[QString("cartesBancaires")].isNull() && m_cartes_bancaires_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_cup_isValid = ::OpenAPI::fromJsonValue(m_cup, json[QString("cup")]);
    m_cup_isSet = !json[QString("cup")].isNull() && m_cup_isValid;

    m_currencies_isValid = ::OpenAPI::fromJsonValue(m_currencies, json[QString("currencies")]);
    m_currencies_isSet = !json[QString("currencies")].isNull() && m_currencies_isValid;

    m_custom_routing_flags_isValid = ::OpenAPI::fromJsonValue(m_custom_routing_flags, json[QString("customRoutingFlags")]);
    m_custom_routing_flags_isSet = !json[QString("customRoutingFlags")].isNull() && m_custom_routing_flags_isValid;

    m_diners_isValid = ::OpenAPI::fromJsonValue(m_diners, json[QString("diners")]);
    m_diners_isSet = !json[QString("diners")].isNull() && m_diners_isValid;

    m_discover_isValid = ::OpenAPI::fromJsonValue(m_discover, json[QString("discover")]);
    m_discover_isSet = !json[QString("discover")].isNull() && m_discover_isValid;

    m_eftpos_australia_isValid = ::OpenAPI::fromJsonValue(m_eftpos_australia, json[QString("eftpos_australia")]);
    m_eftpos_australia_isSet = !json[QString("eftpos_australia")].isNull() && m_eftpos_australia_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_girocard_isValid = ::OpenAPI::fromJsonValue(m_girocard, json[QString("girocard")]);
    m_girocard_isSet = !json[QString("girocard")].isNull() && m_girocard_isValid;

    m_ideal_isValid = ::OpenAPI::fromJsonValue(m_ideal, json[QString("ideal")]);
    m_ideal_isSet = !json[QString("ideal")].isNull() && m_ideal_isValid;

    m_interac_card_isValid = ::OpenAPI::fromJsonValue(m_interac_card, json[QString("interac_card")]);
    m_interac_card_isSet = !json[QString("interac_card")].isNull() && m_interac_card_isValid;

    m_jcb_isValid = ::OpenAPI::fromJsonValue(m_jcb, json[QString("jcb")]);
    m_jcb_isSet = !json[QString("jcb")].isNull() && m_jcb_isValid;

    m_maestro_isValid = ::OpenAPI::fromJsonValue(m_maestro, json[QString("maestro")]);
    m_maestro_isSet = !json[QString("maestro")].isNull() && m_maestro_isValid;

    m_mc_isValid = ::OpenAPI::fromJsonValue(m_mc, json[QString("mc")]);
    m_mc_isSet = !json[QString("mc")].isNull() && m_mc_isValid;

    m_store_ids_isValid = ::OpenAPI::fromJsonValue(m_store_ids, json[QString("storeIds")]);
    m_store_ids_isSet = !json[QString("storeIds")].isNull() && m_store_ids_isValid;

    m_visa_isValid = ::OpenAPI::fromJsonValue(m_visa, json[QString("visa")]);
    m_visa_isSet = !json[QString("visa")].isNull() && m_visa_isValid;
}

QString OAIUpdatePaymentMethodInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatePaymentMethodInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_bcmc.isSet()) {
        obj.insert(QString("bcmc"), ::OpenAPI::toJsonValue(m_bcmc));
    }
    if (m_cartes_bancaires.isSet()) {
        obj.insert(QString("cartesBancaires"), ::OpenAPI::toJsonValue(m_cartes_bancaires));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_cup.isSet()) {
        obj.insert(QString("cup"), ::OpenAPI::toJsonValue(m_cup));
    }
    if (m_currencies.size() > 0) {
        obj.insert(QString("currencies"), ::OpenAPI::toJsonValue(m_currencies));
    }
    if (m_custom_routing_flags.size() > 0) {
        obj.insert(QString("customRoutingFlags"), ::OpenAPI::toJsonValue(m_custom_routing_flags));
    }
    if (m_diners.isSet()) {
        obj.insert(QString("diners"), ::OpenAPI::toJsonValue(m_diners));
    }
    if (m_discover.isSet()) {
        obj.insert(QString("discover"), ::OpenAPI::toJsonValue(m_discover));
    }
    if (m_eftpos_australia.isSet()) {
        obj.insert(QString("eftpos_australia"), ::OpenAPI::toJsonValue(m_eftpos_australia));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_girocard.isSet()) {
        obj.insert(QString("girocard"), ::OpenAPI::toJsonValue(m_girocard));
    }
    if (m_ideal.isSet()) {
        obj.insert(QString("ideal"), ::OpenAPI::toJsonValue(m_ideal));
    }
    if (m_interac_card.isSet()) {
        obj.insert(QString("interac_card"), ::OpenAPI::toJsonValue(m_interac_card));
    }
    if (m_jcb.isSet()) {
        obj.insert(QString("jcb"), ::OpenAPI::toJsonValue(m_jcb));
    }
    if (m_maestro.isSet()) {
        obj.insert(QString("maestro"), ::OpenAPI::toJsonValue(m_maestro));
    }
    if (m_mc.isSet()) {
        obj.insert(QString("mc"), ::OpenAPI::toJsonValue(m_mc));
    }
    if (m_store_ids.size() > 0) {
        obj.insert(QString("storeIds"), ::OpenAPI::toJsonValue(m_store_ids));
    }
    if (m_visa.isSet()) {
        obj.insert(QString("visa"), ::OpenAPI::toJsonValue(m_visa));
    }
    return obj;
}

OAIBcmcInfo OAIUpdatePaymentMethodInfo::getBcmc() const {
    return m_bcmc;
}
void OAIUpdatePaymentMethodInfo::setBcmc(const OAIBcmcInfo &bcmc) {
    m_bcmc = bcmc;
    m_bcmc_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_bcmc_Set() const{
    return m_bcmc_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_bcmc_Valid() const{
    return m_bcmc_isValid;
}

OAICartesBancairesInfo OAIUpdatePaymentMethodInfo::getCartesBancaires() const {
    return m_cartes_bancaires;
}
void OAIUpdatePaymentMethodInfo::setCartesBancaires(const OAICartesBancairesInfo &cartes_bancaires) {
    m_cartes_bancaires = cartes_bancaires;
    m_cartes_bancaires_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_cartes_bancaires_Set() const{
    return m_cartes_bancaires_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_cartes_bancaires_Valid() const{
    return m_cartes_bancaires_isValid;
}

QList<QString> OAIUpdatePaymentMethodInfo::getCountries() const {
    return m_countries;
}
void OAIUpdatePaymentMethodInfo::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_countries_Valid() const{
    return m_countries_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getCup() const {
    return m_cup;
}
void OAIUpdatePaymentMethodInfo::setCup(const OAIGenericPmWithTdiInfo &cup) {
    m_cup = cup;
    m_cup_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_cup_Set() const{
    return m_cup_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_cup_Valid() const{
    return m_cup_isValid;
}

QList<QString> OAIUpdatePaymentMethodInfo::getCurrencies() const {
    return m_currencies;
}
void OAIUpdatePaymentMethodInfo::setCurrencies(const QList<QString> &currencies) {
    m_currencies = currencies;
    m_currencies_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_currencies_Set() const{
    return m_currencies_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_currencies_Valid() const{
    return m_currencies_isValid;
}

QList<QString> OAIUpdatePaymentMethodInfo::getCustomRoutingFlags() const {
    return m_custom_routing_flags;
}
void OAIUpdatePaymentMethodInfo::setCustomRoutingFlags(const QList<QString> &custom_routing_flags) {
    m_custom_routing_flags = custom_routing_flags;
    m_custom_routing_flags_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_custom_routing_flags_Set() const{
    return m_custom_routing_flags_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_custom_routing_flags_Valid() const{
    return m_custom_routing_flags_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getDiners() const {
    return m_diners;
}
void OAIUpdatePaymentMethodInfo::setDiners(const OAIGenericPmWithTdiInfo &diners) {
    m_diners = diners;
    m_diners_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_diners_Set() const{
    return m_diners_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_diners_Valid() const{
    return m_diners_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getDiscover() const {
    return m_discover;
}
void OAIUpdatePaymentMethodInfo::setDiscover(const OAIGenericPmWithTdiInfo &discover) {
    m_discover = discover;
    m_discover_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_discover_Set() const{
    return m_discover_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_discover_Valid() const{
    return m_discover_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getEftposAustralia() const {
    return m_eftpos_australia;
}
void OAIUpdatePaymentMethodInfo::setEftposAustralia(const OAIGenericPmWithTdiInfo &eftpos_australia) {
    m_eftpos_australia = eftpos_australia;
    m_eftpos_australia_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_eftpos_australia_Set() const{
    return m_eftpos_australia_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_eftpos_australia_Valid() const{
    return m_eftpos_australia_isValid;
}

bool OAIUpdatePaymentMethodInfo::isEnabled() const {
    return m_enabled;
}
void OAIUpdatePaymentMethodInfo::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getGirocard() const {
    return m_girocard;
}
void OAIUpdatePaymentMethodInfo::setGirocard(const OAIGenericPmWithTdiInfo &girocard) {
    m_girocard = girocard;
    m_girocard_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_girocard_Set() const{
    return m_girocard_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_girocard_Valid() const{
    return m_girocard_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getIdeal() const {
    return m_ideal;
}
void OAIUpdatePaymentMethodInfo::setIdeal(const OAIGenericPmWithTdiInfo &ideal) {
    m_ideal = ideal;
    m_ideal_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_ideal_Set() const{
    return m_ideal_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_ideal_Valid() const{
    return m_ideal_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getInteracCard() const {
    return m_interac_card;
}
void OAIUpdatePaymentMethodInfo::setInteracCard(const OAIGenericPmWithTdiInfo &interac_card) {
    m_interac_card = interac_card;
    m_interac_card_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_interac_card_Set() const{
    return m_interac_card_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_interac_card_Valid() const{
    return m_interac_card_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getJcb() const {
    return m_jcb;
}
void OAIUpdatePaymentMethodInfo::setJcb(const OAIGenericPmWithTdiInfo &jcb) {
    m_jcb = jcb;
    m_jcb_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_jcb_Set() const{
    return m_jcb_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_jcb_Valid() const{
    return m_jcb_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getMaestro() const {
    return m_maestro;
}
void OAIUpdatePaymentMethodInfo::setMaestro(const OAIGenericPmWithTdiInfo &maestro) {
    m_maestro = maestro;
    m_maestro_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_maestro_Set() const{
    return m_maestro_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_maestro_Valid() const{
    return m_maestro_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getMc() const {
    return m_mc;
}
void OAIUpdatePaymentMethodInfo::setMc(const OAIGenericPmWithTdiInfo &mc) {
    m_mc = mc;
    m_mc_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_mc_Set() const{
    return m_mc_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_mc_Valid() const{
    return m_mc_isValid;
}

QList<QString> OAIUpdatePaymentMethodInfo::getStoreIds() const {
    return m_store_ids;
}
void OAIUpdatePaymentMethodInfo::setStoreIds(const QList<QString> &store_ids) {
    m_store_ids = store_ids;
    m_store_ids_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_store_ids_Set() const{
    return m_store_ids_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_store_ids_Valid() const{
    return m_store_ids_isValid;
}

OAIGenericPmWithTdiInfo OAIUpdatePaymentMethodInfo::getVisa() const {
    return m_visa;
}
void OAIUpdatePaymentMethodInfo::setVisa(const OAIGenericPmWithTdiInfo &visa) {
    m_visa = visa;
    m_visa_isSet = true;
}

bool OAIUpdatePaymentMethodInfo::is_visa_Set() const{
    return m_visa_isSet;
}

bool OAIUpdatePaymentMethodInfo::is_visa_Valid() const{
    return m_visa_isValid;
}

bool OAIUpdatePaymentMethodInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bcmc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cartes_bancaires.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_routing_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_diners.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_discover.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_eftpos_australia.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_girocard.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ideal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interac_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_jcb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maestro.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visa.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatePaymentMethodInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
