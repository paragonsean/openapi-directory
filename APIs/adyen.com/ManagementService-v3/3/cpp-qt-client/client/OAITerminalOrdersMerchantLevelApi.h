/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITerminalOrdersMerchantLevelApi_H
#define OAI_OAITerminalOrdersMerchantLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillingEntitiesResponse.h"
#include "OAIRestServiceError.h"
#include "OAIShippingLocation.h"
#include "OAIShippingLocationsResponse.h"
#include "OAITerminalModelsResponse.h"
#include "OAITerminalOrder.h"
#include "OAITerminalOrderRequest.h"
#include "OAITerminalOrdersResponse.h"
#include "OAITerminalProductsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITerminalOrdersMerchantLevelApi : public QObject {
    Q_OBJECT

public:
    OAITerminalOrdersMerchantLevelApi(const int timeOut = 0);
    ~OAITerminalOrdersMerchantLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  name QString [optional]
    */
    virtual void getMerchantsMerchantIdBillingEntities(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMerchantsMerchantIdShippingLocations(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  merchant_id QString [required]
    */
    virtual void getMerchantsMerchantIdTerminalModels(const QString &merchant_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  customer_order_reference QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMerchantsMerchantIdTerminalOrders(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &customer_order_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getMerchantsMerchantIdTerminalOrdersOrderId(const QString &merchant_id, const QString &order_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  country QString [required]
    * @param[in]  terminal_model_id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getMerchantsMerchantIdTerminalProducts(const QString &merchant_id, const QString &country, const ::OpenAPI::OptionalParam<QString> &terminal_model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_terminal_order_request OAITerminalOrderRequest [optional]
    */
    virtual void patchMerchantsMerchantIdTerminalOrdersOrderId(const QString &merchant_id, const QString &order_id, const ::OpenAPI::OptionalParam<OAITerminalOrderRequest> &oai_terminal_order_request = ::OpenAPI::OptionalParam<OAITerminalOrderRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_shipping_location OAIShippingLocation [optional]
    */
    virtual void postMerchantsMerchantIdShippingLocations(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAIShippingLocation> &oai_shipping_location = ::OpenAPI::OptionalParam<OAIShippingLocation>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_terminal_order_request OAITerminalOrderRequest [optional]
    */
    virtual void postMerchantsMerchantIdTerminalOrders(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAITerminalOrderRequest> &oai_terminal_order_request = ::OpenAPI::OptionalParam<OAITerminalOrderRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void postMerchantsMerchantIdTerminalOrdersOrderIdCancel(const QString &merchant_id, const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMerchantsMerchantIdBillingEntitiesCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdShippingLocationsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdTerminalModelsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdTerminalOrdersCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdTerminalOrdersOrderIdCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdTerminalProductsCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdTerminalOrdersOrderIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdShippingLocationsCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdTerminalOrdersCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMerchantsMerchantIdBillingEntitiesSignal(OAIBillingEntitiesResponse summary);
    void getMerchantsMerchantIdShippingLocationsSignal(OAIShippingLocationsResponse summary);
    void getMerchantsMerchantIdTerminalModelsSignal(OAITerminalModelsResponse summary);
    void getMerchantsMerchantIdTerminalOrdersSignal(OAITerminalOrdersResponse summary);
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignal(OAITerminalOrder summary);
    void getMerchantsMerchantIdTerminalProductsSignal(OAITerminalProductsResponse summary);
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignal(OAITerminalOrder summary);
    void postMerchantsMerchantIdShippingLocationsSignal(OAIShippingLocation summary);
    void postMerchantsMerchantIdTerminalOrdersSignal(OAITerminalOrder summary);
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignal(OAITerminalOrder summary);


    void getMerchantsMerchantIdBillingEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIBillingEntitiesResponse summary);
    void getMerchantsMerchantIdShippingLocationsSignalFull(OAIHttpRequestWorker *worker, OAIShippingLocationsResponse summary);
    void getMerchantsMerchantIdTerminalModelsSignalFull(OAIHttpRequestWorker *worker, OAITerminalModelsResponse summary);
    void getMerchantsMerchantIdTerminalOrdersSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrdersResponse summary);
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void getMerchantsMerchantIdTerminalProductsSignalFull(OAIHttpRequestWorker *worker, OAITerminalProductsResponse summary);
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void postMerchantsMerchantIdShippingLocationsSignalFull(OAIHttpRequestWorker *worker, OAIShippingLocation summary);
    void postMerchantsMerchantIdTerminalOrdersSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdBillingEntitiesSignalError() instead")
    void getMerchantsMerchantIdBillingEntitiesSignalE(OAIBillingEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdBillingEntitiesSignalError(OAIBillingEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdShippingLocationsSignalError() instead")
    void getMerchantsMerchantIdShippingLocationsSignalE(OAIShippingLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdShippingLocationsSignalError(OAIShippingLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalModelsSignalError() instead")
    void getMerchantsMerchantIdTerminalModelsSignalE(OAITerminalModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalModelsSignalError(OAITerminalModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalOrdersSignalError() instead")
    void getMerchantsMerchantIdTerminalOrdersSignalE(OAITerminalOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalOrdersSignalError(OAITerminalOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalOrdersOrderIdSignalError() instead")
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalProductsSignalError() instead")
    void getMerchantsMerchantIdTerminalProductsSignalE(OAITerminalProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalProductsSignalError(OAITerminalProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdTerminalOrdersOrderIdSignalError() instead")
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdShippingLocationsSignalError() instead")
    void postMerchantsMerchantIdShippingLocationsSignalE(OAIShippingLocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdShippingLocationsSignalError(OAIShippingLocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdTerminalOrdersSignalError() instead")
    void postMerchantsMerchantIdTerminalOrdersSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdTerminalOrdersSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalError() instead")
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdBillingEntitiesSignalErrorFull() instead")
    void getMerchantsMerchantIdBillingEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdBillingEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdShippingLocationsSignalErrorFull() instead")
    void getMerchantsMerchantIdShippingLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdShippingLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalModelsSignalErrorFull() instead")
    void getMerchantsMerchantIdTerminalModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalOrdersSignalErrorFull() instead")
    void getMerchantsMerchantIdTerminalOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalOrdersOrderIdSignalErrorFull() instead")
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalOrdersOrderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdTerminalProductsSignalErrorFull() instead")
    void getMerchantsMerchantIdTerminalProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdTerminalProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdTerminalOrdersOrderIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdTerminalOrdersOrderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdShippingLocationsSignalErrorFull() instead")
    void postMerchantsMerchantIdShippingLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdShippingLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdTerminalOrdersSignalErrorFull() instead")
    void postMerchantsMerchantIdTerminalOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdTerminalOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalErrorFull() instead")
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdTerminalOrdersOrderIdCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
