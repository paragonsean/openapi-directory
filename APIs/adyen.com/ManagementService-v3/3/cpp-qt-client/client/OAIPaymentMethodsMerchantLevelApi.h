/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentMethodsMerchantLevelApi_H
#define OAI_OAIPaymentMethodsMerchantLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplePayInfo.h"
#include "OAIPaymentMethod.h"
#include "OAIPaymentMethodResponse.h"
#include "OAIPaymentMethodSetupInfo.h"
#include "OAIRestServiceError.h"
#include "OAIUpdatePaymentMethodInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentMethodsMerchantLevelApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentMethodsMerchantLevelApi(const int timeOut = 0);
    ~OAIPaymentMethodsMerchantLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  store_id QString [optional]
    * @param[in]  business_line_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_number qint32 [optional]
    */
    virtual void getMerchantsMerchantIdPaymentMethodSettings(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &store_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &business_line_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payment_method_id QString [required]
    */
    virtual void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(const QString &merchant_id, const QString &payment_method_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payment_method_id QString [required]
    */
    virtual void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains(const QString &merchant_id, const QString &payment_method_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payment_method_id QString [required]
    * @param[in]  oai_update_payment_method_info OAIUpdatePaymentMethodInfo [optional]
    */
    virtual void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(const QString &merchant_id, const QString &payment_method_id, const ::OpenAPI::OptionalParam<OAIUpdatePaymentMethodInfo> &oai_update_payment_method_info = ::OpenAPI::OptionalParam<OAIUpdatePaymentMethodInfo>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_payment_method_setup_info OAIPaymentMethodSetupInfo [optional]
    */
    virtual void postMerchantsMerchantIdPaymentMethodSettings(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAIPaymentMethodSetupInfo> &oai_payment_method_setup_info = ::OpenAPI::OptionalParam<OAIPaymentMethodSetupInfo>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payment_method_id QString [required]
    * @param[in]  oai_apple_pay_info OAIApplePayInfo [optional]
    */
    virtual void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains(const QString &merchant_id, const QString &payment_method_id, const ::OpenAPI::OptionalParam<OAIApplePayInfo> &oai_apple_pay_info = ::OpenAPI::OptionalParam<OAIApplePayInfo>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMerchantsMerchantIdPaymentMethodSettingsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdPaymentMethodSettingsCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMerchantsMerchantIdPaymentMethodSettingsSignal(OAIPaymentMethodResponse summary);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignal(OAIPaymentMethod summary);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignal(OAIApplePayInfo summary);
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignal(OAIPaymentMethod summary);
    void postMerchantsMerchantIdPaymentMethodSettingsSignal(OAIPaymentMethod summary);
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignal();


    void getMerchantsMerchantIdPaymentMethodSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethodResponse summary);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalFull(OAIHttpRequestWorker *worker, OAIApplePayInfo summary);
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void postMerchantsMerchantIdPaymentMethodSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethod summary);
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsSignalError() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsSignalE(OAIPaymentMethodResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsSignalError(OAIPaymentMethodResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalError() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalE(OAIApplePayInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalError(OAIApplePayInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError() instead")
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPaymentMethodSettingsSignalError() instead")
    void postMerchantsMerchantIdPaymentMethodSettingsSignalE(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPaymentMethodSettingsSignalError(OAIPaymentMethod summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalError() instead")
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalErrorFull() instead")
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull() instead")
    void postMerchantsMerchantIdPaymentMethodSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalErrorFull() instead")
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
