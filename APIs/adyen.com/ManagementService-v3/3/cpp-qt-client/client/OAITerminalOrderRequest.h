/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITerminalOrderRequest.h
 *
 * 
 */

#ifndef OAITerminalOrderRequest_H
#define OAITerminalOrderRequest_H

#include <QJsonObject>

#include "OAIOrderItem.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrderItem;

class OAITerminalOrderRequest : public OAIObject {
public:
    OAITerminalOrderRequest();
    OAITerminalOrderRequest(QString json);
    ~OAITerminalOrderRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBillingEntityId() const;
    void setBillingEntityId(const QString &billing_entity_id);
    bool is_billing_entity_id_Set() const;
    bool is_billing_entity_id_Valid() const;

    QString getCustomerOrderReference() const;
    void setCustomerOrderReference(const QString &customer_order_reference);
    bool is_customer_order_reference_Set() const;
    bool is_customer_order_reference_Valid() const;

    QList<OAIOrderItem> getItems() const;
    void setItems(const QList<OAIOrderItem> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getOrderType() const;
    void setOrderType(const QString &order_type);
    bool is_order_type_Set() const;
    bool is_order_type_Valid() const;

    QString getShippingLocationId() const;
    void setShippingLocationId(const QString &shipping_location_id);
    bool is_shipping_location_id_Set() const;
    bool is_shipping_location_id_Valid() const;

    QString getTaxId() const;
    void setTaxId(const QString &tax_id);
    bool is_tax_id_Set() const;
    bool is_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_billing_entity_id;
    bool m_billing_entity_id_isSet;
    bool m_billing_entity_id_isValid;

    QString m_customer_order_reference;
    bool m_customer_order_reference_isSet;
    bool m_customer_order_reference_isValid;

    QList<OAIOrderItem> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_order_type;
    bool m_order_type_isSet;
    bool m_order_type_isValid;

    QString m_shipping_location_id;
    bool m_shipping_location_id_isSet;
    bool m_shipping_location_id_isValid;

    QString m_tax_id;
    bool m_tax_id_isSet;
    bool m_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITerminalOrderRequest)

#endif // OAITerminalOrderRequest_H
