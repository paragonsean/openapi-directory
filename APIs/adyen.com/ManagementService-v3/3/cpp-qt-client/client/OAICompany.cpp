/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany::OAICompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany::OAICompany() {
    this->initializeModel();
}

OAICompany::~OAICompany() {}

void OAICompany::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_data_centers_isSet = false;
    m_data_centers_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAICompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_data_centers_isValid = ::OpenAPI::fromJsonValue(m_data_centers, json[QString("dataCenters")]);
    m_data_centers_isSet = !json[QString("dataCenters")].isNull() && m_data_centers_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAICompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_data_centers.size() > 0) {
        obj.insert(QString("dataCenters"), ::OpenAPI::toJsonValue(m_data_centers));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAICompanyLinks OAICompany::getLinks() const {
    return m__links;
}
void OAICompany::setLinks(const OAICompanyLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICompany::is__links_Set() const{
    return m__links_isSet;
}

bool OAICompany::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIDataCenter> OAICompany::getDataCenters() const {
    return m_data_centers;
}
void OAICompany::setDataCenters(const QList<OAIDataCenter> &data_centers) {
    m_data_centers = data_centers;
    m_data_centers_isSet = true;
}

bool OAICompany::is_data_centers_Set() const{
    return m_data_centers_isSet;
}

bool OAICompany::is_data_centers_Valid() const{
    return m_data_centers_isValid;
}

QString OAICompany::getDescription() const {
    return m_description;
}
void OAICompany::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICompany::is_description_Set() const{
    return m_description_isSet;
}

bool OAICompany::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICompany::getId() const {
    return m_id;
}
void OAICompany::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICompany::is_id_Set() const{
    return m_id_isSet;
}

bool OAICompany::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICompany::getName() const {
    return m_name;
}
void OAICompany::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompany::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompany::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompany::getReference() const {
    return m_reference;
}
void OAICompany::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICompany::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICompany::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAICompany::getStatus() const {
    return m_status;
}
void OAICompany::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAICompany::is_status_Set() const{
    return m_status_isSet;
}

bool OAICompany::is_status_Valid() const{
    return m_status_isValid;
}

bool OAICompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_centers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
