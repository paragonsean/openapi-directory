/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalSettings::OAITerminalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalSettings::OAITerminalSettings() {
    this->initializeModel();
}

OAITerminalSettings::~OAITerminalSettings() {}

void OAITerminalSettings::initializeModel() {

    m_cardholder_receipt_isSet = false;
    m_cardholder_receipt_isValid = false;

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_gratuities_isSet = false;
    m_gratuities_isValid = false;

    m_hardware_isSet = false;
    m_hardware_isValid = false;

    m_localization_isSet = false;
    m_localization_isValid = false;

    m_nexo_isSet = false;
    m_nexo_isValid = false;

    m_offline_processing_isSet = false;
    m_offline_processing_isValid = false;

    m_opi_isSet = false;
    m_opi_isValid = false;

    m_passcodes_isSet = false;
    m_passcodes_isValid = false;

    m_pay_at_table_isSet = false;
    m_pay_at_table_isValid = false;

    m_payment_isSet = false;
    m_payment_isValid = false;

    m_receipt_options_isSet = false;
    m_receipt_options_isValid = false;

    m_receipt_printing_isSet = false;
    m_receipt_printing_isValid = false;

    m_refunds_isSet = false;
    m_refunds_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_standalone_isSet = false;
    m_standalone_isValid = false;

    m_surcharge_isSet = false;
    m_surcharge_isValid = false;

    m_tap_to_pay_isSet = false;
    m_tap_to_pay_isValid = false;

    m_terminal_instructions_isSet = false;
    m_terminal_instructions_isValid = false;

    m_timeouts_isSet = false;
    m_timeouts_isValid = false;

    m_wifi_profiles_isSet = false;
    m_wifi_profiles_isValid = false;
}

void OAITerminalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalSettings::fromJsonObject(QJsonObject json) {

    m_cardholder_receipt_isValid = ::OpenAPI::fromJsonValue(m_cardholder_receipt, json[QString("cardholderReceipt")]);
    m_cardholder_receipt_isSet = !json[QString("cardholderReceipt")].isNull() && m_cardholder_receipt_isValid;

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_gratuities_isValid = ::OpenAPI::fromJsonValue(m_gratuities, json[QString("gratuities")]);
    m_gratuities_isSet = !json[QString("gratuities")].isNull() && m_gratuities_isValid;

    m_hardware_isValid = ::OpenAPI::fromJsonValue(m_hardware, json[QString("hardware")]);
    m_hardware_isSet = !json[QString("hardware")].isNull() && m_hardware_isValid;

    m_localization_isValid = ::OpenAPI::fromJsonValue(m_localization, json[QString("localization")]);
    m_localization_isSet = !json[QString("localization")].isNull() && m_localization_isValid;

    m_nexo_isValid = ::OpenAPI::fromJsonValue(m_nexo, json[QString("nexo")]);
    m_nexo_isSet = !json[QString("nexo")].isNull() && m_nexo_isValid;

    m_offline_processing_isValid = ::OpenAPI::fromJsonValue(m_offline_processing, json[QString("offlineProcessing")]);
    m_offline_processing_isSet = !json[QString("offlineProcessing")].isNull() && m_offline_processing_isValid;

    m_opi_isValid = ::OpenAPI::fromJsonValue(m_opi, json[QString("opi")]);
    m_opi_isSet = !json[QString("opi")].isNull() && m_opi_isValid;

    m_passcodes_isValid = ::OpenAPI::fromJsonValue(m_passcodes, json[QString("passcodes")]);
    m_passcodes_isSet = !json[QString("passcodes")].isNull() && m_passcodes_isValid;

    m_pay_at_table_isValid = ::OpenAPI::fromJsonValue(m_pay_at_table, json[QString("payAtTable")]);
    m_pay_at_table_isSet = !json[QString("payAtTable")].isNull() && m_pay_at_table_isValid;

    m_payment_isValid = ::OpenAPI::fromJsonValue(m_payment, json[QString("payment")]);
    m_payment_isSet = !json[QString("payment")].isNull() && m_payment_isValid;

    m_receipt_options_isValid = ::OpenAPI::fromJsonValue(m_receipt_options, json[QString("receiptOptions")]);
    m_receipt_options_isSet = !json[QString("receiptOptions")].isNull() && m_receipt_options_isValid;

    m_receipt_printing_isValid = ::OpenAPI::fromJsonValue(m_receipt_printing, json[QString("receiptPrinting")]);
    m_receipt_printing_isSet = !json[QString("receiptPrinting")].isNull() && m_receipt_printing_isValid;

    m_refunds_isValid = ::OpenAPI::fromJsonValue(m_refunds, json[QString("refunds")]);
    m_refunds_isSet = !json[QString("refunds")].isNull() && m_refunds_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_standalone_isValid = ::OpenAPI::fromJsonValue(m_standalone, json[QString("standalone")]);
    m_standalone_isSet = !json[QString("standalone")].isNull() && m_standalone_isValid;

    m_surcharge_isValid = ::OpenAPI::fromJsonValue(m_surcharge, json[QString("surcharge")]);
    m_surcharge_isSet = !json[QString("surcharge")].isNull() && m_surcharge_isValid;

    m_tap_to_pay_isValid = ::OpenAPI::fromJsonValue(m_tap_to_pay, json[QString("tapToPay")]);
    m_tap_to_pay_isSet = !json[QString("tapToPay")].isNull() && m_tap_to_pay_isValid;

    m_terminal_instructions_isValid = ::OpenAPI::fromJsonValue(m_terminal_instructions, json[QString("terminalInstructions")]);
    m_terminal_instructions_isSet = !json[QString("terminalInstructions")].isNull() && m_terminal_instructions_isValid;

    m_timeouts_isValid = ::OpenAPI::fromJsonValue(m_timeouts, json[QString("timeouts")]);
    m_timeouts_isSet = !json[QString("timeouts")].isNull() && m_timeouts_isValid;

    m_wifi_profiles_isValid = ::OpenAPI::fromJsonValue(m_wifi_profiles, json[QString("wifiProfiles")]);
    m_wifi_profiles_isSet = !json[QString("wifiProfiles")].isNull() && m_wifi_profiles_isValid;
}

QString OAITerminalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_cardholder_receipt.isSet()) {
        obj.insert(QString("cardholderReceipt"), ::OpenAPI::toJsonValue(m_cardholder_receipt));
    }
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_gratuities.size() > 0) {
        obj.insert(QString("gratuities"), ::OpenAPI::toJsonValue(m_gratuities));
    }
    if (m_hardware.isSet()) {
        obj.insert(QString("hardware"), ::OpenAPI::toJsonValue(m_hardware));
    }
    if (m_localization.isSet()) {
        obj.insert(QString("localization"), ::OpenAPI::toJsonValue(m_localization));
    }
    if (m_nexo.isSet()) {
        obj.insert(QString("nexo"), ::OpenAPI::toJsonValue(m_nexo));
    }
    if (m_offline_processing.isSet()) {
        obj.insert(QString("offlineProcessing"), ::OpenAPI::toJsonValue(m_offline_processing));
    }
    if (m_opi.isSet()) {
        obj.insert(QString("opi"), ::OpenAPI::toJsonValue(m_opi));
    }
    if (m_passcodes.isSet()) {
        obj.insert(QString("passcodes"), ::OpenAPI::toJsonValue(m_passcodes));
    }
    if (m_pay_at_table.isSet()) {
        obj.insert(QString("payAtTable"), ::OpenAPI::toJsonValue(m_pay_at_table));
    }
    if (m_payment.isSet()) {
        obj.insert(QString("payment"), ::OpenAPI::toJsonValue(m_payment));
    }
    if (m_receipt_options.isSet()) {
        obj.insert(QString("receiptOptions"), ::OpenAPI::toJsonValue(m_receipt_options));
    }
    if (m_receipt_printing.isSet()) {
        obj.insert(QString("receiptPrinting"), ::OpenAPI::toJsonValue(m_receipt_printing));
    }
    if (m_refunds.isSet()) {
        obj.insert(QString("refunds"), ::OpenAPI::toJsonValue(m_refunds));
    }
    if (m_signature.isSet()) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_standalone.isSet()) {
        obj.insert(QString("standalone"), ::OpenAPI::toJsonValue(m_standalone));
    }
    if (m_surcharge.isSet()) {
        obj.insert(QString("surcharge"), ::OpenAPI::toJsonValue(m_surcharge));
    }
    if (m_tap_to_pay.isSet()) {
        obj.insert(QString("tapToPay"), ::OpenAPI::toJsonValue(m_tap_to_pay));
    }
    if (m_terminal_instructions.isSet()) {
        obj.insert(QString("terminalInstructions"), ::OpenAPI::toJsonValue(m_terminal_instructions));
    }
    if (m_timeouts.isSet()) {
        obj.insert(QString("timeouts"), ::OpenAPI::toJsonValue(m_timeouts));
    }
    if (m_wifi_profiles.isSet()) {
        obj.insert(QString("wifiProfiles"), ::OpenAPI::toJsonValue(m_wifi_profiles));
    }
    return obj;
}

OAICardholderReceipt OAITerminalSettings::getCardholderReceipt() const {
    return m_cardholder_receipt;
}
void OAITerminalSettings::setCardholderReceipt(const OAICardholderReceipt &cardholder_receipt) {
    m_cardholder_receipt = cardholder_receipt;
    m_cardholder_receipt_isSet = true;
}

bool OAITerminalSettings::is_cardholder_receipt_Set() const{
    return m_cardholder_receipt_isSet;
}

bool OAITerminalSettings::is_cardholder_receipt_Valid() const{
    return m_cardholder_receipt_isValid;
}

OAIConnectivity OAITerminalSettings::getConnectivity() const {
    return m_connectivity;
}
void OAITerminalSettings::setConnectivity(const OAIConnectivity &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAITerminalSettings::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAITerminalSettings::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

QList<OAIGratuity> OAITerminalSettings::getGratuities() const {
    return m_gratuities;
}
void OAITerminalSettings::setGratuities(const QList<OAIGratuity> &gratuities) {
    m_gratuities = gratuities;
    m_gratuities_isSet = true;
}

bool OAITerminalSettings::is_gratuities_Set() const{
    return m_gratuities_isSet;
}

bool OAITerminalSettings::is_gratuities_Valid() const{
    return m_gratuities_isValid;
}

OAIHardware OAITerminalSettings::getHardware() const {
    return m_hardware;
}
void OAITerminalSettings::setHardware(const OAIHardware &hardware) {
    m_hardware = hardware;
    m_hardware_isSet = true;
}

bool OAITerminalSettings::is_hardware_Set() const{
    return m_hardware_isSet;
}

bool OAITerminalSettings::is_hardware_Valid() const{
    return m_hardware_isValid;
}

OAILocalization OAITerminalSettings::getLocalization() const {
    return m_localization;
}
void OAITerminalSettings::setLocalization(const OAILocalization &localization) {
    m_localization = localization;
    m_localization_isSet = true;
}

bool OAITerminalSettings::is_localization_Set() const{
    return m_localization_isSet;
}

bool OAITerminalSettings::is_localization_Valid() const{
    return m_localization_isValid;
}

OAINexo OAITerminalSettings::getNexo() const {
    return m_nexo;
}
void OAITerminalSettings::setNexo(const OAINexo &nexo) {
    m_nexo = nexo;
    m_nexo_isSet = true;
}

bool OAITerminalSettings::is_nexo_Set() const{
    return m_nexo_isSet;
}

bool OAITerminalSettings::is_nexo_Valid() const{
    return m_nexo_isValid;
}

OAIOfflineProcessing OAITerminalSettings::getOfflineProcessing() const {
    return m_offline_processing;
}
void OAITerminalSettings::setOfflineProcessing(const OAIOfflineProcessing &offline_processing) {
    m_offline_processing = offline_processing;
    m_offline_processing_isSet = true;
}

bool OAITerminalSettings::is_offline_processing_Set() const{
    return m_offline_processing_isSet;
}

bool OAITerminalSettings::is_offline_processing_Valid() const{
    return m_offline_processing_isValid;
}

OAIOpi OAITerminalSettings::getOpi() const {
    return m_opi;
}
void OAITerminalSettings::setOpi(const OAIOpi &opi) {
    m_opi = opi;
    m_opi_isSet = true;
}

bool OAITerminalSettings::is_opi_Set() const{
    return m_opi_isSet;
}

bool OAITerminalSettings::is_opi_Valid() const{
    return m_opi_isValid;
}

OAIPasscodes OAITerminalSettings::getPasscodes() const {
    return m_passcodes;
}
void OAITerminalSettings::setPasscodes(const OAIPasscodes &passcodes) {
    m_passcodes = passcodes;
    m_passcodes_isSet = true;
}

bool OAITerminalSettings::is_passcodes_Set() const{
    return m_passcodes_isSet;
}

bool OAITerminalSettings::is_passcodes_Valid() const{
    return m_passcodes_isValid;
}

OAIPayAtTable OAITerminalSettings::getPayAtTable() const {
    return m_pay_at_table;
}
void OAITerminalSettings::setPayAtTable(const OAIPayAtTable &pay_at_table) {
    m_pay_at_table = pay_at_table;
    m_pay_at_table_isSet = true;
}

bool OAITerminalSettings::is_pay_at_table_Set() const{
    return m_pay_at_table_isSet;
}

bool OAITerminalSettings::is_pay_at_table_Valid() const{
    return m_pay_at_table_isValid;
}

OAIPayment OAITerminalSettings::getPayment() const {
    return m_payment;
}
void OAITerminalSettings::setPayment(const OAIPayment &payment) {
    m_payment = payment;
    m_payment_isSet = true;
}

bool OAITerminalSettings::is_payment_Set() const{
    return m_payment_isSet;
}

bool OAITerminalSettings::is_payment_Valid() const{
    return m_payment_isValid;
}

OAIReceiptOptions OAITerminalSettings::getReceiptOptions() const {
    return m_receipt_options;
}
void OAITerminalSettings::setReceiptOptions(const OAIReceiptOptions &receipt_options) {
    m_receipt_options = receipt_options;
    m_receipt_options_isSet = true;
}

bool OAITerminalSettings::is_receipt_options_Set() const{
    return m_receipt_options_isSet;
}

bool OAITerminalSettings::is_receipt_options_Valid() const{
    return m_receipt_options_isValid;
}

OAIReceiptPrinting OAITerminalSettings::getReceiptPrinting() const {
    return m_receipt_printing;
}
void OAITerminalSettings::setReceiptPrinting(const OAIReceiptPrinting &receipt_printing) {
    m_receipt_printing = receipt_printing;
    m_receipt_printing_isSet = true;
}

bool OAITerminalSettings::is_receipt_printing_Set() const{
    return m_receipt_printing_isSet;
}

bool OAITerminalSettings::is_receipt_printing_Valid() const{
    return m_receipt_printing_isValid;
}

OAIRefunds OAITerminalSettings::getRefunds() const {
    return m_refunds;
}
void OAITerminalSettings::setRefunds(const OAIRefunds &refunds) {
    m_refunds = refunds;
    m_refunds_isSet = true;
}

bool OAITerminalSettings::is_refunds_Set() const{
    return m_refunds_isSet;
}

bool OAITerminalSettings::is_refunds_Valid() const{
    return m_refunds_isValid;
}

OAISignature OAITerminalSettings::getSignature() const {
    return m_signature;
}
void OAITerminalSettings::setSignature(const OAISignature &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAITerminalSettings::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAITerminalSettings::is_signature_Valid() const{
    return m_signature_isValid;
}

OAIStandalone OAITerminalSettings::getStandalone() const {
    return m_standalone;
}
void OAITerminalSettings::setStandalone(const OAIStandalone &standalone) {
    m_standalone = standalone;
    m_standalone_isSet = true;
}

bool OAITerminalSettings::is_standalone_Set() const{
    return m_standalone_isSet;
}

bool OAITerminalSettings::is_standalone_Valid() const{
    return m_standalone_isValid;
}

OAISurcharge OAITerminalSettings::getSurcharge() const {
    return m_surcharge;
}
void OAITerminalSettings::setSurcharge(const OAISurcharge &surcharge) {
    m_surcharge = surcharge;
    m_surcharge_isSet = true;
}

bool OAITerminalSettings::is_surcharge_Set() const{
    return m_surcharge_isSet;
}

bool OAITerminalSettings::is_surcharge_Valid() const{
    return m_surcharge_isValid;
}

OAITapToPay OAITerminalSettings::getTapToPay() const {
    return m_tap_to_pay;
}
void OAITerminalSettings::setTapToPay(const OAITapToPay &tap_to_pay) {
    m_tap_to_pay = tap_to_pay;
    m_tap_to_pay_isSet = true;
}

bool OAITerminalSettings::is_tap_to_pay_Set() const{
    return m_tap_to_pay_isSet;
}

bool OAITerminalSettings::is_tap_to_pay_Valid() const{
    return m_tap_to_pay_isValid;
}

OAITerminalInstructions OAITerminalSettings::getTerminalInstructions() const {
    return m_terminal_instructions;
}
void OAITerminalSettings::setTerminalInstructions(const OAITerminalInstructions &terminal_instructions) {
    m_terminal_instructions = terminal_instructions;
    m_terminal_instructions_isSet = true;
}

bool OAITerminalSettings::is_terminal_instructions_Set() const{
    return m_terminal_instructions_isSet;
}

bool OAITerminalSettings::is_terminal_instructions_Valid() const{
    return m_terminal_instructions_isValid;
}

OAITimeouts OAITerminalSettings::getTimeouts() const {
    return m_timeouts;
}
void OAITerminalSettings::setTimeouts(const OAITimeouts &timeouts) {
    m_timeouts = timeouts;
    m_timeouts_isSet = true;
}

bool OAITerminalSettings::is_timeouts_Set() const{
    return m_timeouts_isSet;
}

bool OAITerminalSettings::is_timeouts_Valid() const{
    return m_timeouts_isValid;
}

OAIWifiProfiles OAITerminalSettings::getWifiProfiles() const {
    return m_wifi_profiles;
}
void OAITerminalSettings::setWifiProfiles(const OAIWifiProfiles &wifi_profiles) {
    m_wifi_profiles = wifi_profiles;
    m_wifi_profiles_isSet = true;
}

bool OAITerminalSettings::is_wifi_profiles_Set() const{
    return m_wifi_profiles_isSet;
}

bool OAITerminalSettings::is_wifi_profiles_Valid() const{
    return m_wifi_profiles_isValid;
}

bool OAITerminalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cardholder_receipt.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gratuities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_localization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nexo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_offline_processing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_opi.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_passcodes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_at_table.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_printing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunds.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_standalone.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tap_to_pay.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_instructions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeouts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_profiles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
