/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidCertificate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidCertificate::OAIAndroidCertificate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidCertificate::OAIAndroidCertificate() {
    this->initializeModel();
}

OAIAndroidCertificate::~OAIAndroidCertificate() {}

void OAIAndroidCertificate::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_not_after_isSet = false;
    m_not_after_isValid = false;

    m_not_before_isSet = false;
    m_not_before_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAndroidCertificate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidCertificate::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_not_after_isValid = ::OpenAPI::fromJsonValue(m_not_after, json[QString("notAfter")]);
    m_not_after_isSet = !json[QString("notAfter")].isNull() && m_not_after_isValid;

    m_not_before_isValid = ::OpenAPI::fromJsonValue(m_not_before, json[QString("notBefore")]);
    m_not_before_isSet = !json[QString("notBefore")].isNull() && m_not_before_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAndroidCertificate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidCertificate::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_not_after_isSet) {
        obj.insert(QString("notAfter"), ::OpenAPI::toJsonValue(m_not_after));
    }
    if (m_not_before_isSet) {
        obj.insert(QString("notBefore"), ::OpenAPI::toJsonValue(m_not_before));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIAndroidCertificate::getDescription() const {
    return m_description;
}
void OAIAndroidCertificate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAndroidCertificate::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAndroidCertificate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAndroidCertificate::getExtension() const {
    return m_extension;
}
void OAIAndroidCertificate::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIAndroidCertificate::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIAndroidCertificate::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIAndroidCertificate::getId() const {
    return m_id;
}
void OAIAndroidCertificate::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAndroidCertificate::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAndroidCertificate::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAndroidCertificate::getName() const {
    return m_name;
}
void OAIAndroidCertificate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIAndroidCertificate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIAndroidCertificate::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIAndroidCertificate::getNotAfter() const {
    return m_not_after;
}
void OAIAndroidCertificate::setNotAfter(const QDateTime &not_after) {
    m_not_after = not_after;
    m_not_after_isSet = true;
}

bool OAIAndroidCertificate::is_not_after_Set() const{
    return m_not_after_isSet;
}

bool OAIAndroidCertificate::is_not_after_Valid() const{
    return m_not_after_isValid;
}

QDateTime OAIAndroidCertificate::getNotBefore() const {
    return m_not_before;
}
void OAIAndroidCertificate::setNotBefore(const QDateTime &not_before) {
    m_not_before = not_before;
    m_not_before_isSet = true;
}

bool OAIAndroidCertificate::is_not_before_Set() const{
    return m_not_before_isSet;
}

bool OAIAndroidCertificate::is_not_before_Valid() const{
    return m_not_before_isValid;
}

QString OAIAndroidCertificate::getStatus() const {
    return m_status;
}
void OAIAndroidCertificate::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAndroidCertificate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAndroidCertificate::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAndroidCertificate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_after_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_before_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidCertificate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
