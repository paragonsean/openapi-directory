/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardholderReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardholderReceipt::OAICardholderReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardholderReceipt::OAICardholderReceipt() {
    this->initializeModel();
}

OAICardholderReceipt::~OAICardholderReceipt() {}

void OAICardholderReceipt::initializeModel() {

    m_header_for_authorized_receipt_isSet = false;
    m_header_for_authorized_receipt_isValid = false;
}

void OAICardholderReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardholderReceipt::fromJsonObject(QJsonObject json) {

    m_header_for_authorized_receipt_isValid = ::OpenAPI::fromJsonValue(m_header_for_authorized_receipt, json[QString("headerForAuthorizedReceipt")]);
    m_header_for_authorized_receipt_isSet = !json[QString("headerForAuthorizedReceipt")].isNull() && m_header_for_authorized_receipt_isValid;
}

QString OAICardholderReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardholderReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_header_for_authorized_receipt_isSet) {
        obj.insert(QString("headerForAuthorizedReceipt"), ::OpenAPI::toJsonValue(m_header_for_authorized_receipt));
    }
    return obj;
}

QString OAICardholderReceipt::getHeaderForAuthorizedReceipt() const {
    return m_header_for_authorized_receipt;
}
void OAICardholderReceipt::setHeaderForAuthorizedReceipt(const QString &header_for_authorized_receipt) {
    m_header_for_authorized_receipt = header_for_authorized_receipt;
    m_header_for_authorized_receipt_isSet = true;
}

bool OAICardholderReceipt::is_header_for_authorized_receipt_Set() const{
    return m_header_for_authorized_receipt_isSet;
}

bool OAICardholderReceipt::is_header_for_authorized_receipt_Valid() const{
    return m_header_for_authorized_receipt_isValid;
}

bool OAICardholderReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header_for_authorized_receipt_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardholderReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
