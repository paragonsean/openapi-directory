/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMerchantWebhookRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMerchantWebhookRequest::OAICreateMerchantWebhookRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMerchantWebhookRequest::OAICreateMerchantWebhookRequest() {
    this->initializeModel();
}

OAICreateMerchantWebhookRequest::~OAICreateMerchantWebhookRequest() {}

void OAICreateMerchantWebhookRequest::initializeModel() {

    m_accepts_expired_certificate_isSet = false;
    m_accepts_expired_certificate_isValid = false;

    m_accepts_self_signed_certificate_isSet = false;
    m_accepts_self_signed_certificate_isValid = false;

    m_accepts_untrusted_root_certificate_isSet = false;
    m_accepts_untrusted_root_certificate_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_additional_settings_isSet = false;
    m_additional_settings_isValid = false;

    m_communication_format_isSet = false;
    m_communication_format_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_encryption_protocol_isSet = false;
    m_encryption_protocol_isValid = false;

    m_network_type_isSet = false;
    m_network_type_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_populate_soap_action_header_isSet = false;
    m_populate_soap_action_header_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAICreateMerchantWebhookRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMerchantWebhookRequest::fromJsonObject(QJsonObject json) {

    m_accepts_expired_certificate_isValid = ::OpenAPI::fromJsonValue(m_accepts_expired_certificate, json[QString("acceptsExpiredCertificate")]);
    m_accepts_expired_certificate_isSet = !json[QString("acceptsExpiredCertificate")].isNull() && m_accepts_expired_certificate_isValid;

    m_accepts_self_signed_certificate_isValid = ::OpenAPI::fromJsonValue(m_accepts_self_signed_certificate, json[QString("acceptsSelfSignedCertificate")]);
    m_accepts_self_signed_certificate_isSet = !json[QString("acceptsSelfSignedCertificate")].isNull() && m_accepts_self_signed_certificate_isValid;

    m_accepts_untrusted_root_certificate_isValid = ::OpenAPI::fromJsonValue(m_accepts_untrusted_root_certificate, json[QString("acceptsUntrustedRootCertificate")]);
    m_accepts_untrusted_root_certificate_isSet = !json[QString("acceptsUntrustedRootCertificate")].isNull() && m_accepts_untrusted_root_certificate_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_additional_settings_isValid = ::OpenAPI::fromJsonValue(m_additional_settings, json[QString("additionalSettings")]);
    m_additional_settings_isSet = !json[QString("additionalSettings")].isNull() && m_additional_settings_isValid;

    m_communication_format_isValid = ::OpenAPI::fromJsonValue(m_communication_format, json[QString("communicationFormat")]);
    m_communication_format_isSet = !json[QString("communicationFormat")].isNull() && m_communication_format_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_encryption_protocol_isValid = ::OpenAPI::fromJsonValue(m_encryption_protocol, json[QString("encryptionProtocol")]);
    m_encryption_protocol_isSet = !json[QString("encryptionProtocol")].isNull() && m_encryption_protocol_isValid;

    m_network_type_isValid = ::OpenAPI::fromJsonValue(m_network_type, json[QString("networkType")]);
    m_network_type_isSet = !json[QString("networkType")].isNull() && m_network_type_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_populate_soap_action_header_isValid = ::OpenAPI::fromJsonValue(m_populate_soap_action_header, json[QString("populateSoapActionHeader")]);
    m_populate_soap_action_header_isSet = !json[QString("populateSoapActionHeader")].isNull() && m_populate_soap_action_header_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAICreateMerchantWebhookRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMerchantWebhookRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_accepts_expired_certificate_isSet) {
        obj.insert(QString("acceptsExpiredCertificate"), ::OpenAPI::toJsonValue(m_accepts_expired_certificate));
    }
    if (m_accepts_self_signed_certificate_isSet) {
        obj.insert(QString("acceptsSelfSignedCertificate"), ::OpenAPI::toJsonValue(m_accepts_self_signed_certificate));
    }
    if (m_accepts_untrusted_root_certificate_isSet) {
        obj.insert(QString("acceptsUntrustedRootCertificate"), ::OpenAPI::toJsonValue(m_accepts_untrusted_root_certificate));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_additional_settings.isSet()) {
        obj.insert(QString("additionalSettings"), ::OpenAPI::toJsonValue(m_additional_settings));
    }
    if (m_communication_format_isSet) {
        obj.insert(QString("communicationFormat"), ::OpenAPI::toJsonValue(m_communication_format));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_encryption_protocol_isSet) {
        obj.insert(QString("encryptionProtocol"), ::OpenAPI::toJsonValue(m_encryption_protocol));
    }
    if (m_network_type_isSet) {
        obj.insert(QString("networkType"), ::OpenAPI::toJsonValue(m_network_type));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_populate_soap_action_header_isSet) {
        obj.insert(QString("populateSoapActionHeader"), ::OpenAPI::toJsonValue(m_populate_soap_action_header));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAICreateMerchantWebhookRequest::isAcceptsExpiredCertificate() const {
    return m_accepts_expired_certificate;
}
void OAICreateMerchantWebhookRequest::setAcceptsExpiredCertificate(const bool &accepts_expired_certificate) {
    m_accepts_expired_certificate = accepts_expired_certificate;
    m_accepts_expired_certificate_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_accepts_expired_certificate_Set() const{
    return m_accepts_expired_certificate_isSet;
}

bool OAICreateMerchantWebhookRequest::is_accepts_expired_certificate_Valid() const{
    return m_accepts_expired_certificate_isValid;
}

bool OAICreateMerchantWebhookRequest::isAcceptsSelfSignedCertificate() const {
    return m_accepts_self_signed_certificate;
}
void OAICreateMerchantWebhookRequest::setAcceptsSelfSignedCertificate(const bool &accepts_self_signed_certificate) {
    m_accepts_self_signed_certificate = accepts_self_signed_certificate;
    m_accepts_self_signed_certificate_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_accepts_self_signed_certificate_Set() const{
    return m_accepts_self_signed_certificate_isSet;
}

bool OAICreateMerchantWebhookRequest::is_accepts_self_signed_certificate_Valid() const{
    return m_accepts_self_signed_certificate_isValid;
}

bool OAICreateMerchantWebhookRequest::isAcceptsUntrustedRootCertificate() const {
    return m_accepts_untrusted_root_certificate;
}
void OAICreateMerchantWebhookRequest::setAcceptsUntrustedRootCertificate(const bool &accepts_untrusted_root_certificate) {
    m_accepts_untrusted_root_certificate = accepts_untrusted_root_certificate;
    m_accepts_untrusted_root_certificate_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_accepts_untrusted_root_certificate_Set() const{
    return m_accepts_untrusted_root_certificate_isSet;
}

bool OAICreateMerchantWebhookRequest::is_accepts_untrusted_root_certificate_Valid() const{
    return m_accepts_untrusted_root_certificate_isValid;
}

bool OAICreateMerchantWebhookRequest::isActive() const {
    return m_active;
}
void OAICreateMerchantWebhookRequest::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreateMerchantWebhookRequest::is_active_Valid() const{
    return m_active_isValid;
}

OAIAdditionalSettings OAICreateMerchantWebhookRequest::getAdditionalSettings() const {
    return m_additional_settings;
}
void OAICreateMerchantWebhookRequest::setAdditionalSettings(const OAIAdditionalSettings &additional_settings) {
    m_additional_settings = additional_settings;
    m_additional_settings_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_additional_settings_Set() const{
    return m_additional_settings_isSet;
}

bool OAICreateMerchantWebhookRequest::is_additional_settings_Valid() const{
    return m_additional_settings_isValid;
}

QString OAICreateMerchantWebhookRequest::getCommunicationFormat() const {
    return m_communication_format;
}
void OAICreateMerchantWebhookRequest::setCommunicationFormat(const QString &communication_format) {
    m_communication_format = communication_format;
    m_communication_format_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_communication_format_Set() const{
    return m_communication_format_isSet;
}

bool OAICreateMerchantWebhookRequest::is_communication_format_Valid() const{
    return m_communication_format_isValid;
}

QString OAICreateMerchantWebhookRequest::getDescription() const {
    return m_description;
}
void OAICreateMerchantWebhookRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateMerchantWebhookRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateMerchantWebhookRequest::getEncryptionProtocol() const {
    return m_encryption_protocol;
}
void OAICreateMerchantWebhookRequest::setEncryptionProtocol(const QString &encryption_protocol) {
    m_encryption_protocol = encryption_protocol;
    m_encryption_protocol_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_encryption_protocol_Set() const{
    return m_encryption_protocol_isSet;
}

bool OAICreateMerchantWebhookRequest::is_encryption_protocol_Valid() const{
    return m_encryption_protocol_isValid;
}

QString OAICreateMerchantWebhookRequest::getNetworkType() const {
    return m_network_type;
}
void OAICreateMerchantWebhookRequest::setNetworkType(const QString &network_type) {
    m_network_type = network_type;
    m_network_type_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_network_type_Set() const{
    return m_network_type_isSet;
}

bool OAICreateMerchantWebhookRequest::is_network_type_Valid() const{
    return m_network_type_isValid;
}

QString OAICreateMerchantWebhookRequest::getPassword() const {
    return m_password;
}
void OAICreateMerchantWebhookRequest::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateMerchantWebhookRequest::is_password_Valid() const{
    return m_password_isValid;
}

bool OAICreateMerchantWebhookRequest::isPopulateSoapActionHeader() const {
    return m_populate_soap_action_header;
}
void OAICreateMerchantWebhookRequest::setPopulateSoapActionHeader(const bool &populate_soap_action_header) {
    m_populate_soap_action_header = populate_soap_action_header;
    m_populate_soap_action_header_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_populate_soap_action_header_Set() const{
    return m_populate_soap_action_header_isSet;
}

bool OAICreateMerchantWebhookRequest::is_populate_soap_action_header_Valid() const{
    return m_populate_soap_action_header_isValid;
}

QString OAICreateMerchantWebhookRequest::getType() const {
    return m_type;
}
void OAICreateMerchantWebhookRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAICreateMerchantWebhookRequest::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICreateMerchantWebhookRequest::getUrl() const {
    return m_url;
}
void OAICreateMerchantWebhookRequest::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateMerchantWebhookRequest::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICreateMerchantWebhookRequest::getUsername() const {
    return m_username;
}
void OAICreateMerchantWebhookRequest::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateMerchantWebhookRequest::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateMerchantWebhookRequest::is_username_Valid() const{
    return m_username_isValid;
}

bool OAICreateMerchantWebhookRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepts_expired_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_self_signed_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accepts_untrusted_root_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_populate_soap_action_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMerchantWebhookRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_communication_format_isValid && m_type_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
