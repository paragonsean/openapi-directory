/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminal::OAITerminal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminal::OAITerminal() {
    this->initializeModel();
}

OAITerminal::~OAITerminal() {}

void OAITerminal::initializeModel() {

    m_assignment_isSet = false;
    m_assignment_isValid = false;

    m_connectivity_isSet = false;
    m_connectivity_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_activity_at_isSet = false;
    m_last_activity_at_isValid = false;

    m_last_transaction_at_isSet = false;
    m_last_transaction_at_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;
}

void OAITerminal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminal::fromJsonObject(QJsonObject json) {

    m_assignment_isValid = ::OpenAPI::fromJsonValue(m_assignment, json[QString("assignment")]);
    m_assignment_isSet = !json[QString("assignment")].isNull() && m_assignment_isValid;

    m_connectivity_isValid = ::OpenAPI::fromJsonValue(m_connectivity, json[QString("connectivity")]);
    m_connectivity_isSet = !json[QString("connectivity")].isNull() && m_connectivity_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_activity_at_isValid = ::OpenAPI::fromJsonValue(m_last_activity_at, json[QString("lastActivityAt")]);
    m_last_activity_at_isSet = !json[QString("lastActivityAt")].isNull() && m_last_activity_at_isValid;

    m_last_transaction_at_isValid = ::OpenAPI::fromJsonValue(m_last_transaction_at, json[QString("lastTransactionAt")]);
    m_last_transaction_at_isSet = !json[QString("lastTransactionAt")].isNull() && m_last_transaction_at_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;
}

QString OAITerminal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminal::asJsonObject() const {
    QJsonObject obj;
    if (m_assignment.isSet()) {
        obj.insert(QString("assignment"), ::OpenAPI::toJsonValue(m_assignment));
    }
    if (m_connectivity.isSet()) {
        obj.insert(QString("connectivity"), ::OpenAPI::toJsonValue(m_connectivity));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_activity_at_isSet) {
        obj.insert(QString("lastActivityAt"), ::OpenAPI::toJsonValue(m_last_activity_at));
    }
    if (m_last_transaction_at_isSet) {
        obj.insert(QString("lastTransactionAt"), ::OpenAPI::toJsonValue(m_last_transaction_at));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    return obj;
}

OAITerminalAssignment OAITerminal::getAssignment() const {
    return m_assignment;
}
void OAITerminal::setAssignment(const OAITerminalAssignment &assignment) {
    m_assignment = assignment;
    m_assignment_isSet = true;
}

bool OAITerminal::is_assignment_Set() const{
    return m_assignment_isSet;
}

bool OAITerminal::is_assignment_Valid() const{
    return m_assignment_isValid;
}

OAITerminalConnectivity OAITerminal::getConnectivity() const {
    return m_connectivity;
}
void OAITerminal::setConnectivity(const OAITerminalConnectivity &connectivity) {
    m_connectivity = connectivity;
    m_connectivity_isSet = true;
}

bool OAITerminal::is_connectivity_Set() const{
    return m_connectivity_isSet;
}

bool OAITerminal::is_connectivity_Valid() const{
    return m_connectivity_isValid;
}

QString OAITerminal::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAITerminal::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAITerminal::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAITerminal::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAITerminal::getId() const {
    return m_id;
}
void OAITerminal::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITerminal::is_id_Set() const{
    return m_id_isSet;
}

bool OAITerminal::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAITerminal::getLastActivityAt() const {
    return m_last_activity_at;
}
void OAITerminal::setLastActivityAt(const QDateTime &last_activity_at) {
    m_last_activity_at = last_activity_at;
    m_last_activity_at_isSet = true;
}

bool OAITerminal::is_last_activity_at_Set() const{
    return m_last_activity_at_isSet;
}

bool OAITerminal::is_last_activity_at_Valid() const{
    return m_last_activity_at_isValid;
}

QDateTime OAITerminal::getLastTransactionAt() const {
    return m_last_transaction_at;
}
void OAITerminal::setLastTransactionAt(const QDateTime &last_transaction_at) {
    m_last_transaction_at = last_transaction_at;
    m_last_transaction_at_isSet = true;
}

bool OAITerminal::is_last_transaction_at_Set() const{
    return m_last_transaction_at_isSet;
}

bool OAITerminal::is_last_transaction_at_Valid() const{
    return m_last_transaction_at_isValid;
}

QString OAITerminal::getModel() const {
    return m_model;
}
void OAITerminal::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAITerminal::is_model_Set() const{
    return m_model_isSet;
}

bool OAITerminal::is_model_Valid() const{
    return m_model_isValid;
}

QString OAITerminal::getSerialNumber() const {
    return m_serial_number;
}
void OAITerminal::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAITerminal::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAITerminal::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

bool OAITerminal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_connectivity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_transaction_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
