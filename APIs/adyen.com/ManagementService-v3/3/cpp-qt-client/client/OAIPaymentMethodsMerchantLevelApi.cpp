/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodsMerchantLevelApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIPaymentMethodsMerchantLevelApi::OAIPaymentMethodsMerchantLevelApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIPaymentMethodsMerchantLevelApi::~OAIPaymentMethodsMerchantLevelApi() {
}

void OAIPaymentMethodsMerchantLevelApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://management-test.adyen.com/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getMerchantsMerchantIdPaymentMethodSettings", defaultConf);
    _serverIndices.insert("getMerchantsMerchantIdPaymentMethodSettings", 0);
    _serverConfigs.insert("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId", defaultConf);
    _serverIndices.insert("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId", 0);
    _serverConfigs.insert("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains", defaultConf);
    _serverIndices.insert("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains", 0);
    _serverConfigs.insert("patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId", defaultConf);
    _serverIndices.insert("patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId", 0);
    _serverConfigs.insert("postMerchantsMerchantIdPaymentMethodSettings", defaultConf);
    _serverIndices.insert("postMerchantsMerchantIdPaymentMethodSettings", 0);
    _serverConfigs.insert("postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains", defaultConf);
    _serverIndices.insert("postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIPaymentMethodsMerchantLevelApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIPaymentMethodsMerchantLevelApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIPaymentMethodsMerchantLevelApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIPaymentMethodsMerchantLevelApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIPaymentMethodsMerchantLevelApi::setUsername(const QString &username) {
    _username = username;
}

void OAIPaymentMethodsMerchantLevelApi::setPassword(const QString &password) {
    _password = password;
}


void OAIPaymentMethodsMerchantLevelApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIPaymentMethodsMerchantLevelApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIPaymentMethodsMerchantLevelApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIPaymentMethodsMerchantLevelApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPaymentMethodsMerchantLevelApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIPaymentMethodsMerchantLevelApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIPaymentMethodsMerchantLevelApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIPaymentMethodsMerchantLevelApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIPaymentMethodsMerchantLevelApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIPaymentMethodsMerchantLevelApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIPaymentMethodsMerchantLevelApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIPaymentMethodsMerchantLevelApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIPaymentMethodsMerchantLevelApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettings(const QString &merchant_id, const ::OpenAPI::OptionalParam<QString> &store_id, const ::OpenAPI::OptionalParam<QString> &business_line_id, const ::OpenAPI::OptionalParam<qint32> &page_size, const ::OpenAPI::OptionalParam<qint32> &page_number) {
    QString fullPath = QString(_serverConfigs["getMerchantsMerchantIdPaymentMethodSettings"][_serverIndices.value("getMerchantsMerchantIdPaymentMethodSettings")].URL()+"/merchants/{merchantId}/paymentMethodSettings");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (store_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "storeId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("storeId")).append(querySuffix).append(QUrl::toPercentEncoding(store_id.stringValue()));
    }
    if (business_line_id.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "businessLineId", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("businessLineId")).append(querySuffix).append(QUrl::toPercentEncoding(business_line_id.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    if (page_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageNumber")).append(querySuffix).append(QUrl::toPercentEncoding(page_number.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentMethodResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignal(output);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignalE(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignalError(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(const QString &merchant_id, const QString &payment_method_id) {
    QString fullPath = QString(_serverConfigs["getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId"][_serverIndices.value("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId")].URL()+"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    
    {
        QString payment_method_idPathParam("{");
        payment_method_idPathParam.append("paymentMethodId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentMethodId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentMethodId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_method_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_method_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentMethod output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignal(output);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalE(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains(const QString &merchant_id, const QString &payment_method_id) {
    QString fullPath = QString(_serverConfigs["getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains"][_serverIndices.value("getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains")].URL()+"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    
    {
        QString payment_method_idPathParam("{");
        payment_method_idPathParam.append("paymentMethodId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentMethodId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentMethodId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_method_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_method_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIApplePayInfo output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignal(output);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalE(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalError(output, error_type, error_str);
        Q_EMIT getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(const QString &merchant_id, const QString &payment_method_id, const ::OpenAPI::OptionalParam<OAIUpdatePaymentMethodInfo> &oai_update_payment_method_info) {
    QString fullPath = QString(_serverConfigs["patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId"][_serverIndices.value("patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId")].URL()+"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    
    {
        QString payment_method_idPathParam("{");
        payment_method_idPathParam.append("paymentMethodId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentMethodId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentMethodId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_method_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_method_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_update_payment_method_info.hasValue()){

        
        QByteArray output = oai_update_payment_method_info.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentMethod output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignal(output);
        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalE(output, error_type, error_str);
        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalError(output, error_type, error_str);
        Q_EMIT patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettings(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAIPaymentMethodSetupInfo> &oai_payment_method_setup_info) {
    QString fullPath = QString(_serverConfigs["postMerchantsMerchantIdPaymentMethodSettings"][_serverIndices.value("postMerchantsMerchantIdPaymentMethodSettings")].URL()+"/merchants/{merchantId}/paymentMethodSettings");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_payment_method_setup_info.hasValue()){

        
        QByteArray output = oai_payment_method_setup_info.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettingsCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettingsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIPaymentMethod output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignal(output);
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignalE(output, error_type, error_str);
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignalError(output, error_type, error_str);
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains(const QString &merchant_id, const QString &payment_method_id, const ::OpenAPI::OptionalParam<OAIApplePayInfo> &oai_apple_pay_info) {
    QString fullPath = QString(_serverConfigs["postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains"][_serverIndices.value("postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains")].URL()+"/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString merchant_idPathParam("{");
        merchant_idPathParam.append("merchantId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "merchantId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"merchantId"+pathSuffix : pathPrefix;
        fullPath.replace(merchant_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(merchant_id)));
    }
    
    {
        QString payment_method_idPathParam("{");
        payment_method_idPathParam.append("paymentMethodId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "paymentMethodId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"paymentMethodId"+pathSuffix : pathPrefix;
        fullPath.replace(payment_method_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(payment_method_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_apple_pay_info.hasValue()){

        
        QByteArray output = oai_apple_pay_info.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsCallback);
    connect(this, &OAIPaymentMethodsMerchantLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIPaymentMethodsMerchantLevelApi::postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignal();
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalE(error_type, error_str);
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalError(error_type, error_str);
        Q_EMIT postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIPaymentMethodsMerchantLevelApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
