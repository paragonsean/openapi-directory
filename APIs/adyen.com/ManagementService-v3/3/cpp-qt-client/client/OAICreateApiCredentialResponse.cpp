/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateApiCredentialResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateApiCredentialResponse::OAICreateApiCredentialResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateApiCredentialResponse::OAICreateApiCredentialResponse() {
    this->initializeModel();
}

OAICreateApiCredentialResponse::~OAICreateApiCredentialResponse() {}

void OAICreateApiCredentialResponse::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_active_isSet = false;
    m_active_isValid = false;

    m_allowed_ip_addresses_isSet = false;
    m_allowed_ip_addresses_isValid = false;

    m_allowed_origins_isSet = false;
    m_allowed_origins_isValid = false;

    m_api_key_isSet = false;
    m_api_key_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAICreateApiCredentialResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateApiCredentialResponse::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_active_isValid = ::OpenAPI::fromJsonValue(m_active, json[QString("active")]);
    m_active_isSet = !json[QString("active")].isNull() && m_active_isValid;

    m_allowed_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_allowed_ip_addresses, json[QString("allowedIpAddresses")]);
    m_allowed_ip_addresses_isSet = !json[QString("allowedIpAddresses")].isNull() && m_allowed_ip_addresses_isValid;

    m_allowed_origins_isValid = ::OpenAPI::fromJsonValue(m_allowed_origins, json[QString("allowedOrigins")]);
    m_allowed_origins_isSet = !json[QString("allowedOrigins")].isNull() && m_allowed_origins_isValid;

    m_api_key_isValid = ::OpenAPI::fromJsonValue(m_api_key, json[QString("apiKey")]);
    m_api_key_isSet = !json[QString("apiKey")].isNull() && m_api_key_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAICreateApiCredentialResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateApiCredentialResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_active_isSet) {
        obj.insert(QString("active"), ::OpenAPI::toJsonValue(m_active));
    }
    if (m_allowed_ip_addresses.size() > 0) {
        obj.insert(QString("allowedIpAddresses"), ::OpenAPI::toJsonValue(m_allowed_ip_addresses));
    }
    if (m_allowed_origins.size() > 0) {
        obj.insert(QString("allowedOrigins"), ::OpenAPI::toJsonValue(m_allowed_origins));
    }
    if (m_api_key_isSet) {
        obj.insert(QString("apiKey"), ::OpenAPI::toJsonValue(m_api_key));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_roles.size() > 0) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

OAIApiCredentialLinks OAICreateApiCredentialResponse::getLinks() const {
    return m__links;
}
void OAICreateApiCredentialResponse::setLinks(const OAIApiCredentialLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAICreateApiCredentialResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAICreateApiCredentialResponse::is__links_Valid() const{
    return m__links_isValid;
}

bool OAICreateApiCredentialResponse::isActive() const {
    return m_active;
}
void OAICreateApiCredentialResponse::setActive(const bool &active) {
    m_active = active;
    m_active_isSet = true;
}

bool OAICreateApiCredentialResponse::is_active_Set() const{
    return m_active_isSet;
}

bool OAICreateApiCredentialResponse::is_active_Valid() const{
    return m_active_isValid;
}

QList<QString> OAICreateApiCredentialResponse::getAllowedIpAddresses() const {
    return m_allowed_ip_addresses;
}
void OAICreateApiCredentialResponse::setAllowedIpAddresses(const QList<QString> &allowed_ip_addresses) {
    m_allowed_ip_addresses = allowed_ip_addresses;
    m_allowed_ip_addresses_isSet = true;
}

bool OAICreateApiCredentialResponse::is_allowed_ip_addresses_Set() const{
    return m_allowed_ip_addresses_isSet;
}

bool OAICreateApiCredentialResponse::is_allowed_ip_addresses_Valid() const{
    return m_allowed_ip_addresses_isValid;
}

QList<OAIAllowedOrigin> OAICreateApiCredentialResponse::getAllowedOrigins() const {
    return m_allowed_origins;
}
void OAICreateApiCredentialResponse::setAllowedOrigins(const QList<OAIAllowedOrigin> &allowed_origins) {
    m_allowed_origins = allowed_origins;
    m_allowed_origins_isSet = true;
}

bool OAICreateApiCredentialResponse::is_allowed_origins_Set() const{
    return m_allowed_origins_isSet;
}

bool OAICreateApiCredentialResponse::is_allowed_origins_Valid() const{
    return m_allowed_origins_isValid;
}

QString OAICreateApiCredentialResponse::getApiKey() const {
    return m_api_key;
}
void OAICreateApiCredentialResponse::setApiKey(const QString &api_key) {
    m_api_key = api_key;
    m_api_key_isSet = true;
}

bool OAICreateApiCredentialResponse::is_api_key_Set() const{
    return m_api_key_isSet;
}

bool OAICreateApiCredentialResponse::is_api_key_Valid() const{
    return m_api_key_isValid;
}

QString OAICreateApiCredentialResponse::getClientKey() const {
    return m_client_key;
}
void OAICreateApiCredentialResponse::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAICreateApiCredentialResponse::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAICreateApiCredentialResponse::is_client_key_Valid() const{
    return m_client_key_isValid;
}

QString OAICreateApiCredentialResponse::getDescription() const {
    return m_description;
}
void OAICreateApiCredentialResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateApiCredentialResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateApiCredentialResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateApiCredentialResponse::getId() const {
    return m_id;
}
void OAICreateApiCredentialResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateApiCredentialResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateApiCredentialResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateApiCredentialResponse::getPassword() const {
    return m_password;
}
void OAICreateApiCredentialResponse::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAICreateApiCredentialResponse::is_password_Set() const{
    return m_password_isSet;
}

bool OAICreateApiCredentialResponse::is_password_Valid() const{
    return m_password_isValid;
}

QList<QString> OAICreateApiCredentialResponse::getRoles() const {
    return m_roles;
}
void OAICreateApiCredentialResponse::setRoles(const QList<QString> &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICreateApiCredentialResponse::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICreateApiCredentialResponse::is_roles_Valid() const{
    return m_roles_isValid;
}

QString OAICreateApiCredentialResponse::getUsername() const {
    return m_username;
}
void OAICreateApiCredentialResponse::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAICreateApiCredentialResponse::is_username_Set() const{
    return m_username_isSet;
}

bool OAICreateApiCredentialResponse::is_username_Valid() const{
    return m_username_isValid;
}

bool OAICreateApiCredentialResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateApiCredentialResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_active_isValid && m_allowed_ip_addresses_isValid && m_api_key_isValid && m_client_key_isValid && m_id_isValid && m_password_isValid && m_roles_isValid && m_username_isValid && true;
}

} // namespace OpenAPI
