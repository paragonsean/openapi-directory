/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAPICredentialsCompanyLevelApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIAPICredentialsCompanyLevelApi::OAIAPICredentialsCompanyLevelApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIAPICredentialsCompanyLevelApi::~OAIAPICredentialsCompanyLevelApi() {
}

void OAIAPICredentialsCompanyLevelApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://management-test.adyen.com/v3"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getCompaniesCompanyIdApiCredentials", defaultConf);
    _serverIndices.insert("getCompaniesCompanyIdApiCredentials", 0);
    _serverConfigs.insert("getCompaniesCompanyIdApiCredentialsApiCredentialId", defaultConf);
    _serverIndices.insert("getCompaniesCompanyIdApiCredentialsApiCredentialId", 0);
    _serverConfigs.insert("patchCompaniesCompanyIdApiCredentialsApiCredentialId", defaultConf);
    _serverIndices.insert("patchCompaniesCompanyIdApiCredentialsApiCredentialId", 0);
    _serverConfigs.insert("postCompaniesCompanyIdApiCredentials", defaultConf);
    _serverIndices.insert("postCompaniesCompanyIdApiCredentials", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIAPICredentialsCompanyLevelApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIAPICredentialsCompanyLevelApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIAPICredentialsCompanyLevelApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIAPICredentialsCompanyLevelApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIAPICredentialsCompanyLevelApi::setUsername(const QString &username) {
    _username = username;
}

void OAIAPICredentialsCompanyLevelApi::setPassword(const QString &password) {
    _password = password;
}


void OAIAPICredentialsCompanyLevelApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIAPICredentialsCompanyLevelApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIAPICredentialsCompanyLevelApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIAPICredentialsCompanyLevelApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAPICredentialsCompanyLevelApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIAPICredentialsCompanyLevelApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIAPICredentialsCompanyLevelApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIAPICredentialsCompanyLevelApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIAPICredentialsCompanyLevelApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIAPICredentialsCompanyLevelApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIAPICredentialsCompanyLevelApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIAPICredentialsCompanyLevelApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIAPICredentialsCompanyLevelApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentials(const QString &company_id, const ::OpenAPI::OptionalParam<qint32> &page_number, const ::OpenAPI::OptionalParam<qint32> &page_size) {
    QString fullPath = QString(_serverConfigs["getCompaniesCompanyIdApiCredentials"][_serverIndices.value("getCompaniesCompanyIdApiCredentials")].URL()+"/companies/{companyId}/apiCredentials");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString company_idPathParam("{");
        company_idPathParam.append("companyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "companyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"companyId"+pathSuffix : pathPrefix;
        fullPath.replace(company_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(company_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (page_number.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageNumber", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageNumber")).append(querySuffix).append(QUrl::toPercentEncoding(page_number.stringValue()));
    }
    if (page_size.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "pageSize", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("pageSize")).append(querySuffix).append(QUrl::toPercentEncoding(page_size.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentialsCallback);
    connect(this, &OAIAPICredentialsCompanyLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentialsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIListCompanyApiCredentialsResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCompaniesCompanyIdApiCredentialsSignal(output);
        Q_EMIT getCompaniesCompanyIdApiCredentialsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCompaniesCompanyIdApiCredentialsSignalE(output, error_type, error_str);
        Q_EMIT getCompaniesCompanyIdApiCredentialsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCompaniesCompanyIdApiCredentialsSignalError(output, error_type, error_str);
        Q_EMIT getCompaniesCompanyIdApiCredentialsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentialsApiCredentialId(const QString &company_id, const QString &api_credential_id) {
    QString fullPath = QString(_serverConfigs["getCompaniesCompanyIdApiCredentialsApiCredentialId"][_serverIndices.value("getCompaniesCompanyIdApiCredentialsApiCredentialId")].URL()+"/companies/{companyId}/apiCredentials/{apiCredentialId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString company_idPathParam("{");
        company_idPathParam.append("companyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "companyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"companyId"+pathSuffix : pathPrefix;
        fullPath.replace(company_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(company_id)));
    }
    
    {
        QString api_credential_idPathParam("{");
        api_credential_idPathParam.append("apiCredentialId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "apiCredentialId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"apiCredentialId"+pathSuffix : pathPrefix;
        fullPath.replace(api_credential_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(api_credential_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentialsApiCredentialIdCallback);
    connect(this, &OAIAPICredentialsCompanyLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAPICredentialsCompanyLevelApi::getCompaniesCompanyIdApiCredentialsApiCredentialIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICompanyApiCredential output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignal(output);
        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignalE(output, error_type, error_str);
        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignalError(output, error_type, error_str);
        Q_EMIT getCompaniesCompanyIdApiCredentialsApiCredentialIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAPICredentialsCompanyLevelApi::patchCompaniesCompanyIdApiCredentialsApiCredentialId(const QString &company_id, const QString &api_credential_id, const ::OpenAPI::OptionalParam<OAIUpdateCompanyApiCredentialRequest> &oai_update_company_api_credential_request) {
    QString fullPath = QString(_serverConfigs["patchCompaniesCompanyIdApiCredentialsApiCredentialId"][_serverIndices.value("patchCompaniesCompanyIdApiCredentialsApiCredentialId")].URL()+"/companies/{companyId}/apiCredentials/{apiCredentialId}");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString company_idPathParam("{");
        company_idPathParam.append("companyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "companyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"companyId"+pathSuffix : pathPrefix;
        fullPath.replace(company_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(company_id)));
    }
    
    {
        QString api_credential_idPathParam("{");
        api_credential_idPathParam.append("apiCredentialId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "apiCredentialId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"apiCredentialId"+pathSuffix : pathPrefix;
        fullPath.replace(api_credential_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(api_credential_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PATCH");

    if (oai_update_company_api_credential_request.hasValue()){

        
        QByteArray output = oai_update_company_api_credential_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAPICredentialsCompanyLevelApi::patchCompaniesCompanyIdApiCredentialsApiCredentialIdCallback);
    connect(this, &OAIAPICredentialsCompanyLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAPICredentialsCompanyLevelApi::patchCompaniesCompanyIdApiCredentialsApiCredentialIdCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICompanyApiCredential output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignal(output);
        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignalE(output, error_type, error_str);
        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignalError(output, error_type, error_str);
        Q_EMIT patchCompaniesCompanyIdApiCredentialsApiCredentialIdSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAPICredentialsCompanyLevelApi::postCompaniesCompanyIdApiCredentials(const QString &company_id, const ::OpenAPI::OptionalParam<OAICreateCompanyApiCredentialRequest> &oai_create_company_api_credential_request) {
    QString fullPath = QString(_serverConfigs["postCompaniesCompanyIdApiCredentials"][_serverIndices.value("postCompaniesCompanyIdApiCredentials")].URL()+"/companies/{companyId}/apiCredentials");
    
    if (!_username.isEmpty() && !_password.isEmpty()) {
        QByteArray b64;
        b64.append(_username.toUtf8() + ":" + _password.toUtf8());
        addHeaders("Authorization","Basic " + b64.toBase64());
    }
    if (_apiKeys.contains("ApiKeyAuth")) {
        addHeaders("ApiKeyAuth",_apiKeys.find("ApiKeyAuth").value());
    }
    
    
    {
        QString company_idPathParam("{");
        company_idPathParam.append("companyId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "companyId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"companyId"+pathSuffix : pathPrefix;
        fullPath.replace(company_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(company_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_create_company_api_credential_request.hasValue()){

        
        QByteArray output = oai_create_company_api_credential_request.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIAPICredentialsCompanyLevelApi::postCompaniesCompanyIdApiCredentialsCallback);
    connect(this, &OAIAPICredentialsCompanyLevelApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIAPICredentialsCompanyLevelApi::postCompaniesCompanyIdApiCredentialsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAICreateCompanyApiCredentialResponse output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postCompaniesCompanyIdApiCredentialsSignal(output);
        Q_EMIT postCompaniesCompanyIdApiCredentialsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postCompaniesCompanyIdApiCredentialsSignalE(output, error_type, error_str);
        Q_EMIT postCompaniesCompanyIdApiCredentialsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postCompaniesCompanyIdApiCredentialsSignalError(output, error_type, error_str);
        Q_EMIT postCompaniesCompanyIdApiCredentialsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIAPICredentialsCompanyLevelApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
