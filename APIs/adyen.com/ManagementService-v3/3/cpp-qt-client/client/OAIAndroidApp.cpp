/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAndroidApp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAndroidApp::OAIAndroidApp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAndroidApp::OAIAndroidApp() {
    this->initializeModel();
}

OAIAndroidApp::~OAIAndroidApp() {}

void OAIAndroidApp::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_package_name_isSet = false;
    m_package_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_version_code_isSet = false;
    m_version_code_isValid = false;

    m_version_name_isSet = false;
    m_version_name_isValid = false;
}

void OAIAndroidApp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAndroidApp::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_package_name_isValid = ::OpenAPI::fromJsonValue(m_package_name, json[QString("packageName")]);
    m_package_name_isSet = !json[QString("packageName")].isNull() && m_package_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_version_code_isValid = ::OpenAPI::fromJsonValue(m_version_code, json[QString("versionCode")]);
    m_version_code_isSet = !json[QString("versionCode")].isNull() && m_version_code_isValid;

    m_version_name_isValid = ::OpenAPI::fromJsonValue(m_version_name, json[QString("versionName")]);
    m_version_name_isSet = !json[QString("versionName")].isNull() && m_version_name_isValid;
}

QString OAIAndroidApp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAndroidApp::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_package_name_isSet) {
        obj.insert(QString("packageName"), ::OpenAPI::toJsonValue(m_package_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_version_code_isSet) {
        obj.insert(QString("versionCode"), ::OpenAPI::toJsonValue(m_version_code));
    }
    if (m_version_name_isSet) {
        obj.insert(QString("versionName"), ::OpenAPI::toJsonValue(m_version_name));
    }
    return obj;
}

QString OAIAndroidApp::getDescription() const {
    return m_description;
}
void OAIAndroidApp::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAndroidApp::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAndroidApp::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIAndroidApp::getErrorCode() const {
    return m_error_code;
}
void OAIAndroidApp::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIAndroidApp::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIAndroidApp::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIAndroidApp::getId() const {
    return m_id;
}
void OAIAndroidApp::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAndroidApp::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAndroidApp::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAndroidApp::getLabel() const {
    return m_label;
}
void OAIAndroidApp::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIAndroidApp::is_label_Set() const{
    return m_label_isSet;
}

bool OAIAndroidApp::is_label_Valid() const{
    return m_label_isValid;
}

QString OAIAndroidApp::getPackageName() const {
    return m_package_name;
}
void OAIAndroidApp::setPackageName(const QString &package_name) {
    m_package_name = package_name;
    m_package_name_isSet = true;
}

bool OAIAndroidApp::is_package_name_Set() const{
    return m_package_name_isSet;
}

bool OAIAndroidApp::is_package_name_Valid() const{
    return m_package_name_isValid;
}

QString OAIAndroidApp::getStatus() const {
    return m_status;
}
void OAIAndroidApp::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAndroidApp::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAndroidApp::is_status_Valid() const{
    return m_status_isValid;
}

qint32 OAIAndroidApp::getVersionCode() const {
    return m_version_code;
}
void OAIAndroidApp::setVersionCode(const qint32 &version_code) {
    m_version_code = version_code;
    m_version_code_isSet = true;
}

bool OAIAndroidApp::is_version_code_Set() const{
    return m_version_code_isSet;
}

bool OAIAndroidApp::is_version_code_Valid() const{
    return m_version_code_isValid;
}

QString OAIAndroidApp::getVersionName() const {
    return m_version_name;
}
void OAIAndroidApp::setVersionName(const QString &version_name) {
    m_version_name = version_name;
    m_version_name_isSet = true;
}

bool OAIAndroidApp::is_version_name_Set() const{
    return m_version_name_isSet;
}

bool OAIAndroidApp::is_version_name_Valid() const{
    return m_version_name_isValid;
}

bool OAIAndroidApp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_package_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAndroidApp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
