/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITerminalOrdersCompanyLevelApi_H
#define OAI_OAITerminalOrdersCompanyLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBillingEntitiesResponse.h"
#include "OAIRestServiceError.h"
#include "OAIShippingLocation.h"
#include "OAIShippingLocationsResponse.h"
#include "OAITerminalModelsResponse.h"
#include "OAITerminalOrder.h"
#include "OAITerminalOrderRequest.h"
#include "OAITerminalOrdersResponse.h"
#include "OAITerminalProductsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITerminalOrdersCompanyLevelApi : public QObject {
    Q_OBJECT

public:
    OAITerminalOrdersCompanyLevelApi(const int timeOut = 0);
    ~OAITerminalOrdersCompanyLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  name QString [optional]
    */
    virtual void getCompaniesCompanyIdBillingEntities(const QString &company_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCompaniesCompanyIdShippingLocations(const QString &company_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  company_id QString [required]
    */
    virtual void getCompaniesCompanyIdTerminalModels(const QString &company_id);

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  customer_order_reference QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCompaniesCompanyIdTerminalOrders(const QString &company_id, const ::OpenAPI::OptionalParam<QString> &customer_order_reference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getCompaniesCompanyIdTerminalOrdersOrderId(const QString &company_id, const QString &order_id);

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  country QString [required]
    * @param[in]  terminal_model_id QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getCompaniesCompanyIdTerminalProducts(const QString &company_id, const QString &country, const ::OpenAPI::OptionalParam<QString> &terminal_model_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_terminal_order_request OAITerminalOrderRequest [optional]
    */
    virtual void patchCompaniesCompanyIdTerminalOrdersOrderId(const QString &company_id, const QString &order_id, const ::OpenAPI::OptionalParam<OAITerminalOrderRequest> &oai_terminal_order_request = ::OpenAPI::OptionalParam<OAITerminalOrderRequest>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  oai_shipping_location OAIShippingLocation [optional]
    */
    virtual void postCompaniesCompanyIdShippingLocations(const QString &company_id, const ::OpenAPI::OptionalParam<OAIShippingLocation> &oai_shipping_location = ::OpenAPI::OptionalParam<OAIShippingLocation>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  oai_terminal_order_request OAITerminalOrderRequest [optional]
    */
    virtual void postCompaniesCompanyIdTerminalOrders(const QString &company_id, const ::OpenAPI::OptionalParam<OAITerminalOrderRequest> &oai_terminal_order_request = ::OpenAPI::OptionalParam<OAITerminalOrderRequest>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void postCompaniesCompanyIdTerminalOrdersOrderIdCancel(const QString &company_id, const QString &order_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCompaniesCompanyIdBillingEntitiesCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdShippingLocationsCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdTerminalModelsCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdTerminalOrdersCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdTerminalOrdersOrderIdCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdTerminalProductsCallback(OAIHttpRequestWorker *worker);
    void patchCompaniesCompanyIdTerminalOrdersOrderIdCallback(OAIHttpRequestWorker *worker);
    void postCompaniesCompanyIdShippingLocationsCallback(OAIHttpRequestWorker *worker);
    void postCompaniesCompanyIdTerminalOrdersCallback(OAIHttpRequestWorker *worker);
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCompaniesCompanyIdBillingEntitiesSignal(OAIBillingEntitiesResponse summary);
    void getCompaniesCompanyIdShippingLocationsSignal(OAIShippingLocationsResponse summary);
    void getCompaniesCompanyIdTerminalModelsSignal(OAITerminalModelsResponse summary);
    void getCompaniesCompanyIdTerminalOrdersSignal(OAITerminalOrdersResponse summary);
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignal(OAITerminalOrder summary);
    void getCompaniesCompanyIdTerminalProductsSignal(OAITerminalProductsResponse summary);
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignal(OAITerminalOrder summary);
    void postCompaniesCompanyIdShippingLocationsSignal(OAIShippingLocation summary);
    void postCompaniesCompanyIdTerminalOrdersSignal(OAITerminalOrder summary);
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignal(OAITerminalOrder summary);


    void getCompaniesCompanyIdBillingEntitiesSignalFull(OAIHttpRequestWorker *worker, OAIBillingEntitiesResponse summary);
    void getCompaniesCompanyIdShippingLocationsSignalFull(OAIHttpRequestWorker *worker, OAIShippingLocationsResponse summary);
    void getCompaniesCompanyIdTerminalModelsSignalFull(OAIHttpRequestWorker *worker, OAITerminalModelsResponse summary);
    void getCompaniesCompanyIdTerminalOrdersSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrdersResponse summary);
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void getCompaniesCompanyIdTerminalProductsSignalFull(OAIHttpRequestWorker *worker, OAITerminalProductsResponse summary);
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void postCompaniesCompanyIdShippingLocationsSignalFull(OAIHttpRequestWorker *worker, OAIShippingLocation summary);
    void postCompaniesCompanyIdTerminalOrdersSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalFull(OAIHttpRequestWorker *worker, OAITerminalOrder summary);

    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdBillingEntitiesSignalError() instead")
    void getCompaniesCompanyIdBillingEntitiesSignalE(OAIBillingEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdBillingEntitiesSignalError(OAIBillingEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdShippingLocationsSignalError() instead")
    void getCompaniesCompanyIdShippingLocationsSignalE(OAIShippingLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdShippingLocationsSignalError(OAIShippingLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalModelsSignalError() instead")
    void getCompaniesCompanyIdTerminalModelsSignalE(OAITerminalModelsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalModelsSignalError(OAITerminalModelsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalOrdersSignalError() instead")
    void getCompaniesCompanyIdTerminalOrdersSignalE(OAITerminalOrdersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalOrdersSignalError(OAITerminalOrdersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalOrdersOrderIdSignalError() instead")
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalProductsSignalError() instead")
    void getCompaniesCompanyIdTerminalProductsSignalE(OAITerminalProductsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalProductsSignalError(OAITerminalProductsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchCompaniesCompanyIdTerminalOrdersOrderIdSignalError() instead")
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdShippingLocationsSignalError() instead")
    void postCompaniesCompanyIdShippingLocationsSignalE(OAIShippingLocation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdShippingLocationsSignalError(OAIShippingLocation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdTerminalOrdersSignalError() instead")
    void postCompaniesCompanyIdTerminalOrdersSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdTerminalOrdersSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalError() instead")
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalE(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalError(OAITerminalOrder summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdBillingEntitiesSignalErrorFull() instead")
    void getCompaniesCompanyIdBillingEntitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdBillingEntitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdShippingLocationsSignalErrorFull() instead")
    void getCompaniesCompanyIdShippingLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdShippingLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalModelsSignalErrorFull() instead")
    void getCompaniesCompanyIdTerminalModelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalModelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalOrdersSignalErrorFull() instead")
    void getCompaniesCompanyIdTerminalOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalOrdersOrderIdSignalErrorFull() instead")
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalOrdersOrderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdTerminalProductsSignalErrorFull() instead")
    void getCompaniesCompanyIdTerminalProductsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdTerminalProductsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchCompaniesCompanyIdTerminalOrdersOrderIdSignalErrorFull() instead")
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchCompaniesCompanyIdTerminalOrdersOrderIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdShippingLocationsSignalErrorFull() instead")
    void postCompaniesCompanyIdShippingLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdShippingLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdTerminalOrdersSignalErrorFull() instead")
    void postCompaniesCompanyIdTerminalOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdTerminalOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalErrorFull() instead")
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdTerminalOrdersOrderIdCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
