/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSplitConfigurationLogicRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSplitConfigurationLogicRequest::OAIUpdateSplitConfigurationLogicRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSplitConfigurationLogicRequest::OAIUpdateSplitConfigurationLogicRequest() {
    this->initializeModel();
}

OAIUpdateSplitConfigurationLogicRequest::~OAIUpdateSplitConfigurationLogicRequest() {}

void OAIUpdateSplitConfigurationLogicRequest::initializeModel() {

    m_acquiring_fees_isSet = false;
    m_acquiring_fees_isValid = false;

    m_additional_commission_isSet = false;
    m_additional_commission_isValid = false;

    m_adyen_commission_isSet = false;
    m_adyen_commission_isValid = false;

    m_adyen_fees_isSet = false;
    m_adyen_fees_isValid = false;

    m_adyen_markup_isSet = false;
    m_adyen_markup_isValid = false;

    m_chargeback_isSet = false;
    m_chargeback_isValid = false;

    m_chargeback_cost_allocation_isSet = false;
    m_chargeback_cost_allocation_isValid = false;

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_interchange_isSet = false;
    m_interchange_isValid = false;

    m_payment_fee_isSet = false;
    m_payment_fee_isValid = false;

    m_remainder_isSet = false;
    m_remainder_isValid = false;

    m_scheme_fee_isSet = false;
    m_scheme_fee_isValid = false;

    m_split_logic_id_isSet = false;
    m_split_logic_id_isValid = false;

    m_surcharge_isSet = false;
    m_surcharge_isValid = false;

    m_tip_isSet = false;
    m_tip_isValid = false;
}

void OAIUpdateSplitConfigurationLogicRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSplitConfigurationLogicRequest::fromJsonObject(QJsonObject json) {

    m_acquiring_fees_isValid = ::OpenAPI::fromJsonValue(m_acquiring_fees, json[QString("acquiringFees")]);
    m_acquiring_fees_isSet = !json[QString("acquiringFees")].isNull() && m_acquiring_fees_isValid;

    m_additional_commission_isValid = ::OpenAPI::fromJsonValue(m_additional_commission, json[QString("additionalCommission")]);
    m_additional_commission_isSet = !json[QString("additionalCommission")].isNull() && m_additional_commission_isValid;

    m_adyen_commission_isValid = ::OpenAPI::fromJsonValue(m_adyen_commission, json[QString("adyenCommission")]);
    m_adyen_commission_isSet = !json[QString("adyenCommission")].isNull() && m_adyen_commission_isValid;

    m_adyen_fees_isValid = ::OpenAPI::fromJsonValue(m_adyen_fees, json[QString("adyenFees")]);
    m_adyen_fees_isSet = !json[QString("adyenFees")].isNull() && m_adyen_fees_isValid;

    m_adyen_markup_isValid = ::OpenAPI::fromJsonValue(m_adyen_markup, json[QString("adyenMarkup")]);
    m_adyen_markup_isSet = !json[QString("adyenMarkup")].isNull() && m_adyen_markup_isValid;

    m_chargeback_isValid = ::OpenAPI::fromJsonValue(m_chargeback, json[QString("chargeback")]);
    m_chargeback_isSet = !json[QString("chargeback")].isNull() && m_chargeback_isValid;

    m_chargeback_cost_allocation_isValid = ::OpenAPI::fromJsonValue(m_chargeback_cost_allocation, json[QString("chargebackCostAllocation")]);
    m_chargeback_cost_allocation_isSet = !json[QString("chargebackCostAllocation")].isNull() && m_chargeback_cost_allocation_isValid;

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("commission")]);
    m_commission_isSet = !json[QString("commission")].isNull() && m_commission_isValid;

    m_interchange_isValid = ::OpenAPI::fromJsonValue(m_interchange, json[QString("interchange")]);
    m_interchange_isSet = !json[QString("interchange")].isNull() && m_interchange_isValid;

    m_payment_fee_isValid = ::OpenAPI::fromJsonValue(m_payment_fee, json[QString("paymentFee")]);
    m_payment_fee_isSet = !json[QString("paymentFee")].isNull() && m_payment_fee_isValid;

    m_remainder_isValid = ::OpenAPI::fromJsonValue(m_remainder, json[QString("remainder")]);
    m_remainder_isSet = !json[QString("remainder")].isNull() && m_remainder_isValid;

    m_scheme_fee_isValid = ::OpenAPI::fromJsonValue(m_scheme_fee, json[QString("schemeFee")]);
    m_scheme_fee_isSet = !json[QString("schemeFee")].isNull() && m_scheme_fee_isValid;

    m_split_logic_id_isValid = ::OpenAPI::fromJsonValue(m_split_logic_id, json[QString("splitLogicId")]);
    m_split_logic_id_isSet = !json[QString("splitLogicId")].isNull() && m_split_logic_id_isValid;

    m_surcharge_isValid = ::OpenAPI::fromJsonValue(m_surcharge, json[QString("surcharge")]);
    m_surcharge_isSet = !json[QString("surcharge")].isNull() && m_surcharge_isValid;

    m_tip_isValid = ::OpenAPI::fromJsonValue(m_tip, json[QString("tip")]);
    m_tip_isSet = !json[QString("tip")].isNull() && m_tip_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSplitConfigurationLogicRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_acquiring_fees_isSet) {
        obj.insert(QString("acquiringFees"), ::OpenAPI::toJsonValue(m_acquiring_fees));
    }
    if (m_additional_commission.isSet()) {
        obj.insert(QString("additionalCommission"), ::OpenAPI::toJsonValue(m_additional_commission));
    }
    if (m_adyen_commission_isSet) {
        obj.insert(QString("adyenCommission"), ::OpenAPI::toJsonValue(m_adyen_commission));
    }
    if (m_adyen_fees_isSet) {
        obj.insert(QString("adyenFees"), ::OpenAPI::toJsonValue(m_adyen_fees));
    }
    if (m_adyen_markup_isSet) {
        obj.insert(QString("adyenMarkup"), ::OpenAPI::toJsonValue(m_adyen_markup));
    }
    if (m_chargeback_isSet) {
        obj.insert(QString("chargeback"), ::OpenAPI::toJsonValue(m_chargeback));
    }
    if (m_chargeback_cost_allocation_isSet) {
        obj.insert(QString("chargebackCostAllocation"), ::OpenAPI::toJsonValue(m_chargeback_cost_allocation));
    }
    if (m_commission.isSet()) {
        obj.insert(QString("commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_interchange_isSet) {
        obj.insert(QString("interchange"), ::OpenAPI::toJsonValue(m_interchange));
    }
    if (m_payment_fee_isSet) {
        obj.insert(QString("paymentFee"), ::OpenAPI::toJsonValue(m_payment_fee));
    }
    if (m_remainder_isSet) {
        obj.insert(QString("remainder"), ::OpenAPI::toJsonValue(m_remainder));
    }
    if (m_scheme_fee_isSet) {
        obj.insert(QString("schemeFee"), ::OpenAPI::toJsonValue(m_scheme_fee));
    }
    if (m_split_logic_id_isSet) {
        obj.insert(QString("splitLogicId"), ::OpenAPI::toJsonValue(m_split_logic_id));
    }
    if (m_surcharge_isSet) {
        obj.insert(QString("surcharge"), ::OpenAPI::toJsonValue(m_surcharge));
    }
    if (m_tip_isSet) {
        obj.insert(QString("tip"), ::OpenAPI::toJsonValue(m_tip));
    }
    return obj;
}

QString OAIUpdateSplitConfigurationLogicRequest::getAcquiringFees() const {
    return m_acquiring_fees;
}
void OAIUpdateSplitConfigurationLogicRequest::setAcquiringFees(const QString &acquiring_fees) {
    m_acquiring_fees = acquiring_fees;
    m_acquiring_fees_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_acquiring_fees_Set() const{
    return m_acquiring_fees_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_acquiring_fees_Valid() const{
    return m_acquiring_fees_isValid;
}

OAIAdditionalCommission OAIUpdateSplitConfigurationLogicRequest::getAdditionalCommission() const {
    return m_additional_commission;
}
void OAIUpdateSplitConfigurationLogicRequest::setAdditionalCommission(const OAIAdditionalCommission &additional_commission) {
    m_additional_commission = additional_commission;
    m_additional_commission_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_additional_commission_Set() const{
    return m_additional_commission_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_additional_commission_Valid() const{
    return m_additional_commission_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getAdyenCommission() const {
    return m_adyen_commission;
}
void OAIUpdateSplitConfigurationLogicRequest::setAdyenCommission(const QString &adyen_commission) {
    m_adyen_commission = adyen_commission;
    m_adyen_commission_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_commission_Set() const{
    return m_adyen_commission_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_commission_Valid() const{
    return m_adyen_commission_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getAdyenFees() const {
    return m_adyen_fees;
}
void OAIUpdateSplitConfigurationLogicRequest::setAdyenFees(const QString &adyen_fees) {
    m_adyen_fees = adyen_fees;
    m_adyen_fees_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_fees_Set() const{
    return m_adyen_fees_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_fees_Valid() const{
    return m_adyen_fees_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getAdyenMarkup() const {
    return m_adyen_markup;
}
void OAIUpdateSplitConfigurationLogicRequest::setAdyenMarkup(const QString &adyen_markup) {
    m_adyen_markup = adyen_markup;
    m_adyen_markup_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_markup_Set() const{
    return m_adyen_markup_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_adyen_markup_Valid() const{
    return m_adyen_markup_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getChargeback() const {
    return m_chargeback;
}
void OAIUpdateSplitConfigurationLogicRequest::setChargeback(const QString &chargeback) {
    m_chargeback = chargeback;
    m_chargeback_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_chargeback_Set() const{
    return m_chargeback_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_chargeback_Valid() const{
    return m_chargeback_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getChargebackCostAllocation() const {
    return m_chargeback_cost_allocation;
}
void OAIUpdateSplitConfigurationLogicRequest::setChargebackCostAllocation(const QString &chargeback_cost_allocation) {
    m_chargeback_cost_allocation = chargeback_cost_allocation;
    m_chargeback_cost_allocation_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_chargeback_cost_allocation_Set() const{
    return m_chargeback_cost_allocation_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_chargeback_cost_allocation_Valid() const{
    return m_chargeback_cost_allocation_isValid;
}

OAICommission OAIUpdateSplitConfigurationLogicRequest::getCommission() const {
    return m_commission;
}
void OAIUpdateSplitConfigurationLogicRequest::setCommission(const OAICommission &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_commission_Valid() const{
    return m_commission_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getInterchange() const {
    return m_interchange;
}
void OAIUpdateSplitConfigurationLogicRequest::setInterchange(const QString &interchange) {
    m_interchange = interchange;
    m_interchange_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_interchange_Set() const{
    return m_interchange_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_interchange_Valid() const{
    return m_interchange_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getPaymentFee() const {
    return m_payment_fee;
}
void OAIUpdateSplitConfigurationLogicRequest::setPaymentFee(const QString &payment_fee) {
    m_payment_fee = payment_fee;
    m_payment_fee_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_payment_fee_Set() const{
    return m_payment_fee_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_payment_fee_Valid() const{
    return m_payment_fee_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getRemainder() const {
    return m_remainder;
}
void OAIUpdateSplitConfigurationLogicRequest::setRemainder(const QString &remainder) {
    m_remainder = remainder;
    m_remainder_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_remainder_Set() const{
    return m_remainder_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_remainder_Valid() const{
    return m_remainder_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getSchemeFee() const {
    return m_scheme_fee;
}
void OAIUpdateSplitConfigurationLogicRequest::setSchemeFee(const QString &scheme_fee) {
    m_scheme_fee = scheme_fee;
    m_scheme_fee_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_scheme_fee_Set() const{
    return m_scheme_fee_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_scheme_fee_Valid() const{
    return m_scheme_fee_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getSplitLogicId() const {
    return m_split_logic_id;
}
void OAIUpdateSplitConfigurationLogicRequest::setSplitLogicId(const QString &split_logic_id) {
    m_split_logic_id = split_logic_id;
    m_split_logic_id_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_split_logic_id_Set() const{
    return m_split_logic_id_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_split_logic_id_Valid() const{
    return m_split_logic_id_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getSurcharge() const {
    return m_surcharge;
}
void OAIUpdateSplitConfigurationLogicRequest::setSurcharge(const QString &surcharge) {
    m_surcharge = surcharge;
    m_surcharge_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_surcharge_Set() const{
    return m_surcharge_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_surcharge_Valid() const{
    return m_surcharge_isValid;
}

QString OAIUpdateSplitConfigurationLogicRequest::getTip() const {
    return m_tip;
}
void OAIUpdateSplitConfigurationLogicRequest::setTip(const QString &tip) {
    m_tip = tip;
    m_tip_isSet = true;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_tip_Set() const{
    return m_tip_isSet;
}

bool OAIUpdateSplitConfigurationLogicRequest::is_tip_Valid() const{
    return m_tip_isValid;
}

bool OAIUpdateSplitConfigurationLogicRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquiring_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_adyen_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adyen_fees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adyen_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chargeback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chargeback_cost_allocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remainder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_logic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSplitConfigurationLogicRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_commission_isValid && true;
}

} // namespace OpenAPI
