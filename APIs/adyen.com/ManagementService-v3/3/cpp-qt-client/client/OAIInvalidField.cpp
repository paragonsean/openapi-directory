/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvalidField.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvalidField::OAIInvalidField(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvalidField::OAIInvalidField() {
    this->initializeModel();
}

OAIInvalidField::~OAIInvalidField() {}

void OAIInvalidField::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInvalidField::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvalidField::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInvalidField::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvalidField::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIInvalidField::getMessage() const {
    return m_message;
}
void OAIInvalidField::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInvalidField::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInvalidField::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIInvalidField::getName() const {
    return m_name;
}
void OAIInvalidField::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInvalidField::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInvalidField::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInvalidField::getValue() const {
    return m_value;
}
void OAIInvalidField::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInvalidField::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInvalidField::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInvalidField::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvalidField::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_isValid && m_name_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
