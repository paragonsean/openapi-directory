/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayAtTable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayAtTable::OAIPayAtTable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayAtTable::OAIPayAtTable() {
    this->initializeModel();
}

OAIPayAtTable::~OAIPayAtTable() {}

void OAIPayAtTable::initializeModel() {

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_enable_pay_at_table_isSet = false;
    m_enable_pay_at_table_isValid = false;

    m_payment_instrument_isSet = false;
    m_payment_instrument_isValid = false;
}

void OAIPayAtTable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayAtTable::fromJsonObject(QJsonObject json) {

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("authenticationMethod")]);
    m_authentication_method_isSet = !json[QString("authenticationMethod")].isNull() && m_authentication_method_isValid;

    m_enable_pay_at_table_isValid = ::OpenAPI::fromJsonValue(m_enable_pay_at_table, json[QString("enablePayAtTable")]);
    m_enable_pay_at_table_isSet = !json[QString("enablePayAtTable")].isNull() && m_enable_pay_at_table_isValid;

    m_payment_instrument_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument, json[QString("paymentInstrument")]);
    m_payment_instrument_isSet = !json[QString("paymentInstrument")].isNull() && m_payment_instrument_isValid;
}

QString OAIPayAtTable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayAtTable::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_method_isSet) {
        obj.insert(QString("authenticationMethod"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_enable_pay_at_table_isSet) {
        obj.insert(QString("enablePayAtTable"), ::OpenAPI::toJsonValue(m_enable_pay_at_table));
    }
    if (m_payment_instrument_isSet) {
        obj.insert(QString("paymentInstrument"), ::OpenAPI::toJsonValue(m_payment_instrument));
    }
    return obj;
}

QString OAIPayAtTable::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAIPayAtTable::setAuthenticationMethod(const QString &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAIPayAtTable::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAIPayAtTable::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

bool OAIPayAtTable::isEnablePayAtTable() const {
    return m_enable_pay_at_table;
}
void OAIPayAtTable::setEnablePayAtTable(const bool &enable_pay_at_table) {
    m_enable_pay_at_table = enable_pay_at_table;
    m_enable_pay_at_table_isSet = true;
}

bool OAIPayAtTable::is_enable_pay_at_table_Set() const{
    return m_enable_pay_at_table_isSet;
}

bool OAIPayAtTable::is_enable_pay_at_table_Valid() const{
    return m_enable_pay_at_table_isValid;
}

QString OAIPayAtTable::getPaymentInstrument() const {
    return m_payment_instrument;
}
void OAIPayAtTable::setPaymentInstrument(const QString &payment_instrument) {
    m_payment_instrument = payment_instrument;
    m_payment_instrument_isSet = true;
}

bool OAIPayAtTable::is_payment_instrument_Set() const{
    return m_payment_instrument_isSet;
}

bool OAIPayAtTable::is_payment_instrument_Valid() const{
    return m_payment_instrument_isValid;
}

bool OAIPayAtTable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pay_at_table_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayAtTable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
