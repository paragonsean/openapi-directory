/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalOrder::OAITerminalOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalOrder::OAITerminalOrder() {
    this->initializeModel();
}

OAITerminalOrder::~OAITerminalOrder() {}

void OAITerminalOrder::initializeModel() {

    m_billing_entity_isSet = false;
    m_billing_entity_isValid = false;

    m_customer_order_reference_isSet = false;
    m_customer_order_reference_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_date_isSet = false;
    m_order_date_isValid = false;

    m_shipping_location_isSet = false;
    m_shipping_location_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_url_isSet = false;
    m_tracking_url_isValid = false;
}

void OAITerminalOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalOrder::fromJsonObject(QJsonObject json) {

    m_billing_entity_isValid = ::OpenAPI::fromJsonValue(m_billing_entity, json[QString("billingEntity")]);
    m_billing_entity_isSet = !json[QString("billingEntity")].isNull() && m_billing_entity_isValid;

    m_customer_order_reference_isValid = ::OpenAPI::fromJsonValue(m_customer_order_reference, json[QString("customerOrderReference")]);
    m_customer_order_reference_isSet = !json[QString("customerOrderReference")].isNull() && m_customer_order_reference_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_date_isValid = ::OpenAPI::fromJsonValue(m_order_date, json[QString("orderDate")]);
    m_order_date_isSet = !json[QString("orderDate")].isNull() && m_order_date_isValid;

    m_shipping_location_isValid = ::OpenAPI::fromJsonValue(m_shipping_location, json[QString("shippingLocation")]);
    m_shipping_location_isSet = !json[QString("shippingLocation")].isNull() && m_shipping_location_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tracking_url_isValid = ::OpenAPI::fromJsonValue(m_tracking_url, json[QString("trackingUrl")]);
    m_tracking_url_isSet = !json[QString("trackingUrl")].isNull() && m_tracking_url_isValid;
}

QString OAITerminalOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_entity.isSet()) {
        obj.insert(QString("billingEntity"), ::OpenAPI::toJsonValue(m_billing_entity));
    }
    if (m_customer_order_reference_isSet) {
        obj.insert(QString("customerOrderReference"), ::OpenAPI::toJsonValue(m_customer_order_reference));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_date_isSet) {
        obj.insert(QString("orderDate"), ::OpenAPI::toJsonValue(m_order_date));
    }
    if (m_shipping_location.isSet()) {
        obj.insert(QString("shippingLocation"), ::OpenAPI::toJsonValue(m_shipping_location));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_url_isSet) {
        obj.insert(QString("trackingUrl"), ::OpenAPI::toJsonValue(m_tracking_url));
    }
    return obj;
}

OAIBillingEntity OAITerminalOrder::getBillingEntity() const {
    return m_billing_entity;
}
void OAITerminalOrder::setBillingEntity(const OAIBillingEntity &billing_entity) {
    m_billing_entity = billing_entity;
    m_billing_entity_isSet = true;
}

bool OAITerminalOrder::is_billing_entity_Set() const{
    return m_billing_entity_isSet;
}

bool OAITerminalOrder::is_billing_entity_Valid() const{
    return m_billing_entity_isValid;
}

QString OAITerminalOrder::getCustomerOrderReference() const {
    return m_customer_order_reference;
}
void OAITerminalOrder::setCustomerOrderReference(const QString &customer_order_reference) {
    m_customer_order_reference = customer_order_reference;
    m_customer_order_reference_isSet = true;
}

bool OAITerminalOrder::is_customer_order_reference_Set() const{
    return m_customer_order_reference_isSet;
}

bool OAITerminalOrder::is_customer_order_reference_Valid() const{
    return m_customer_order_reference_isValid;
}

QString OAITerminalOrder::getId() const {
    return m_id;
}
void OAITerminalOrder::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITerminalOrder::is_id_Set() const{
    return m_id_isSet;
}

bool OAITerminalOrder::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIOrderItem> OAITerminalOrder::getItems() const {
    return m_items;
}
void OAITerminalOrder::setItems(const QList<OAIOrderItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAITerminalOrder::is_items_Set() const{
    return m_items_isSet;
}

bool OAITerminalOrder::is_items_Valid() const{
    return m_items_isValid;
}

QString OAITerminalOrder::getOrderDate() const {
    return m_order_date;
}
void OAITerminalOrder::setOrderDate(const QString &order_date) {
    m_order_date = order_date;
    m_order_date_isSet = true;
}

bool OAITerminalOrder::is_order_date_Set() const{
    return m_order_date_isSet;
}

bool OAITerminalOrder::is_order_date_Valid() const{
    return m_order_date_isValid;
}

OAIShippingLocation OAITerminalOrder::getShippingLocation() const {
    return m_shipping_location;
}
void OAITerminalOrder::setShippingLocation(const OAIShippingLocation &shipping_location) {
    m_shipping_location = shipping_location;
    m_shipping_location_isSet = true;
}

bool OAITerminalOrder::is_shipping_location_Set() const{
    return m_shipping_location_isSet;
}

bool OAITerminalOrder::is_shipping_location_Valid() const{
    return m_shipping_location_isValid;
}

QString OAITerminalOrder::getStatus() const {
    return m_status;
}
void OAITerminalOrder::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITerminalOrder::is_status_Set() const{
    return m_status_isSet;
}

bool OAITerminalOrder::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITerminalOrder::getTrackingUrl() const {
    return m_tracking_url;
}
void OAITerminalOrder::setTrackingUrl(const QString &tracking_url) {
    m_tracking_url = tracking_url;
    m_tracking_url_isSet = true;
}

bool OAITerminalOrder::is_tracking_url_Set() const{
    return m_tracking_url_isSet;
}

bool OAITerminalOrder::is_tracking_url_Valid() const{
    return m_tracking_url_isValid;
}

bool OAITerminalOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_entity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
