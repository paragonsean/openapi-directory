/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProfile.h
 *
 * 
 */

#ifndef OAIProfile_H
#define OAIProfile_H

#include <QJsonObject>

#include "OAIFile.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIFile;

class OAIProfile : public OAIObject {
public:
    OAIProfile();
    OAIProfile(QString json);
    ~OAIProfile() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuthType() const;
    void setAuthType(const QString &auth_type);
    bool is_auth_type_Set() const;
    bool is_auth_type_Valid() const;

    bool isAutoWifi() const;
    void setAutoWifi(const bool &auto_wifi);
    bool is_auto_wifi_Set() const;
    bool is_auto_wifi_Valid() const;

    QString getBssType() const;
    void setBssType(const QString &bss_type);
    bool is_bss_type_Set() const;
    bool is_bss_type_Valid() const;

    qint32 getChannel() const;
    void setChannel(const qint32 &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    bool isDefaultProfile() const;
    void setDefaultProfile(const bool &default_profile);
    bool is_default_profile_Set() const;
    bool is_default_profile_Valid() const;

    QString getEap() const;
    void setEap(const QString &eap);
    bool is_eap_Set() const;
    bool is_eap_Valid() const;

    OAIFile getEapCaCert() const;
    void setEapCaCert(const OAIFile &eap_ca_cert);
    bool is_eap_ca_cert_Set() const;
    bool is_eap_ca_cert_Valid() const;

    OAIFile getEapClientCert() const;
    void setEapClientCert(const OAIFile &eap_client_cert);
    bool is_eap_client_cert_Set() const;
    bool is_eap_client_cert_Valid() const;

    OAIFile getEapClientKey() const;
    void setEapClientKey(const OAIFile &eap_client_key);
    bool is_eap_client_key_Set() const;
    bool is_eap_client_key_Valid() const;

    QString getEapClientPwd() const;
    void setEapClientPwd(const QString &eap_client_pwd);
    bool is_eap_client_pwd_Set() const;
    bool is_eap_client_pwd_Valid() const;

    QString getEapIdentity() const;
    void setEapIdentity(const QString &eap_identity);
    bool is_eap_identity_Set() const;
    bool is_eap_identity_Valid() const;

    OAIFile getEapIntermediateCert() const;
    void setEapIntermediateCert(const OAIFile &eap_intermediate_cert);
    bool is_eap_intermediate_cert_Set() const;
    bool is_eap_intermediate_cert_Valid() const;

    QString getEapPwd() const;
    void setEapPwd(const QString &eap_pwd);
    bool is_eap_pwd_Set() const;
    bool is_eap_pwd_Valid() const;

    bool isHiddenSsid() const;
    void setHiddenSsid(const bool &hidden_ssid);
    bool is_hidden_ssid_Set() const;
    bool is_hidden_ssid_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getPsk() const;
    void setPsk(const QString &psk);
    bool is_psk_Set() const;
    bool is_psk_Valid() const;

    QString getSsid() const;
    void setSsid(const QString &ssid);
    bool is_ssid_Set() const;
    bool is_ssid_Valid() const;

    QString getWsec() const;
    void setWsec(const QString &wsec);
    bool is_wsec_Set() const;
    bool is_wsec_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auth_type;
    bool m_auth_type_isSet;
    bool m_auth_type_isValid;

    bool m_auto_wifi;
    bool m_auto_wifi_isSet;
    bool m_auto_wifi_isValid;

    QString m_bss_type;
    bool m_bss_type_isSet;
    bool m_bss_type_isValid;

    qint32 m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    bool m_default_profile;
    bool m_default_profile_isSet;
    bool m_default_profile_isValid;

    QString m_eap;
    bool m_eap_isSet;
    bool m_eap_isValid;

    OAIFile m_eap_ca_cert;
    bool m_eap_ca_cert_isSet;
    bool m_eap_ca_cert_isValid;

    OAIFile m_eap_client_cert;
    bool m_eap_client_cert_isSet;
    bool m_eap_client_cert_isValid;

    OAIFile m_eap_client_key;
    bool m_eap_client_key_isSet;
    bool m_eap_client_key_isValid;

    QString m_eap_client_pwd;
    bool m_eap_client_pwd_isSet;
    bool m_eap_client_pwd_isValid;

    QString m_eap_identity;
    bool m_eap_identity_isSet;
    bool m_eap_identity_isValid;

    OAIFile m_eap_intermediate_cert;
    bool m_eap_intermediate_cert_isSet;
    bool m_eap_intermediate_cert_isValid;

    QString m_eap_pwd;
    bool m_eap_pwd_isSet;
    bool m_eap_pwd_isValid;

    bool m_hidden_ssid;
    bool m_hidden_ssid_isSet;
    bool m_hidden_ssid_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_psk;
    bool m_psk_isSet;
    bool m_psk_isValid;

    QString m_ssid;
    bool m_ssid_isSet;
    bool m_ssid_isValid;

    QString m_wsec;
    bool m_wsec_isSet;
    bool m_wsec_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProfile)

#endif // OAIProfile_H
