/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRestServiceError.h
 *
 * 
 */

#ifndef OAIRestServiceError_H
#define OAIRestServiceError_H

#include <QJsonObject>

#include "OAIInvalidField.h"
#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInvalidField;

class OAIRestServiceError : public OAIObject {
public:
    OAIRestServiceError();
    OAIRestServiceError(QString json);
    ~OAIRestServiceError() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDetail() const;
    void setDetail(const QString &detail);
    bool is_detail_Set() const;
    bool is_detail_Valid() const;

    QString getErrorCode() const;
    void setErrorCode(const QString &error_code);
    bool is_error_code_Set() const;
    bool is_error_code_Valid() const;

    QString getInstance() const;
    void setInstance(const QString &instance);
    bool is_instance_Set() const;
    bool is_instance_Valid() const;

    QList<OAIInvalidField> getInvalidFields() const;
    void setInvalidFields(const QList<OAIInvalidField> &invalid_fields);
    bool is_invalid_fields_Set() const;
    bool is_invalid_fields_Valid() const;

    QString getRequestId() const;
    void setRequestId(const QString &request_id);
    bool is_request_id_Set() const;
    bool is_request_id_Valid() const;

    OAIObject getResponse() const;
    void setResponse(const OAIObject &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_detail;
    bool m_detail_isSet;
    bool m_detail_isValid;

    QString m_error_code;
    bool m_error_code_isSet;
    bool m_error_code_isValid;

    QString m_instance;
    bool m_instance_isSet;
    bool m_instance_isValid;

    QList<OAIInvalidField> m_invalid_fields;
    bool m_invalid_fields_isSet;
    bool m_invalid_fields_isValid;

    QString m_request_id;
    bool m_request_id_isSet;
    bool m_request_id_isValid;

    OAIObject m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRestServiceError)

#endif // OAIRestServiceError_H
