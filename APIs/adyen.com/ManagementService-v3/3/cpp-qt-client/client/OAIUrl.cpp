/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrl::OAIUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrl::OAIUrl() {
    this->initializeModel();
}

OAIUrl::~OAIUrl() {}

void OAIUrl::initializeModel() {

    m_encrypted_isSet = false;
    m_encrypted_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrl::fromJsonObject(QJsonObject json) {

    m_encrypted_isValid = ::OpenAPI::fromJsonValue(m_encrypted, json[QString("encrypted")]);
    m_encrypted_isSet = !json[QString("encrypted")].isNull() && m_encrypted_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_encrypted_isSet) {
        obj.insert(QString("encrypted"), ::OpenAPI::toJsonValue(m_encrypted));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

bool OAIUrl::isEncrypted() const {
    return m_encrypted;
}
void OAIUrl::setEncrypted(const bool &encrypted) {
    m_encrypted = encrypted;
    m_encrypted_isSet = true;
}

bool OAIUrl::is_encrypted_Set() const{
    return m_encrypted_isSet;
}

bool OAIUrl::is_encrypted_Valid() const{
    return m_encrypted_isValid;
}

QString OAIUrl::getPassword() const {
    return m_password;
}
void OAIUrl::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUrl::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUrl::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUrl::getUrl() const {
    return m_url;
}
void OAIUrl::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUrl::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUrl::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIUrl::getUsername() const {
    return m_username;
}
void OAIUrl::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUrl::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUrl::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encrypted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
