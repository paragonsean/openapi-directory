/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUpdatePaymentMethodInfo.h
 *
 * 
 */

#ifndef OAIUpdatePaymentMethodInfo_H
#define OAIUpdatePaymentMethodInfo_H

#include <QJsonObject>

#include "OAIBcmcInfo.h"
#include "OAICartesBancairesInfo.h"
#include "OAIGenericPmWithTdiInfo.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBcmcInfo;
class OAICartesBancairesInfo;
class OAIGenericPmWithTdiInfo;

class OAIUpdatePaymentMethodInfo : public OAIObject {
public:
    OAIUpdatePaymentMethodInfo();
    OAIUpdatePaymentMethodInfo(QString json);
    ~OAIUpdatePaymentMethodInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBcmcInfo getBcmc() const;
    void setBcmc(const OAIBcmcInfo &bcmc);
    bool is_bcmc_Set() const;
    bool is_bcmc_Valid() const;

    OAICartesBancairesInfo getCartesBancaires() const;
    void setCartesBancaires(const OAICartesBancairesInfo &cartes_bancaires);
    bool is_cartes_bancaires_Set() const;
    bool is_cartes_bancaires_Valid() const;

    QList<QString> getCountries() const;
    void setCountries(const QList<QString> &countries);
    bool is_countries_Set() const;
    bool is_countries_Valid() const;

    OAIGenericPmWithTdiInfo getCup() const;
    void setCup(const OAIGenericPmWithTdiInfo &cup);
    bool is_cup_Set() const;
    bool is_cup_Valid() const;

    QList<QString> getCurrencies() const;
    void setCurrencies(const QList<QString> &currencies);
    bool is_currencies_Set() const;
    bool is_currencies_Valid() const;

    QList<QString> getCustomRoutingFlags() const;
    void setCustomRoutingFlags(const QList<QString> &custom_routing_flags);
    bool is_custom_routing_flags_Set() const;
    bool is_custom_routing_flags_Valid() const;

    OAIGenericPmWithTdiInfo getDiners() const;
    void setDiners(const OAIGenericPmWithTdiInfo &diners);
    bool is_diners_Set() const;
    bool is_diners_Valid() const;

    OAIGenericPmWithTdiInfo getDiscover() const;
    void setDiscover(const OAIGenericPmWithTdiInfo &discover);
    bool is_discover_Set() const;
    bool is_discover_Valid() const;

    OAIGenericPmWithTdiInfo getEftposAustralia() const;
    void setEftposAustralia(const OAIGenericPmWithTdiInfo &eftpos_australia);
    bool is_eftpos_australia_Set() const;
    bool is_eftpos_australia_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    OAIGenericPmWithTdiInfo getGirocard() const;
    void setGirocard(const OAIGenericPmWithTdiInfo &girocard);
    bool is_girocard_Set() const;
    bool is_girocard_Valid() const;

    OAIGenericPmWithTdiInfo getIdeal() const;
    void setIdeal(const OAIGenericPmWithTdiInfo &ideal);
    bool is_ideal_Set() const;
    bool is_ideal_Valid() const;

    OAIGenericPmWithTdiInfo getInteracCard() const;
    void setInteracCard(const OAIGenericPmWithTdiInfo &interac_card);
    bool is_interac_card_Set() const;
    bool is_interac_card_Valid() const;

    OAIGenericPmWithTdiInfo getJcb() const;
    void setJcb(const OAIGenericPmWithTdiInfo &jcb);
    bool is_jcb_Set() const;
    bool is_jcb_Valid() const;

    OAIGenericPmWithTdiInfo getMaestro() const;
    void setMaestro(const OAIGenericPmWithTdiInfo &maestro);
    bool is_maestro_Set() const;
    bool is_maestro_Valid() const;

    OAIGenericPmWithTdiInfo getMc() const;
    void setMc(const OAIGenericPmWithTdiInfo &mc);
    bool is_mc_Set() const;
    bool is_mc_Valid() const;

    QList<QString> getStoreIds() const;
    void setStoreIds(const QList<QString> &store_ids);
    bool is_store_ids_Set() const;
    bool is_store_ids_Valid() const;

    OAIGenericPmWithTdiInfo getVisa() const;
    void setVisa(const OAIGenericPmWithTdiInfo &visa);
    bool is_visa_Set() const;
    bool is_visa_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBcmcInfo m_bcmc;
    bool m_bcmc_isSet;
    bool m_bcmc_isValid;

    OAICartesBancairesInfo m_cartes_bancaires;
    bool m_cartes_bancaires_isSet;
    bool m_cartes_bancaires_isValid;

    QList<QString> m_countries;
    bool m_countries_isSet;
    bool m_countries_isValid;

    OAIGenericPmWithTdiInfo m_cup;
    bool m_cup_isSet;
    bool m_cup_isValid;

    QList<QString> m_currencies;
    bool m_currencies_isSet;
    bool m_currencies_isValid;

    QList<QString> m_custom_routing_flags;
    bool m_custom_routing_flags_isSet;
    bool m_custom_routing_flags_isValid;

    OAIGenericPmWithTdiInfo m_diners;
    bool m_diners_isSet;
    bool m_diners_isValid;

    OAIGenericPmWithTdiInfo m_discover;
    bool m_discover_isSet;
    bool m_discover_isValid;

    OAIGenericPmWithTdiInfo m_eftpos_australia;
    bool m_eftpos_australia_isSet;
    bool m_eftpos_australia_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    OAIGenericPmWithTdiInfo m_girocard;
    bool m_girocard_isSet;
    bool m_girocard_isValid;

    OAIGenericPmWithTdiInfo m_ideal;
    bool m_ideal_isSet;
    bool m_ideal_isValid;

    OAIGenericPmWithTdiInfo m_interac_card;
    bool m_interac_card_isSet;
    bool m_interac_card_isValid;

    OAIGenericPmWithTdiInfo m_jcb;
    bool m_jcb_isSet;
    bool m_jcb_isValid;

    OAIGenericPmWithTdiInfo m_maestro;
    bool m_maestro_isSet;
    bool m_maestro_isValid;

    OAIGenericPmWithTdiInfo m_mc;
    bool m_mc_isSet;
    bool m_mc_isValid;

    QList<QString> m_store_ids;
    bool m_store_ids_isSet;
    bool m_store_ids_isValid;

    OAIGenericPmWithTdiInfo m_visa;
    bool m_visa_isSet;
    bool m_visa_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUpdatePaymentMethodInfo)

#endif // OAIUpdatePaymentMethodInfo_H
