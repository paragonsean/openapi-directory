/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalTerminalAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalTerminalAction::OAIExternalTerminalAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalTerminalAction::OAIExternalTerminalAction() {
    this->initializeModel();
}

OAIExternalTerminalAction::~OAIExternalTerminalAction() {}

void OAIExternalTerminalAction::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_confirmed_at_isSet = false;
    m_confirmed_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_terminal_id_isSet = false;
    m_terminal_id_isValid = false;
}

void OAIExternalTerminalAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalTerminalAction::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_confirmed_at_isValid = ::OpenAPI::fromJsonValue(m_confirmed_at, json[QString("confirmedAt")]);
    m_confirmed_at_isSet = !json[QString("confirmedAt")].isNull() && m_confirmed_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduledAt")]);
    m_scheduled_at_isSet = !json[QString("scheduledAt")].isNull() && m_scheduled_at_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_terminal_id, json[QString("terminalId")]);
    m_terminal_id_isSet = !json[QString("terminalId")].isNull() && m_terminal_id_isValid;
}

QString OAIExternalTerminalAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalTerminalAction::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type_isSet) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_confirmed_at_isSet) {
        obj.insert(QString("confirmedAt"), ::OpenAPI::toJsonValue(m_confirmed_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduledAt"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_terminal_id_isSet) {
        obj.insert(QString("terminalId"), ::OpenAPI::toJsonValue(m_terminal_id));
    }
    return obj;
}

QString OAIExternalTerminalAction::getActionType() const {
    return m_action_type;
}
void OAIExternalTerminalAction::setActionType(const QString &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIExternalTerminalAction::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIExternalTerminalAction::is_action_type_Valid() const{
    return m_action_type_isValid;
}

QString OAIExternalTerminalAction::getConfig() const {
    return m_config;
}
void OAIExternalTerminalAction::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIExternalTerminalAction::is_config_Set() const{
    return m_config_isSet;
}

bool OAIExternalTerminalAction::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIExternalTerminalAction::getConfirmedAt() const {
    return m_confirmed_at;
}
void OAIExternalTerminalAction::setConfirmedAt(const QDateTime &confirmed_at) {
    m_confirmed_at = confirmed_at;
    m_confirmed_at_isSet = true;
}

bool OAIExternalTerminalAction::is_confirmed_at_Set() const{
    return m_confirmed_at_isSet;
}

bool OAIExternalTerminalAction::is_confirmed_at_Valid() const{
    return m_confirmed_at_isValid;
}

QString OAIExternalTerminalAction::getId() const {
    return m_id;
}
void OAIExternalTerminalAction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExternalTerminalAction::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExternalTerminalAction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExternalTerminalAction::getResult() const {
    return m_result;
}
void OAIExternalTerminalAction::setResult(const QString &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIExternalTerminalAction::is_result_Set() const{
    return m_result_isSet;
}

bool OAIExternalTerminalAction::is_result_Valid() const{
    return m_result_isValid;
}

QDateTime OAIExternalTerminalAction::getScheduledAt() const {
    return m_scheduled_at;
}
void OAIExternalTerminalAction::setScheduledAt(const QDateTime &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAIExternalTerminalAction::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAIExternalTerminalAction::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

QString OAIExternalTerminalAction::getStatus() const {
    return m_status;
}
void OAIExternalTerminalAction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIExternalTerminalAction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIExternalTerminalAction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIExternalTerminalAction::getTerminalId() const {
    return m_terminal_id;
}
void OAIExternalTerminalAction::setTerminalId(const QString &terminal_id) {
    m_terminal_id = terminal_id;
    m_terminal_id_isSet = true;
}

bool OAIExternalTerminalAction::is_terminal_id_Set() const{
    return m_terminal_id_isSet;
}

bool OAIExternalTerminalAction::is_terminal_id_Valid() const{
    return m_terminal_id_isValid;
}

bool OAIExternalTerminalAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalTerminalAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
