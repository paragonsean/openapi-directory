/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISplitConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISplitConfiguration::OAISplitConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISplitConfiguration::OAISplitConfiguration() {
    this->initializeModel();
}

OAISplitConfiguration::~OAISplitConfiguration() {}

void OAISplitConfiguration::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_split_configuration_id_isSet = false;
    m_split_configuration_id_isValid = false;

    m_stores_isSet = false;
    m_stores_isValid = false;
}

void OAISplitConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISplitConfiguration::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_split_configuration_id_isValid = ::OpenAPI::fromJsonValue(m_split_configuration_id, json[QString("splitConfigurationId")]);
    m_split_configuration_id_isSet = !json[QString("splitConfigurationId")].isNull() && m_split_configuration_id_isValid;

    m_stores_isValid = ::OpenAPI::fromJsonValue(m_stores, json[QString("stores")]);
    m_stores_isSet = !json[QString("stores")].isNull() && m_stores_isValid;
}

QString OAISplitConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISplitConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_split_configuration_id_isSet) {
        obj.insert(QString("splitConfigurationId"), ::OpenAPI::toJsonValue(m_split_configuration_id));
    }
    if (m_stores.size() > 0) {
        obj.insert(QString("stores"), ::OpenAPI::toJsonValue(m_stores));
    }
    return obj;
}

QString OAISplitConfiguration::getDescription() const {
    return m_description;
}
void OAISplitConfiguration::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISplitConfiguration::is_description_Set() const{
    return m_description_isSet;
}

bool OAISplitConfiguration::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAISplitConfigurationRule> OAISplitConfiguration::getRules() const {
    return m_rules;
}
void OAISplitConfiguration::setRules(const QList<OAISplitConfigurationRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAISplitConfiguration::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAISplitConfiguration::is_rules_Valid() const{
    return m_rules_isValid;
}

QString OAISplitConfiguration::getSplitConfigurationId() const {
    return m_split_configuration_id;
}
void OAISplitConfiguration::setSplitConfigurationId(const QString &split_configuration_id) {
    m_split_configuration_id = split_configuration_id;
    m_split_configuration_id_isSet = true;
}

bool OAISplitConfiguration::is_split_configuration_id_Set() const{
    return m_split_configuration_id_isSet;
}

bool OAISplitConfiguration::is_split_configuration_id_Valid() const{
    return m_split_configuration_id_isValid;
}

QList<QString> OAISplitConfiguration::getStores() const {
    return m_stores;
}
void OAISplitConfiguration::setStores(const QList<QString> &stores) {
    m_stores = stores;
    m_stores_isSet = true;
}

bool OAISplitConfiguration::is_stores_Set() const{
    return m_stores_isSet;
}

bool OAISplitConfiguration::is_stores_Valid() const{
    return m_stores_isValid;
}

bool OAISplitConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_configuration_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISplitConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_rules_isValid && true;
}

} // namespace OpenAPI
