/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebhookLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebhookLinks::OAIWebhookLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebhookLinks::OAIWebhookLinks() {
    this->initializeModel();
}

OAIWebhookLinks::~OAIWebhookLinks() {}

void OAIWebhookLinks::initializeModel() {

    m_company_isSet = false;
    m_company_isValid = false;

    m_generate_hmac_isSet = false;
    m_generate_hmac_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_test_webhook_isSet = false;
    m_test_webhook_isValid = false;
}

void OAIWebhookLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebhookLinks::fromJsonObject(QJsonObject json) {

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_generate_hmac_isValid = ::OpenAPI::fromJsonValue(m_generate_hmac, json[QString("generateHmac")]);
    m_generate_hmac_isSet = !json[QString("generateHmac")].isNull() && m_generate_hmac_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("merchant")]);
    m_merchant_isSet = !json[QString("merchant")].isNull() && m_merchant_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_test_webhook_isValid = ::OpenAPI::fromJsonValue(m_test_webhook, json[QString("testWebhook")]);
    m_test_webhook_isSet = !json[QString("testWebhook")].isNull() && m_test_webhook_isValid;
}

QString OAIWebhookLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebhookLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_generate_hmac.isSet()) {
        obj.insert(QString("generateHmac"), ::OpenAPI::toJsonValue(m_generate_hmac));
    }
    if (m_merchant.isSet()) {
        obj.insert(QString("merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_test_webhook.isSet()) {
        obj.insert(QString("testWebhook"), ::OpenAPI::toJsonValue(m_test_webhook));
    }
    return obj;
}

OAILinksElement OAIWebhookLinks::getCompany() const {
    return m_company;
}
void OAIWebhookLinks::setCompany(const OAILinksElement &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIWebhookLinks::is_company_Set() const{
    return m_company_isSet;
}

bool OAIWebhookLinks::is_company_Valid() const{
    return m_company_isValid;
}

OAILinksElement OAIWebhookLinks::getGenerateHmac() const {
    return m_generate_hmac;
}
void OAIWebhookLinks::setGenerateHmac(const OAILinksElement &generate_hmac) {
    m_generate_hmac = generate_hmac;
    m_generate_hmac_isSet = true;
}

bool OAIWebhookLinks::is_generate_hmac_Set() const{
    return m_generate_hmac_isSet;
}

bool OAIWebhookLinks::is_generate_hmac_Valid() const{
    return m_generate_hmac_isValid;
}

OAILinksElement OAIWebhookLinks::getMerchant() const {
    return m_merchant;
}
void OAIWebhookLinks::setMerchant(const OAILinksElement &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIWebhookLinks::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIWebhookLinks::is_merchant_Valid() const{
    return m_merchant_isValid;
}

OAILinksElement OAIWebhookLinks::getSelf() const {
    return m_self;
}
void OAIWebhookLinks::setSelf(const OAILinksElement &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAIWebhookLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAIWebhookLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAILinksElement OAIWebhookLinks::getTestWebhook() const {
    return m_test_webhook;
}
void OAIWebhookLinks::setTestWebhook(const OAILinksElement &test_webhook) {
    m_test_webhook = test_webhook;
    m_test_webhook_isSet = true;
}

bool OAIWebhookLinks::is_test_webhook_Set() const{
    return m_test_webhook_isSet;
}

bool OAIWebhookLinks::is_test_webhook_Valid() const{
    return m_test_webhook_isValid;
}

bool OAIWebhookLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_generate_hmac.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_webhook.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebhookLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_generate_hmac_isValid && m_self_isValid && m_test_webhook_isValid && true;
}

} // namespace OpenAPI
