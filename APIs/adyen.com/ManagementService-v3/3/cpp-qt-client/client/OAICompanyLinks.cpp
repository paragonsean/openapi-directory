/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompanyLinks.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompanyLinks::OAICompanyLinks(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompanyLinks::OAICompanyLinks() {
    this->initializeModel();
}

OAICompanyLinks::~OAICompanyLinks() {}

void OAICompanyLinks::initializeModel() {

    m_api_credentials_isSet = false;
    m_api_credentials_isValid = false;

    m_self_isSet = false;
    m_self_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;

    m_webhooks_isSet = false;
    m_webhooks_isValid = false;
}

void OAICompanyLinks::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompanyLinks::fromJsonObject(QJsonObject json) {

    m_api_credentials_isValid = ::OpenAPI::fromJsonValue(m_api_credentials, json[QString("apiCredentials")]);
    m_api_credentials_isSet = !json[QString("apiCredentials")].isNull() && m_api_credentials_isValid;

    m_self_isValid = ::OpenAPI::fromJsonValue(m_self, json[QString("self")]);
    m_self_isSet = !json[QString("self")].isNull() && m_self_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;

    m_webhooks_isValid = ::OpenAPI::fromJsonValue(m_webhooks, json[QString("webhooks")]);
    m_webhooks_isSet = !json[QString("webhooks")].isNull() && m_webhooks_isValid;
}

QString OAICompanyLinks::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompanyLinks::asJsonObject() const {
    QJsonObject obj;
    if (m_api_credentials.isSet()) {
        obj.insert(QString("apiCredentials"), ::OpenAPI::toJsonValue(m_api_credentials));
    }
    if (m_self.isSet()) {
        obj.insert(QString("self"), ::OpenAPI::toJsonValue(m_self));
    }
    if (m_users.isSet()) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    if (m_webhooks.isSet()) {
        obj.insert(QString("webhooks"), ::OpenAPI::toJsonValue(m_webhooks));
    }
    return obj;
}

OAILinksElement OAICompanyLinks::getApiCredentials() const {
    return m_api_credentials;
}
void OAICompanyLinks::setApiCredentials(const OAILinksElement &api_credentials) {
    m_api_credentials = api_credentials;
    m_api_credentials_isSet = true;
}

bool OAICompanyLinks::is_api_credentials_Set() const{
    return m_api_credentials_isSet;
}

bool OAICompanyLinks::is_api_credentials_Valid() const{
    return m_api_credentials_isValid;
}

OAILinksElement OAICompanyLinks::getSelf() const {
    return m_self;
}
void OAICompanyLinks::setSelf(const OAILinksElement &self) {
    m_self = self;
    m_self_isSet = true;
}

bool OAICompanyLinks::is_self_Set() const{
    return m_self_isSet;
}

bool OAICompanyLinks::is_self_Valid() const{
    return m_self_isValid;
}

OAILinksElement OAICompanyLinks::getUsers() const {
    return m_users;
}
void OAICompanyLinks::setUsers(const OAILinksElement &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAICompanyLinks::is_users_Set() const{
    return m_users_isSet;
}

bool OAICompanyLinks::is_users_Valid() const{
    return m_users_isValid;
}

OAILinksElement OAICompanyLinks::getWebhooks() const {
    return m_webhooks;
}
void OAICompanyLinks::setWebhooks(const OAILinksElement &webhooks) {
    m_webhooks = webhooks;
    m_webhooks_isSet = true;
}

bool OAICompanyLinks::is_webhooks_Set() const{
    return m_webhooks_isSet;
}

bool OAICompanyLinks::is_webhooks_Valid() const{
    return m_webhooks_isValid;
}

bool OAICompanyLinks::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_credentials.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_webhooks.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompanyLinks::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_self_isValid && true;
}

} // namespace OpenAPI
