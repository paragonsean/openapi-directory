/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAndroidFilesCompanyLevelApi_H
#define OAI_OAIAndroidFilesCompanyLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAndroidApp.h"
#include "OAIAndroidAppsResponse.h"
#include "OAIAndroidCertificatesResponse.h"
#include "OAIRestServiceError.h"
#include "OAIUploadAndroidAppResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAndroidFilesCompanyLevelApi : public QObject {
    Q_OBJECT

public:
    OAIAndroidFilesCompanyLevelApi(const int timeOut = 0);
    ~OAIAndroidFilesCompanyLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  package_name QString [optional]
    * @param[in]  version_code qint32 [optional]
    */
    virtual void getCompaniesCompanyIdAndroidApps(const QString &company_id, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &package_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &version_code = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getCompaniesCompanyIdAndroidAppsId(const QString &company_id, const QString &id);

    /**
    * @param[in]  company_id QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  certificate_name QString [optional]
    */
    virtual void getCompaniesCompanyIdAndroidCertificates(const QString &company_id, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &certificate_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  company_id QString [required]
    */
    virtual void postCompaniesCompanyIdAndroidApps(const QString &company_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCompaniesCompanyIdAndroidAppsCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdAndroidAppsIdCallback(OAIHttpRequestWorker *worker);
    void getCompaniesCompanyIdAndroidCertificatesCallback(OAIHttpRequestWorker *worker);
    void postCompaniesCompanyIdAndroidAppsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCompaniesCompanyIdAndroidAppsSignal(OAIAndroidAppsResponse summary);
    void getCompaniesCompanyIdAndroidAppsIdSignal(OAIAndroidApp summary);
    void getCompaniesCompanyIdAndroidCertificatesSignal(OAIAndroidCertificatesResponse summary);
    void postCompaniesCompanyIdAndroidAppsSignal(OAIUploadAndroidAppResponse summary);


    void getCompaniesCompanyIdAndroidAppsSignalFull(OAIHttpRequestWorker *worker, OAIAndroidAppsResponse summary);
    void getCompaniesCompanyIdAndroidAppsIdSignalFull(OAIHttpRequestWorker *worker, OAIAndroidApp summary);
    void getCompaniesCompanyIdAndroidCertificatesSignalFull(OAIHttpRequestWorker *worker, OAIAndroidCertificatesResponse summary);
    void postCompaniesCompanyIdAndroidAppsSignalFull(OAIHttpRequestWorker *worker, OAIUploadAndroidAppResponse summary);

    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidAppsSignalError() instead")
    void getCompaniesCompanyIdAndroidAppsSignalE(OAIAndroidAppsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidAppsSignalError(OAIAndroidAppsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidAppsIdSignalError() instead")
    void getCompaniesCompanyIdAndroidAppsIdSignalE(OAIAndroidApp summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidAppsIdSignalError(OAIAndroidApp summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidCertificatesSignalError() instead")
    void getCompaniesCompanyIdAndroidCertificatesSignalE(OAIAndroidCertificatesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidCertificatesSignalError(OAIAndroidCertificatesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdAndroidAppsSignalError() instead")
    void postCompaniesCompanyIdAndroidAppsSignalE(OAIUploadAndroidAppResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdAndroidAppsSignalError(OAIUploadAndroidAppResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidAppsSignalErrorFull() instead")
    void getCompaniesCompanyIdAndroidAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidAppsIdSignalErrorFull() instead")
    void getCompaniesCompanyIdAndroidAppsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidAppsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompaniesCompanyIdAndroidCertificatesSignalErrorFull() instead")
    void getCompaniesCompanyIdAndroidCertificatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompaniesCompanyIdAndroidCertificatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCompaniesCompanyIdAndroidAppsSignalErrorFull() instead")
    void postCompaniesCompanyIdAndroidAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCompaniesCompanyIdAndroidAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
