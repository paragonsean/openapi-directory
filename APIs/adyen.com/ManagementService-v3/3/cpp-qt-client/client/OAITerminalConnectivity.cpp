/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalConnectivity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalConnectivity::OAITerminalConnectivity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalConnectivity::OAITerminalConnectivity() {
    this->initializeModel();
}

OAITerminalConnectivity::~OAITerminalConnectivity() {}

void OAITerminalConnectivity::initializeModel() {

    m_bluetooth_isSet = false;
    m_bluetooth_isValid = false;

    m_cellular_isSet = false;
    m_cellular_isValid = false;

    m_ethernet_isSet = false;
    m_ethernet_isValid = false;

    m_wifi_isSet = false;
    m_wifi_isValid = false;
}

void OAITerminalConnectivity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalConnectivity::fromJsonObject(QJsonObject json) {

    m_bluetooth_isValid = ::OpenAPI::fromJsonValue(m_bluetooth, json[QString("bluetooth")]);
    m_bluetooth_isSet = !json[QString("bluetooth")].isNull() && m_bluetooth_isValid;

    m_cellular_isValid = ::OpenAPI::fromJsonValue(m_cellular, json[QString("cellular")]);
    m_cellular_isSet = !json[QString("cellular")].isNull() && m_cellular_isValid;

    m_ethernet_isValid = ::OpenAPI::fromJsonValue(m_ethernet, json[QString("ethernet")]);
    m_ethernet_isSet = !json[QString("ethernet")].isNull() && m_ethernet_isValid;

    m_wifi_isValid = ::OpenAPI::fromJsonValue(m_wifi, json[QString("wifi")]);
    m_wifi_isSet = !json[QString("wifi")].isNull() && m_wifi_isValid;
}

QString OAITerminalConnectivity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalConnectivity::asJsonObject() const {
    QJsonObject obj;
    if (m_bluetooth.isSet()) {
        obj.insert(QString("bluetooth"), ::OpenAPI::toJsonValue(m_bluetooth));
    }
    if (m_cellular.isSet()) {
        obj.insert(QString("cellular"), ::OpenAPI::toJsonValue(m_cellular));
    }
    if (m_ethernet.isSet()) {
        obj.insert(QString("ethernet"), ::OpenAPI::toJsonValue(m_ethernet));
    }
    if (m_wifi.isSet()) {
        obj.insert(QString("wifi"), ::OpenAPI::toJsonValue(m_wifi));
    }
    return obj;
}

OAITerminalConnectivityBluetooth OAITerminalConnectivity::getBluetooth() const {
    return m_bluetooth;
}
void OAITerminalConnectivity::setBluetooth(const OAITerminalConnectivityBluetooth &bluetooth) {
    m_bluetooth = bluetooth;
    m_bluetooth_isSet = true;
}

bool OAITerminalConnectivity::is_bluetooth_Set() const{
    return m_bluetooth_isSet;
}

bool OAITerminalConnectivity::is_bluetooth_Valid() const{
    return m_bluetooth_isValid;
}

OAITerminalConnectivityCellular OAITerminalConnectivity::getCellular() const {
    return m_cellular;
}
void OAITerminalConnectivity::setCellular(const OAITerminalConnectivityCellular &cellular) {
    m_cellular = cellular;
    m_cellular_isSet = true;
}

bool OAITerminalConnectivity::is_cellular_Set() const{
    return m_cellular_isSet;
}

bool OAITerminalConnectivity::is_cellular_Valid() const{
    return m_cellular_isValid;
}

OAITerminalConnectivityEthernet OAITerminalConnectivity::getEthernet() const {
    return m_ethernet;
}
void OAITerminalConnectivity::setEthernet(const OAITerminalConnectivityEthernet &ethernet) {
    m_ethernet = ethernet;
    m_ethernet_isSet = true;
}

bool OAITerminalConnectivity::is_ethernet_Set() const{
    return m_ethernet_isSet;
}

bool OAITerminalConnectivity::is_ethernet_Valid() const{
    return m_ethernet_isValid;
}

OAITerminalConnectivityWifi OAITerminalConnectivity::getWifi() const {
    return m_wifi;
}
void OAITerminalConnectivity::setWifi(const OAITerminalConnectivityWifi &wifi) {
    m_wifi = wifi;
    m_wifi_isSet = true;
}

bool OAITerminalConnectivity::is_wifi_Set() const{
    return m_wifi_isSet;
}

bool OAITerminalConnectivity::is_wifi_Valid() const{
    return m_wifi_isValid;
}

bool OAITerminalConnectivity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bluetooth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cellular.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethernet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalConnectivity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
