/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalSettingsResponse.h
 *
 * 
 */

#ifndef OAIAdditionalSettingsResponse_H
#define OAIAdditionalSettingsResponse_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalSettingsResponse : public OAIObject {
public:
    OAIAdditionalSettingsResponse();
    OAIAdditionalSettingsResponse(QString json);
    ~OAIAdditionalSettingsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getExcludeEventCodes() const;
    void setExcludeEventCodes(const QList<QString> &exclude_event_codes);
    bool is_exclude_event_codes_Set() const;
    bool is_exclude_event_codes_Valid() const;

    QList<QString> getIncludeEventCodes() const;
    void setIncludeEventCodes(const QList<QString> &include_event_codes);
    bool is_include_event_codes_Set() const;
    bool is_include_event_codes_Valid() const;

    QMap<QString, bool> getProperties() const;
    void setProperties(const QMap<QString, bool> &properties);
    bool is_properties_Set() const;
    bool is_properties_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_exclude_event_codes;
    bool m_exclude_event_codes_isSet;
    bool m_exclude_event_codes_isValid;

    QList<QString> m_include_event_codes;
    bool m_include_event_codes_isSet;
    bool m_include_event_codes_isValid;

    QMap<QString, bool> m_properties;
    bool m_properties_isSet;
    bool m_properties_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalSettingsResponse)

#endif // OAIAdditionalSettingsResponse_H
