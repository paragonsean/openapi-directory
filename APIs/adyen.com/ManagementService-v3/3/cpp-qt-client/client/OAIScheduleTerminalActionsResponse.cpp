/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduleTerminalActionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduleTerminalActionsResponse::OAIScheduleTerminalActionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduleTerminalActionsResponse::OAIScheduleTerminalActionsResponse() {
    this->initializeModel();
}

OAIScheduleTerminalActionsResponse::~OAIScheduleTerminalActionsResponse() {}

void OAIScheduleTerminalActionsResponse::initializeModel() {

    m_action_details_isSet = false;
    m_action_details_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_scheduled_at_isSet = false;
    m_scheduled_at_isValid = false;

    m_store_id_isSet = false;
    m_store_id_isValid = false;

    m_terminals_with_errors_isSet = false;
    m_terminals_with_errors_isValid = false;

    m_total_errors_isSet = false;
    m_total_errors_isValid = false;

    m_total_scheduled_isSet = false;
    m_total_scheduled_isValid = false;
}

void OAIScheduleTerminalActionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduleTerminalActionsResponse::fromJsonObject(QJsonObject json) {

    m_action_details_isValid = ::OpenAPI::fromJsonValue(m_action_details, json[QString("actionDetails")]);
    m_action_details_isSet = !json[QString("actionDetails")].isNull() && m_action_details_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_scheduled_at_isValid = ::OpenAPI::fromJsonValue(m_scheduled_at, json[QString("scheduledAt")]);
    m_scheduled_at_isSet = !json[QString("scheduledAt")].isNull() && m_scheduled_at_isValid;

    m_store_id_isValid = ::OpenAPI::fromJsonValue(m_store_id, json[QString("storeId")]);
    m_store_id_isSet = !json[QString("storeId")].isNull() && m_store_id_isValid;

    if(json["terminalsWithErrors"].isObject()){
        auto varmap = json["terminalsWithErrors"].toObject().toVariantMap();
        m_terminals_with_errors_isValid = true;
        if(varmap.count() > 0){
            for(auto val : varmap.keys()){
                QList<QString> item;
                auto jval = QJsonValue::fromVariant(varmap.value(val));
                m_terminals_with_errors_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_terminals_with_errors_isSet &= !jval.isNull() && m_terminals_with_errors_isValid;
                m_terminals_with_errors.insert(m_terminals_with_errors.end(), val, item);
            }
        }
    }

    m_total_errors_isValid = ::OpenAPI::fromJsonValue(m_total_errors, json[QString("totalErrors")]);
    m_total_errors_isSet = !json[QString("totalErrors")].isNull() && m_total_errors_isValid;

    m_total_scheduled_isValid = ::OpenAPI::fromJsonValue(m_total_scheduled, json[QString("totalScheduled")]);
    m_total_scheduled_isSet = !json[QString("totalScheduled")].isNull() && m_total_scheduled_isValid;
}

QString OAIScheduleTerminalActionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduleTerminalActionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action_details.isSet()) {
        obj.insert(QString("actionDetails"), ::OpenAPI::toJsonValue(m_action_details));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_scheduled_at_isSet) {
        obj.insert(QString("scheduledAt"), ::OpenAPI::toJsonValue(m_scheduled_at));
    }
    if (m_store_id_isSet) {
        obj.insert(QString("storeId"), ::OpenAPI::toJsonValue(m_store_id));
    }
    if (m_terminals_with_errors.size() > 0) {
        
        obj.insert(QString("terminalsWithErrors"), toJsonValue(m_terminals_with_errors));
    }
    if (m_total_errors_isSet) {
        obj.insert(QString("totalErrors"), ::OpenAPI::toJsonValue(m_total_errors));
    }
    if (m_total_scheduled_isSet) {
        obj.insert(QString("totalScheduled"), ::OpenAPI::toJsonValue(m_total_scheduled));
    }
    return obj;
}

OAIScheduleTerminalActionsRequest_actionDetails OAIScheduleTerminalActionsResponse::getActionDetails() const {
    return m_action_details;
}
void OAIScheduleTerminalActionsResponse::setActionDetails(const OAIScheduleTerminalActionsRequest_actionDetails &action_details) {
    m_action_details = action_details;
    m_action_details_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_action_details_Set() const{
    return m_action_details_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_action_details_Valid() const{
    return m_action_details_isValid;
}

QList<OAITerminalActionScheduleDetail> OAIScheduleTerminalActionsResponse::getItems() const {
    return m_items;
}
void OAIScheduleTerminalActionsResponse::setItems(const QList<OAITerminalActionScheduleDetail> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIScheduleTerminalActionsResponse::getScheduledAt() const {
    return m_scheduled_at;
}
void OAIScheduleTerminalActionsResponse::setScheduledAt(const QString &scheduled_at) {
    m_scheduled_at = scheduled_at;
    m_scheduled_at_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_scheduled_at_Set() const{
    return m_scheduled_at_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_scheduled_at_Valid() const{
    return m_scheduled_at_isValid;
}

QString OAIScheduleTerminalActionsResponse::getStoreId() const {
    return m_store_id;
}
void OAIScheduleTerminalActionsResponse::setStoreId(const QString &store_id) {
    m_store_id = store_id;
    m_store_id_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_store_id_Set() const{
    return m_store_id_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_store_id_Valid() const{
    return m_store_id_isValid;
}

QMap<QString, QList<QString>> OAIScheduleTerminalActionsResponse::getTerminalsWithErrors() const {
    return m_terminals_with_errors;
}
void OAIScheduleTerminalActionsResponse::setTerminalsWithErrors(const QMap<QString, QList<QString>> &terminals_with_errors) {
    m_terminals_with_errors = terminals_with_errors;
    m_terminals_with_errors_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_terminals_with_errors_Set() const{
    return m_terminals_with_errors_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_terminals_with_errors_Valid() const{
    return m_terminals_with_errors_isValid;
}

qint32 OAIScheduleTerminalActionsResponse::getTotalErrors() const {
    return m_total_errors;
}
void OAIScheduleTerminalActionsResponse::setTotalErrors(const qint32 &total_errors) {
    m_total_errors = total_errors;
    m_total_errors_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_total_errors_Set() const{
    return m_total_errors_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_total_errors_Valid() const{
    return m_total_errors_isValid;
}

qint32 OAIScheduleTerminalActionsResponse::getTotalScheduled() const {
    return m_total_scheduled;
}
void OAIScheduleTerminalActionsResponse::setTotalScheduled(const qint32 &total_scheduled) {
    m_total_scheduled = total_scheduled;
    m_total_scheduled_isSet = true;
}

bool OAIScheduleTerminalActionsResponse::is_total_scheduled_Set() const{
    return m_total_scheduled_isSet;
}

bool OAIScheduleTerminalActionsResponse::is_total_scheduled_Valid() const{
    return m_total_scheduled_isValid;
}

bool OAIScheduleTerminalActionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminals_with_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_errors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_scheduled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduleTerminalActionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
