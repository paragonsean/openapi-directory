/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINexo.h
 *
 * 
 */

#ifndef OAINexo_H
#define OAINexo_H

#include <QJsonObject>

#include "OAIEventUrl.h"
#include "OAIKey.h"
#include "OAINotification.h"
#include "OAINotificationUrl.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAINotificationUrl;
class OAIKey;
class OAIEventUrl;
class OAINotification;

class OAINexo : public OAIObject {
public:
    OAINexo();
    OAINexo(QString json);
    ~OAINexo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAINotificationUrl getDisplayUrls() const;
    void setDisplayUrls(const OAINotificationUrl &display_urls);
    bool is_display_urls_Set() const;
    bool is_display_urls_Valid() const;

    OAIKey getEncryptionKey() const;
    void setEncryptionKey(const OAIKey &encryption_key);
    bool is_encryption_key_Set() const;
    bool is_encryption_key_Valid() const;

    OAIEventUrl getEventUrls() const;
    void setEventUrls(const OAIEventUrl &event_urls);
    bool is_event_urls_Set() const;
    bool is_event_urls_Valid() const;

    QList<QString> getNexoEventUrls() const;
    void setNexoEventUrls(const QList<QString> &nexo_event_urls);
    bool is_nexo_event_urls_Set() const;
    bool is_nexo_event_urls_Valid() const;

    OAINotification getNotification() const;
    void setNotification(const OAINotification &notification);
    bool is_notification_Set() const;
    bool is_notification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAINotificationUrl m_display_urls;
    bool m_display_urls_isSet;
    bool m_display_urls_isValid;

    OAIKey m_encryption_key;
    bool m_encryption_key_isSet;
    bool m_encryption_key_isValid;

    OAIEventUrl m_event_urls;
    bool m_event_urls_isSet;
    bool m_event_urls_isValid;

    QList<QString> m_nexo_event_urls;
    bool m_nexo_event_urls_isSet;
    bool m_nexo_event_urls_isValid;

    OAINotification m_notification;
    bool m_notification_isSet;
    bool m_notification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINexo)

#endif // OAINexo_H
