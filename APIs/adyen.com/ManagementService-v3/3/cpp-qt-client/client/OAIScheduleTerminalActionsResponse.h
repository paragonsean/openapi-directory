/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScheduleTerminalActionsResponse.h
 *
 * 
 */

#ifndef OAIScheduleTerminalActionsResponse_H
#define OAIScheduleTerminalActionsResponse_H

#include <QJsonObject>

#include "OAIScheduleTerminalActionsRequest_actionDetails.h"
#include "OAITerminalActionScheduleDetail.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIScheduleTerminalActionsRequest_actionDetails;
class OAITerminalActionScheduleDetail;

class OAIScheduleTerminalActionsResponse : public OAIObject {
public:
    OAIScheduleTerminalActionsResponse();
    OAIScheduleTerminalActionsResponse(QString json);
    ~OAIScheduleTerminalActionsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIScheduleTerminalActionsRequest_actionDetails getActionDetails() const;
    void setActionDetails(const OAIScheduleTerminalActionsRequest_actionDetails &action_details);
    bool is_action_details_Set() const;
    bool is_action_details_Valid() const;

    QList<OAITerminalActionScheduleDetail> getItems() const;
    void setItems(const QList<OAITerminalActionScheduleDetail> &items);
    bool is_items_Set() const;
    bool is_items_Valid() const;

    QString getScheduledAt() const;
    void setScheduledAt(const QString &scheduled_at);
    bool is_scheduled_at_Set() const;
    bool is_scheduled_at_Valid() const;

    QString getStoreId() const;
    void setStoreId(const QString &store_id);
    bool is_store_id_Set() const;
    bool is_store_id_Valid() const;

    QMap<QString, QList<QString>> getTerminalsWithErrors() const;
    void setTerminalsWithErrors(const QMap<QString, QList<QString>> &terminals_with_errors);
    bool is_terminals_with_errors_Set() const;
    bool is_terminals_with_errors_Valid() const;

    qint32 getTotalErrors() const;
    void setTotalErrors(const qint32 &total_errors);
    bool is_total_errors_Set() const;
    bool is_total_errors_Valid() const;

    qint32 getTotalScheduled() const;
    void setTotalScheduled(const qint32 &total_scheduled);
    bool is_total_scheduled_Set() const;
    bool is_total_scheduled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIScheduleTerminalActionsRequest_actionDetails m_action_details;
    bool m_action_details_isSet;
    bool m_action_details_isValid;

    QList<OAITerminalActionScheduleDetail> m_items;
    bool m_items_isSet;
    bool m_items_isValid;

    QString m_scheduled_at;
    bool m_scheduled_at_isSet;
    bool m_scheduled_at_isValid;

    QString m_store_id;
    bool m_store_id_isSet;
    bool m_store_id_isValid;

    QMap<QString, QList<QString>> m_terminals_with_errors;
    bool m_terminals_with_errors_isSet;
    bool m_terminals_with_errors_isValid;

    qint32 m_total_errors;
    bool m_total_errors_isSet;
    bool m_total_errors_isValid;

    qint32 m_total_scheduled;
    bool m_total_scheduled_isSet;
    bool m_total_scheduled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScheduleTerminalActionsResponse)

#endif // OAIScheduleTerminalActionsResponse_H
