/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReceiptPrinting.h
 *
 * 
 */

#ifndef OAIReceiptPrinting_H
#define OAIReceiptPrinting_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIReceiptPrinting : public OAIObject {
public:
    OAIReceiptPrinting();
    OAIReceiptPrinting(QString json);
    ~OAIReceiptPrinting() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isMerchantApproved() const;
    void setMerchantApproved(const bool &merchant_approved);
    bool is_merchant_approved_Set() const;
    bool is_merchant_approved_Valid() const;

    bool isMerchantCancelled() const;
    void setMerchantCancelled(const bool &merchant_cancelled);
    bool is_merchant_cancelled_Set() const;
    bool is_merchant_cancelled_Valid() const;

    bool isMerchantCaptureApproved() const;
    void setMerchantCaptureApproved(const bool &merchant_capture_approved);
    bool is_merchant_capture_approved_Set() const;
    bool is_merchant_capture_approved_Valid() const;

    bool isMerchantCaptureRefused() const;
    void setMerchantCaptureRefused(const bool &merchant_capture_refused);
    bool is_merchant_capture_refused_Set() const;
    bool is_merchant_capture_refused_Valid() const;

    bool isMerchantRefundApproved() const;
    void setMerchantRefundApproved(const bool &merchant_refund_approved);
    bool is_merchant_refund_approved_Set() const;
    bool is_merchant_refund_approved_Valid() const;

    bool isMerchantRefundRefused() const;
    void setMerchantRefundRefused(const bool &merchant_refund_refused);
    bool is_merchant_refund_refused_Set() const;
    bool is_merchant_refund_refused_Valid() const;

    bool isMerchantRefused() const;
    void setMerchantRefused(const bool &merchant_refused);
    bool is_merchant_refused_Set() const;
    bool is_merchant_refused_Valid() const;

    bool isMerchantVoid() const;
    void setMerchantVoid(const bool &merchant_void);
    bool is_merchant_void_Set() const;
    bool is_merchant_void_Valid() const;

    bool isShopperApproved() const;
    void setShopperApproved(const bool &shopper_approved);
    bool is_shopper_approved_Set() const;
    bool is_shopper_approved_Valid() const;

    bool isShopperCancelled() const;
    void setShopperCancelled(const bool &shopper_cancelled);
    bool is_shopper_cancelled_Set() const;
    bool is_shopper_cancelled_Valid() const;

    bool isShopperCaptureApproved() const;
    void setShopperCaptureApproved(const bool &shopper_capture_approved);
    bool is_shopper_capture_approved_Set() const;
    bool is_shopper_capture_approved_Valid() const;

    bool isShopperCaptureRefused() const;
    void setShopperCaptureRefused(const bool &shopper_capture_refused);
    bool is_shopper_capture_refused_Set() const;
    bool is_shopper_capture_refused_Valid() const;

    bool isShopperRefundApproved() const;
    void setShopperRefundApproved(const bool &shopper_refund_approved);
    bool is_shopper_refund_approved_Set() const;
    bool is_shopper_refund_approved_Valid() const;

    bool isShopperRefundRefused() const;
    void setShopperRefundRefused(const bool &shopper_refund_refused);
    bool is_shopper_refund_refused_Set() const;
    bool is_shopper_refund_refused_Valid() const;

    bool isShopperRefused() const;
    void setShopperRefused(const bool &shopper_refused);
    bool is_shopper_refused_Set() const;
    bool is_shopper_refused_Valid() const;

    bool isShopperVoid() const;
    void setShopperVoid(const bool &shopper_void);
    bool is_shopper_void_Set() const;
    bool is_shopper_void_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_merchant_approved;
    bool m_merchant_approved_isSet;
    bool m_merchant_approved_isValid;

    bool m_merchant_cancelled;
    bool m_merchant_cancelled_isSet;
    bool m_merchant_cancelled_isValid;

    bool m_merchant_capture_approved;
    bool m_merchant_capture_approved_isSet;
    bool m_merchant_capture_approved_isValid;

    bool m_merchant_capture_refused;
    bool m_merchant_capture_refused_isSet;
    bool m_merchant_capture_refused_isValid;

    bool m_merchant_refund_approved;
    bool m_merchant_refund_approved_isSet;
    bool m_merchant_refund_approved_isValid;

    bool m_merchant_refund_refused;
    bool m_merchant_refund_refused_isSet;
    bool m_merchant_refund_refused_isValid;

    bool m_merchant_refused;
    bool m_merchant_refused_isSet;
    bool m_merchant_refused_isValid;

    bool m_merchant_void;
    bool m_merchant_void_isSet;
    bool m_merchant_void_isValid;

    bool m_shopper_approved;
    bool m_shopper_approved_isSet;
    bool m_shopper_approved_isValid;

    bool m_shopper_cancelled;
    bool m_shopper_cancelled_isSet;
    bool m_shopper_cancelled_isValid;

    bool m_shopper_capture_approved;
    bool m_shopper_capture_approved_isSet;
    bool m_shopper_capture_approved_isValid;

    bool m_shopper_capture_refused;
    bool m_shopper_capture_refused_isSet;
    bool m_shopper_capture_refused_isValid;

    bool m_shopper_refund_approved;
    bool m_shopper_refund_approved_isSet;
    bool m_shopper_refund_approved_isValid;

    bool m_shopper_refund_refused;
    bool m_shopper_refund_refused_isSet;
    bool m_shopper_refund_refused_isValid;

    bool m_shopper_refused;
    bool m_shopper_refused_isSet;
    bool m_shopper_refused_isValid;

    bool m_shopper_void;
    bool m_shopper_void_isSet;
    bool m_shopper_void_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReceiptPrinting)

#endif // OAIReceiptPrinting_H
