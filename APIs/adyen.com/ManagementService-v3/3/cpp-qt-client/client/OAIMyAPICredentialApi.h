/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMyAPICredentialApi_H
#define OAI_OAIMyAPICredentialApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAllowedOrigin.h"
#include "OAIAllowedOriginsResponse.h"
#include "OAICreateAllowedOriginRequest.h"
#include "OAIGenerateClientKeyResponse.h"
#include "OAIMeApiCredential.h"
#include "OAIRestServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMyAPICredentialApi : public QObject {
    Q_OBJECT

public:
    OAIMyAPICredentialApi(const int timeOut = 0);
    ~OAIMyAPICredentialApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  origin_id QString [required]
    */
    virtual void deleteMeAllowedOriginsOriginId(const QString &origin_id);


    virtual void getMe();


    virtual void getMeAllowedOrigins();

    /**
    * @param[in]  origin_id QString [required]
    */
    virtual void getMeAllowedOriginsOriginId(const QString &origin_id);

    /**
    * @param[in]  oai_create_allowed_origin_request OAICreateAllowedOriginRequest [optional]
    */
    virtual void postMeAllowedOrigins(const ::OpenAPI::OptionalParam<OAICreateAllowedOriginRequest> &oai_create_allowed_origin_request = ::OpenAPI::OptionalParam<OAICreateAllowedOriginRequest>());


    virtual void postMeGenerateClientKey();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMeAllowedOriginsOriginIdCallback(OAIHttpRequestWorker *worker);
    void getMeCallback(OAIHttpRequestWorker *worker);
    void getMeAllowedOriginsCallback(OAIHttpRequestWorker *worker);
    void getMeAllowedOriginsOriginIdCallback(OAIHttpRequestWorker *worker);
    void postMeAllowedOriginsCallback(OAIHttpRequestWorker *worker);
    void postMeGenerateClientKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMeAllowedOriginsOriginIdSignal();
    void getMeSignal(OAIMeApiCredential summary);
    void getMeAllowedOriginsSignal(OAIAllowedOriginsResponse summary);
    void getMeAllowedOriginsOriginIdSignal(OAIAllowedOrigin summary);
    void postMeAllowedOriginsSignal(OAIAllowedOrigin summary);
    void postMeGenerateClientKeySignal(OAIGenerateClientKeyResponse summary);


    void deleteMeAllowedOriginsOriginIdSignalFull(OAIHttpRequestWorker *worker);
    void getMeSignalFull(OAIHttpRequestWorker *worker, OAIMeApiCredential summary);
    void getMeAllowedOriginsSignalFull(OAIHttpRequestWorker *worker, OAIAllowedOriginsResponse summary);
    void getMeAllowedOriginsOriginIdSignalFull(OAIHttpRequestWorker *worker, OAIAllowedOrigin summary);
    void postMeAllowedOriginsSignalFull(OAIHttpRequestWorker *worker, OAIAllowedOrigin summary);
    void postMeGenerateClientKeySignalFull(OAIHttpRequestWorker *worker, OAIGenerateClientKeyResponse summary);

    Q_DECL_DEPRECATED_X("Use deleteMeAllowedOriginsOriginIdSignalError() instead")
    void deleteMeAllowedOriginsOriginIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeAllowedOriginsOriginIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalError() instead")
    void getMeSignalE(OAIMeApiCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalError(OAIMeApiCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeAllowedOriginsSignalError() instead")
    void getMeAllowedOriginsSignalE(OAIAllowedOriginsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeAllowedOriginsSignalError(OAIAllowedOriginsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeAllowedOriginsOriginIdSignalError() instead")
    void getMeAllowedOriginsOriginIdSignalE(OAIAllowedOrigin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeAllowedOriginsOriginIdSignalError(OAIAllowedOrigin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMeAllowedOriginsSignalError() instead")
    void postMeAllowedOriginsSignalE(OAIAllowedOrigin summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMeAllowedOriginsSignalError(OAIAllowedOrigin summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMeGenerateClientKeySignalError() instead")
    void postMeGenerateClientKeySignalE(OAIGenerateClientKeyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMeGenerateClientKeySignalError(OAIGenerateClientKeyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMeAllowedOriginsOriginIdSignalErrorFull() instead")
    void deleteMeAllowedOriginsOriginIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMeAllowedOriginsOriginIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeSignalErrorFull() instead")
    void getMeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeAllowedOriginsSignalErrorFull() instead")
    void getMeAllowedOriginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeAllowedOriginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMeAllowedOriginsOriginIdSignalErrorFull() instead")
    void getMeAllowedOriginsOriginIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMeAllowedOriginsOriginIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMeAllowedOriginsSignalErrorFull() instead")
    void postMeAllowedOriginsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMeAllowedOriginsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMeGenerateClientKeySignalErrorFull() instead")
    void postMeGenerateClientKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMeGenerateClientKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
