/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITerminalConnectivity.h
 *
 * 
 */

#ifndef OAITerminalConnectivity_H
#define OAITerminalConnectivity_H

#include <QJsonObject>

#include "OAITerminalConnectivityBluetooth.h"
#include "OAITerminalConnectivityCellular.h"
#include "OAITerminalConnectivityEthernet.h"
#include "OAITerminalConnectivityWifi.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITerminalConnectivityBluetooth;
class OAITerminalConnectivityCellular;
class OAITerminalConnectivityEthernet;
class OAITerminalConnectivityWifi;

class OAITerminalConnectivity : public OAIObject {
public:
    OAITerminalConnectivity();
    OAITerminalConnectivity(QString json);
    ~OAITerminalConnectivity() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITerminalConnectivityBluetooth getBluetooth() const;
    void setBluetooth(const OAITerminalConnectivityBluetooth &bluetooth);
    bool is_bluetooth_Set() const;
    bool is_bluetooth_Valid() const;

    OAITerminalConnectivityCellular getCellular() const;
    void setCellular(const OAITerminalConnectivityCellular &cellular);
    bool is_cellular_Set() const;
    bool is_cellular_Valid() const;

    OAITerminalConnectivityEthernet getEthernet() const;
    void setEthernet(const OAITerminalConnectivityEthernet &ethernet);
    bool is_ethernet_Set() const;
    bool is_ethernet_Valid() const;

    OAITerminalConnectivityWifi getWifi() const;
    void setWifi(const OAITerminalConnectivityWifi &wifi);
    bool is_wifi_Set() const;
    bool is_wifi_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITerminalConnectivityBluetooth m_bluetooth;
    bool m_bluetooth_isSet;
    bool m_bluetooth_isValid;

    OAITerminalConnectivityCellular m_cellular;
    bool m_cellular_isSet;
    bool m_cellular_isValid;

    OAITerminalConnectivityEthernet m_ethernet;
    bool m_ethernet_isSet;
    bool m_ethernet_isValid;

    OAITerminalConnectivityWifi m_wifi;
    bool m_wifi_isSet;
    bool m_wifi_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITerminalConnectivity)

#endif // OAITerminalConnectivity_H
