/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReceiptPrinting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReceiptPrinting::OAIReceiptPrinting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReceiptPrinting::OAIReceiptPrinting() {
    this->initializeModel();
}

OAIReceiptPrinting::~OAIReceiptPrinting() {}

void OAIReceiptPrinting::initializeModel() {

    m_merchant_approved_isSet = false;
    m_merchant_approved_isValid = false;

    m_merchant_cancelled_isSet = false;
    m_merchant_cancelled_isValid = false;

    m_merchant_capture_approved_isSet = false;
    m_merchant_capture_approved_isValid = false;

    m_merchant_capture_refused_isSet = false;
    m_merchant_capture_refused_isValid = false;

    m_merchant_refund_approved_isSet = false;
    m_merchant_refund_approved_isValid = false;

    m_merchant_refund_refused_isSet = false;
    m_merchant_refund_refused_isValid = false;

    m_merchant_refused_isSet = false;
    m_merchant_refused_isValid = false;

    m_merchant_void_isSet = false;
    m_merchant_void_isValid = false;

    m_shopper_approved_isSet = false;
    m_shopper_approved_isValid = false;

    m_shopper_cancelled_isSet = false;
    m_shopper_cancelled_isValid = false;

    m_shopper_capture_approved_isSet = false;
    m_shopper_capture_approved_isValid = false;

    m_shopper_capture_refused_isSet = false;
    m_shopper_capture_refused_isValid = false;

    m_shopper_refund_approved_isSet = false;
    m_shopper_refund_approved_isValid = false;

    m_shopper_refund_refused_isSet = false;
    m_shopper_refund_refused_isValid = false;

    m_shopper_refused_isSet = false;
    m_shopper_refused_isValid = false;

    m_shopper_void_isSet = false;
    m_shopper_void_isValid = false;
}

void OAIReceiptPrinting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReceiptPrinting::fromJsonObject(QJsonObject json) {

    m_merchant_approved_isValid = ::OpenAPI::fromJsonValue(m_merchant_approved, json[QString("merchantApproved")]);
    m_merchant_approved_isSet = !json[QString("merchantApproved")].isNull() && m_merchant_approved_isValid;

    m_merchant_cancelled_isValid = ::OpenAPI::fromJsonValue(m_merchant_cancelled, json[QString("merchantCancelled")]);
    m_merchant_cancelled_isSet = !json[QString("merchantCancelled")].isNull() && m_merchant_cancelled_isValid;

    m_merchant_capture_approved_isValid = ::OpenAPI::fromJsonValue(m_merchant_capture_approved, json[QString("merchantCaptureApproved")]);
    m_merchant_capture_approved_isSet = !json[QString("merchantCaptureApproved")].isNull() && m_merchant_capture_approved_isValid;

    m_merchant_capture_refused_isValid = ::OpenAPI::fromJsonValue(m_merchant_capture_refused, json[QString("merchantCaptureRefused")]);
    m_merchant_capture_refused_isSet = !json[QString("merchantCaptureRefused")].isNull() && m_merchant_capture_refused_isValid;

    m_merchant_refund_approved_isValid = ::OpenAPI::fromJsonValue(m_merchant_refund_approved, json[QString("merchantRefundApproved")]);
    m_merchant_refund_approved_isSet = !json[QString("merchantRefundApproved")].isNull() && m_merchant_refund_approved_isValid;

    m_merchant_refund_refused_isValid = ::OpenAPI::fromJsonValue(m_merchant_refund_refused, json[QString("merchantRefundRefused")]);
    m_merchant_refund_refused_isSet = !json[QString("merchantRefundRefused")].isNull() && m_merchant_refund_refused_isValid;

    m_merchant_refused_isValid = ::OpenAPI::fromJsonValue(m_merchant_refused, json[QString("merchantRefused")]);
    m_merchant_refused_isSet = !json[QString("merchantRefused")].isNull() && m_merchant_refused_isValid;

    m_merchant_void_isValid = ::OpenAPI::fromJsonValue(m_merchant_void, json[QString("merchantVoid")]);
    m_merchant_void_isSet = !json[QString("merchantVoid")].isNull() && m_merchant_void_isValid;

    m_shopper_approved_isValid = ::OpenAPI::fromJsonValue(m_shopper_approved, json[QString("shopperApproved")]);
    m_shopper_approved_isSet = !json[QString("shopperApproved")].isNull() && m_shopper_approved_isValid;

    m_shopper_cancelled_isValid = ::OpenAPI::fromJsonValue(m_shopper_cancelled, json[QString("shopperCancelled")]);
    m_shopper_cancelled_isSet = !json[QString("shopperCancelled")].isNull() && m_shopper_cancelled_isValid;

    m_shopper_capture_approved_isValid = ::OpenAPI::fromJsonValue(m_shopper_capture_approved, json[QString("shopperCaptureApproved")]);
    m_shopper_capture_approved_isSet = !json[QString("shopperCaptureApproved")].isNull() && m_shopper_capture_approved_isValid;

    m_shopper_capture_refused_isValid = ::OpenAPI::fromJsonValue(m_shopper_capture_refused, json[QString("shopperCaptureRefused")]);
    m_shopper_capture_refused_isSet = !json[QString("shopperCaptureRefused")].isNull() && m_shopper_capture_refused_isValid;

    m_shopper_refund_approved_isValid = ::OpenAPI::fromJsonValue(m_shopper_refund_approved, json[QString("shopperRefundApproved")]);
    m_shopper_refund_approved_isSet = !json[QString("shopperRefundApproved")].isNull() && m_shopper_refund_approved_isValid;

    m_shopper_refund_refused_isValid = ::OpenAPI::fromJsonValue(m_shopper_refund_refused, json[QString("shopperRefundRefused")]);
    m_shopper_refund_refused_isSet = !json[QString("shopperRefundRefused")].isNull() && m_shopper_refund_refused_isValid;

    m_shopper_refused_isValid = ::OpenAPI::fromJsonValue(m_shopper_refused, json[QString("shopperRefused")]);
    m_shopper_refused_isSet = !json[QString("shopperRefused")].isNull() && m_shopper_refused_isValid;

    m_shopper_void_isValid = ::OpenAPI::fromJsonValue(m_shopper_void, json[QString("shopperVoid")]);
    m_shopper_void_isSet = !json[QString("shopperVoid")].isNull() && m_shopper_void_isValid;
}

QString OAIReceiptPrinting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReceiptPrinting::asJsonObject() const {
    QJsonObject obj;
    if (m_merchant_approved_isSet) {
        obj.insert(QString("merchantApproved"), ::OpenAPI::toJsonValue(m_merchant_approved));
    }
    if (m_merchant_cancelled_isSet) {
        obj.insert(QString("merchantCancelled"), ::OpenAPI::toJsonValue(m_merchant_cancelled));
    }
    if (m_merchant_capture_approved_isSet) {
        obj.insert(QString("merchantCaptureApproved"), ::OpenAPI::toJsonValue(m_merchant_capture_approved));
    }
    if (m_merchant_capture_refused_isSet) {
        obj.insert(QString("merchantCaptureRefused"), ::OpenAPI::toJsonValue(m_merchant_capture_refused));
    }
    if (m_merchant_refund_approved_isSet) {
        obj.insert(QString("merchantRefundApproved"), ::OpenAPI::toJsonValue(m_merchant_refund_approved));
    }
    if (m_merchant_refund_refused_isSet) {
        obj.insert(QString("merchantRefundRefused"), ::OpenAPI::toJsonValue(m_merchant_refund_refused));
    }
    if (m_merchant_refused_isSet) {
        obj.insert(QString("merchantRefused"), ::OpenAPI::toJsonValue(m_merchant_refused));
    }
    if (m_merchant_void_isSet) {
        obj.insert(QString("merchantVoid"), ::OpenAPI::toJsonValue(m_merchant_void));
    }
    if (m_shopper_approved_isSet) {
        obj.insert(QString("shopperApproved"), ::OpenAPI::toJsonValue(m_shopper_approved));
    }
    if (m_shopper_cancelled_isSet) {
        obj.insert(QString("shopperCancelled"), ::OpenAPI::toJsonValue(m_shopper_cancelled));
    }
    if (m_shopper_capture_approved_isSet) {
        obj.insert(QString("shopperCaptureApproved"), ::OpenAPI::toJsonValue(m_shopper_capture_approved));
    }
    if (m_shopper_capture_refused_isSet) {
        obj.insert(QString("shopperCaptureRefused"), ::OpenAPI::toJsonValue(m_shopper_capture_refused));
    }
    if (m_shopper_refund_approved_isSet) {
        obj.insert(QString("shopperRefundApproved"), ::OpenAPI::toJsonValue(m_shopper_refund_approved));
    }
    if (m_shopper_refund_refused_isSet) {
        obj.insert(QString("shopperRefundRefused"), ::OpenAPI::toJsonValue(m_shopper_refund_refused));
    }
    if (m_shopper_refused_isSet) {
        obj.insert(QString("shopperRefused"), ::OpenAPI::toJsonValue(m_shopper_refused));
    }
    if (m_shopper_void_isSet) {
        obj.insert(QString("shopperVoid"), ::OpenAPI::toJsonValue(m_shopper_void));
    }
    return obj;
}

bool OAIReceiptPrinting::isMerchantApproved() const {
    return m_merchant_approved;
}
void OAIReceiptPrinting::setMerchantApproved(const bool &merchant_approved) {
    m_merchant_approved = merchant_approved;
    m_merchant_approved_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_approved_Set() const{
    return m_merchant_approved_isSet;
}

bool OAIReceiptPrinting::is_merchant_approved_Valid() const{
    return m_merchant_approved_isValid;
}

bool OAIReceiptPrinting::isMerchantCancelled() const {
    return m_merchant_cancelled;
}
void OAIReceiptPrinting::setMerchantCancelled(const bool &merchant_cancelled) {
    m_merchant_cancelled = merchant_cancelled;
    m_merchant_cancelled_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_cancelled_Set() const{
    return m_merchant_cancelled_isSet;
}

bool OAIReceiptPrinting::is_merchant_cancelled_Valid() const{
    return m_merchant_cancelled_isValid;
}

bool OAIReceiptPrinting::isMerchantCaptureApproved() const {
    return m_merchant_capture_approved;
}
void OAIReceiptPrinting::setMerchantCaptureApproved(const bool &merchant_capture_approved) {
    m_merchant_capture_approved = merchant_capture_approved;
    m_merchant_capture_approved_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_capture_approved_Set() const{
    return m_merchant_capture_approved_isSet;
}

bool OAIReceiptPrinting::is_merchant_capture_approved_Valid() const{
    return m_merchant_capture_approved_isValid;
}

bool OAIReceiptPrinting::isMerchantCaptureRefused() const {
    return m_merchant_capture_refused;
}
void OAIReceiptPrinting::setMerchantCaptureRefused(const bool &merchant_capture_refused) {
    m_merchant_capture_refused = merchant_capture_refused;
    m_merchant_capture_refused_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_capture_refused_Set() const{
    return m_merchant_capture_refused_isSet;
}

bool OAIReceiptPrinting::is_merchant_capture_refused_Valid() const{
    return m_merchant_capture_refused_isValid;
}

bool OAIReceiptPrinting::isMerchantRefundApproved() const {
    return m_merchant_refund_approved;
}
void OAIReceiptPrinting::setMerchantRefundApproved(const bool &merchant_refund_approved) {
    m_merchant_refund_approved = merchant_refund_approved;
    m_merchant_refund_approved_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_refund_approved_Set() const{
    return m_merchant_refund_approved_isSet;
}

bool OAIReceiptPrinting::is_merchant_refund_approved_Valid() const{
    return m_merchant_refund_approved_isValid;
}

bool OAIReceiptPrinting::isMerchantRefundRefused() const {
    return m_merchant_refund_refused;
}
void OAIReceiptPrinting::setMerchantRefundRefused(const bool &merchant_refund_refused) {
    m_merchant_refund_refused = merchant_refund_refused;
    m_merchant_refund_refused_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_refund_refused_Set() const{
    return m_merchant_refund_refused_isSet;
}

bool OAIReceiptPrinting::is_merchant_refund_refused_Valid() const{
    return m_merchant_refund_refused_isValid;
}

bool OAIReceiptPrinting::isMerchantRefused() const {
    return m_merchant_refused;
}
void OAIReceiptPrinting::setMerchantRefused(const bool &merchant_refused) {
    m_merchant_refused = merchant_refused;
    m_merchant_refused_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_refused_Set() const{
    return m_merchant_refused_isSet;
}

bool OAIReceiptPrinting::is_merchant_refused_Valid() const{
    return m_merchant_refused_isValid;
}

bool OAIReceiptPrinting::isMerchantVoid() const {
    return m_merchant_void;
}
void OAIReceiptPrinting::setMerchantVoid(const bool &merchant_void) {
    m_merchant_void = merchant_void;
    m_merchant_void_isSet = true;
}

bool OAIReceiptPrinting::is_merchant_void_Set() const{
    return m_merchant_void_isSet;
}

bool OAIReceiptPrinting::is_merchant_void_Valid() const{
    return m_merchant_void_isValid;
}

bool OAIReceiptPrinting::isShopperApproved() const {
    return m_shopper_approved;
}
void OAIReceiptPrinting::setShopperApproved(const bool &shopper_approved) {
    m_shopper_approved = shopper_approved;
    m_shopper_approved_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_approved_Set() const{
    return m_shopper_approved_isSet;
}

bool OAIReceiptPrinting::is_shopper_approved_Valid() const{
    return m_shopper_approved_isValid;
}

bool OAIReceiptPrinting::isShopperCancelled() const {
    return m_shopper_cancelled;
}
void OAIReceiptPrinting::setShopperCancelled(const bool &shopper_cancelled) {
    m_shopper_cancelled = shopper_cancelled;
    m_shopper_cancelled_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_cancelled_Set() const{
    return m_shopper_cancelled_isSet;
}

bool OAIReceiptPrinting::is_shopper_cancelled_Valid() const{
    return m_shopper_cancelled_isValid;
}

bool OAIReceiptPrinting::isShopperCaptureApproved() const {
    return m_shopper_capture_approved;
}
void OAIReceiptPrinting::setShopperCaptureApproved(const bool &shopper_capture_approved) {
    m_shopper_capture_approved = shopper_capture_approved;
    m_shopper_capture_approved_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_capture_approved_Set() const{
    return m_shopper_capture_approved_isSet;
}

bool OAIReceiptPrinting::is_shopper_capture_approved_Valid() const{
    return m_shopper_capture_approved_isValid;
}

bool OAIReceiptPrinting::isShopperCaptureRefused() const {
    return m_shopper_capture_refused;
}
void OAIReceiptPrinting::setShopperCaptureRefused(const bool &shopper_capture_refused) {
    m_shopper_capture_refused = shopper_capture_refused;
    m_shopper_capture_refused_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_capture_refused_Set() const{
    return m_shopper_capture_refused_isSet;
}

bool OAIReceiptPrinting::is_shopper_capture_refused_Valid() const{
    return m_shopper_capture_refused_isValid;
}

bool OAIReceiptPrinting::isShopperRefundApproved() const {
    return m_shopper_refund_approved;
}
void OAIReceiptPrinting::setShopperRefundApproved(const bool &shopper_refund_approved) {
    m_shopper_refund_approved = shopper_refund_approved;
    m_shopper_refund_approved_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_refund_approved_Set() const{
    return m_shopper_refund_approved_isSet;
}

bool OAIReceiptPrinting::is_shopper_refund_approved_Valid() const{
    return m_shopper_refund_approved_isValid;
}

bool OAIReceiptPrinting::isShopperRefundRefused() const {
    return m_shopper_refund_refused;
}
void OAIReceiptPrinting::setShopperRefundRefused(const bool &shopper_refund_refused) {
    m_shopper_refund_refused = shopper_refund_refused;
    m_shopper_refund_refused_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_refund_refused_Set() const{
    return m_shopper_refund_refused_isSet;
}

bool OAIReceiptPrinting::is_shopper_refund_refused_Valid() const{
    return m_shopper_refund_refused_isValid;
}

bool OAIReceiptPrinting::isShopperRefused() const {
    return m_shopper_refused;
}
void OAIReceiptPrinting::setShopperRefused(const bool &shopper_refused) {
    m_shopper_refused = shopper_refused;
    m_shopper_refused_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_refused_Set() const{
    return m_shopper_refused_isSet;
}

bool OAIReceiptPrinting::is_shopper_refused_Valid() const{
    return m_shopper_refused_isValid;
}

bool OAIReceiptPrinting::isShopperVoid() const {
    return m_shopper_void;
}
void OAIReceiptPrinting::setShopperVoid(const bool &shopper_void) {
    m_shopper_void = shopper_void;
    m_shopper_void_isSet = true;
}

bool OAIReceiptPrinting::is_shopper_void_Set() const{
    return m_shopper_void_isSet;
}

bool OAIReceiptPrinting::is_shopper_void_Valid() const{
    return m_shopper_void_isValid;
}

bool OAIReceiptPrinting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merchant_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_capture_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_capture_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_refund_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_refund_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_void_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_cancelled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_capture_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_capture_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_refund_approved_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_refund_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_refused_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_void_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReceiptPrinting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
