/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITerminal.h
 *
 * 
 */

#ifndef OAITerminal_H
#define OAITerminal_H

#include <QJsonObject>

#include "OAITerminalAssignment.h"
#include "OAITerminalConnectivity.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITerminalAssignment;
class OAITerminalConnectivity;

class OAITerminal : public OAIObject {
public:
    OAITerminal();
    OAITerminal(QString json);
    ~OAITerminal() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITerminalAssignment getAssignment() const;
    void setAssignment(const OAITerminalAssignment &assignment);
    bool is_assignment_Set() const;
    bool is_assignment_Valid() const;

    OAITerminalConnectivity getConnectivity() const;
    void setConnectivity(const OAITerminalConnectivity &connectivity);
    bool is_connectivity_Set() const;
    bool is_connectivity_Valid() const;

    QString getFirmwareVersion() const;
    void setFirmwareVersion(const QString &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QDateTime getLastActivityAt() const;
    void setLastActivityAt(const QDateTime &last_activity_at);
    bool is_last_activity_at_Set() const;
    bool is_last_activity_at_Valid() const;

    QDateTime getLastTransactionAt() const;
    void setLastTransactionAt(const QDateTime &last_transaction_at);
    bool is_last_transaction_at_Set() const;
    bool is_last_transaction_at_Valid() const;

    QString getModel() const;
    void setModel(const QString &model);
    bool is_model_Set() const;
    bool is_model_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITerminalAssignment m_assignment;
    bool m_assignment_isSet;
    bool m_assignment_isValid;

    OAITerminalConnectivity m_connectivity;
    bool m_connectivity_isSet;
    bool m_connectivity_isValid;

    QString m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QDateTime m_last_activity_at;
    bool m_last_activity_at_isSet;
    bool m_last_activity_at_isValid;

    QDateTime m_last_transaction_at;
    bool m_last_transaction_at_isSet;
    bool m_last_transaction_at_isValid;

    QString m_model;
    bool m_model_isSet;
    bool m_model_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITerminal)

#endif // OAITerminal_H
