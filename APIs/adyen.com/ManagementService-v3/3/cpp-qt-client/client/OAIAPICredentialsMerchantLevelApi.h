/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPICredentialsMerchantLevelApi_H
#define OAI_OAIAPICredentialsMerchantLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiCredential.h"
#include "OAICreateApiCredentialResponse.h"
#include "OAICreateMerchantApiCredentialRequest.h"
#include "OAIListMerchantApiCredentialsResponse.h"
#include "OAIRestServiceError.h"
#include "OAIUpdateMerchantApiCredentialRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPICredentialsMerchantLevelApi : public QObject {
    Q_OBJECT

public:
    OAIAPICredentialsMerchantLevelApi(const int timeOut = 0);
    ~OAIAPICredentialsMerchantLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  page_number qint32 [optional]
    * @param[in]  page_size qint32 [optional]
    */
    virtual void getMerchantsMerchantIdApiCredentials(const QString &merchant_id, const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  api_credential_id QString [required]
    */
    virtual void getMerchantsMerchantIdApiCredentialsApiCredentialId(const QString &merchant_id, const QString &api_credential_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  api_credential_id QString [required]
    * @param[in]  oai_update_merchant_api_credential_request OAIUpdateMerchantApiCredentialRequest [optional]
    */
    virtual void patchMerchantsMerchantIdApiCredentialsApiCredentialId(const QString &merchant_id, const QString &api_credential_id, const ::OpenAPI::OptionalParam<OAIUpdateMerchantApiCredentialRequest> &oai_update_merchant_api_credential_request = ::OpenAPI::OptionalParam<OAIUpdateMerchantApiCredentialRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_create_merchant_api_credential_request OAICreateMerchantApiCredentialRequest [optional]
    */
    virtual void postMerchantsMerchantIdApiCredentials(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAICreateMerchantApiCredentialRequest> &oai_create_merchant_api_credential_request = ::OpenAPI::OptionalParam<OAICreateMerchantApiCredentialRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getMerchantsMerchantIdApiCredentialsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdApiCredentialsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getMerchantsMerchantIdApiCredentialsSignal(OAIListMerchantApiCredentialsResponse summary);
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignal(OAIApiCredential summary);
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignal(OAIApiCredential summary);
    void postMerchantsMerchantIdApiCredentialsSignal(OAICreateApiCredentialResponse summary);


    void getMerchantsMerchantIdApiCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIListMerchantApiCredentialsResponse summary);
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalFull(OAIHttpRequestWorker *worker, OAIApiCredential summary);
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalFull(OAIHttpRequestWorker *worker, OAIApiCredential summary);
    void postMerchantsMerchantIdApiCredentialsSignalFull(OAIHttpRequestWorker *worker, OAICreateApiCredentialResponse summary);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdApiCredentialsSignalError() instead")
    void getMerchantsMerchantIdApiCredentialsSignalE(OAIListMerchantApiCredentialsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdApiCredentialsSignalError(OAIListMerchantApiCredentialsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalError() instead")
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalE(OAIApiCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalError(OAIApiCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalError() instead")
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalE(OAIApiCredential summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalError(OAIApiCredential summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdApiCredentialsSignalError() instead")
    void postMerchantsMerchantIdApiCredentialsSignalE(OAICreateApiCredentialResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdApiCredentialsSignalError(OAICreateApiCredentialResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdApiCredentialsSignalErrorFull() instead")
    void getMerchantsMerchantIdApiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdApiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalErrorFull() instead")
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdApiCredentialsApiCredentialIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdApiCredentialsApiCredentialIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdApiCredentialsSignalErrorFull() instead")
    void postMerchantsMerchantIdApiCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdApiCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
