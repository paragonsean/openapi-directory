/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreateMerchantWebhookRequest.h
 *
 * 
 */

#ifndef OAICreateMerchantWebhookRequest_H
#define OAICreateMerchantWebhookRequest_H

#include <QJsonObject>

#include "OAIAdditionalSettings.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdditionalSettings;

class OAICreateMerchantWebhookRequest : public OAIObject {
public:
    OAICreateMerchantWebhookRequest();
    OAICreateMerchantWebhookRequest(QString json);
    ~OAICreateMerchantWebhookRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAcceptsExpiredCertificate() const;
    void setAcceptsExpiredCertificate(const bool &accepts_expired_certificate);
    bool is_accepts_expired_certificate_Set() const;
    bool is_accepts_expired_certificate_Valid() const;

    bool isAcceptsSelfSignedCertificate() const;
    void setAcceptsSelfSignedCertificate(const bool &accepts_self_signed_certificate);
    bool is_accepts_self_signed_certificate_Set() const;
    bool is_accepts_self_signed_certificate_Valid() const;

    bool isAcceptsUntrustedRootCertificate() const;
    void setAcceptsUntrustedRootCertificate(const bool &accepts_untrusted_root_certificate);
    bool is_accepts_untrusted_root_certificate_Set() const;
    bool is_accepts_untrusted_root_certificate_Valid() const;

    bool isActive() const;
    void setActive(const bool &active);
    bool is_active_Set() const;
    bool is_active_Valid() const;

    OAIAdditionalSettings getAdditionalSettings() const;
    void setAdditionalSettings(const OAIAdditionalSettings &additional_settings);
    bool is_additional_settings_Set() const;
    bool is_additional_settings_Valid() const;

    QString getCommunicationFormat() const;
    void setCommunicationFormat(const QString &communication_format);
    bool is_communication_format_Set() const;
    bool is_communication_format_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getEncryptionProtocol() const;
    void setEncryptionProtocol(const QString &encryption_protocol);
    bool is_encryption_protocol_Set() const;
    bool is_encryption_protocol_Valid() const;

    QString getNetworkType() const;
    void setNetworkType(const QString &network_type);
    bool is_network_type_Set() const;
    bool is_network_type_Valid() const;

    QString getPassword() const;
    void setPassword(const QString &password);
    bool is_password_Set() const;
    bool is_password_Valid() const;

    bool isPopulateSoapActionHeader() const;
    void setPopulateSoapActionHeader(const bool &populate_soap_action_header);
    bool is_populate_soap_action_header_Set() const;
    bool is_populate_soap_action_header_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QString getUsername() const;
    void setUsername(const QString &username);
    bool is_username_Set() const;
    bool is_username_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_accepts_expired_certificate;
    bool m_accepts_expired_certificate_isSet;
    bool m_accepts_expired_certificate_isValid;

    bool m_accepts_self_signed_certificate;
    bool m_accepts_self_signed_certificate_isSet;
    bool m_accepts_self_signed_certificate_isValid;

    bool m_accepts_untrusted_root_certificate;
    bool m_accepts_untrusted_root_certificate_isSet;
    bool m_accepts_untrusted_root_certificate_isValid;

    bool m_active;
    bool m_active_isSet;
    bool m_active_isValid;

    OAIAdditionalSettings m_additional_settings;
    bool m_additional_settings_isSet;
    bool m_additional_settings_isValid;

    QString m_communication_format;
    bool m_communication_format_isSet;
    bool m_communication_format_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_encryption_protocol;
    bool m_encryption_protocol_isSet;
    bool m_encryption_protocol_isValid;

    QString m_network_type;
    bool m_network_type_isSet;
    bool m_network_type_isValid;

    QString m_password;
    bool m_password_isSet;
    bool m_password_isValid;

    bool m_populate_soap_action_header;
    bool m_populate_soap_action_header_isSet;
    bool m_populate_soap_action_header_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QString m_username;
    bool m_username_isSet;
    bool m_username_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreateMerchantWebhookRequest)

#endif // OAICreateMerchantWebhookRequest_H
