/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoreLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoreLocation::OAIStoreLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoreLocation::OAIStoreLocation() {
    this->initializeModel();
}

OAIStoreLocation::~OAIStoreLocation() {}

void OAIStoreLocation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_line1_isSet = false;
    m_line1_isValid = false;

    m_line2_isSet = false;
    m_line2_isValid = false;

    m_line3_isSet = false;
    m_line3_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;
}

void OAIStoreLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoreLocation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_line1_isValid = ::OpenAPI::fromJsonValue(m_line1, json[QString("line1")]);
    m_line1_isSet = !json[QString("line1")].isNull() && m_line1_isValid;

    m_line2_isValid = ::OpenAPI::fromJsonValue(m_line2, json[QString("line2")]);
    m_line2_isSet = !json[QString("line2")].isNull() && m_line2_isValid;

    m_line3_isValid = ::OpenAPI::fromJsonValue(m_line3, json[QString("line3")]);
    m_line3_isSet = !json[QString("line3")].isNull() && m_line3_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;
}

QString OAIStoreLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoreLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_line1_isSet) {
        obj.insert(QString("line1"), ::OpenAPI::toJsonValue(m_line1));
    }
    if (m_line2_isSet) {
        obj.insert(QString("line2"), ::OpenAPI::toJsonValue(m_line2));
    }
    if (m_line3_isSet) {
        obj.insert(QString("line3"), ::OpenAPI::toJsonValue(m_line3));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    return obj;
}

QString OAIStoreLocation::getCity() const {
    return m_city;
}
void OAIStoreLocation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStoreLocation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStoreLocation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIStoreLocation::getCountry() const {
    return m_country;
}
void OAIStoreLocation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIStoreLocation::is_country_Set() const{
    return m_country_isSet;
}

bool OAIStoreLocation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIStoreLocation::getLine1() const {
    return m_line1;
}
void OAIStoreLocation::setLine1(const QString &line1) {
    m_line1 = line1;
    m_line1_isSet = true;
}

bool OAIStoreLocation::is_line1_Set() const{
    return m_line1_isSet;
}

bool OAIStoreLocation::is_line1_Valid() const{
    return m_line1_isValid;
}

QString OAIStoreLocation::getLine2() const {
    return m_line2;
}
void OAIStoreLocation::setLine2(const QString &line2) {
    m_line2 = line2;
    m_line2_isSet = true;
}

bool OAIStoreLocation::is_line2_Set() const{
    return m_line2_isSet;
}

bool OAIStoreLocation::is_line2_Valid() const{
    return m_line2_isValid;
}

QString OAIStoreLocation::getLine3() const {
    return m_line3;
}
void OAIStoreLocation::setLine3(const QString &line3) {
    m_line3 = line3;
    m_line3_isSet = true;
}

bool OAIStoreLocation::is_line3_Set() const{
    return m_line3_isSet;
}

bool OAIStoreLocation::is_line3_Valid() const{
    return m_line3_isValid;
}

QString OAIStoreLocation::getPostalCode() const {
    return m_postal_code;
}
void OAIStoreLocation::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIStoreLocation::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIStoreLocation::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIStoreLocation::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIStoreLocation::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIStoreLocation::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIStoreLocation::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

bool OAIStoreLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoreLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
