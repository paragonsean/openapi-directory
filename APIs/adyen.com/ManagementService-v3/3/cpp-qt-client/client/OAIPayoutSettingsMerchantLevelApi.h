/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPayoutSettingsMerchantLevelApi_H
#define OAI_OAIPayoutSettingsMerchantLevelApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPayoutSettings.h"
#include "OAIPayoutSettingsRequest.h"
#include "OAIPayoutSettingsResponse.h"
#include "OAIRestServiceError.h"
#include "OAIUpdatePayoutSettingsRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPayoutSettingsMerchantLevelApi : public QObject {
    Q_OBJECT

public:
    OAIPayoutSettingsMerchantLevelApi(const int timeOut = 0);
    ~OAIPayoutSettingsMerchantLevelApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payout_settings_id QString [required]
    */
    virtual void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsId(const QString &merchant_id, const QString &payout_settings_id);

    /**
    * @param[in]  merchant_id QString [required]
    */
    virtual void getMerchantsMerchantIdPayoutSettings(const QString &merchant_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payout_settings_id QString [required]
    */
    virtual void getMerchantsMerchantIdPayoutSettingsPayoutSettingsId(const QString &merchant_id, const QString &payout_settings_id);

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  payout_settings_id QString [required]
    * @param[in]  oai_update_payout_settings_request OAIUpdatePayoutSettingsRequest [optional]
    */
    virtual void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsId(const QString &merchant_id, const QString &payout_settings_id, const ::OpenAPI::OptionalParam<OAIUpdatePayoutSettingsRequest> &oai_update_payout_settings_request = ::OpenAPI::OptionalParam<OAIUpdatePayoutSettingsRequest>());

    /**
    * @param[in]  merchant_id QString [required]
    * @param[in]  oai_payout_settings_request OAIPayoutSettingsRequest [optional]
    */
    virtual void postMerchantsMerchantIdPayoutSettings(const QString &merchant_id, const ::OpenAPI::OptionalParam<OAIPayoutSettingsRequest> &oai_payout_settings_request = ::OpenAPI::OptionalParam<OAIPayoutSettingsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdPayoutSettingsCallback(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdCallback(OAIHttpRequestWorker *worker);
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdCallback(OAIHttpRequestWorker *worker);
    void postMerchantsMerchantIdPayoutSettingsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignal();
    void getMerchantsMerchantIdPayoutSettingsSignal(OAIPayoutSettingsResponse summary);
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignal(OAIPayoutSettings summary);
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignal(OAIPayoutSettings summary);
    void postMerchantsMerchantIdPayoutSettingsSignal(OAIPayoutSettings summary);


    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalFull(OAIHttpRequestWorker *worker);
    void getMerchantsMerchantIdPayoutSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPayoutSettingsResponse summary);
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalFull(OAIHttpRequestWorker *worker, OAIPayoutSettings summary);
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalFull(OAIHttpRequestWorker *worker, OAIPayoutSettings summary);
    void postMerchantsMerchantIdPayoutSettingsSignalFull(OAIHttpRequestWorker *worker, OAIPayoutSettings summary);

    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError() instead")
    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPayoutSettingsSignalError() instead")
    void getMerchantsMerchantIdPayoutSettingsSignalE(OAIPayoutSettingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPayoutSettingsSignalError(OAIPayoutSettingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError() instead")
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalE(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError() instead")
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalE(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalError(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPayoutSettingsSignalError() instead")
    void postMerchantsMerchantIdPayoutSettingsSignalE(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPayoutSettingsSignalError(OAIPayoutSettings summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull() instead")
    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPayoutSettingsSignalErrorFull() instead")
    void getMerchantsMerchantIdPayoutSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPayoutSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull() instead")
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull() instead")
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchMerchantsMerchantIdPayoutSettingsPayoutSettingsIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMerchantsMerchantIdPayoutSettingsSignalErrorFull() instead")
    void postMerchantsMerchantIdPayoutSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMerchantsMerchantIdPayoutSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
