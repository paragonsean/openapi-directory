/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerminalOrderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerminalOrderRequest::OAITerminalOrderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerminalOrderRequest::OAITerminalOrderRequest() {
    this->initializeModel();
}

OAITerminalOrderRequest::~OAITerminalOrderRequest() {}

void OAITerminalOrderRequest::initializeModel() {

    m_billing_entity_id_isSet = false;
    m_billing_entity_id_isValid = false;

    m_customer_order_reference_isSet = false;
    m_customer_order_reference_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_type_isSet = false;
    m_order_type_isValid = false;

    m_shipping_location_id_isSet = false;
    m_shipping_location_id_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;
}

void OAITerminalOrderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerminalOrderRequest::fromJsonObject(QJsonObject json) {

    m_billing_entity_id_isValid = ::OpenAPI::fromJsonValue(m_billing_entity_id, json[QString("billingEntityId")]);
    m_billing_entity_id_isSet = !json[QString("billingEntityId")].isNull() && m_billing_entity_id_isValid;

    m_customer_order_reference_isValid = ::OpenAPI::fromJsonValue(m_customer_order_reference, json[QString("customerOrderReference")]);
    m_customer_order_reference_isSet = !json[QString("customerOrderReference")].isNull() && m_customer_order_reference_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_type_isValid = ::OpenAPI::fromJsonValue(m_order_type, json[QString("orderType")]);
    m_order_type_isSet = !json[QString("orderType")].isNull() && m_order_type_isValid;

    m_shipping_location_id_isValid = ::OpenAPI::fromJsonValue(m_shipping_location_id, json[QString("shippingLocationId")]);
    m_shipping_location_id_isSet = !json[QString("shippingLocationId")].isNull() && m_shipping_location_id_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;
}

QString OAITerminalOrderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerminalOrderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_entity_id_isSet) {
        obj.insert(QString("billingEntityId"), ::OpenAPI::toJsonValue(m_billing_entity_id));
    }
    if (m_customer_order_reference_isSet) {
        obj.insert(QString("customerOrderReference"), ::OpenAPI::toJsonValue(m_customer_order_reference));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_type_isSet) {
        obj.insert(QString("orderType"), ::OpenAPI::toJsonValue(m_order_type));
    }
    if (m_shipping_location_id_isSet) {
        obj.insert(QString("shippingLocationId"), ::OpenAPI::toJsonValue(m_shipping_location_id));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    return obj;
}

QString OAITerminalOrderRequest::getBillingEntityId() const {
    return m_billing_entity_id;
}
void OAITerminalOrderRequest::setBillingEntityId(const QString &billing_entity_id) {
    m_billing_entity_id = billing_entity_id;
    m_billing_entity_id_isSet = true;
}

bool OAITerminalOrderRequest::is_billing_entity_id_Set() const{
    return m_billing_entity_id_isSet;
}

bool OAITerminalOrderRequest::is_billing_entity_id_Valid() const{
    return m_billing_entity_id_isValid;
}

QString OAITerminalOrderRequest::getCustomerOrderReference() const {
    return m_customer_order_reference;
}
void OAITerminalOrderRequest::setCustomerOrderReference(const QString &customer_order_reference) {
    m_customer_order_reference = customer_order_reference;
    m_customer_order_reference_isSet = true;
}

bool OAITerminalOrderRequest::is_customer_order_reference_Set() const{
    return m_customer_order_reference_isSet;
}

bool OAITerminalOrderRequest::is_customer_order_reference_Valid() const{
    return m_customer_order_reference_isValid;
}

QList<OAIOrderItem> OAITerminalOrderRequest::getItems() const {
    return m_items;
}
void OAITerminalOrderRequest::setItems(const QList<OAIOrderItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAITerminalOrderRequest::is_items_Set() const{
    return m_items_isSet;
}

bool OAITerminalOrderRequest::is_items_Valid() const{
    return m_items_isValid;
}

QString OAITerminalOrderRequest::getOrderType() const {
    return m_order_type;
}
void OAITerminalOrderRequest::setOrderType(const QString &order_type) {
    m_order_type = order_type;
    m_order_type_isSet = true;
}

bool OAITerminalOrderRequest::is_order_type_Set() const{
    return m_order_type_isSet;
}

bool OAITerminalOrderRequest::is_order_type_Valid() const{
    return m_order_type_isValid;
}

QString OAITerminalOrderRequest::getShippingLocationId() const {
    return m_shipping_location_id;
}
void OAITerminalOrderRequest::setShippingLocationId(const QString &shipping_location_id) {
    m_shipping_location_id = shipping_location_id;
    m_shipping_location_id_isSet = true;
}

bool OAITerminalOrderRequest::is_shipping_location_id_Set() const{
    return m_shipping_location_id_isSet;
}

bool OAITerminalOrderRequest::is_shipping_location_id_Valid() const{
    return m_shipping_location_id_isValid;
}

QString OAITerminalOrderRequest::getTaxId() const {
    return m_tax_id;
}
void OAITerminalOrderRequest::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAITerminalOrderRequest::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAITerminalOrderRequest::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAITerminalOrderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerminalOrderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
