/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethodResponse::OAIPaymentMethodResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethodResponse::OAIPaymentMethodResponse() {
    this->initializeModel();
}

OAIPaymentMethodResponse::~OAIPaymentMethodResponse() {}

void OAIPaymentMethodResponse::initializeModel() {

    m__links_isSet = false;
    m__links_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_items_total_isSet = false;
    m_items_total_isValid = false;

    m_pages_total_isSet = false;
    m_pages_total_isValid = false;

    m_types_with_errors_isSet = false;
    m_types_with_errors_isValid = false;
}

void OAIPaymentMethodResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethodResponse::fromJsonObject(QJsonObject json) {

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_items_total_isValid = ::OpenAPI::fromJsonValue(m_items_total, json[QString("itemsTotal")]);
    m_items_total_isSet = !json[QString("itemsTotal")].isNull() && m_items_total_isValid;

    m_pages_total_isValid = ::OpenAPI::fromJsonValue(m_pages_total, json[QString("pagesTotal")]);
    m_pages_total_isSet = !json[QString("pagesTotal")].isNull() && m_pages_total_isValid;

    m_types_with_errors_isValid = ::OpenAPI::fromJsonValue(m_types_with_errors, json[QString("typesWithErrors")]);
    m_types_with_errors_isSet = !json[QString("typesWithErrors")].isNull() && m_types_with_errors_isValid;
}

QString OAIPaymentMethodResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethodResponse::asJsonObject() const {
    QJsonObject obj;
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_items_total_isSet) {
        obj.insert(QString("itemsTotal"), ::OpenAPI::toJsonValue(m_items_total));
    }
    if (m_pages_total_isSet) {
        obj.insert(QString("pagesTotal"), ::OpenAPI::toJsonValue(m_pages_total));
    }
    if (m_types_with_errors.size() > 0) {
        obj.insert(QString("typesWithErrors"), ::OpenAPI::toJsonValue(m_types_with_errors));
    }
    return obj;
}

OAIPaginationLinks OAIPaymentMethodResponse::getLinks() const {
    return m__links;
}
void OAIPaymentMethodResponse::setLinks(const OAIPaginationLinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIPaymentMethodResponse::is__links_Set() const{
    return m__links_isSet;
}

bool OAIPaymentMethodResponse::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIPaymentMethod> OAIPaymentMethodResponse::getData() const {
    return m_data;
}
void OAIPaymentMethodResponse::setData(const QList<OAIPaymentMethod> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPaymentMethodResponse::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPaymentMethodResponse::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIPaymentMethodResponse::getItemsTotal() const {
    return m_items_total;
}
void OAIPaymentMethodResponse::setItemsTotal(const qint32 &items_total) {
    m_items_total = items_total;
    m_items_total_isSet = true;
}

bool OAIPaymentMethodResponse::is_items_total_Set() const{
    return m_items_total_isSet;
}

bool OAIPaymentMethodResponse::is_items_total_Valid() const{
    return m_items_total_isValid;
}

qint32 OAIPaymentMethodResponse::getPagesTotal() const {
    return m_pages_total;
}
void OAIPaymentMethodResponse::setPagesTotal(const qint32 &pages_total) {
    m_pages_total = pages_total;
    m_pages_total_isSet = true;
}

bool OAIPaymentMethodResponse::is_pages_total_Set() const{
    return m_pages_total_isSet;
}

bool OAIPaymentMethodResponse::is_pages_total_Valid() const{
    return m_pages_total_isValid;
}

QList<QString> OAIPaymentMethodResponse::getTypesWithErrors() const {
    return m_types_with_errors;
}
void OAIPaymentMethodResponse::setTypesWithErrors(const QList<QString> &types_with_errors) {
    m_types_with_errors = types_with_errors;
    m_types_with_errors_isSet = true;
}

bool OAIPaymentMethodResponse::is_types_with_errors_Set() const{
    return m_types_with_errors_isSet;
}

bool OAIPaymentMethodResponse::is_types_with_errors_Valid() const{
    return m_types_with_errors_isValid;
}

bool OAIPaymentMethodResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types_with_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethodResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_items_total_isValid && m_pages_total_isValid && true;
}

} // namespace OpenAPI
