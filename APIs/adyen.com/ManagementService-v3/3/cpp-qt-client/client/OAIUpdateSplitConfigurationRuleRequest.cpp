/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateSplitConfigurationRuleRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateSplitConfigurationRuleRequest::OAIUpdateSplitConfigurationRuleRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateSplitConfigurationRuleRequest::OAIUpdateSplitConfigurationRuleRequest() {
    this->initializeModel();
}

OAIUpdateSplitConfigurationRuleRequest::~OAIUpdateSplitConfigurationRuleRequest() {}

void OAIUpdateSplitConfigurationRuleRequest::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;
}

void OAIUpdateSplitConfigurationRuleRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateSplitConfigurationRuleRequest::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;
}

QString OAIUpdateSplitConfigurationRuleRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateSplitConfigurationRuleRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    return obj;
}

QString OAIUpdateSplitConfigurationRuleRequest::getCurrency() const {
    return m_currency;
}
void OAIUpdateSplitConfigurationRuleRequest::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAIUpdateSplitConfigurationRuleRequest::getFundingSource() const {
    return m_funding_source;
}
void OAIUpdateSplitConfigurationRuleRequest::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIUpdateSplitConfigurationRuleRequest::getPaymentMethod() const {
    return m_payment_method;
}
void OAIUpdateSplitConfigurationRuleRequest::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIUpdateSplitConfigurationRuleRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIUpdateSplitConfigurationRuleRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIUpdateSplitConfigurationRuleRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

bool OAIUpdateSplitConfigurationRuleRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateSplitConfigurationRuleRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_payment_method_isValid && m_shopper_interaction_isValid && true;
}

} // namespace OpenAPI
