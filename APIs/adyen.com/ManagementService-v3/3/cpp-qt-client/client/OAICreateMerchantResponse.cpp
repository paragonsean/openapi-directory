/**
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateMerchantResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateMerchantResponse::OAICreateMerchantResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateMerchantResponse::OAICreateMerchantResponse() {
    this->initializeModel();
}

OAICreateMerchantResponse::~OAICreateMerchantResponse() {}

void OAICreateMerchantResponse::initializeModel() {

    m_business_line_id_isSet = false;
    m_business_line_id_isValid = false;

    m_company_id_isSet = false;
    m_company_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_legal_entity_id_isSet = false;
    m_legal_entity_id_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAICreateMerchantResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateMerchantResponse::fromJsonObject(QJsonObject json) {

    m_business_line_id_isValid = ::OpenAPI::fromJsonValue(m_business_line_id, json[QString("businessLineId")]);
    m_business_line_id_isSet = !json[QString("businessLineId")].isNull() && m_business_line_id_isValid;

    m_company_id_isValid = ::OpenAPI::fromJsonValue(m_company_id, json[QString("companyId")]);
    m_company_id_isSet = !json[QString("companyId")].isNull() && m_company_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_legal_entity_id_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_id, json[QString("legalEntityId")]);
    m_legal_entity_id_isSet = !json[QString("legalEntityId")].isNull() && m_legal_entity_id_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("pricingPlan")]);
    m_pricing_plan_isSet = !json[QString("pricingPlan")].isNull() && m_pricing_plan_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAICreateMerchantResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateMerchantResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_business_line_id_isSet) {
        obj.insert(QString("businessLineId"), ::OpenAPI::toJsonValue(m_business_line_id));
    }
    if (m_company_id_isSet) {
        obj.insert(QString("companyId"), ::OpenAPI::toJsonValue(m_company_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_legal_entity_id_isSet) {
        obj.insert(QString("legalEntityId"), ::OpenAPI::toJsonValue(m_legal_entity_id));
    }
    if (m_pricing_plan_isSet) {
        obj.insert(QString("pricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

QString OAICreateMerchantResponse::getBusinessLineId() const {
    return m_business_line_id;
}
void OAICreateMerchantResponse::setBusinessLineId(const QString &business_line_id) {
    m_business_line_id = business_line_id;
    m_business_line_id_isSet = true;
}

bool OAICreateMerchantResponse::is_business_line_id_Set() const{
    return m_business_line_id_isSet;
}

bool OAICreateMerchantResponse::is_business_line_id_Valid() const{
    return m_business_line_id_isValid;
}

QString OAICreateMerchantResponse::getCompanyId() const {
    return m_company_id;
}
void OAICreateMerchantResponse::setCompanyId(const QString &company_id) {
    m_company_id = company_id;
    m_company_id_isSet = true;
}

bool OAICreateMerchantResponse::is_company_id_Set() const{
    return m_company_id_isSet;
}

bool OAICreateMerchantResponse::is_company_id_Valid() const{
    return m_company_id_isValid;
}

QString OAICreateMerchantResponse::getDescription() const {
    return m_description;
}
void OAICreateMerchantResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateMerchantResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateMerchantResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICreateMerchantResponse::getId() const {
    return m_id;
}
void OAICreateMerchantResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateMerchantResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateMerchantResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICreateMerchantResponse::getLegalEntityId() const {
    return m_legal_entity_id;
}
void OAICreateMerchantResponse::setLegalEntityId(const QString &legal_entity_id) {
    m_legal_entity_id = legal_entity_id;
    m_legal_entity_id_isSet = true;
}

bool OAICreateMerchantResponse::is_legal_entity_id_Set() const{
    return m_legal_entity_id_isSet;
}

bool OAICreateMerchantResponse::is_legal_entity_id_Valid() const{
    return m_legal_entity_id_isValid;
}

QString OAICreateMerchantResponse::getPricingPlan() const {
    return m_pricing_plan;
}
void OAICreateMerchantResponse::setPricingPlan(const QString &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAICreateMerchantResponse::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAICreateMerchantResponse::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QString OAICreateMerchantResponse::getReference() const {
    return m_reference;
}
void OAICreateMerchantResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICreateMerchantResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICreateMerchantResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAICreateMerchantResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_business_line_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateMerchantResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
