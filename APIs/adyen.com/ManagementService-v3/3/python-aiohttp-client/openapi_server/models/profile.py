# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file import File
from openapi_server import util


class Profile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_type: str=None, auto_wifi: bool=None, bss_type: str=None, channel: int=None, default_profile: bool=None, eap: str=None, eap_ca_cert: File=None, eap_client_cert: File=None, eap_client_key: File=None, eap_client_pwd: str=None, eap_identity: str=None, eap_intermediate_cert: File=None, eap_pwd: str=None, hidden_ssid: bool=None, name: str=None, psk: str=None, ssid: str=None, wsec: str=None):
        """Profile - a model defined in OpenAPI

        :param auth_type: The auth_type of this Profile.
        :param auto_wifi: The auto_wifi of this Profile.
        :param bss_type: The bss_type of this Profile.
        :param channel: The channel of this Profile.
        :param default_profile: The default_profile of this Profile.
        :param eap: The eap of this Profile.
        :param eap_ca_cert: The eap_ca_cert of this Profile.
        :param eap_client_cert: The eap_client_cert of this Profile.
        :param eap_client_key: The eap_client_key of this Profile.
        :param eap_client_pwd: The eap_client_pwd of this Profile.
        :param eap_identity: The eap_identity of this Profile.
        :param eap_intermediate_cert: The eap_intermediate_cert of this Profile.
        :param eap_pwd: The eap_pwd of this Profile.
        :param hidden_ssid: The hidden_ssid of this Profile.
        :param name: The name of this Profile.
        :param psk: The psk of this Profile.
        :param ssid: The ssid of this Profile.
        :param wsec: The wsec of this Profile.
        """
        self.openapi_types = {
            'auth_type': str,
            'auto_wifi': bool,
            'bss_type': str,
            'channel': int,
            'default_profile': bool,
            'eap': str,
            'eap_ca_cert': File,
            'eap_client_cert': File,
            'eap_client_key': File,
            'eap_client_pwd': str,
            'eap_identity': str,
            'eap_intermediate_cert': File,
            'eap_pwd': str,
            'hidden_ssid': bool,
            'name': str,
            'psk': str,
            'ssid': str,
            'wsec': str
        }

        self.attribute_map = {
            'auth_type': 'authType',
            'auto_wifi': 'autoWifi',
            'bss_type': 'bssType',
            'channel': 'channel',
            'default_profile': 'defaultProfile',
            'eap': 'eap',
            'eap_ca_cert': 'eapCaCert',
            'eap_client_cert': 'eapClientCert',
            'eap_client_key': 'eapClientKey',
            'eap_client_pwd': 'eapClientPwd',
            'eap_identity': 'eapIdentity',
            'eap_intermediate_cert': 'eapIntermediateCert',
            'eap_pwd': 'eapPwd',
            'hidden_ssid': 'hiddenSsid',
            'name': 'name',
            'psk': 'psk',
            'ssid': 'ssid',
            'wsec': 'wsec'
        }

        self._auth_type = auth_type
        self._auto_wifi = auto_wifi
        self._bss_type = bss_type
        self._channel = channel
        self._default_profile = default_profile
        self._eap = eap
        self._eap_ca_cert = eap_ca_cert
        self._eap_client_cert = eap_client_cert
        self._eap_client_key = eap_client_key
        self._eap_client_pwd = eap_client_pwd
        self._eap_identity = eap_identity
        self._eap_intermediate_cert = eap_intermediate_cert
        self._eap_pwd = eap_pwd
        self._hidden_ssid = hidden_ssid
        self._name = name
        self._psk = psk
        self._ssid = ssid
        self._wsec = wsec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Profile of this Profile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_type(self):
        """Gets the auth_type of this Profile.

        The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.

        :return: The auth_type of this Profile.
        :rtype: str
        """
        return self._auth_type

    @auth_type.setter
    def auth_type(self, auth_type):
        """Sets the auth_type of this Profile.

        The type of Wi-Fi network. Possible values: **wpa-psk**, **wpa2-psk**, **wpa-eap**, **wpa2-eap**.

        :param auth_type: The auth_type of this Profile.
        :type auth_type: str
        """
        if auth_type is None:
            raise ValueError("Invalid value for `auth_type`, must not be `None`")

        self._auth_type = auth_type

    @property
    def auto_wifi(self):
        """Gets the auto_wifi of this Profile.

        Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.

        :return: The auto_wifi of this Profile.
        :rtype: bool
        """
        return self._auto_wifi

    @auto_wifi.setter
    def auto_wifi(self, auto_wifi):
        """Sets the auto_wifi of this Profile.

        Indicates whether to automatically select the best authentication method available. Does not work on older terminal models.

        :param auto_wifi: The auto_wifi of this Profile.
        :type auto_wifi: bool
        """

        self._auto_wifi = auto_wifi

    @property
    def bss_type(self):
        """Gets the bss_type of this Profile.

        Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.

        :return: The bss_type of this Profile.
        :rtype: str
        """
        return self._bss_type

    @bss_type.setter
    def bss_type(self, bss_type):
        """Sets the bss_type of this Profile.

        Use **infra** for infrastructure-based networks. This applies to most networks. Use **adhoc** only if the communication is p2p-based between base stations.

        :param bss_type: The bss_type of this Profile.
        :type bss_type: str
        """
        if bss_type is None:
            raise ValueError("Invalid value for `bss_type`, must not be `None`")

        self._bss_type = bss_type

    @property
    def channel(self):
        """Gets the channel of this Profile.

        The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.

        :return: The channel of this Profile.
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this Profile.

        The channel number of the Wi-Fi network. The recommended setting is **0** for automatic channel selection.

        :param channel: The channel of this Profile.
        :type channel: int
        """

        self._channel = channel

    @property
    def default_profile(self):
        """Gets the default_profile of this Profile.

        Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.

        :return: The default_profile of this Profile.
        :rtype: bool
        """
        return self._default_profile

    @default_profile.setter
    def default_profile(self, default_profile):
        """Sets the default_profile of this Profile.

        Indicates whether this is your preferred wireless network. If **true**, the terminal will try connecting to this network first.

        :param default_profile: The default_profile of this Profile.
        :type default_profile: bool
        """

        self._default_profile = default_profile

    @property
    def eap(self):
        """Gets the eap of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**

        :return: The eap of this Profile.
        :rtype: str
        """
        return self._eap

    @eap.setter
    def eap(self, eap):
        """Sets the eap of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. Possible values: **tls**, **peap**, **leap**, **fast**

        :param eap: The eap of this Profile.
        :type eap: str
        """

        self._eap = eap

    @property
    def eap_ca_cert(self):
        """Gets the eap_ca_cert of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. The root certificate from the CA that signed the certificate of the RADIUS server that is part of your wireless network.

        :return: The eap_ca_cert of this Profile.
        :rtype: File
        """
        return self._eap_ca_cert

    @eap_ca_cert.setter
    def eap_ca_cert(self, eap_ca_cert):
        """Sets the eap_ca_cert of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. The root certificate from the CA that signed the certificate of the RADIUS server that is part of your wireless network.

        :param eap_ca_cert: The eap_ca_cert of this Profile.
        :type eap_ca_cert: File
        """

        self._eap_ca_cert = eap_ca_cert

    @property
    def eap_client_cert(self):
        """Gets the eap_client_cert of this Profile.

        For `eap` **tls**. The certificate chain for the terminals. All terminals in the same network will use the same EAP client certificate.

        :return: The eap_client_cert of this Profile.
        :rtype: File
        """
        return self._eap_client_cert

    @eap_client_cert.setter
    def eap_client_cert(self, eap_client_cert):
        """Sets the eap_client_cert of this Profile.

        For `eap` **tls**. The certificate chain for the terminals. All terminals in the same network will use the same EAP client certificate.

        :param eap_client_cert: The eap_client_cert of this Profile.
        :type eap_client_cert: File
        """

        self._eap_client_cert = eap_client_cert

    @property
    def eap_client_key(self):
        """Gets the eap_client_key of this Profile.

        For `eap` **tls**. The RSA private key for the client. Include the lines BEGIN RSA PRIVATE KEY and END RSA PRIVATE KEY.

        :return: The eap_client_key of this Profile.
        :rtype: File
        """
        return self._eap_client_key

    @eap_client_key.setter
    def eap_client_key(self, eap_client_key):
        """Sets the eap_client_key of this Profile.

        For `eap` **tls**. The RSA private key for the client. Include the lines BEGIN RSA PRIVATE KEY and END RSA PRIVATE KEY.

        :param eap_client_key: The eap_client_key of this Profile.
        :type eap_client_key: File
        """

        self._eap_client_key = eap_client_key

    @property
    def eap_client_pwd(self):
        """Gets the eap_client_pwd of this Profile.

        For `eap` **tls**. The password of the RSA key file, if that file is password-protected.

        :return: The eap_client_pwd of this Profile.
        :rtype: str
        """
        return self._eap_client_pwd

    @eap_client_pwd.setter
    def eap_client_pwd(self, eap_client_pwd):
        """Sets the eap_client_pwd of this Profile.

        For `eap` **tls**. The password of the RSA key file, if that file is password-protected.

        :param eap_client_pwd: The eap_client_pwd of this Profile.
        :type eap_client_pwd: str
        """

        self._eap_client_pwd = eap_client_pwd

    @property
    def eap_identity(self):
        """Gets the eap_identity of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.

        :return: The eap_identity of this Profile.
        :rtype: str
        """
        return self._eap_identity

    @eap_identity.setter
    def eap_identity(self, eap_identity):
        """Sets the eap_identity of this Profile.

        For `authType` **wpa-eap** or **wpa2-eap**. The EAP-PEAP username from your MS-CHAP account. Must match the configuration of your RADIUS server.

        :param eap_identity: The eap_identity of this Profile.
        :type eap_identity: str
        """

        self._eap_identity = eap_identity

    @property
    def eap_intermediate_cert(self):
        """Gets the eap_intermediate_cert of this Profile.

        For `eap` **tls**. The EAP intermediate certificate.

        :return: The eap_intermediate_cert of this Profile.
        :rtype: File
        """
        return self._eap_intermediate_cert

    @eap_intermediate_cert.setter
    def eap_intermediate_cert(self, eap_intermediate_cert):
        """Sets the eap_intermediate_cert of this Profile.

        For `eap` **tls**. The EAP intermediate certificate.

        :param eap_intermediate_cert: The eap_intermediate_cert of this Profile.
        :type eap_intermediate_cert: File
        """

        self._eap_intermediate_cert = eap_intermediate_cert

    @property
    def eap_pwd(self):
        """Gets the eap_pwd of this Profile.

        For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.

        :return: The eap_pwd of this Profile.
        :rtype: str
        """
        return self._eap_pwd

    @eap_pwd.setter
    def eap_pwd(self, eap_pwd):
        """Sets the eap_pwd of this Profile.

        For `eap` **peap**. The EAP-PEAP password from your MS-CHAP account. Must match the configuration of your RADIUS server.

        :param eap_pwd: The eap_pwd of this Profile.
        :type eap_pwd: str
        """

        self._eap_pwd = eap_pwd

    @property
    def hidden_ssid(self):
        """Gets the hidden_ssid of this Profile.

        Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.

        :return: The hidden_ssid of this Profile.
        :rtype: bool
        """
        return self._hidden_ssid

    @hidden_ssid.setter
    def hidden_ssid(self, hidden_ssid):
        """Sets the hidden_ssid of this Profile.

        Indicates if the network doesn't broadcast its SSID. Mandatory for Android terminals, because these terminals rely on this setting to be able to connect to any network.

        :param hidden_ssid: The hidden_ssid of this Profile.
        :type hidden_ssid: bool
        """

        self._hidden_ssid = hidden_ssid

    @property
    def name(self):
        """Gets the name of this Profile.

        Your name for the Wi-Fi profile.

        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Profile.

        Your name for the Wi-Fi profile.

        :param name: The name of this Profile.
        :type name: str
        """

        self._name = name

    @property
    def psk(self):
        """Gets the psk of this Profile.

        For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.

        :return: The psk of this Profile.
        :rtype: str
        """
        return self._psk

    @psk.setter
    def psk(self, psk):
        """Sets the psk of this Profile.

        For `authType` **wpa-psk or **wpa2-psk**. The password to the wireless network.

        :param psk: The psk of this Profile.
        :type psk: str
        """

        self._psk = psk

    @property
    def ssid(self):
        """Gets the ssid of this Profile.

        The name of the wireless network.

        :return: The ssid of this Profile.
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this Profile.

        The name of the wireless network.

        :param ssid: The ssid of this Profile.
        :type ssid: str
        """
        if ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")

        self._ssid = ssid

    @property
    def wsec(self):
        """Gets the wsec of this Profile.

        The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**

        :return: The wsec of this Profile.
        :rtype: str
        """
        return self._wsec

    @wsec.setter
    def wsec(self, wsec):
        """Sets the wsec of this Profile.

        The type of encryption. Possible values: **auto**, **ccmp** (recommended), **tkip**

        :param wsec: The wsec of this Profile.
        :type wsec: str
        """
        if wsec is None:
            raise ValueError("Invalid value for `wsec`, must not be `None`")

        self._wsec = wsec
