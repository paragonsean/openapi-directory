# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooglePayInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_id: str=None, reuse_merchant_id: bool=None):
        """GooglePayInfo - a model defined in OpenAPI

        :param merchant_id: The merchant_id of this GooglePayInfo.
        :param reuse_merchant_id: The reuse_merchant_id of this GooglePayInfo.
        """
        self.openapi_types = {
            'merchant_id': str,
            'reuse_merchant_id': bool
        }

        self.attribute_map = {
            'merchant_id': 'merchantId',
            'reuse_merchant_id': 'reuseMerchantId'
        }

        self._merchant_id = merchant_id
        self._reuse_merchant_id = reuse_merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooglePayInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GooglePayInfo of this GooglePayInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_id(self):
        """Gets the merchant_id of this GooglePayInfo.

        Google Pay [Merchant ID](https://support.google.com/paymentscenter/answer/7163092?hl=en). Character length and limitations: 16 alphanumeric characters or 20 numeric characters.

        :return: The merchant_id of this GooglePayInfo.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this GooglePayInfo.

        Google Pay [Merchant ID](https://support.google.com/paymentscenter/answer/7163092?hl=en). Character length and limitations: 16 alphanumeric characters or 20 numeric characters.

        :param merchant_id: The merchant_id of this GooglePayInfo.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")
        if merchant_id is not None and len(merchant_id) > 20:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `20`")
        if merchant_id is not None and len(merchant_id) < 16:
            raise ValueError("Invalid value for `merchant_id`, length must be greater than or equal to `16`")

        self._merchant_id = merchant_id

    @property
    def reuse_merchant_id(self):
        """Gets the reuse_merchant_id of this GooglePayInfo.

        Indicates whether the Google Pay Merchant ID is used for several merchant accounts. Default value: **false**.

        :return: The reuse_merchant_id of this GooglePayInfo.
        :rtype: bool
        """
        return self._reuse_merchant_id

    @reuse_merchant_id.setter
    def reuse_merchant_id(self, reuse_merchant_id):
        """Sets the reuse_merchant_id of this GooglePayInfo.

        Indicates whether the Google Pay Merchant ID is used for several merchant accounts. Default value: **false**.

        :param reuse_merchant_id: The reuse_merchant_id of this GooglePayInfo.
        :type reuse_merchant_id: bool
        """

        self._reuse_merchant_id = reuse_merchant_id
