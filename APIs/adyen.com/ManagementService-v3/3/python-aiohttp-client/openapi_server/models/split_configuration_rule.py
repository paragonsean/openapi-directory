# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.split_configuration_logic import SplitConfigurationLogic
from openapi_server import util


class SplitConfigurationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, funding_source: str=None, payment_method: str=None, rule_id: str=None, shopper_interaction: str=None, split_logic: SplitConfigurationLogic=None):
        """SplitConfigurationRule - a model defined in OpenAPI

        :param currency: The currency of this SplitConfigurationRule.
        :param funding_source: The funding_source of this SplitConfigurationRule.
        :param payment_method: The payment_method of this SplitConfigurationRule.
        :param rule_id: The rule_id of this SplitConfigurationRule.
        :param shopper_interaction: The shopper_interaction of this SplitConfigurationRule.
        :param split_logic: The split_logic of this SplitConfigurationRule.
        """
        self.openapi_types = {
            'currency': str,
            'funding_source': str,
            'payment_method': str,
            'rule_id': str,
            'shopper_interaction': str,
            'split_logic': SplitConfigurationLogic
        }

        self.attribute_map = {
            'currency': 'currency',
            'funding_source': 'fundingSource',
            'payment_method': 'paymentMethod',
            'rule_id': 'ruleId',
            'shopper_interaction': 'shopperInteraction',
            'split_logic': 'splitLogic'
        }

        self._currency = currency
        self._funding_source = funding_source
        self._payment_method = payment_method
        self._rule_id = rule_id
        self._shopper_interaction = shopper_interaction
        self._split_logic = split_logic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SplitConfigurationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SplitConfigurationRule of this SplitConfigurationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this SplitConfigurationRule.

        The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).

        :return: The currency of this SplitConfigurationRule.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this SplitConfigurationRule.

        The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).

        :param currency: The currency of this SplitConfigurationRule.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def funding_source(self):
        """Gets the funding_source of this SplitConfigurationRule.

        The funding source condition of the payment method (only for cards).  Possible values: **credit**, **debit**, or **ANY**.

        :return: The funding_source of this SplitConfigurationRule.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this SplitConfigurationRule.

        The funding source condition of the payment method (only for cards).  Possible values: **credit**, **debit**, or **ANY**.

        :param funding_source: The funding_source of this SplitConfigurationRule.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit", "ANY"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def payment_method(self):
        """Gets the payment_method of this SplitConfigurationRule.

        The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.

        :return: The payment_method of this SplitConfigurationRule.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this SplitConfigurationRule.

        The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.

        :param payment_method: The payment_method of this SplitConfigurationRule.
        :type payment_method: str
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def rule_id(self):
        """Gets the rule_id of this SplitConfigurationRule.

        The unique identifier of the split configuration rule.

        :return: The rule_id of this SplitConfigurationRule.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this SplitConfigurationRule.

        The unique identifier of the split configuration rule.

        :param rule_id: The rule_id of this SplitConfigurationRule.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this SplitConfigurationRule.

        The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.

        :return: The shopper_interaction of this SplitConfigurationRule.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this SplitConfigurationRule.

        The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.

        :param shopper_interaction: The shopper_interaction of this SplitConfigurationRule.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS", "ANY"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def split_logic(self):
        """Gets the split_logic of this SplitConfigurationRule.

        Contains the split logic that is applied if the rule conditions are met.

        :return: The split_logic of this SplitConfigurationRule.
        :rtype: SplitConfigurationLogic
        """
        return self._split_logic

    @split_logic.setter
    def split_logic(self, split_logic):
        """Sets the split_logic of this SplitConfigurationRule.

        Contains the split logic that is applied if the rule conditions are met.

        :param split_logic: The split_logic of this SplitConfigurationRule.
        :type split_logic: SplitConfigurationLogic
        """
        if split_logic is None:
            raise ValueError("Invalid value for `split_logic`, must not be `None`")

        self._split_logic = split_logic
