# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplePayInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, domains: List[str]=None):
        """ApplePayInfo - a model defined in OpenAPI

        :param domains: The domains of this ApplePayInfo.
        """
        self.openapi_types = {
            'domains': List[str]
        }

        self.attribute_map = {
            'domains': 'domains'
        }

        self._domains = domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplePayInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplePayInfo of this ApplePayInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def domains(self):
        """Gets the domains of this ApplePayInfo.

        The list of merchant domains. Maximum: 99 domains per request.  For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/web-drop-in?tab=adyen-certificate-live_1#going-live).

        :return: The domains of this ApplePayInfo.
        :rtype: List[str]
        """
        return self._domains

    @domains.setter
    def domains(self, domains):
        """Sets the domains of this ApplePayInfo.

        The list of merchant domains. Maximum: 99 domains per request.  For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/web-drop-in?tab=adyen-certificate-live_1#going-live).

        :param domains: The domains of this ApplePayInfo.
        :type domains: List[str]
        """
        if domains is None:
            raise ValueError("Invalid value for `domains`, must not be `None`")

        self._domains = domains
