# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_credential import ApiCredential
from openapi_server.models.pagination_links import PaginationLinks
from openapi_server import util


class ListMerchantApiCredentialsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PaginationLinks=None, data: List[ApiCredential]=None, items_total: int=None, pages_total: int=None):
        """ListMerchantApiCredentialsResponse - a model defined in OpenAPI

        :param links: The links of this ListMerchantApiCredentialsResponse.
        :param data: The data of this ListMerchantApiCredentialsResponse.
        :param items_total: The items_total of this ListMerchantApiCredentialsResponse.
        :param pages_total: The pages_total of this ListMerchantApiCredentialsResponse.
        """
        self.openapi_types = {
            'links': PaginationLinks,
            'data': List[ApiCredential],
            'items_total': int,
            'pages_total': int
        }

        self.attribute_map = {
            'links': '_links',
            'data': 'data',
            'items_total': 'itemsTotal',
            'pages_total': 'pagesTotal'
        }

        self._links = links
        self._data = data
        self._items_total = items_total
        self._pages_total = pages_total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListMerchantApiCredentialsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListMerchantApiCredentialsResponse of this ListMerchantApiCredentialsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ListMerchantApiCredentialsResponse.

        Pagination references.

        :return: The links of this ListMerchantApiCredentialsResponse.
        :rtype: PaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ListMerchantApiCredentialsResponse.

        Pagination references.

        :param links: The links of this ListMerchantApiCredentialsResponse.
        :type links: PaginationLinks
        """

        self._links = links

    @property
    def data(self):
        """Gets the data of this ListMerchantApiCredentialsResponse.

        The list of API credentials.

        :return: The data of this ListMerchantApiCredentialsResponse.
        :rtype: List[ApiCredential]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ListMerchantApiCredentialsResponse.

        The list of API credentials.

        :param data: The data of this ListMerchantApiCredentialsResponse.
        :type data: List[ApiCredential]
        """

        self._data = data

    @property
    def items_total(self):
        """Gets the items_total of this ListMerchantApiCredentialsResponse.

        Total number of items.

        :return: The items_total of this ListMerchantApiCredentialsResponse.
        :rtype: int
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this ListMerchantApiCredentialsResponse.

        Total number of items.

        :param items_total: The items_total of this ListMerchantApiCredentialsResponse.
        :type items_total: int
        """
        if items_total is None:
            raise ValueError("Invalid value for `items_total`, must not be `None`")

        self._items_total = items_total

    @property
    def pages_total(self):
        """Gets the pages_total of this ListMerchantApiCredentialsResponse.

        Total number of pages.

        :return: The pages_total of this ListMerchantApiCredentialsResponse.
        :rtype: int
        """
        return self._pages_total

    @pages_total.setter
    def pages_total(self, pages_total):
        """Sets the pages_total of this ListMerchantApiCredentialsResponse.

        Total number of pages.

        :param pages_total: The pages_total of this ListMerchantApiCredentialsResponse.
        :type pages_total: int
        """
        if pages_total is None:
            raise ValueError("Invalid value for `pages_total`, must not be `None`")

        self._pages_total = pages_total
