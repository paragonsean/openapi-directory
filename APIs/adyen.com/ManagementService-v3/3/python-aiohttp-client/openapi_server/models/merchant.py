# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_center import DataCenter
from openapi_server.models.merchant_links import MerchantLinks
from openapi_server import util


class Merchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: MerchantLinks=None, capture_delay: str=None, company_id: str=None, data_centers: List[DataCenter]=None, default_shopper_interaction: str=None, description: str=None, id: str=None, merchant_city: str=None, name: str=None, pricing_plan: str=None, primary_settlement_currency: str=None, reference: str=None, shop_web_address: str=None, status: str=None):
        """Merchant - a model defined in OpenAPI

        :param links: The links of this Merchant.
        :param capture_delay: The capture_delay of this Merchant.
        :param company_id: The company_id of this Merchant.
        :param data_centers: The data_centers of this Merchant.
        :param default_shopper_interaction: The default_shopper_interaction of this Merchant.
        :param description: The description of this Merchant.
        :param id: The id of this Merchant.
        :param merchant_city: The merchant_city of this Merchant.
        :param name: The name of this Merchant.
        :param pricing_plan: The pricing_plan of this Merchant.
        :param primary_settlement_currency: The primary_settlement_currency of this Merchant.
        :param reference: The reference of this Merchant.
        :param shop_web_address: The shop_web_address of this Merchant.
        :param status: The status of this Merchant.
        """
        self.openapi_types = {
            'links': MerchantLinks,
            'capture_delay': str,
            'company_id': str,
            'data_centers': List[DataCenter],
            'default_shopper_interaction': str,
            'description': str,
            'id': str,
            'merchant_city': str,
            'name': str,
            'pricing_plan': str,
            'primary_settlement_currency': str,
            'reference': str,
            'shop_web_address': str,
            'status': str
        }

        self.attribute_map = {
            'links': '_links',
            'capture_delay': 'captureDelay',
            'company_id': 'companyId',
            'data_centers': 'dataCenters',
            'default_shopper_interaction': 'defaultShopperInteraction',
            'description': 'description',
            'id': 'id',
            'merchant_city': 'merchantCity',
            'name': 'name',
            'pricing_plan': 'pricingPlan',
            'primary_settlement_currency': 'primarySettlementCurrency',
            'reference': 'reference',
            'shop_web_address': 'shopWebAddress',
            'status': 'status'
        }

        self._links = links
        self._capture_delay = capture_delay
        self._company_id = company_id
        self._data_centers = data_centers
        self._default_shopper_interaction = default_shopper_interaction
        self._description = description
        self._id = id
        self._merchant_city = merchant_city
        self._name = name
        self._pricing_plan = pricing_plan
        self._primary_settlement_currency = primary_settlement_currency
        self._reference = reference
        self._shop_web_address = shop_web_address
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Merchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Merchant of this Merchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Merchant.

        References to resources connected with this merchant.

        :return: The links of this Merchant.
        :rtype: MerchantLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Merchant.

        References to resources connected with this merchant.

        :param links: The links of this Merchant.
        :type links: MerchantLinks
        """

        self._links = links

    @property
    def capture_delay(self):
        """Gets the capture_delay of this Merchant.

        The [capture delay](https://docs.adyen.com/online-payments/capture#capture-delay) set for the merchant account.  Possible values: * **Immediate** * **Manual** * Number of days from **1** to **29**

        :return: The capture_delay of this Merchant.
        :rtype: str
        """
        return self._capture_delay

    @capture_delay.setter
    def capture_delay(self, capture_delay):
        """Sets the capture_delay of this Merchant.

        The [capture delay](https://docs.adyen.com/online-payments/capture#capture-delay) set for the merchant account.  Possible values: * **Immediate** * **Manual** * Number of days from **1** to **29**

        :param capture_delay: The capture_delay of this Merchant.
        :type capture_delay: str
        """

        self._capture_delay = capture_delay

    @property
    def company_id(self):
        """Gets the company_id of this Merchant.

        The unique identifier of the company account this merchant belongs to

        :return: The company_id of this Merchant.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this Merchant.

        The unique identifier of the company account this merchant belongs to

        :param company_id: The company_id of this Merchant.
        :type company_id: str
        """

        self._company_id = company_id

    @property
    def data_centers(self):
        """Gets the data_centers of this Merchant.

        List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.

        :return: The data_centers of this Merchant.
        :rtype: List[DataCenter]
        """
        return self._data_centers

    @data_centers.setter
    def data_centers(self, data_centers):
        """Sets the data_centers of this Merchant.

        List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.

        :param data_centers: The data_centers of this Merchant.
        :type data_centers: List[DataCenter]
        """

        self._data_centers = data_centers

    @property
    def default_shopper_interaction(self):
        """Gets the default_shopper_interaction of this Merchant.

        The default [`shopperInteraction`](https://docs.adyen.com/api-explorer/#/CheckoutService/v68/post/payments__reqParam_shopperInteraction) value used when processing payments through this merchant account.

        :return: The default_shopper_interaction of this Merchant.
        :rtype: str
        """
        return self._default_shopper_interaction

    @default_shopper_interaction.setter
    def default_shopper_interaction(self, default_shopper_interaction):
        """Sets the default_shopper_interaction of this Merchant.

        The default [`shopperInteraction`](https://docs.adyen.com/api-explorer/#/CheckoutService/v68/post/payments__reqParam_shopperInteraction) value used when processing payments through this merchant account.

        :param default_shopper_interaction: The default_shopper_interaction of this Merchant.
        :type default_shopper_interaction: str
        """

        self._default_shopper_interaction = default_shopper_interaction

    @property
    def description(self):
        """Gets the description of this Merchant.

        Your description for the merchant account, maximum 300 characters

        :return: The description of this Merchant.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Merchant.

        Your description for the merchant account, maximum 300 characters

        :param description: The description of this Merchant.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Merchant.

        The unique identifier of the merchant account.

        :return: The id of this Merchant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Merchant.

        The unique identifier of the merchant account.

        :param id: The id of this Merchant.
        :type id: str
        """

        self._id = id

    @property
    def merchant_city(self):
        """Gets the merchant_city of this Merchant.

        The city where the legal entity of this merchant account is registered.

        :return: The merchant_city of this Merchant.
        :rtype: str
        """
        return self._merchant_city

    @merchant_city.setter
    def merchant_city(self, merchant_city):
        """Sets the merchant_city of this Merchant.

        The city where the legal entity of this merchant account is registered.

        :param merchant_city: The merchant_city of this Merchant.
        :type merchant_city: str
        """

        self._merchant_city = merchant_city

    @property
    def name(self):
        """Gets the name of this Merchant.

        The name of the legal entity associated with the merchant account.

        :return: The name of this Merchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Merchant.

        The name of the legal entity associated with the merchant account.

        :param name: The name of this Merchant.
        :type name: str
        """

        self._name = name

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this Merchant.

        Only applies to merchant accounts managed by Adyen's partners. The name of the pricing plan assigned to the merchant account.

        :return: The pricing_plan of this Merchant.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this Merchant.

        Only applies to merchant accounts managed by Adyen's partners. The name of the pricing plan assigned to the merchant account.

        :param pricing_plan: The pricing_plan of this Merchant.
        :type pricing_plan: str
        """

        self._pricing_plan = pricing_plan

    @property
    def primary_settlement_currency(self):
        """Gets the primary_settlement_currency of this Merchant.

        The currency of the country where the legal entity of this merchant account is registered. Format: [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, a legal entity based in the United States has USD as the primary settlement currency.

        :return: The primary_settlement_currency of this Merchant.
        :rtype: str
        """
        return self._primary_settlement_currency

    @primary_settlement_currency.setter
    def primary_settlement_currency(self, primary_settlement_currency):
        """Sets the primary_settlement_currency of this Merchant.

        The currency of the country where the legal entity of this merchant account is registered. Format: [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, a legal entity based in the United States has USD as the primary settlement currency.

        :param primary_settlement_currency: The primary_settlement_currency of this Merchant.
        :type primary_settlement_currency: str
        """

        self._primary_settlement_currency = primary_settlement_currency

    @property
    def reference(self):
        """Gets the reference of this Merchant.

        Reference of the merchant account.

        :return: The reference of this Merchant.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Merchant.

        Reference of the merchant account.

        :param reference: The reference of this Merchant.
        :type reference: str
        """

        self._reference = reference

    @property
    def shop_web_address(self):
        """Gets the shop_web_address of this Merchant.

        The URL for the ecommerce website used with this merchant account.

        :return: The shop_web_address of this Merchant.
        :rtype: str
        """
        return self._shop_web_address

    @shop_web_address.setter
    def shop_web_address(self, shop_web_address):
        """Sets the shop_web_address of this Merchant.

        The URL for the ecommerce website used with this merchant account.

        :param shop_web_address: The shop_web_address of this Merchant.
        :type shop_web_address: str
        """

        self._shop_web_address = shop_web_address

    @property
    def status(self):
        """Gets the status of this Merchant.

        The status of the merchant account.  Possible values:  * **PreActive**: The merchant account has been created. Users cannot access the merchant account in the Customer Area. The account cannot process payments. * **Active**: Users can access the merchant account in the Customer Area. If the company account is also **Active**, then payment processing and payouts are enabled. * **InactiveWithModifications**: Users can access the merchant account in the Customer Area. You cannot process new payments but you can still modify payments, for example issue refunds. You can still receive payouts. * **Inactive**: Users can access the merchant account in the Customer Area. Payment processing and payouts are disabled. * **Closed**: The account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.

        :return: The status of this Merchant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Merchant.

        The status of the merchant account.  Possible values:  * **PreActive**: The merchant account has been created. Users cannot access the merchant account in the Customer Area. The account cannot process payments. * **Active**: Users can access the merchant account in the Customer Area. If the company account is also **Active**, then payment processing and payouts are enabled. * **InactiveWithModifications**: Users can access the merchant account in the Customer Area. You cannot process new payments but you can still modify payments, for example issue refunds. You can still receive payouts. * **Inactive**: Users can access the merchant account in the Customer Area. Payment processing and payouts are disabled. * **Closed**: The account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.

        :param status: The status of this Merchant.
        :type status: str
        """

        self._status = status
