# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.terminal_reassignment_target import TerminalReassignmentTarget
from openapi_server import util


class TerminalAssignment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_id: str=None, merchant_id: str=None, reassignment_target: TerminalReassignmentTarget=None, status: str=None, store_id: str=None):
        """TerminalAssignment - a model defined in OpenAPI

        :param company_id: The company_id of this TerminalAssignment.
        :param merchant_id: The merchant_id of this TerminalAssignment.
        :param reassignment_target: The reassignment_target of this TerminalAssignment.
        :param status: The status of this TerminalAssignment.
        :param store_id: The store_id of this TerminalAssignment.
        """
        self.openapi_types = {
            'company_id': str,
            'merchant_id': str,
            'reassignment_target': TerminalReassignmentTarget,
            'status': str,
            'store_id': str
        }

        self.attribute_map = {
            'company_id': 'companyId',
            'merchant_id': 'merchantId',
            'reassignment_target': 'reassignmentTarget',
            'status': 'status',
            'store_id': 'storeId'
        }

        self._company_id = company_id
        self._merchant_id = merchant_id
        self._reassignment_target = reassignment_target
        self._status = status
        self._store_id = store_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminalAssignment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminalAssignment of this TerminalAssignment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_id(self):
        """Gets the company_id of this TerminalAssignment.

        The unique identifier of the company account to which terminal is assigned.

        :return: The company_id of this TerminalAssignment.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this TerminalAssignment.

        The unique identifier of the company account to which terminal is assigned.

        :param company_id: The company_id of this TerminalAssignment.
        :type company_id: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this TerminalAssignment.

        The unique identifier of the merchant account to which terminal is assigned.

        :return: The merchant_id of this TerminalAssignment.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this TerminalAssignment.

        The unique identifier of the merchant account to which terminal is assigned.

        :param merchant_id: The merchant_id of this TerminalAssignment.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def reassignment_target(self):
        """Gets the reassignment_target of this TerminalAssignment.

        Indicates where the terminal is in the process of being reassigned to.

        :return: The reassignment_target of this TerminalAssignment.
        :rtype: TerminalReassignmentTarget
        """
        return self._reassignment_target

    @reassignment_target.setter
    def reassignment_target(self, reassignment_target):
        """Sets the reassignment_target of this TerminalAssignment.

        Indicates where the terminal is in the process of being reassigned to.

        :param reassignment_target: The reassignment_target of this TerminalAssignment.
        :type reassignment_target: TerminalReassignmentTarget
        """

        self._reassignment_target = reassignment_target

    @property
    def status(self):
        """Gets the status of this TerminalAssignment.

        The status of the reassignment. Possible values:   * `reassignmentInProgress`: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * `deployed`: the terminal is deployed and reassigned.   * `inventory`: the terminal is in inventory and cannot process transactions.   * `boarded`: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  

        :return: The status of this TerminalAssignment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TerminalAssignment.

        The status of the reassignment. Possible values:   * `reassignmentInProgress`: the terminal was boarded and is now scheduled to remove the configuration. Wait for the terminal to synchronize with the Adyen platform.  * `deployed`: the terminal is deployed and reassigned.   * `inventory`: the terminal is in inventory and cannot process transactions.   * `boarded`: the terminal is boarded to a store, or a merchant account representing a store, and can process transactions.  

        :param status: The status of this TerminalAssignment.
        :type status: str
        """
        allowed_values = ["boarded", "deployed", "inventory", "reassignmentInProgress"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def store_id(self):
        """Gets the store_id of this TerminalAssignment.

        The unique identifier of the store to which terminal is assigned.

        :return: The store_id of this TerminalAssignment.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this TerminalAssignment.

        The unique identifier of the store to which terminal is assigned.

        :param store_id: The store_id of this TerminalAssignment.
        :type store_id: str
        """

        self._store_id = store_id
