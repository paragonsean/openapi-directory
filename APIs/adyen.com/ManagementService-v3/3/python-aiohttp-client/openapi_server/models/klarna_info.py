# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KlarnaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_capture: bool=None, dispute_email: str=None, region: str=None, support_email: str=None):
        """KlarnaInfo - a model defined in OpenAPI

        :param auto_capture: The auto_capture of this KlarnaInfo.
        :param dispute_email: The dispute_email of this KlarnaInfo.
        :param region: The region of this KlarnaInfo.
        :param support_email: The support_email of this KlarnaInfo.
        """
        self.openapi_types = {
            'auto_capture': bool,
            'dispute_email': str,
            'region': str,
            'support_email': str
        }

        self.attribute_map = {
            'auto_capture': 'autoCapture',
            'dispute_email': 'disputeEmail',
            'region': 'region',
            'support_email': 'supportEmail'
        }

        self._auto_capture = auto_capture
        self._dispute_email = dispute_email
        self._region = region
        self._support_email = support_email

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KlarnaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KlarnaInfo of this KlarnaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_capture(self):
        """Gets the auto_capture of this KlarnaInfo.

        Indicates the status of [Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture). Default value: **false**.

        :return: The auto_capture of this KlarnaInfo.
        :rtype: bool
        """
        return self._auto_capture

    @auto_capture.setter
    def auto_capture(self, auto_capture):
        """Sets the auto_capture of this KlarnaInfo.

        Indicates the status of [Automatic capture](https://docs.adyen.com/online-payments/capture#automatic-capture). Default value: **false**.

        :param auto_capture: The auto_capture of this KlarnaInfo.
        :type auto_capture: bool
        """

        self._auto_capture = auto_capture

    @property
    def dispute_email(self):
        """Gets the dispute_email of this KlarnaInfo.

        The email address for disputes.

        :return: The dispute_email of this KlarnaInfo.
        :rtype: str
        """
        return self._dispute_email

    @dispute_email.setter
    def dispute_email(self, dispute_email):
        """Sets the dispute_email of this KlarnaInfo.

        The email address for disputes.

        :param dispute_email: The dispute_email of this KlarnaInfo.
        :type dispute_email: str
        """
        if dispute_email is None:
            raise ValueError("Invalid value for `dispute_email`, must not be `None`")

        self._dispute_email = dispute_email

    @property
    def region(self):
        """Gets the region of this KlarnaInfo.

        The region of operation. For example, **NA**, **EU**, **CH**, **AU**.

        :return: The region of this KlarnaInfo.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this KlarnaInfo.

        The region of operation. For example, **NA**, **EU**, **CH**, **AU**.

        :param region: The region of this KlarnaInfo.
        :type region: str
        """
        allowed_values = ["NA", "EU", "CH", "AU"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region

    @property
    def support_email(self):
        """Gets the support_email of this KlarnaInfo.

        The email address of merchant support.

        :return: The support_email of this KlarnaInfo.
        :rtype: str
        """
        return self._support_email

    @support_email.setter
    def support_email(self, support_email):
        """Sets the support_email of this KlarnaInfo.

        The email address of merchant support.

        :param support_email: The support_email of this KlarnaInfo.
        :type support_email: str
        """
        if support_email is None:
            raise ValueError("Invalid value for `support_email`, must not be `None`")

        self._support_email = support_email
