# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Connectivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, simcard_status: str=None):
        """Connectivity - a model defined in OpenAPI

        :param simcard_status: The simcard_status of this Connectivity.
        """
        self.openapi_types = {
            'simcard_status': str
        }

        self.attribute_map = {
            'simcard_status': 'simcardStatus'
        }

        self._simcard_status = simcard_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Connectivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Connectivity of this Connectivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def simcard_status(self):
        """Gets the simcard_status of this Connectivity.

        Indicates the status of the SIM card in the payment terminal. Can be updated and received only at terminal level, and only for models that support cellular connectivity.  Possible values: * **ACTIVATED**: the SIM card is activated. Cellular connectivity may still need to be enabled on the terminal itself, in the **Network** settings. * **INVENTORY**: the SIM card is not activated. The terminal can't use cellular connectivity.

        :return: The simcard_status of this Connectivity.
        :rtype: str
        """
        return self._simcard_status

    @simcard_status.setter
    def simcard_status(self, simcard_status):
        """Sets the simcard_status of this Connectivity.

        Indicates the status of the SIM card in the payment terminal. Can be updated and received only at terminal level, and only for models that support cellular connectivity.  Possible values: * **ACTIVATED**: the SIM card is activated. Cellular connectivity may still need to be enabled on the terminal itself, in the **Network** settings. * **INVENTORY**: the SIM card is not activated. The terminal can't use cellular connectivity.

        :param simcard_status: The simcard_status of this Connectivity.
        :type simcard_status: str
        """
        allowed_values = ["ACTIVATED", "INVENTORY"]  # noqa: E501
        if simcard_status not in allowed_values:
            raise ValueError(
                "Invalid value for `simcard_status` ({0}), must be one of {1}"
                .format(simcard_status, allowed_values)
            )

        self._simcard_status = simcard_status
