# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Signature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ask_signature_on_screen: bool=None, device_name: str=None, device_slogan: str=None, skip_signature: bool=None):
        """Signature - a model defined in OpenAPI

        :param ask_signature_on_screen: The ask_signature_on_screen of this Signature.
        :param device_name: The device_name of this Signature.
        :param device_slogan: The device_slogan of this Signature.
        :param skip_signature: The skip_signature of this Signature.
        """
        self.openapi_types = {
            'ask_signature_on_screen': bool,
            'device_name': str,
            'device_slogan': str,
            'skip_signature': bool
        }

        self.attribute_map = {
            'ask_signature_on_screen': 'askSignatureOnScreen',
            'device_name': 'deviceName',
            'device_slogan': 'deviceSlogan',
            'skip_signature': 'skipSignature'
        }

        self._ask_signature_on_screen = ask_signature_on_screen
        self._device_name = device_name
        self._device_slogan = device_slogan
        self._skip_signature = skip_signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Signature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Signature of this Signature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ask_signature_on_screen(self):
        """Gets the ask_signature_on_screen of this Signature.

        If `skipSignature` is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).

        :return: The ask_signature_on_screen of this Signature.
        :rtype: bool
        """
        return self._ask_signature_on_screen

    @ask_signature_on_screen.setter
    def ask_signature_on_screen(self, ask_signature_on_screen):
        """Sets the ask_signature_on_screen of this Signature.

        If `skipSignature` is false, indicates whether the shopper should provide a signature on the display (**true**) or on the merchant receipt (**false**).

        :param ask_signature_on_screen: The ask_signature_on_screen of this Signature.
        :type ask_signature_on_screen: bool
        """

        self._ask_signature_on_screen = ask_signature_on_screen

    @property
    def device_name(self):
        """Gets the device_name of this Signature.

        Name that identifies the terminal.

        :return: The device_name of this Signature.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this Signature.

        Name that identifies the terminal.

        :param device_name: The device_name of this Signature.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def device_slogan(self):
        """Gets the device_slogan of this Signature.

        Slogan shown on the start screen of the device.

        :return: The device_slogan of this Signature.
        :rtype: str
        """
        return self._device_slogan

    @device_slogan.setter
    def device_slogan(self, device_slogan):
        """Sets the device_slogan of this Signature.

        Slogan shown on the start screen of the device.

        :param device_slogan: The device_slogan of this Signature.
        :type device_slogan: str
        """
        if device_slogan is not None and len(device_slogan) > 50:
            raise ValueError("Invalid value for `device_slogan`, length must be less than or equal to `50`")

        self._device_slogan = device_slogan

    @property
    def skip_signature(self):
        """Gets the skip_signature of this Signature.

        Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.

        :return: The skip_signature of this Signature.
        :rtype: bool
        """
        return self._skip_signature

    @skip_signature.setter
    def skip_signature(self, skip_signature):
        """Sets the skip_signature of this Signature.

        Skip asking for a signature. This is possible because all global card schemes (American Express, Diners, Discover, JCB, MasterCard, VISA, and UnionPay) regard a signature as optional.

        :param skip_signature: The skip_signature of this Signature.
        :type skip_signature: bool
        """

        self._skip_signature = skip_signature
