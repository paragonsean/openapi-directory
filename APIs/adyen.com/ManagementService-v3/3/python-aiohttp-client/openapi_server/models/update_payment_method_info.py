# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bcmc_info import BcmcInfo
from openapi_server.models.cartes_bancaires_info import CartesBancairesInfo
from openapi_server.models.generic_pm_with_tdi_info import GenericPmWithTdiInfo
from openapi_server import util


class UpdatePaymentMethodInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bcmc: BcmcInfo=None, cartes_bancaires: CartesBancairesInfo=None, countries: List[str]=None, cup: GenericPmWithTdiInfo=None, currencies: List[str]=None, custom_routing_flags: List[str]=None, diners: GenericPmWithTdiInfo=None, discover: GenericPmWithTdiInfo=None, eftpos_australia: GenericPmWithTdiInfo=None, enabled: bool=None, girocard: GenericPmWithTdiInfo=None, ideal: GenericPmWithTdiInfo=None, interac_card: GenericPmWithTdiInfo=None, jcb: GenericPmWithTdiInfo=None, maestro: GenericPmWithTdiInfo=None, mc: GenericPmWithTdiInfo=None, store_ids: List[str]=None, visa: GenericPmWithTdiInfo=None):
        """UpdatePaymentMethodInfo - a model defined in OpenAPI

        :param bcmc: The bcmc of this UpdatePaymentMethodInfo.
        :param cartes_bancaires: The cartes_bancaires of this UpdatePaymentMethodInfo.
        :param countries: The countries of this UpdatePaymentMethodInfo.
        :param cup: The cup of this UpdatePaymentMethodInfo.
        :param currencies: The currencies of this UpdatePaymentMethodInfo.
        :param custom_routing_flags: The custom_routing_flags of this UpdatePaymentMethodInfo.
        :param diners: The diners of this UpdatePaymentMethodInfo.
        :param discover: The discover of this UpdatePaymentMethodInfo.
        :param eftpos_australia: The eftpos_australia of this UpdatePaymentMethodInfo.
        :param enabled: The enabled of this UpdatePaymentMethodInfo.
        :param girocard: The girocard of this UpdatePaymentMethodInfo.
        :param ideal: The ideal of this UpdatePaymentMethodInfo.
        :param interac_card: The interac_card of this UpdatePaymentMethodInfo.
        :param jcb: The jcb of this UpdatePaymentMethodInfo.
        :param maestro: The maestro of this UpdatePaymentMethodInfo.
        :param mc: The mc of this UpdatePaymentMethodInfo.
        :param store_ids: The store_ids of this UpdatePaymentMethodInfo.
        :param visa: The visa of this UpdatePaymentMethodInfo.
        """
        self.openapi_types = {
            'bcmc': BcmcInfo,
            'cartes_bancaires': CartesBancairesInfo,
            'countries': List[str],
            'cup': GenericPmWithTdiInfo,
            'currencies': List[str],
            'custom_routing_flags': List[str],
            'diners': GenericPmWithTdiInfo,
            'discover': GenericPmWithTdiInfo,
            'eftpos_australia': GenericPmWithTdiInfo,
            'enabled': bool,
            'girocard': GenericPmWithTdiInfo,
            'ideal': GenericPmWithTdiInfo,
            'interac_card': GenericPmWithTdiInfo,
            'jcb': GenericPmWithTdiInfo,
            'maestro': GenericPmWithTdiInfo,
            'mc': GenericPmWithTdiInfo,
            'store_ids': List[str],
            'visa': GenericPmWithTdiInfo
        }

        self.attribute_map = {
            'bcmc': 'bcmc',
            'cartes_bancaires': 'cartesBancaires',
            'countries': 'countries',
            'cup': 'cup',
            'currencies': 'currencies',
            'custom_routing_flags': 'customRoutingFlags',
            'diners': 'diners',
            'discover': 'discover',
            'eftpos_australia': 'eftpos_australia',
            'enabled': 'enabled',
            'girocard': 'girocard',
            'ideal': 'ideal',
            'interac_card': 'interac_card',
            'jcb': 'jcb',
            'maestro': 'maestro',
            'mc': 'mc',
            'store_ids': 'storeIds',
            'visa': 'visa'
        }

        self._bcmc = bcmc
        self._cartes_bancaires = cartes_bancaires
        self._countries = countries
        self._cup = cup
        self._currencies = currencies
        self._custom_routing_flags = custom_routing_flags
        self._diners = diners
        self._discover = discover
        self._eftpos_australia = eftpos_australia
        self._enabled = enabled
        self._girocard = girocard
        self._ideal = ideal
        self._interac_card = interac_card
        self._jcb = jcb
        self._maestro = maestro
        self._mc = mc
        self._store_ids = store_ids
        self._visa = visa

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePaymentMethodInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePaymentMethodInfo of this UpdatePaymentMethodInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bcmc(self):
        """Gets the bcmc of this UpdatePaymentMethodInfo.

        Bancontact details.

        :return: The bcmc of this UpdatePaymentMethodInfo.
        :rtype: BcmcInfo
        """
        return self._bcmc

    @bcmc.setter
    def bcmc(self, bcmc):
        """Sets the bcmc of this UpdatePaymentMethodInfo.

        Bancontact details.

        :param bcmc: The bcmc of this UpdatePaymentMethodInfo.
        :type bcmc: BcmcInfo
        """

        self._bcmc = bcmc

    @property
    def cartes_bancaires(self):
        """Gets the cartes_bancaires of this UpdatePaymentMethodInfo.

        Cartes Bancaires details.

        :return: The cartes_bancaires of this UpdatePaymentMethodInfo.
        :rtype: CartesBancairesInfo
        """
        return self._cartes_bancaires

    @cartes_bancaires.setter
    def cartes_bancaires(self, cartes_bancaires):
        """Sets the cartes_bancaires of this UpdatePaymentMethodInfo.

        Cartes Bancaires details.

        :param cartes_bancaires: The cartes_bancaires of this UpdatePaymentMethodInfo.
        :type cartes_bancaires: CartesBancairesInfo
        """

        self._cartes_bancaires = cartes_bancaires

    @property
    def countries(self):
        """Gets the countries of this UpdatePaymentMethodInfo.

        The list of countries where a payment method is available. By default, all countries supported by the payment method.

        :return: The countries of this UpdatePaymentMethodInfo.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this UpdatePaymentMethodInfo.

        The list of countries where a payment method is available. By default, all countries supported by the payment method.

        :param countries: The countries of this UpdatePaymentMethodInfo.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def cup(self):
        """Gets the cup of this UpdatePaymentMethodInfo.

        China Union Pay details.

        :return: The cup of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._cup

    @cup.setter
    def cup(self, cup):
        """Sets the cup of this UpdatePaymentMethodInfo.

        China Union Pay details.

        :param cup: The cup of this UpdatePaymentMethodInfo.
        :type cup: GenericPmWithTdiInfo
        """

        self._cup = cup

    @property
    def currencies(self):
        """Gets the currencies of this UpdatePaymentMethodInfo.

        The list of currencies that a payment method supports. By default, all currencies supported by the payment method.

        :return: The currencies of this UpdatePaymentMethodInfo.
        :rtype: List[str]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this UpdatePaymentMethodInfo.

        The list of currencies that a payment method supports. By default, all currencies supported by the payment method.

        :param currencies: The currencies of this UpdatePaymentMethodInfo.
        :type currencies: List[str]
        """

        self._currencies = currencies

    @property
    def custom_routing_flags(self):
        """Gets the custom_routing_flags of this UpdatePaymentMethodInfo.

        Custom routing flags for acquirer routing.

        :return: The custom_routing_flags of this UpdatePaymentMethodInfo.
        :rtype: List[str]
        """
        return self._custom_routing_flags

    @custom_routing_flags.setter
    def custom_routing_flags(self, custom_routing_flags):
        """Sets the custom_routing_flags of this UpdatePaymentMethodInfo.

        Custom routing flags for acquirer routing.

        :param custom_routing_flags: The custom_routing_flags of this UpdatePaymentMethodInfo.
        :type custom_routing_flags: List[str]
        """

        self._custom_routing_flags = custom_routing_flags

    @property
    def diners(self):
        """Gets the diners of this UpdatePaymentMethodInfo.

        Diners details.

        :return: The diners of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._diners

    @diners.setter
    def diners(self, diners):
        """Sets the diners of this UpdatePaymentMethodInfo.

        Diners details.

        :param diners: The diners of this UpdatePaymentMethodInfo.
        :type diners: GenericPmWithTdiInfo
        """

        self._diners = diners

    @property
    def discover(self):
        """Gets the discover of this UpdatePaymentMethodInfo.

        Discover details.

        :return: The discover of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._discover

    @discover.setter
    def discover(self, discover):
        """Sets the discover of this UpdatePaymentMethodInfo.

        Discover details.

        :param discover: The discover of this UpdatePaymentMethodInfo.
        :type discover: GenericPmWithTdiInfo
        """

        self._discover = discover

    @property
    def eftpos_australia(self):
        """Gets the eftpos_australia of this UpdatePaymentMethodInfo.

        Eftpos Australia details.

        :return: The eftpos_australia of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._eftpos_australia

    @eftpos_australia.setter
    def eftpos_australia(self, eftpos_australia):
        """Sets the eftpos_australia of this UpdatePaymentMethodInfo.

        Eftpos Australia details.

        :param eftpos_australia: The eftpos_australia of this UpdatePaymentMethodInfo.
        :type eftpos_australia: GenericPmWithTdiInfo
        """

        self._eftpos_australia = eftpos_australia

    @property
    def enabled(self):
        """Gets the enabled of this UpdatePaymentMethodInfo.

        Indicates whether the payment method is enabled (**true**) or disabled (**false**).

        :return: The enabled of this UpdatePaymentMethodInfo.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this UpdatePaymentMethodInfo.

        Indicates whether the payment method is enabled (**true**) or disabled (**false**).

        :param enabled: The enabled of this UpdatePaymentMethodInfo.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def girocard(self):
        """Gets the girocard of this UpdatePaymentMethodInfo.

        Girocard details.

        :return: The girocard of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._girocard

    @girocard.setter
    def girocard(self, girocard):
        """Sets the girocard of this UpdatePaymentMethodInfo.

        Girocard details.

        :param girocard: The girocard of this UpdatePaymentMethodInfo.
        :type girocard: GenericPmWithTdiInfo
        """

        self._girocard = girocard

    @property
    def ideal(self):
        """Gets the ideal of this UpdatePaymentMethodInfo.

        iDeal details.

        :return: The ideal of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._ideal

    @ideal.setter
    def ideal(self, ideal):
        """Sets the ideal of this UpdatePaymentMethodInfo.

        iDeal details.

        :param ideal: The ideal of this UpdatePaymentMethodInfo.
        :type ideal: GenericPmWithTdiInfo
        """

        self._ideal = ideal

    @property
    def interac_card(self):
        """Gets the interac_card of this UpdatePaymentMethodInfo.

        Interac Card details.

        :return: The interac_card of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._interac_card

    @interac_card.setter
    def interac_card(self, interac_card):
        """Sets the interac_card of this UpdatePaymentMethodInfo.

        Interac Card details.

        :param interac_card: The interac_card of this UpdatePaymentMethodInfo.
        :type interac_card: GenericPmWithTdiInfo
        """

        self._interac_card = interac_card

    @property
    def jcb(self):
        """Gets the jcb of this UpdatePaymentMethodInfo.

        JCB details.

        :return: The jcb of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._jcb

    @jcb.setter
    def jcb(self, jcb):
        """Sets the jcb of this UpdatePaymentMethodInfo.

        JCB details.

        :param jcb: The jcb of this UpdatePaymentMethodInfo.
        :type jcb: GenericPmWithTdiInfo
        """

        self._jcb = jcb

    @property
    def maestro(self):
        """Gets the maestro of this UpdatePaymentMethodInfo.

        Maestro details.

        :return: The maestro of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._maestro

    @maestro.setter
    def maestro(self, maestro):
        """Sets the maestro of this UpdatePaymentMethodInfo.

        Maestro details.

        :param maestro: The maestro of this UpdatePaymentMethodInfo.
        :type maestro: GenericPmWithTdiInfo
        """

        self._maestro = maestro

    @property
    def mc(self):
        """Gets the mc of this UpdatePaymentMethodInfo.

        MasterCard details.

        :return: The mc of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._mc

    @mc.setter
    def mc(self, mc):
        """Sets the mc of this UpdatePaymentMethodInfo.

        MasterCard details.

        :param mc: The mc of this UpdatePaymentMethodInfo.
        :type mc: GenericPmWithTdiInfo
        """

        self._mc = mc

    @property
    def store_ids(self):
        """Gets the store_ids of this UpdatePaymentMethodInfo.

        The list of stores for this payment method

        :return: The store_ids of this UpdatePaymentMethodInfo.
        :rtype: List[str]
        """
        return self._store_ids

    @store_ids.setter
    def store_ids(self, store_ids):
        """Sets the store_ids of this UpdatePaymentMethodInfo.

        The list of stores for this payment method

        :param store_ids: The store_ids of this UpdatePaymentMethodInfo.
        :type store_ids: List[str]
        """

        self._store_ids = store_ids

    @property
    def visa(self):
        """Gets the visa of this UpdatePaymentMethodInfo.

        Visa details.

        :return: The visa of this UpdatePaymentMethodInfo.
        :rtype: GenericPmWithTdiInfo
        """
        return self._visa

    @visa.setter
    def visa(self, visa):
        """Sets the visa of this UpdatePaymentMethodInfo.

        Visa details.

        :param visa: The visa of this UpdatePaymentMethodInfo.
        :type visa: GenericPmWithTdiInfo
        """

        self._visa = visa
