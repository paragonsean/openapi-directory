# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReceiptPrinting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_approved: bool=None, merchant_cancelled: bool=None, merchant_capture_approved: bool=None, merchant_capture_refused: bool=None, merchant_refund_approved: bool=None, merchant_refund_refused: bool=None, merchant_refused: bool=None, merchant_void: bool=None, shopper_approved: bool=None, shopper_cancelled: bool=None, shopper_capture_approved: bool=None, shopper_capture_refused: bool=None, shopper_refund_approved: bool=None, shopper_refund_refused: bool=None, shopper_refused: bool=None, shopper_void: bool=None):
        """ReceiptPrinting - a model defined in OpenAPI

        :param merchant_approved: The merchant_approved of this ReceiptPrinting.
        :param merchant_cancelled: The merchant_cancelled of this ReceiptPrinting.
        :param merchant_capture_approved: The merchant_capture_approved of this ReceiptPrinting.
        :param merchant_capture_refused: The merchant_capture_refused of this ReceiptPrinting.
        :param merchant_refund_approved: The merchant_refund_approved of this ReceiptPrinting.
        :param merchant_refund_refused: The merchant_refund_refused of this ReceiptPrinting.
        :param merchant_refused: The merchant_refused of this ReceiptPrinting.
        :param merchant_void: The merchant_void of this ReceiptPrinting.
        :param shopper_approved: The shopper_approved of this ReceiptPrinting.
        :param shopper_cancelled: The shopper_cancelled of this ReceiptPrinting.
        :param shopper_capture_approved: The shopper_capture_approved of this ReceiptPrinting.
        :param shopper_capture_refused: The shopper_capture_refused of this ReceiptPrinting.
        :param shopper_refund_approved: The shopper_refund_approved of this ReceiptPrinting.
        :param shopper_refund_refused: The shopper_refund_refused of this ReceiptPrinting.
        :param shopper_refused: The shopper_refused of this ReceiptPrinting.
        :param shopper_void: The shopper_void of this ReceiptPrinting.
        """
        self.openapi_types = {
            'merchant_approved': bool,
            'merchant_cancelled': bool,
            'merchant_capture_approved': bool,
            'merchant_capture_refused': bool,
            'merchant_refund_approved': bool,
            'merchant_refund_refused': bool,
            'merchant_refused': bool,
            'merchant_void': bool,
            'shopper_approved': bool,
            'shopper_cancelled': bool,
            'shopper_capture_approved': bool,
            'shopper_capture_refused': bool,
            'shopper_refund_approved': bool,
            'shopper_refund_refused': bool,
            'shopper_refused': bool,
            'shopper_void': bool
        }

        self.attribute_map = {
            'merchant_approved': 'merchantApproved',
            'merchant_cancelled': 'merchantCancelled',
            'merchant_capture_approved': 'merchantCaptureApproved',
            'merchant_capture_refused': 'merchantCaptureRefused',
            'merchant_refund_approved': 'merchantRefundApproved',
            'merchant_refund_refused': 'merchantRefundRefused',
            'merchant_refused': 'merchantRefused',
            'merchant_void': 'merchantVoid',
            'shopper_approved': 'shopperApproved',
            'shopper_cancelled': 'shopperCancelled',
            'shopper_capture_approved': 'shopperCaptureApproved',
            'shopper_capture_refused': 'shopperCaptureRefused',
            'shopper_refund_approved': 'shopperRefundApproved',
            'shopper_refund_refused': 'shopperRefundRefused',
            'shopper_refused': 'shopperRefused',
            'shopper_void': 'shopperVoid'
        }

        self._merchant_approved = merchant_approved
        self._merchant_cancelled = merchant_cancelled
        self._merchant_capture_approved = merchant_capture_approved
        self._merchant_capture_refused = merchant_capture_refused
        self._merchant_refund_approved = merchant_refund_approved
        self._merchant_refund_refused = merchant_refund_refused
        self._merchant_refused = merchant_refused
        self._merchant_void = merchant_void
        self._shopper_approved = shopper_approved
        self._shopper_cancelled = shopper_cancelled
        self._shopper_capture_approved = shopper_capture_approved
        self._shopper_capture_refused = shopper_capture_refused
        self._shopper_refund_approved = shopper_refund_approved
        self._shopper_refund_refused = shopper_refund_refused
        self._shopper_refused = shopper_refused
        self._shopper_void = shopper_void

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiptPrinting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReceiptPrinting of this ReceiptPrinting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_approved(self):
        """Gets the merchant_approved of this ReceiptPrinting.

        Print a merchant receipt when the payment is approved.

        :return: The merchant_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_approved

    @merchant_approved.setter
    def merchant_approved(self, merchant_approved):
        """Sets the merchant_approved of this ReceiptPrinting.

        Print a merchant receipt when the payment is approved.

        :param merchant_approved: The merchant_approved of this ReceiptPrinting.
        :type merchant_approved: bool
        """

        self._merchant_approved = merchant_approved

    @property
    def merchant_cancelled(self):
        """Gets the merchant_cancelled of this ReceiptPrinting.

        Print a merchant receipt when the transaction is cancelled.

        :return: The merchant_cancelled of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_cancelled

    @merchant_cancelled.setter
    def merchant_cancelled(self, merchant_cancelled):
        """Sets the merchant_cancelled of this ReceiptPrinting.

        Print a merchant receipt when the transaction is cancelled.

        :param merchant_cancelled: The merchant_cancelled of this ReceiptPrinting.
        :type merchant_cancelled: bool
        """

        self._merchant_cancelled = merchant_cancelled

    @property
    def merchant_capture_approved(self):
        """Gets the merchant_capture_approved of this ReceiptPrinting.

        Print a merchant receipt when capturing the payment is approved.

        :return: The merchant_capture_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_capture_approved

    @merchant_capture_approved.setter
    def merchant_capture_approved(self, merchant_capture_approved):
        """Sets the merchant_capture_approved of this ReceiptPrinting.

        Print a merchant receipt when capturing the payment is approved.

        :param merchant_capture_approved: The merchant_capture_approved of this ReceiptPrinting.
        :type merchant_capture_approved: bool
        """

        self._merchant_capture_approved = merchant_capture_approved

    @property
    def merchant_capture_refused(self):
        """Gets the merchant_capture_refused of this ReceiptPrinting.

        Print a merchant receipt when capturing the payment is refused.

        :return: The merchant_capture_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_capture_refused

    @merchant_capture_refused.setter
    def merchant_capture_refused(self, merchant_capture_refused):
        """Sets the merchant_capture_refused of this ReceiptPrinting.

        Print a merchant receipt when capturing the payment is refused.

        :param merchant_capture_refused: The merchant_capture_refused of this ReceiptPrinting.
        :type merchant_capture_refused: bool
        """

        self._merchant_capture_refused = merchant_capture_refused

    @property
    def merchant_refund_approved(self):
        """Gets the merchant_refund_approved of this ReceiptPrinting.

        Print a merchant receipt when the refund is approved.

        :return: The merchant_refund_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_refund_approved

    @merchant_refund_approved.setter
    def merchant_refund_approved(self, merchant_refund_approved):
        """Sets the merchant_refund_approved of this ReceiptPrinting.

        Print a merchant receipt when the refund is approved.

        :param merchant_refund_approved: The merchant_refund_approved of this ReceiptPrinting.
        :type merchant_refund_approved: bool
        """

        self._merchant_refund_approved = merchant_refund_approved

    @property
    def merchant_refund_refused(self):
        """Gets the merchant_refund_refused of this ReceiptPrinting.

        Print a merchant receipt when the refund is refused.

        :return: The merchant_refund_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_refund_refused

    @merchant_refund_refused.setter
    def merchant_refund_refused(self, merchant_refund_refused):
        """Sets the merchant_refund_refused of this ReceiptPrinting.

        Print a merchant receipt when the refund is refused.

        :param merchant_refund_refused: The merchant_refund_refused of this ReceiptPrinting.
        :type merchant_refund_refused: bool
        """

        self._merchant_refund_refused = merchant_refund_refused

    @property
    def merchant_refused(self):
        """Gets the merchant_refused of this ReceiptPrinting.

        Print a merchant receipt when the payment is refused.

        :return: The merchant_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_refused

    @merchant_refused.setter
    def merchant_refused(self, merchant_refused):
        """Sets the merchant_refused of this ReceiptPrinting.

        Print a merchant receipt when the payment is refused.

        :param merchant_refused: The merchant_refused of this ReceiptPrinting.
        :type merchant_refused: bool
        """

        self._merchant_refused = merchant_refused

    @property
    def merchant_void(self):
        """Gets the merchant_void of this ReceiptPrinting.

        Print a merchant receipt when a previous transaction is voided.

        :return: The merchant_void of this ReceiptPrinting.
        :rtype: bool
        """
        return self._merchant_void

    @merchant_void.setter
    def merchant_void(self, merchant_void):
        """Sets the merchant_void of this ReceiptPrinting.

        Print a merchant receipt when a previous transaction is voided.

        :param merchant_void: The merchant_void of this ReceiptPrinting.
        :type merchant_void: bool
        """

        self._merchant_void = merchant_void

    @property
    def shopper_approved(self):
        """Gets the shopper_approved of this ReceiptPrinting.

        Print a shopper receipt when the payment is approved.

        :return: The shopper_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_approved

    @shopper_approved.setter
    def shopper_approved(self, shopper_approved):
        """Sets the shopper_approved of this ReceiptPrinting.

        Print a shopper receipt when the payment is approved.

        :param shopper_approved: The shopper_approved of this ReceiptPrinting.
        :type shopper_approved: bool
        """

        self._shopper_approved = shopper_approved

    @property
    def shopper_cancelled(self):
        """Gets the shopper_cancelled of this ReceiptPrinting.

        Print a shopper receipt when the transaction is cancelled.

        :return: The shopper_cancelled of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_cancelled

    @shopper_cancelled.setter
    def shopper_cancelled(self, shopper_cancelled):
        """Sets the shopper_cancelled of this ReceiptPrinting.

        Print a shopper receipt when the transaction is cancelled.

        :param shopper_cancelled: The shopper_cancelled of this ReceiptPrinting.
        :type shopper_cancelled: bool
        """

        self._shopper_cancelled = shopper_cancelled

    @property
    def shopper_capture_approved(self):
        """Gets the shopper_capture_approved of this ReceiptPrinting.

        Print a shopper receipt when capturing the payment is approved.

        :return: The shopper_capture_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_capture_approved

    @shopper_capture_approved.setter
    def shopper_capture_approved(self, shopper_capture_approved):
        """Sets the shopper_capture_approved of this ReceiptPrinting.

        Print a shopper receipt when capturing the payment is approved.

        :param shopper_capture_approved: The shopper_capture_approved of this ReceiptPrinting.
        :type shopper_capture_approved: bool
        """

        self._shopper_capture_approved = shopper_capture_approved

    @property
    def shopper_capture_refused(self):
        """Gets the shopper_capture_refused of this ReceiptPrinting.

        Print a shopper receipt when capturing the payment is refused.

        :return: The shopper_capture_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_capture_refused

    @shopper_capture_refused.setter
    def shopper_capture_refused(self, shopper_capture_refused):
        """Sets the shopper_capture_refused of this ReceiptPrinting.

        Print a shopper receipt when capturing the payment is refused.

        :param shopper_capture_refused: The shopper_capture_refused of this ReceiptPrinting.
        :type shopper_capture_refused: bool
        """

        self._shopper_capture_refused = shopper_capture_refused

    @property
    def shopper_refund_approved(self):
        """Gets the shopper_refund_approved of this ReceiptPrinting.

        Print a shopper receipt when the refund is approved.

        :return: The shopper_refund_approved of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_refund_approved

    @shopper_refund_approved.setter
    def shopper_refund_approved(self, shopper_refund_approved):
        """Sets the shopper_refund_approved of this ReceiptPrinting.

        Print a shopper receipt when the refund is approved.

        :param shopper_refund_approved: The shopper_refund_approved of this ReceiptPrinting.
        :type shopper_refund_approved: bool
        """

        self._shopper_refund_approved = shopper_refund_approved

    @property
    def shopper_refund_refused(self):
        """Gets the shopper_refund_refused of this ReceiptPrinting.

        Print a shopper receipt when the refund is refused.

        :return: The shopper_refund_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_refund_refused

    @shopper_refund_refused.setter
    def shopper_refund_refused(self, shopper_refund_refused):
        """Sets the shopper_refund_refused of this ReceiptPrinting.

        Print a shopper receipt when the refund is refused.

        :param shopper_refund_refused: The shopper_refund_refused of this ReceiptPrinting.
        :type shopper_refund_refused: bool
        """

        self._shopper_refund_refused = shopper_refund_refused

    @property
    def shopper_refused(self):
        """Gets the shopper_refused of this ReceiptPrinting.

        Print a shopper receipt when the payment is refused.

        :return: The shopper_refused of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_refused

    @shopper_refused.setter
    def shopper_refused(self, shopper_refused):
        """Sets the shopper_refused of this ReceiptPrinting.

        Print a shopper receipt when the payment is refused.

        :param shopper_refused: The shopper_refused of this ReceiptPrinting.
        :type shopper_refused: bool
        """

        self._shopper_refused = shopper_refused

    @property
    def shopper_void(self):
        """Gets the shopper_void of this ReceiptPrinting.

        Print a shopper receipt when a previous transaction is voided.

        :return: The shopper_void of this ReceiptPrinting.
        :rtype: bool
        """
        return self._shopper_void

    @shopper_void.setter
    def shopper_void(self, shopper_void):
        """Sets the shopper_void of this ReceiptPrinting.

        Print a shopper receipt when a previous transaction is voided.

        :param shopper_void: The shopper_void of this ReceiptPrinting.
        :type shopper_void: bool
        """

        self._shopper_void = shopper_void
