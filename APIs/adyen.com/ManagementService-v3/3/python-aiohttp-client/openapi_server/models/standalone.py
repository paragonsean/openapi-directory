# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Standalone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, enable_standalone: bool=None):
        """Standalone - a model defined in OpenAPI

        :param currency_code: The currency_code of this Standalone.
        :param enable_standalone: The enable_standalone of this Standalone.
        """
        self.openapi_types = {
            'currency_code': str,
            'enable_standalone': bool
        }

        self.attribute_map = {
            'currency_code': 'currencyCode',
            'enable_standalone': 'enableStandalone'
        }

        self._currency_code = currency_code
        self._enable_standalone = enable_standalone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Standalone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Standalone of this Standalone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Standalone.

        The default currency of the standalone payment terminal as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.

        :return: The currency_code of this Standalone.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Standalone.

        The default currency of the standalone payment terminal as an [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.

        :param currency_code: The currency_code of this Standalone.
        :type currency_code: str
        """
        if currency_code is not None and len(currency_code) > 3:
            raise ValueError("Invalid value for `currency_code`, length must be less than or equal to `3`")
        if currency_code is not None and len(currency_code) < 3:
            raise ValueError("Invalid value for `currency_code`, length must be greater than or equal to `3`")

        self._currency_code = currency_code

    @property
    def enable_standalone(self):
        """Gets the enable_standalone of this Standalone.

        Enable standalone mode.

        :return: The enable_standalone of this Standalone.
        :rtype: bool
        """
        return self._enable_standalone

    @enable_standalone.setter
    def enable_standalone(self, enable_standalone):
        """Sets the enable_standalone of this Standalone.

        Enable standalone mode.

        :param enable_standalone: The enable_standalone of this Standalone.
        :type enable_standalone: bool
        """

        self._enable_standalone = enable_standalone
