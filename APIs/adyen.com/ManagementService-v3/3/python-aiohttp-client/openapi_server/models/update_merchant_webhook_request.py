# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_settings import AdditionalSettings
from openapi_server import util


class UpdateMerchantWebhookRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepts_expired_certificate: bool=None, accepts_self_signed_certificate: bool=None, accepts_untrusted_root_certificate: bool=None, active: bool=None, additional_settings: AdditionalSettings=None, communication_format: str=None, description: str=None, encryption_protocol: str=None, network_type: str=None, password: str=None, populate_soap_action_header: bool=None, url: str=None, username: str=None):
        """UpdateMerchantWebhookRequest - a model defined in OpenAPI

        :param accepts_expired_certificate: The accepts_expired_certificate of this UpdateMerchantWebhookRequest.
        :param accepts_self_signed_certificate: The accepts_self_signed_certificate of this UpdateMerchantWebhookRequest.
        :param accepts_untrusted_root_certificate: The accepts_untrusted_root_certificate of this UpdateMerchantWebhookRequest.
        :param active: The active of this UpdateMerchantWebhookRequest.
        :param additional_settings: The additional_settings of this UpdateMerchantWebhookRequest.
        :param communication_format: The communication_format of this UpdateMerchantWebhookRequest.
        :param description: The description of this UpdateMerchantWebhookRequest.
        :param encryption_protocol: The encryption_protocol of this UpdateMerchantWebhookRequest.
        :param network_type: The network_type of this UpdateMerchantWebhookRequest.
        :param password: The password of this UpdateMerchantWebhookRequest.
        :param populate_soap_action_header: The populate_soap_action_header of this UpdateMerchantWebhookRequest.
        :param url: The url of this UpdateMerchantWebhookRequest.
        :param username: The username of this UpdateMerchantWebhookRequest.
        """
        self.openapi_types = {
            'accepts_expired_certificate': bool,
            'accepts_self_signed_certificate': bool,
            'accepts_untrusted_root_certificate': bool,
            'active': bool,
            'additional_settings': AdditionalSettings,
            'communication_format': str,
            'description': str,
            'encryption_protocol': str,
            'network_type': str,
            'password': str,
            'populate_soap_action_header': bool,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'accepts_expired_certificate': 'acceptsExpiredCertificate',
            'accepts_self_signed_certificate': 'acceptsSelfSignedCertificate',
            'accepts_untrusted_root_certificate': 'acceptsUntrustedRootCertificate',
            'active': 'active',
            'additional_settings': 'additionalSettings',
            'communication_format': 'communicationFormat',
            'description': 'description',
            'encryption_protocol': 'encryptionProtocol',
            'network_type': 'networkType',
            'password': 'password',
            'populate_soap_action_header': 'populateSoapActionHeader',
            'url': 'url',
            'username': 'username'
        }

        self._accepts_expired_certificate = accepts_expired_certificate
        self._accepts_self_signed_certificate = accepts_self_signed_certificate
        self._accepts_untrusted_root_certificate = accepts_untrusted_root_certificate
        self._active = active
        self._additional_settings = additional_settings
        self._communication_format = communication_format
        self._description = description
        self._encryption_protocol = encryption_protocol
        self._network_type = network_type
        self._password = password
        self._populate_soap_action_header = populate_soap_action_header
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateMerchantWebhookRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateMerchantWebhookRequest of this UpdateMerchantWebhookRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepts_expired_certificate(self):
        """Gets the accepts_expired_certificate of this UpdateMerchantWebhookRequest.

        Indicates if expired SSL certificates are accepted. Default value: **false**.

        :return: The accepts_expired_certificate of this UpdateMerchantWebhookRequest.
        :rtype: bool
        """
        return self._accepts_expired_certificate

    @accepts_expired_certificate.setter
    def accepts_expired_certificate(self, accepts_expired_certificate):
        """Sets the accepts_expired_certificate of this UpdateMerchantWebhookRequest.

        Indicates if expired SSL certificates are accepted. Default value: **false**.

        :param accepts_expired_certificate: The accepts_expired_certificate of this UpdateMerchantWebhookRequest.
        :type accepts_expired_certificate: bool
        """

        self._accepts_expired_certificate = accepts_expired_certificate

    @property
    def accepts_self_signed_certificate(self):
        """Gets the accepts_self_signed_certificate of this UpdateMerchantWebhookRequest.

        Indicates if self-signed SSL certificates are accepted. Default value: **false**.

        :return: The accepts_self_signed_certificate of this UpdateMerchantWebhookRequest.
        :rtype: bool
        """
        return self._accepts_self_signed_certificate

    @accepts_self_signed_certificate.setter
    def accepts_self_signed_certificate(self, accepts_self_signed_certificate):
        """Sets the accepts_self_signed_certificate of this UpdateMerchantWebhookRequest.

        Indicates if self-signed SSL certificates are accepted. Default value: **false**.

        :param accepts_self_signed_certificate: The accepts_self_signed_certificate of this UpdateMerchantWebhookRequest.
        :type accepts_self_signed_certificate: bool
        """

        self._accepts_self_signed_certificate = accepts_self_signed_certificate

    @property
    def accepts_untrusted_root_certificate(self):
        """Gets the accepts_untrusted_root_certificate of this UpdateMerchantWebhookRequest.

        Indicates if untrusted SSL certificates are accepted. Default value: **false**.

        :return: The accepts_untrusted_root_certificate of this UpdateMerchantWebhookRequest.
        :rtype: bool
        """
        return self._accepts_untrusted_root_certificate

    @accepts_untrusted_root_certificate.setter
    def accepts_untrusted_root_certificate(self, accepts_untrusted_root_certificate):
        """Sets the accepts_untrusted_root_certificate of this UpdateMerchantWebhookRequest.

        Indicates if untrusted SSL certificates are accepted. Default value: **false**.

        :param accepts_untrusted_root_certificate: The accepts_untrusted_root_certificate of this UpdateMerchantWebhookRequest.
        :type accepts_untrusted_root_certificate: bool
        """

        self._accepts_untrusted_root_certificate = accepts_untrusted_root_certificate

    @property
    def active(self):
        """Gets the active of this UpdateMerchantWebhookRequest.

        Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.

        :return: The active of this UpdateMerchantWebhookRequest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UpdateMerchantWebhookRequest.

        Indicates if the webhook configuration is active. The field must be **true** for us to send webhooks about events related an account.

        :param active: The active of this UpdateMerchantWebhookRequest.
        :type active: bool
        """

        self._active = active

    @property
    def additional_settings(self):
        """Gets the additional_settings of this UpdateMerchantWebhookRequest.

        Additional shopper and transaction information to be included in your [standard notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes). Find out more about the available [additional settings](https://docs.adyen.com/development-resources/webhooks/additional-settings).

        :return: The additional_settings of this UpdateMerchantWebhookRequest.
        :rtype: AdditionalSettings
        """
        return self._additional_settings

    @additional_settings.setter
    def additional_settings(self, additional_settings):
        """Sets the additional_settings of this UpdateMerchantWebhookRequest.

        Additional shopper and transaction information to be included in your [standard notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes). Find out more about the available [additional settings](https://docs.adyen.com/development-resources/webhooks/additional-settings).

        :param additional_settings: The additional_settings of this UpdateMerchantWebhookRequest.
        :type additional_settings: AdditionalSettings
        """

        self._additional_settings = additional_settings

    @property
    def communication_format(self):
        """Gets the communication_format of this UpdateMerchantWebhookRequest.

        Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 

        :return: The communication_format of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._communication_format

    @communication_format.setter
    def communication_format(self, communication_format):
        """Sets the communication_format of this UpdateMerchantWebhookRequest.

        Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 

        :param communication_format: The communication_format of this UpdateMerchantWebhookRequest.
        :type communication_format: str
        """
        allowed_values = ["http", "json", "soap"]  # noqa: E501
        if communication_format not in allowed_values:
            raise ValueError(
                "Invalid value for `communication_format` ({0}), must be one of {1}"
                .format(communication_format, allowed_values)
            )

        self._communication_format = communication_format

    @property
    def description(self):
        """Gets the description of this UpdateMerchantWebhookRequest.

        Your description for this webhook configuration.

        :return: The description of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateMerchantWebhookRequest.

        Your description for this webhook configuration.

        :param description: The description of this UpdateMerchantWebhookRequest.
        :type description: str
        """

        self._description = description

    @property
    def encryption_protocol(self):
        """Gets the encryption_protocol of this UpdateMerchantWebhookRequest.

        SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.

        :return: The encryption_protocol of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._encryption_protocol

    @encryption_protocol.setter
    def encryption_protocol(self, encryption_protocol):
        """Sets the encryption_protocol of this UpdateMerchantWebhookRequest.

        SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.

        :param encryption_protocol: The encryption_protocol of this UpdateMerchantWebhookRequest.
        :type encryption_protocol: str
        """
        allowed_values = ["HTTP", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if encryption_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_protocol` ({0}), must be one of {1}"
                .format(encryption_protocol, allowed_values)
            )

        self._encryption_protocol = encryption_protocol

    @property
    def network_type(self):
        """Gets the network_type of this UpdateMerchantWebhookRequest.

        Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**.

        :return: The network_type of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this UpdateMerchantWebhookRequest.

        Network type for Terminal API notification webhooks. Possible values: * **public** * **local**  Default Value: **public**.

        :param network_type: The network_type of this UpdateMerchantWebhookRequest.
        :type network_type: str
        """
        allowed_values = ["local", "public"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def password(self):
        """Gets the password of this UpdateMerchantWebhookRequest.

        Password to access the webhook URL.

        :return: The password of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UpdateMerchantWebhookRequest.

        Password to access the webhook URL.

        :param password: The password of this UpdateMerchantWebhookRequest.
        :type password: str
        """

        self._password = password

    @property
    def populate_soap_action_header(self):
        """Gets the populate_soap_action_header of this UpdateMerchantWebhookRequest.

        Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.

        :return: The populate_soap_action_header of this UpdateMerchantWebhookRequest.
        :rtype: bool
        """
        return self._populate_soap_action_header

    @populate_soap_action_header.setter
    def populate_soap_action_header(self, populate_soap_action_header):
        """Sets the populate_soap_action_header of this UpdateMerchantWebhookRequest.

        Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.

        :param populate_soap_action_header: The populate_soap_action_header of this UpdateMerchantWebhookRequest.
        :type populate_soap_action_header: bool
        """

        self._populate_soap_action_header = populate_soap_action_header

    @property
    def url(self):
        """Gets the url of this UpdateMerchantWebhookRequest.

        Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.

        :return: The url of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this UpdateMerchantWebhookRequest.

        Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.

        :param url: The url of this UpdateMerchantWebhookRequest.
        :type url: str
        """

        self._url = url

    @property
    def username(self):
        """Gets the username of this UpdateMerchantWebhookRequest.

        Username to access the webhook URL.

        :return: The username of this UpdateMerchantWebhookRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UpdateMerchantWebhookRequest.

        Username to access the webhook URL.

        :param username: The username of this UpdateMerchantWebhookRequest.
        :type username: str
        """
        if username is not None and len(username) > 255:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `255`")

        self._username = username
