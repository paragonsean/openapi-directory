# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pagination_links import PaginationLinks
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class PaymentMethodResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: PaginationLinks=None, data: List[PaymentMethod]=None, items_total: int=None, pages_total: int=None, types_with_errors: List[str]=None):
        """PaymentMethodResponse - a model defined in OpenAPI

        :param links: The links of this PaymentMethodResponse.
        :param data: The data of this PaymentMethodResponse.
        :param items_total: The items_total of this PaymentMethodResponse.
        :param pages_total: The pages_total of this PaymentMethodResponse.
        :param types_with_errors: The types_with_errors of this PaymentMethodResponse.
        """
        self.openapi_types = {
            'links': PaginationLinks,
            'data': List[PaymentMethod],
            'items_total': int,
            'pages_total': int,
            'types_with_errors': List[str]
        }

        self.attribute_map = {
            'links': '_links',
            'data': 'data',
            'items_total': 'itemsTotal',
            'pages_total': 'pagesTotal',
            'types_with_errors': 'typesWithErrors'
        }

        self._links = links
        self._data = data
        self._items_total = items_total
        self._pages_total = pages_total
        self._types_with_errors = types_with_errors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodResponse of this PaymentMethodResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PaymentMethodResponse.

        Pagination references.

        :return: The links of this PaymentMethodResponse.
        :rtype: PaginationLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentMethodResponse.

        Pagination references.

        :param links: The links of this PaymentMethodResponse.
        :type links: PaginationLinks
        """

        self._links = links

    @property
    def data(self):
        """Gets the data of this PaymentMethodResponse.

        The list of supported payment methods and their details.

        :return: The data of this PaymentMethodResponse.
        :rtype: List[PaymentMethod]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PaymentMethodResponse.

        The list of supported payment methods and their details.

        :param data: The data of this PaymentMethodResponse.
        :type data: List[PaymentMethod]
        """

        self._data = data

    @property
    def items_total(self):
        """Gets the items_total of this PaymentMethodResponse.

        Total number of items.

        :return: The items_total of this PaymentMethodResponse.
        :rtype: int
        """
        return self._items_total

    @items_total.setter
    def items_total(self, items_total):
        """Sets the items_total of this PaymentMethodResponse.

        Total number of items.

        :param items_total: The items_total of this PaymentMethodResponse.
        :type items_total: int
        """
        if items_total is None:
            raise ValueError("Invalid value for `items_total`, must not be `None`")

        self._items_total = items_total

    @property
    def pages_total(self):
        """Gets the pages_total of this PaymentMethodResponse.

        Total number of pages.

        :return: The pages_total of this PaymentMethodResponse.
        :rtype: int
        """
        return self._pages_total

    @pages_total.setter
    def pages_total(self, pages_total):
        """Sets the pages_total of this PaymentMethodResponse.

        Total number of pages.

        :param pages_total: The pages_total of this PaymentMethodResponse.
        :type pages_total: int
        """
        if pages_total is None:
            raise ValueError("Invalid value for `pages_total`, must not be `None`")

        self._pages_total = pages_total

    @property
    def types_with_errors(self):
        """Gets the types_with_errors of this PaymentMethodResponse.

        Payment method types with errors.

        :return: The types_with_errors of this PaymentMethodResponse.
        :rtype: List[str]
        """
        return self._types_with_errors

    @types_with_errors.setter
    def types_with_errors(self, types_with_errors):
        """Sets the types_with_errors of this PaymentMethodResponse.

        Payment method types with errors.

        :param types_with_errors: The types_with_errors of this PaymentMethodResponse.
        :type types_with_errors: List[str]
        """
        allowed_values = ["afterpaytouch", "alipay", "alipay_hk", "amex", "applepay", "bcmc", "blik", "cartebancaire", "clearpay", "cup", "diners", "directdebit_GB", "discover", "ebanking_FI", "eftpos_australia", "elo", "elocredit", "elodebit", "girocard", "googlepay", "hiper", "hipercard", "ideal", "interac_card", "jcb", "klarna", "klarna_account", "klarna_paynow", "maestro", "mbway", "mc", "mcdebit", "mealVoucher_FR", "mobilepay", "multibanco", "onlineBanking_PL", "paybybank", "paypal", "payshop", "swish", "trustly", "twint", "twint_pos", "vipps", "visa", "visadebit", "vpay", "wechatpay", "wechatpay_pos"]  # noqa: E501
        if not set(types_with_errors).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types_with_errors` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types_with_errors) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types_with_errors = types_with_errors
