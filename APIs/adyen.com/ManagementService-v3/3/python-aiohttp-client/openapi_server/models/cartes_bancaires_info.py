# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_description_info import TransactionDescriptionInfo
from openapi_server import util


class CartesBancairesInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, siret: str=None, transaction_description: TransactionDescriptionInfo=None):
        """CartesBancairesInfo - a model defined in OpenAPI

        :param siret: The siret of this CartesBancairesInfo.
        :param transaction_description: The transaction_description of this CartesBancairesInfo.
        """
        self.openapi_types = {
            'siret': str,
            'transaction_description': TransactionDescriptionInfo
        }

        self.attribute_map = {
            'siret': 'siret',
            'transaction_description': 'transactionDescription'
        }

        self._siret = siret
        self._transaction_description = transaction_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CartesBancairesInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CartesBancairesInfo of this CartesBancairesInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def siret(self):
        """Gets the siret of this CartesBancairesInfo.

        Cartes Bancaires SIRET. Format: 14 digits.

        :return: The siret of this CartesBancairesInfo.
        :rtype: str
        """
        return self._siret

    @siret.setter
    def siret(self, siret):
        """Sets the siret of this CartesBancairesInfo.

        Cartes Bancaires SIRET. Format: 14 digits.

        :param siret: The siret of this CartesBancairesInfo.
        :type siret: str
        """
        if siret is None:
            raise ValueError("Invalid value for `siret`, must not be `None`")

        self._siret = siret

    @property
    def transaction_description(self):
        """Gets the transaction_description of this CartesBancairesInfo.

        Information regarding the transaction description.

        :return: The transaction_description of this CartesBancairesInfo.
        :rtype: TransactionDescriptionInfo
        """
        return self._transaction_description

    @transaction_description.setter
    def transaction_description(self, transaction_description):
        """Sets the transaction_description of this CartesBancairesInfo.

        Information regarding the transaction description.

        :param transaction_description: The transaction_description of this CartesBancairesInfo.
        :type transaction_description: TransactionDescriptionInfo
        """

        self._transaction_description = transaction_description
