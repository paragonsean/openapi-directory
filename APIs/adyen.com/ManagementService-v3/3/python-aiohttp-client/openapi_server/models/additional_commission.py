# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalCommission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, fixed_amount: int=None, variable_percentage: int=None):
        """AdditionalCommission - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this AdditionalCommission.
        :param fixed_amount: The fixed_amount of this AdditionalCommission.
        :param variable_percentage: The variable_percentage of this AdditionalCommission.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'fixed_amount': int,
            'variable_percentage': int
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'fixed_amount': 'fixedAmount',
            'variable_percentage': 'variablePercentage'
        }

        self._balance_account_id = balance_account_id
        self._fixed_amount = fixed_amount
        self._variable_percentage = variable_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalCommission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalCommission of this AdditionalCommission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this AdditionalCommission.

        Unique identifier of the balance account to which the additional commission is booked.

        :return: The balance_account_id of this AdditionalCommission.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this AdditionalCommission.

        Unique identifier of the balance account to which the additional commission is booked.

        :param balance_account_id: The balance_account_id of this AdditionalCommission.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def fixed_amount(self):
        """Gets the fixed_amount of this AdditionalCommission.

        A fixed commission fee, in minor units.

        :return: The fixed_amount of this AdditionalCommission.
        :rtype: int
        """
        return self._fixed_amount

    @fixed_amount.setter
    def fixed_amount(self, fixed_amount):
        """Sets the fixed_amount of this AdditionalCommission.

        A fixed commission fee, in minor units.

        :param fixed_amount: The fixed_amount of this AdditionalCommission.
        :type fixed_amount: int
        """

        self._fixed_amount = fixed_amount

    @property
    def variable_percentage(self):
        """Gets the variable_percentage of this AdditionalCommission.

        A variable commission fee, in basis points.

        :return: The variable_percentage of this AdditionalCommission.
        :rtype: int
        """
        return self._variable_percentage

    @variable_percentage.setter
    def variable_percentage(self, variable_percentage):
        """Sets the variable_percentage of this AdditionalCommission.

        A variable commission fee, in basis points.

        :param variable_percentage: The variable_percentage of this AdditionalCommission.
        :type variable_percentage: int
        """

        self._variable_percentage = variable_percentage
