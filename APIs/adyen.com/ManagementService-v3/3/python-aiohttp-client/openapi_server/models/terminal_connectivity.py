# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.terminal_connectivity_bluetooth import TerminalConnectivityBluetooth
from openapi_server.models.terminal_connectivity_cellular import TerminalConnectivityCellular
from openapi_server.models.terminal_connectivity_ethernet import TerminalConnectivityEthernet
from openapi_server.models.terminal_connectivity_wifi import TerminalConnectivityWifi
from openapi_server import util


class TerminalConnectivity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bluetooth: TerminalConnectivityBluetooth=None, cellular: TerminalConnectivityCellular=None, ethernet: TerminalConnectivityEthernet=None, wifi: TerminalConnectivityWifi=None):
        """TerminalConnectivity - a model defined in OpenAPI

        :param bluetooth: The bluetooth of this TerminalConnectivity.
        :param cellular: The cellular of this TerminalConnectivity.
        :param ethernet: The ethernet of this TerminalConnectivity.
        :param wifi: The wifi of this TerminalConnectivity.
        """
        self.openapi_types = {
            'bluetooth': TerminalConnectivityBluetooth,
            'cellular': TerminalConnectivityCellular,
            'ethernet': TerminalConnectivityEthernet,
            'wifi': TerminalConnectivityWifi
        }

        self.attribute_map = {
            'bluetooth': 'bluetooth',
            'cellular': 'cellular',
            'ethernet': 'ethernet',
            'wifi': 'wifi'
        }

        self._bluetooth = bluetooth
        self._cellular = cellular
        self._ethernet = ethernet
        self._wifi = wifi

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminalConnectivity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminalConnectivity of this TerminalConnectivity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bluetooth(self):
        """Gets the bluetooth of this TerminalConnectivity.


        :return: The bluetooth of this TerminalConnectivity.
        :rtype: TerminalConnectivityBluetooth
        """
        return self._bluetooth

    @bluetooth.setter
    def bluetooth(self, bluetooth):
        """Sets the bluetooth of this TerminalConnectivity.


        :param bluetooth: The bluetooth of this TerminalConnectivity.
        :type bluetooth: TerminalConnectivityBluetooth
        """

        self._bluetooth = bluetooth

    @property
    def cellular(self):
        """Gets the cellular of this TerminalConnectivity.


        :return: The cellular of this TerminalConnectivity.
        :rtype: TerminalConnectivityCellular
        """
        return self._cellular

    @cellular.setter
    def cellular(self, cellular):
        """Sets the cellular of this TerminalConnectivity.


        :param cellular: The cellular of this TerminalConnectivity.
        :type cellular: TerminalConnectivityCellular
        """

        self._cellular = cellular

    @property
    def ethernet(self):
        """Gets the ethernet of this TerminalConnectivity.


        :return: The ethernet of this TerminalConnectivity.
        :rtype: TerminalConnectivityEthernet
        """
        return self._ethernet

    @ethernet.setter
    def ethernet(self, ethernet):
        """Sets the ethernet of this TerminalConnectivity.


        :param ethernet: The ethernet of this TerminalConnectivity.
        :type ethernet: TerminalConnectivityEthernet
        """

        self._ethernet = ethernet

    @property
    def wifi(self):
        """Gets the wifi of this TerminalConnectivity.


        :return: The wifi of this TerminalConnectivity.
        :rtype: TerminalConnectivityWifi
        """
        return self._wifi

    @wifi.setter
    def wifi(self, wifi):
        """Sets the wifi of this TerminalConnectivity.


        :param wifi: The wifi of this TerminalConnectivity.
        :type wifi: TerminalConnectivityWifi
        """

        self._wifi = wifi
