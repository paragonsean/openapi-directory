# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateMerchantRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_line_id: str=None, company_id: str=None, description: str=None, legal_entity_id: str=None, pricing_plan: str=None, reference: str=None, sales_channels: List[str]=None):
        """CreateMerchantRequest - a model defined in OpenAPI

        :param business_line_id: The business_line_id of this CreateMerchantRequest.
        :param company_id: The company_id of this CreateMerchantRequest.
        :param description: The description of this CreateMerchantRequest.
        :param legal_entity_id: The legal_entity_id of this CreateMerchantRequest.
        :param pricing_plan: The pricing_plan of this CreateMerchantRequest.
        :param reference: The reference of this CreateMerchantRequest.
        :param sales_channels: The sales_channels of this CreateMerchantRequest.
        """
        self.openapi_types = {
            'business_line_id': str,
            'company_id': str,
            'description': str,
            'legal_entity_id': str,
            'pricing_plan': str,
            'reference': str,
            'sales_channels': List[str]
        }

        self.attribute_map = {
            'business_line_id': 'businessLineId',
            'company_id': 'companyId',
            'description': 'description',
            'legal_entity_id': 'legalEntityId',
            'pricing_plan': 'pricingPlan',
            'reference': 'reference',
            'sales_channels': 'salesChannels'
        }

        self._business_line_id = business_line_id
        self._company_id = company_id
        self._description = description
        self._legal_entity_id = legal_entity_id
        self._pricing_plan = pricing_plan
        self._reference = reference
        self._sales_channels = sales_channels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateMerchantRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateMerchantRequest of this CreateMerchantRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_line_id(self):
        """Gets the business_line_id of this CreateMerchantRequest.

        The unique identifier of the [business line](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines). Required for an Adyen for Platforms Manage integration.

        :return: The business_line_id of this CreateMerchantRequest.
        :rtype: str
        """
        return self._business_line_id

    @business_line_id.setter
    def business_line_id(self, business_line_id):
        """Sets the business_line_id of this CreateMerchantRequest.

        The unique identifier of the [business line](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines). Required for an Adyen for Platforms Manage integration.

        :param business_line_id: The business_line_id of this CreateMerchantRequest.
        :type business_line_id: str
        """

        self._business_line_id = business_line_id

    @property
    def company_id(self):
        """Gets the company_id of this CreateMerchantRequest.

        The unique identifier of the company account.

        :return: The company_id of this CreateMerchantRequest.
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this CreateMerchantRequest.

        The unique identifier of the company account.

        :param company_id: The company_id of this CreateMerchantRequest.
        :type company_id: str
        """
        if company_id is None:
            raise ValueError("Invalid value for `company_id`, must not be `None`")

        self._company_id = company_id

    @property
    def description(self):
        """Gets the description of this CreateMerchantRequest.

        Your description for the merchant account, maximum 300 characters.

        :return: The description of this CreateMerchantRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateMerchantRequest.

        Your description for the merchant account, maximum 300 characters.

        :param description: The description of this CreateMerchantRequest.
        :type description: str
        """
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this CreateMerchantRequest.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities). Required for an Adyen for Platforms Manage integration.

        :return: The legal_entity_id of this CreateMerchantRequest.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this CreateMerchantRequest.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/legalEntities). Required for an Adyen for Platforms Manage integration.

        :param legal_entity_id: The legal_entity_id of this CreateMerchantRequest.
        :type legal_entity_id: str
        """

        self._legal_entity_id = legal_entity_id

    @property
    def pricing_plan(self):
        """Gets the pricing_plan of this CreateMerchantRequest.

        Sets the pricing plan for the merchant account. Required for an Adyen for Platforms Manage integration. Your Adyen contact will provide the values that you can use.

        :return: The pricing_plan of this CreateMerchantRequest.
        :rtype: str
        """
        return self._pricing_plan

    @pricing_plan.setter
    def pricing_plan(self, pricing_plan):
        """Sets the pricing_plan of this CreateMerchantRequest.

        Sets the pricing plan for the merchant account. Required for an Adyen for Platforms Manage integration. Your Adyen contact will provide the values that you can use.

        :param pricing_plan: The pricing_plan of this CreateMerchantRequest.
        :type pricing_plan: str
        """

        self._pricing_plan = pricing_plan

    @property
    def reference(self):
        """Gets the reference of this CreateMerchantRequest.

        Your reference for the merchant account. To make this reference the unique identifier of the merchant account, your Adyen contact can set up a template on your company account. The template can have 6 to 255 characters with upper- and lower-case letters, underscores, and numbers. When your company account has a template, then the `reference` is required and must be unique within the company account.

        :return: The reference of this CreateMerchantRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateMerchantRequest.

        Your reference for the merchant account. To make this reference the unique identifier of the merchant account, your Adyen contact can set up a template on your company account. The template can have 6 to 255 characters with upper- and lower-case letters, underscores, and numbers. When your company account has a template, then the `reference` is required and must be unique within the company account.

        :param reference: The reference of this CreateMerchantRequest.
        :type reference: str
        """

        self._reference = reference

    @property
    def sales_channels(self):
        """Gets the sales_channels of this CreateMerchantRequest.

        List of sales channels that the merchant will process payments with

        :return: The sales_channels of this CreateMerchantRequest.
        :rtype: List[str]
        """
        return self._sales_channels

    @sales_channels.setter
    def sales_channels(self, sales_channels):
        """Sets the sales_channels of this CreateMerchantRequest.

        List of sales channels that the merchant will process payments with

        :param sales_channels: The sales_channels of this CreateMerchantRequest.
        :type sales_channels: List[str]
        """

        self._sales_channels = sales_channels
