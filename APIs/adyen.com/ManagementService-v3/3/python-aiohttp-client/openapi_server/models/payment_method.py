# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.afterpay_touch_info import AfterpayTouchInfo
from openapi_server.models.apple_pay_info import ApplePayInfo
from openapi_server.models.bcmc_info import BcmcInfo
from openapi_server.models.cartes_bancaires_info import CartesBancairesInfo
from openapi_server.models.clearpay_info import ClearpayInfo
from openapi_server.models.generic_pm_with_tdi_info import GenericPmWithTdiInfo
from openapi_server.models.giro_pay_info import GiroPayInfo
from openapi_server.models.google_pay_info import GooglePayInfo
from openapi_server.models.klarna_info import KlarnaInfo
from openapi_server.models.meal_voucher_fr_info import MealVoucherFRInfo
from openapi_server.models.pay_pal_info import PayPalInfo
from openapi_server.models.sofort_info import SofortInfo
from openapi_server.models.swish_info import SwishInfo
from openapi_server.models.twint_info import TwintInfo
from openapi_server.models.vipps_info import VippsInfo
from openapi_server import util


class PaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, afterpay_touch: AfterpayTouchInfo=None, allowed: bool=None, apple_pay: ApplePayInfo=None, bcmc: BcmcInfo=None, business_line_id: str=None, cartes_bancaires: CartesBancairesInfo=None, clearpay: ClearpayInfo=None, countries: List[str]=None, cup: GenericPmWithTdiInfo=None, currencies: List[str]=None, custom_routing_flags: List[str]=None, diners: GenericPmWithTdiInfo=None, discover: GenericPmWithTdiInfo=None, eftpos_australia: GenericPmWithTdiInfo=None, enabled: bool=None, giro_pay: GiroPayInfo=None, girocard: GenericPmWithTdiInfo=None, google_pay: GooglePayInfo=None, id: str=None, ideal: GenericPmWithTdiInfo=None, interac_card: GenericPmWithTdiInfo=None, jcb: GenericPmWithTdiInfo=None, klarna: KlarnaInfo=None, maestro: GenericPmWithTdiInfo=None, mc: GenericPmWithTdiInfo=None, meal_voucher_fr: MealVoucherFRInfo=None, paypal: PayPalInfo=None, reference: str=None, shopper_interaction: str=None, sofort: SofortInfo=None, store_ids: List[str]=None, swish: SwishInfo=None, twint: TwintInfo=None, type: str=None, verification_status: str=None, vipps: VippsInfo=None, visa: GenericPmWithTdiInfo=None):
        """PaymentMethod - a model defined in OpenAPI

        :param afterpay_touch: The afterpay_touch of this PaymentMethod.
        :param allowed: The allowed of this PaymentMethod.
        :param apple_pay: The apple_pay of this PaymentMethod.
        :param bcmc: The bcmc of this PaymentMethod.
        :param business_line_id: The business_line_id of this PaymentMethod.
        :param cartes_bancaires: The cartes_bancaires of this PaymentMethod.
        :param clearpay: The clearpay of this PaymentMethod.
        :param countries: The countries of this PaymentMethod.
        :param cup: The cup of this PaymentMethod.
        :param currencies: The currencies of this PaymentMethod.
        :param custom_routing_flags: The custom_routing_flags of this PaymentMethod.
        :param diners: The diners of this PaymentMethod.
        :param discover: The discover of this PaymentMethod.
        :param eftpos_australia: The eftpos_australia of this PaymentMethod.
        :param enabled: The enabled of this PaymentMethod.
        :param giro_pay: The giro_pay of this PaymentMethod.
        :param girocard: The girocard of this PaymentMethod.
        :param google_pay: The google_pay of this PaymentMethod.
        :param id: The id of this PaymentMethod.
        :param ideal: The ideal of this PaymentMethod.
        :param interac_card: The interac_card of this PaymentMethod.
        :param jcb: The jcb of this PaymentMethod.
        :param klarna: The klarna of this PaymentMethod.
        :param maestro: The maestro of this PaymentMethod.
        :param mc: The mc of this PaymentMethod.
        :param meal_voucher_fr: The meal_voucher_fr of this PaymentMethod.
        :param paypal: The paypal of this PaymentMethod.
        :param reference: The reference of this PaymentMethod.
        :param shopper_interaction: The shopper_interaction of this PaymentMethod.
        :param sofort: The sofort of this PaymentMethod.
        :param store_ids: The store_ids of this PaymentMethod.
        :param swish: The swish of this PaymentMethod.
        :param twint: The twint of this PaymentMethod.
        :param type: The type of this PaymentMethod.
        :param verification_status: The verification_status of this PaymentMethod.
        :param vipps: The vipps of this PaymentMethod.
        :param visa: The visa of this PaymentMethod.
        """
        self.openapi_types = {
            'afterpay_touch': AfterpayTouchInfo,
            'allowed': bool,
            'apple_pay': ApplePayInfo,
            'bcmc': BcmcInfo,
            'business_line_id': str,
            'cartes_bancaires': CartesBancairesInfo,
            'clearpay': ClearpayInfo,
            'countries': List[str],
            'cup': GenericPmWithTdiInfo,
            'currencies': List[str],
            'custom_routing_flags': List[str],
            'diners': GenericPmWithTdiInfo,
            'discover': GenericPmWithTdiInfo,
            'eftpos_australia': GenericPmWithTdiInfo,
            'enabled': bool,
            'giro_pay': GiroPayInfo,
            'girocard': GenericPmWithTdiInfo,
            'google_pay': GooglePayInfo,
            'id': str,
            'ideal': GenericPmWithTdiInfo,
            'interac_card': GenericPmWithTdiInfo,
            'jcb': GenericPmWithTdiInfo,
            'klarna': KlarnaInfo,
            'maestro': GenericPmWithTdiInfo,
            'mc': GenericPmWithTdiInfo,
            'meal_voucher_fr': MealVoucherFRInfo,
            'paypal': PayPalInfo,
            'reference': str,
            'shopper_interaction': str,
            'sofort': SofortInfo,
            'store_ids': List[str],
            'swish': SwishInfo,
            'twint': TwintInfo,
            'type': str,
            'verification_status': str,
            'vipps': VippsInfo,
            'visa': GenericPmWithTdiInfo
        }

        self.attribute_map = {
            'afterpay_touch': 'afterpayTouch',
            'allowed': 'allowed',
            'apple_pay': 'applePay',
            'bcmc': 'bcmc',
            'business_line_id': 'businessLineId',
            'cartes_bancaires': 'cartesBancaires',
            'clearpay': 'clearpay',
            'countries': 'countries',
            'cup': 'cup',
            'currencies': 'currencies',
            'custom_routing_flags': 'customRoutingFlags',
            'diners': 'diners',
            'discover': 'discover',
            'eftpos_australia': 'eftpos_australia',
            'enabled': 'enabled',
            'giro_pay': 'giroPay',
            'girocard': 'girocard',
            'google_pay': 'googlePay',
            'id': 'id',
            'ideal': 'ideal',
            'interac_card': 'interac_card',
            'jcb': 'jcb',
            'klarna': 'klarna',
            'maestro': 'maestro',
            'mc': 'mc',
            'meal_voucher_fr': 'mealVoucher_FR',
            'paypal': 'paypal',
            'reference': 'reference',
            'shopper_interaction': 'shopperInteraction',
            'sofort': 'sofort',
            'store_ids': 'storeIds',
            'swish': 'swish',
            'twint': 'twint',
            'type': 'type',
            'verification_status': 'verificationStatus',
            'vipps': 'vipps',
            'visa': 'visa'
        }

        self._afterpay_touch = afterpay_touch
        self._allowed = allowed
        self._apple_pay = apple_pay
        self._bcmc = bcmc
        self._business_line_id = business_line_id
        self._cartes_bancaires = cartes_bancaires
        self._clearpay = clearpay
        self._countries = countries
        self._cup = cup
        self._currencies = currencies
        self._custom_routing_flags = custom_routing_flags
        self._diners = diners
        self._discover = discover
        self._eftpos_australia = eftpos_australia
        self._enabled = enabled
        self._giro_pay = giro_pay
        self._girocard = girocard
        self._google_pay = google_pay
        self._id = id
        self._ideal = ideal
        self._interac_card = interac_card
        self._jcb = jcb
        self._klarna = klarna
        self._maestro = maestro
        self._mc = mc
        self._meal_voucher_fr = meal_voucher_fr
        self._paypal = paypal
        self._reference = reference
        self._shopper_interaction = shopper_interaction
        self._sofort = sofort
        self._store_ids = store_ids
        self._swish = swish
        self._twint = twint
        self._type = type
        self._verification_status = verification_status
        self._vipps = vipps
        self._visa = visa

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethod of this PaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def afterpay_touch(self):
        """Gets the afterpay_touch of this PaymentMethod.

        Afterpay Touch details.

        :return: The afterpay_touch of this PaymentMethod.
        :rtype: AfterpayTouchInfo
        """
        return self._afterpay_touch

    @afterpay_touch.setter
    def afterpay_touch(self, afterpay_touch):
        """Sets the afterpay_touch of this PaymentMethod.

        Afterpay Touch details.

        :param afterpay_touch: The afterpay_touch of this PaymentMethod.
        :type afterpay_touch: AfterpayTouchInfo
        """

        self._afterpay_touch = afterpay_touch

    @property
    def allowed(self):
        """Gets the allowed of this PaymentMethod.

        Indicates whether receiving payments is allowed. This value is set to **true** by Adyen after screening your merchant account.

        :return: The allowed of this PaymentMethod.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this PaymentMethod.

        Indicates whether receiving payments is allowed. This value is set to **true** by Adyen after screening your merchant account.

        :param allowed: The allowed of this PaymentMethod.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def apple_pay(self):
        """Gets the apple_pay of this PaymentMethod.

        Apple Pay details.

        :return: The apple_pay of this PaymentMethod.
        :rtype: ApplePayInfo
        """
        return self._apple_pay

    @apple_pay.setter
    def apple_pay(self, apple_pay):
        """Sets the apple_pay of this PaymentMethod.

        Apple Pay details.

        :param apple_pay: The apple_pay of this PaymentMethod.
        :type apple_pay: ApplePayInfo
        """

        self._apple_pay = apple_pay

    @property
    def bcmc(self):
        """Gets the bcmc of this PaymentMethod.

        Bancontact details.

        :return: The bcmc of this PaymentMethod.
        :rtype: BcmcInfo
        """
        return self._bcmc

    @bcmc.setter
    def bcmc(self, bcmc):
        """Sets the bcmc of this PaymentMethod.

        Bancontact details.

        :param bcmc: The bcmc of this PaymentMethod.
        :type bcmc: BcmcInfo
        """

        self._bcmc = bcmc

    @property
    def business_line_id(self):
        """Gets the business_line_id of this PaymentMethod.

        The unique identifier of the business line. Required if you have a [platform setup](https://docs.adyen.com/marketplaces-and-platforms/platform-structure-resources/platform-setup/).

        :return: The business_line_id of this PaymentMethod.
        :rtype: str
        """
        return self._business_line_id

    @business_line_id.setter
    def business_line_id(self, business_line_id):
        """Sets the business_line_id of this PaymentMethod.

        The unique identifier of the business line. Required if you have a [platform setup](https://docs.adyen.com/marketplaces-and-platforms/platform-structure-resources/platform-setup/).

        :param business_line_id: The business_line_id of this PaymentMethod.
        :type business_line_id: str
        """

        self._business_line_id = business_line_id

    @property
    def cartes_bancaires(self):
        """Gets the cartes_bancaires of this PaymentMethod.

        Cartes Bancaires details.

        :return: The cartes_bancaires of this PaymentMethod.
        :rtype: CartesBancairesInfo
        """
        return self._cartes_bancaires

    @cartes_bancaires.setter
    def cartes_bancaires(self, cartes_bancaires):
        """Sets the cartes_bancaires of this PaymentMethod.

        Cartes Bancaires details.

        :param cartes_bancaires: The cartes_bancaires of this PaymentMethod.
        :type cartes_bancaires: CartesBancairesInfo
        """

        self._cartes_bancaires = cartes_bancaires

    @property
    def clearpay(self):
        """Gets the clearpay of this PaymentMethod.

        Clearpay details.

        :return: The clearpay of this PaymentMethod.
        :rtype: ClearpayInfo
        """
        return self._clearpay

    @clearpay.setter
    def clearpay(self, clearpay):
        """Sets the clearpay of this PaymentMethod.

        Clearpay details.

        :param clearpay: The clearpay of this PaymentMethod.
        :type clearpay: ClearpayInfo
        """

        self._clearpay = clearpay

    @property
    def countries(self):
        """Gets the countries of this PaymentMethod.

        The list of countries where a payment method is available. By default, all countries supported by the payment method.

        :return: The countries of this PaymentMethod.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this PaymentMethod.

        The list of countries where a payment method is available. By default, all countries supported by the payment method.

        :param countries: The countries of this PaymentMethod.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def cup(self):
        """Gets the cup of this PaymentMethod.

        China Union Pay details.

        :return: The cup of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._cup

    @cup.setter
    def cup(self, cup):
        """Sets the cup of this PaymentMethod.

        China Union Pay details.

        :param cup: The cup of this PaymentMethod.
        :type cup: GenericPmWithTdiInfo
        """

        self._cup = cup

    @property
    def currencies(self):
        """Gets the currencies of this PaymentMethod.

        The list of currencies that a payment method supports. By default, all currencies supported by the payment method.

        :return: The currencies of this PaymentMethod.
        :rtype: List[str]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this PaymentMethod.

        The list of currencies that a payment method supports. By default, all currencies supported by the payment method.

        :param currencies: The currencies of this PaymentMethod.
        :type currencies: List[str]
        """

        self._currencies = currencies

    @property
    def custom_routing_flags(self):
        """Gets the custom_routing_flags of this PaymentMethod.

        The list of custom routing flags to route payment to the intended acquirer.

        :return: The custom_routing_flags of this PaymentMethod.
        :rtype: List[str]
        """
        return self._custom_routing_flags

    @custom_routing_flags.setter
    def custom_routing_flags(self, custom_routing_flags):
        """Sets the custom_routing_flags of this PaymentMethod.

        The list of custom routing flags to route payment to the intended acquirer.

        :param custom_routing_flags: The custom_routing_flags of this PaymentMethod.
        :type custom_routing_flags: List[str]
        """

        self._custom_routing_flags = custom_routing_flags

    @property
    def diners(self):
        """Gets the diners of this PaymentMethod.

        Diners details.

        :return: The diners of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._diners

    @diners.setter
    def diners(self, diners):
        """Sets the diners of this PaymentMethod.

        Diners details.

        :param diners: The diners of this PaymentMethod.
        :type diners: GenericPmWithTdiInfo
        """

        self._diners = diners

    @property
    def discover(self):
        """Gets the discover of this PaymentMethod.

        Discover details.

        :return: The discover of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._discover

    @discover.setter
    def discover(self, discover):
        """Sets the discover of this PaymentMethod.

        Discover details.

        :param discover: The discover of this PaymentMethod.
        :type discover: GenericPmWithTdiInfo
        """

        self._discover = discover

    @property
    def eftpos_australia(self):
        """Gets the eftpos_australia of this PaymentMethod.

        Eftpos Australia details.

        :return: The eftpos_australia of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._eftpos_australia

    @eftpos_australia.setter
    def eftpos_australia(self, eftpos_australia):
        """Sets the eftpos_australia of this PaymentMethod.

        Eftpos Australia details.

        :param eftpos_australia: The eftpos_australia of this PaymentMethod.
        :type eftpos_australia: GenericPmWithTdiInfo
        """

        self._eftpos_australia = eftpos_australia

    @property
    def enabled(self):
        """Gets the enabled of this PaymentMethod.

        Indicates whether the payment method is enabled (**true**) or disabled (**false**).

        :return: The enabled of this PaymentMethod.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PaymentMethod.

        Indicates whether the payment method is enabled (**true**) or disabled (**false**).

        :param enabled: The enabled of this PaymentMethod.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def giro_pay(self):
        """Gets the giro_pay of this PaymentMethod.

        giropay details.

        :return: The giro_pay of this PaymentMethod.
        :rtype: GiroPayInfo
        """
        return self._giro_pay

    @giro_pay.setter
    def giro_pay(self, giro_pay):
        """Sets the giro_pay of this PaymentMethod.

        giropay details.

        :param giro_pay: The giro_pay of this PaymentMethod.
        :type giro_pay: GiroPayInfo
        """

        self._giro_pay = giro_pay

    @property
    def girocard(self):
        """Gets the girocard of this PaymentMethod.

        Girocard details.

        :return: The girocard of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._girocard

    @girocard.setter
    def girocard(self, girocard):
        """Sets the girocard of this PaymentMethod.

        Girocard details.

        :param girocard: The girocard of this PaymentMethod.
        :type girocard: GenericPmWithTdiInfo
        """

        self._girocard = girocard

    @property
    def google_pay(self):
        """Gets the google_pay of this PaymentMethod.

        Google Pay details.

        :return: The google_pay of this PaymentMethod.
        :rtype: GooglePayInfo
        """
        return self._google_pay

    @google_pay.setter
    def google_pay(self, google_pay):
        """Sets the google_pay of this PaymentMethod.

        Google Pay details.

        :param google_pay: The google_pay of this PaymentMethod.
        :type google_pay: GooglePayInfo
        """

        self._google_pay = google_pay

    @property
    def id(self):
        """Gets the id of this PaymentMethod.

        The identifier of the resource.

        :return: The id of this PaymentMethod.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethod.

        The identifier of the resource.

        :param id: The id of this PaymentMethod.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def ideal(self):
        """Gets the ideal of this PaymentMethod.

        iDeal details.

        :return: The ideal of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._ideal

    @ideal.setter
    def ideal(self, ideal):
        """Sets the ideal of this PaymentMethod.

        iDeal details.

        :param ideal: The ideal of this PaymentMethod.
        :type ideal: GenericPmWithTdiInfo
        """

        self._ideal = ideal

    @property
    def interac_card(self):
        """Gets the interac_card of this PaymentMethod.

        Interac Card details.

        :return: The interac_card of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._interac_card

    @interac_card.setter
    def interac_card(self, interac_card):
        """Sets the interac_card of this PaymentMethod.

        Interac Card details.

        :param interac_card: The interac_card of this PaymentMethod.
        :type interac_card: GenericPmWithTdiInfo
        """

        self._interac_card = interac_card

    @property
    def jcb(self):
        """Gets the jcb of this PaymentMethod.

        JCB details.

        :return: The jcb of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._jcb

    @jcb.setter
    def jcb(self, jcb):
        """Sets the jcb of this PaymentMethod.

        JCB details.

        :param jcb: The jcb of this PaymentMethod.
        :type jcb: GenericPmWithTdiInfo
        """

        self._jcb = jcb

    @property
    def klarna(self):
        """Gets the klarna of this PaymentMethod.

        Klarna details.

        :return: The klarna of this PaymentMethod.
        :rtype: KlarnaInfo
        """
        return self._klarna

    @klarna.setter
    def klarna(self, klarna):
        """Sets the klarna of this PaymentMethod.

        Klarna details.

        :param klarna: The klarna of this PaymentMethod.
        :type klarna: KlarnaInfo
        """

        self._klarna = klarna

    @property
    def maestro(self):
        """Gets the maestro of this PaymentMethod.

        Maestro details.

        :return: The maestro of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._maestro

    @maestro.setter
    def maestro(self, maestro):
        """Sets the maestro of this PaymentMethod.

        Maestro details.

        :param maestro: The maestro of this PaymentMethod.
        :type maestro: GenericPmWithTdiInfo
        """

        self._maestro = maestro

    @property
    def mc(self):
        """Gets the mc of this PaymentMethod.

        MasterCard details.

        :return: The mc of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._mc

    @mc.setter
    def mc(self, mc):
        """Sets the mc of this PaymentMethod.

        MasterCard details.

        :param mc: The mc of this PaymentMethod.
        :type mc: GenericPmWithTdiInfo
        """

        self._mc = mc

    @property
    def meal_voucher_fr(self):
        """Gets the meal_voucher_fr of this PaymentMethod.

        Meal Voucher FR details.

        :return: The meal_voucher_fr of this PaymentMethod.
        :rtype: MealVoucherFRInfo
        """
        return self._meal_voucher_fr

    @meal_voucher_fr.setter
    def meal_voucher_fr(self, meal_voucher_fr):
        """Sets the meal_voucher_fr of this PaymentMethod.

        Meal Voucher FR details.

        :param meal_voucher_fr: The meal_voucher_fr of this PaymentMethod.
        :type meal_voucher_fr: MealVoucherFRInfo
        """

        self._meal_voucher_fr = meal_voucher_fr

    @property
    def paypal(self):
        """Gets the paypal of this PaymentMethod.

        PayPal details.

        :return: The paypal of this PaymentMethod.
        :rtype: PayPalInfo
        """
        return self._paypal

    @paypal.setter
    def paypal(self, paypal):
        """Sets the paypal of this PaymentMethod.

        PayPal details.

        :param paypal: The paypal of this PaymentMethod.
        :type paypal: PayPalInfo
        """

        self._paypal = paypal

    @property
    def reference(self):
        """Gets the reference of this PaymentMethod.

        Your reference for the payment method. Supported characters a-z, A-Z, 0-9.

        :return: The reference of this PaymentMethod.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentMethod.

        Your reference for the payment method. Supported characters a-z, A-Z, 0-9.

        :param reference: The reference of this PaymentMethod.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this PaymentMethod.

        The sales channel.

        :return: The shopper_interaction of this PaymentMethod.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this PaymentMethod.

        The sales channel.

        :param shopper_interaction: The shopper_interaction of this PaymentMethod.
        :type shopper_interaction: str
        """

        self._shopper_interaction = shopper_interaction

    @property
    def sofort(self):
        """Gets the sofort of this PaymentMethod.

        Sofort details.

        :return: The sofort of this PaymentMethod.
        :rtype: SofortInfo
        """
        return self._sofort

    @sofort.setter
    def sofort(self, sofort):
        """Sets the sofort of this PaymentMethod.

        Sofort details.

        :param sofort: The sofort of this PaymentMethod.
        :type sofort: SofortInfo
        """

        self._sofort = sofort

    @property
    def store_ids(self):
        """Gets the store_ids of this PaymentMethod.

        The unique identifier of the store for which to configure the payment method, if any.

        :return: The store_ids of this PaymentMethod.
        :rtype: List[str]
        """
        return self._store_ids

    @store_ids.setter
    def store_ids(self, store_ids):
        """Sets the store_ids of this PaymentMethod.

        The unique identifier of the store for which to configure the payment method, if any.

        :param store_ids: The store_ids of this PaymentMethod.
        :type store_ids: List[str]
        """

        self._store_ids = store_ids

    @property
    def swish(self):
        """Gets the swish of this PaymentMethod.

        Swish details.

        :return: The swish of this PaymentMethod.
        :rtype: SwishInfo
        """
        return self._swish

    @swish.setter
    def swish(self, swish):
        """Sets the swish of this PaymentMethod.

        Swish details.

        :param swish: The swish of this PaymentMethod.
        :type swish: SwishInfo
        """

        self._swish = swish

    @property
    def twint(self):
        """Gets the twint of this PaymentMethod.

        Twint details.

        :return: The twint of this PaymentMethod.
        :rtype: TwintInfo
        """
        return self._twint

    @twint.setter
    def twint(self, twint):
        """Sets the twint of this PaymentMethod.

        Twint details.

        :param twint: The twint of this PaymentMethod.
        :type twint: TwintInfo
        """

        self._twint = twint

    @property
    def type(self):
        """Gets the type of this PaymentMethod.

        Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).

        :return: The type of this PaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.

        Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).

        :param type: The type of this PaymentMethod.
        :type type: str
        """

        self._type = type

    @property
    def verification_status(self):
        """Gets the verification_status of this PaymentMethod.

        Payment method status. Possible values: * **valid** * **pending** * **invalid** * **rejected**

        :return: The verification_status of this PaymentMethod.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this PaymentMethod.

        Payment method status. Possible values: * **valid** * **pending** * **invalid** * **rejected**

        :param verification_status: The verification_status of this PaymentMethod.
        :type verification_status: str
        """
        allowed_values = ["valid", "pending", "invalid", "rejected"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status

    @property
    def vipps(self):
        """Gets the vipps of this PaymentMethod.

        Vipps details.

        :return: The vipps of this PaymentMethod.
        :rtype: VippsInfo
        """
        return self._vipps

    @vipps.setter
    def vipps(self, vipps):
        """Sets the vipps of this PaymentMethod.

        Vipps details.

        :param vipps: The vipps of this PaymentMethod.
        :type vipps: VippsInfo
        """

        self._vipps = vipps

    @property
    def visa(self):
        """Gets the visa of this PaymentMethod.

        Visa details.

        :return: The visa of this PaymentMethod.
        :rtype: GenericPmWithTdiInfo
        """
        return self._visa

    @visa.setter
    def visa(self, visa):
        """Sets the visa of this PaymentMethod.

        Visa details.

        :param visa: The visa of this PaymentMethod.
        :type visa: GenericPmWithTdiInfo
        """

        self._visa = visa
