# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier: str=None, passphrase: str=None, version: int=None):
        """Key - a model defined in OpenAPI

        :param identifier: The identifier of this Key.
        :param passphrase: The passphrase of this Key.
        :param version: The version of this Key.
        """
        self.openapi_types = {
            'identifier': str,
            'passphrase': str,
            'version': int
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'passphrase': 'passphrase',
            'version': 'version'
        }

        self._identifier = identifier
        self._passphrase = passphrase
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self):
        """Gets the identifier of this Key.

        The unique identifier of the shared key.

        :return: The identifier of this Key.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Key.

        The unique identifier of the shared key.

        :param identifier: The identifier of this Key.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def passphrase(self):
        """Gets the passphrase of this Key.

        The secure passphrase to protect the shared key.

        :return: The passphrase of this Key.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this Key.

        The secure passphrase to protect the shared key.

        :param passphrase: The passphrase of this Key.
        :type passphrase: str
        """

        self._passphrase = passphrase

    @property
    def version(self):
        """Gets the version of this Key.

        The version number of the shared key.

        :return: The version of this Key.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Key.

        The version number of the shared key.

        :param version: The version of this Key.
        :type version: int
        """

        self._version = version
