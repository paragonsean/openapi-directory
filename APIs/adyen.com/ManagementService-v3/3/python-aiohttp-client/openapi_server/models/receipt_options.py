# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReceiptOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logo: str=None, prompt_before_printing: bool=None, qr_code_data: str=None):
        """ReceiptOptions - a model defined in OpenAPI

        :param logo: The logo of this ReceiptOptions.
        :param prompt_before_printing: The prompt_before_printing of this ReceiptOptions.
        :param qr_code_data: The qr_code_data of this ReceiptOptions.
        """
        self.openapi_types = {
            'logo': str,
            'prompt_before_printing': bool,
            'qr_code_data': str
        }

        self.attribute_map = {
            'logo': 'logo',
            'prompt_before_printing': 'promptBeforePrinting',
            'qr_code_data': 'qrCodeData'
        }

        self._logo = logo
        self._prompt_before_printing = prompt_before_printing
        self._qr_code_data = qr_code_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReceiptOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReceiptOptions of this ReceiptOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logo(self):
        """Gets the logo of this ReceiptOptions.

        The receipt logo converted to a Base64-encoded string. The image must be a .bmp file of < 256 KB, dimensions 240 (H) x 384 (W) px.

        :return: The logo of this ReceiptOptions.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this ReceiptOptions.

        The receipt logo converted to a Base64-encoded string. The image must be a .bmp file of < 256 KB, dimensions 240 (H) x 384 (W) px.

        :param logo: The logo of this ReceiptOptions.
        :type logo: str
        """
        if logo is not None and len(logo) > 350000:
            raise ValueError("Invalid value for `logo`, length must be less than or equal to `350000`")

        self._logo = logo

    @property
    def prompt_before_printing(self):
        """Gets the prompt_before_printing of this ReceiptOptions.

        Indicates whether a screen appears asking if you want to print the shopper receipt.

        :return: The prompt_before_printing of this ReceiptOptions.
        :rtype: bool
        """
        return self._prompt_before_printing

    @prompt_before_printing.setter
    def prompt_before_printing(self, prompt_before_printing):
        """Sets the prompt_before_printing of this ReceiptOptions.

        Indicates whether a screen appears asking if you want to print the shopper receipt.

        :param prompt_before_printing: The prompt_before_printing of this ReceiptOptions.
        :type prompt_before_printing: bool
        """

        self._prompt_before_printing = prompt_before_printing

    @property
    def qr_code_data(self):
        """Gets the qr_code_data of this ReceiptOptions.

        Data to print on the receipt as a QR code. This can include static text and the following variables:  - `${merchantreference}`: the merchant reference of the transaction. - `${pspreference}`: the PSP reference of the transaction.   For example, **http://www.example.com/order/${pspreference}/${merchantreference}**.

        :return: The qr_code_data of this ReceiptOptions.
        :rtype: str
        """
        return self._qr_code_data

    @qr_code_data.setter
    def qr_code_data(self, qr_code_data):
        """Sets the qr_code_data of this ReceiptOptions.

        Data to print on the receipt as a QR code. This can include static text and the following variables:  - `${merchantreference}`: the merchant reference of the transaction. - `${pspreference}`: the PSP reference of the transaction.   For example, **http://www.example.com/order/${pspreference}/${merchantreference}**.

        :param qr_code_data: The qr_code_data of this ReceiptOptions.
        :type qr_code_data: str
        """

        self._qr_code_data = qr_code_data
