# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schedule_terminal_actions_request_action_details import ScheduleTerminalActionsRequestActionDetails
from openapi_server.models.terminal_action_schedule_detail import TerminalActionScheduleDetail
from openapi_server import util


class ScheduleTerminalActionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_details: ScheduleTerminalActionsRequestActionDetails=None, items: List[TerminalActionScheduleDetail]=None, scheduled_at: str=None, store_id: str=None, terminals_with_errors: Dict[str, List[str]]=None, total_errors: int=None, total_scheduled: int=None):
        """ScheduleTerminalActionsResponse - a model defined in OpenAPI

        :param action_details: The action_details of this ScheduleTerminalActionsResponse.
        :param items: The items of this ScheduleTerminalActionsResponse.
        :param scheduled_at: The scheduled_at of this ScheduleTerminalActionsResponse.
        :param store_id: The store_id of this ScheduleTerminalActionsResponse.
        :param terminals_with_errors: The terminals_with_errors of this ScheduleTerminalActionsResponse.
        :param total_errors: The total_errors of this ScheduleTerminalActionsResponse.
        :param total_scheduled: The total_scheduled of this ScheduleTerminalActionsResponse.
        """
        self.openapi_types = {
            'action_details': ScheduleTerminalActionsRequestActionDetails,
            'items': List[TerminalActionScheduleDetail],
            'scheduled_at': str,
            'store_id': str,
            'terminals_with_errors': Dict[str, List[str]],
            'total_errors': int,
            'total_scheduled': int
        }

        self.attribute_map = {
            'action_details': 'actionDetails',
            'items': 'items',
            'scheduled_at': 'scheduledAt',
            'store_id': 'storeId',
            'terminals_with_errors': 'terminalsWithErrors',
            'total_errors': 'totalErrors',
            'total_scheduled': 'totalScheduled'
        }

        self._action_details = action_details
        self._items = items
        self._scheduled_at = scheduled_at
        self._store_id = store_id
        self._terminals_with_errors = terminals_with_errors
        self._total_errors = total_errors
        self._total_scheduled = total_scheduled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleTerminalActionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleTerminalActionsResponse of this ScheduleTerminalActionsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_details(self):
        """Gets the action_details of this ScheduleTerminalActionsResponse.


        :return: The action_details of this ScheduleTerminalActionsResponse.
        :rtype: ScheduleTerminalActionsRequestActionDetails
        """
        return self._action_details

    @action_details.setter
    def action_details(self, action_details):
        """Sets the action_details of this ScheduleTerminalActionsResponse.


        :param action_details: The action_details of this ScheduleTerminalActionsResponse.
        :type action_details: ScheduleTerminalActionsRequestActionDetails
        """

        self._action_details = action_details

    @property
    def items(self):
        """Gets the items of this ScheduleTerminalActionsResponse.

        A list containing a terminal ID and an action ID for each terminal that the action was scheduled for.

        :return: The items of this ScheduleTerminalActionsResponse.
        :rtype: List[TerminalActionScheduleDetail]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ScheduleTerminalActionsResponse.

        A list containing a terminal ID and an action ID for each terminal that the action was scheduled for.

        :param items: The items of this ScheduleTerminalActionsResponse.
        :type items: List[TerminalActionScheduleDetail]
        """

        self._items = items

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this ScheduleTerminalActionsResponse.

        The date and time when the action should happen.  Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00**  The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal.  An empty value causes the action to be sent as soon as possible: at the next maintenance call.

        :return: The scheduled_at of this ScheduleTerminalActionsResponse.
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this ScheduleTerminalActionsResponse.

        The date and time when the action should happen.  Format: [RFC 3339](https://www.rfc-editor.org/rfc/rfc3339), but without the **Z** before the time offset. For example, **2021-11-15T12:16:21+01:00**  The action is sent with the first [maintenance call](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api#when-actions-take-effect) after the specified date and time in the time zone of the terminal.  An empty value causes the action to be sent as soon as possible: at the next maintenance call.

        :param scheduled_at: The scheduled_at of this ScheduleTerminalActionsResponse.
        :type scheduled_at: str
        """

        self._scheduled_at = scheduled_at

    @property
    def store_id(self):
        """Gets the store_id of this ScheduleTerminalActionsResponse.

        The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store.

        :return: The store_id of this ScheduleTerminalActionsResponse.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this ScheduleTerminalActionsResponse.

        The unique ID of the [store](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores). If present, all terminals in the `terminalIds` list must be assigned to this store.

        :param store_id: The store_id of this ScheduleTerminalActionsResponse.
        :type store_id: str
        """

        self._store_id = store_id

    @property
    def terminals_with_errors(self):
        """Gets the terminals_with_errors of this ScheduleTerminalActionsResponse.

        The validation errors that occurred in the list of terminals, and for each error the IDs of the terminals that the error applies to.

        :return: The terminals_with_errors of this ScheduleTerminalActionsResponse.
        :rtype: Dict[str, List[str]]
        """
        return self._terminals_with_errors

    @terminals_with_errors.setter
    def terminals_with_errors(self, terminals_with_errors):
        """Sets the terminals_with_errors of this ScheduleTerminalActionsResponse.

        The validation errors that occurred in the list of terminals, and for each error the IDs of the terminals that the error applies to.

        :param terminals_with_errors: The terminals_with_errors of this ScheduleTerminalActionsResponse.
        :type terminals_with_errors: Dict[str, List[str]]
        """

        self._terminals_with_errors = terminals_with_errors

    @property
    def total_errors(self):
        """Gets the total_errors of this ScheduleTerminalActionsResponse.

        The number of terminals for which scheduling the action failed.

        :return: The total_errors of this ScheduleTerminalActionsResponse.
        :rtype: int
        """
        return self._total_errors

    @total_errors.setter
    def total_errors(self, total_errors):
        """Sets the total_errors of this ScheduleTerminalActionsResponse.

        The number of terminals for which scheduling the action failed.

        :param total_errors: The total_errors of this ScheduleTerminalActionsResponse.
        :type total_errors: int
        """

        self._total_errors = total_errors

    @property
    def total_scheduled(self):
        """Gets the total_scheduled of this ScheduleTerminalActionsResponse.

        The number of terminals for which the action was successfully scheduled. This doesn't mean the action has happened yet.

        :return: The total_scheduled of this ScheduleTerminalActionsResponse.
        :rtype: int
        """
        return self._total_scheduled

    @total_scheduled.setter
    def total_scheduled(self, total_scheduled):
        """Sets the total_scheduled of this ScheduleTerminalActionsResponse.

        The number of terminals for which the action was successfully scheduled. This doesn't mean the action has happened yet.

        :param total_scheduled: The total_scheduled of this ScheduleTerminalActionsResponse.
        :type total_scheduled: int
        """

        self._total_scheduled = total_scheduled
