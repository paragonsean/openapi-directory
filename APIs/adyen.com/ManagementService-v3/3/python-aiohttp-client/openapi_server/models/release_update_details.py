# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReleaseUpdateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str='ReleaseUpdate', update_at_first_maintenance_call: bool=None):
        """ReleaseUpdateDetails - a model defined in OpenAPI

        :param type: The type of this ReleaseUpdateDetails.
        :param update_at_first_maintenance_call: The update_at_first_maintenance_call of this ReleaseUpdateDetails.
        """
        self.openapi_types = {
            'type': str,
            'update_at_first_maintenance_call': bool
        }

        self.attribute_map = {
            'type': 'type',
            'update_at_first_maintenance_call': 'updateAtFirstMaintenanceCall'
        }

        self._type = type
        self._update_at_first_maintenance_call = update_at_first_maintenance_call

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReleaseUpdateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReleaseUpdateDetails of this ReleaseUpdateDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this ReleaseUpdateDetails.

        Type of terminal action: Update Release.

        :return: The type of this ReleaseUpdateDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReleaseUpdateDetails.

        Type of terminal action: Update Release.

        :param type: The type of this ReleaseUpdateDetails.
        :type type: str
        """
        allowed_values = ["ReleaseUpdate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def update_at_first_maintenance_call(self):
        """Gets the update_at_first_maintenance_call of this ReleaseUpdateDetails.

        Boolean flag that tells if the terminal should update at the first next maintenance call. If false, terminal will update on its configured reboot time.

        :return: The update_at_first_maintenance_call of this ReleaseUpdateDetails.
        :rtype: bool
        """
        return self._update_at_first_maintenance_call

    @update_at_first_maintenance_call.setter
    def update_at_first_maintenance_call(self, update_at_first_maintenance_call):
        """Sets the update_at_first_maintenance_call of this ReleaseUpdateDetails.

        Boolean flag that tells if the terminal should update at the first next maintenance call. If false, terminal will update on its configured reboot time.

        :param update_at_first_maintenance_call: The update_at_first_maintenance_call of this ReleaseUpdateDetails.
        :type update_at_first_maintenance_call: bool
        """

        self._update_at_first_maintenance_call = update_at_first_maintenance_call
