# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_split_configuration import StoreSplitConfiguration
from openapi_server.models.updatable_address import UpdatableAddress
from openapi_server import util


class UpdateStoreRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: UpdatableAddress=None, business_line_ids: List[str]=None, description: str=None, external_reference_id: str=None, phone_number: str=None, split_configuration: StoreSplitConfiguration=None, status: str=None):
        """UpdateStoreRequest - a model defined in OpenAPI

        :param address: The address of this UpdateStoreRequest.
        :param business_line_ids: The business_line_ids of this UpdateStoreRequest.
        :param description: The description of this UpdateStoreRequest.
        :param external_reference_id: The external_reference_id of this UpdateStoreRequest.
        :param phone_number: The phone_number of this UpdateStoreRequest.
        :param split_configuration: The split_configuration of this UpdateStoreRequest.
        :param status: The status of this UpdateStoreRequest.
        """
        self.openapi_types = {
            'address': UpdatableAddress,
            'business_line_ids': List[str],
            'description': str,
            'external_reference_id': str,
            'phone_number': str,
            'split_configuration': StoreSplitConfiguration,
            'status': str
        }

        self.attribute_map = {
            'address': 'address',
            'business_line_ids': 'businessLineIds',
            'description': 'description',
            'external_reference_id': 'externalReferenceId',
            'phone_number': 'phoneNumber',
            'split_configuration': 'splitConfiguration',
            'status': 'status'
        }

        self._address = address
        self._business_line_ids = business_line_ids
        self._description = description
        self._external_reference_id = external_reference_id
        self._phone_number = phone_number
        self._split_configuration = split_configuration
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateStoreRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateStoreRequest of this UpdateStoreRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this UpdateStoreRequest.

        The address of the store. It is not possible to update the country of the store.

        :return: The address of this UpdateStoreRequest.
        :rtype: UpdatableAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UpdateStoreRequest.

        The address of the store. It is not possible to update the country of the store.

        :param address: The address of this UpdateStoreRequest.
        :type address: UpdatableAddress
        """

        self._address = address

    @property
    def business_line_ids(self):
        """Gets the business_line_ids of this UpdateStoreRequest.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__resParam_id) that the store is associated with.

        :return: The business_line_ids of this UpdateStoreRequest.
        :rtype: List[str]
        """
        return self._business_line_ids

    @business_line_ids.setter
    def business_line_ids(self, business_line_ids):
        """Sets the business_line_ids of this UpdateStoreRequest.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businessLines__resParam_id) that the store is associated with.

        :param business_line_ids: The business_line_ids of this UpdateStoreRequest.
        :type business_line_ids: List[str]
        """

        self._business_line_ids = business_line_ids

    @property
    def description(self):
        """Gets the description of this UpdateStoreRequest.

        The description of the store.

        :return: The description of this UpdateStoreRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateStoreRequest.

        The description of the store.

        :param description: The description of this UpdateStoreRequest.
        :type description: str
        """

        self._description = description

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this UpdateStoreRequest.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :return: The external_reference_id of this UpdateStoreRequest.
        :rtype: str
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this UpdateStoreRequest.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :param external_reference_id: The external_reference_id of this UpdateStoreRequest.
        :type external_reference_id: str
        """

        self._external_reference_id = external_reference_id

    @property
    def phone_number(self):
        """Gets the phone_number of this UpdateStoreRequest.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :return: The phone_number of this UpdateStoreRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this UpdateStoreRequest.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :param phone_number: The phone_number of this UpdateStoreRequest.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def split_configuration(self):
        """Gets the split_configuration of this UpdateStoreRequest.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :return: The split_configuration of this UpdateStoreRequest.
        :rtype: StoreSplitConfiguration
        """
        return self._split_configuration

    @split_configuration.setter
    def split_configuration(self, split_configuration):
        """Sets the split_configuration of this UpdateStoreRequest.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :param split_configuration: The split_configuration of this UpdateStoreRequest.
        :type split_configuration: StoreSplitConfiguration
        """

        self._split_configuration = split_configuration

    @property
    def status(self):
        """Gets the status of this UpdateStoreRequest.

        The status of the store. Possible values are:  - **active**: This value is assigned automatically when a store is created.  - **inactive**: The maximum [transaction limits and number of Store-and-Forward transactions](https://docs.adyen.com/point-of-sale/determine-account-structure/configure-features#payment-features) for the store are set to 0. This blocks new transactions, but captures are still possible. - **closed**: The terminals of the store are reassigned to the merchant inventory, so they can't process payments.  You can change the status from **active** to **inactive**, and from **inactive** to **active** or **closed**.  Once **closed**, a store can't be reopened.

        :return: The status of this UpdateStoreRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateStoreRequest.

        The status of the store. Possible values are:  - **active**: This value is assigned automatically when a store is created.  - **inactive**: The maximum [transaction limits and number of Store-and-Forward transactions](https://docs.adyen.com/point-of-sale/determine-account-structure/configure-features#payment-features) for the store are set to 0. This blocks new transactions, but captures are still possible. - **closed**: The terminals of the store are reassigned to the merchant inventory, so they can't process payments.  You can change the status from **active** to **inactive**, and from **inactive** to **active** or **closed**.  Once **closed**, a store can't be reopened.

        :param status: The status of this UpdateStoreRequest.
        :type status: str
        """
        allowed_values = ["active", "closed", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
