# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server import util


class AllowedOrigin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Links=None, domain: str=None, id: str=None):
        """AllowedOrigin - a model defined in OpenAPI

        :param links: The links of this AllowedOrigin.
        :param domain: The domain of this AllowedOrigin.
        :param id: The id of this AllowedOrigin.
        """
        self.openapi_types = {
            'links': Links,
            'domain': str,
            'id': str
        }

        self.attribute_map = {
            'links': '_links',
            'domain': 'domain',
            'id': 'id'
        }

        self._links = links
        self._domain = domain
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowedOrigin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowedOrigin of this AllowedOrigin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AllowedOrigin.

        References to resources linked to the allowed origin.

        :return: The links of this AllowedOrigin.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AllowedOrigin.

        References to resources linked to the allowed origin.

        :param links: The links of this AllowedOrigin.
        :type links: Links
        """

        self._links = links

    @property
    def domain(self):
        """Gets the domain of this AllowedOrigin.

        Domain of the allowed origin.

        :return: The domain of this AllowedOrigin.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AllowedOrigin.

        Domain of the allowed origin.

        :param domain: The domain of this AllowedOrigin.
        :type domain: str
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")

        self._domain = domain

    @property
    def id(self):
        """Gets the id of this AllowedOrigin.

        Unique identifier of the allowed origin.

        :return: The id of this AllowedOrigin.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AllowedOrigin.

        Unique identifier of the allowed origin.

        :param id: The id of this AllowedOrigin.
        :type id: str
        """

        self._id = id
