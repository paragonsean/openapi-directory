# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invalid_field import InvalidField
from openapi_server import util


class RestServiceError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detail: str=None, error_code: str=None, instance: str=None, invalid_fields: List[InvalidField]=None, request_id: str=None, response: object=None, status: int=None, title: str=None, type: str=None):
        """RestServiceError - a model defined in OpenAPI

        :param detail: The detail of this RestServiceError.
        :param error_code: The error_code of this RestServiceError.
        :param instance: The instance of this RestServiceError.
        :param invalid_fields: The invalid_fields of this RestServiceError.
        :param request_id: The request_id of this RestServiceError.
        :param response: The response of this RestServiceError.
        :param status: The status of this RestServiceError.
        :param title: The title of this RestServiceError.
        :param type: The type of this RestServiceError.
        """
        self.openapi_types = {
            'detail': str,
            'error_code': str,
            'instance': str,
            'invalid_fields': List[InvalidField],
            'request_id': str,
            'response': object,
            'status': int,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'detail': 'detail',
            'error_code': 'errorCode',
            'instance': 'instance',
            'invalid_fields': 'invalidFields',
            'request_id': 'requestId',
            'response': 'response',
            'status': 'status',
            'title': 'title',
            'type': 'type'
        }

        self._detail = detail
        self._error_code = error_code
        self._instance = instance
        self._invalid_fields = invalid_fields
        self._request_id = request_id
        self._response = response
        self._status = status
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestServiceError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RestServiceError of this RestServiceError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detail(self):
        """Gets the detail of this RestServiceError.

        A human-readable explanation specific to this occurrence of the problem.

        :return: The detail of this RestServiceError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this RestServiceError.

        A human-readable explanation specific to this occurrence of the problem.

        :param detail: The detail of this RestServiceError.
        :type detail: str
        """
        if detail is None:
            raise ValueError("Invalid value for `detail`, must not be `None`")

        self._detail = detail

    @property
    def error_code(self):
        """Gets the error_code of this RestServiceError.

        A code that identifies the problem type.

        :return: The error_code of this RestServiceError.
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this RestServiceError.

        A code that identifies the problem type.

        :param error_code: The error_code of this RestServiceError.
        :type error_code: str
        """
        if error_code is None:
            raise ValueError("Invalid value for `error_code`, must not be `None`")

        self._error_code = error_code

    @property
    def instance(self):
        """Gets the instance of this RestServiceError.

        A unique URI that identifies the specific occurrence of the problem.

        :return: The instance of this RestServiceError.
        :rtype: str
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this RestServiceError.

        A unique URI that identifies the specific occurrence of the problem.

        :param instance: The instance of this RestServiceError.
        :type instance: str
        """

        self._instance = instance

    @property
    def invalid_fields(self):
        """Gets the invalid_fields of this RestServiceError.

        Detailed explanation of each validation error, when applicable.

        :return: The invalid_fields of this RestServiceError.
        :rtype: List[InvalidField]
        """
        return self._invalid_fields

    @invalid_fields.setter
    def invalid_fields(self, invalid_fields):
        """Sets the invalid_fields of this RestServiceError.

        Detailed explanation of each validation error, when applicable.

        :param invalid_fields: The invalid_fields of this RestServiceError.
        :type invalid_fields: List[InvalidField]
        """

        self._invalid_fields = invalid_fields

    @property
    def request_id(self):
        """Gets the request_id of this RestServiceError.

        A unique reference for the request, essentially the same as `pspReference`.

        :return: The request_id of this RestServiceError.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this RestServiceError.

        A unique reference for the request, essentially the same as `pspReference`.

        :param request_id: The request_id of this RestServiceError.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def response(self):
        """Gets the response of this RestServiceError.


        :return: The response of this RestServiceError.
        :rtype: object
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this RestServiceError.


        :param response: The response of this RestServiceError.
        :type response: object
        """

        self._response = response

    @property
    def status(self):
        """Gets the status of this RestServiceError.

        The HTTP status code.

        :return: The status of this RestServiceError.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RestServiceError.

        The HTTP status code.

        :param status: The status of this RestServiceError.
        :type status: int
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this RestServiceError.

        A short, human-readable summary of the problem type.

        :return: The title of this RestServiceError.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this RestServiceError.

        A short, human-readable summary of the problem type.

        :param title: The title of this RestServiceError.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this RestServiceError.

        A URI that identifies the problem type, pointing to human-readable documentation on this problem type.

        :return: The type of this RestServiceError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestServiceError.

        A URI that identifies the problem type, pointing to human-readable documentation on this problem type.

        :param type: The type of this RestServiceError.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
