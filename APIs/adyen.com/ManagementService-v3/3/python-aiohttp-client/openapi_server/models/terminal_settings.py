# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cardholder_receipt import CardholderReceipt
from openapi_server.models.connectivity import Connectivity
from openapi_server.models.gratuity import Gratuity
from openapi_server.models.hardware import Hardware
from openapi_server.models.localization import Localization
from openapi_server.models.nexo import Nexo
from openapi_server.models.offline_processing import OfflineProcessing
from openapi_server.models.opi import Opi
from openapi_server.models.passcodes import Passcodes
from openapi_server.models.pay_at_table import PayAtTable
from openapi_server.models.payment import Payment
from openapi_server.models.receipt_options import ReceiptOptions
from openapi_server.models.receipt_printing import ReceiptPrinting
from openapi_server.models.refunds import Refunds
from openapi_server.models.signature import Signature
from openapi_server.models.standalone import Standalone
from openapi_server.models.surcharge import Surcharge
from openapi_server.models.tap_to_pay import TapToPay
from openapi_server.models.terminal_instructions import TerminalInstructions
from openapi_server.models.timeouts import Timeouts
from openapi_server.models.wifi_profiles import WifiProfiles
from openapi_server import util


class TerminalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cardholder_receipt: CardholderReceipt=None, connectivity: Connectivity=None, gratuities: List[Gratuity]=None, hardware: Hardware=None, localization: Localization=None, nexo: Nexo=None, offline_processing: OfflineProcessing=None, opi: Opi=None, passcodes: Passcodes=None, pay_at_table: PayAtTable=None, payment: Payment=None, receipt_options: ReceiptOptions=None, receipt_printing: ReceiptPrinting=None, refunds: Refunds=None, signature: Signature=None, standalone: Standalone=None, surcharge: Surcharge=None, tap_to_pay: TapToPay=None, terminal_instructions: TerminalInstructions=None, timeouts: Timeouts=None, wifi_profiles: WifiProfiles=None):
        """TerminalSettings - a model defined in OpenAPI

        :param cardholder_receipt: The cardholder_receipt of this TerminalSettings.
        :param connectivity: The connectivity of this TerminalSettings.
        :param gratuities: The gratuities of this TerminalSettings.
        :param hardware: The hardware of this TerminalSettings.
        :param localization: The localization of this TerminalSettings.
        :param nexo: The nexo of this TerminalSettings.
        :param offline_processing: The offline_processing of this TerminalSettings.
        :param opi: The opi of this TerminalSettings.
        :param passcodes: The passcodes of this TerminalSettings.
        :param pay_at_table: The pay_at_table of this TerminalSettings.
        :param payment: The payment of this TerminalSettings.
        :param receipt_options: The receipt_options of this TerminalSettings.
        :param receipt_printing: The receipt_printing of this TerminalSettings.
        :param refunds: The refunds of this TerminalSettings.
        :param signature: The signature of this TerminalSettings.
        :param standalone: The standalone of this TerminalSettings.
        :param surcharge: The surcharge of this TerminalSettings.
        :param tap_to_pay: The tap_to_pay of this TerminalSettings.
        :param terminal_instructions: The terminal_instructions of this TerminalSettings.
        :param timeouts: The timeouts of this TerminalSettings.
        :param wifi_profiles: The wifi_profiles of this TerminalSettings.
        """
        self.openapi_types = {
            'cardholder_receipt': CardholderReceipt,
            'connectivity': Connectivity,
            'gratuities': List[Gratuity],
            'hardware': Hardware,
            'localization': Localization,
            'nexo': Nexo,
            'offline_processing': OfflineProcessing,
            'opi': Opi,
            'passcodes': Passcodes,
            'pay_at_table': PayAtTable,
            'payment': Payment,
            'receipt_options': ReceiptOptions,
            'receipt_printing': ReceiptPrinting,
            'refunds': Refunds,
            'signature': Signature,
            'standalone': Standalone,
            'surcharge': Surcharge,
            'tap_to_pay': TapToPay,
            'terminal_instructions': TerminalInstructions,
            'timeouts': Timeouts,
            'wifi_profiles': WifiProfiles
        }

        self.attribute_map = {
            'cardholder_receipt': 'cardholderReceipt',
            'connectivity': 'connectivity',
            'gratuities': 'gratuities',
            'hardware': 'hardware',
            'localization': 'localization',
            'nexo': 'nexo',
            'offline_processing': 'offlineProcessing',
            'opi': 'opi',
            'passcodes': 'passcodes',
            'pay_at_table': 'payAtTable',
            'payment': 'payment',
            'receipt_options': 'receiptOptions',
            'receipt_printing': 'receiptPrinting',
            'refunds': 'refunds',
            'signature': 'signature',
            'standalone': 'standalone',
            'surcharge': 'surcharge',
            'tap_to_pay': 'tapToPay',
            'terminal_instructions': 'terminalInstructions',
            'timeouts': 'timeouts',
            'wifi_profiles': 'wifiProfiles'
        }

        self._cardholder_receipt = cardholder_receipt
        self._connectivity = connectivity
        self._gratuities = gratuities
        self._hardware = hardware
        self._localization = localization
        self._nexo = nexo
        self._offline_processing = offline_processing
        self._opi = opi
        self._passcodes = passcodes
        self._pay_at_table = pay_at_table
        self._payment = payment
        self._receipt_options = receipt_options
        self._receipt_printing = receipt_printing
        self._refunds = refunds
        self._signature = signature
        self._standalone = standalone
        self._surcharge = surcharge
        self._tap_to_pay = tap_to_pay
        self._terminal_instructions = terminal_instructions
        self._timeouts = timeouts
        self._wifi_profiles = wifi_profiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TerminalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TerminalSettings of this TerminalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cardholder_receipt(self):
        """Gets the cardholder_receipt of this TerminalSettings.

        Settings to define the header of the shopper receipt.

        :return: The cardholder_receipt of this TerminalSettings.
        :rtype: CardholderReceipt
        """
        return self._cardholder_receipt

    @cardholder_receipt.setter
    def cardholder_receipt(self, cardholder_receipt):
        """Sets the cardholder_receipt of this TerminalSettings.

        Settings to define the header of the shopper receipt.

        :param cardholder_receipt: The cardholder_receipt of this TerminalSettings.
        :type cardholder_receipt: CardholderReceipt
        """

        self._cardholder_receipt = cardholder_receipt

    @property
    def connectivity(self):
        """Gets the connectivity of this TerminalSettings.

        Settings for terminal connectivity features.

        :return: The connectivity of this TerminalSettings.
        :rtype: Connectivity
        """
        return self._connectivity

    @connectivity.setter
    def connectivity(self, connectivity):
        """Sets the connectivity of this TerminalSettings.

        Settings for terminal connectivity features.

        :param connectivity: The connectivity of this TerminalSettings.
        :type connectivity: Connectivity
        """

        self._connectivity = connectivity

    @property
    def gratuities(self):
        """Gets the gratuities of this TerminalSettings.

        Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.

        :return: The gratuities of this TerminalSettings.
        :rtype: List[Gratuity]
        """
        return self._gratuities

    @gratuities.setter
    def gratuities(self, gratuities):
        """Sets the gratuities of this TerminalSettings.

        Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.

        :param gratuities: The gratuities of this TerminalSettings.
        :type gratuities: List[Gratuity]
        """

        self._gratuities = gratuities

    @property
    def hardware(self):
        """Gets the hardware of this TerminalSettings.

        Settings for terminal hardware features.

        :return: The hardware of this TerminalSettings.
        :rtype: Hardware
        """
        return self._hardware

    @hardware.setter
    def hardware(self, hardware):
        """Sets the hardware of this TerminalSettings.

        Settings for terminal hardware features.

        :param hardware: The hardware of this TerminalSettings.
        :type hardware: Hardware
        """

        self._hardware = hardware

    @property
    def localization(self):
        """Gets the localization of this TerminalSettings.

        Settings for localization.

        :return: The localization of this TerminalSettings.
        :rtype: Localization
        """
        return self._localization

    @localization.setter
    def localization(self, localization):
        """Sets the localization of this TerminalSettings.

        Settings for localization.

        :param localization: The localization of this TerminalSettings.
        :type localization: Localization
        """

        self._localization = localization

    @property
    def nexo(self):
        """Gets the nexo of this TerminalSettings.

        Settings for a Terminal API integration.

        :return: The nexo of this TerminalSettings.
        :rtype: Nexo
        """
        return self._nexo

    @nexo.setter
    def nexo(self, nexo):
        """Sets the nexo of this TerminalSettings.

        Settings for a Terminal API integration.

        :param nexo: The nexo of this TerminalSettings.
        :type nexo: Nexo
        """

        self._nexo = nexo

    @property
    def offline_processing(self):
        """Gets the offline_processing of this TerminalSettings.

        Settings for [offline payment](https://docs.adyen.com/point-of-sale/offline-payments) features.

        :return: The offline_processing of this TerminalSettings.
        :rtype: OfflineProcessing
        """
        return self._offline_processing

    @offline_processing.setter
    def offline_processing(self, offline_processing):
        """Sets the offline_processing of this TerminalSettings.

        Settings for [offline payment](https://docs.adyen.com/point-of-sale/offline-payments) features.

        :param offline_processing: The offline_processing of this TerminalSettings.
        :type offline_processing: OfflineProcessing
        """

        self._offline_processing = offline_processing

    @property
    def opi(self):
        """Gets the opi of this TerminalSettings.

        Settings for an Oracle Payment Interface (OPI) integration.

        :return: The opi of this TerminalSettings.
        :rtype: Opi
        """
        return self._opi

    @opi.setter
    def opi(self, opi):
        """Sets the opi of this TerminalSettings.

        Settings for an Oracle Payment Interface (OPI) integration.

        :param opi: The opi of this TerminalSettings.
        :type opi: Opi
        """

        self._opi = opi

    @property
    def passcodes(self):
        """Gets the passcodes of this TerminalSettings.

        Settings for [passcodes](https://docs.adyen.com/point-of-sale/managing-terminals/menu-access?tab=manage_passcodes_with_an_api_call_2#manage-passcodes) features.

        :return: The passcodes of this TerminalSettings.
        :rtype: Passcodes
        """
        return self._passcodes

    @passcodes.setter
    def passcodes(self, passcodes):
        """Sets the passcodes of this TerminalSettings.

        Settings for [passcodes](https://docs.adyen.com/point-of-sale/managing-terminals/menu-access?tab=manage_passcodes_with_an_api_call_2#manage-passcodes) features.

        :param passcodes: The passcodes of this TerminalSettings.
        :type passcodes: Passcodes
        """

        self._passcodes = passcodes

    @property
    def pay_at_table(self):
        """Gets the pay_at_table of this TerminalSettings.

        Settings for [Pay-at-table](https://docs.adyen.com/point-of-sale/pay-at-x) features.

        :return: The pay_at_table of this TerminalSettings.
        :rtype: PayAtTable
        """
        return self._pay_at_table

    @pay_at_table.setter
    def pay_at_table(self, pay_at_table):
        """Sets the pay_at_table of this TerminalSettings.

        Settings for [Pay-at-table](https://docs.adyen.com/point-of-sale/pay-at-x) features.

        :param pay_at_table: The pay_at_table of this TerminalSettings.
        :type pay_at_table: PayAtTable
        """

        self._pay_at_table = pay_at_table

    @property
    def payment(self):
        """Gets the payment of this TerminalSettings.

        Settings for payment features.

        :return: The payment of this TerminalSettings.
        :rtype: Payment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this TerminalSettings.

        Settings for payment features.

        :param payment: The payment of this TerminalSettings.
        :type payment: Payment
        """

        self._payment = payment

    @property
    def receipt_options(self):
        """Gets the receipt_options of this TerminalSettings.

        Generic receipt settings.

        :return: The receipt_options of this TerminalSettings.
        :rtype: ReceiptOptions
        """
        return self._receipt_options

    @receipt_options.setter
    def receipt_options(self, receipt_options):
        """Sets the receipt_options of this TerminalSettings.

        Generic receipt settings.

        :param receipt_options: The receipt_options of this TerminalSettings.
        :type receipt_options: ReceiptOptions
        """

        self._receipt_options = receipt_options

    @property
    def receipt_printing(self):
        """Gets the receipt_printing of this TerminalSettings.

        Transaction outcomes that you want the terminal to print a merchant receipt or a shopper receipt for.

        :return: The receipt_printing of this TerminalSettings.
        :rtype: ReceiptPrinting
        """
        return self._receipt_printing

    @receipt_printing.setter
    def receipt_printing(self, receipt_printing):
        """Sets the receipt_printing of this TerminalSettings.

        Transaction outcomes that you want the terminal to print a merchant receipt or a shopper receipt for.

        :param receipt_printing: The receipt_printing of this TerminalSettings.
        :type receipt_printing: ReceiptPrinting
        """

        self._receipt_printing = receipt_printing

    @property
    def refunds(self):
        """Gets the refunds of this TerminalSettings.

        Settings for refunds.

        :return: The refunds of this TerminalSettings.
        :rtype: Refunds
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this TerminalSettings.

        Settings for refunds.

        :param refunds: The refunds of this TerminalSettings.
        :type refunds: Refunds
        """

        self._refunds = refunds

    @property
    def signature(self):
        """Gets the signature of this TerminalSettings.

        Settings to skip signature, sign on display, or sign on receipt.

        :return: The signature of this TerminalSettings.
        :rtype: Signature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this TerminalSettings.

        Settings to skip signature, sign on display, or sign on receipt.

        :param signature: The signature of this TerminalSettings.
        :type signature: Signature
        """

        self._signature = signature

    @property
    def standalone(self):
        """Gets the standalone of this TerminalSettings.

        Settings for [standalone](https://docs.adyen.com/point-of-sale/standalone/standalone-build/set-up-standalone#set-up-standalone-using-an-api-call) features.

        :return: The standalone of this TerminalSettings.
        :rtype: Standalone
        """
        return self._standalone

    @standalone.setter
    def standalone(self, standalone):
        """Sets the standalone of this TerminalSettings.

        Settings for [standalone](https://docs.adyen.com/point-of-sale/standalone/standalone-build/set-up-standalone#set-up-standalone-using-an-api-call) features.

        :param standalone: The standalone of this TerminalSettings.
        :type standalone: Standalone
        """

        self._standalone = standalone

    @property
    def surcharge(self):
        """Gets the surcharge of this TerminalSettings.

        Settings for payment [surcharge](https://docs.adyen.com/point-of-sale/surcharge) features.

        :return: The surcharge of this TerminalSettings.
        :rtype: Surcharge
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this TerminalSettings.

        Settings for payment [surcharge](https://docs.adyen.com/point-of-sale/surcharge) features.

        :param surcharge: The surcharge of this TerminalSettings.
        :type surcharge: Surcharge
        """

        self._surcharge = surcharge

    @property
    def tap_to_pay(self):
        """Gets the tap_to_pay of this TerminalSettings.

        Settings for Tap to Pay.

        :return: The tap_to_pay of this TerminalSettings.
        :rtype: TapToPay
        """
        return self._tap_to_pay

    @tap_to_pay.setter
    def tap_to_pay(self, tap_to_pay):
        """Sets the tap_to_pay of this TerminalSettings.

        Settings for Tap to Pay.

        :param tap_to_pay: The tap_to_pay of this TerminalSettings.
        :type tap_to_pay: TapToPay
        """

        self._tap_to_pay = tap_to_pay

    @property
    def terminal_instructions(self):
        """Gets the terminal_instructions of this TerminalSettings.

        Settings to define the behaviour of the payment terminal.

        :return: The terminal_instructions of this TerminalSettings.
        :rtype: TerminalInstructions
        """
        return self._terminal_instructions

    @terminal_instructions.setter
    def terminal_instructions(self, terminal_instructions):
        """Sets the terminal_instructions of this TerminalSettings.

        Settings to define the behaviour of the payment terminal.

        :param terminal_instructions: The terminal_instructions of this TerminalSettings.
        :type terminal_instructions: TerminalInstructions
        """

        self._terminal_instructions = terminal_instructions

    @property
    def timeouts(self):
        """Gets the timeouts of this TerminalSettings.

        Settings for device [time-outs](https://docs.adyen.com/point-of-sale/pos-timeouts#device-time-out).

        :return: The timeouts of this TerminalSettings.
        :rtype: Timeouts
        """
        return self._timeouts

    @timeouts.setter
    def timeouts(self, timeouts):
        """Sets the timeouts of this TerminalSettings.

        Settings for device [time-outs](https://docs.adyen.com/point-of-sale/pos-timeouts#device-time-out).

        :param timeouts: The timeouts of this TerminalSettings.
        :type timeouts: Timeouts
        """

        self._timeouts = timeouts

    @property
    def wifi_profiles(self):
        """Gets the wifi_profiles of this TerminalSettings.

        Remote Wi-Fi profiles for WPA and WPA2 PSK and EAP Wi-Fi networks.

        :return: The wifi_profiles of this TerminalSettings.
        :rtype: WifiProfiles
        """
        return self._wifi_profiles

    @wifi_profiles.setter
    def wifi_profiles(self, wifi_profiles):
        """Sets the wifi_profiles of this TerminalSettings.

        Remote Wi-Fi profiles for WPA and WPA2 PSK and EAP Wi-Fi networks.

        :param wifi_profiles: The wifi_profiles of this TerminalSettings.
        :type wifi_profiles: WifiProfiles
        """

        self._wifi_profiles = wifi_profiles
