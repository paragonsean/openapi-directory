# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_settings_response import AdditionalSettingsResponse
from openapi_server.models.webhook_links import WebhookLinks
from openapi_server import util


class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: WebhookLinks=None, accepts_expired_certificate: bool=None, accepts_self_signed_certificate: bool=None, accepts_untrusted_root_certificate: bool=None, account_reference: str=None, active: bool=None, additional_settings: AdditionalSettingsResponse=None, certificate_alias: str=None, communication_format: str=None, description: str=None, encryption_protocol: str=None, filter_merchant_account_type: str=None, filter_merchant_accounts: List[str]=None, has_error: bool=None, has_password: bool=None, hmac_key_check_value: str=None, id: str=None, network_type: str=None, populate_soap_action_header: bool=None, type: str=None, url: str=None, username: str=None):
        """Webhook - a model defined in OpenAPI

        :param links: The links of this Webhook.
        :param accepts_expired_certificate: The accepts_expired_certificate of this Webhook.
        :param accepts_self_signed_certificate: The accepts_self_signed_certificate of this Webhook.
        :param accepts_untrusted_root_certificate: The accepts_untrusted_root_certificate of this Webhook.
        :param account_reference: The account_reference of this Webhook.
        :param active: The active of this Webhook.
        :param additional_settings: The additional_settings of this Webhook.
        :param certificate_alias: The certificate_alias of this Webhook.
        :param communication_format: The communication_format of this Webhook.
        :param description: The description of this Webhook.
        :param encryption_protocol: The encryption_protocol of this Webhook.
        :param filter_merchant_account_type: The filter_merchant_account_type of this Webhook.
        :param filter_merchant_accounts: The filter_merchant_accounts of this Webhook.
        :param has_error: The has_error of this Webhook.
        :param has_password: The has_password of this Webhook.
        :param hmac_key_check_value: The hmac_key_check_value of this Webhook.
        :param id: The id of this Webhook.
        :param network_type: The network_type of this Webhook.
        :param populate_soap_action_header: The populate_soap_action_header of this Webhook.
        :param type: The type of this Webhook.
        :param url: The url of this Webhook.
        :param username: The username of this Webhook.
        """
        self.openapi_types = {
            'links': WebhookLinks,
            'accepts_expired_certificate': bool,
            'accepts_self_signed_certificate': bool,
            'accepts_untrusted_root_certificate': bool,
            'account_reference': str,
            'active': bool,
            'additional_settings': AdditionalSettingsResponse,
            'certificate_alias': str,
            'communication_format': str,
            'description': str,
            'encryption_protocol': str,
            'filter_merchant_account_type': str,
            'filter_merchant_accounts': List[str],
            'has_error': bool,
            'has_password': bool,
            'hmac_key_check_value': str,
            'id': str,
            'network_type': str,
            'populate_soap_action_header': bool,
            'type': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'links': '_links',
            'accepts_expired_certificate': 'acceptsExpiredCertificate',
            'accepts_self_signed_certificate': 'acceptsSelfSignedCertificate',
            'accepts_untrusted_root_certificate': 'acceptsUntrustedRootCertificate',
            'account_reference': 'accountReference',
            'active': 'active',
            'additional_settings': 'additionalSettings',
            'certificate_alias': 'certificateAlias',
            'communication_format': 'communicationFormat',
            'description': 'description',
            'encryption_protocol': 'encryptionProtocol',
            'filter_merchant_account_type': 'filterMerchantAccountType',
            'filter_merchant_accounts': 'filterMerchantAccounts',
            'has_error': 'hasError',
            'has_password': 'hasPassword',
            'hmac_key_check_value': 'hmacKeyCheckValue',
            'id': 'id',
            'network_type': 'networkType',
            'populate_soap_action_header': 'populateSoapActionHeader',
            'type': 'type',
            'url': 'url',
            'username': 'username'
        }

        self._links = links
        self._accepts_expired_certificate = accepts_expired_certificate
        self._accepts_self_signed_certificate = accepts_self_signed_certificate
        self._accepts_untrusted_root_certificate = accepts_untrusted_root_certificate
        self._account_reference = account_reference
        self._active = active
        self._additional_settings = additional_settings
        self._certificate_alias = certificate_alias
        self._communication_format = communication_format
        self._description = description
        self._encryption_protocol = encryption_protocol
        self._filter_merchant_account_type = filter_merchant_account_type
        self._filter_merchant_accounts = filter_merchant_accounts
        self._has_error = has_error
        self._has_password = has_password
        self._hmac_key_check_value = hmac_key_check_value
        self._id = id
        self._network_type = network_type
        self._populate_soap_action_header = populate_soap_action_header
        self._type = type
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Webhook of this Webhook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Webhook.

        References to resources connected with this webhook.

        :return: The links of this Webhook.
        :rtype: WebhookLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Webhook.

        References to resources connected with this webhook.

        :param links: The links of this Webhook.
        :type links: WebhookLinks
        """

        self._links = links

    @property
    def accepts_expired_certificate(self):
        """Gets the accepts_expired_certificate of this Webhook.

        Indicates if expired SSL certificates are accepted. Default value: **false**.

        :return: The accepts_expired_certificate of this Webhook.
        :rtype: bool
        """
        return self._accepts_expired_certificate

    @accepts_expired_certificate.setter
    def accepts_expired_certificate(self, accepts_expired_certificate):
        """Sets the accepts_expired_certificate of this Webhook.

        Indicates if expired SSL certificates are accepted. Default value: **false**.

        :param accepts_expired_certificate: The accepts_expired_certificate of this Webhook.
        :type accepts_expired_certificate: bool
        """

        self._accepts_expired_certificate = accepts_expired_certificate

    @property
    def accepts_self_signed_certificate(self):
        """Gets the accepts_self_signed_certificate of this Webhook.

        Indicates if self-signed SSL certificates are accepted. Default value: **false**.

        :return: The accepts_self_signed_certificate of this Webhook.
        :rtype: bool
        """
        return self._accepts_self_signed_certificate

    @accepts_self_signed_certificate.setter
    def accepts_self_signed_certificate(self, accepts_self_signed_certificate):
        """Sets the accepts_self_signed_certificate of this Webhook.

        Indicates if self-signed SSL certificates are accepted. Default value: **false**.

        :param accepts_self_signed_certificate: The accepts_self_signed_certificate of this Webhook.
        :type accepts_self_signed_certificate: bool
        """

        self._accepts_self_signed_certificate = accepts_self_signed_certificate

    @property
    def accepts_untrusted_root_certificate(self):
        """Gets the accepts_untrusted_root_certificate of this Webhook.

        Indicates if untrusted SSL certificates are accepted. Default value: **false**.

        :return: The accepts_untrusted_root_certificate of this Webhook.
        :rtype: bool
        """
        return self._accepts_untrusted_root_certificate

    @accepts_untrusted_root_certificate.setter
    def accepts_untrusted_root_certificate(self, accepts_untrusted_root_certificate):
        """Sets the accepts_untrusted_root_certificate of this Webhook.

        Indicates if untrusted SSL certificates are accepted. Default value: **false**.

        :param accepts_untrusted_root_certificate: The accepts_untrusted_root_certificate of this Webhook.
        :type accepts_untrusted_root_certificate: bool
        """

        self._accepts_untrusted_root_certificate = accepts_untrusted_root_certificate

    @property
    def account_reference(self):
        """Gets the account_reference of this Webhook.

        Reference to the account the webook is set on.

        :return: The account_reference of this Webhook.
        :rtype: str
        """
        return self._account_reference

    @account_reference.setter
    def account_reference(self, account_reference):
        """Sets the account_reference of this Webhook.

        Reference to the account the webook is set on.

        :param account_reference: The account_reference of this Webhook.
        :type account_reference: str
        """

        self._account_reference = account_reference

    @property
    def active(self):
        """Gets the active of this Webhook.

        Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.

        :return: The active of this Webhook.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Webhook.

        Indicates if the webhook configuration is active. The field must be **true** for you to receive webhooks about events related an account.

        :param active: The active of this Webhook.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")

        self._active = active

    @property
    def additional_settings(self):
        """Gets the additional_settings of this Webhook.

        Additional shopper and transaction information to be included in your [standard notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes). Find out more about the available [additional settings](https://docs.adyen.com/development-resources/webhooks/additional-settings).

        :return: The additional_settings of this Webhook.
        :rtype: AdditionalSettingsResponse
        """
        return self._additional_settings

    @additional_settings.setter
    def additional_settings(self, additional_settings):
        """Sets the additional_settings of this Webhook.

        Additional shopper and transaction information to be included in your [standard notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes). Find out more about the available [additional settings](https://docs.adyen.com/development-resources/webhooks/additional-settings).

        :param additional_settings: The additional_settings of this Webhook.
        :type additional_settings: AdditionalSettingsResponse
        """

        self._additional_settings = additional_settings

    @property
    def certificate_alias(self):
        """Gets the certificate_alias of this Webhook.

        The alias of our SSL certificate. When you receive a notification from us, the alias from the HMAC signature will match this alias.

        :return: The certificate_alias of this Webhook.
        :rtype: str
        """
        return self._certificate_alias

    @certificate_alias.setter
    def certificate_alias(self, certificate_alias):
        """Sets the certificate_alias of this Webhook.

        The alias of our SSL certificate. When you receive a notification from us, the alias from the HMAC signature will match this alias.

        :param certificate_alias: The certificate_alias of this Webhook.
        :type certificate_alias: str
        """

        self._certificate_alias = certificate_alias

    @property
    def communication_format(self):
        """Gets the communication_format of this Webhook.

        Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 

        :return: The communication_format of this Webhook.
        :rtype: str
        """
        return self._communication_format

    @communication_format.setter
    def communication_format(self, communication_format):
        """Sets the communication_format of this Webhook.

        Format or protocol for receiving webhooks. Possible values: * **soap** * **http** * **json** 

        :param communication_format: The communication_format of this Webhook.
        :type communication_format: str
        """
        allowed_values = ["http", "json", "soap"]  # noqa: E501
        if communication_format not in allowed_values:
            raise ValueError(
                "Invalid value for `communication_format` ({0}), must be one of {1}"
                .format(communication_format, allowed_values)
            )

        self._communication_format = communication_format

    @property
    def description(self):
        """Gets the description of this Webhook.

        Your description for this webhook configuration.

        :return: The description of this Webhook.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Webhook.

        Your description for this webhook configuration.

        :param description: The description of this Webhook.
        :type description: str
        """

        self._description = description

    @property
    def encryption_protocol(self):
        """Gets the encryption_protocol of this Webhook.

        SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.

        :return: The encryption_protocol of this Webhook.
        :rtype: str
        """
        return self._encryption_protocol

    @encryption_protocol.setter
    def encryption_protocol(self, encryption_protocol):
        """Sets the encryption_protocol of this Webhook.

        SSL version to access the public webhook URL specified in the `url` field. Possible values: * **TLSv1.3** * **TLSv1.2** * **HTTP** - Only allowed on Test environment.  If not specified, the webhook will use `sslVersion`: **TLSv1.2**.

        :param encryption_protocol: The encryption_protocol of this Webhook.
        :type encryption_protocol: str
        """
        allowed_values = ["HTTP", "TLSv1.2", "TLSv1.3"]  # noqa: E501
        if encryption_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `encryption_protocol` ({0}), must be one of {1}"
                .format(encryption_protocol, allowed_values)
            )

        self._encryption_protocol = encryption_protocol

    @property
    def filter_merchant_account_type(self):
        """Gets the filter_merchant_account_type of this Webhook.

        Shows how merchant accounts are included in company-level webhooks. Possible values: * **includeAccounts** * **excludeAccounts** * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.

        :return: The filter_merchant_account_type of this Webhook.
        :rtype: str
        """
        return self._filter_merchant_account_type

    @filter_merchant_account_type.setter
    def filter_merchant_account_type(self, filter_merchant_account_type):
        """Sets the filter_merchant_account_type of this Webhook.

        Shows how merchant accounts are included in company-level webhooks. Possible values: * **includeAccounts** * **excludeAccounts** * **allAccounts**: Includes all merchant accounts, and does not require specifying `filterMerchantAccounts`.

        :param filter_merchant_account_type: The filter_merchant_account_type of this Webhook.
        :type filter_merchant_account_type: str
        """
        allowed_values = ["allAccounts", "excludeAccounts", "includeAccounts"]  # noqa: E501
        if filter_merchant_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `filter_merchant_account_type` ({0}), must be one of {1}"
                .format(filter_merchant_account_type, allowed_values)
            )

        self._filter_merchant_account_type = filter_merchant_account_type

    @property
    def filter_merchant_accounts(self):
        """Gets the filter_merchant_accounts of this Webhook.

        A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.  Required if `filterMerchantAccountType` is either: * **includeAccounts** * **excludeAccounts**  Not needed for `filterMerchantAccountType`: **allAccounts**.

        :return: The filter_merchant_accounts of this Webhook.
        :rtype: List[str]
        """
        return self._filter_merchant_accounts

    @filter_merchant_accounts.setter
    def filter_merchant_accounts(self, filter_merchant_accounts):
        """Sets the filter_merchant_accounts of this Webhook.

        A list of merchant account names that are included or excluded from receiving the webhook. Inclusion or exclusion is based on the value defined for `filterMerchantAccountType`.  Required if `filterMerchantAccountType` is either: * **includeAccounts** * **excludeAccounts**  Not needed for `filterMerchantAccountType`: **allAccounts**.

        :param filter_merchant_accounts: The filter_merchant_accounts of this Webhook.
        :type filter_merchant_accounts: List[str]
        """

        self._filter_merchant_accounts = filter_merchant_accounts

    @property
    def has_error(self):
        """Gets the has_error of this Webhook.

        Indicates if the webhook configuration has errors that need troubleshooting. If the value is **true**, troubleshoot the configuration using the [testing endpoint](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/webhooks/{webhookid}/test).

        :return: The has_error of this Webhook.
        :rtype: bool
        """
        return self._has_error

    @has_error.setter
    def has_error(self, has_error):
        """Sets the has_error of this Webhook.

        Indicates if the webhook configuration has errors that need troubleshooting. If the value is **true**, troubleshoot the configuration using the [testing endpoint](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/webhooks/{webhookid}/test).

        :param has_error: The has_error of this Webhook.
        :type has_error: bool
        """

        self._has_error = has_error

    @property
    def has_password(self):
        """Gets the has_password of this Webhook.

        Indicates if the webhook is password protected.

        :return: The has_password of this Webhook.
        :rtype: bool
        """
        return self._has_password

    @has_password.setter
    def has_password(self, has_password):
        """Sets the has_password of this Webhook.

        Indicates if the webhook is password protected.

        :param has_password: The has_password of this Webhook.
        :type has_password: bool
        """

        self._has_password = has_password

    @property
    def hmac_key_check_value(self):
        """Gets the hmac_key_check_value of this Webhook.

        The [checksum](https://en.wikipedia.org/wiki/Key_checksum_value) of the HMAC key generated for this webhook. You can use this value to uniquely identify the HMAC key configured for this webhook.

        :return: The hmac_key_check_value of this Webhook.
        :rtype: str
        """
        return self._hmac_key_check_value

    @hmac_key_check_value.setter
    def hmac_key_check_value(self, hmac_key_check_value):
        """Sets the hmac_key_check_value of this Webhook.

        The [checksum](https://en.wikipedia.org/wiki/Key_checksum_value) of the HMAC key generated for this webhook. You can use this value to uniquely identify the HMAC key configured for this webhook.

        :param hmac_key_check_value: The hmac_key_check_value of this Webhook.
        :type hmac_key_check_value: str
        """

        self._hmac_key_check_value = hmac_key_check_value

    @property
    def id(self):
        """Gets the id of this Webhook.

        Unique identifier for this webhook.

        :return: The id of this Webhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Webhook.

        Unique identifier for this webhook.

        :param id: The id of this Webhook.
        :type id: str
        """

        self._id = id

    @property
    def network_type(self):
        """Gets the network_type of this Webhook.

        Network type for Terminal API details webhooks.

        :return: The network_type of this Webhook.
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this Webhook.

        Network type for Terminal API details webhooks.

        :param network_type: The network_type of this Webhook.
        :type network_type: str
        """
        allowed_values = ["local", "public"]  # noqa: E501
        if network_type not in allowed_values:
            raise ValueError(
                "Invalid value for `network_type` ({0}), must be one of {1}"
                .format(network_type, allowed_values)
            )

        self._network_type = network_type

    @property
    def populate_soap_action_header(self):
        """Gets the populate_soap_action_header of this Webhook.

        Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.

        :return: The populate_soap_action_header of this Webhook.
        :rtype: bool
        """
        return self._populate_soap_action_header

    @populate_soap_action_header.setter
    def populate_soap_action_header(self, populate_soap_action_header):
        """Sets the populate_soap_action_header of this Webhook.

        Indicates if the SOAP action header needs to be populated. Default value: **false**.  Only applies if `communicationFormat`: **soap**.

        :param populate_soap_action_header: The populate_soap_action_header of this Webhook.
        :type populate_soap_action_header: bool
        """

        self._populate_soap_action_header = populate_soap_action_header

    @property
    def type(self):
        """Gets the type of this Webhook.

        The type of webhook. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **terminal-api-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).

        :return: The type of this Webhook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Webhook.

        The type of webhook. Possible values are:  - **standard** - **account-settings-notification** - **banktransfer-notification** - **boletobancario-notification** - **directdebit-notification** - **ach-notification-of-change-notification** - **pending-notification** - **ideal-notification** - **ideal-pending-notification** - **report-notification** - **terminal-api-notification**  Find out more about [standard notification webhooks](https://docs.adyen.com/development-resources/webhooks/understand-notifications#event-codes) and [other types of notifications](https://docs.adyen.com/development-resources/webhooks/understand-notifications#other-notifications).

        :param type: The type of this Webhook.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def url(self):
        """Gets the url of this Webhook.

        Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Webhook.

        Public URL where webhooks will be sent, for example **https://www.domain.com/webhook-endpoint**.

        :param url: The url of this Webhook.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def username(self):
        """Gets the username of this Webhook.

        Username to access the webhook URL.

        :return: The username of this Webhook.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Webhook.

        Username to access the webhook URL.

        :param username: The username of this Webhook.
        :type username: str
        """

        self._username = username
