# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store_location import StoreLocation
from openapi_server.models.store_split_configuration import StoreSplitConfiguration
from openapi_server import util


class StoreCreationWithMerchantCodeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: StoreLocation=None, business_line_ids: List[str]=None, description: str=None, external_reference_id: str=None, merchant_id: str=None, phone_number: str=None, reference: str=None, shopper_statement: str=None, split_configuration: StoreSplitConfiguration=None):
        """StoreCreationWithMerchantCodeRequest - a model defined in OpenAPI

        :param address: The address of this StoreCreationWithMerchantCodeRequest.
        :param business_line_ids: The business_line_ids of this StoreCreationWithMerchantCodeRequest.
        :param description: The description of this StoreCreationWithMerchantCodeRequest.
        :param external_reference_id: The external_reference_id of this StoreCreationWithMerchantCodeRequest.
        :param merchant_id: The merchant_id of this StoreCreationWithMerchantCodeRequest.
        :param phone_number: The phone_number of this StoreCreationWithMerchantCodeRequest.
        :param reference: The reference of this StoreCreationWithMerchantCodeRequest.
        :param shopper_statement: The shopper_statement of this StoreCreationWithMerchantCodeRequest.
        :param split_configuration: The split_configuration of this StoreCreationWithMerchantCodeRequest.
        """
        self.openapi_types = {
            'address': StoreLocation,
            'business_line_ids': List[str],
            'description': str,
            'external_reference_id': str,
            'merchant_id': str,
            'phone_number': str,
            'reference': str,
            'shopper_statement': str,
            'split_configuration': StoreSplitConfiguration
        }

        self.attribute_map = {
            'address': 'address',
            'business_line_ids': 'businessLineIds',
            'description': 'description',
            'external_reference_id': 'externalReferenceId',
            'merchant_id': 'merchantId',
            'phone_number': 'phoneNumber',
            'reference': 'reference',
            'shopper_statement': 'shopperStatement',
            'split_configuration': 'splitConfiguration'
        }

        self._address = address
        self._business_line_ids = business_line_ids
        self._description = description
        self._external_reference_id = external_reference_id
        self._merchant_id = merchant_id
        self._phone_number = phone_number
        self._reference = reference
        self._shopper_statement = shopper_statement
        self._split_configuration = split_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoreCreationWithMerchantCodeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoreCreationWithMerchantCodeRequest of this StoreCreationWithMerchantCodeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this StoreCreationWithMerchantCodeRequest.

        The address of the store.

        :return: The address of this StoreCreationWithMerchantCodeRequest.
        :rtype: StoreLocation
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this StoreCreationWithMerchantCodeRequest.

        The address of the store.

        :param address: The address of this StoreCreationWithMerchantCodeRequest.
        :type address: StoreLocation
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def business_line_ids(self):
        """Gets the business_line_ids of this StoreCreationWithMerchantCodeRequest.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/legalentity/latest/post/businessLines#responses-200-id) that the store is associated with. If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.

        :return: The business_line_ids of this StoreCreationWithMerchantCodeRequest.
        :rtype: List[str]
        """
        return self._business_line_ids

    @business_line_ids.setter
    def business_line_ids(self, business_line_ids):
        """Sets the business_line_ids of this StoreCreationWithMerchantCodeRequest.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/legalentity/latest/post/businessLines#responses-200-id) that the store is associated with. If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.

        :param business_line_ids: The business_line_ids of this StoreCreationWithMerchantCodeRequest.
        :type business_line_ids: List[str]
        """

        self._business_line_ids = business_line_ids

    @property
    def description(self):
        """Gets the description of this StoreCreationWithMerchantCodeRequest.

        Your description of the store.

        :return: The description of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StoreCreationWithMerchantCodeRequest.

        Your description of the store.

        :param description: The description of this StoreCreationWithMerchantCodeRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this StoreCreationWithMerchantCodeRequest.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :return: The external_reference_id of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this StoreCreationWithMerchantCodeRequest.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :param external_reference_id: The external_reference_id of this StoreCreationWithMerchantCodeRequest.
        :type external_reference_id: str
        """

        self._external_reference_id = external_reference_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this StoreCreationWithMerchantCodeRequest.

        The unique identifier of the merchant account that the store belongs to.

        :return: The merchant_id of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this StoreCreationWithMerchantCodeRequest.

        The unique identifier of the merchant account that the store belongs to.

        :param merchant_id: The merchant_id of this StoreCreationWithMerchantCodeRequest.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def phone_number(self):
        """Gets the phone_number of this StoreCreationWithMerchantCodeRequest.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :return: The phone_number of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this StoreCreationWithMerchantCodeRequest.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :param phone_number: The phone_number of this StoreCreationWithMerchantCodeRequest.
        :type phone_number: str
        """
        if phone_number is None:
            raise ValueError("Invalid value for `phone_number`, must not be `None`")

        self._phone_number = phone_number

    @property
    def reference(self):
        """Gets the reference of this StoreCreationWithMerchantCodeRequest.

        Your reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_).  If you do not provide a reference in your POST request, it is populated with the Adyen-generated [id](https://docs.adyen.com/api-explorer/Management/latest/post/stores#responses-200-id).

        :return: The reference of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this StoreCreationWithMerchantCodeRequest.

        Your reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_).  If you do not provide a reference in your POST request, it is populated with the Adyen-generated [id](https://docs.adyen.com/api-explorer/Management/latest/post/stores#responses-200-id).

        :param reference: The reference of this StoreCreationWithMerchantCodeRequest.
        :type reference: str
        """

        self._reference = reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this StoreCreationWithMerchantCodeRequest.

        The store name to be shown on the shopper's bank or credit card statement and on the shopper receipt. Maximum length: 22 characters; can't be all numbers.

        :return: The shopper_statement of this StoreCreationWithMerchantCodeRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this StoreCreationWithMerchantCodeRequest.

        The store name to be shown on the shopper's bank or credit card statement and on the shopper receipt. Maximum length: 22 characters; can't be all numbers.

        :param shopper_statement: The shopper_statement of this StoreCreationWithMerchantCodeRequest.
        :type shopper_statement: str
        """
        if shopper_statement is None:
            raise ValueError("Invalid value for `shopper_statement`, must not be `None`")

        self._shopper_statement = shopper_statement

    @property
    def split_configuration(self):
        """Gets the split_configuration of this StoreCreationWithMerchantCodeRequest.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :return: The split_configuration of this StoreCreationWithMerchantCodeRequest.
        :rtype: StoreSplitConfiguration
        """
        return self._split_configuration

    @split_configuration.setter
    def split_configuration(self, split_configuration):
        """Sets the split_configuration of this StoreCreationWithMerchantCodeRequest.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :param split_configuration: The split_configuration of this StoreCreationWithMerchantCodeRequest.
        :type split_configuration: StoreSplitConfiguration
        """

        self._split_configuration = split_configuration
