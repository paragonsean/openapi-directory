# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.split_configuration_rule import SplitConfigurationRule
from openapi_server import util


class SplitConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, rules: List[SplitConfigurationRule]=None, split_configuration_id: str=None, stores: List[str]=None):
        """SplitConfiguration - a model defined in OpenAPI

        :param description: The description of this SplitConfiguration.
        :param rules: The rules of this SplitConfiguration.
        :param split_configuration_id: The split_configuration_id of this SplitConfiguration.
        :param stores: The stores of this SplitConfiguration.
        """
        self.openapi_types = {
            'description': str,
            'rules': List[SplitConfigurationRule],
            'split_configuration_id': str,
            'stores': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'rules': 'rules',
            'split_configuration_id': 'splitConfigurationId',
            'stores': 'stores'
        }

        self._description = description
        self._rules = rules
        self._split_configuration_id = split_configuration_id
        self._stores = stores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SplitConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SplitConfiguration of this SplitConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this SplitConfiguration.

        Your description for the split configuration.

        :return: The description of this SplitConfiguration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SplitConfiguration.

        Your description for the split configuration.

        :param description: The description of this SplitConfiguration.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def rules(self):
        """Gets the rules of this SplitConfiguration.

        Array of rules that define the split configuration behavior.

        :return: The rules of this SplitConfiguration.
        :rtype: List[SplitConfigurationRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this SplitConfiguration.

        Array of rules that define the split configuration behavior.

        :param rules: The rules of this SplitConfiguration.
        :type rules: List[SplitConfigurationRule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")

        self._rules = rules

    @property
    def split_configuration_id(self):
        """Gets the split_configuration_id of this SplitConfiguration.

        Unique identifier of the split configuration.

        :return: The split_configuration_id of this SplitConfiguration.
        :rtype: str
        """
        return self._split_configuration_id

    @split_configuration_id.setter
    def split_configuration_id(self, split_configuration_id):
        """Sets the split_configuration_id of this SplitConfiguration.

        Unique identifier of the split configuration.

        :param split_configuration_id: The split_configuration_id of this SplitConfiguration.
        :type split_configuration_id: str
        """

        self._split_configuration_id = split_configuration_id

    @property
    def stores(self):
        """Gets the stores of this SplitConfiguration.

        List of stores to which the split configuration applies.

        :return: The stores of this SplitConfiguration.
        :rtype: List[str]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this SplitConfiguration.

        List of stores to which the split configuration applies.

        :param stores: The stores of this SplitConfiguration.
        :type stores: List[str]
        """

        self._stores = stores
