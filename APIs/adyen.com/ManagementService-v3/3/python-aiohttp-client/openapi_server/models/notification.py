# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Notification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, details: str=None, enabled: bool=None, show_button: bool=None, title: str=None):
        """Notification - a model defined in OpenAPI

        :param category: The category of this Notification.
        :param details: The details of this Notification.
        :param enabled: The enabled of this Notification.
        :param show_button: The show_button of this Notification.
        :param title: The title of this Notification.
        """
        self.openapi_types = {
            'category': str,
            'details': str,
            'enabled': bool,
            'show_button': bool,
            'title': str
        }

        self.attribute_map = {
            'category': 'category',
            'details': 'details',
            'enabled': 'enabled',
            'show_button': 'showButton',
            'title': 'title'
        }

        self._category = category
        self._details = details
        self._enabled = enabled
        self._show_button = show_button
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Notification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Notification of this Notification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this Notification.

        The type of event notification sent when you select the notification button.

        :return: The category of this Notification.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Notification.

        The type of event notification sent when you select the notification button.

        :param category: The category of this Notification.
        :type category: str
        """
        allowed_values = ["SaleWakeUp", "KeyPressed", ""]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def details(self):
        """Gets the details of this Notification.

        The text shown in the prompt which opens when you select the notification button. For example, the description of the input box for pay-at-table.

        :return: The details of this Notification.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this Notification.

        The text shown in the prompt which opens when you select the notification button. For example, the description of the input box for pay-at-table.

        :param details: The details of this Notification.
        :type details: str
        """

        self._details = details

    @property
    def enabled(self):
        """Gets the enabled of this Notification.

        Enables sending event notifications either by pressing the Confirm key on terminals with a keypad or by tapping the event notification button on the terminal screen.

        :return: The enabled of this Notification.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Notification.

        Enables sending event notifications either by pressing the Confirm key on terminals with a keypad or by tapping the event notification button on the terminal screen.

        :param enabled: The enabled of this Notification.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def show_button(self):
        """Gets the show_button of this Notification.

        Shows or hides the event notification button on the screen of terminal models that have a keypad.

        :return: The show_button of this Notification.
        :rtype: bool
        """
        return self._show_button

    @show_button.setter
    def show_button(self, show_button):
        """Sets the show_button of this Notification.

        Shows or hides the event notification button on the screen of terminal models that have a keypad.

        :param show_button: The show_button of this Notification.
        :type show_button: bool
        """

        self._show_button = show_button

    @property
    def title(self):
        """Gets the title of this Notification.

        The name of the notification button on the terminal screen.

        :return: The title of this Notification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Notification.

        The name of the notification button on the terminal screen.

        :param title: The title of this Notification.
        :type title: str
        """

        self._title = title
