# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.store_location import StoreLocation
from openapi_server.models.store_split_configuration import StoreSplitConfiguration
from openapi_server import util


class Store(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Links=None, address: StoreLocation=None, business_line_ids: List[str]=None, description: str=None, external_reference_id: str=None, id: str=None, merchant_id: str=None, phone_number: str=None, reference: str=None, shopper_statement: str=None, split_configuration: StoreSplitConfiguration=None, status: str=None):
        """Store - a model defined in OpenAPI

        :param links: The links of this Store.
        :param address: The address of this Store.
        :param business_line_ids: The business_line_ids of this Store.
        :param description: The description of this Store.
        :param external_reference_id: The external_reference_id of this Store.
        :param id: The id of this Store.
        :param merchant_id: The merchant_id of this Store.
        :param phone_number: The phone_number of this Store.
        :param reference: The reference of this Store.
        :param shopper_statement: The shopper_statement of this Store.
        :param split_configuration: The split_configuration of this Store.
        :param status: The status of this Store.
        """
        self.openapi_types = {
            'links': Links,
            'address': StoreLocation,
            'business_line_ids': List[str],
            'description': str,
            'external_reference_id': str,
            'id': str,
            'merchant_id': str,
            'phone_number': str,
            'reference': str,
            'shopper_statement': str,
            'split_configuration': StoreSplitConfiguration,
            'status': str
        }

        self.attribute_map = {
            'links': '_links',
            'address': 'address',
            'business_line_ids': 'businessLineIds',
            'description': 'description',
            'external_reference_id': 'externalReferenceId',
            'id': 'id',
            'merchant_id': 'merchantId',
            'phone_number': 'phoneNumber',
            'reference': 'reference',
            'shopper_statement': 'shopperStatement',
            'split_configuration': 'splitConfiguration',
            'status': 'status'
        }

        self._links = links
        self._address = address
        self._business_line_ids = business_line_ids
        self._description = description
        self._external_reference_id = external_reference_id
        self._id = id
        self._merchant_id = merchant_id
        self._phone_number = phone_number
        self._reference = reference
        self._shopper_statement = shopper_statement
        self._split_configuration = split_configuration
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Store of this Store.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Store.

        Reference to resources connected with the store.

        :return: The links of this Store.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Store.

        Reference to resources connected with the store.

        :param links: The links of this Store.
        :type links: Links
        """

        self._links = links

    @property
    def address(self):
        """Gets the address of this Store.

        The address of the store.

        :return: The address of this Store.
        :rtype: StoreLocation
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Store.

        The address of the store.

        :param address: The address of this Store.
        :type address: StoreLocation
        """

        self._address = address

    @property
    def business_line_ids(self):
        """Gets the business_line_ids of this Store.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.

        :return: The business_line_ids of this Store.
        :rtype: List[str]
        """
        return self._business_line_ids

    @business_line_ids.setter
    def business_line_ids(self, business_line_ids):
        """Sets the business_line_ids of this Store.

        The unique identifiers of the [business lines](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/businesslines__resParam_id) that the store is associated with.  If not specified, the business line of the merchant account is used. Required when there are multiple business lines under the merchant account.

        :param business_line_ids: The business_line_ids of this Store.
        :type business_line_ids: List[str]
        """

        self._business_line_ids = business_line_ids

    @property
    def description(self):
        """Gets the description of this Store.

        The description of the store.

        :return: The description of this Store.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Store.

        The description of the store.

        :param description: The description of this Store.
        :type description: str
        """

        self._description = description

    @property
    def external_reference_id(self):
        """Gets the external_reference_id of this Store.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :return: The external_reference_id of this Store.
        :rtype: str
        """
        return self._external_reference_id

    @external_reference_id.setter
    def external_reference_id(self, external_reference_id):
        """Sets the external_reference_id of this Store.

        The unique identifier of the store, used by certain payment methods and tax authorities. Accepts up to 14 digits.  Required for CNPJ in Brazil, in the format 00.000.000/00git00-00 separated by dots, slashes, hyphens, or without separators.  Optional for Zip in Australia and SIRET in France, required except for nonprofit organizations and incorporated associations.  

        :param external_reference_id: The external_reference_id of this Store.
        :type external_reference_id: str
        """

        self._external_reference_id = external_reference_id

    @property
    def id(self):
        """Gets the id of this Store.

        The unique identifier of the store. This value is generated by Adyen.

        :return: The id of this Store.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Store.

        The unique identifier of the store. This value is generated by Adyen.

        :param id: The id of this Store.
        :type id: str
        """

        self._id = id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Store.

        The unique identifier of the merchant account that the store belongs to.

        :return: The merchant_id of this Store.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Store.

        The unique identifier of the merchant account that the store belongs to.

        :param merchant_id: The merchant_id of this Store.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def phone_number(self):
        """Gets the phone_number of this Store.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :return: The phone_number of this Store.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Store.

        The phone number of the store, including '+' and country code in the [E.164](https://en.wikipedia.org/wiki/E.164) format. If passed in a different format, we convert and validate the phone number against E.164. 

        :param phone_number: The phone_number of this Store.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def reference(self):
        """Gets the reference of this Store.

        A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)

        :return: The reference of this Store.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Store.

        A reference to recognize the store by. Also known as the store code.  Allowed characters: lowercase and uppercase letters without diacritics, numbers 0 through 9, hyphen (-), and underscore (_)

        :param reference: The reference of this Store.
        :type reference: str
        """

        self._reference = reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this Store.

        The store name shown on the shopper's bank or credit card statement and on the shopper receipt.

        :return: The shopper_statement of this Store.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this Store.

        The store name shown on the shopper's bank or credit card statement and on the shopper receipt.

        :param shopper_statement: The shopper_statement of this Store.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def split_configuration(self):
        """Gets the split_configuration of this Store.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :return: The split_configuration of this Store.
        :rtype: StoreSplitConfiguration
        """
        return self._split_configuration

    @split_configuration.setter
    def split_configuration(self, split_configuration):
        """Sets the split_configuration of this Store.

        Rules for Adyen for Platforms merchants to split the transaction amount and fees.

        :param split_configuration: The split_configuration of this Store.
        :type split_configuration: StoreSplitConfiguration
        """

        self._split_configuration = split_configuration

    @property
    def status(self):
        """Gets the status of this Store.

        The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.

        :return: The status of this Store.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Store.

        The status of the store. Possible values are:  - **active**. This value is assigned automatically when a store is created.  - **inactive**. The terminals under the store are blocked from accepting new transactions, but capturing outstanding transactions is still possible. - **closed**. This status is irreversible. The terminals under the store are reassigned to the merchant inventory.

        :param status: The status of this Store.
        :type status: str
        """
        allowed_values = ["active", "closed", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
