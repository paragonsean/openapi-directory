# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Settings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, band: str=None, roaming: bool=None, timeout: int=None):
        """Settings - a model defined in OpenAPI

        :param band: The band of this Settings.
        :param roaming: The roaming of this Settings.
        :param timeout: The timeout of this Settings.
        """
        self.openapi_types = {
            'band': str,
            'roaming': bool,
            'timeout': int
        }

        self.attribute_map = {
            'band': 'band',
            'roaming': 'roaming',
            'timeout': 'timeout'
        }

        self._band = band
        self._roaming = roaming
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Settings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Settings of this Settings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def band(self):
        """Gets the band of this Settings.

        The preferred Wi-Fi band, for use if the terminals support multiple bands. Possible values: All, 2.4GHz, 5GHz.

        :return: The band of this Settings.
        :rtype: str
        """
        return self._band

    @band.setter
    def band(self, band):
        """Sets the band of this Settings.

        The preferred Wi-Fi band, for use if the terminals support multiple bands. Possible values: All, 2.4GHz, 5GHz.

        :param band: The band of this Settings.
        :type band: str
        """

        self._band = band

    @property
    def roaming(self):
        """Gets the roaming of this Settings.

        Indicates whether roaming is enabled on the terminals.

        :return: The roaming of this Settings.
        :rtype: bool
        """
        return self._roaming

    @roaming.setter
    def roaming(self, roaming):
        """Sets the roaming of this Settings.

        Indicates whether roaming is enabled on the terminals.

        :param roaming: The roaming of this Settings.
        :type roaming: bool
        """

        self._roaming = roaming

    @property
    def timeout(self):
        """Gets the timeout of this Settings.

        The connection time-out in seconds. Minimum value: 0.

        :return: The timeout of this Settings.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Settings.

        The connection time-out in seconds. Minimum value: 0.

        :param timeout: The timeout of this Settings.
        :type timeout: int
        """

        self._timeout = timeout
