# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.company_links import CompanyLinks
from openapi_server.models.data_center import DataCenter
from openapi_server import util


class Company(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: CompanyLinks=None, data_centers: List[DataCenter]=None, description: str=None, id: str=None, name: str=None, reference: str=None, status: str=None):
        """Company - a model defined in OpenAPI

        :param links: The links of this Company.
        :param data_centers: The data_centers of this Company.
        :param description: The description of this Company.
        :param id: The id of this Company.
        :param name: The name of this Company.
        :param reference: The reference of this Company.
        :param status: The status of this Company.
        """
        self.openapi_types = {
            'links': CompanyLinks,
            'data_centers': List[DataCenter],
            'description': str,
            'id': str,
            'name': str,
            'reference': str,
            'status': str
        }

        self.attribute_map = {
            'links': '_links',
            'data_centers': 'dataCenters',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'reference': 'reference',
            'status': 'status'
        }

        self._links = links
        self._data_centers = data_centers
        self._description = description
        self._id = id
        self._name = name
        self._reference = reference
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Company':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Company of this Company.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Company.

        References to resources connected with this company.

        :return: The links of this Company.
        :rtype: CompanyLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Company.

        References to resources connected with this company.

        :param links: The links of this Company.
        :type links: CompanyLinks
        """

        self._links = links

    @property
    def data_centers(self):
        """Gets the data_centers of this Company.

        List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.

        :return: The data_centers of this Company.
        :rtype: List[DataCenter]
        """
        return self._data_centers

    @data_centers.setter
    def data_centers(self, data_centers):
        """Sets the data_centers of this Company.

        List of available data centers.  Adyen has several data centers around the world.In the URL that you use for making API requests, we recommend you use the live URL prefix from the data center closest to your shoppers.

        :param data_centers: The data_centers of this Company.
        :type data_centers: List[DataCenter]
        """

        self._data_centers = data_centers

    @property
    def description(self):
        """Gets the description of this Company.

        Your description for the company account, maximum 300 characters

        :return: The description of this Company.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Company.

        Your description for the company account, maximum 300 characters

        :param description: The description of this Company.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Company.

        The unique identifier of the company account.

        :return: The id of this Company.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Company.

        The unique identifier of the company account.

        :param id: The id of this Company.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Company.

        The legal or trading name of the company.

        :return: The name of this Company.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        The legal or trading name of the company.

        :param name: The name of this Company.
        :type name: str
        """

        self._name = name

    @property
    def reference(self):
        """Gets the reference of this Company.

        Your reference to the account

        :return: The reference of this Company.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Company.

        Your reference to the account

        :param reference: The reference of this Company.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this Company.

        The status of the company account.  Possible values:  * **Active**: Users can log in. Processing and payout capabilities depend on the status of the merchant account. * **Inactive**: Users can log in. Payment processing and payouts are disabled. * **Closed**: The company account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.

        :return: The status of this Company.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Company.

        The status of the company account.  Possible values:  * **Active**: Users can log in. Processing and payout capabilities depend on the status of the merchant account. * **Inactive**: Users can log in. Payment processing and payouts are disabled. * **Closed**: The company account is closed and this cannot be reversed. Users cannot log in. Payment processing and payouts are disabled.

        :param status: The status of this Company.
        :type status: str
        """

        self._status = status
