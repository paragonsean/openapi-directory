# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_element import LinksElement
from openapi_server import util


class WebhookLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company: LinksElement=None, generate_hmac: LinksElement=None, merchant: LinksElement=None, _self: LinksElement=None, test_webhook: LinksElement=None):
        """WebhookLinks - a model defined in OpenAPI

        :param company: The company of this WebhookLinks.
        :param generate_hmac: The generate_hmac of this WebhookLinks.
        :param merchant: The merchant of this WebhookLinks.
        :param _self: The _self of this WebhookLinks.
        :param test_webhook: The test_webhook of this WebhookLinks.
        """
        self.openapi_types = {
            'company': LinksElement,
            'generate_hmac': LinksElement,
            'merchant': LinksElement,
            '_self': LinksElement,
            'test_webhook': LinksElement
        }

        self.attribute_map = {
            'company': 'company',
            'generate_hmac': 'generateHmac',
            'merchant': 'merchant',
            '_self': 'self',
            'test_webhook': 'testWebhook'
        }

        self._company = company
        self._generate_hmac = generate_hmac
        self._merchant = merchant
        self.__self = _self
        self._test_webhook = test_webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebhookLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebhookLinks of this WebhookLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company(self):
        """Gets the company of this WebhookLinks.

        The company account that the webhook is configured for. Only present for company-level webhooks.

        :return: The company of this WebhookLinks.
        :rtype: LinksElement
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this WebhookLinks.

        The company account that the webhook is configured for. Only present for company-level webhooks.

        :param company: The company of this WebhookLinks.
        :type company: LinksElement
        """

        self._company = company

    @property
    def generate_hmac(self):
        """Gets the generate_hmac of this WebhookLinks.

        Generate an HMAC key.

        :return: The generate_hmac of this WebhookLinks.
        :rtype: LinksElement
        """
        return self._generate_hmac

    @generate_hmac.setter
    def generate_hmac(self, generate_hmac):
        """Sets the generate_hmac of this WebhookLinks.

        Generate an HMAC key.

        :param generate_hmac: The generate_hmac of this WebhookLinks.
        :type generate_hmac: LinksElement
        """
        if generate_hmac is None:
            raise ValueError("Invalid value for `generate_hmac`, must not be `None`")

        self._generate_hmac = generate_hmac

    @property
    def merchant(self):
        """Gets the merchant of this WebhookLinks.

        The merchant account that the webhook is configured for. Only present for merchant-level webhooks.

        :return: The merchant of this WebhookLinks.
        :rtype: LinksElement
        """
        return self._merchant

    @merchant.setter
    def merchant(self, merchant):
        """Sets the merchant of this WebhookLinks.

        The merchant account that the webhook is configured for. Only present for merchant-level webhooks.

        :param merchant: The merchant of this WebhookLinks.
        :type merchant: LinksElement
        """

        self._merchant = merchant

    @property
    def _self(self):
        """Gets the _self of this WebhookLinks.

        Link to the resource itself.

        :return: The _self of this WebhookLinks.
        :rtype: LinksElement
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this WebhookLinks.

        Link to the resource itself.

        :param _self: The _self of this WebhookLinks.
        :type _self: LinksElement
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self

    @property
    def test_webhook(self):
        """Gets the test_webhook of this WebhookLinks.

        Test the webhook setup.

        :return: The test_webhook of this WebhookLinks.
        :rtype: LinksElement
        """
        return self._test_webhook

    @test_webhook.setter
    def test_webhook(self, test_webhook):
        """Sets the test_webhook of this WebhookLinks.

        Test the webhook setup.

        :param test_webhook: The test_webhook of this WebhookLinks.
        :type test_webhook: LinksElement
        """
        if test_webhook is None:
            raise ValueError("Invalid value for `test_webhook`, must not be `None`")

        self._test_webhook = test_webhook
