# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateSplitConfigurationRuleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, funding_source: str=None, payment_method: str=None, shopper_interaction: str=None):
        """UpdateSplitConfigurationRuleRequest - a model defined in OpenAPI

        :param currency: The currency of this UpdateSplitConfigurationRuleRequest.
        :param funding_source: The funding_source of this UpdateSplitConfigurationRuleRequest.
        :param payment_method: The payment_method of this UpdateSplitConfigurationRuleRequest.
        :param shopper_interaction: The shopper_interaction of this UpdateSplitConfigurationRuleRequest.
        """
        self.openapi_types = {
            'currency': str,
            'funding_source': str,
            'payment_method': str,
            'shopper_interaction': str
        }

        self.attribute_map = {
            'currency': 'currency',
            'funding_source': 'fundingSource',
            'payment_method': 'paymentMethod',
            'shopper_interaction': 'shopperInteraction'
        }

        self._currency = currency
        self._funding_source = funding_source
        self._payment_method = payment_method
        self._shopper_interaction = shopper_interaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateSplitConfigurationRuleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateSplitConfigurationRuleRequest of this UpdateSplitConfigurationRuleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this UpdateSplitConfigurationRuleRequest.

        The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).

        :return: The currency of this UpdateSplitConfigurationRuleRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UpdateSplitConfigurationRuleRequest.

        The currency condition that defines whether the split logic applies. Its value must be a three-character [ISO currency code](https://en.wikipedia.org/wiki/ISO_4217).

        :param currency: The currency of this UpdateSplitConfigurationRuleRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def funding_source(self):
        """Gets the funding_source of this UpdateSplitConfigurationRuleRequest.

        The funding source condition of the payment method (only for cards).  Possible values: **credit**, **debit**, or **ANY**.

        :return: The funding_source of this UpdateSplitConfigurationRuleRequest.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this UpdateSplitConfigurationRuleRequest.

        The funding source condition of the payment method (only for cards).  Possible values: **credit**, **debit**, or **ANY**.

        :param funding_source: The funding_source of this UpdateSplitConfigurationRuleRequest.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def payment_method(self):
        """Gets the payment_method of this UpdateSplitConfigurationRuleRequest.

        The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.

        :return: The payment_method of this UpdateSplitConfigurationRuleRequest.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this UpdateSplitConfigurationRuleRequest.

        The payment method condition that defines whether the split logic applies.  Possible values: * [Payment method variant](https://docs.adyen.com/development-resources/paymentmethodvariant): Apply the split logic for a specific payment method. * **ANY**: Apply the split logic for all available payment methods.

        :param payment_method: The payment_method of this UpdateSplitConfigurationRuleRequest.
        :type payment_method: str
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this UpdateSplitConfigurationRuleRequest.

        The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.

        :return: The shopper_interaction of this UpdateSplitConfigurationRuleRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this UpdateSplitConfigurationRuleRequest.

        The sales channel condition that defines whether the split logic applies.  Possible values: * **Ecommerce**: Online transactions where the cardholder is present. * **ContAuth**: Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). * **Moto**: Mail-order and telephone-order transactions where the customer is in contact with the merchant via email or telephone. * **POS**: Point-of-sale transactions where the customer is physically present to make a payment using a secure payment terminal. * **ANY**: All sales channels.

        :param shopper_interaction: The shopper_interaction of this UpdateSplitConfigurationRuleRequest.
        :type shopper_interaction: str
        """
        if shopper_interaction is None:
            raise ValueError("Invalid value for `shopper_interaction`, must not be `None`")

        self._shopper_interaction = shopper_interaction
