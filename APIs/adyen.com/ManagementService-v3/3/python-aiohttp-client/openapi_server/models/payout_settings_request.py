# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayoutSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enabled: bool=None, enabled_from_date: str=None, transfer_instrument_id: str=None):
        """PayoutSettingsRequest - a model defined in OpenAPI

        :param enabled: The enabled of this PayoutSettingsRequest.
        :param enabled_from_date: The enabled_from_date of this PayoutSettingsRequest.
        :param transfer_instrument_id: The transfer_instrument_id of this PayoutSettingsRequest.
        """
        self.openapi_types = {
            'enabled': bool,
            'enabled_from_date': str,
            'transfer_instrument_id': str
        }

        self.attribute_map = {
            'enabled': 'enabled',
            'enabled_from_date': 'enabledFromDate',
            'transfer_instrument_id': 'transferInstrumentId'
        }

        self._enabled = enabled
        self._enabled_from_date = enabled_from_date
        self._transfer_instrument_id = transfer_instrument_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutSettingsRequest of this PayoutSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enabled(self):
        """Gets the enabled of this PayoutSettingsRequest.

        Indicates if payouts to this bank account are enabled. Default: **true**.  To receive payouts into this bank account, both `enabled` and `allowed` must be **true**.

        :return: The enabled of this PayoutSettingsRequest.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PayoutSettingsRequest.

        Indicates if payouts to this bank account are enabled. Default: **true**.  To receive payouts into this bank account, both `enabled` and `allowed` must be **true**.

        :param enabled: The enabled of this PayoutSettingsRequest.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enabled_from_date(self):
        """Gets the enabled_from_date of this PayoutSettingsRequest.

        The date when Adyen starts paying out to this bank account.  Format: [ISO 8601](https://www.w3.org/TR/NOTE-datetime), for example, **2019-11-23T12:25:28Z** or **2020-05-27T20:25:28+08:00**.  If not specified, the `enabled` field indicates if payouts are enabled for this bank account.  If a date is specified and:  * `enabled`: **true**, payouts are enabled starting the specified date. * `enabled`: **false**, payouts are disabled until the specified date. On the specified date, `enabled` changes to **true** and this field is reset to **null**.

        :return: The enabled_from_date of this PayoutSettingsRequest.
        :rtype: str
        """
        return self._enabled_from_date

    @enabled_from_date.setter
    def enabled_from_date(self, enabled_from_date):
        """Sets the enabled_from_date of this PayoutSettingsRequest.

        The date when Adyen starts paying out to this bank account.  Format: [ISO 8601](https://www.w3.org/TR/NOTE-datetime), for example, **2019-11-23T12:25:28Z** or **2020-05-27T20:25:28+08:00**.  If not specified, the `enabled` field indicates if payouts are enabled for this bank account.  If a date is specified and:  * `enabled`: **true**, payouts are enabled starting the specified date. * `enabled`: **false**, payouts are disabled until the specified date. On the specified date, `enabled` changes to **true** and this field is reset to **null**.

        :param enabled_from_date: The enabled_from_date of this PayoutSettingsRequest.
        :type enabled_from_date: str
        """

        self._enabled_from_date = enabled_from_date

    @property
    def transfer_instrument_id(self):
        """Gets the transfer_instrument_id of this PayoutSettingsRequest.

        The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.

        :return: The transfer_instrument_id of this PayoutSettingsRequest.
        :rtype: str
        """
        return self._transfer_instrument_id

    @transfer_instrument_id.setter
    def transfer_instrument_id(self, transfer_instrument_id):
        """Sets the transfer_instrument_id of this PayoutSettingsRequest.

        The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.

        :param transfer_instrument_id: The transfer_instrument_id of this PayoutSettingsRequest.
        :type transfer_instrument_id: str
        """
        if transfer_instrument_id is None:
            raise ValueError("Invalid value for `transfer_instrument_id`, must not be `None`")

        self._transfer_instrument_id = transfer_instrument_id
