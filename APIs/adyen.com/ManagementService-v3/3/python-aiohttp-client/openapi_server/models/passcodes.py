# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Passcodes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_menu_pin: str=None, refund_pin: str=None, screen_lock_pin: str=None, tx_menu_pin: str=None):
        """Passcodes - a model defined in OpenAPI

        :param admin_menu_pin: The admin_menu_pin of this Passcodes.
        :param refund_pin: The refund_pin of this Passcodes.
        :param screen_lock_pin: The screen_lock_pin of this Passcodes.
        :param tx_menu_pin: The tx_menu_pin of this Passcodes.
        """
        self.openapi_types = {
            'admin_menu_pin': str,
            'refund_pin': str,
            'screen_lock_pin': str,
            'tx_menu_pin': str
        }

        self.attribute_map = {
            'admin_menu_pin': 'adminMenuPin',
            'refund_pin': 'refundPin',
            'screen_lock_pin': 'screenLockPin',
            'tx_menu_pin': 'txMenuPin'
        }

        self._admin_menu_pin = admin_menu_pin
        self._refund_pin = refund_pin
        self._screen_lock_pin = screen_lock_pin
        self._tx_menu_pin = tx_menu_pin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Passcodes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Passcodes of this Passcodes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_menu_pin(self):
        """Gets the admin_menu_pin of this Passcodes.

        The passcode for the Admin menu and the Settings menu.

        :return: The admin_menu_pin of this Passcodes.
        :rtype: str
        """
        return self._admin_menu_pin

    @admin_menu_pin.setter
    def admin_menu_pin(self, admin_menu_pin):
        """Sets the admin_menu_pin of this Passcodes.

        The passcode for the Admin menu and the Settings menu.

        :param admin_menu_pin: The admin_menu_pin of this Passcodes.
        :type admin_menu_pin: str
        """
        if admin_menu_pin is not None and len(admin_menu_pin) > 6:
            raise ValueError("Invalid value for `admin_menu_pin`, length must be less than or equal to `6`")

        self._admin_menu_pin = admin_menu_pin

    @property
    def refund_pin(self):
        """Gets the refund_pin of this Passcodes.

        The passcode for referenced and unreferenced refunds on standalone terminals.

        :return: The refund_pin of this Passcodes.
        :rtype: str
        """
        return self._refund_pin

    @refund_pin.setter
    def refund_pin(self, refund_pin):
        """Sets the refund_pin of this Passcodes.

        The passcode for referenced and unreferenced refunds on standalone terminals.

        :param refund_pin: The refund_pin of this Passcodes.
        :type refund_pin: str
        """
        if refund_pin is not None and len(refund_pin) > 6:
            raise ValueError("Invalid value for `refund_pin`, length must be less than or equal to `6`")

        self._refund_pin = refund_pin

    @property
    def screen_lock_pin(self):
        """Gets the screen_lock_pin of this Passcodes.

        The passcode to unlock the terminal screen after a timeout.

        :return: The screen_lock_pin of this Passcodes.
        :rtype: str
        """
        return self._screen_lock_pin

    @screen_lock_pin.setter
    def screen_lock_pin(self, screen_lock_pin):
        """Sets the screen_lock_pin of this Passcodes.

        The passcode to unlock the terminal screen after a timeout.

        :param screen_lock_pin: The screen_lock_pin of this Passcodes.
        :type screen_lock_pin: str
        """
        if screen_lock_pin is not None and len(screen_lock_pin) > 6:
            raise ValueError("Invalid value for `screen_lock_pin`, length must be less than or equal to `6`")
        if screen_lock_pin is not None and len(screen_lock_pin) < 4:
            raise ValueError("Invalid value for `screen_lock_pin`, length must be greater than or equal to `4`")

        self._screen_lock_pin = screen_lock_pin

    @property
    def tx_menu_pin(self):
        """Gets the tx_menu_pin of this Passcodes.

        The passcode for the Transactions menu.

        :return: The tx_menu_pin of this Passcodes.
        :rtype: str
        """
        return self._tx_menu_pin

    @tx_menu_pin.setter
    def tx_menu_pin(self, tx_menu_pin):
        """Sets the tx_menu_pin of this Passcodes.

        The passcode for the Transactions menu.

        :param tx_menu_pin: The tx_menu_pin of this Passcodes.
        :type tx_menu_pin: str
        """
        if tx_menu_pin is not None and len(tx_menu_pin) > 6:
            raise ValueError("Invalid value for `tx_menu_pin`, length must be less than or equal to `6`")

        self._tx_menu_pin = tx_menu_pin
