# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class CustomNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, event_code: str=None, event_date: datetime=None, merchant_reference: str=None, payment_method: str=None, reason: str=None, success: bool=None):
        """CustomNotification - a model defined in OpenAPI

        :param amount: The amount of this CustomNotification.
        :param event_code: The event_code of this CustomNotification.
        :param event_date: The event_date of this CustomNotification.
        :param merchant_reference: The merchant_reference of this CustomNotification.
        :param payment_method: The payment_method of this CustomNotification.
        :param reason: The reason of this CustomNotification.
        :param success: The success of this CustomNotification.
        """
        self.openapi_types = {
            'amount': Amount,
            'event_code': str,
            'event_date': datetime,
            'merchant_reference': str,
            'payment_method': str,
            'reason': str,
            'success': bool
        }

        self.attribute_map = {
            'amount': 'amount',
            'event_code': 'eventCode',
            'event_date': 'eventDate',
            'merchant_reference': 'merchantReference',
            'payment_method': 'paymentMethod',
            'reason': 'reason',
            'success': 'success'
        }

        self._amount = amount
        self._event_code = event_code
        self._event_date = event_date
        self._merchant_reference = merchant_reference
        self._payment_method = payment_method
        self._reason = reason
        self._success = success

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomNotification of this CustomNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CustomNotification.

        The amount of the payment that the notification is about. Set the value in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The amount of this CustomNotification.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CustomNotification.

        The amount of the payment that the notification is about. Set the value in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param amount: The amount of this CustomNotification.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def event_code(self):
        """Gets the event_code of this CustomNotification.

        The event that caused the notification to be sent.Currently supported values: * **AUTHORISATION** * **CANCELLATION** * **REFUND** * **CAPTURE** * **REPORT_AVAILABLE** * **CHARGEBACK** * **REQUEST_FOR_INFORMATION** * **NOTIFICATION_OF_CHARGEBACK** * **NOTIFICATIONTEST** * **ORDER_OPENED** * **ORDER_CLOSED** * **CHARGEBACK_REVERSED** * **REFUNDED_REVERSED** * **REFUND_WITH_DATA**

        :return: The event_code of this CustomNotification.
        :rtype: str
        """
        return self._event_code

    @event_code.setter
    def event_code(self, event_code):
        """Sets the event_code of this CustomNotification.

        The event that caused the notification to be sent.Currently supported values: * **AUTHORISATION** * **CANCELLATION** * **REFUND** * **CAPTURE** * **REPORT_AVAILABLE** * **CHARGEBACK** * **REQUEST_FOR_INFORMATION** * **NOTIFICATION_OF_CHARGEBACK** * **NOTIFICATIONTEST** * **ORDER_OPENED** * **ORDER_CLOSED** * **CHARGEBACK_REVERSED** * **REFUNDED_REVERSED** * **REFUND_WITH_DATA**

        :param event_code: The event_code of this CustomNotification.
        :type event_code: str
        """

        self._event_code = event_code

    @property
    def event_date(self):
        """Gets the event_date of this CustomNotification.

        The time of the event. Format: [ISO 8601](http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDThh:mm:ssTZD.

        :return: The event_date of this CustomNotification.
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this CustomNotification.

        The time of the event. Format: [ISO 8601](http://www.w3.org/TR/NOTE-datetime), YYYY-MM-DDThh:mm:ssTZD.

        :param event_date: The event_date of this CustomNotification.
        :type event_date: datetime
        """

        self._event_date = event_date

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this CustomNotification.

        Your reference for the custom test notification.

        :return: The merchant_reference of this CustomNotification.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this CustomNotification.

        Your reference for the custom test notification.

        :param merchant_reference: The merchant_reference of this CustomNotification.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def payment_method(self):
        """Gets the payment_method of this CustomNotification.

        The payment method for the payment that the notification is about. Possible values: * **amex** * **visa** * **mc** * **maestro** * **bcmc** * **paypal**  * **sms**  * **bankTransfer_NL** * **bankTransfer_DE** * **bankTransfer_BE** * **ideal** * **elv** * **sepadirectdebit** 

        :return: The payment_method of this CustomNotification.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CustomNotification.

        The payment method for the payment that the notification is about. Possible values: * **amex** * **visa** * **mc** * **maestro** * **bcmc** * **paypal**  * **sms**  * **bankTransfer_NL** * **bankTransfer_DE** * **bankTransfer_BE** * **ideal** * **elv** * **sepadirectdebit** 

        :param payment_method: The payment_method of this CustomNotification.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def reason(self):
        """Gets the reason of this CustomNotification.

        A descripton of what caused the notification.

        :return: The reason of this CustomNotification.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CustomNotification.

        A descripton of what caused the notification.

        :param reason: The reason of this CustomNotification.
        :type reason: str
        """

        self._reason = reason

    @property
    def success(self):
        """Gets the success of this CustomNotification.

        The outcome of the event which the notification is about. Set to either **true** or **false**. 

        :return: The success of this CustomNotification.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CustomNotification.

        The outcome of the event which the notification is about. Set to either **true** or **false**. 

        :param success: The success of this CustomNotification.
        :type success: bool
        """

        self._success = success
