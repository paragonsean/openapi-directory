# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_commission import AdditionalCommission
from openapi_server.models.commission import Commission
from openapi_server import util


class SplitConfigurationLogic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquiring_fees: str=None, additional_commission: AdditionalCommission=None, adyen_commission: str=None, adyen_fees: str=None, adyen_markup: str=None, chargeback: str=None, chargeback_cost_allocation: str=None, commission: Commission=None, interchange: str=None, payment_fee: str=None, remainder: str=None, scheme_fee: str=None, split_logic_id: str=None, surcharge: str=None, tip: str=None):
        """SplitConfigurationLogic - a model defined in OpenAPI

        :param acquiring_fees: The acquiring_fees of this SplitConfigurationLogic.
        :param additional_commission: The additional_commission of this SplitConfigurationLogic.
        :param adyen_commission: The adyen_commission of this SplitConfigurationLogic.
        :param adyen_fees: The adyen_fees of this SplitConfigurationLogic.
        :param adyen_markup: The adyen_markup of this SplitConfigurationLogic.
        :param chargeback: The chargeback of this SplitConfigurationLogic.
        :param chargeback_cost_allocation: The chargeback_cost_allocation of this SplitConfigurationLogic.
        :param commission: The commission of this SplitConfigurationLogic.
        :param interchange: The interchange of this SplitConfigurationLogic.
        :param payment_fee: The payment_fee of this SplitConfigurationLogic.
        :param remainder: The remainder of this SplitConfigurationLogic.
        :param scheme_fee: The scheme_fee of this SplitConfigurationLogic.
        :param split_logic_id: The split_logic_id of this SplitConfigurationLogic.
        :param surcharge: The surcharge of this SplitConfigurationLogic.
        :param tip: The tip of this SplitConfigurationLogic.
        """
        self.openapi_types = {
            'acquiring_fees': str,
            'additional_commission': AdditionalCommission,
            'adyen_commission': str,
            'adyen_fees': str,
            'adyen_markup': str,
            'chargeback': str,
            'chargeback_cost_allocation': str,
            'commission': Commission,
            'interchange': str,
            'payment_fee': str,
            'remainder': str,
            'scheme_fee': str,
            'split_logic_id': str,
            'surcharge': str,
            'tip': str
        }

        self.attribute_map = {
            'acquiring_fees': 'acquiringFees',
            'additional_commission': 'additionalCommission',
            'adyen_commission': 'adyenCommission',
            'adyen_fees': 'adyenFees',
            'adyen_markup': 'adyenMarkup',
            'chargeback': 'chargeback',
            'chargeback_cost_allocation': 'chargebackCostAllocation',
            'commission': 'commission',
            'interchange': 'interchange',
            'payment_fee': 'paymentFee',
            'remainder': 'remainder',
            'scheme_fee': 'schemeFee',
            'split_logic_id': 'splitLogicId',
            'surcharge': 'surcharge',
            'tip': 'tip'
        }

        self._acquiring_fees = acquiring_fees
        self._additional_commission = additional_commission
        self._adyen_commission = adyen_commission
        self._adyen_fees = adyen_fees
        self._adyen_markup = adyen_markup
        self._chargeback = chargeback
        self._chargeback_cost_allocation = chargeback_cost_allocation
        self._commission = commission
        self._interchange = interchange
        self._payment_fee = payment_fee
        self._remainder = remainder
        self._scheme_fee = scheme_fee
        self._split_logic_id = split_logic_id
        self._surcharge = surcharge
        self._tip = tip

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SplitConfigurationLogic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SplitConfigurationLogic of this SplitConfigurationLogic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquiring_fees(self):
        """Gets the acquiring_fees of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with adyenFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The acquiring_fees of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._acquiring_fees

    @acquiring_fees.setter
    def acquiring_fees(self, acquiring_fees):
        """Sets the acquiring_fees of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with adyenFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param acquiring_fees: The acquiring_fees of this SplitConfigurationLogic.
        :type acquiring_fees: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if acquiring_fees not in allowed_values:
            raise ValueError(
                "Invalid value for `acquiring_fees` ({0}), must be one of {1}"
                .format(acquiring_fees, allowed_values)
            )

        self._acquiring_fees = acquiring_fees

    @property
    def additional_commission(self):
        """Gets the additional_commission of this SplitConfigurationLogic.

        Contains the logic used to calculate your user's commission, booked directly to their balance account.

        :return: The additional_commission of this SplitConfigurationLogic.
        :rtype: AdditionalCommission
        """
        return self._additional_commission

    @additional_commission.setter
    def additional_commission(self, additional_commission):
        """Sets the additional_commission of this SplitConfigurationLogic.

        Contains the logic used to calculate your user's commission, booked directly to their balance account.

        :param additional_commission: The additional_commission of this SplitConfigurationLogic.
        :type additional_commission: AdditionalCommission
        """

        self._additional_commission = additional_commission

    @property
    def adyen_commission(self):
        """Gets the adyen_commission of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, interchange & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The adyen_commission of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._adyen_commission

    @adyen_commission.setter
    def adyen_commission(self, adyen_commission):
        """Sets the adyen_commission of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, interchange & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param adyen_commission: The adyen_commission of this SplitConfigurationLogic.
        :type adyen_commission: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if adyen_commission not in allowed_values:
            raise ValueError(
                "Invalid value for `adyen_commission` ({0}), must be one of {1}"
                .format(adyen_commission, allowed_values)
            )

        self._adyen_commission = adyen_commission

    @property
    def adyen_fees(self):
        """Gets the adyen_fees of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with acquiringFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The adyen_fees of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._adyen_fees

    @adyen_fees.setter
    def adyen_fees(self, adyen_fees):
        """Sets the adyen_fees of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with acquiringFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param adyen_fees: The adyen_fees of this SplitConfigurationLogic.
        :type adyen_fees: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if adyen_fees not in allowed_values:
            raise ValueError(
                "Invalid value for `adyen_fees` ({0}), must be one of {1}"
                .format(adyen_fees, allowed_values)
            )

        self._adyen_fees = adyen_fees

    @property
    def adyen_markup(self):
        """Gets the adyen_markup of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & interchange.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The adyen_markup of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._adyen_markup

    @adyen_markup.setter
    def adyen_markup(self, adyen_markup):
        """Sets the adyen_markup of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & interchange.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param adyen_markup: The adyen_markup of this SplitConfigurationLogic.
        :type adyen_markup: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if adyen_markup not in allowed_values:
            raise ValueError(
                "Invalid value for `adyen_markup` ({0}), must be one of {1}"
                .format(adyen_markup, allowed_values)
            )

        self._adyen_markup = adyen_markup

    @property
    def chargeback(self):
        """Gets the chargeback of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.

        :return: The chargeback of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._chargeback

    @chargeback.setter
    def chargeback(self, chargeback):
        """Sets the chargeback of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.

        :param chargeback: The chargeback of this SplitConfigurationLogic.
        :type chargeback: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount", "deductAccordingToSplitRatio"]  # noqa: E501
        if chargeback not in allowed_values:
            raise ValueError(
                "Invalid value for `chargeback` ({0}), must be one of {1}"
                .format(chargeback, allowed_values)
            )

        self._chargeback = chargeback

    @property
    def chargeback_cost_allocation(self):
        """Gets the chargeback_cost_allocation of this SplitConfigurationLogic.

        Specifies the logic to apply when allocating the chargeback costs.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**

        :return: The chargeback_cost_allocation of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._chargeback_cost_allocation

    @chargeback_cost_allocation.setter
    def chargeback_cost_allocation(self, chargeback_cost_allocation):
        """Sets the chargeback_cost_allocation of this SplitConfigurationLogic.

        Specifies the logic to apply when allocating the chargeback costs.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**

        :param chargeback_cost_allocation: The chargeback_cost_allocation of this SplitConfigurationLogic.
        :type chargeback_cost_allocation: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if chargeback_cost_allocation not in allowed_values:
            raise ValueError(
                "Invalid value for `chargeback_cost_allocation` ({0}), must be one of {1}"
                .format(chargeback_cost_allocation, allowed_values)
            )

        self._chargeback_cost_allocation = chargeback_cost_allocation

    @property
    def commission(self):
        """Gets the commission of this SplitConfigurationLogic.

        Contains the logic used to the calculate your platform's commission, booked to your liable balance account.

        :return: The commission of this SplitConfigurationLogic.
        :rtype: Commission
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this SplitConfigurationLogic.

        Contains the logic used to the calculate your platform's commission, booked to your liable balance account.

        :param commission: The commission of this SplitConfigurationLogic.
        :type commission: Commission
        """
        if commission is None:
            raise ValueError("Invalid value for `commission`, must not be `None`")

        self._commission = commission

    @property
    def interchange(self):
        """Gets the interchange of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The interchange of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._interchange

    @interchange.setter
    def interchange(self, interchange):
        """Sets the interchange of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param interchange: The interchange of this SplitConfigurationLogic.
        :type interchange: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if interchange not in allowed_values:
            raise ValueError(
                "Invalid value for `interchange` ({0}), must be one of {1}"
                .format(interchange, allowed_values)
            )

        self._interchange = interchange

    @property
    def payment_fee(self):
        """Gets the payment_fee of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Cannot be combined with other fees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The payment_fee of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._payment_fee

    @payment_fee.setter
    def payment_fee(self, payment_fee):
        """Sets the payment_fee of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Cannot be combined with other fees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param payment_fee: The payment_fee of this SplitConfigurationLogic.
        :type payment_fee: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if payment_fee not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_fee` ({0}), must be one of {1}"
                .format(payment_fee, allowed_values)
            )

        self._payment_fee = payment_fee

    @property
    def remainder(self):
        """Gets the remainder of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the amount left over after currency conversion.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.

        :return: The remainder of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._remainder

    @remainder.setter
    def remainder(self, remainder):
        """Sets the remainder of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the amount left over after currency conversion.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.

        :param remainder: The remainder of this SplitConfigurationLogic.
        :type remainder: str
        """
        allowed_values = ["addToLiableAccount", "addToOneBalanceAccount"]  # noqa: E501
        if remainder not in allowed_values:
            raise ValueError(
                "Invalid value for `remainder` ({0}), must be one of {1}"
                .format(remainder, allowed_values)
            )

        self._remainder = remainder

    @property
    def scheme_fee(self):
        """Gets the scheme_fee of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with interchange, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :return: The scheme_fee of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._scheme_fee

    @scheme_fee.setter
    def scheme_fee(self, scheme_fee):
        """Sets the scheme_fee of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the transaction fees. Should be combined with interchange, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.

        :param scheme_fee: The scheme_fee of this SplitConfigurationLogic.
        :type scheme_fee: str
        """
        allowed_values = ["deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if scheme_fee not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_fee` ({0}), must be one of {1}"
                .format(scheme_fee, allowed_values)
            )

        self._scheme_fee = scheme_fee

    @property
    def split_logic_id(self):
        """Gets the split_logic_id of this SplitConfigurationLogic.

        Unique identifier of the split logic that is applied when the split configuration conditions are met.

        :return: The split_logic_id of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._split_logic_id

    @split_logic_id.setter
    def split_logic_id(self, split_logic_id):
        """Sets the split_logic_id of this SplitConfigurationLogic.

        Unique identifier of the split logic that is applied when the split configuration conditions are met.

        :param split_logic_id: The split_logic_id of this SplitConfigurationLogic.
        :type split_logic_id: str
        """

        self._split_logic_id = split_logic_id

    @property
    def surcharge(self):
        """Gets the surcharge of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the surcharge amount.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**

        :return: The surcharge of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this SplitConfigurationLogic.

        Specifies the logic to apply when booking the surcharge amount.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**

        :param surcharge: The surcharge of this SplitConfigurationLogic.
        :type surcharge: str
        """
        allowed_values = ["addToLiableAccount", "addToOneBalanceAccount"]  # noqa: E501
        if surcharge not in allowed_values:
            raise ValueError(
                "Invalid value for `surcharge` ({0}), must be one of {1}"
                .format(surcharge, allowed_values)
            )

        self._surcharge = surcharge

    @property
    def tip(self):
        """Gets the tip of this SplitConfigurationLogic.

        Specifies the logic to apply when booking tips (gratuity).  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.

        :return: The tip of this SplitConfigurationLogic.
        :rtype: str
        """
        return self._tip

    @tip.setter
    def tip(self, tip):
        """Sets the tip of this SplitConfigurationLogic.

        Specifies the logic to apply when booking tips (gratuity).  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.

        :param tip: The tip of this SplitConfigurationLogic.
        :type tip: str
        """
        allowed_values = ["addToLiableAccount", "addToOneBalanceAccount"]  # noqa: E501
        if tip not in allowed_values:
            raise ValueError(
                "Invalid value for `tip` ({0}), must be one of {1}"
                .format(tip, allowed_values)
            )

        self._tip = tip
