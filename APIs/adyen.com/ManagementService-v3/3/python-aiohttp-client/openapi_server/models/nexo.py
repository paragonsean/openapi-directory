# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_url import EventUrl
from openapi_server.models.key import Key
from openapi_server.models.notification import Notification
from openapi_server.models.notification_url import NotificationUrl
from openapi_server import util


class Nexo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_urls: NotificationUrl=None, encryption_key: Key=None, event_urls: EventUrl=None, nexo_event_urls: List[str]=None, notification: Notification=None):
        """Nexo - a model defined in OpenAPI

        :param display_urls: The display_urls of this Nexo.
        :param encryption_key: The encryption_key of this Nexo.
        :param event_urls: The event_urls of this Nexo.
        :param nexo_event_urls: The nexo_event_urls of this Nexo.
        :param notification: The notification of this Nexo.
        """
        self.openapi_types = {
            'display_urls': NotificationUrl,
            'encryption_key': Key,
            'event_urls': EventUrl,
            'nexo_event_urls': List[str],
            'notification': Notification
        }

        self.attribute_map = {
            'display_urls': 'displayUrls',
            'encryption_key': 'encryptionKey',
            'event_urls': 'eventUrls',
            'nexo_event_urls': 'nexoEventUrls',
            'notification': 'notification'
        }

        self._display_urls = display_urls
        self._encryption_key = encryption_key
        self._event_urls = event_urls
        self._nexo_event_urls = nexo_event_urls
        self._notification = notification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Nexo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Nexo of this Nexo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_urls(self):
        """Gets the display_urls of this Nexo.

        The list of local and public URLs to send display notifications to when using Terminal API.

        :return: The display_urls of this Nexo.
        :rtype: NotificationUrl
        """
        return self._display_urls

    @display_urls.setter
    def display_urls(self, display_urls):
        """Sets the display_urls of this Nexo.

        The list of local and public URLs to send display notifications to when using Terminal API.

        :param display_urls: The display_urls of this Nexo.
        :type display_urls: NotificationUrl
        """

        self._display_urls = display_urls

    @property
    def encryption_key(self):
        """Gets the encryption_key of this Nexo.

        The key you share with Adyen to secure local communications when using Terminal API.

        :return: The encryption_key of this Nexo.
        :rtype: Key
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this Nexo.

        The key you share with Adyen to secure local communications when using Terminal API.

        :param encryption_key: The encryption_key of this Nexo.
        :type encryption_key: Key
        """

        self._encryption_key = encryption_key

    @property
    def event_urls(self):
        """Gets the event_urls of this Nexo.

        The list of local and public URLs to send event notifications to when using Terminal API.

        :return: The event_urls of this Nexo.
        :rtype: EventUrl
        """
        return self._event_urls

    @event_urls.setter
    def event_urls(self, event_urls):
        """Sets the event_urls of this Nexo.

        The list of local and public URLs to send event notifications to when using Terminal API.

        :param event_urls: The event_urls of this Nexo.
        :type event_urls: EventUrl
        """

        self._event_urls = event_urls

    @property
    def nexo_event_urls(self):
        """Gets the nexo_event_urls of this Nexo.

        One or more URLs to send event messages to when using Terminal API.

        :return: The nexo_event_urls of this Nexo.
        :rtype: List[str]
        """
        return self._nexo_event_urls

    @nexo_event_urls.setter
    def nexo_event_urls(self, nexo_event_urls):
        """Sets the nexo_event_urls of this Nexo.

        One or more URLs to send event messages to when using Terminal API.

        :param nexo_event_urls: The nexo_event_urls of this Nexo.
        :type nexo_event_urls: List[str]
        """

        self._nexo_event_urls = nexo_event_urls

    @property
    def notification(self):
        """Gets the notification of this Nexo.

        Configures sending event notifications by pressing a button on a terminal, for example used for pay-at-table.

        :return: The notification of this Nexo.
        :rtype: Notification
        """
        return self._notification

    @notification.setter
    def notification(self, notification):
        """Sets the notification of this Nexo.

        Configures sending event notifications by pressing a button on a terminal, for example used for pay-at-table.

        :param notification: The notification of this Nexo.
        :type notification: Notification
        """

        self._notification = notification
