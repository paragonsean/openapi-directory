# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links_element import LinksElement
from openapi_server import util


class PaginationLinks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, first: LinksElement=None, last: LinksElement=None, next: LinksElement=None, prev: LinksElement=None, _self: LinksElement=None):
        """PaginationLinks - a model defined in OpenAPI

        :param first: The first of this PaginationLinks.
        :param last: The last of this PaginationLinks.
        :param next: The next of this PaginationLinks.
        :param prev: The prev of this PaginationLinks.
        :param _self: The _self of this PaginationLinks.
        """
        self.openapi_types = {
            'first': LinksElement,
            'last': LinksElement,
            'next': LinksElement,
            'prev': LinksElement,
            '_self': LinksElement
        }

        self.attribute_map = {
            'first': 'first',
            'last': 'last',
            'next': 'next',
            'prev': 'prev',
            '_self': 'self'
        }

        self._first = first
        self._last = last
        self._next = next
        self._prev = prev
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginationLinks':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginationLinks of this PaginationLinks.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def first(self):
        """Gets the first of this PaginationLinks.

        The first page.

        :return: The first of this PaginationLinks.
        :rtype: LinksElement
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this PaginationLinks.

        The first page.

        :param first: The first of this PaginationLinks.
        :type first: LinksElement
        """
        if first is None:
            raise ValueError("Invalid value for `first`, must not be `None`")

        self._first = first

    @property
    def last(self):
        """Gets the last of this PaginationLinks.

        The last page.

        :return: The last of this PaginationLinks.
        :rtype: LinksElement
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this PaginationLinks.

        The last page.

        :param last: The last of this PaginationLinks.
        :type last: LinksElement
        """
        if last is None:
            raise ValueError("Invalid value for `last`, must not be `None`")

        self._last = last

    @property
    def next(self):
        """Gets the next of this PaginationLinks.

        The next page. Only present if there is a next page.

        :return: The next of this PaginationLinks.
        :rtype: LinksElement
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this PaginationLinks.

        The next page. Only present if there is a next page.

        :param next: The next of this PaginationLinks.
        :type next: LinksElement
        """

        self._next = next

    @property
    def prev(self):
        """Gets the prev of this PaginationLinks.

        The previous page. Only present if there is a previous page.

        :return: The prev of this PaginationLinks.
        :rtype: LinksElement
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this PaginationLinks.

        The previous page. Only present if there is a previous page.

        :param prev: The prev of this PaginationLinks.
        :type prev: LinksElement
        """

        self._prev = prev

    @property
    def _self(self):
        """Gets the _self of this PaginationLinks.

        The current page.

        :return: The _self of this PaginationLinks.
        :rtype: LinksElement
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this PaginationLinks.

        The current page.

        :param _self: The _self of this PaginationLinks.
        :type _self: LinksElement
        """
        if _self is None:
            raise ValueError("Invalid value for `_self`, must not be `None`")

        self.__self = _self
