# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.minor_units_monetary_value import MinorUnitsMonetaryValue
from openapi_server import util


class OfflineProcessing(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chip_floor_limit: int=None, offline_swipe_limits: List[MinorUnitsMonetaryValue]=None):
        """OfflineProcessing - a model defined in OpenAPI

        :param chip_floor_limit: The chip_floor_limit of this OfflineProcessing.
        :param offline_swipe_limits: The offline_swipe_limits of this OfflineProcessing.
        """
        self.openapi_types = {
            'chip_floor_limit': int,
            'offline_swipe_limits': List[MinorUnitsMonetaryValue]
        }

        self.attribute_map = {
            'chip_floor_limit': 'chipFloorLimit',
            'offline_swipe_limits': 'offlineSwipeLimits'
        }

        self._chip_floor_limit = chip_floor_limit
        self._offline_swipe_limits = offline_swipe_limits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OfflineProcessing':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OfflineProcessing of this OfflineProcessing.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chip_floor_limit(self):
        """Gets the chip_floor_limit of this OfflineProcessing.

        The maximum offline transaction amount for chip cards, in the processing currency and specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The chip_floor_limit of this OfflineProcessing.
        :rtype: int
        """
        return self._chip_floor_limit

    @chip_floor_limit.setter
    def chip_floor_limit(self, chip_floor_limit):
        """Sets the chip_floor_limit of this OfflineProcessing.

        The maximum offline transaction amount for chip cards, in the processing currency and specified in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param chip_floor_limit: The chip_floor_limit of this OfflineProcessing.
        :type chip_floor_limit: int
        """

        self._chip_floor_limit = chip_floor_limit

    @property
    def offline_swipe_limits(self):
        """Gets the offline_swipe_limits of this OfflineProcessing.

        The maximum offline transaction amount for swiped cards, in the specified currency.

        :return: The offline_swipe_limits of this OfflineProcessing.
        :rtype: List[MinorUnitsMonetaryValue]
        """
        return self._offline_swipe_limits

    @offline_swipe_limits.setter
    def offline_swipe_limits(self, offline_swipe_limits):
        """Sets the offline_swipe_limits of this OfflineProcessing.

        The maximum offline transaction amount for swiped cards, in the specified currency.

        :param offline_swipe_limits: The offline_swipe_limits of this OfflineProcessing.
        :type offline_swipe_limits: List[MinorUnitsMonetaryValue]
        """

        self._offline_swipe_limits = offline_swipe_limits
