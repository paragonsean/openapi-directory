# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayAtTable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_method: str=None, enable_pay_at_table: bool=None, payment_instrument: str=None):
        """PayAtTable - a model defined in OpenAPI

        :param authentication_method: The authentication_method of this PayAtTable.
        :param enable_pay_at_table: The enable_pay_at_table of this PayAtTable.
        :param payment_instrument: The payment_instrument of this PayAtTable.
        """
        self.openapi_types = {
            'authentication_method': str,
            'enable_pay_at_table': bool,
            'payment_instrument': str
        }

        self.attribute_map = {
            'authentication_method': 'authenticationMethod',
            'enable_pay_at_table': 'enablePayAtTable',
            'payment_instrument': 'paymentInstrument'
        }

        self._authentication_method = authentication_method
        self._enable_pay_at_table = enable_pay_at_table
        self._payment_instrument = payment_instrument

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayAtTable':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayAtTable of this PayAtTable.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_method(self):
        """Gets the authentication_method of this PayAtTable.

        Allowed authentication methods: Magswipe, Manual Entry.

        :return: The authentication_method of this PayAtTable.
        :rtype: str
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this PayAtTable.

        Allowed authentication methods: Magswipe, Manual Entry.

        :param authentication_method: The authentication_method of this PayAtTable.
        :type authentication_method: str
        """
        allowed_values = ["MAGSWIPE", "MKE"]  # noqa: E501
        if authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_method` ({0}), must be one of {1}"
                .format(authentication_method, allowed_values)
            )

        self._authentication_method = authentication_method

    @property
    def enable_pay_at_table(self):
        """Gets the enable_pay_at_table of this PayAtTable.

        Enable Pay at table.

        :return: The enable_pay_at_table of this PayAtTable.
        :rtype: bool
        """
        return self._enable_pay_at_table

    @enable_pay_at_table.setter
    def enable_pay_at_table(self, enable_pay_at_table):
        """Sets the enable_pay_at_table of this PayAtTable.

        Enable Pay at table.

        :param enable_pay_at_table: The enable_pay_at_table of this PayAtTable.
        :type enable_pay_at_table: bool
        """

        self._enable_pay_at_table = enable_pay_at_table

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this PayAtTable.

        Sets the allowed payment instrument for Pay at table transactions.  Can be: **cash** or **card**. If not set, the terminal presents both options.

        :return: The payment_instrument of this PayAtTable.
        :rtype: str
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this PayAtTable.

        Sets the allowed payment instrument for Pay at table transactions.  Can be: **cash** or **card**. If not set, the terminal presents both options.

        :param payment_instrument: The payment_instrument of this PayAtTable.
        :type payment_instrument: str
        """
        allowed_values = [None,"Cash", "Card"]  # noqa: E501
        if payment_instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_instrument` ({0}), must be one of {1}"
                .format(payment_instrument, allowed_values)
            )

        self._payment_instrument = payment_instrument
