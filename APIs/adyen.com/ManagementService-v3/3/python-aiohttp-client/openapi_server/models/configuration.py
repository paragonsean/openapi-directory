# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.currency import Currency
from openapi_server import util


class Configuration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, country: List[str]=None, currencies: List[Currency]=None, sources: List[str]=None):
        """Configuration - a model defined in OpenAPI

        :param brand: The brand of this Configuration.
        :param country: The country of this Configuration.
        :param currencies: The currencies of this Configuration.
        :param sources: The sources of this Configuration.
        """
        self.openapi_types = {
            'brand': str,
            'country': List[str],
            'currencies': List[Currency],
            'sources': List[str]
        }

        self.attribute_map = {
            'brand': 'brand',
            'country': 'country',
            'currencies': 'currencies',
            'sources': 'sources'
        }

        self._brand = brand
        self._country = country
        self._currencies = currencies
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Configuration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Configuration of this Configuration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this Configuration.

        Payment method, like **eftpos_australia** or **mc**. See the [possible values](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api). 

        :return: The brand of this Configuration.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this Configuration.

        Payment method, like **eftpos_australia** or **mc**. See the [possible values](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api). 

        :param brand: The brand of this Configuration.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def country(self):
        """Gets the country of this Configuration.

        Countries, to filter different surcharge amounts for domestic or international cards.

        :return: The country of this Configuration.
        :rtype: List[str]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Configuration.

        Countries, to filter different surcharge amounts for domestic or international cards.

        :param country: The country of this Configuration.
        :type country: List[str]
        """

        self._country = country

    @property
    def currencies(self):
        """Gets the currencies of this Configuration.

        Currency, and surcharge percentage or amount.

        :return: The currencies of this Configuration.
        :rtype: List[Currency]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this Configuration.

        Currency, and surcharge percentage or amount.

        :param currencies: The currencies of this Configuration.
        :type currencies: List[Currency]
        """
        if currencies is None:
            raise ValueError("Invalid value for `currencies`, must not be `None`")

        self._currencies = currencies

    @property
    def sources(self):
        """Gets the sources of this Configuration.

        Funding source. Possible values: * **Credit** * **Debit**

        :return: The sources of this Configuration.
        :rtype: List[str]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this Configuration.

        Funding source. Possible values: * **Credit** * **Debit**

        :param sources: The sources of this Configuration.
        :type sources: List[str]
        """

        self._sources = sources
