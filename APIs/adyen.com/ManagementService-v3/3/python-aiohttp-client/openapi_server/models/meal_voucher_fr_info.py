# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MealVoucherFRInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conecs_id: str=None, siret: str=None, sub_types: List[str]=None):
        """MealVoucherFRInfo - a model defined in OpenAPI

        :param conecs_id: The conecs_id of this MealVoucherFRInfo.
        :param siret: The siret of this MealVoucherFRInfo.
        :param sub_types: The sub_types of this MealVoucherFRInfo.
        """
        self.openapi_types = {
            'conecs_id': str,
            'siret': str,
            'sub_types': List[str]
        }

        self.attribute_map = {
            'conecs_id': 'conecsId',
            'siret': 'siret',
            'sub_types': 'subTypes'
        }

        self._conecs_id = conecs_id
        self._siret = siret
        self._sub_types = sub_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MealVoucherFRInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MealVoucherFRInfo of this MealVoucherFRInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conecs_id(self):
        """Gets the conecs_id of this MealVoucherFRInfo.

        Meal Voucher conecsId. Format: digits only

        :return: The conecs_id of this MealVoucherFRInfo.
        :rtype: str
        """
        return self._conecs_id

    @conecs_id.setter
    def conecs_id(self, conecs_id):
        """Sets the conecs_id of this MealVoucherFRInfo.

        Meal Voucher conecsId. Format: digits only

        :param conecs_id: The conecs_id of this MealVoucherFRInfo.
        :type conecs_id: str
        """
        if conecs_id is None:
            raise ValueError("Invalid value for `conecs_id`, must not be `None`")

        self._conecs_id = conecs_id

    @property
    def siret(self):
        """Gets the siret of this MealVoucherFRInfo.

        Meal Voucher siret. Format: 14 digits.

        :return: The siret of this MealVoucherFRInfo.
        :rtype: str
        """
        return self._siret

    @siret.setter
    def siret(self, siret):
        """Sets the siret of this MealVoucherFRInfo.

        Meal Voucher siret. Format: 14 digits.

        :param siret: The siret of this MealVoucherFRInfo.
        :type siret: str
        """
        if siret is None:
            raise ValueError("Invalid value for `siret`, must not be `None`")
        if siret is not None and len(siret) > 14:
            raise ValueError("Invalid value for `siret`, length must be less than or equal to `14`")
        if siret is not None and len(siret) < 14:
            raise ValueError("Invalid value for `siret`, length must be greater than or equal to `14`")

        self._siret = siret

    @property
    def sub_types(self):
        """Gets the sub_types of this MealVoucherFRInfo.

        The list of additional payment methods. Allowed values: **mealVoucher_FR_edenred**, **mealVoucher_FR_groupeup**, **mealVoucher_FR_natixis**, **mealVoucher_FR_sodexo**.

        :return: The sub_types of this MealVoucherFRInfo.
        :rtype: List[str]
        """
        return self._sub_types

    @sub_types.setter
    def sub_types(self, sub_types):
        """Sets the sub_types of this MealVoucherFRInfo.

        The list of additional payment methods. Allowed values: **mealVoucher_FR_edenred**, **mealVoucher_FR_groupeup**, **mealVoucher_FR_natixis**, **mealVoucher_FR_sodexo**.

        :param sub_types: The sub_types of this MealVoucherFRInfo.
        :type sub_types: List[str]
        """
        if sub_types is None:
            raise ValueError("Invalid value for `sub_types`, must not be `None`")

        self._sub_types = sub_types
