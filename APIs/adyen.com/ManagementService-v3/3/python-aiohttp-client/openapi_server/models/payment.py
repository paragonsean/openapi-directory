# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Payment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contactless_currency: str=None, hide_minor_units_in_currencies: List[str]=None):
        """Payment - a model defined in OpenAPI

        :param contactless_currency: The contactless_currency of this Payment.
        :param hide_minor_units_in_currencies: The hide_minor_units_in_currencies of this Payment.
        """
        self.openapi_types = {
            'contactless_currency': str,
            'hide_minor_units_in_currencies': List[str]
        }

        self.attribute_map = {
            'contactless_currency': 'contactlessCurrency',
            'hide_minor_units_in_currencies': 'hideMinorUnitsInCurrencies'
        }

        self._contactless_currency = contactless_currency
        self._hide_minor_units_in_currencies = hide_minor_units_in_currencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payment of this Payment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contactless_currency(self):
        """Gets the contactless_currency of this Payment.

        The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.

        :return: The contactless_currency of this Payment.
        :rtype: str
        """
        return self._contactless_currency

    @contactless_currency.setter
    def contactless_currency(self, contactless_currency):
        """Sets the contactless_currency of this Payment.

        The default currency for contactless payments on the payment terminal, as the three-letter [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code.

        :param contactless_currency: The contactless_currency of this Payment.
        :type contactless_currency: str
        """
        if contactless_currency is not None and len(contactless_currency) > 3:
            raise ValueError("Invalid value for `contactless_currency`, length must be less than or equal to `3`")
        if contactless_currency is not None and len(contactless_currency) < 3:
            raise ValueError("Invalid value for `contactless_currency`, length must be greater than or equal to `3`")

        self._contactless_currency = contactless_currency

    @property
    def hide_minor_units_in_currencies(self):
        """Gets the hide_minor_units_in_currencies of this Payment.

        Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217).

        :return: The hide_minor_units_in_currencies of this Payment.
        :rtype: List[str]
        """
        return self._hide_minor_units_in_currencies

    @hide_minor_units_in_currencies.setter
    def hide_minor_units_in_currencies(self, hide_minor_units_in_currencies):
        """Sets the hide_minor_units_in_currencies of this Payment.

        Hides the minor units for the listed [ISO currency codes](https://en.wikipedia.org/wiki/ISO_4217).

        :param hide_minor_units_in_currencies: The hide_minor_units_in_currencies of this Payment.
        :type hide_minor_units_in_currencies: List[str]
        """

        self._hide_minor_units_in_currencies = hide_minor_units_in_currencies
