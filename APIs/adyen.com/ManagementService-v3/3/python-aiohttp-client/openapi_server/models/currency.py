# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, currency_code: str=None, percentage: float=None):
        """Currency - a model defined in OpenAPI

        :param amount: The amount of this Currency.
        :param currency_code: The currency_code of this Currency.
        :param percentage: The percentage of this Currency.
        """
        self.openapi_types = {
            'amount': int,
            'currency_code': str,
            'percentage': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency_code': 'currencyCode',
            'percentage': 'percentage'
        }

        self._amount = amount
        self._currency_code = currency_code
        self._percentage = percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Currency of this Currency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Currency.

        Surcharge amount per transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The amount of this Currency.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Currency.

        Surcharge amount per transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param amount: The amount of this Currency.
        :type amount: int
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this Currency.

        Three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **AUD**.

        :return: The currency_code of this Currency.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Currency.

        Three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **AUD**.

        :param currency_code: The currency_code of this Currency.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def percentage(self):
        """Gets the percentage of this Currency.

        Surcharge percentage per transaction. The maximum number of decimal places is two. For example, **1%** or **2.27%**.

        :return: The percentage of this Currency.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this Currency.

        Surcharge percentage per transaction. The maximum number of decimal places is two. For example, **1%** or **2.27%**.

        :param percentage: The percentage of this Currency.
        :type percentage: float
        """

        self._percentage = percentage
