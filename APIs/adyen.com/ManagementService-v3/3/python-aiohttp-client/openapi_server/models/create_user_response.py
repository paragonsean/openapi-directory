# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.name import Name
from openapi_server import util


class CreateUserResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: Links=None, account_groups: List[str]=None, active: bool=None, apps: List[str]=None, email: str=None, id: str=None, name: Name=None, roles: List[str]=None, time_zone_code: str=None, username: str=None):
        """CreateUserResponse - a model defined in OpenAPI

        :param links: The links of this CreateUserResponse.
        :param account_groups: The account_groups of this CreateUserResponse.
        :param active: The active of this CreateUserResponse.
        :param apps: The apps of this CreateUserResponse.
        :param email: The email of this CreateUserResponse.
        :param id: The id of this CreateUserResponse.
        :param name: The name of this CreateUserResponse.
        :param roles: The roles of this CreateUserResponse.
        :param time_zone_code: The time_zone_code of this CreateUserResponse.
        :param username: The username of this CreateUserResponse.
        """
        self.openapi_types = {
            'links': Links,
            'account_groups': List[str],
            'active': bool,
            'apps': List[str],
            'email': str,
            'id': str,
            'name': Name,
            'roles': List[str],
            'time_zone_code': str,
            'username': str
        }

        self.attribute_map = {
            'links': '_links',
            'account_groups': 'accountGroups',
            'active': 'active',
            'apps': 'apps',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'roles': 'roles',
            'time_zone_code': 'timeZoneCode',
            'username': 'username'
        }

        self._links = links
        self._account_groups = account_groups
        self._active = active
        self._apps = apps
        self._email = email
        self._id = id
        self._name = name
        self._roles = roles
        self._time_zone_code = time_zone_code
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateUserResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateUserResponse of this CreateUserResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CreateUserResponse.

        References to resources connected with this user.

        :return: The links of this CreateUserResponse.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CreateUserResponse.

        References to resources connected with this user.

        :param links: The links of this CreateUserResponse.
        :type links: Links
        """

        self._links = links

    @property
    def account_groups(self):
        """Gets the account_groups of this CreateUserResponse.

        The list of [account groups](https://docs.adyen.com/account/account-structure#account-groups) associated with this user.

        :return: The account_groups of this CreateUserResponse.
        :rtype: List[str]
        """
        return self._account_groups

    @account_groups.setter
    def account_groups(self, account_groups):
        """Sets the account_groups of this CreateUserResponse.

        The list of [account groups](https://docs.adyen.com/account/account-structure#account-groups) associated with this user.

        :param account_groups: The account_groups of this CreateUserResponse.
        :type account_groups: List[str]
        """

        self._account_groups = account_groups

    @property
    def active(self):
        """Gets the active of this CreateUserResponse.

        Indicates whether this user is active.

        :return: The active of this CreateUserResponse.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this CreateUserResponse.

        Indicates whether this user is active.

        :param active: The active of this CreateUserResponse.
        :type active: bool
        """

        self._active = active

    @property
    def apps(self):
        """Gets the apps of this CreateUserResponse.

        Set of apps available to this user

        :return: The apps of this CreateUserResponse.
        :rtype: List[str]
        """
        return self._apps

    @apps.setter
    def apps(self, apps):
        """Sets the apps of this CreateUserResponse.

        Set of apps available to this user

        :param apps: The apps of this CreateUserResponse.
        :type apps: List[str]
        """

        self._apps = apps

    @property
    def email(self):
        """Gets the email of this CreateUserResponse.

        The email address of the user.

        :return: The email of this CreateUserResponse.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateUserResponse.

        The email address of the user.

        :param email: The email of this CreateUserResponse.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this CreateUserResponse.

        The unique identifier of the user.

        :return: The id of this CreateUserResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateUserResponse.

        The unique identifier of the user.

        :param id: The id of this CreateUserResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateUserResponse.

        The user's full name.

        :return: The name of this CreateUserResponse.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateUserResponse.

        The user's full name.

        :param name: The name of this CreateUserResponse.
        :type name: Name
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this CreateUserResponse.

        The list of [roles](https://docs.adyen.com/account/user-roles) for this user.

        :return: The roles of this CreateUserResponse.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CreateUserResponse.

        The list of [roles](https://docs.adyen.com/account/user-roles) for this user.

        :param roles: The roles of this CreateUserResponse.
        :type roles: List[str]
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles

    @property
    def time_zone_code(self):
        """Gets the time_zone_code of this CreateUserResponse.

        The [tz database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the time zone of the user. For example, **Europe/Amsterdam**.

        :return: The time_zone_code of this CreateUserResponse.
        :rtype: str
        """
        return self._time_zone_code

    @time_zone_code.setter
    def time_zone_code(self, time_zone_code):
        """Sets the time_zone_code of this CreateUserResponse.

        The [tz database name](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) of the time zone of the user. For example, **Europe/Amsterdam**.

        :param time_zone_code: The time_zone_code of this CreateUserResponse.
        :type time_zone_code: str
        """
        if time_zone_code is None:
            raise ValueError("Invalid value for `time_zone_code`, must not be `None`")

        self._time_zone_code = time_zone_code

    @property
    def username(self):
        """Gets the username of this CreateUserResponse.

        The username for this user.

        :return: The username of this CreateUserResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CreateUserResponse.

        The username for this user.

        :param username: The username of this CreateUserResponse.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")
        if username is not None and len(username) > 255:
            raise ValueError("Invalid value for `username`, length must be less than or equal to `255`")
        if username is not None and len(username) < 1:
            raise ValueError("Invalid value for `username`, length must be greater than or equal to `1`")

        self._username = username
