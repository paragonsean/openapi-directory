# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, first_name: str=None, infix: str=None, last_name: str=None, phone_number: str=None):
        """Contact - a model defined in OpenAPI

        :param email: The email of this Contact.
        :param first_name: The first_name of this Contact.
        :param infix: The infix of this Contact.
        :param last_name: The last_name of this Contact.
        :param phone_number: The phone_number of this Contact.
        """
        self.openapi_types = {
            'email': str,
            'first_name': str,
            'infix': str,
            'last_name': str,
            'phone_number': str
        }

        self.attribute_map = {
            'email': 'email',
            'first_name': 'firstName',
            'infix': 'infix',
            'last_name': 'lastName',
            'phone_number': 'phoneNumber'
        }

        self._email = email
        self._first_name = first_name
        self._infix = infix
        self._last_name = last_name
        self._phone_number = phone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Contact of this Contact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Contact.

        The individual's email address.

        :return: The email of this Contact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Contact.

        The individual's email address.

        :param email: The email of this Contact.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Contact.

        The individual's first name.

        :return: The first_name of this Contact.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Contact.

        The individual's first name.

        :param first_name: The first_name of this Contact.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def infix(self):
        """Gets the infix of this Contact.

        The infix in the individual's name, if any.

        :return: The infix of this Contact.
        :rtype: str
        """
        return self._infix

    @infix.setter
    def infix(self, infix):
        """Sets the infix of this Contact.

        The infix in the individual's name, if any.

        :param infix: The infix of this Contact.
        :type infix: str
        """

        self._infix = infix

    @property
    def last_name(self):
        """Gets the last_name of this Contact.

        The individual's last name.

        :return: The last_name of this Contact.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Contact.

        The individual's last name.

        :param last_name: The last_name of this Contact.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def phone_number(self):
        """Gets the phone_number of this Contact.

        The individual's phone number, specified as 10-14 digits with an optional `+` prefix.

        :return: The phone_number of this Contact.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Contact.

        The individual's phone number, specified as 10-14 digits with an optional `+` prefix.

        :param phone_number: The phone_number of this Contact.
        :type phone_number: str
        """

        self._phone_number = phone_number
