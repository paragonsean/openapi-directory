# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.install_android_app_details import InstallAndroidAppDetails
from openapi_server.models.install_android_certificate_details import InstallAndroidCertificateDetails
from openapi_server.models.release_update_details import ReleaseUpdateDetails
from openapi_server.models.uninstall_android_app_details import UninstallAndroidAppDetails
from openapi_server.models.uninstall_android_certificate_details import UninstallAndroidCertificateDetails
from openapi_server import util


class ScheduleTerminalActionsRequestActionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, type: str='InstallAndroidApp', certificate_id: str=None, update_at_first_maintenance_call: bool=None):
        """ScheduleTerminalActionsRequestActionDetails - a model defined in OpenAPI

        :param app_id: The app_id of this ScheduleTerminalActionsRequestActionDetails.
        :param type: The type of this ScheduleTerminalActionsRequestActionDetails.
        :param certificate_id: The certificate_id of this ScheduleTerminalActionsRequestActionDetails.
        :param update_at_first_maintenance_call: The update_at_first_maintenance_call of this ScheduleTerminalActionsRequestActionDetails.
        """
        self.openapi_types = {
            'app_id': str,
            'type': str,
            'certificate_id': str,
            'update_at_first_maintenance_call': bool
        }

        self.attribute_map = {
            'app_id': 'appId',
            'type': 'type',
            'certificate_id': 'certificateId',
            'update_at_first_maintenance_call': 'updateAtFirstMaintenanceCall'
        }

        self._app_id = app_id
        self._type = type
        self._certificate_id = certificate_id
        self._update_at_first_maintenance_call = update_at_first_maintenance_call

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduleTerminalActionsRequestActionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduleTerminalActionsRequest_actionDetails of this ScheduleTerminalActionsRequestActionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this ScheduleTerminalActionsRequestActionDetails.

        The unique identifier of the app to be uninstalled.

        :return: The app_id of this ScheduleTerminalActionsRequestActionDetails.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this ScheduleTerminalActionsRequestActionDetails.

        The unique identifier of the app to be uninstalled.

        :param app_id: The app_id of this ScheduleTerminalActionsRequestActionDetails.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def type(self):
        """Gets the type of this ScheduleTerminalActionsRequestActionDetails.

        Type of terminal action: Install an Android app.

        :return: The type of this ScheduleTerminalActionsRequestActionDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ScheduleTerminalActionsRequestActionDetails.

        Type of terminal action: Install an Android app.

        :param type: The type of this ScheduleTerminalActionsRequestActionDetails.
        :type type: str
        """
        allowed_values = ["InstallAndroidApp", "InstallAndroidCertificate", "ReleaseUpdate", "UninstallAndroidApp", "UninstallAndroidCertificate"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def certificate_id(self):
        """Gets the certificate_id of this ScheduleTerminalActionsRequestActionDetails.

        The unique identifier of the certificate to be uninstalled.

        :return: The certificate_id of this ScheduleTerminalActionsRequestActionDetails.
        :rtype: str
        """
        return self._certificate_id

    @certificate_id.setter
    def certificate_id(self, certificate_id):
        """Sets the certificate_id of this ScheduleTerminalActionsRequestActionDetails.

        The unique identifier of the certificate to be uninstalled.

        :param certificate_id: The certificate_id of this ScheduleTerminalActionsRequestActionDetails.
        :type certificate_id: str
        """

        self._certificate_id = certificate_id

    @property
    def update_at_first_maintenance_call(self):
        """Gets the update_at_first_maintenance_call of this ScheduleTerminalActionsRequestActionDetails.

        Boolean flag that tells if the terminal should update at the first next maintenance call. If false, terminal will update on its configured reboot time.

        :return: The update_at_first_maintenance_call of this ScheduleTerminalActionsRequestActionDetails.
        :rtype: bool
        """
        return self._update_at_first_maintenance_call

    @update_at_first_maintenance_call.setter
    def update_at_first_maintenance_call(self, update_at_first_maintenance_call):
        """Sets the update_at_first_maintenance_call of this ScheduleTerminalActionsRequestActionDetails.

        Boolean flag that tells if the terminal should update at the first next maintenance call. If false, terminal will update on its configured reboot time.

        :param update_at_first_maintenance_call: The update_at_first_maintenance_call of this ScheduleTerminalActionsRequestActionDetails.
        :type update_at_first_maintenance_call: bool
        """

        self._update_at_first_maintenance_call = update_at_first_maintenance_call
