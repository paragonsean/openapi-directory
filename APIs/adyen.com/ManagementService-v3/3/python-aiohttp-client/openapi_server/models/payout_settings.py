# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayoutSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, enabled: bool=None, enabled_from_date: str=None, id: str=None, priority: str=None, transfer_instrument_id: str=None, verification_status: str=None):
        """PayoutSettings - a model defined in OpenAPI

        :param allowed: The allowed of this PayoutSettings.
        :param enabled: The enabled of this PayoutSettings.
        :param enabled_from_date: The enabled_from_date of this PayoutSettings.
        :param id: The id of this PayoutSettings.
        :param priority: The priority of this PayoutSettings.
        :param transfer_instrument_id: The transfer_instrument_id of this PayoutSettings.
        :param verification_status: The verification_status of this PayoutSettings.
        """
        self.openapi_types = {
            'allowed': bool,
            'enabled': bool,
            'enabled_from_date': str,
            'id': str,
            'priority': str,
            'transfer_instrument_id': str,
            'verification_status': str
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'enabled': 'enabled',
            'enabled_from_date': 'enabledFromDate',
            'id': 'id',
            'priority': 'priority',
            'transfer_instrument_id': 'transferInstrumentId',
            'verification_status': 'verificationStatus'
        }

        self._allowed = allowed
        self._enabled = enabled
        self._enabled_from_date = enabled_from_date
        self._id = id
        self._priority = priority
        self._transfer_instrument_id = transfer_instrument_id
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutSettings of this PayoutSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this PayoutSettings.

        Indicates if payouts to the bank account are allowed. This value is set automatically based on the status of the verification process. The value is:  * **true** if `verificationStatus` is **valid**. * **false** for all other values.

        :return: The allowed of this PayoutSettings.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this PayoutSettings.

        Indicates if payouts to the bank account are allowed. This value is set automatically based on the status of the verification process. The value is:  * **true** if `verificationStatus` is **valid**. * **false** for all other values.

        :param allowed: The allowed of this PayoutSettings.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def enabled(self):
        """Gets the enabled of this PayoutSettings.

        Indicates if payouts to this bank account are enabled. Default: **true**.  To receive payouts into this bank account, both `enabled` and `allowed` must be **true**.

        :return: The enabled of this PayoutSettings.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this PayoutSettings.

        Indicates if payouts to this bank account are enabled. Default: **true**.  To receive payouts into this bank account, both `enabled` and `allowed` must be **true**.

        :param enabled: The enabled of this PayoutSettings.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def enabled_from_date(self):
        """Gets the enabled_from_date of this PayoutSettings.

        The date when Adyen starts paying out to this bank account.  Format: [ISO 8601](https://www.w3.org/TR/NOTE-datetime), for example, **2019-11-23T12:25:28Z** or **2020-05-27T20:25:28+08:00**.  If not specified, the `enabled` field indicates if payouts are enabled for this bank account.  If a date is specified and:  * `enabled`: **true**, payouts are enabled starting the specified date. * `enabled`: **false**, payouts are disabled until the specified date. On the specified date, `enabled` changes to **true** and this field is reset to **null**.

        :return: The enabled_from_date of this PayoutSettings.
        :rtype: str
        """
        return self._enabled_from_date

    @enabled_from_date.setter
    def enabled_from_date(self, enabled_from_date):
        """Sets the enabled_from_date of this PayoutSettings.

        The date when Adyen starts paying out to this bank account.  Format: [ISO 8601](https://www.w3.org/TR/NOTE-datetime), for example, **2019-11-23T12:25:28Z** or **2020-05-27T20:25:28+08:00**.  If not specified, the `enabled` field indicates if payouts are enabled for this bank account.  If a date is specified and:  * `enabled`: **true**, payouts are enabled starting the specified date. * `enabled`: **false**, payouts are disabled until the specified date. On the specified date, `enabled` changes to **true** and this field is reset to **null**.

        :param enabled_from_date: The enabled_from_date of this PayoutSettings.
        :type enabled_from_date: str
        """

        self._enabled_from_date = enabled_from_date

    @property
    def id(self):
        """Gets the id of this PayoutSettings.

        The unique identifier of the payout setting.

        :return: The id of this PayoutSettings.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PayoutSettings.

        The unique identifier of the payout setting.

        :param id: The id of this PayoutSettings.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def priority(self):
        """Gets the priority of this PayoutSettings.

        Determines how long it takes for the funds to reach the bank account. Adyen pays out based on the [payout frequency](https://docs.adyen.com/account/getting-paid#payout-frequency). Depending on the currencies and banks involved in transferring the money, it may take up to three days for the payout funds to arrive in the bank account.   Possible values: * **first**: same day. * **urgent**: the next day. * **normal**: between 1 and 3 days.

        :return: The priority of this PayoutSettings.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PayoutSettings.

        Determines how long it takes for the funds to reach the bank account. Adyen pays out based on the [payout frequency](https://docs.adyen.com/account/getting-paid#payout-frequency). Depending on the currencies and banks involved in transferring the money, it may take up to three days for the payout funds to arrive in the bank account.   Possible values: * **first**: same day. * **urgent**: the next day. * **normal**: between 1 and 3 days.

        :param priority: The priority of this PayoutSettings.
        :type priority: str
        """
        allowed_values = ["first", "normal", "urgent"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def transfer_instrument_id(self):
        """Gets the transfer_instrument_id of this PayoutSettings.

        The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.

        :return: The transfer_instrument_id of this PayoutSettings.
        :rtype: str
        """
        return self._transfer_instrument_id

    @transfer_instrument_id.setter
    def transfer_instrument_id(self, transfer_instrument_id):
        """Sets the transfer_instrument_id of this PayoutSettings.

        The unique identifier of the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the bank account.

        :param transfer_instrument_id: The transfer_instrument_id of this PayoutSettings.
        :type transfer_instrument_id: str
        """
        if transfer_instrument_id is None:
            raise ValueError("Invalid value for `transfer_instrument_id`, must not be `None`")

        self._transfer_instrument_id = transfer_instrument_id

    @property
    def verification_status(self):
        """Gets the verification_status of this PayoutSettings.

        The status of the verification process for the bank account.  Possible values: * **valid**: the verification was successful. * **pending**: the verification is in progress. * **invalid**: the information provided is not complete. * **rejected**:  there are reasons to refuse working with this entity.

        :return: The verification_status of this PayoutSettings.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this PayoutSettings.

        The status of the verification process for the bank account.  Possible values: * **valid**: the verification was successful. * **pending**: the verification is in progress. * **invalid**: the information provided is not complete. * **rejected**:  there are reasons to refuse working with this entity.

        :param verification_status: The verification_status of this PayoutSettings.
        :type verification_status: str
        """
        allowed_values = ["invalid", "pending", "rejected", "valid"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status
