# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Gratuity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_custom_amount: bool=None, currency: str=None, predefined_tip_entries: List[str]=None, use_predefined_tip_entries: bool=None):
        """Gratuity - a model defined in OpenAPI

        :param allow_custom_amount: The allow_custom_amount of this Gratuity.
        :param currency: The currency of this Gratuity.
        :param predefined_tip_entries: The predefined_tip_entries of this Gratuity.
        :param use_predefined_tip_entries: The use_predefined_tip_entries of this Gratuity.
        """
        self.openapi_types = {
            'allow_custom_amount': bool,
            'currency': str,
            'predefined_tip_entries': List[str],
            'use_predefined_tip_entries': bool
        }

        self.attribute_map = {
            'allow_custom_amount': 'allowCustomAmount',
            'currency': 'currency',
            'predefined_tip_entries': 'predefinedTipEntries',
            'use_predefined_tip_entries': 'usePredefinedTipEntries'
        }

        self._allow_custom_amount = allow_custom_amount
        self._currency = currency
        self._predefined_tip_entries = predefined_tip_entries
        self._use_predefined_tip_entries = use_predefined_tip_entries

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Gratuity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gratuity of this Gratuity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_custom_amount(self):
        """Gets the allow_custom_amount of this Gratuity.

        Indicates whether one of the predefined tipping options is to let the shopper enter a custom tip. If **true**, only three of the other options defined in `predefinedTipEntries` are shown.

        :return: The allow_custom_amount of this Gratuity.
        :rtype: bool
        """
        return self._allow_custom_amount

    @allow_custom_amount.setter
    def allow_custom_amount(self, allow_custom_amount):
        """Sets the allow_custom_amount of this Gratuity.

        Indicates whether one of the predefined tipping options is to let the shopper enter a custom tip. If **true**, only three of the other options defined in `predefinedTipEntries` are shown.

        :param allow_custom_amount: The allow_custom_amount of this Gratuity.
        :type allow_custom_amount: bool
        """

        self._allow_custom_amount = allow_custom_amount

    @property
    def currency(self):
        """Gets the currency of this Gratuity.

        The currency that the tipping settings apply to.

        :return: The currency of this Gratuity.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Gratuity.

        The currency that the tipping settings apply to.

        :param currency: The currency of this Gratuity.
        :type currency: str
        """

        self._currency = currency

    @property
    def predefined_tip_entries(self):
        """Gets the predefined_tip_entries of this Gratuity.

        Tipping options the shopper can choose from if `usePredefinedTipEntries` is **true**. The maximum number of predefined options is four, or three plus the option to enter a custom tip. The options can be a mix of:  - A percentage of the transaction amount. Example: **5%** - A tip amount in [minor units](https://docs.adyen.com/development-resources/currency-codes). Example: **500** for a EUR 5 tip.

        :return: The predefined_tip_entries of this Gratuity.
        :rtype: List[str]
        """
        return self._predefined_tip_entries

    @predefined_tip_entries.setter
    def predefined_tip_entries(self, predefined_tip_entries):
        """Sets the predefined_tip_entries of this Gratuity.

        Tipping options the shopper can choose from if `usePredefinedTipEntries` is **true**. The maximum number of predefined options is four, or three plus the option to enter a custom tip. The options can be a mix of:  - A percentage of the transaction amount. Example: **5%** - A tip amount in [minor units](https://docs.adyen.com/development-resources/currency-codes). Example: **500** for a EUR 5 tip.

        :param predefined_tip_entries: The predefined_tip_entries of this Gratuity.
        :type predefined_tip_entries: List[str]
        """

        self._predefined_tip_entries = predefined_tip_entries

    @property
    def use_predefined_tip_entries(self):
        """Gets the use_predefined_tip_entries of this Gratuity.

        Indicates whether the terminal shows a prompt to enter a tip (**false**), or predefined tipping options to choose from (**true**).

        :return: The use_predefined_tip_entries of this Gratuity.
        :rtype: bool
        """
        return self._use_predefined_tip_entries

    @use_predefined_tip_entries.setter
    def use_predefined_tip_entries(self, use_predefined_tip_entries):
        """Sets the use_predefined_tip_entries of this Gratuity.

        Indicates whether the terminal shows a prompt to enter a tip (**false**), or predefined tipping options to choose from (**true**).

        :param use_predefined_tip_entries: The use_predefined_tip_entries of this Gratuity.
        :type use_predefined_tip_entries: bool
        """

        self._use_predefined_tip_entries = use_predefined_tip_entries
