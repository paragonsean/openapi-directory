/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AndroidApp;
import org.openapitools.client.model.AndroidAppsResponse;
import org.openapitools.client.model.AndroidCertificatesResponse;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.UploadAndroidAppResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AndroidFilesCompanyLevelApi
 */
@Disabled
public class AndroidFilesCompanyLevelApiTest {

    private final AndroidFilesCompanyLevelApi api = new AndroidFilesCompanyLevelApi();

    /**
     * Get a list of Android apps
     *
     * Returns a list of the Android apps that are available for the company identified in the path.  These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write * Management API—Terminal actions read * Management API—Terminal actions read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompaniesCompanyIdAndroidAppsTest() throws ApiException {
        String companyId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String packageName = null;
        Integer versionCode = null;
        AndroidAppsResponse response = api.getCompaniesCompanyIdAndroidApps(companyId, pageNumber, pageSize, packageName, versionCode);
        // TODO: test validations
    }

    /**
     * Get Android app
     *
     * Returns the details of the Android app identified in the path.  These apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompaniesCompanyIdAndroidAppsIdTest() throws ApiException {
        String companyId = null;
        String id = null;
        AndroidApp response = api.getCompaniesCompanyIdAndroidAppsId(companyId, id);
        // TODO: test validations
    }

    /**
     * Get a list of Android certificates
     *
     * Returns a list of the Android certificates that are available for the company identified in the path. Typically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read * Management API—Android files read and write * Management API—Terminal actions read * Management API—Terminal actions read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompaniesCompanyIdAndroidCertificatesTest() throws ApiException {
        String companyId = null;
        Integer pageNumber = null;
        Integer pageSize = null;
        String certificateName = null;
        AndroidCertificatesResponse response = api.getCompaniesCompanyIdAndroidCertificates(companyId, pageNumber, pageSize, certificateName);
        // TODO: test validations
    }

    /**
     * Upload Android App
     *
     * Uploads an Android APK file to Adyen. The maximum APK file size is 200 MB. To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Android files read and write  &gt;By choosing to upload, install, or run any third-party applications on an Adyen payment terminal, you accept full responsibility and liability for any consequences of uploading, installing, or running any such applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCompaniesCompanyIdAndroidAppsTest() throws ApiException {
        String companyId = null;
        UploadAndroidAppResponse response = api.postCompaniesCompanyIdAndroidApps(companyId);
        // TODO: test validations
    }

}
