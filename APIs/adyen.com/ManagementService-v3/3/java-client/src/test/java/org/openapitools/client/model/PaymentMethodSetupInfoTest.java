/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AfterpayTouchInfo;
import org.openapitools.client.model.ApplePayInfo;
import org.openapitools.client.model.BcmcInfo;
import org.openapitools.client.model.CartesBancairesInfo;
import org.openapitools.client.model.ClearpayInfo;
import org.openapitools.client.model.GenericPmWithTdiInfo;
import org.openapitools.client.model.GiroPayInfo;
import org.openapitools.client.model.GooglePayInfo;
import org.openapitools.client.model.KlarnaInfo;
import org.openapitools.client.model.MealVoucherFRInfo;
import org.openapitools.client.model.PayPalInfo;
import org.openapitools.client.model.SofortInfo;
import org.openapitools.client.model.SwishInfo;
import org.openapitools.client.model.TwintInfo;
import org.openapitools.client.model.VippsInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentMethodSetupInfo
 */
public class PaymentMethodSetupInfoTest {
    private final PaymentMethodSetupInfo model = new PaymentMethodSetupInfo();

    /**
     * Model tests for PaymentMethodSetupInfo
     */
    @Test
    public void testPaymentMethodSetupInfo() {
        // TODO: test PaymentMethodSetupInfo
    }

    /**
     * Test the property 'afterpayTouch'
     */
    @Test
    public void afterpayTouchTest() {
        // TODO: test afterpayTouch
    }

    /**
     * Test the property 'applePay'
     */
    @Test
    public void applePayTest() {
        // TODO: test applePay
    }

    /**
     * Test the property 'bcmc'
     */
    @Test
    public void bcmcTest() {
        // TODO: test bcmc
    }

    /**
     * Test the property 'businessLineId'
     */
    @Test
    public void businessLineIdTest() {
        // TODO: test businessLineId
    }

    /**
     * Test the property 'cartesBancaires'
     */
    @Test
    public void cartesBancairesTest() {
        // TODO: test cartesBancaires
    }

    /**
     * Test the property 'clearpay'
     */
    @Test
    public void clearpayTest() {
        // TODO: test clearpay
    }

    /**
     * Test the property 'countries'
     */
    @Test
    public void countriesTest() {
        // TODO: test countries
    }

    /**
     * Test the property 'cup'
     */
    @Test
    public void cupTest() {
        // TODO: test cup
    }

    /**
     * Test the property 'currencies'
     */
    @Test
    public void currenciesTest() {
        // TODO: test currencies
    }

    /**
     * Test the property 'customRoutingFlags'
     */
    @Test
    public void customRoutingFlagsTest() {
        // TODO: test customRoutingFlags
    }

    /**
     * Test the property 'diners'
     */
    @Test
    public void dinersTest() {
        // TODO: test diners
    }

    /**
     * Test the property 'discover'
     */
    @Test
    public void discoverTest() {
        // TODO: test discover
    }

    /**
     * Test the property 'eftposAustralia'
     */
    @Test
    public void eftposAustraliaTest() {
        // TODO: test eftposAustralia
    }

    /**
     * Test the property 'giroPay'
     */
    @Test
    public void giroPayTest() {
        // TODO: test giroPay
    }

    /**
     * Test the property 'girocard'
     */
    @Test
    public void girocardTest() {
        // TODO: test girocard
    }

    /**
     * Test the property 'googlePay'
     */
    @Test
    public void googlePayTest() {
        // TODO: test googlePay
    }

    /**
     * Test the property 'ideal'
     */
    @Test
    public void idealTest() {
        // TODO: test ideal
    }

    /**
     * Test the property 'interacCard'
     */
    @Test
    public void interacCardTest() {
        // TODO: test interacCard
    }

    /**
     * Test the property 'jcb'
     */
    @Test
    public void jcbTest() {
        // TODO: test jcb
    }

    /**
     * Test the property 'klarna'
     */
    @Test
    public void klarnaTest() {
        // TODO: test klarna
    }

    /**
     * Test the property 'maestro'
     */
    @Test
    public void maestroTest() {
        // TODO: test maestro
    }

    /**
     * Test the property 'mc'
     */
    @Test
    public void mcTest() {
        // TODO: test mc
    }

    /**
     * Test the property 'mealVoucherFR'
     */
    @Test
    public void mealVoucherFRTest() {
        // TODO: test mealVoucherFR
    }

    /**
     * Test the property 'paypal'
     */
    @Test
    public void paypalTest() {
        // TODO: test paypal
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'shopperInteraction'
     */
    @Test
    public void shopperInteractionTest() {
        // TODO: test shopperInteraction
    }

    /**
     * Test the property 'sofort'
     */
    @Test
    public void sofortTest() {
        // TODO: test sofort
    }

    /**
     * Test the property 'storeIds'
     */
    @Test
    public void storeIdsTest() {
        // TODO: test storeIds
    }

    /**
     * Test the property 'swish'
     */
    @Test
    public void swishTest() {
        // TODO: test swish
    }

    /**
     * Test the property 'twint'
     */
    @Test
    public void twintTest() {
        // TODO: test twint
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'vipps'
     */
    @Test
    public void vippsTest() {
        // TODO: test vipps
    }

    /**
     * Test the property 'visa'
     */
    @Test
    public void visaTest() {
        // TODO: test visa
    }

}
