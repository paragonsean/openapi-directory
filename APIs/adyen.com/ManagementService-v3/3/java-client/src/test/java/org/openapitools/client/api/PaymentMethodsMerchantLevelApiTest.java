/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApplePayInfo;
import org.openapitools.client.model.PaymentMethod;
import org.openapitools.client.model.PaymentMethodResponse;
import org.openapitools.client.model.PaymentMethodSetupInfo;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.UpdatePaymentMethodInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentMethodsMerchantLevelApi
 */
@Disabled
public class PaymentMethodsMerchantLevelApiTest {

    private final PaymentMethodsMerchantLevelApi api = new PaymentMethodsMerchantLevelApi();

    /**
     * Get all payment methods
     *
     * Returns details for all payment methods of the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdPaymentMethodSettingsTest() throws ApiException {
        String merchantId = null;
        String storeId = null;
        String businessLineId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
        PaymentMethodResponse response = api.getMerchantsMerchantIdPaymentMethodSettings(merchantId, storeId, businessLineId, pageSize, pageNumber);
        // TODO: test validations
    }

    /**
     * Get payment method details
     *
     * Returns details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdTest() throws ApiException {
        String merchantId = null;
        String paymentMethodId = null;
        PaymentMethod response = api.getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(merchantId, paymentMethodId);
        // TODO: test validations
    }

    /**
     * Get Apple Pay domains
     *
     * Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomainsTest() throws ApiException {
        String merchantId = null;
        String paymentMethodId = null;
        ApplePayInfo response = api.getMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdGetApplePayDomains(merchantId, paymentMethodId);
        // TODO: test validations
    }

    /**
     * Update a payment method
     *
     * Updates payment method details for the merchant account and the payment method identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdTest() throws ApiException {
        String merchantId = null;
        String paymentMethodId = null;
        UpdatePaymentMethodInfo updatePaymentMethodInfo = null;
        PaymentMethod response = api.patchMerchantsMerchantIdPaymentMethodSettingsPaymentMethodId(merchantId, paymentMethodId, updatePaymentMethodInfo);
        // TODO: test validations
    }

    /**
     * Request a payment method
     *
     * Sends a request to add a new payment method to the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMerchantsMerchantIdPaymentMethodSettingsTest() throws ApiException {
        String merchantId = null;
        PaymentMethodSetupInfo paymentMethodSetupInfo = null;
        PaymentMethod response = api.postMerchantsMerchantIdPaymentMethodSettings(merchantId, paymentMethodSetupInfo);
        // TODO: test validations
    }

    /**
     * Add an Apple Pay domain
     *
     * Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Payment methods read and write 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomainsTest() throws ApiException {
        String merchantId = null;
        String paymentMethodId = null;
        ApplePayInfo applePayInfo = null;
        api.postMerchantsMerchantIdPaymentMethodSettingsPaymentMethodIdAddApplePayDomains(merchantId, paymentMethodId, applePayInfo);
        // TODO: test validations
    }

}
