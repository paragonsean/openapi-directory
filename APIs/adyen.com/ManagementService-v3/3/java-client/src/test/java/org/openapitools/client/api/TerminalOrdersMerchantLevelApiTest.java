/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BillingEntitiesResponse;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.ShippingLocation;
import org.openapitools.client.model.ShippingLocationsResponse;
import org.openapitools.client.model.TerminalModelsResponse;
import org.openapitools.client.model.TerminalOrder;
import org.openapitools.client.model.TerminalOrderRequest;
import org.openapitools.client.model.TerminalOrdersResponse;
import org.openapitools.client.model.TerminalProductsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TerminalOrdersMerchantLevelApi
 */
@Disabled
public class TerminalOrdersMerchantLevelApiTest {

    private final TerminalOrdersMerchantLevelApi api = new TerminalOrdersMerchantLevelApi();

    /**
     * Get a list of billing entities
     *
     * Returns the billing entities of the merchant account identified in the path. A billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdBillingEntitiesTest() throws ApiException {
        String merchantId = null;
        String name = null;
        BillingEntitiesResponse response = api.getMerchantsMerchantIdBillingEntities(merchantId, name);
        // TODO: test validations
    }

    /**
     * Get a list of shipping locations
     *
     * Returns the shipping locations for the merchant account identified in the path. A shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdShippingLocationsTest() throws ApiException {
        String merchantId = null;
        String name = null;
        Integer offset = null;
        Integer limit = null;
        ShippingLocationsResponse response = api.getMerchantsMerchantIdShippingLocations(merchantId, name, offset, limit);
        // TODO: test validations
    }

    /**
     * Get a list of terminal models
     *
     * Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdTerminalModelsTest() throws ApiException {
        String merchantId = null;
        TerminalModelsResponse response = api.getMerchantsMerchantIdTerminalModels(merchantId);
        // TODO: test validations
    }

    /**
     * Get a list of orders
     *
     * Returns a list of terminal products orders for the merchant account identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdTerminalOrdersTest() throws ApiException {
        String merchantId = null;
        String customerOrderReference = null;
        String status = null;
        Integer offset = null;
        Integer limit = null;
        TerminalOrdersResponse response = api.getMerchantsMerchantIdTerminalOrders(merchantId, customerOrderReference, status, offset, limit);
        // TODO: test validations
    }

    /**
     * Get an order
     *
     * Returns the details of the terminal products order identified in the path.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdTerminalOrdersOrderIdTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        TerminalOrder response = api.getMerchantsMerchantIdTerminalOrdersOrderId(merchantId, orderId);
        // TODO: test validations
    }

    /**
     * Get a list of terminal products
     *
     * Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdTerminalProductsTest() throws ApiException {
        String merchantId = null;
        String country = null;
        String terminalModelId = null;
        Integer offset = null;
        Integer limit = null;
        TerminalProductsResponse response = api.getMerchantsMerchantIdTerminalProducts(merchantId, country, terminalModelId, offset, limit);
        // TODO: test validations
    }

    /**
     * Update an order
     *
     * Updates the terminal products order identified in the path. Updating is only possible while the order has the status **Placed**.  The request body only needs to contain what you want to change.  However, to update the products in the &#x60;items&#x60; array, you must provide the entire array. For example, if the array has three items:  To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMerchantsMerchantIdTerminalOrdersOrderIdTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        TerminalOrderRequest terminalOrderRequest = null;
        TerminalOrder response = api.patchMerchantsMerchantIdTerminalOrdersOrderId(merchantId, orderId, terminalOrderRequest);
        // TODO: test validations
    }

    /**
     * Create a shipping location
     *
     * Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to.   To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMerchantsMerchantIdShippingLocationsTest() throws ApiException {
        String merchantId = null;
        ShippingLocation shippingLocation = null;
        ShippingLocation response = api.postMerchantsMerchantIdShippingLocations(merchantId, shippingLocation);
        // TODO: test validations
    }

    /**
     * Create an order
     *
     * Creates an order for payment terminal products for the merchant account identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write &gt;Requests to the Management API test endpoint do not create actual orders for test terminals. To order test terminals, you need to [submit a sales order](https://docs.adyen.com/point-of-sale/managing-terminals/order-terminals/#sales-order-steps) in your Customer Area.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMerchantsMerchantIdTerminalOrdersTest() throws ApiException {
        String merchantId = null;
        TerminalOrderRequest terminalOrderRequest = null;
        TerminalOrder response = api.postMerchantsMerchantIdTerminalOrders(merchantId, terminalOrderRequest);
        // TODO: test validations
    }

    /**
     * Cancel an order
     *
     * Cancels the terminal products order identified in the path. Cancelling is only possible while the order has the status **Placed**. To cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal ordering read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postMerchantsMerchantIdTerminalOrdersOrderIdCancelTest() throws ApiException {
        String merchantId = null;
        String orderId = null;
        TerminalOrder response = api.postMerchantsMerchantIdTerminalOrdersOrderIdCancel(merchantId, orderId);
        // TODO: test validations
    }

}
