/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Logo;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.TerminalSettings;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TerminalSettingsStoreLevelApi
 */
@Disabled
public class TerminalSettingsStoreLevelApiTest {

    private final TerminalSettingsStoreLevelApi api = new TerminalSettingsStoreLevelApi();

    /**
     * Get the terminal logo
     *
     * Returns the logo that is configured for a specific payment terminal model at the store identified in the path.  The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.  This logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdStoresReferenceTerminalLogosTest() throws ApiException {
        String merchantId = null;
        String reference = null;
        String model = null;
        Logo response = api.getMerchantsMerchantIdStoresReferenceTerminalLogos(merchantId, reference, model);
        // TODO: test validations
    }

    /**
     * Get terminal settings
     *
     * Returns the payment terminal settings that are configured for the store identified in the path. These settings apply to all terminals under the store unless different values are configured for an individual terminal.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write  For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role: * Management API—Terminal settings Advanced read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMerchantsMerchantIdStoresReferenceTerminalSettingsTest() throws ApiException {
        String merchantId = null;
        String reference = null;
        TerminalSettings response = api.getMerchantsMerchantIdStoresReferenceTerminalSettings(merchantId, reference);
        // TODO: test validations
    }

    /**
     * Get the terminal logo
     *
     * Returns the logo that is configured for a specific payment terminal model at the store identified in the path.  The logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.  This logo applies to all terminals of that model under the store unless a different logo is configured for an individual terminal.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoresStoreIdTerminalLogosTest() throws ApiException {
        String storeId = null;
        String model = null;
        Logo response = api.getStoresStoreIdTerminalLogos(storeId, model);
        // TODO: test validations
    }

    /**
     * Get terminal settings
     *
     * Returns the payment terminal settings that are configured for the store identified in the path. These settings apply to all terminals under the store unless different values are configured for an individual terminal.  To make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read * Management API—Terminal settings read and write  For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role: * Management API—Terminal settings Advanced read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStoresStoreIdTerminalSettingsTest() throws ApiException {
        String storeId = null;
        TerminalSettings response = api.getStoresStoreIdTerminalSettings(storeId);
        // TODO: test validations
    }

    /**
     * Update the terminal logo
     *
     * Updates the logo that is configured for a specific payment terminal model at the store identified in the path. You can update the logo for only one terminal model at a time. This logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal.   * To change the logo, specify the image file as a Base64-encoded string. * To restore the logo inherited from a higher level (merchant or company account), specify an empty logo value.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMerchantsMerchantIdStoresReferenceTerminalLogosTest() throws ApiException {
        String merchantId = null;
        String reference = null;
        String model = null;
        Logo logo = null;
        Logo response = api.patchMerchantsMerchantIdStoresReferenceTerminalLogos(merchantId, reference, model, logo);
        // TODO: test validations
    }

    /**
     * Update terminal settings
     *
     * Updates payment terminal settings for the store identified in the path. These settings apply to all terminals under the store, unless different values are configured for an individual terminal.  * To change a parameter value, include the full object that contains the parameter, even if you don&#39;t want to change all parameters in the object. * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter. * Objects that are not included in the request are not updated.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write  For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role: * Management API—Terminal settings Advanced read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchMerchantsMerchantIdStoresReferenceTerminalSettingsTest() throws ApiException {
        String merchantId = null;
        String reference = null;
        TerminalSettings terminalSettings = null;
        TerminalSettings response = api.patchMerchantsMerchantIdStoresReferenceTerminalSettings(merchantId, reference, terminalSettings);
        // TODO: test validations
    }

    /**
     * Update the terminal logo
     *
     * Updates the logo that is configured for a specific payment terminal model at the store identified in the path. You can update the logo for only one terminal model at a time. This logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal.   * To change the logo, specify the image file as a Base64-encoded string. * To restore the logo inherited from a higher level (merchant or company account), specify an empty logo value.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchStoresStoreIdTerminalLogosTest() throws ApiException {
        String storeId = null;
        String model = null;
        Logo logo = null;
        Logo response = api.patchStoresStoreIdTerminalLogos(storeId, model, logo);
        // TODO: test validations
    }

    /**
     * Update terminal settings
     *
     * Updates payment terminal settings for the store identified in the path. These settings apply to all terminals under the store, unless different values are configured for an individual terminal.  * To change a parameter value, include the full object that contains the parameter, even if you don&#39;t want to change all parameters in the object. * To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter. * Objects that are not included in the request are not updated.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API—Terminal settings read and write  For [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role: * Management API—Terminal settings Advanced read and write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchStoresStoreIdTerminalSettingsTest() throws ApiException {
        String storeId = null;
        TerminalSettings terminalSettings = null;
        TerminalSettings response = api.patchStoresStoreIdTerminalSettings(storeId, terminalSettings);
        // TODO: test validations
    }

}
