/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CardholderReceipt;
import org.openapitools.client.model.Connectivity;
import org.openapitools.client.model.Gratuity;
import org.openapitools.client.model.Hardware;
import org.openapitools.client.model.Localization;
import org.openapitools.client.model.Nexo;
import org.openapitools.client.model.OfflineProcessing;
import org.openapitools.client.model.Opi;
import org.openapitools.client.model.Passcodes;
import org.openapitools.client.model.PayAtTable;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.ReceiptOptions;
import org.openapitools.client.model.ReceiptPrinting;
import org.openapitools.client.model.Refunds;
import org.openapitools.client.model.Signature;
import org.openapitools.client.model.Standalone;
import org.openapitools.client.model.Surcharge;
import org.openapitools.client.model.TapToPay;
import org.openapitools.client.model.TerminalInstructions;
import org.openapitools.client.model.Timeouts;
import org.openapitools.client.model.WifiProfiles;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for TerminalSettings
 */
public class TerminalSettingsTest {
    private final TerminalSettings model = new TerminalSettings();

    /**
     * Model tests for TerminalSettings
     */
    @Test
    public void testTerminalSettings() {
        // TODO: test TerminalSettings
    }

    /**
     * Test the property 'cardholderReceipt'
     */
    @Test
    public void cardholderReceiptTest() {
        // TODO: test cardholderReceipt
    }

    /**
     * Test the property 'connectivity'
     */
    @Test
    public void connectivityTest() {
        // TODO: test connectivity
    }

    /**
     * Test the property 'gratuities'
     */
    @Test
    public void gratuitiesTest() {
        // TODO: test gratuities
    }

    /**
     * Test the property 'hardware'
     */
    @Test
    public void hardwareTest() {
        // TODO: test hardware
    }

    /**
     * Test the property 'localization'
     */
    @Test
    public void localizationTest() {
        // TODO: test localization
    }

    /**
     * Test the property 'nexo'
     */
    @Test
    public void nexoTest() {
        // TODO: test nexo
    }

    /**
     * Test the property 'offlineProcessing'
     */
    @Test
    public void offlineProcessingTest() {
        // TODO: test offlineProcessing
    }

    /**
     * Test the property 'opi'
     */
    @Test
    public void opiTest() {
        // TODO: test opi
    }

    /**
     * Test the property 'passcodes'
     */
    @Test
    public void passcodesTest() {
        // TODO: test passcodes
    }

    /**
     * Test the property 'payAtTable'
     */
    @Test
    public void payAtTableTest() {
        // TODO: test payAtTable
    }

    /**
     * Test the property 'payment'
     */
    @Test
    public void paymentTest() {
        // TODO: test payment
    }

    /**
     * Test the property 'receiptOptions'
     */
    @Test
    public void receiptOptionsTest() {
        // TODO: test receiptOptions
    }

    /**
     * Test the property 'receiptPrinting'
     */
    @Test
    public void receiptPrintingTest() {
        // TODO: test receiptPrinting
    }

    /**
     * Test the property 'refunds'
     */
    @Test
    public void refundsTest() {
        // TODO: test refunds
    }

    /**
     * Test the property 'signature'
     */
    @Test
    public void signatureTest() {
        // TODO: test signature
    }

    /**
     * Test the property 'standalone'
     */
    @Test
    public void standaloneTest() {
        // TODO: test standalone
    }

    /**
     * Test the property 'surcharge'
     */
    @Test
    public void surchargeTest() {
        // TODO: test surcharge
    }

    /**
     * Test the property 'tapToPay'
     */
    @Test
    public void tapToPayTest() {
        // TODO: test tapToPay
    }

    /**
     * Test the property 'terminalInstructions'
     */
    @Test
    public void terminalInstructionsTest() {
        // TODO: test terminalInstructions
    }

    /**
     * Test the property 'timeouts'
     */
    @Test
    public void timeoutsTest() {
        // TODO: test timeouts
    }

    /**
     * Test the property 'wifiProfiles'
     */
    @Test
    public void wifiProfilesTest() {
        // TODO: test wifiProfiles
    }

}
