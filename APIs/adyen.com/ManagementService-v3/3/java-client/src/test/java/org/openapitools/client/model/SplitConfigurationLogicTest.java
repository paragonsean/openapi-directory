/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalCommission;
import org.openapitools.client.model.Commission;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SplitConfigurationLogic
 */
public class SplitConfigurationLogicTest {
    private final SplitConfigurationLogic model = new SplitConfigurationLogic();

    /**
     * Model tests for SplitConfigurationLogic
     */
    @Test
    public void testSplitConfigurationLogic() {
        // TODO: test SplitConfigurationLogic
    }

    /**
     * Test the property 'acquiringFees'
     */
    @Test
    public void acquiringFeesTest() {
        // TODO: test acquiringFees
    }

    /**
     * Test the property 'additionalCommission'
     */
    @Test
    public void additionalCommissionTest() {
        // TODO: test additionalCommission
    }

    /**
     * Test the property 'adyenCommission'
     */
    @Test
    public void adyenCommissionTest() {
        // TODO: test adyenCommission
    }

    /**
     * Test the property 'adyenFees'
     */
    @Test
    public void adyenFeesTest() {
        // TODO: test adyenFees
    }

    /**
     * Test the property 'adyenMarkup'
     */
    @Test
    public void adyenMarkupTest() {
        // TODO: test adyenMarkup
    }

    /**
     * Test the property 'chargeback'
     */
    @Test
    public void chargebackTest() {
        // TODO: test chargeback
    }

    /**
     * Test the property 'chargebackCostAllocation'
     */
    @Test
    public void chargebackCostAllocationTest() {
        // TODO: test chargebackCostAllocation
    }

    /**
     * Test the property 'commission'
     */
    @Test
    public void commissionTest() {
        // TODO: test commission
    }

    /**
     * Test the property 'interchange'
     */
    @Test
    public void interchangeTest() {
        // TODO: test interchange
    }

    /**
     * Test the property 'paymentFee'
     */
    @Test
    public void paymentFeeTest() {
        // TODO: test paymentFee
    }

    /**
     * Test the property 'remainder'
     */
    @Test
    public void remainderTest() {
        // TODO: test remainder
    }

    /**
     * Test the property 'schemeFee'
     */
    @Test
    public void schemeFeeTest() {
        // TODO: test schemeFee
    }

    /**
     * Test the property 'splitLogicId'
     */
    @Test
    public void splitLogicIdTest() {
        // TODO: test splitLogicId
    }

    /**
     * Test the property 'surcharge'
     */
    @Test
    public void surchargeTest() {
        // TODO: test surcharge
    }

    /**
     * Test the property 'tip'
     */
    @Test
    public void tipTest() {
        // TODO: test tip
    }

}
