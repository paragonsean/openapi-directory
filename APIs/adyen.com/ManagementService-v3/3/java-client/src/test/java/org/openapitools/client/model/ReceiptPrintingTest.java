/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ReceiptPrinting
 */
public class ReceiptPrintingTest {
    private final ReceiptPrinting model = new ReceiptPrinting();

    /**
     * Model tests for ReceiptPrinting
     */
    @Test
    public void testReceiptPrinting() {
        // TODO: test ReceiptPrinting
    }

    /**
     * Test the property 'merchantApproved'
     */
    @Test
    public void merchantApprovedTest() {
        // TODO: test merchantApproved
    }

    /**
     * Test the property 'merchantCancelled'
     */
    @Test
    public void merchantCancelledTest() {
        // TODO: test merchantCancelled
    }

    /**
     * Test the property 'merchantCaptureApproved'
     */
    @Test
    public void merchantCaptureApprovedTest() {
        // TODO: test merchantCaptureApproved
    }

    /**
     * Test the property 'merchantCaptureRefused'
     */
    @Test
    public void merchantCaptureRefusedTest() {
        // TODO: test merchantCaptureRefused
    }

    /**
     * Test the property 'merchantRefundApproved'
     */
    @Test
    public void merchantRefundApprovedTest() {
        // TODO: test merchantRefundApproved
    }

    /**
     * Test the property 'merchantRefundRefused'
     */
    @Test
    public void merchantRefundRefusedTest() {
        // TODO: test merchantRefundRefused
    }

    /**
     * Test the property 'merchantRefused'
     */
    @Test
    public void merchantRefusedTest() {
        // TODO: test merchantRefused
    }

    /**
     * Test the property 'merchantVoid'
     */
    @Test
    public void merchantVoidTest() {
        // TODO: test merchantVoid
    }

    /**
     * Test the property 'shopperApproved'
     */
    @Test
    public void shopperApprovedTest() {
        // TODO: test shopperApproved
    }

    /**
     * Test the property 'shopperCancelled'
     */
    @Test
    public void shopperCancelledTest() {
        // TODO: test shopperCancelled
    }

    /**
     * Test the property 'shopperCaptureApproved'
     */
    @Test
    public void shopperCaptureApprovedTest() {
        // TODO: test shopperCaptureApproved
    }

    /**
     * Test the property 'shopperCaptureRefused'
     */
    @Test
    public void shopperCaptureRefusedTest() {
        // TODO: test shopperCaptureRefused
    }

    /**
     * Test the property 'shopperRefundApproved'
     */
    @Test
    public void shopperRefundApprovedTest() {
        // TODO: test shopperRefundApproved
    }

    /**
     * Test the property 'shopperRefundRefused'
     */
    @Test
    public void shopperRefundRefusedTest() {
        // TODO: test shopperRefundRefused
    }

    /**
     * Test the property 'shopperRefused'
     */
    @Test
    public void shopperRefusedTest() {
        // TODO: test shopperRefused
    }

    /**
     * Test the property 'shopperVoid'
     */
    @Test
    public void shopperVoidTest() {
        // TODO: test shopperVoid
    }

}
