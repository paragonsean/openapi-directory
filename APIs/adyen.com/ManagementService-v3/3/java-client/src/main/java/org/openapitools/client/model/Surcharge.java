/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Surcharge
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Surcharge {
  public static final String SERIALIZED_NAME_ASK_CONFIRMATION = "askConfirmation";
  @SerializedName(SERIALIZED_NAME_ASK_CONFIRMATION)
  private Boolean askConfirmation;

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  private List<ModelConfiguration> configurations = new ArrayList<>();

  public Surcharge() {
  }

  public Surcharge askConfirmation(Boolean askConfirmation) {
    this.askConfirmation = askConfirmation;
    return this;
  }

  /**
   * Show the surcharge details on the terminal, so the shopper can confirm.
   * @return askConfirmation
   */
  @javax.annotation.Nullable
  public Boolean getAskConfirmation() {
    return askConfirmation;
  }

  public void setAskConfirmation(Boolean askConfirmation) {
    this.askConfirmation = askConfirmation;
  }


  public Surcharge configurations(List<ModelConfiguration> configurations) {
    this.configurations = configurations;
    return this;
  }

  public Surcharge addConfigurationsItem(ModelConfiguration configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

  /**
   * Surcharge fees or percentages for specific payment methods, funding sources (credit or debit), and currencies.
   * @return configurations
   */
  @javax.annotation.Nullable
  public List<ModelConfiguration> getConfigurations() {
    return configurations;
  }

  public void setConfigurations(List<ModelConfiguration> configurations) {
    this.configurations = configurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Surcharge surcharge = (Surcharge) o;
    return Objects.equals(this.askConfirmation, surcharge.askConfirmation) &&
        Objects.equals(this.configurations, surcharge.configurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(askConfirmation, configurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Surcharge {\n");
    sb.append("    askConfirmation: ").append(toIndentedString(askConfirmation)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("askConfirmation");
    openapiFields.add("configurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Surcharge
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Surcharge.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Surcharge is not found in the empty JSON string", Surcharge.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Surcharge.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Surcharge` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull()) {
        JsonArray jsonArrayconfigurations = jsonObj.getAsJsonArray("configurations");
        if (jsonArrayconfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configurations` to be an array in the JSON string but got `%s`", jsonObj.get("configurations").toString()));
          }

          // validate the optional field `configurations` (array)
          for (int i = 0; i < jsonArrayconfigurations.size(); i++) {
            ModelConfiguration.validateJsonElement(jsonArrayconfigurations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Surcharge.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Surcharge' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Surcharge> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Surcharge.class));

       return (TypeAdapter<T>) new TypeAdapter<Surcharge>() {
           @Override
           public void write(JsonWriter out, Surcharge value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Surcharge read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Surcharge given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Surcharge
   * @throws IOException if the JSON string is invalid with respect to Surcharge
   */
  public static Surcharge fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Surcharge.class);
  }

  /**
   * Convert an instance of Surcharge to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

