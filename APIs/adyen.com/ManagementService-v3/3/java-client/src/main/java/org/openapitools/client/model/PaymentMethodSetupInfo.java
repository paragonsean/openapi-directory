/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AfterpayTouchInfo;
import org.openapitools.client.model.ApplePayInfo;
import org.openapitools.client.model.BcmcInfo;
import org.openapitools.client.model.CartesBancairesInfo;
import org.openapitools.client.model.ClearpayInfo;
import org.openapitools.client.model.GenericPmWithTdiInfo;
import org.openapitools.client.model.GiroPayInfo;
import org.openapitools.client.model.GooglePayInfo;
import org.openapitools.client.model.KlarnaInfo;
import org.openapitools.client.model.MealVoucherFRInfo;
import org.openapitools.client.model.PayPalInfo;
import org.openapitools.client.model.SofortInfo;
import org.openapitools.client.model.SwishInfo;
import org.openapitools.client.model.TwintInfo;
import org.openapitools.client.model.VippsInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentMethodSetupInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentMethodSetupInfo {
  public static final String SERIALIZED_NAME_AFTERPAY_TOUCH = "afterpayTouch";
  @SerializedName(SERIALIZED_NAME_AFTERPAY_TOUCH)
  private AfterpayTouchInfo afterpayTouch;

  public static final String SERIALIZED_NAME_APPLE_PAY = "applePay";
  @SerializedName(SERIALIZED_NAME_APPLE_PAY)
  private ApplePayInfo applePay;

  public static final String SERIALIZED_NAME_BCMC = "bcmc";
  @SerializedName(SERIALIZED_NAME_BCMC)
  private BcmcInfo bcmc;

  public static final String SERIALIZED_NAME_BUSINESS_LINE_ID = "businessLineId";
  @SerializedName(SERIALIZED_NAME_BUSINESS_LINE_ID)
  private String businessLineId;

  public static final String SERIALIZED_NAME_CARTES_BANCAIRES = "cartesBancaires";
  @SerializedName(SERIALIZED_NAME_CARTES_BANCAIRES)
  private CartesBancairesInfo cartesBancaires;

  public static final String SERIALIZED_NAME_CLEARPAY = "clearpay";
  @SerializedName(SERIALIZED_NAME_CLEARPAY)
  private ClearpayInfo clearpay;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUP = "cup";
  @SerializedName(SERIALIZED_NAME_CUP)
  private GenericPmWithTdiInfo cup;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<String> currencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ROUTING_FLAGS = "customRoutingFlags";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROUTING_FLAGS)
  private List<String> customRoutingFlags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DINERS = "diners";
  @SerializedName(SERIALIZED_NAME_DINERS)
  private GenericPmWithTdiInfo diners;

  public static final String SERIALIZED_NAME_DISCOVER = "discover";
  @SerializedName(SERIALIZED_NAME_DISCOVER)
  private GenericPmWithTdiInfo discover;

  public static final String SERIALIZED_NAME_EFTPOS_AUSTRALIA = "eftpos_australia";
  @SerializedName(SERIALIZED_NAME_EFTPOS_AUSTRALIA)
  private GenericPmWithTdiInfo eftposAustralia;

  public static final String SERIALIZED_NAME_GIRO_PAY = "giroPay";
  @SerializedName(SERIALIZED_NAME_GIRO_PAY)
  private GiroPayInfo giroPay;

  public static final String SERIALIZED_NAME_GIROCARD = "girocard";
  @SerializedName(SERIALIZED_NAME_GIROCARD)
  private GenericPmWithTdiInfo girocard;

  public static final String SERIALIZED_NAME_GOOGLE_PAY = "googlePay";
  @SerializedName(SERIALIZED_NAME_GOOGLE_PAY)
  private GooglePayInfo googlePay;

  public static final String SERIALIZED_NAME_IDEAL = "ideal";
  @SerializedName(SERIALIZED_NAME_IDEAL)
  private GenericPmWithTdiInfo ideal;

  public static final String SERIALIZED_NAME_INTERAC_CARD = "interac_card";
  @SerializedName(SERIALIZED_NAME_INTERAC_CARD)
  private GenericPmWithTdiInfo interacCard;

  public static final String SERIALIZED_NAME_JCB = "jcb";
  @SerializedName(SERIALIZED_NAME_JCB)
  private GenericPmWithTdiInfo jcb;

  public static final String SERIALIZED_NAME_KLARNA = "klarna";
  @SerializedName(SERIALIZED_NAME_KLARNA)
  private KlarnaInfo klarna;

  public static final String SERIALIZED_NAME_MAESTRO = "maestro";
  @SerializedName(SERIALIZED_NAME_MAESTRO)
  private GenericPmWithTdiInfo maestro;

  public static final String SERIALIZED_NAME_MC = "mc";
  @SerializedName(SERIALIZED_NAME_MC)
  private GenericPmWithTdiInfo mc;

  public static final String SERIALIZED_NAME_MEAL_VOUCHER_F_R = "mealVoucher_FR";
  @SerializedName(SERIALIZED_NAME_MEAL_VOUCHER_F_R)
  private MealVoucherFRInfo mealVoucherFR;

  public static final String SERIALIZED_NAME_PAYPAL = "paypal";
  @SerializedName(SERIALIZED_NAME_PAYPAL)
  private PayPalInfo paypal;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  /**
   * The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
   */
  @JsonAdapter(ShopperInteractionEnum.Adapter.class)
  public enum ShopperInteractionEnum {
    E_COMMERCE("eCommerce"),
    
    POS("pos"),
    
    MOTO("moto"),
    
    CONT_AUTH("contAuth");

    private String value;

    ShopperInteractionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShopperInteractionEnum fromValue(String value) {
      for (ShopperInteractionEnum b : ShopperInteractionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShopperInteractionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShopperInteractionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShopperInteractionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShopperInteractionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShopperInteractionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOPPER_INTERACTION = "shopperInteraction";
  @SerializedName(SERIALIZED_NAME_SHOPPER_INTERACTION)
  private ShopperInteractionEnum shopperInteraction;

  public static final String SERIALIZED_NAME_SOFORT = "sofort";
  @SerializedName(SERIALIZED_NAME_SOFORT)
  private SofortInfo sofort;

  public static final String SERIALIZED_NAME_STORE_IDS = "storeIds";
  @SerializedName(SERIALIZED_NAME_STORE_IDS)
  private List<String> storeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SWISH = "swish";
  @SerializedName(SERIALIZED_NAME_SWISH)
  private SwishInfo swish;

  public static final String SERIALIZED_NAME_TWINT = "twint";
  @SerializedName(SERIALIZED_NAME_TWINT)
  private TwintInfo twint;

  /**
   * Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    AFTERPAYTOUCH("afterpaytouch"),
    
    ALIPAY("alipay"),
    
    ALIPAY_HK("alipay_hk"),
    
    AMEX("amex"),
    
    APPLEPAY("applepay"),
    
    BCMC("bcmc"),
    
    BLIK("blik"),
    
    CARTEBANCAIRE("cartebancaire"),
    
    CLEARPAY("clearpay"),
    
    CUP("cup"),
    
    DINERS("diners"),
    
    DIRECTDEBIT_GB("directdebit_GB"),
    
    DISCOVER("discover"),
    
    EBANKING_FI("ebanking_FI"),
    
    EFTPOS_AUSTRALIA("eftpos_australia"),
    
    ELO("elo"),
    
    ELOCREDIT("elocredit"),
    
    ELODEBIT("elodebit"),
    
    GIROCARD("girocard"),
    
    GOOGLEPAY("googlepay"),
    
    HIPER("hiper"),
    
    HIPERCARD("hipercard"),
    
    IDEAL("ideal"),
    
    INTERAC_CARD("interac_card"),
    
    JCB("jcb"),
    
    KLARNA("klarna"),
    
    KLARNA_ACCOUNT("klarna_account"),
    
    KLARNA_PAYNOW("klarna_paynow"),
    
    MAESTRO("maestro"),
    
    MBWAY("mbway"),
    
    MC("mc"),
    
    MCDEBIT("mcdebit"),
    
    MEAL_VOUCHER_FR("mealVoucher_FR"),
    
    MOBILEPAY("mobilepay"),
    
    MULTIBANCO("multibanco"),
    
    ONLINE_BANKING_PL("onlineBanking_PL"),
    
    PAYBYBANK("paybybank"),
    
    PAYPAL("paypal"),
    
    PAYSHOP("payshop"),
    
    SWISH("swish"),
    
    TRUSTLY("trustly"),
    
    TWINT("twint"),
    
    TWINT_POS("twint_pos"),
    
    VIPPS("vipps"),
    
    VISA("visa"),
    
    VISADEBIT("visadebit"),
    
    VPAY("vpay"),
    
    WECHATPAY("wechatpay"),
    
    WECHATPAY_POS("wechatpay_pos");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VIPPS = "vipps";
  @SerializedName(SERIALIZED_NAME_VIPPS)
  private VippsInfo vipps;

  public static final String SERIALIZED_NAME_VISA = "visa";
  @SerializedName(SERIALIZED_NAME_VISA)
  private GenericPmWithTdiInfo visa;

  public PaymentMethodSetupInfo() {
  }

  public PaymentMethodSetupInfo afterpayTouch(AfterpayTouchInfo afterpayTouch) {
    this.afterpayTouch = afterpayTouch;
    return this;
  }

  /**
   * Afterpay Touch details.
   * @return afterpayTouch
   */
  @javax.annotation.Nullable
  public AfterpayTouchInfo getAfterpayTouch() {
    return afterpayTouch;
  }

  public void setAfterpayTouch(AfterpayTouchInfo afterpayTouch) {
    this.afterpayTouch = afterpayTouch;
  }


  public PaymentMethodSetupInfo applePay(ApplePayInfo applePay) {
    this.applePay = applePay;
    return this;
  }

  /**
   * Apple Pay details.
   * @return applePay
   */
  @javax.annotation.Nullable
  public ApplePayInfo getApplePay() {
    return applePay;
  }

  public void setApplePay(ApplePayInfo applePay) {
    this.applePay = applePay;
  }


  public PaymentMethodSetupInfo bcmc(BcmcInfo bcmc) {
    this.bcmc = bcmc;
    return this;
  }

  /**
   * Bancontact details.
   * @return bcmc
   */
  @javax.annotation.Nullable
  public BcmcInfo getBcmc() {
    return bcmc;
  }

  public void setBcmc(BcmcInfo bcmc) {
    this.bcmc = bcmc;
  }


  public PaymentMethodSetupInfo businessLineId(String businessLineId) {
    this.businessLineId = businessLineId;
    return this;
  }

  /**
   * The unique identifier of the business line. Required if you have a [platform setup](https://docs.adyen.com/marketplaces-and-platforms/platform-structure-resources/platform-setup/).
   * @return businessLineId
   */
  @javax.annotation.Nullable
  public String getBusinessLineId() {
    return businessLineId;
  }

  public void setBusinessLineId(String businessLineId) {
    this.businessLineId = businessLineId;
  }


  public PaymentMethodSetupInfo cartesBancaires(CartesBancairesInfo cartesBancaires) {
    this.cartesBancaires = cartesBancaires;
    return this;
  }

  /**
   * Cartes Bancaires details.
   * @return cartesBancaires
   */
  @javax.annotation.Nullable
  public CartesBancairesInfo getCartesBancaires() {
    return cartesBancaires;
  }

  public void setCartesBancaires(CartesBancairesInfo cartesBancaires) {
    this.cartesBancaires = cartesBancaires;
  }


  public PaymentMethodSetupInfo clearpay(ClearpayInfo clearpay) {
    this.clearpay = clearpay;
    return this;
  }

  /**
   * Clearpay details.
   * @return clearpay
   */
  @javax.annotation.Nullable
  public ClearpayInfo getClearpay() {
    return clearpay;
  }

  public void setClearpay(ClearpayInfo clearpay) {
    this.clearpay = clearpay;
  }


  public PaymentMethodSetupInfo countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public PaymentMethodSetupInfo addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * The list of countries where a payment method is available. By default, all countries supported by the payment method.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public PaymentMethodSetupInfo cup(GenericPmWithTdiInfo cup) {
    this.cup = cup;
    return this;
  }

  /**
   * China Union Pay details.
   * @return cup
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getCup() {
    return cup;
  }

  public void setCup(GenericPmWithTdiInfo cup) {
    this.cup = cup;
  }


  public PaymentMethodSetupInfo currencies(List<String> currencies) {
    this.currencies = currencies;
    return this;
  }

  public PaymentMethodSetupInfo addCurrenciesItem(String currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
   * @return currencies
   */
  @javax.annotation.Nullable
  public List<String> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<String> currencies) {
    this.currencies = currencies;
  }


  public PaymentMethodSetupInfo customRoutingFlags(List<String> customRoutingFlags) {
    this.customRoutingFlags = customRoutingFlags;
    return this;
  }

  public PaymentMethodSetupInfo addCustomRoutingFlagsItem(String customRoutingFlagsItem) {
    if (this.customRoutingFlags == null) {
      this.customRoutingFlags = new ArrayList<>();
    }
    this.customRoutingFlags.add(customRoutingFlagsItem);
    return this;
  }

  /**
   * The list of custom routing flags to route payment to the intended acquirer.
   * @return customRoutingFlags
   */
  @javax.annotation.Nullable
  public List<String> getCustomRoutingFlags() {
    return customRoutingFlags;
  }

  public void setCustomRoutingFlags(List<String> customRoutingFlags) {
    this.customRoutingFlags = customRoutingFlags;
  }


  public PaymentMethodSetupInfo diners(GenericPmWithTdiInfo diners) {
    this.diners = diners;
    return this;
  }

  /**
   * Diners details.
   * @return diners
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getDiners() {
    return diners;
  }

  public void setDiners(GenericPmWithTdiInfo diners) {
    this.diners = diners;
  }


  public PaymentMethodSetupInfo discover(GenericPmWithTdiInfo discover) {
    this.discover = discover;
    return this;
  }

  /**
   * Discover details.
   * @return discover
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getDiscover() {
    return discover;
  }

  public void setDiscover(GenericPmWithTdiInfo discover) {
    this.discover = discover;
  }


  public PaymentMethodSetupInfo eftposAustralia(GenericPmWithTdiInfo eftposAustralia) {
    this.eftposAustralia = eftposAustralia;
    return this;
  }

  /**
   * Eftpos Australia details.
   * @return eftposAustralia
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getEftposAustralia() {
    return eftposAustralia;
  }

  public void setEftposAustralia(GenericPmWithTdiInfo eftposAustralia) {
    this.eftposAustralia = eftposAustralia;
  }


  public PaymentMethodSetupInfo giroPay(GiroPayInfo giroPay) {
    this.giroPay = giroPay;
    return this;
  }

  /**
   * giropay details.
   * @return giroPay
   */
  @javax.annotation.Nullable
  public GiroPayInfo getGiroPay() {
    return giroPay;
  }

  public void setGiroPay(GiroPayInfo giroPay) {
    this.giroPay = giroPay;
  }


  public PaymentMethodSetupInfo girocard(GenericPmWithTdiInfo girocard) {
    this.girocard = girocard;
    return this;
  }

  /**
   * Girocard details.
   * @return girocard
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getGirocard() {
    return girocard;
  }

  public void setGirocard(GenericPmWithTdiInfo girocard) {
    this.girocard = girocard;
  }


  public PaymentMethodSetupInfo googlePay(GooglePayInfo googlePay) {
    this.googlePay = googlePay;
    return this;
  }

  /**
   * Google Pay details.
   * @return googlePay
   */
  @javax.annotation.Nullable
  public GooglePayInfo getGooglePay() {
    return googlePay;
  }

  public void setGooglePay(GooglePayInfo googlePay) {
    this.googlePay = googlePay;
  }


  public PaymentMethodSetupInfo ideal(GenericPmWithTdiInfo ideal) {
    this.ideal = ideal;
    return this;
  }

  /**
   * iDeal details.
   * @return ideal
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getIdeal() {
    return ideal;
  }

  public void setIdeal(GenericPmWithTdiInfo ideal) {
    this.ideal = ideal;
  }


  public PaymentMethodSetupInfo interacCard(GenericPmWithTdiInfo interacCard) {
    this.interacCard = interacCard;
    return this;
  }

  /**
   * Interac Card details.
   * @return interacCard
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getInteracCard() {
    return interacCard;
  }

  public void setInteracCard(GenericPmWithTdiInfo interacCard) {
    this.interacCard = interacCard;
  }


  public PaymentMethodSetupInfo jcb(GenericPmWithTdiInfo jcb) {
    this.jcb = jcb;
    return this;
  }

  /**
   * JCB details.
   * @return jcb
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getJcb() {
    return jcb;
  }

  public void setJcb(GenericPmWithTdiInfo jcb) {
    this.jcb = jcb;
  }


  public PaymentMethodSetupInfo klarna(KlarnaInfo klarna) {
    this.klarna = klarna;
    return this;
  }

  /**
   * Klarna details.
   * @return klarna
   */
  @javax.annotation.Nullable
  public KlarnaInfo getKlarna() {
    return klarna;
  }

  public void setKlarna(KlarnaInfo klarna) {
    this.klarna = klarna;
  }


  public PaymentMethodSetupInfo maestro(GenericPmWithTdiInfo maestro) {
    this.maestro = maestro;
    return this;
  }

  /**
   * Maestro details.
   * @return maestro
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getMaestro() {
    return maestro;
  }

  public void setMaestro(GenericPmWithTdiInfo maestro) {
    this.maestro = maestro;
  }


  public PaymentMethodSetupInfo mc(GenericPmWithTdiInfo mc) {
    this.mc = mc;
    return this;
  }

  /**
   * MasterCard details.
   * @return mc
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getMc() {
    return mc;
  }

  public void setMc(GenericPmWithTdiInfo mc) {
    this.mc = mc;
  }


  public PaymentMethodSetupInfo mealVoucherFR(MealVoucherFRInfo mealVoucherFR) {
    this.mealVoucherFR = mealVoucherFR;
    return this;
  }

  /**
   * Meal Voucher FR details.
   * @return mealVoucherFR
   */
  @javax.annotation.Nullable
  public MealVoucherFRInfo getMealVoucherFR() {
    return mealVoucherFR;
  }

  public void setMealVoucherFR(MealVoucherFRInfo mealVoucherFR) {
    this.mealVoucherFR = mealVoucherFR;
  }


  public PaymentMethodSetupInfo paypal(PayPalInfo paypal) {
    this.paypal = paypal;
    return this;
  }

  /**
   * PayPal details.
   * @return paypal
   */
  @javax.annotation.Nullable
  public PayPalInfo getPaypal() {
    return paypal;
  }

  public void setPaypal(PayPalInfo paypal) {
    this.paypal = paypal;
  }


  public PaymentMethodSetupInfo reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * Your reference for the payment method. Supported characters a-z, A-Z, 0-9.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PaymentMethodSetupInfo shopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
    return this;
  }

  /**
   * The sales channel. Required if the merchant account does not have a sales channel. When you provide this field, it overrides the default sales channel set on the merchant account.  Possible values: **eCommerce**, **pos**, **contAuth**, and **moto**. 
   * @return shopperInteraction
   */
  @javax.annotation.Nullable
  public ShopperInteractionEnum getShopperInteraction() {
    return shopperInteraction;
  }

  public void setShopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
  }


  public PaymentMethodSetupInfo sofort(SofortInfo sofort) {
    this.sofort = sofort;
    return this;
  }

  /**
   * Sofort details.
   * @return sofort
   */
  @javax.annotation.Nullable
  public SofortInfo getSofort() {
    return sofort;
  }

  public void setSofort(SofortInfo sofort) {
    this.sofort = sofort;
  }


  public PaymentMethodSetupInfo storeIds(List<String> storeIds) {
    this.storeIds = storeIds;
    return this;
  }

  public PaymentMethodSetupInfo addStoreIdsItem(String storeIdsItem) {
    if (this.storeIds == null) {
      this.storeIds = new ArrayList<>();
    }
    this.storeIds.add(storeIdsItem);
    return this;
  }

  /**
   * The unique identifier of the store for which to configure the payment method, if any.
   * @return storeIds
   */
  @javax.annotation.Nullable
  public List<String> getStoreIds() {
    return storeIds;
  }

  public void setStoreIds(List<String> storeIds) {
    this.storeIds = storeIds;
  }


  public PaymentMethodSetupInfo swish(SwishInfo swish) {
    this.swish = swish;
    return this;
  }

  /**
   * Swish details.
   * @return swish
   */
  @javax.annotation.Nullable
  public SwishInfo getSwish() {
    return swish;
  }

  public void setSwish(SwishInfo swish) {
    this.swish = swish;
  }


  public PaymentMethodSetupInfo twint(TwintInfo twint) {
    this.twint = twint;
    return this;
  }

  /**
   * Twint details.
   * @return twint
   */
  @javax.annotation.Nullable
  public TwintInfo getTwint() {
    return twint;
  }

  public void setTwint(TwintInfo twint) {
    this.twint = twint;
  }


  public PaymentMethodSetupInfo type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Payment method [variant](https://docs.adyen.com/development-resources/paymentmethodvariant#management-api).
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PaymentMethodSetupInfo vipps(VippsInfo vipps) {
    this.vipps = vipps;
    return this;
  }

  /**
   * Vipps details.
   * @return vipps
   */
  @javax.annotation.Nullable
  public VippsInfo getVipps() {
    return vipps;
  }

  public void setVipps(VippsInfo vipps) {
    this.vipps = vipps;
  }


  public PaymentMethodSetupInfo visa(GenericPmWithTdiInfo visa) {
    this.visa = visa;
    return this;
  }

  /**
   * Visa details.
   * @return visa
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getVisa() {
    return visa;
  }

  public void setVisa(GenericPmWithTdiInfo visa) {
    this.visa = visa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentMethodSetupInfo paymentMethodSetupInfo = (PaymentMethodSetupInfo) o;
    return Objects.equals(this.afterpayTouch, paymentMethodSetupInfo.afterpayTouch) &&
        Objects.equals(this.applePay, paymentMethodSetupInfo.applePay) &&
        Objects.equals(this.bcmc, paymentMethodSetupInfo.bcmc) &&
        Objects.equals(this.businessLineId, paymentMethodSetupInfo.businessLineId) &&
        Objects.equals(this.cartesBancaires, paymentMethodSetupInfo.cartesBancaires) &&
        Objects.equals(this.clearpay, paymentMethodSetupInfo.clearpay) &&
        Objects.equals(this.countries, paymentMethodSetupInfo.countries) &&
        Objects.equals(this.cup, paymentMethodSetupInfo.cup) &&
        Objects.equals(this.currencies, paymentMethodSetupInfo.currencies) &&
        Objects.equals(this.customRoutingFlags, paymentMethodSetupInfo.customRoutingFlags) &&
        Objects.equals(this.diners, paymentMethodSetupInfo.diners) &&
        Objects.equals(this.discover, paymentMethodSetupInfo.discover) &&
        Objects.equals(this.eftposAustralia, paymentMethodSetupInfo.eftposAustralia) &&
        Objects.equals(this.giroPay, paymentMethodSetupInfo.giroPay) &&
        Objects.equals(this.girocard, paymentMethodSetupInfo.girocard) &&
        Objects.equals(this.googlePay, paymentMethodSetupInfo.googlePay) &&
        Objects.equals(this.ideal, paymentMethodSetupInfo.ideal) &&
        Objects.equals(this.interacCard, paymentMethodSetupInfo.interacCard) &&
        Objects.equals(this.jcb, paymentMethodSetupInfo.jcb) &&
        Objects.equals(this.klarna, paymentMethodSetupInfo.klarna) &&
        Objects.equals(this.maestro, paymentMethodSetupInfo.maestro) &&
        Objects.equals(this.mc, paymentMethodSetupInfo.mc) &&
        Objects.equals(this.mealVoucherFR, paymentMethodSetupInfo.mealVoucherFR) &&
        Objects.equals(this.paypal, paymentMethodSetupInfo.paypal) &&
        Objects.equals(this.reference, paymentMethodSetupInfo.reference) &&
        Objects.equals(this.shopperInteraction, paymentMethodSetupInfo.shopperInteraction) &&
        Objects.equals(this.sofort, paymentMethodSetupInfo.sofort) &&
        Objects.equals(this.storeIds, paymentMethodSetupInfo.storeIds) &&
        Objects.equals(this.swish, paymentMethodSetupInfo.swish) &&
        Objects.equals(this.twint, paymentMethodSetupInfo.twint) &&
        Objects.equals(this.type, paymentMethodSetupInfo.type) &&
        Objects.equals(this.vipps, paymentMethodSetupInfo.vipps) &&
        Objects.equals(this.visa, paymentMethodSetupInfo.visa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(afterpayTouch, applePay, bcmc, businessLineId, cartesBancaires, clearpay, countries, cup, currencies, customRoutingFlags, diners, discover, eftposAustralia, giroPay, girocard, googlePay, ideal, interacCard, jcb, klarna, maestro, mc, mealVoucherFR, paypal, reference, shopperInteraction, sofort, storeIds, swish, twint, type, vipps, visa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentMethodSetupInfo {\n");
    sb.append("    afterpayTouch: ").append(toIndentedString(afterpayTouch)).append("\n");
    sb.append("    applePay: ").append(toIndentedString(applePay)).append("\n");
    sb.append("    bcmc: ").append(toIndentedString(bcmc)).append("\n");
    sb.append("    businessLineId: ").append(toIndentedString(businessLineId)).append("\n");
    sb.append("    cartesBancaires: ").append(toIndentedString(cartesBancaires)).append("\n");
    sb.append("    clearpay: ").append(toIndentedString(clearpay)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    cup: ").append(toIndentedString(cup)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    customRoutingFlags: ").append(toIndentedString(customRoutingFlags)).append("\n");
    sb.append("    diners: ").append(toIndentedString(diners)).append("\n");
    sb.append("    discover: ").append(toIndentedString(discover)).append("\n");
    sb.append("    eftposAustralia: ").append(toIndentedString(eftposAustralia)).append("\n");
    sb.append("    giroPay: ").append(toIndentedString(giroPay)).append("\n");
    sb.append("    girocard: ").append(toIndentedString(girocard)).append("\n");
    sb.append("    googlePay: ").append(toIndentedString(googlePay)).append("\n");
    sb.append("    ideal: ").append(toIndentedString(ideal)).append("\n");
    sb.append("    interacCard: ").append(toIndentedString(interacCard)).append("\n");
    sb.append("    jcb: ").append(toIndentedString(jcb)).append("\n");
    sb.append("    klarna: ").append(toIndentedString(klarna)).append("\n");
    sb.append("    maestro: ").append(toIndentedString(maestro)).append("\n");
    sb.append("    mc: ").append(toIndentedString(mc)).append("\n");
    sb.append("    mealVoucherFR: ").append(toIndentedString(mealVoucherFR)).append("\n");
    sb.append("    paypal: ").append(toIndentedString(paypal)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    shopperInteraction: ").append(toIndentedString(shopperInteraction)).append("\n");
    sb.append("    sofort: ").append(toIndentedString(sofort)).append("\n");
    sb.append("    storeIds: ").append(toIndentedString(storeIds)).append("\n");
    sb.append("    swish: ").append(toIndentedString(swish)).append("\n");
    sb.append("    twint: ").append(toIndentedString(twint)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vipps: ").append(toIndentedString(vipps)).append("\n");
    sb.append("    visa: ").append(toIndentedString(visa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("afterpayTouch");
    openapiFields.add("applePay");
    openapiFields.add("bcmc");
    openapiFields.add("businessLineId");
    openapiFields.add("cartesBancaires");
    openapiFields.add("clearpay");
    openapiFields.add("countries");
    openapiFields.add("cup");
    openapiFields.add("currencies");
    openapiFields.add("customRoutingFlags");
    openapiFields.add("diners");
    openapiFields.add("discover");
    openapiFields.add("eftpos_australia");
    openapiFields.add("giroPay");
    openapiFields.add("girocard");
    openapiFields.add("googlePay");
    openapiFields.add("ideal");
    openapiFields.add("interac_card");
    openapiFields.add("jcb");
    openapiFields.add("klarna");
    openapiFields.add("maestro");
    openapiFields.add("mc");
    openapiFields.add("mealVoucher_FR");
    openapiFields.add("paypal");
    openapiFields.add("reference");
    openapiFields.add("shopperInteraction");
    openapiFields.add("sofort");
    openapiFields.add("storeIds");
    openapiFields.add("swish");
    openapiFields.add("twint");
    openapiFields.add("type");
    openapiFields.add("vipps");
    openapiFields.add("visa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentMethodSetupInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentMethodSetupInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentMethodSetupInfo is not found in the empty JSON string", PaymentMethodSetupInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentMethodSetupInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentMethodSetupInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentMethodSetupInfo.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `afterpayTouch`
      if (jsonObj.get("afterpayTouch") != null && !jsonObj.get("afterpayTouch").isJsonNull()) {
        AfterpayTouchInfo.validateJsonElement(jsonObj.get("afterpayTouch"));
      }
      // validate the optional field `applePay`
      if (jsonObj.get("applePay") != null && !jsonObj.get("applePay").isJsonNull()) {
        ApplePayInfo.validateJsonElement(jsonObj.get("applePay"));
      }
      // validate the optional field `bcmc`
      if (jsonObj.get("bcmc") != null && !jsonObj.get("bcmc").isJsonNull()) {
        BcmcInfo.validateJsonElement(jsonObj.get("bcmc"));
      }
      if ((jsonObj.get("businessLineId") != null && !jsonObj.get("businessLineId").isJsonNull()) && !jsonObj.get("businessLineId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `businessLineId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("businessLineId").toString()));
      }
      // validate the optional field `cartesBancaires`
      if (jsonObj.get("cartesBancaires") != null && !jsonObj.get("cartesBancaires").isJsonNull()) {
        CartesBancairesInfo.validateJsonElement(jsonObj.get("cartesBancaires"));
      }
      // validate the optional field `clearpay`
      if (jsonObj.get("clearpay") != null && !jsonObj.get("clearpay").isJsonNull()) {
        ClearpayInfo.validateJsonElement(jsonObj.get("clearpay"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      // validate the optional field `cup`
      if (jsonObj.get("cup") != null && !jsonObj.get("cup").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("cup"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull() && !jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customRoutingFlags") != null && !jsonObj.get("customRoutingFlags").isJsonNull() && !jsonObj.get("customRoutingFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customRoutingFlags` to be an array in the JSON string but got `%s`", jsonObj.get("customRoutingFlags").toString()));
      }
      // validate the optional field `diners`
      if (jsonObj.get("diners") != null && !jsonObj.get("diners").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("diners"));
      }
      // validate the optional field `discover`
      if (jsonObj.get("discover") != null && !jsonObj.get("discover").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("discover"));
      }
      // validate the optional field `eftpos_australia`
      if (jsonObj.get("eftpos_australia") != null && !jsonObj.get("eftpos_australia").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("eftpos_australia"));
      }
      // validate the optional field `giroPay`
      if (jsonObj.get("giroPay") != null && !jsonObj.get("giroPay").isJsonNull()) {
        GiroPayInfo.validateJsonElement(jsonObj.get("giroPay"));
      }
      // validate the optional field `girocard`
      if (jsonObj.get("girocard") != null && !jsonObj.get("girocard").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("girocard"));
      }
      // validate the optional field `googlePay`
      if (jsonObj.get("googlePay") != null && !jsonObj.get("googlePay").isJsonNull()) {
        GooglePayInfo.validateJsonElement(jsonObj.get("googlePay"));
      }
      // validate the optional field `ideal`
      if (jsonObj.get("ideal") != null && !jsonObj.get("ideal").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("ideal"));
      }
      // validate the optional field `interac_card`
      if (jsonObj.get("interac_card") != null && !jsonObj.get("interac_card").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("interac_card"));
      }
      // validate the optional field `jcb`
      if (jsonObj.get("jcb") != null && !jsonObj.get("jcb").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("jcb"));
      }
      // validate the optional field `klarna`
      if (jsonObj.get("klarna") != null && !jsonObj.get("klarna").isJsonNull()) {
        KlarnaInfo.validateJsonElement(jsonObj.get("klarna"));
      }
      // validate the optional field `maestro`
      if (jsonObj.get("maestro") != null && !jsonObj.get("maestro").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("maestro"));
      }
      // validate the optional field `mc`
      if (jsonObj.get("mc") != null && !jsonObj.get("mc").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("mc"));
      }
      // validate the optional field `mealVoucher_FR`
      if (jsonObj.get("mealVoucher_FR") != null && !jsonObj.get("mealVoucher_FR").isJsonNull()) {
        MealVoucherFRInfo.validateJsonElement(jsonObj.get("mealVoucher_FR"));
      }
      // validate the optional field `paypal`
      if (jsonObj.get("paypal") != null && !jsonObj.get("paypal").isJsonNull()) {
        PayPalInfo.validateJsonElement(jsonObj.get("paypal"));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) && !jsonObj.get("shopperInteraction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperInteraction").toString()));
      }
      // validate the optional field `shopperInteraction`
      if (jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) {
        ShopperInteractionEnum.validateJsonElement(jsonObj.get("shopperInteraction"));
      }
      // validate the optional field `sofort`
      if (jsonObj.get("sofort") != null && !jsonObj.get("sofort").isJsonNull()) {
        SofortInfo.validateJsonElement(jsonObj.get("sofort"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeIds") != null && !jsonObj.get("storeIds").isJsonNull() && !jsonObj.get("storeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeIds` to be an array in the JSON string but got `%s`", jsonObj.get("storeIds").toString()));
      }
      // validate the optional field `swish`
      if (jsonObj.get("swish") != null && !jsonObj.get("swish").isJsonNull()) {
        SwishInfo.validateJsonElement(jsonObj.get("swish"));
      }
      // validate the optional field `twint`
      if (jsonObj.get("twint") != null && !jsonObj.get("twint").isJsonNull()) {
        TwintInfo.validateJsonElement(jsonObj.get("twint"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      // validate the optional field `vipps`
      if (jsonObj.get("vipps") != null && !jsonObj.get("vipps").isJsonNull()) {
        VippsInfo.validateJsonElement(jsonObj.get("vipps"));
      }
      // validate the optional field `visa`
      if (jsonObj.get("visa") != null && !jsonObj.get("visa").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("visa"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentMethodSetupInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentMethodSetupInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentMethodSetupInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentMethodSetupInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentMethodSetupInfo>() {
           @Override
           public void write(JsonWriter out, PaymentMethodSetupInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentMethodSetupInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentMethodSetupInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentMethodSetupInfo
   * @throws IOException if the JSON string is invalid with respect to PaymentMethodSetupInfo
   */
  public static PaymentMethodSetupInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentMethodSetupInfo.class);
  }

  /**
   * Convert an instance of PaymentMethodSetupInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

