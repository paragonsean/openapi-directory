/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Url;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NotificationUrl
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotificationUrl {
  public static final String SERIALIZED_NAME_LOCAL_URLS = "localUrls";
  @SerializedName(SERIALIZED_NAME_LOCAL_URLS)
  private List<Url> localUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_PUBLIC_URLS = "publicUrls";
  @SerializedName(SERIALIZED_NAME_PUBLIC_URLS)
  private List<Url> publicUrls = new ArrayList<>();

  public NotificationUrl() {
  }

  public NotificationUrl localUrls(List<Url> localUrls) {
    this.localUrls = localUrls;
    return this;
  }

  public NotificationUrl addLocalUrlsItem(Url localUrlsItem) {
    if (this.localUrls == null) {
      this.localUrls = new ArrayList<>();
    }
    this.localUrls.add(localUrlsItem);
    return this;
  }

  /**
   * One or more local URLs to send notifications to when using Terminal API.
   * @return localUrls
   */
  @javax.annotation.Nullable
  public List<Url> getLocalUrls() {
    return localUrls;
  }

  public void setLocalUrls(List<Url> localUrls) {
    this.localUrls = localUrls;
  }


  public NotificationUrl publicUrls(List<Url> publicUrls) {
    this.publicUrls = publicUrls;
    return this;
  }

  public NotificationUrl addPublicUrlsItem(Url publicUrlsItem) {
    if (this.publicUrls == null) {
      this.publicUrls = new ArrayList<>();
    }
    this.publicUrls.add(publicUrlsItem);
    return this;
  }

  /**
   * One or more public URLs to send notifications to when using Terminal API.
   * @return publicUrls
   */
  @javax.annotation.Nullable
  public List<Url> getPublicUrls() {
    return publicUrls;
  }

  public void setPublicUrls(List<Url> publicUrls) {
    this.publicUrls = publicUrls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationUrl notificationUrl = (NotificationUrl) o;
    return Objects.equals(this.localUrls, notificationUrl.localUrls) &&
        Objects.equals(this.publicUrls, notificationUrl.publicUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localUrls, publicUrls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationUrl {\n");
    sb.append("    localUrls: ").append(toIndentedString(localUrls)).append("\n");
    sb.append("    publicUrls: ").append(toIndentedString(publicUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localUrls");
    openapiFields.add("publicUrls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotificationUrl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotificationUrl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotificationUrl is not found in the empty JSON string", NotificationUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotificationUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotificationUrl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("localUrls") != null && !jsonObj.get("localUrls").isJsonNull()) {
        JsonArray jsonArraylocalUrls = jsonObj.getAsJsonArray("localUrls");
        if (jsonArraylocalUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("localUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `localUrls` to be an array in the JSON string but got `%s`", jsonObj.get("localUrls").toString()));
          }

          // validate the optional field `localUrls` (array)
          for (int i = 0; i < jsonArraylocalUrls.size(); i++) {
            Url.validateJsonElement(jsonArraylocalUrls.get(i));
          };
        }
      }
      if (jsonObj.get("publicUrls") != null && !jsonObj.get("publicUrls").isJsonNull()) {
        JsonArray jsonArraypublicUrls = jsonObj.getAsJsonArray("publicUrls");
        if (jsonArraypublicUrls != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publicUrls").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publicUrls` to be an array in the JSON string but got `%s`", jsonObj.get("publicUrls").toString()));
          }

          // validate the optional field `publicUrls` (array)
          for (int i = 0; i < jsonArraypublicUrls.size(); i++) {
            Url.validateJsonElement(jsonArraypublicUrls.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotificationUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotificationUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotificationUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotificationUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<NotificationUrl>() {
           @Override
           public void write(JsonWriter out, NotificationUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotificationUrl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotificationUrl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotificationUrl
   * @throws IOException if the JSON string is invalid with respect to NotificationUrl
   */
  public static NotificationUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotificationUrl.class);
  }

  /**
   * Convert an instance of NotificationUrl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

