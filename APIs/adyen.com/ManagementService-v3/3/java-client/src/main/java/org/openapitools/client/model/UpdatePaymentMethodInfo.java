/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BcmcInfo;
import org.openapitools.client.model.CartesBancairesInfo;
import org.openapitools.client.model.GenericPmWithTdiInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdatePaymentMethodInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdatePaymentMethodInfo {
  public static final String SERIALIZED_NAME_BCMC = "bcmc";
  @SerializedName(SERIALIZED_NAME_BCMC)
  private BcmcInfo bcmc;

  public static final String SERIALIZED_NAME_CARTES_BANCAIRES = "cartesBancaires";
  @SerializedName(SERIALIZED_NAME_CARTES_BANCAIRES)
  private CartesBancairesInfo cartesBancaires;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUP = "cup";
  @SerializedName(SERIALIZED_NAME_CUP)
  private GenericPmWithTdiInfo cup;

  public static final String SERIALIZED_NAME_CURRENCIES = "currencies";
  @SerializedName(SERIALIZED_NAME_CURRENCIES)
  private List<String> currencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ROUTING_FLAGS = "customRoutingFlags";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROUTING_FLAGS)
  private List<String> customRoutingFlags = new ArrayList<>();

  public static final String SERIALIZED_NAME_DINERS = "diners";
  @SerializedName(SERIALIZED_NAME_DINERS)
  private GenericPmWithTdiInfo diners;

  public static final String SERIALIZED_NAME_DISCOVER = "discover";
  @SerializedName(SERIALIZED_NAME_DISCOVER)
  private GenericPmWithTdiInfo discover;

  public static final String SERIALIZED_NAME_EFTPOS_AUSTRALIA = "eftpos_australia";
  @SerializedName(SERIALIZED_NAME_EFTPOS_AUSTRALIA)
  private GenericPmWithTdiInfo eftposAustralia;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_GIROCARD = "girocard";
  @SerializedName(SERIALIZED_NAME_GIROCARD)
  private GenericPmWithTdiInfo girocard;

  public static final String SERIALIZED_NAME_IDEAL = "ideal";
  @SerializedName(SERIALIZED_NAME_IDEAL)
  private GenericPmWithTdiInfo ideal;

  public static final String SERIALIZED_NAME_INTERAC_CARD = "interac_card";
  @SerializedName(SERIALIZED_NAME_INTERAC_CARD)
  private GenericPmWithTdiInfo interacCard;

  public static final String SERIALIZED_NAME_JCB = "jcb";
  @SerializedName(SERIALIZED_NAME_JCB)
  private GenericPmWithTdiInfo jcb;

  public static final String SERIALIZED_NAME_MAESTRO = "maestro";
  @SerializedName(SERIALIZED_NAME_MAESTRO)
  private GenericPmWithTdiInfo maestro;

  public static final String SERIALIZED_NAME_MC = "mc";
  @SerializedName(SERIALIZED_NAME_MC)
  private GenericPmWithTdiInfo mc;

  public static final String SERIALIZED_NAME_STORE_IDS = "storeIds";
  @SerializedName(SERIALIZED_NAME_STORE_IDS)
  private List<String> storeIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISA = "visa";
  @SerializedName(SERIALIZED_NAME_VISA)
  private GenericPmWithTdiInfo visa;

  public UpdatePaymentMethodInfo() {
  }

  public UpdatePaymentMethodInfo bcmc(BcmcInfo bcmc) {
    this.bcmc = bcmc;
    return this;
  }

  /**
   * Bancontact details.
   * @return bcmc
   */
  @javax.annotation.Nullable
  public BcmcInfo getBcmc() {
    return bcmc;
  }

  public void setBcmc(BcmcInfo bcmc) {
    this.bcmc = bcmc;
  }


  public UpdatePaymentMethodInfo cartesBancaires(CartesBancairesInfo cartesBancaires) {
    this.cartesBancaires = cartesBancaires;
    return this;
  }

  /**
   * Cartes Bancaires details.
   * @return cartesBancaires
   */
  @javax.annotation.Nullable
  public CartesBancairesInfo getCartesBancaires() {
    return cartesBancaires;
  }

  public void setCartesBancaires(CartesBancairesInfo cartesBancaires) {
    this.cartesBancaires = cartesBancaires;
  }


  public UpdatePaymentMethodInfo countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public UpdatePaymentMethodInfo addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * The list of countries where a payment method is available. By default, all countries supported by the payment method.
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public UpdatePaymentMethodInfo cup(GenericPmWithTdiInfo cup) {
    this.cup = cup;
    return this;
  }

  /**
   * China Union Pay details.
   * @return cup
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getCup() {
    return cup;
  }

  public void setCup(GenericPmWithTdiInfo cup) {
    this.cup = cup;
  }


  public UpdatePaymentMethodInfo currencies(List<String> currencies) {
    this.currencies = currencies;
    return this;
  }

  public UpdatePaymentMethodInfo addCurrenciesItem(String currenciesItem) {
    if (this.currencies == null) {
      this.currencies = new ArrayList<>();
    }
    this.currencies.add(currenciesItem);
    return this;
  }

  /**
   * The list of currencies that a payment method supports. By default, all currencies supported by the payment method.
   * @return currencies
   */
  @javax.annotation.Nullable
  public List<String> getCurrencies() {
    return currencies;
  }

  public void setCurrencies(List<String> currencies) {
    this.currencies = currencies;
  }


  public UpdatePaymentMethodInfo customRoutingFlags(List<String> customRoutingFlags) {
    this.customRoutingFlags = customRoutingFlags;
    return this;
  }

  public UpdatePaymentMethodInfo addCustomRoutingFlagsItem(String customRoutingFlagsItem) {
    if (this.customRoutingFlags == null) {
      this.customRoutingFlags = new ArrayList<>();
    }
    this.customRoutingFlags.add(customRoutingFlagsItem);
    return this;
  }

  /**
   * Custom routing flags for acquirer routing.
   * @return customRoutingFlags
   */
  @javax.annotation.Nullable
  public List<String> getCustomRoutingFlags() {
    return customRoutingFlags;
  }

  public void setCustomRoutingFlags(List<String> customRoutingFlags) {
    this.customRoutingFlags = customRoutingFlags;
  }


  public UpdatePaymentMethodInfo diners(GenericPmWithTdiInfo diners) {
    this.diners = diners;
    return this;
  }

  /**
   * Diners details.
   * @return diners
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getDiners() {
    return diners;
  }

  public void setDiners(GenericPmWithTdiInfo diners) {
    this.diners = diners;
  }


  public UpdatePaymentMethodInfo discover(GenericPmWithTdiInfo discover) {
    this.discover = discover;
    return this;
  }

  /**
   * Discover details.
   * @return discover
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getDiscover() {
    return discover;
  }

  public void setDiscover(GenericPmWithTdiInfo discover) {
    this.discover = discover;
  }


  public UpdatePaymentMethodInfo eftposAustralia(GenericPmWithTdiInfo eftposAustralia) {
    this.eftposAustralia = eftposAustralia;
    return this;
  }

  /**
   * Eftpos Australia details.
   * @return eftposAustralia
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getEftposAustralia() {
    return eftposAustralia;
  }

  public void setEftposAustralia(GenericPmWithTdiInfo eftposAustralia) {
    this.eftposAustralia = eftposAustralia;
  }


  public UpdatePaymentMethodInfo enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Indicates whether the payment method is enabled (**true**) or disabled (**false**).
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public UpdatePaymentMethodInfo girocard(GenericPmWithTdiInfo girocard) {
    this.girocard = girocard;
    return this;
  }

  /**
   * Girocard details.
   * @return girocard
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getGirocard() {
    return girocard;
  }

  public void setGirocard(GenericPmWithTdiInfo girocard) {
    this.girocard = girocard;
  }


  public UpdatePaymentMethodInfo ideal(GenericPmWithTdiInfo ideal) {
    this.ideal = ideal;
    return this;
  }

  /**
   * iDeal details.
   * @return ideal
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getIdeal() {
    return ideal;
  }

  public void setIdeal(GenericPmWithTdiInfo ideal) {
    this.ideal = ideal;
  }


  public UpdatePaymentMethodInfo interacCard(GenericPmWithTdiInfo interacCard) {
    this.interacCard = interacCard;
    return this;
  }

  /**
   * Interac Card details.
   * @return interacCard
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getInteracCard() {
    return interacCard;
  }

  public void setInteracCard(GenericPmWithTdiInfo interacCard) {
    this.interacCard = interacCard;
  }


  public UpdatePaymentMethodInfo jcb(GenericPmWithTdiInfo jcb) {
    this.jcb = jcb;
    return this;
  }

  /**
   * JCB details.
   * @return jcb
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getJcb() {
    return jcb;
  }

  public void setJcb(GenericPmWithTdiInfo jcb) {
    this.jcb = jcb;
  }


  public UpdatePaymentMethodInfo maestro(GenericPmWithTdiInfo maestro) {
    this.maestro = maestro;
    return this;
  }

  /**
   * Maestro details.
   * @return maestro
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getMaestro() {
    return maestro;
  }

  public void setMaestro(GenericPmWithTdiInfo maestro) {
    this.maestro = maestro;
  }


  public UpdatePaymentMethodInfo mc(GenericPmWithTdiInfo mc) {
    this.mc = mc;
    return this;
  }

  /**
   * MasterCard details.
   * @return mc
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getMc() {
    return mc;
  }

  public void setMc(GenericPmWithTdiInfo mc) {
    this.mc = mc;
  }


  public UpdatePaymentMethodInfo storeIds(List<String> storeIds) {
    this.storeIds = storeIds;
    return this;
  }

  public UpdatePaymentMethodInfo addStoreIdsItem(String storeIdsItem) {
    if (this.storeIds == null) {
      this.storeIds = new ArrayList<>();
    }
    this.storeIds.add(storeIdsItem);
    return this;
  }

  /**
   * The list of stores for this payment method
   * @return storeIds
   */
  @javax.annotation.Nullable
  public List<String> getStoreIds() {
    return storeIds;
  }

  public void setStoreIds(List<String> storeIds) {
    this.storeIds = storeIds;
  }


  public UpdatePaymentMethodInfo visa(GenericPmWithTdiInfo visa) {
    this.visa = visa;
    return this;
  }

  /**
   * Visa details.
   * @return visa
   */
  @javax.annotation.Nullable
  public GenericPmWithTdiInfo getVisa() {
    return visa;
  }

  public void setVisa(GenericPmWithTdiInfo visa) {
    this.visa = visa;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdatePaymentMethodInfo updatePaymentMethodInfo = (UpdatePaymentMethodInfo) o;
    return Objects.equals(this.bcmc, updatePaymentMethodInfo.bcmc) &&
        Objects.equals(this.cartesBancaires, updatePaymentMethodInfo.cartesBancaires) &&
        Objects.equals(this.countries, updatePaymentMethodInfo.countries) &&
        Objects.equals(this.cup, updatePaymentMethodInfo.cup) &&
        Objects.equals(this.currencies, updatePaymentMethodInfo.currencies) &&
        Objects.equals(this.customRoutingFlags, updatePaymentMethodInfo.customRoutingFlags) &&
        Objects.equals(this.diners, updatePaymentMethodInfo.diners) &&
        Objects.equals(this.discover, updatePaymentMethodInfo.discover) &&
        Objects.equals(this.eftposAustralia, updatePaymentMethodInfo.eftposAustralia) &&
        Objects.equals(this.enabled, updatePaymentMethodInfo.enabled) &&
        Objects.equals(this.girocard, updatePaymentMethodInfo.girocard) &&
        Objects.equals(this.ideal, updatePaymentMethodInfo.ideal) &&
        Objects.equals(this.interacCard, updatePaymentMethodInfo.interacCard) &&
        Objects.equals(this.jcb, updatePaymentMethodInfo.jcb) &&
        Objects.equals(this.maestro, updatePaymentMethodInfo.maestro) &&
        Objects.equals(this.mc, updatePaymentMethodInfo.mc) &&
        Objects.equals(this.storeIds, updatePaymentMethodInfo.storeIds) &&
        Objects.equals(this.visa, updatePaymentMethodInfo.visa);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bcmc, cartesBancaires, countries, cup, currencies, customRoutingFlags, diners, discover, eftposAustralia, enabled, girocard, ideal, interacCard, jcb, maestro, mc, storeIds, visa);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdatePaymentMethodInfo {\n");
    sb.append("    bcmc: ").append(toIndentedString(bcmc)).append("\n");
    sb.append("    cartesBancaires: ").append(toIndentedString(cartesBancaires)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    cup: ").append(toIndentedString(cup)).append("\n");
    sb.append("    currencies: ").append(toIndentedString(currencies)).append("\n");
    sb.append("    customRoutingFlags: ").append(toIndentedString(customRoutingFlags)).append("\n");
    sb.append("    diners: ").append(toIndentedString(diners)).append("\n");
    sb.append("    discover: ").append(toIndentedString(discover)).append("\n");
    sb.append("    eftposAustralia: ").append(toIndentedString(eftposAustralia)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    girocard: ").append(toIndentedString(girocard)).append("\n");
    sb.append("    ideal: ").append(toIndentedString(ideal)).append("\n");
    sb.append("    interacCard: ").append(toIndentedString(interacCard)).append("\n");
    sb.append("    jcb: ").append(toIndentedString(jcb)).append("\n");
    sb.append("    maestro: ").append(toIndentedString(maestro)).append("\n");
    sb.append("    mc: ").append(toIndentedString(mc)).append("\n");
    sb.append("    storeIds: ").append(toIndentedString(storeIds)).append("\n");
    sb.append("    visa: ").append(toIndentedString(visa)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bcmc");
    openapiFields.add("cartesBancaires");
    openapiFields.add("countries");
    openapiFields.add("cup");
    openapiFields.add("currencies");
    openapiFields.add("customRoutingFlags");
    openapiFields.add("diners");
    openapiFields.add("discover");
    openapiFields.add("eftpos_australia");
    openapiFields.add("enabled");
    openapiFields.add("girocard");
    openapiFields.add("ideal");
    openapiFields.add("interac_card");
    openapiFields.add("jcb");
    openapiFields.add("maestro");
    openapiFields.add("mc");
    openapiFields.add("storeIds");
    openapiFields.add("visa");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdatePaymentMethodInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdatePaymentMethodInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdatePaymentMethodInfo is not found in the empty JSON string", UpdatePaymentMethodInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdatePaymentMethodInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdatePaymentMethodInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bcmc`
      if (jsonObj.get("bcmc") != null && !jsonObj.get("bcmc").isJsonNull()) {
        BcmcInfo.validateJsonElement(jsonObj.get("bcmc"));
      }
      // validate the optional field `cartesBancaires`
      if (jsonObj.get("cartesBancaires") != null && !jsonObj.get("cartesBancaires").isJsonNull()) {
        CartesBancairesInfo.validateJsonElement(jsonObj.get("cartesBancaires"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      // validate the optional field `cup`
      if (jsonObj.get("cup") != null && !jsonObj.get("cup").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("cup"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currencies") != null && !jsonObj.get("currencies").isJsonNull() && !jsonObj.get("currencies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencies` to be an array in the JSON string but got `%s`", jsonObj.get("currencies").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("customRoutingFlags") != null && !jsonObj.get("customRoutingFlags").isJsonNull() && !jsonObj.get("customRoutingFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `customRoutingFlags` to be an array in the JSON string but got `%s`", jsonObj.get("customRoutingFlags").toString()));
      }
      // validate the optional field `diners`
      if (jsonObj.get("diners") != null && !jsonObj.get("diners").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("diners"));
      }
      // validate the optional field `discover`
      if (jsonObj.get("discover") != null && !jsonObj.get("discover").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("discover"));
      }
      // validate the optional field `eftpos_australia`
      if (jsonObj.get("eftpos_australia") != null && !jsonObj.get("eftpos_australia").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("eftpos_australia"));
      }
      // validate the optional field `girocard`
      if (jsonObj.get("girocard") != null && !jsonObj.get("girocard").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("girocard"));
      }
      // validate the optional field `ideal`
      if (jsonObj.get("ideal") != null && !jsonObj.get("ideal").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("ideal"));
      }
      // validate the optional field `interac_card`
      if (jsonObj.get("interac_card") != null && !jsonObj.get("interac_card").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("interac_card"));
      }
      // validate the optional field `jcb`
      if (jsonObj.get("jcb") != null && !jsonObj.get("jcb").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("jcb"));
      }
      // validate the optional field `maestro`
      if (jsonObj.get("maestro") != null && !jsonObj.get("maestro").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("maestro"));
      }
      // validate the optional field `mc`
      if (jsonObj.get("mc") != null && !jsonObj.get("mc").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("mc"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeIds") != null && !jsonObj.get("storeIds").isJsonNull() && !jsonObj.get("storeIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeIds` to be an array in the JSON string but got `%s`", jsonObj.get("storeIds").toString()));
      }
      // validate the optional field `visa`
      if (jsonObj.get("visa") != null && !jsonObj.get("visa").isJsonNull()) {
        GenericPmWithTdiInfo.validateJsonElement(jsonObj.get("visa"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdatePaymentMethodInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdatePaymentMethodInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdatePaymentMethodInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdatePaymentMethodInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdatePaymentMethodInfo>() {
           @Override
           public void write(JsonWriter out, UpdatePaymentMethodInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdatePaymentMethodInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdatePaymentMethodInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdatePaymentMethodInfo
   * @throws IOException if the JSON string is invalid with respect to UpdatePaymentMethodInfo
   */
  public static UpdatePaymentMethodInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdatePaymentMethodInfo.class);
  }

  /**
   * Convert an instance of UpdatePaymentMethodInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

