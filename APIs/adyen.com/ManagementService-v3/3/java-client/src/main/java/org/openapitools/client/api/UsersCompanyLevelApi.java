/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CompanyUser;
import org.openapitools.client.model.CreateCompanyUserRequest;
import org.openapitools.client.model.CreateCompanyUserResponse;
import org.openapitools.client.model.ListCompanyUsersResponse;
import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.UpdateCompanyUserRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersCompanyLevelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersCompanyLevelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersCompanyLevelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCompaniesCompanyIdUsers
     * @param companyId The unique identifier of the company account. (required)
     * @param pageNumber The number of the page to return. (optional)
     * @param pageSize The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page. (optional)
     * @param username The partial or complete username to select all users that match. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompaniesCompanyIdUsersCall(String companyId, Integer pageNumber, Integer pageSize, String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/users"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompaniesCompanyIdUsersValidateBeforeCall(String companyId, Integer pageNumber, Integer pageSize, String username, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompaniesCompanyIdUsers(Async)");
        }

        return getCompaniesCompanyIdUsersCall(companyId, pageNumber, pageSize, username, _callback);

    }

    /**
     * Get a list of users
     * Returns the list of users for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param pageNumber The number of the page to return. (optional)
     * @param pageSize The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page. (optional)
     * @param username The partial or complete username to select all users that match. (optional)
     * @return ListCompanyUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ListCompanyUsersResponse getCompaniesCompanyIdUsers(String companyId, Integer pageNumber, Integer pageSize, String username) throws ApiException {
        ApiResponse<ListCompanyUsersResponse> localVarResp = getCompaniesCompanyIdUsersWithHttpInfo(companyId, pageNumber, pageSize, username);
        return localVarResp.getData();
    }

    /**
     * Get a list of users
     * Returns the list of users for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param pageNumber The number of the page to return. (optional)
     * @param pageSize The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page. (optional)
     * @param username The partial or complete username to select all users that match. (optional)
     * @return ApiResponse&lt;ListCompanyUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListCompanyUsersResponse> getCompaniesCompanyIdUsersWithHttpInfo(String companyId, Integer pageNumber, Integer pageSize, String username) throws ApiException {
        okhttp3.Call localVarCall = getCompaniesCompanyIdUsersValidateBeforeCall(companyId, pageNumber, pageSize, username, null);
        Type localVarReturnType = new TypeToken<ListCompanyUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of users (asynchronously)
     * Returns the list of users for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param pageNumber The number of the page to return. (optional)
     * @param pageSize The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page. (optional)
     * @param username The partial or complete username to select all users that match. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompaniesCompanyIdUsersAsync(String companyId, Integer pageNumber, Integer pageSize, String username, final ApiCallback<ListCompanyUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompaniesCompanyIdUsersValidateBeforeCall(companyId, pageNumber, pageSize, username, _callback);
        Type localVarReturnType = new TypeToken<ListCompanyUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCompaniesCompanyIdUsersUserId
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompaniesCompanyIdUsersUserIdCall(String companyId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/users/{userId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompaniesCompanyIdUsersUserIdValidateBeforeCall(String companyId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getCompaniesCompanyIdUsersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getCompaniesCompanyIdUsersUserId(Async)");
        }

        return getCompaniesCompanyIdUsersUserIdCall(companyId, userId, _callback);

    }

    /**
     * Get user details
     * Returns user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @return CompanyUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public CompanyUser getCompaniesCompanyIdUsersUserId(String companyId, String userId) throws ApiException {
        ApiResponse<CompanyUser> localVarResp = getCompaniesCompanyIdUsersUserIdWithHttpInfo(companyId, userId);
        return localVarResp.getData();
    }

    /**
     * Get user details
     * Returns user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @return ApiResponse&lt;CompanyUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyUser> getCompaniesCompanyIdUsersUserIdWithHttpInfo(String companyId, String userId) throws ApiException {
        okhttp3.Call localVarCall = getCompaniesCompanyIdUsersUserIdValidateBeforeCall(companyId, userId, null);
        Type localVarReturnType = new TypeToken<CompanyUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get user details (asynchronously)
     * Returns user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCompaniesCompanyIdUsersUserIdAsync(String companyId, String userId, final ApiCallback<CompanyUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompaniesCompanyIdUsersUserIdValidateBeforeCall(companyId, userId, _callback);
        Type localVarReturnType = new TypeToken<CompanyUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchCompaniesCompanyIdUsersUserId
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param updateCompanyUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCompaniesCompanyIdUsersUserIdCall(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCompanyUserRequest;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/users/{userId}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchCompaniesCompanyIdUsersUserIdValidateBeforeCall(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling patchCompaniesCompanyIdUsersUserId(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling patchCompaniesCompanyIdUsersUserId(Async)");
        }

        return patchCompaniesCompanyIdUsersUserIdCall(companyId, userId, updateCompanyUserRequest, _callback);

    }

    /**
     * Update user details
     * Updates user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param updateCompanyUserRequest  (optional)
     * @return CompanyUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public CompanyUser patchCompaniesCompanyIdUsersUserId(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest) throws ApiException {
        ApiResponse<CompanyUser> localVarResp = patchCompaniesCompanyIdUsersUserIdWithHttpInfo(companyId, userId, updateCompanyUserRequest);
        return localVarResp.getData();
    }

    /**
     * Update user details
     * Updates user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param updateCompanyUserRequest  (optional)
     * @return ApiResponse&lt;CompanyUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CompanyUser> patchCompaniesCompanyIdUsersUserIdWithHttpInfo(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest) throws ApiException {
        okhttp3.Call localVarCall = patchCompaniesCompanyIdUsersUserIdValidateBeforeCall(companyId, userId, updateCompanyUserRequest, null);
        Type localVarReturnType = new TypeToken<CompanyUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user details (asynchronously)
     * Updates user details for the &#x60;userId&#x60; and the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param userId The unique identifier of the user. (required)
     * @param updateCompanyUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchCompaniesCompanyIdUsersUserIdAsync(String companyId, String userId, UpdateCompanyUserRequest updateCompanyUserRequest, final ApiCallback<CompanyUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchCompaniesCompanyIdUsersUserIdValidateBeforeCall(companyId, userId, updateCompanyUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CompanyUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCompaniesCompanyIdUsers
     * @param companyId The unique identifier of the company account. (required)
     * @param createCompanyUserRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCompaniesCompanyIdUsersCall(String companyId, CreateCompanyUserRequest createCompanyUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCompanyUserRequest;

        // create path and map variables
        String localVarPath = "/companies/{companyId}/users"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCompaniesCompanyIdUsersValidateBeforeCall(String companyId, CreateCompanyUserRequest createCompanyUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling postCompaniesCompanyIdUsers(Async)");
        }

        return postCompaniesCompanyIdUsersCall(companyId, createCompanyUserRequest, _callback);

    }

    /**
     * Create a new user
     * Creates the user for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param createCompanyUserRequest  (optional)
     * @return CreateCompanyUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCompanyUserResponse postCompaniesCompanyIdUsers(String companyId, CreateCompanyUserRequest createCompanyUserRequest) throws ApiException {
        ApiResponse<CreateCompanyUserResponse> localVarResp = postCompaniesCompanyIdUsersWithHttpInfo(companyId, createCompanyUserRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new user
     * Creates the user for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param createCompanyUserRequest  (optional)
     * @return ApiResponse&lt;CreateCompanyUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCompanyUserResponse> postCompaniesCompanyIdUsersWithHttpInfo(String companyId, CreateCompanyUserRequest createCompanyUserRequest) throws ApiException {
        okhttp3.Call localVarCall = postCompaniesCompanyIdUsersValidateBeforeCall(companyId, createCompanyUserRequest, null);
        Type localVarReturnType = new TypeToken<CreateCompanyUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new user (asynchronously)
     * Creates the user for the &#x60;companyId&#x60; identified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management APIâ€”Users read and write 
     * @param companyId The unique identifier of the company account. (required)
     * @param createCompanyUserRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCompaniesCompanyIdUsersAsync(String companyId, CreateCompanyUserRequest createCompanyUserRequest, final ApiCallback<CreateCompanyUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCompaniesCompanyIdUsersValidateBeforeCall(companyId, createCompanyUserRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCompanyUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
