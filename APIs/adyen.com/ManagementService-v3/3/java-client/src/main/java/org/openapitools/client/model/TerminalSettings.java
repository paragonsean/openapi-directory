/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CardholderReceipt;
import org.openapitools.client.model.Connectivity;
import org.openapitools.client.model.Gratuity;
import org.openapitools.client.model.Hardware;
import org.openapitools.client.model.Localization;
import org.openapitools.client.model.Nexo;
import org.openapitools.client.model.OfflineProcessing;
import org.openapitools.client.model.Opi;
import org.openapitools.client.model.Passcodes;
import org.openapitools.client.model.PayAtTable;
import org.openapitools.client.model.Payment;
import org.openapitools.client.model.ReceiptOptions;
import org.openapitools.client.model.ReceiptPrinting;
import org.openapitools.client.model.Refunds;
import org.openapitools.client.model.Signature;
import org.openapitools.client.model.Standalone;
import org.openapitools.client.model.Surcharge;
import org.openapitools.client.model.TapToPay;
import org.openapitools.client.model.TerminalInstructions;
import org.openapitools.client.model.Timeouts;
import org.openapitools.client.model.WifiProfiles;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TerminalSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerminalSettings {
  public static final String SERIALIZED_NAME_CARDHOLDER_RECEIPT = "cardholderReceipt";
  @SerializedName(SERIALIZED_NAME_CARDHOLDER_RECEIPT)
  private CardholderReceipt cardholderReceipt;

  public static final String SERIALIZED_NAME_CONNECTIVITY = "connectivity";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY)
  private Connectivity connectivity;

  public static final String SERIALIZED_NAME_GRATUITIES = "gratuities";
  @SerializedName(SERIALIZED_NAME_GRATUITIES)
  private List<Gratuity> gratuities = new ArrayList<>();

  public static final String SERIALIZED_NAME_HARDWARE = "hardware";
  @SerializedName(SERIALIZED_NAME_HARDWARE)
  private Hardware hardware;

  public static final String SERIALIZED_NAME_LOCALIZATION = "localization";
  @SerializedName(SERIALIZED_NAME_LOCALIZATION)
  private Localization localization;

  public static final String SERIALIZED_NAME_NEXO = "nexo";
  @SerializedName(SERIALIZED_NAME_NEXO)
  private Nexo nexo;

  public static final String SERIALIZED_NAME_OFFLINE_PROCESSING = "offlineProcessing";
  @SerializedName(SERIALIZED_NAME_OFFLINE_PROCESSING)
  private OfflineProcessing offlineProcessing;

  public static final String SERIALIZED_NAME_OPI = "opi";
  @SerializedName(SERIALIZED_NAME_OPI)
  private Opi opi;

  public static final String SERIALIZED_NAME_PASSCODES = "passcodes";
  @SerializedName(SERIALIZED_NAME_PASSCODES)
  private Passcodes passcodes;

  public static final String SERIALIZED_NAME_PAY_AT_TABLE = "payAtTable";
  @SerializedName(SERIALIZED_NAME_PAY_AT_TABLE)
  private PayAtTable payAtTable;

  public static final String SERIALIZED_NAME_PAYMENT = "payment";
  @SerializedName(SERIALIZED_NAME_PAYMENT)
  private Payment payment;

  public static final String SERIALIZED_NAME_RECEIPT_OPTIONS = "receiptOptions";
  @SerializedName(SERIALIZED_NAME_RECEIPT_OPTIONS)
  private ReceiptOptions receiptOptions;

  public static final String SERIALIZED_NAME_RECEIPT_PRINTING = "receiptPrinting";
  @SerializedName(SERIALIZED_NAME_RECEIPT_PRINTING)
  private ReceiptPrinting receiptPrinting;

  public static final String SERIALIZED_NAME_REFUNDS = "refunds";
  @SerializedName(SERIALIZED_NAME_REFUNDS)
  private Refunds refunds;

  public static final String SERIALIZED_NAME_SIGNATURE = "signature";
  @SerializedName(SERIALIZED_NAME_SIGNATURE)
  private Signature signature;

  public static final String SERIALIZED_NAME_STANDALONE = "standalone";
  @SerializedName(SERIALIZED_NAME_STANDALONE)
  private Standalone standalone;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Surcharge surcharge;

  public static final String SERIALIZED_NAME_TAP_TO_PAY = "tapToPay";
  @SerializedName(SERIALIZED_NAME_TAP_TO_PAY)
  private TapToPay tapToPay;

  public static final String SERIALIZED_NAME_TERMINAL_INSTRUCTIONS = "terminalInstructions";
  @SerializedName(SERIALIZED_NAME_TERMINAL_INSTRUCTIONS)
  private TerminalInstructions terminalInstructions;

  public static final String SERIALIZED_NAME_TIMEOUTS = "timeouts";
  @SerializedName(SERIALIZED_NAME_TIMEOUTS)
  private Timeouts timeouts;

  public static final String SERIALIZED_NAME_WIFI_PROFILES = "wifiProfiles";
  @SerializedName(SERIALIZED_NAME_WIFI_PROFILES)
  private WifiProfiles wifiProfiles;

  public TerminalSettings() {
  }

  public TerminalSettings cardholderReceipt(CardholderReceipt cardholderReceipt) {
    this.cardholderReceipt = cardholderReceipt;
    return this;
  }

  /**
   * Settings to define the header of the shopper receipt.
   * @return cardholderReceipt
   */
  @javax.annotation.Nullable
  public CardholderReceipt getCardholderReceipt() {
    return cardholderReceipt;
  }

  public void setCardholderReceipt(CardholderReceipt cardholderReceipt) {
    this.cardholderReceipt = cardholderReceipt;
  }


  public TerminalSettings connectivity(Connectivity connectivity) {
    this.connectivity = connectivity;
    return this;
  }

  /**
   * Settings for terminal connectivity features.
   * @return connectivity
   */
  @javax.annotation.Nullable
  public Connectivity getConnectivity() {
    return connectivity;
  }

  public void setConnectivity(Connectivity connectivity) {
    this.connectivity = connectivity;
  }


  public TerminalSettings gratuities(List<Gratuity> gratuities) {
    this.gratuities = gratuities;
    return this;
  }

  public TerminalSettings addGratuitiesItem(Gratuity gratuitiesItem) {
    if (this.gratuities == null) {
      this.gratuities = new ArrayList<>();
    }
    this.gratuities.add(gratuitiesItem);
    return this;
  }

  /**
   * Settings for tipping with or without predefined options to choose from. The maximum number of predefined options is four, or three plus the option to enter a custom tip.
   * @return gratuities
   */
  @javax.annotation.Nullable
  public List<Gratuity> getGratuities() {
    return gratuities;
  }

  public void setGratuities(List<Gratuity> gratuities) {
    this.gratuities = gratuities;
  }


  public TerminalSettings hardware(Hardware hardware) {
    this.hardware = hardware;
    return this;
  }

  /**
   * Settings for terminal hardware features.
   * @return hardware
   */
  @javax.annotation.Nullable
  public Hardware getHardware() {
    return hardware;
  }

  public void setHardware(Hardware hardware) {
    this.hardware = hardware;
  }


  public TerminalSettings localization(Localization localization) {
    this.localization = localization;
    return this;
  }

  /**
   * Settings for localization.
   * @return localization
   */
  @javax.annotation.Nullable
  public Localization getLocalization() {
    return localization;
  }

  public void setLocalization(Localization localization) {
    this.localization = localization;
  }


  public TerminalSettings nexo(Nexo nexo) {
    this.nexo = nexo;
    return this;
  }

  /**
   * Settings for a Terminal API integration.
   * @return nexo
   */
  @javax.annotation.Nullable
  public Nexo getNexo() {
    return nexo;
  }

  public void setNexo(Nexo nexo) {
    this.nexo = nexo;
  }


  public TerminalSettings offlineProcessing(OfflineProcessing offlineProcessing) {
    this.offlineProcessing = offlineProcessing;
    return this;
  }

  /**
   * Settings for [offline payment](https://docs.adyen.com/point-of-sale/offline-payments) features.
   * @return offlineProcessing
   */
  @javax.annotation.Nullable
  public OfflineProcessing getOfflineProcessing() {
    return offlineProcessing;
  }

  public void setOfflineProcessing(OfflineProcessing offlineProcessing) {
    this.offlineProcessing = offlineProcessing;
  }


  public TerminalSettings opi(Opi opi) {
    this.opi = opi;
    return this;
  }

  /**
   * Settings for an Oracle Payment Interface (OPI) integration.
   * @return opi
   */
  @javax.annotation.Nullable
  public Opi getOpi() {
    return opi;
  }

  public void setOpi(Opi opi) {
    this.opi = opi;
  }


  public TerminalSettings passcodes(Passcodes passcodes) {
    this.passcodes = passcodes;
    return this;
  }

  /**
   * Settings for [passcodes](https://docs.adyen.com/point-of-sale/managing-terminals/menu-access?tab&#x3D;manage_passcodes_with_an_api_call_2#manage-passcodes) features.
   * @return passcodes
   */
  @javax.annotation.Nullable
  public Passcodes getPasscodes() {
    return passcodes;
  }

  public void setPasscodes(Passcodes passcodes) {
    this.passcodes = passcodes;
  }


  public TerminalSettings payAtTable(PayAtTable payAtTable) {
    this.payAtTable = payAtTable;
    return this;
  }

  /**
   * Settings for [Pay-at-table](https://docs.adyen.com/point-of-sale/pay-at-x) features.
   * @return payAtTable
   */
  @javax.annotation.Nullable
  public PayAtTable getPayAtTable() {
    return payAtTable;
  }

  public void setPayAtTable(PayAtTable payAtTable) {
    this.payAtTable = payAtTable;
  }


  public TerminalSettings payment(Payment payment) {
    this.payment = payment;
    return this;
  }

  /**
   * Settings for payment features.
   * @return payment
   */
  @javax.annotation.Nullable
  public Payment getPayment() {
    return payment;
  }

  public void setPayment(Payment payment) {
    this.payment = payment;
  }


  public TerminalSettings receiptOptions(ReceiptOptions receiptOptions) {
    this.receiptOptions = receiptOptions;
    return this;
  }

  /**
   * Generic receipt settings.
   * @return receiptOptions
   */
  @javax.annotation.Nullable
  public ReceiptOptions getReceiptOptions() {
    return receiptOptions;
  }

  public void setReceiptOptions(ReceiptOptions receiptOptions) {
    this.receiptOptions = receiptOptions;
  }


  public TerminalSettings receiptPrinting(ReceiptPrinting receiptPrinting) {
    this.receiptPrinting = receiptPrinting;
    return this;
  }

  /**
   * Transaction outcomes that you want the terminal to print a merchant receipt or a shopper receipt for.
   * @return receiptPrinting
   */
  @javax.annotation.Nullable
  public ReceiptPrinting getReceiptPrinting() {
    return receiptPrinting;
  }

  public void setReceiptPrinting(ReceiptPrinting receiptPrinting) {
    this.receiptPrinting = receiptPrinting;
  }


  public TerminalSettings refunds(Refunds refunds) {
    this.refunds = refunds;
    return this;
  }

  /**
   * Settings for refunds.
   * @return refunds
   */
  @javax.annotation.Nullable
  public Refunds getRefunds() {
    return refunds;
  }

  public void setRefunds(Refunds refunds) {
    this.refunds = refunds;
  }


  public TerminalSettings signature(Signature signature) {
    this.signature = signature;
    return this;
  }

  /**
   * Settings to skip signature, sign on display, or sign on receipt.
   * @return signature
   */
  @javax.annotation.Nullable
  public Signature getSignature() {
    return signature;
  }

  public void setSignature(Signature signature) {
    this.signature = signature;
  }


  public TerminalSettings standalone(Standalone standalone) {
    this.standalone = standalone;
    return this;
  }

  /**
   * Settings for [standalone](https://docs.adyen.com/point-of-sale/standalone/standalone-build/set-up-standalone#set-up-standalone-using-an-api-call) features.
   * @return standalone
   */
  @javax.annotation.Nullable
  public Standalone getStandalone() {
    return standalone;
  }

  public void setStandalone(Standalone standalone) {
    this.standalone = standalone;
  }


  public TerminalSettings surcharge(Surcharge surcharge) {
    this.surcharge = surcharge;
    return this;
  }

  /**
   * Settings for payment [surcharge](https://docs.adyen.com/point-of-sale/surcharge) features.
   * @return surcharge
   */
  @javax.annotation.Nullable
  public Surcharge getSurcharge() {
    return surcharge;
  }

  public void setSurcharge(Surcharge surcharge) {
    this.surcharge = surcharge;
  }


  public TerminalSettings tapToPay(TapToPay tapToPay) {
    this.tapToPay = tapToPay;
    return this;
  }

  /**
   * Settings for Tap to Pay.
   * @return tapToPay
   */
  @javax.annotation.Nullable
  public TapToPay getTapToPay() {
    return tapToPay;
  }

  public void setTapToPay(TapToPay tapToPay) {
    this.tapToPay = tapToPay;
  }


  public TerminalSettings terminalInstructions(TerminalInstructions terminalInstructions) {
    this.terminalInstructions = terminalInstructions;
    return this;
  }

  /**
   * Settings to define the behaviour of the payment terminal.
   * @return terminalInstructions
   */
  @javax.annotation.Nullable
  public TerminalInstructions getTerminalInstructions() {
    return terminalInstructions;
  }

  public void setTerminalInstructions(TerminalInstructions terminalInstructions) {
    this.terminalInstructions = terminalInstructions;
  }


  public TerminalSettings timeouts(Timeouts timeouts) {
    this.timeouts = timeouts;
    return this;
  }

  /**
   * Settings for device [time-outs](https://docs.adyen.com/point-of-sale/pos-timeouts#device-time-out).
   * @return timeouts
   */
  @javax.annotation.Nullable
  public Timeouts getTimeouts() {
    return timeouts;
  }

  public void setTimeouts(Timeouts timeouts) {
    this.timeouts = timeouts;
  }


  public TerminalSettings wifiProfiles(WifiProfiles wifiProfiles) {
    this.wifiProfiles = wifiProfiles;
    return this;
  }

  /**
   * Remote Wi-Fi profiles for WPA and WPA2 PSK and EAP Wi-Fi networks.
   * @return wifiProfiles
   */
  @javax.annotation.Nullable
  public WifiProfiles getWifiProfiles() {
    return wifiProfiles;
  }

  public void setWifiProfiles(WifiProfiles wifiProfiles) {
    this.wifiProfiles = wifiProfiles;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminalSettings terminalSettings = (TerminalSettings) o;
    return Objects.equals(this.cardholderReceipt, terminalSettings.cardholderReceipt) &&
        Objects.equals(this.connectivity, terminalSettings.connectivity) &&
        Objects.equals(this.gratuities, terminalSettings.gratuities) &&
        Objects.equals(this.hardware, terminalSettings.hardware) &&
        Objects.equals(this.localization, terminalSettings.localization) &&
        Objects.equals(this.nexo, terminalSettings.nexo) &&
        Objects.equals(this.offlineProcessing, terminalSettings.offlineProcessing) &&
        Objects.equals(this.opi, terminalSettings.opi) &&
        Objects.equals(this.passcodes, terminalSettings.passcodes) &&
        Objects.equals(this.payAtTable, terminalSettings.payAtTable) &&
        Objects.equals(this.payment, terminalSettings.payment) &&
        Objects.equals(this.receiptOptions, terminalSettings.receiptOptions) &&
        Objects.equals(this.receiptPrinting, terminalSettings.receiptPrinting) &&
        Objects.equals(this.refunds, terminalSettings.refunds) &&
        Objects.equals(this.signature, terminalSettings.signature) &&
        Objects.equals(this.standalone, terminalSettings.standalone) &&
        Objects.equals(this.surcharge, terminalSettings.surcharge) &&
        Objects.equals(this.tapToPay, terminalSettings.tapToPay) &&
        Objects.equals(this.terminalInstructions, terminalSettings.terminalInstructions) &&
        Objects.equals(this.timeouts, terminalSettings.timeouts) &&
        Objects.equals(this.wifiProfiles, terminalSettings.wifiProfiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardholderReceipt, connectivity, gratuities, hardware, localization, nexo, offlineProcessing, opi, passcodes, payAtTable, payment, receiptOptions, receiptPrinting, refunds, signature, standalone, surcharge, tapToPay, terminalInstructions, timeouts, wifiProfiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminalSettings {\n");
    sb.append("    cardholderReceipt: ").append(toIndentedString(cardholderReceipt)).append("\n");
    sb.append("    connectivity: ").append(toIndentedString(connectivity)).append("\n");
    sb.append("    gratuities: ").append(toIndentedString(gratuities)).append("\n");
    sb.append("    hardware: ").append(toIndentedString(hardware)).append("\n");
    sb.append("    localization: ").append(toIndentedString(localization)).append("\n");
    sb.append("    nexo: ").append(toIndentedString(nexo)).append("\n");
    sb.append("    offlineProcessing: ").append(toIndentedString(offlineProcessing)).append("\n");
    sb.append("    opi: ").append(toIndentedString(opi)).append("\n");
    sb.append("    passcodes: ").append(toIndentedString(passcodes)).append("\n");
    sb.append("    payAtTable: ").append(toIndentedString(payAtTable)).append("\n");
    sb.append("    payment: ").append(toIndentedString(payment)).append("\n");
    sb.append("    receiptOptions: ").append(toIndentedString(receiptOptions)).append("\n");
    sb.append("    receiptPrinting: ").append(toIndentedString(receiptPrinting)).append("\n");
    sb.append("    refunds: ").append(toIndentedString(refunds)).append("\n");
    sb.append("    signature: ").append(toIndentedString(signature)).append("\n");
    sb.append("    standalone: ").append(toIndentedString(standalone)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    tapToPay: ").append(toIndentedString(tapToPay)).append("\n");
    sb.append("    terminalInstructions: ").append(toIndentedString(terminalInstructions)).append("\n");
    sb.append("    timeouts: ").append(toIndentedString(timeouts)).append("\n");
    sb.append("    wifiProfiles: ").append(toIndentedString(wifiProfiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardholderReceipt");
    openapiFields.add("connectivity");
    openapiFields.add("gratuities");
    openapiFields.add("hardware");
    openapiFields.add("localization");
    openapiFields.add("nexo");
    openapiFields.add("offlineProcessing");
    openapiFields.add("opi");
    openapiFields.add("passcodes");
    openapiFields.add("payAtTable");
    openapiFields.add("payment");
    openapiFields.add("receiptOptions");
    openapiFields.add("receiptPrinting");
    openapiFields.add("refunds");
    openapiFields.add("signature");
    openapiFields.add("standalone");
    openapiFields.add("surcharge");
    openapiFields.add("tapToPay");
    openapiFields.add("terminalInstructions");
    openapiFields.add("timeouts");
    openapiFields.add("wifiProfiles");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerminalSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminalSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminalSettings is not found in the empty JSON string", TerminalSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminalSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminalSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cardholderReceipt`
      if (jsonObj.get("cardholderReceipt") != null && !jsonObj.get("cardholderReceipt").isJsonNull()) {
        CardholderReceipt.validateJsonElement(jsonObj.get("cardholderReceipt"));
      }
      // validate the optional field `connectivity`
      if (jsonObj.get("connectivity") != null && !jsonObj.get("connectivity").isJsonNull()) {
        Connectivity.validateJsonElement(jsonObj.get("connectivity"));
      }
      if (jsonObj.get("gratuities") != null && !jsonObj.get("gratuities").isJsonNull()) {
        JsonArray jsonArraygratuities = jsonObj.getAsJsonArray("gratuities");
        if (jsonArraygratuities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gratuities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gratuities` to be an array in the JSON string but got `%s`", jsonObj.get("gratuities").toString()));
          }

          // validate the optional field `gratuities` (array)
          for (int i = 0; i < jsonArraygratuities.size(); i++) {
            Gratuity.validateJsonElement(jsonArraygratuities.get(i));
          };
        }
      }
      // validate the optional field `hardware`
      if (jsonObj.get("hardware") != null && !jsonObj.get("hardware").isJsonNull()) {
        Hardware.validateJsonElement(jsonObj.get("hardware"));
      }
      // validate the optional field `localization`
      if (jsonObj.get("localization") != null && !jsonObj.get("localization").isJsonNull()) {
        Localization.validateJsonElement(jsonObj.get("localization"));
      }
      // validate the optional field `nexo`
      if (jsonObj.get("nexo") != null && !jsonObj.get("nexo").isJsonNull()) {
        Nexo.validateJsonElement(jsonObj.get("nexo"));
      }
      // validate the optional field `offlineProcessing`
      if (jsonObj.get("offlineProcessing") != null && !jsonObj.get("offlineProcessing").isJsonNull()) {
        OfflineProcessing.validateJsonElement(jsonObj.get("offlineProcessing"));
      }
      // validate the optional field `opi`
      if (jsonObj.get("opi") != null && !jsonObj.get("opi").isJsonNull()) {
        Opi.validateJsonElement(jsonObj.get("opi"));
      }
      // validate the optional field `passcodes`
      if (jsonObj.get("passcodes") != null && !jsonObj.get("passcodes").isJsonNull()) {
        Passcodes.validateJsonElement(jsonObj.get("passcodes"));
      }
      // validate the optional field `payAtTable`
      if (jsonObj.get("payAtTable") != null && !jsonObj.get("payAtTable").isJsonNull()) {
        PayAtTable.validateJsonElement(jsonObj.get("payAtTable"));
      }
      // validate the optional field `payment`
      if (jsonObj.get("payment") != null && !jsonObj.get("payment").isJsonNull()) {
        Payment.validateJsonElement(jsonObj.get("payment"));
      }
      // validate the optional field `receiptOptions`
      if (jsonObj.get("receiptOptions") != null && !jsonObj.get("receiptOptions").isJsonNull()) {
        ReceiptOptions.validateJsonElement(jsonObj.get("receiptOptions"));
      }
      // validate the optional field `receiptPrinting`
      if (jsonObj.get("receiptPrinting") != null && !jsonObj.get("receiptPrinting").isJsonNull()) {
        ReceiptPrinting.validateJsonElement(jsonObj.get("receiptPrinting"));
      }
      // validate the optional field `refunds`
      if (jsonObj.get("refunds") != null && !jsonObj.get("refunds").isJsonNull()) {
        Refunds.validateJsonElement(jsonObj.get("refunds"));
      }
      // validate the optional field `signature`
      if (jsonObj.get("signature") != null && !jsonObj.get("signature").isJsonNull()) {
        Signature.validateJsonElement(jsonObj.get("signature"));
      }
      // validate the optional field `standalone`
      if (jsonObj.get("standalone") != null && !jsonObj.get("standalone").isJsonNull()) {
        Standalone.validateJsonElement(jsonObj.get("standalone"));
      }
      // validate the optional field `surcharge`
      if (jsonObj.get("surcharge") != null && !jsonObj.get("surcharge").isJsonNull()) {
        Surcharge.validateJsonElement(jsonObj.get("surcharge"));
      }
      // validate the optional field `tapToPay`
      if (jsonObj.get("tapToPay") != null && !jsonObj.get("tapToPay").isJsonNull()) {
        TapToPay.validateJsonElement(jsonObj.get("tapToPay"));
      }
      // validate the optional field `terminalInstructions`
      if (jsonObj.get("terminalInstructions") != null && !jsonObj.get("terminalInstructions").isJsonNull()) {
        TerminalInstructions.validateJsonElement(jsonObj.get("terminalInstructions"));
      }
      // validate the optional field `timeouts`
      if (jsonObj.get("timeouts") != null && !jsonObj.get("timeouts").isJsonNull()) {
        Timeouts.validateJsonElement(jsonObj.get("timeouts"));
      }
      // validate the optional field `wifiProfiles`
      if (jsonObj.get("wifiProfiles") != null && !jsonObj.get("wifiProfiles").isJsonNull()) {
        WifiProfiles.validateJsonElement(jsonObj.get("wifiProfiles"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminalSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminalSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminalSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminalSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminalSettings>() {
           @Override
           public void write(JsonWriter out, TerminalSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminalSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerminalSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerminalSettings
   * @throws IOException if the JSON string is invalid with respect to TerminalSettings
   */
  public static TerminalSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminalSettings.class);
  }

  /**
   * Convert an instance of TerminalSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

