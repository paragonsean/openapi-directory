/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SplitConfigurationRule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SplitConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SplitConfiguration {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<SplitConfigurationRule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPLIT_CONFIGURATION_ID = "splitConfigurationId";
  @SerializedName(SERIALIZED_NAME_SPLIT_CONFIGURATION_ID)
  private String splitConfigurationId;

  public static final String SERIALIZED_NAME_STORES = "stores";
  @SerializedName(SERIALIZED_NAME_STORES)
  private List<String> stores = new ArrayList<>();

  public SplitConfiguration() {
  }

  public SplitConfiguration(
     String splitConfigurationId
  ) {
    this();
    this.splitConfigurationId = splitConfigurationId;
  }

  public SplitConfiguration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Your description for the split configuration.
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SplitConfiguration rules(List<SplitConfigurationRule> rules) {
    this.rules = rules;
    return this;
  }

  public SplitConfiguration addRulesItem(SplitConfigurationRule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

  /**
   * Array of rules that define the split configuration behavior.
   * @return rules
   */
  @javax.annotation.Nonnull
  public List<SplitConfigurationRule> getRules() {
    return rules;
  }

  public void setRules(List<SplitConfigurationRule> rules) {
    this.rules = rules;
  }


  /**
   * Unique identifier of the split configuration.
   * @return splitConfigurationId
   */
  @javax.annotation.Nullable
  public String getSplitConfigurationId() {
    return splitConfigurationId;
  }



  public SplitConfiguration stores(List<String> stores) {
    this.stores = stores;
    return this;
  }

  public SplitConfiguration addStoresItem(String storesItem) {
    if (this.stores == null) {
      this.stores = new ArrayList<>();
    }
    this.stores.add(storesItem);
    return this;
  }

  /**
   * List of stores to which the split configuration applies.
   * @return stores
   */
  @javax.annotation.Nullable
  public List<String> getStores() {
    return stores;
  }

  public void setStores(List<String> stores) {
    this.stores = stores;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SplitConfiguration splitConfiguration = (SplitConfiguration) o;
    return Objects.equals(this.description, splitConfiguration.description) &&
        Objects.equals(this.rules, splitConfiguration.rules) &&
        Objects.equals(this.splitConfigurationId, splitConfiguration.splitConfigurationId) &&
        Objects.equals(this.stores, splitConfiguration.stores);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, rules, splitConfigurationId, stores);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SplitConfiguration {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    splitConfigurationId: ").append(toIndentedString(splitConfigurationId)).append("\n");
    sb.append("    stores: ").append(toIndentedString(stores)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("rules");
    openapiFields.add("splitConfigurationId");
    openapiFields.add("stores");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("rules");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SplitConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SplitConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SplitConfiguration is not found in the empty JSON string", SplitConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SplitConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SplitConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SplitConfiguration.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("rules").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
      }

      JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
      // validate the required field `rules` (array)
      for (int i = 0; i < jsonArrayrules.size(); i++) {
        SplitConfigurationRule.validateJsonElement(jsonArrayrules.get(i));
      };
      if ((jsonObj.get("splitConfigurationId") != null && !jsonObj.get("splitConfigurationId").isJsonNull()) && !jsonObj.get("splitConfigurationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splitConfigurationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splitConfigurationId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stores") != null && !jsonObj.get("stores").isJsonNull() && !jsonObj.get("stores").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stores` to be an array in the JSON string but got `%s`", jsonObj.get("stores").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SplitConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SplitConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SplitConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SplitConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<SplitConfiguration>() {
           @Override
           public void write(JsonWriter out, SplitConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SplitConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SplitConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SplitConfiguration
   * @throws IOException if the JSON string is invalid with respect to SplitConfiguration
   */
  public static SplitConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SplitConfiguration.class);
  }

  /**
   * Convert an instance of SplitConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

