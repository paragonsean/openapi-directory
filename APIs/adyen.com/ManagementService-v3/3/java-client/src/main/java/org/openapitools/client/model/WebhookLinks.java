/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LinksElement;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WebhookLinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebhookLinks {
  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private LinksElement company;

  public static final String SERIALIZED_NAME_GENERATE_HMAC = "generateHmac";
  @SerializedName(SERIALIZED_NAME_GENERATE_HMAC)
  private LinksElement generateHmac;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private LinksElement merchant;

  public static final String SERIALIZED_NAME_SELF = "self";
  @SerializedName(SERIALIZED_NAME_SELF)
  private LinksElement self;

  public static final String SERIALIZED_NAME_TEST_WEBHOOK = "testWebhook";
  @SerializedName(SERIALIZED_NAME_TEST_WEBHOOK)
  private LinksElement testWebhook;

  public WebhookLinks() {
  }

  public WebhookLinks company(LinksElement company) {
    this.company = company;
    return this;
  }

  /**
   * The company account that the webhook is configured for. Only present for company-level webhooks.
   * @return company
   */
  @javax.annotation.Nullable
  public LinksElement getCompany() {
    return company;
  }

  public void setCompany(LinksElement company) {
    this.company = company;
  }


  public WebhookLinks generateHmac(LinksElement generateHmac) {
    this.generateHmac = generateHmac;
    return this;
  }

  /**
   * Generate an HMAC key.
   * @return generateHmac
   */
  @javax.annotation.Nonnull
  public LinksElement getGenerateHmac() {
    return generateHmac;
  }

  public void setGenerateHmac(LinksElement generateHmac) {
    this.generateHmac = generateHmac;
  }


  public WebhookLinks merchant(LinksElement merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * The merchant account that the webhook is configured for. Only present for merchant-level webhooks.
   * @return merchant
   */
  @javax.annotation.Nullable
  public LinksElement getMerchant() {
    return merchant;
  }

  public void setMerchant(LinksElement merchant) {
    this.merchant = merchant;
  }


  public WebhookLinks self(LinksElement self) {
    this.self = self;
    return this;
  }

  /**
   * Link to the resource itself.
   * @return self
   */
  @javax.annotation.Nonnull
  public LinksElement getSelf() {
    return self;
  }

  public void setSelf(LinksElement self) {
    this.self = self;
  }


  public WebhookLinks testWebhook(LinksElement testWebhook) {
    this.testWebhook = testWebhook;
    return this;
  }

  /**
   * Test the webhook setup.
   * @return testWebhook
   */
  @javax.annotation.Nonnull
  public LinksElement getTestWebhook() {
    return testWebhook;
  }

  public void setTestWebhook(LinksElement testWebhook) {
    this.testWebhook = testWebhook;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookLinks webhookLinks = (WebhookLinks) o;
    return Objects.equals(this.company, webhookLinks.company) &&
        Objects.equals(this.generateHmac, webhookLinks.generateHmac) &&
        Objects.equals(this.merchant, webhookLinks.merchant) &&
        Objects.equals(this.self, webhookLinks.self) &&
        Objects.equals(this.testWebhook, webhookLinks.testWebhook);
  }

  @Override
  public int hashCode() {
    return Objects.hash(company, generateHmac, merchant, self, testWebhook);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookLinks {\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    generateHmac: ").append(toIndentedString(generateHmac)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    self: ").append(toIndentedString(self)).append("\n");
    sb.append("    testWebhook: ").append(toIndentedString(testWebhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("company");
    openapiFields.add("generateHmac");
    openapiFields.add("merchant");
    openapiFields.add("self");
    openapiFields.add("testWebhook");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("generateHmac");
    openapiRequiredFields.add("self");
    openapiRequiredFields.add("testWebhook");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookLinks
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebhookLinks.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookLinks is not found in the empty JSON string", WebhookLinks.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookLinks.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookLinks` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookLinks.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        LinksElement.validateJsonElement(jsonObj.get("company"));
      }
      // validate the required field `generateHmac`
      LinksElement.validateJsonElement(jsonObj.get("generateHmac"));
      // validate the optional field `merchant`
      if (jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) {
        LinksElement.validateJsonElement(jsonObj.get("merchant"));
      }
      // validate the required field `self`
      LinksElement.validateJsonElement(jsonObj.get("self"));
      // validate the required field `testWebhook`
      LinksElement.validateJsonElement(jsonObj.get("testWebhook"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookLinks.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookLinks' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookLinks> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookLinks.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookLinks>() {
           @Override
           public void write(JsonWriter out, WebhookLinks value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookLinks read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookLinks given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookLinks
   * @throws IOException if the JSON string is invalid with respect to WebhookLinks
   */
  public static WebhookLinks fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookLinks.class);
  }

  /**
   * Convert an instance of WebhookLinks to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

