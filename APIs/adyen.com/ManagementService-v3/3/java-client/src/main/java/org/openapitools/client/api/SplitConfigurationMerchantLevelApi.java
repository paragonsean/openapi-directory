/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RestServiceError;
import org.openapitools.client.model.SplitConfiguration;
import org.openapitools.client.model.SplitConfigurationList;
import org.openapitools.client.model.SplitConfigurationRule;
import org.openapitools.client.model.UpdateSplitConfigurationLogicRequest;
import org.openapitools.client.model.UpdateSplitConfigurationRequest;
import org.openapitools.client.model.UpdateSplitConfigurationRuleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SplitConfigurationMerchantLevelApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SplitConfigurationMerchantLevelApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SplitConfigurationMerchantLevelApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(String merchantId, String splitConfigurationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(String merchantId, String splitConfigurationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        return deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(merchantId, splitConfigurationId, _callback);

    }

    /**
     * Delete a split configuration
     * Deletes the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(String merchantId, String splitConfigurationId) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(merchantId, splitConfigurationId);
        return localVarResp.getData();
    }

    /**
     * Delete a split configuration
     * Deletes the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(String merchantId, String splitConfigurationId) throws ApiException {
        okhttp3.Call localVarCall = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a split configuration (asynchronously)
     * Deletes the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdAsync(String merchantId, String splitConfigurationId, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCall(String merchantId, String splitConfigurationId, String ruleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(String merchantId, String splitConfigurationId, String ruleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        return deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCall(merchantId, splitConfigurationId, ruleId, _callback);

    }

    /**
     * Delete a split configuration rule
     * Deletes the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId  (required)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(String merchantId, String splitConfigurationId, String ruleId) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdWithHttpInfo(merchantId, splitConfigurationId, ruleId);
        return localVarResp.getData();
    }

    /**
     * Delete a split configuration rule
     * Deletes the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId  (required)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdWithHttpInfo(String merchantId, String splitConfigurationId, String ruleId) throws ApiException {
        okhttp3.Call localVarCall = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a split configuration rule (asynchronously)
     * Deletes the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdAsync(String merchantId, String splitConfigurationId, String ruleId, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantsMerchantIdSplitConfigurations
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsMerchantIdSplitConfigurationsCall(String merchantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(String merchantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling getMerchantsMerchantIdSplitConfigurations(Async)");
        }

        return getMerchantsMerchantIdSplitConfigurationsCall(merchantId, _callback);

    }

    /**
     * Get a list of split configurations
     * Returns the list of split configurations for the merchant account.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @return SplitConfigurationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfigurationList getMerchantsMerchantIdSplitConfigurations(String merchantId) throws ApiException {
        ApiResponse<SplitConfigurationList> localVarResp = getMerchantsMerchantIdSplitConfigurationsWithHttpInfo(merchantId);
        return localVarResp.getData();
    }

    /**
     * Get a list of split configurations
     * Returns the list of split configurations for the merchant account.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @return ApiResponse&lt;SplitConfigurationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfigurationList> getMerchantsMerchantIdSplitConfigurationsWithHttpInfo(String merchantId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(merchantId, null);
        Type localVarReturnType = new TypeToken<SplitConfigurationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a list of split configurations (asynchronously)
     * Returns the list of split configurations for the merchant account.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsMerchantIdSplitConfigurationsAsync(String merchantId, final ApiCallback<SplitConfigurationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(merchantId, _callback);
        Type localVarReturnType = new TypeToken<SplitConfigurationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantsMerchantIdSplitConfigurationsSplitConfigurationId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(String merchantId, String splitConfigurationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(String merchantId, String splitConfigurationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling getMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling getMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        return getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(merchantId, splitConfigurationId, _callback);

    }

    /**
     * Get a split configuration
     * Returns the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration getMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(String merchantId, String splitConfigurationId) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(merchantId, splitConfigurationId);
        return localVarResp.getData();
    }

    /**
     * Get a split configuration
     * Returns the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(String merchantId, String splitConfigurationId) throws ApiException {
        okhttp3.Call localVarCall = getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a split configuration (asynchronously)
     * Returns the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdAsync(String merchantId, String splitConfigurationId, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param updateSplitConfigurationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(String merchantId, String splitConfigurationId, UpdateSplitConfigurationRequest updateSplitConfigurationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSplitConfigurationRequest;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(String merchantId, String splitConfigurationId, UpdateSplitConfigurationRequest updateSplitConfigurationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        return patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(merchantId, splitConfigurationId, updateSplitConfigurationRequest, _callback);

    }

    /**
     * Update split configuration description
     * Changes the description of the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param updateSplitConfigurationRequest  (optional)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(String merchantId, String splitConfigurationId, UpdateSplitConfigurationRequest updateSplitConfigurationRequest) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(merchantId, splitConfigurationId, updateSplitConfigurationRequest);
        return localVarResp.getData();
    }

    /**
     * Update split configuration description
     * Changes the description of the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param updateSplitConfigurationRequest  (optional)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(String merchantId, String splitConfigurationId, UpdateSplitConfigurationRequest updateSplitConfigurationRequest) throws ApiException {
        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, updateSplitConfigurationRequest, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update split configuration description (asynchronously)
     * Changes the description of the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param updateSplitConfigurationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdAsync(String merchantId, String splitConfigurationId, UpdateSplitConfigurationRequest updateSplitConfigurationRequest, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, updateSplitConfigurationRequest, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param updateSplitConfigurationRuleRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCall(String merchantId, String splitConfigurationId, String ruleId, UpdateSplitConfigurationRuleRequest updateSplitConfigurationRuleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSplitConfigurationRuleRequest;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(String merchantId, String splitConfigurationId, String ruleId, UpdateSplitConfigurationRuleRequest updateSplitConfigurationRuleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(Async)");
        }

        return patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdCall(merchantId, splitConfigurationId, ruleId, updateSplitConfigurationRuleRequest, _callback);

    }

    /**
     * Update split conditions
     * Changes the conditions of the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param updateSplitConfigurationRuleRequest  (optional)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleId(String merchantId, String splitConfigurationId, String ruleId, UpdateSplitConfigurationRuleRequest updateSplitConfigurationRuleRequest) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdWithHttpInfo(merchantId, splitConfigurationId, ruleId, updateSplitConfigurationRuleRequest);
        return localVarResp.getData();
    }

    /**
     * Update split conditions
     * Changes the conditions of the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param updateSplitConfigurationRuleRequest  (optional)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdWithHttpInfo(String merchantId, String splitConfigurationId, String ruleId, UpdateSplitConfigurationRuleRequest updateSplitConfigurationRuleRequest) throws ApiException {
        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, updateSplitConfigurationRuleRequest, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update split conditions (asynchronously)
     * Changes the conditions of the split configuration rule specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param updateSplitConfigurationRuleRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdAsync(String merchantId, String splitConfigurationId, String ruleId, UpdateSplitConfigurationRuleRequest updateSplitConfigurationRuleRequest, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, updateSplitConfigurationRuleRequest, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param splitLogicId The unique identifier of the split configuration split. (required)
     * @param updateSplitConfigurationLogicRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdCall(String merchantId, String splitConfigurationId, String ruleId, String splitLogicId, UpdateSplitConfigurationLogicRequest updateSplitConfigurationLogicRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSplitConfigurationLogicRequest;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}/splitLogic/{splitLogicId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()))
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "splitLogicId" + "}", localVarApiClient.escapeString(splitLogicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdValidateBeforeCall(String merchantId, String splitConfigurationId, String ruleId, String splitLogicId, UpdateSplitConfigurationLogicRequest updateSplitConfigurationLogicRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(Async)");
        }

        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(Async)");
        }

        // verify the required parameter 'splitLogicId' is set
        if (splitLogicId == null) {
            throw new ApiException("Missing the required parameter 'splitLogicId' when calling patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(Async)");
        }

        return patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdCall(merchantId, splitConfigurationId, ruleId, splitLogicId, updateSplitConfigurationLogicRequest, _callback);

    }

    /**
     * Update the split logic
     * Changes the split logic specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param splitLogicId The unique identifier of the split configuration split. (required)
     * @param updateSplitConfigurationLogicRequest  (optional)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicId(String merchantId, String splitConfigurationId, String ruleId, String splitLogicId, UpdateSplitConfigurationLogicRequest updateSplitConfigurationLogicRequest) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdWithHttpInfo(merchantId, splitConfigurationId, ruleId, splitLogicId, updateSplitConfigurationLogicRequest);
        return localVarResp.getData();
    }

    /**
     * Update the split logic
     * Changes the split logic specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param splitLogicId The unique identifier of the split configuration split. (required)
     * @param updateSplitConfigurationLogicRequest  (optional)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdWithHttpInfo(String merchantId, String splitConfigurationId, String ruleId, String splitLogicId, UpdateSplitConfigurationLogicRequest updateSplitConfigurationLogicRequest) throws ApiException {
        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, splitLogicId, updateSplitConfigurationLogicRequest, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update the split logic (asynchronously)
     * Changes the split logic specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param ruleId The unique identifier of the split configuration rule. (required)
     * @param splitLogicId The unique identifier of the split configuration split. (required)
     * @param updateSplitConfigurationLogicRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdAsync(String merchantId, String splitConfigurationId, String ruleId, String splitLogicId, UpdateSplitConfigurationLogicRequest updateSplitConfigurationLogicRequest, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdRulesRuleIdSplitLogicSplitLogicIdValidateBeforeCall(merchantId, splitConfigurationId, ruleId, splitLogicId, updateSplitConfigurationLogicRequest, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMerchantsMerchantIdSplitConfigurations
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfiguration  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMerchantsMerchantIdSplitConfigurationsCall(String merchantId, SplitConfiguration splitConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = splitConfiguration;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(String merchantId, SplitConfiguration splitConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling postMerchantsMerchantIdSplitConfigurations(Async)");
        }

        return postMerchantsMerchantIdSplitConfigurationsCall(merchantId, splitConfiguration, _callback);

    }

    /**
     * Create a split configuration
     * Creates a split configuration for the merchant account specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfiguration  (optional)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration postMerchantsMerchantIdSplitConfigurations(String merchantId, SplitConfiguration splitConfiguration) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = postMerchantsMerchantIdSplitConfigurationsWithHttpInfo(merchantId, splitConfiguration);
        return localVarResp.getData();
    }

    /**
     * Create a split configuration
     * Creates a split configuration for the merchant account specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfiguration  (optional)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> postMerchantsMerchantIdSplitConfigurationsWithHttpInfo(String merchantId, SplitConfiguration splitConfiguration) throws ApiException {
        okhttp3.Call localVarCall = postMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(merchantId, splitConfiguration, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a split configuration (asynchronously)
     * Creates a split configuration for the merchant account specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfiguration  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMerchantsMerchantIdSplitConfigurationsAsync(String merchantId, SplitConfiguration splitConfiguration, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMerchantsMerchantIdSplitConfigurationsValidateBeforeCall(merchantId, splitConfiguration, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postMerchantsMerchantIdSplitConfigurationsSplitConfigurationId
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param splitConfigurationRule  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(String merchantId, String splitConfigurationId, SplitConfigurationRule splitConfigurationRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = splitConfigurationRule;

        // create path and map variables
        String localVarPath = "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}"
            .replace("{" + "merchantId" + "}", localVarApiClient.escapeString(merchantId.toString()))
            .replace("{" + "splitConfigurationId" + "}", localVarApiClient.escapeString(splitConfigurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(String merchantId, String splitConfigurationId, SplitConfigurationRule splitConfigurationRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'merchantId' is set
        if (merchantId == null) {
            throw new ApiException("Missing the required parameter 'merchantId' when calling postMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        // verify the required parameter 'splitConfigurationId' is set
        if (splitConfigurationId == null) {
            throw new ApiException("Missing the required parameter 'splitConfigurationId' when calling postMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(Async)");
        }

        return postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdCall(merchantId, splitConfigurationId, splitConfigurationRule, _callback);

    }

    /**
     * Create a rule
     * Creates a rule in the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param splitConfigurationRule  (optional)
     * @return SplitConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public SplitConfiguration postMerchantsMerchantIdSplitConfigurationsSplitConfigurationId(String merchantId, String splitConfigurationId, SplitConfigurationRule splitConfigurationRule) throws ApiException {
        ApiResponse<SplitConfiguration> localVarResp = postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(merchantId, splitConfigurationId, splitConfigurationRule);
        return localVarResp.getData();
    }

    /**
     * Create a rule
     * Creates a rule in the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param splitConfigurationRule  (optional)
     * @return ApiResponse&lt;SplitConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SplitConfiguration> postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdWithHttpInfo(String merchantId, String splitConfigurationId, SplitConfigurationRule splitConfigurationRule) throws ApiException {
        okhttp3.Call localVarCall = postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, splitConfigurationRule, null);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a rule (asynchronously)
     * Creates a rule in the split configuration specified in the path.  To make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions): * Management API - SplitConfiguration read and write
     * @param merchantId The unique identifier of the merchant account. (required)
     * @param splitConfigurationId The unique identifier of the split configuration. (required)
     * @param splitConfigurationRule  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content - the request has been successfully processed, but there is no additional content. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request - a problem reading or understanding the request. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized - authentication required. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden - insufficient permissions to process the request. </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Unprocessable Entity - a request validation error. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error - the server could not process the request. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdAsync(String merchantId, String splitConfigurationId, SplitConfigurationRule splitConfigurationRule, final ApiCallback<SplitConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = postMerchantsMerchantIdSplitConfigurationsSplitConfigurationIdValidateBeforeCall(merchantId, splitConfigurationId, splitConfigurationRule, _callback);
        Type localVarReturnType = new TypeToken<SplitConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
