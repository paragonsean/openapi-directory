/*
 * Management API
 * Configure and manage your Adyen company and merchant accounts, stores, and payment terminals. ## Authentication Each request to the Management API must be signed with an API key. [Generate your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) in the Customer Area and then set this key to the `X-API-Key` header value.  To access the live endpoints, you need to generate a new API key in your live Customer Area. ## Versioning  Management API handles versioning as part of the endpoint URL. For example, to send a request to this version of the `/companies/{companyId}/webhooks` endpoint, use:  ```text https://management-test.adyen.com/v3/companies/{companyId}/webhooks ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area. Use this API key to make requests to:  ```text https://management-live.adyen.com/v3 ```  ## Release notes Have a look at the [release notes](https://docs.adyen.com/release-notes/management-api) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OrderItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TerminalOrderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:33.121604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TerminalOrderRequest {
  public static final String SERIALIZED_NAME_BILLING_ENTITY_ID = "billingEntityId";
  @SerializedName(SERIALIZED_NAME_BILLING_ENTITY_ID)
  private String billingEntityId;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_REFERENCE = "customerOrderReference";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_REFERENCE)
  private String customerOrderReference;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OrderItem> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER_TYPE = "orderType";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private String orderType;

  public static final String SERIALIZED_NAME_SHIPPING_LOCATION_ID = "shippingLocationId";
  @SerializedName(SERIALIZED_NAME_SHIPPING_LOCATION_ID)
  private String shippingLocationId;

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public TerminalOrderRequest() {
  }

  public TerminalOrderRequest billingEntityId(String billingEntityId) {
    this.billingEntityId = billingEntityId;
    return this;
  }

  /**
   * The identification of the billing entity to use for the order.
   * @return billingEntityId
   */
  @javax.annotation.Nullable
  public String getBillingEntityId() {
    return billingEntityId;
  }

  public void setBillingEntityId(String billingEntityId) {
    this.billingEntityId = billingEntityId;
  }


  public TerminalOrderRequest customerOrderReference(String customerOrderReference) {
    this.customerOrderReference = customerOrderReference;
    return this;
  }

  /**
   * The merchant-defined purchase order reference.
   * @return customerOrderReference
   */
  @javax.annotation.Nullable
  public String getCustomerOrderReference() {
    return customerOrderReference;
  }

  public void setCustomerOrderReference(String customerOrderReference) {
    this.customerOrderReference = customerOrderReference;
  }


  public TerminalOrderRequest items(List<OrderItem> items) {
    this.items = items;
    return this;
  }

  public TerminalOrderRequest addItemsItem(OrderItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * The products included in the order.
   * @return items
   */
  @javax.annotation.Nullable
  public List<OrderItem> getItems() {
    return items;
  }

  public void setItems(List<OrderItem> items) {
    this.items = items;
  }


  public TerminalOrderRequest orderType(String orderType) {
    this.orderType = orderType;
    return this;
  }

  /**
   * Type of order
   * @return orderType
   */
  @javax.annotation.Nullable
  public String getOrderType() {
    return orderType;
  }

  public void setOrderType(String orderType) {
    this.orderType = orderType;
  }


  public TerminalOrderRequest shippingLocationId(String shippingLocationId) {
    this.shippingLocationId = shippingLocationId;
    return this;
  }

  /**
   * The identification of the shipping location to use for the order.
   * @return shippingLocationId
   */
  @javax.annotation.Nullable
  public String getShippingLocationId() {
    return shippingLocationId;
  }

  public void setShippingLocationId(String shippingLocationId) {
    this.shippingLocationId = shippingLocationId;
  }


  public TerminalOrderRequest taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * The tax number of the billing entity.
   * @return taxId
   */
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TerminalOrderRequest terminalOrderRequest = (TerminalOrderRequest) o;
    return Objects.equals(this.billingEntityId, terminalOrderRequest.billingEntityId) &&
        Objects.equals(this.customerOrderReference, terminalOrderRequest.customerOrderReference) &&
        Objects.equals(this.items, terminalOrderRequest.items) &&
        Objects.equals(this.orderType, terminalOrderRequest.orderType) &&
        Objects.equals(this.shippingLocationId, terminalOrderRequest.shippingLocationId) &&
        Objects.equals(this.taxId, terminalOrderRequest.taxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingEntityId, customerOrderReference, items, orderType, shippingLocationId, taxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TerminalOrderRequest {\n");
    sb.append("    billingEntityId: ").append(toIndentedString(billingEntityId)).append("\n");
    sb.append("    customerOrderReference: ").append(toIndentedString(customerOrderReference)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    shippingLocationId: ").append(toIndentedString(shippingLocationId)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingEntityId");
    openapiFields.add("customerOrderReference");
    openapiFields.add("items");
    openapiFields.add("orderType");
    openapiFields.add("shippingLocationId");
    openapiFields.add("taxId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TerminalOrderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TerminalOrderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TerminalOrderRequest is not found in the empty JSON string", TerminalOrderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TerminalOrderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TerminalOrderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingEntityId") != null && !jsonObj.get("billingEntityId").isJsonNull()) && !jsonObj.get("billingEntityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingEntityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingEntityId").toString()));
      }
      if ((jsonObj.get("customerOrderReference") != null && !jsonObj.get("customerOrderReference").isJsonNull()) && !jsonObj.get("customerOrderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerOrderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerOrderReference").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OrderItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("orderType") != null && !jsonObj.get("orderType").isJsonNull()) && !jsonObj.get("orderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderType").toString()));
      }
      if ((jsonObj.get("shippingLocationId") != null && !jsonObj.get("shippingLocationId").isJsonNull()) && !jsonObj.get("shippingLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shippingLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shippingLocationId").toString()));
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TerminalOrderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TerminalOrderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TerminalOrderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TerminalOrderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TerminalOrderRequest>() {
           @Override
           public void write(JsonWriter out, TerminalOrderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TerminalOrderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TerminalOrderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TerminalOrderRequest
   * @throws IOException if the JSON string is invalid with respect to TerminalOrderRequest
   */
  public static TerminalOrderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TerminalOrderRequest.class);
  }

  /**
   * Convert an instance of TerminalOrderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

