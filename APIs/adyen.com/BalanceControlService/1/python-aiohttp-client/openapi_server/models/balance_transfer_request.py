# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class BalanceTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, description: str=None, from_merchant: str=None, reference: str=None, to_merchant: str=None, type: str=None):
        """BalanceTransferRequest - a model defined in OpenAPI

        :param amount: The amount of this BalanceTransferRequest.
        :param description: The description of this BalanceTransferRequest.
        :param from_merchant: The from_merchant of this BalanceTransferRequest.
        :param reference: The reference of this BalanceTransferRequest.
        :param to_merchant: The to_merchant of this BalanceTransferRequest.
        :param type: The type of this BalanceTransferRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'description': str,
            'from_merchant': str,
            'reference': str,
            'to_merchant': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'from_merchant': 'fromMerchant',
            'reference': 'reference',
            'to_merchant': 'toMerchant',
            'type': 'type'
        }

        self._amount = amount
        self._description = description
        self._from_merchant = from_merchant
        self._reference = reference
        self._to_merchant = to_merchant
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceTransferRequest of this BalanceTransferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this BalanceTransferRequest.

        The amount of the transfer in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The amount of this BalanceTransferRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BalanceTransferRequest.

        The amount of the transfer in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param amount: The amount of this BalanceTransferRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this BalanceTransferRequest.

        A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.

        :return: The description of this BalanceTransferRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BalanceTransferRequest.

        A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.

        :param description: The description of this BalanceTransferRequest.
        :type description: str
        """
        if description is not None and len(description) > 140:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `140`")

        self._description = description

    @property
    def from_merchant(self):
        """Gets the from_merchant of this BalanceTransferRequest.

        The unique identifier of the source merchant account from which funds are deducted.

        :return: The from_merchant of this BalanceTransferRequest.
        :rtype: str
        """
        return self._from_merchant

    @from_merchant.setter
    def from_merchant(self, from_merchant):
        """Sets the from_merchant of this BalanceTransferRequest.

        The unique identifier of the source merchant account from which funds are deducted.

        :param from_merchant: The from_merchant of this BalanceTransferRequest.
        :type from_merchant: str
        """
        if from_merchant is None:
            raise ValueError("Invalid value for `from_merchant`, must not be `None`")

        self._from_merchant = from_merchant

    @property
    def reference(self):
        """Gets the reference of this BalanceTransferRequest.

        A reference for the balance transfer. If you don't provide this in the request, Adyen generates a unique reference. Maximum length: 80 characters.

        :return: The reference of this BalanceTransferRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this BalanceTransferRequest.

        A reference for the balance transfer. If you don't provide this in the request, Adyen generates a unique reference. Maximum length: 80 characters.

        :param reference: The reference of this BalanceTransferRequest.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference

    @property
    def to_merchant(self):
        """Gets the to_merchant of this BalanceTransferRequest.

        The unique identifier of the destination merchant account from which funds are transferred.

        :return: The to_merchant of this BalanceTransferRequest.
        :rtype: str
        """
        return self._to_merchant

    @to_merchant.setter
    def to_merchant(self, to_merchant):
        """Sets the to_merchant of this BalanceTransferRequest.

        The unique identifier of the destination merchant account from which funds are transferred.

        :param to_merchant: The to_merchant of this BalanceTransferRequest.
        :type to_merchant: str
        """
        if to_merchant is None:
            raise ValueError("Invalid value for `to_merchant`, must not be `None`")

        self._to_merchant = to_merchant

    @property
    def type(self):
        """Gets the type of this BalanceTransferRequest.

        The type of balance transfer. Possible values: **tax**, **fee**, **terminalSale**, **credit**, **debit**, and **adjustment**.

        :return: The type of this BalanceTransferRequest.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BalanceTransferRequest.

        The type of balance transfer. Possible values: **tax**, **fee**, **terminalSale**, **credit**, **debit**, and **adjustment**.

        :param type: The type of this BalanceTransferRequest.
        :type type: str
        """
        allowed_values = ["tax", "fee", "terminalSale", "credit", "debit", "adjustment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
