/**
 * Adyen Balance Control API
 * The Balance Control API lets you transfer funds between merchant accounts that belong to the same legal entity and are under the same company account.  ## Authentication To connect to the Balance Control API, you must authenticate your requests with an [API key or basic auth username and password](https://docs.adyen.com/development-resources/api-authentication). To learn how you can generate these, see [API credentials](https://docs.adyen.com/development-resources/api-credentials).Here is an example of authenticating a request with an API key:  ``` curl -H \"X-API-Key: Your_API_key\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate API credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Balance Control API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example:  ``` https://pal-test.adyen.com/pal/servlet/BalanceControl/v1/balanceTransfer ``` 
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The BalanceTransferRequest model module.
 * @module model/BalanceTransferRequest
 * @version 1
 */
class BalanceTransferRequest {
    /**
     * Constructs a new <code>BalanceTransferRequest</code>.
     * @alias module:model/BalanceTransferRequest
     * @param amount {module:model/Amount} The amount of the transfer in [minor units](https://docs.adyen.com/development-resources/currency-codes).
     * @param fromMerchant {String} The unique identifier of the source merchant account from which funds are deducted.
     * @param toMerchant {String} The unique identifier of the destination merchant account from which funds are transferred.
     * @param type {module:model/BalanceTransferRequest.TypeEnum} The type of balance transfer. Possible values: **tax**, **fee**, **terminalSale**, **credit**, **debit**, and **adjustment**.
     */
    constructor(amount, fromMerchant, toMerchant, type) { 
        
        BalanceTransferRequest.initialize(this, amount, fromMerchant, toMerchant, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, fromMerchant, toMerchant, type) { 
        obj['amount'] = amount;
        obj['fromMerchant'] = fromMerchant;
        obj['toMerchant'] = toMerchant;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>BalanceTransferRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceTransferRequest} obj Optional instance to populate.
     * @return {module:model/BalanceTransferRequest} The populated <code>BalanceTransferRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceTransferRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('fromMerchant')) {
                obj['fromMerchant'] = ApiClient.convertToType(data['fromMerchant'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('toMerchant')) {
                obj['toMerchant'] = ApiClient.convertToType(data['toMerchant'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceTransferRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceTransferRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BalanceTransferRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['fromMerchant'] && !(typeof data['fromMerchant'] === 'string' || data['fromMerchant'] instanceof String)) {
            throw new Error("Expected the field `fromMerchant` to be a primitive type in the JSON string but got " + data['fromMerchant']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['toMerchant'] && !(typeof data['toMerchant'] === 'string' || data['toMerchant'] instanceof String)) {
            throw new Error("Expected the field `toMerchant` to be a primitive type in the JSON string but got " + data['toMerchant']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

BalanceTransferRequest.RequiredProperties = ["amount", "fromMerchant", "toMerchant", "type"];

/**
 * The amount of the transfer in [minor units](https://docs.adyen.com/development-resources/currency-codes).
 * @member {module:model/Amount} amount
 */
BalanceTransferRequest.prototype['amount'] = undefined;

/**
 * A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.
 * @member {String} description
 */
BalanceTransferRequest.prototype['description'] = undefined;

/**
 * The unique identifier of the source merchant account from which funds are deducted.
 * @member {String} fromMerchant
 */
BalanceTransferRequest.prototype['fromMerchant'] = undefined;

/**
 * A reference for the balance transfer. If you don't provide this in the request, Adyen generates a unique reference. Maximum length: 80 characters.
 * @member {String} reference
 */
BalanceTransferRequest.prototype['reference'] = undefined;

/**
 * The unique identifier of the destination merchant account from which funds are transferred.
 * @member {String} toMerchant
 */
BalanceTransferRequest.prototype['toMerchant'] = undefined;

/**
 * The type of balance transfer. Possible values: **tax**, **fee**, **terminalSale**, **credit**, **debit**, and **adjustment**.
 * @member {module:model/BalanceTransferRequest.TypeEnum} type
 */
BalanceTransferRequest.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BalanceTransferRequest['TypeEnum'] = {

    /**
     * value: "tax"
     * @const
     */
    "tax": "tax",

    /**
     * value: "fee"
     * @const
     */
    "fee": "fee",

    /**
     * value: "terminalSale"
     * @const
     */
    "terminalSale": "terminalSale",

    /**
     * value: "credit"
     * @const
     */
    "credit": "credit",

    /**
     * value: "debit"
     * @const
     */
    "debit": "debit",

    /**
     * value: "adjustment"
     * @const
     */
    "adjustment": "adjustment"
};



export default BalanceTransferRequest;

