/**
 * Adyen Balance Control API
 * The Balance Control API lets you transfer funds between merchant accounts that belong to the same legal entity and are under the same company account.  ## Authentication To connect to the Balance Control API, you must authenticate your requests with an [API key or basic auth username and password](https://docs.adyen.com/development-resources/api-authentication). To learn how you can generate these, see [API credentials](https://docs.adyen.com/development-resources/api-credentials).Here is an example of authenticating a request with an API key:  ``` curl -H \"X-API-Key: Your_API_key\" \\ -H \"Content-Type: application/json\" \\ ... ``` Note that when going live, you need to generate API credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Balance Control API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example:  ``` https://pal-test.adyen.com/pal/servlet/BalanceControl/v1/balanceTransfer ``` 
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceTransferResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceTransferResponse::OAIBalanceTransferResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceTransferResponse::OAIBalanceTransferResponse() {
    this->initializeModel();
}

OAIBalanceTransferResponse::~OAIBalanceTransferResponse() {}

void OAIBalanceTransferResponse::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_from_merchant_isSet = false;
    m_from_merchant_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_to_merchant_isSet = false;
    m_to_merchant_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBalanceTransferResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceTransferResponse::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_from_merchant_isValid = ::OpenAPI::fromJsonValue(m_from_merchant, json[QString("fromMerchant")]);
    m_from_merchant_isSet = !json[QString("fromMerchant")].isNull() && m_from_merchant_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_to_merchant_isValid = ::OpenAPI::fromJsonValue(m_to_merchant, json[QString("toMerchant")]);
    m_to_merchant_isSet = !json[QString("toMerchant")].isNull() && m_to_merchant_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBalanceTransferResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceTransferResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_from_merchant_isSet) {
        obj.insert(QString("fromMerchant"), ::OpenAPI::toJsonValue(m_from_merchant));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_to_merchant_isSet) {
        obj.insert(QString("toMerchant"), ::OpenAPI::toJsonValue(m_to_merchant));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIAmount OAIBalanceTransferResponse::getAmount() const {
    return m_amount;
}
void OAIBalanceTransferResponse::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIBalanceTransferResponse::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIBalanceTransferResponse::is_amount_Valid() const{
    return m_amount_isValid;
}

QDateTime OAIBalanceTransferResponse::getCreatedAt() const {
    return m_created_at;
}
void OAIBalanceTransferResponse::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIBalanceTransferResponse::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIBalanceTransferResponse::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIBalanceTransferResponse::getDescription() const {
    return m_description;
}
void OAIBalanceTransferResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBalanceTransferResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBalanceTransferResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBalanceTransferResponse::getFromMerchant() const {
    return m_from_merchant;
}
void OAIBalanceTransferResponse::setFromMerchant(const QString &from_merchant) {
    m_from_merchant = from_merchant;
    m_from_merchant_isSet = true;
}

bool OAIBalanceTransferResponse::is_from_merchant_Set() const{
    return m_from_merchant_isSet;
}

bool OAIBalanceTransferResponse::is_from_merchant_Valid() const{
    return m_from_merchant_isValid;
}

QString OAIBalanceTransferResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIBalanceTransferResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIBalanceTransferResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIBalanceTransferResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIBalanceTransferResponse::getReference() const {
    return m_reference;
}
void OAIBalanceTransferResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIBalanceTransferResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIBalanceTransferResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIBalanceTransferResponse::getStatus() const {
    return m_status;
}
void OAIBalanceTransferResponse::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBalanceTransferResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBalanceTransferResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBalanceTransferResponse::getToMerchant() const {
    return m_to_merchant;
}
void OAIBalanceTransferResponse::setToMerchant(const QString &to_merchant) {
    m_to_merchant = to_merchant;
    m_to_merchant_isSet = true;
}

bool OAIBalanceTransferResponse::is_to_merchant_Set() const{
    return m_to_merchant_isSet;
}

bool OAIBalanceTransferResponse::is_to_merchant_Valid() const{
    return m_to_merchant_isValid;
}

QString OAIBalanceTransferResponse::getType() const {
    return m_type;
}
void OAIBalanceTransferResponse::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBalanceTransferResponse::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBalanceTransferResponse::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBalanceTransferResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceTransferResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_created_at_isValid && m_from_merchant_isValid && m_psp_reference_isValid && m_status_isValid && m_to_merchant_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
