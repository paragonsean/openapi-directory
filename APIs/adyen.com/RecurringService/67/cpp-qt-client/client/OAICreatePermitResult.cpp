/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v67/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v67/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePermitResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePermitResult::OAICreatePermitResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePermitResult::OAICreatePermitResult() {
    this->initializeModel();
}

OAICreatePermitResult::~OAICreatePermitResult() {}

void OAICreatePermitResult::initializeModel() {

    m_permit_result_list_isSet = false;
    m_permit_result_list_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;
}

void OAICreatePermitResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePermitResult::fromJsonObject(QJsonObject json) {

    m_permit_result_list_isValid = ::OpenAPI::fromJsonValue(m_permit_result_list, json[QString("permitResultList")]);
    m_permit_result_list_isSet = !json[QString("permitResultList")].isNull() && m_permit_result_list_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;
}

QString OAICreatePermitResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePermitResult::asJsonObject() const {
    QJsonObject obj;
    if (m_permit_result_list.size() > 0) {
        obj.insert(QString("permitResultList"), ::OpenAPI::toJsonValue(m_permit_result_list));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    return obj;
}

QList<OAIPermitResult> OAICreatePermitResult::getPermitResultList() const {
    return m_permit_result_list;
}
void OAICreatePermitResult::setPermitResultList(const QList<OAIPermitResult> &permit_result_list) {
    m_permit_result_list = permit_result_list;
    m_permit_result_list_isSet = true;
}

bool OAICreatePermitResult::is_permit_result_list_Set() const{
    return m_permit_result_list_isSet;
}

bool OAICreatePermitResult::is_permit_result_list_Valid() const{
    return m_permit_result_list_isValid;
}

QString OAICreatePermitResult::getPspReference() const {
    return m_psp_reference;
}
void OAICreatePermitResult::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAICreatePermitResult::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAICreatePermitResult::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

bool OAICreatePermitResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permit_result_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePermitResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
