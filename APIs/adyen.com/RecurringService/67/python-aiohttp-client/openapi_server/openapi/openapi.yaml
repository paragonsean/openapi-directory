openapi: 3.1.0
info:
  contact:
    name: Adyen Developer Experience team
    url: https://github.com/Adyen/adyen-openapi
    x-twitter: Adyen
  description: |-
    The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.

    For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization).
    ## Authentication
    You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.

    If using an API key, add an `X-API-Key` header with the API key as the value, for example:

     ```
    curl
    -H "Content-Type: application/json" \
    -H "X-API-Key: YOUR_API_KEY" \
    ...
    ```

    Alternatively, you can use the username and password to connect to the API using basic authentication, for example:

    ```
    curl
    -U "ws@Company.YOUR_COMPANY_ACCOUNT":"YOUR_BASIC_AUTHENTICATION_PASSWORD" \
    -H "Content-Type: application/json" \
    ...
    ```

    ## Versioning
    Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: "vXX", where XX is the version number.

    For example:
    ```
    https://pal-test.adyen.com/pal/servlet/Recurring/v67/disable
    ```

    ## Going live

    To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.

    The live endpoint URLs contain a prefix which is unique to your company account:
    ```

    https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v67/disable
    ```

    Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
  termsOfService: https://www.adyen.com/legal/terms-and-conditions
  title: Adyen Recurring API
  version: "67"
  x-apisguru-categories:
  - payment
  x-logo:
    url: https://twitter.com/Adyen/profile_image?size=original
  x-origin:
  - format: openapi
    url: https://raw.githubusercontent.com/Adyen/adyen-openapi/main/json/RecurringService-v67.json
    version: "3.1"
  x-preferred: false
  x-providerName: adyen.com
  x-publicVersion: true
  x-serviceName: RecurringService
servers:
- url: https://pal-test.adyen.com/pal/servlet/Recurring/v67
tags:
- name: General
paths:
  /createPermit:
    post:
      description: "Create permits for a recurring contract, including support for\
        \ defining restrictions."
      operationId: post_create_permit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePermitRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatePermitResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Create new permits linked to a recurring contract.
      tags:
      - General
      x-addedInVersion: "40"
      x-methodName: createPermit
      x-sortIndex: 0
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
  /disable:
    post:
      description: |-
        Disables stored payment details to stop charging a shopper with this particular recurring detail ID.

        For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).
      operationId: post_disable
      requestBody:
        content:
          application/json:
            examples:
              disableARecurringContract:
                $ref: '#/components/examples/post-disable-disableARecurringContract'
            schema:
              $ref: '#/components/schemas/DisableRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisableResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Disable stored payment details
      tags:
      - General
      x-methodName: disable
      x-sortIndex: 2
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
  /disablePermit:
    post:
      description: Disable a permit that was previously linked to a recurringDetailReference.
      operationId: post_disable_permit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DisablePermitRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DisablePermitResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Disable an existing permit.
      tags:
      - General
      x-addedInVersion: "61"
      x-methodName: disablePermit
      x-sortIndex: 0
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
  /listRecurringDetails:
    post:
      description: |-
        Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.

        For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).
      operationId: post_list_recurring_details
      requestBody:
        content:
          application/json:
            examples:
              listAllRecurringDetails:
                $ref: '#/components/examples/post-listRecurringDetails-listAllRecurringDetails'
            schema:
              $ref: '#/components/schemas/RecurringDetailsRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringDetailsResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Get stored payment details
      tags:
      - General
      x-methodName: listRecurringDetails
      x-sortIndex: 1
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
  /notifyShopper:
    post:
      description: "Sends a request to the issuer so they can inform the shopper about\
        \ the upcoming recurring payment. This endpoint is used only for local acquiring\
        \ in India. For more information, refer to [Recurring card payments in India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india)."
      operationId: post_notify_shopper
      requestBody:
        content:
          application/json:
            examples:
              notifyShopperOfUpcomingRecurringPayment:
                $ref: '#/components/examples/post-notifyShopper-notifyShopperOfUpcomingRecurringPayment'
            schema:
              $ref: '#/components/schemas/NotifyShopperRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              examples:
                notifyShopperOfUpcomingRecurringPayment:
                  $ref: '#/components/examples/post-notifyShopper-notifyShopperOfUpcomingRecurringPayment-200'
              schema:
                $ref: '#/components/schemas/NotifyShopperResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Ask issuer to notify the shopper
      tags:
      - General
      x-methodName: notifyShopper
      x-sortIndex: 4
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
  /scheduleAccountUpdater:
    post:
      description: |-
        When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference:
        * If the card information is provided, all the sub-fields for `card` are mandatory.
        * If the recurring detail reference is provided, the fields for `shopperReference` and `selectedRecurringDetailReference` are mandatory.
      operationId: post_schedule_account_updater
      requestBody:
        content:
          application/json:
            examples:
              scheduleAccountUpdaterWithCardData:
                $ref: '#/components/examples/post-scheduleAccountUpdater-scheduleAccountUpdaterWithCardData'
              scheduleAccountUpdaterWithTokenData:
                $ref: '#/components/examples/post-scheduleAccountUpdater-scheduleAccountUpdaterWithTokenData'
            schema:
              $ref: '#/components/schemas/ScheduleAccountUpdaterRequest'
        x-body-name: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleAccountUpdaterResult'
          description: OK - the request has succeeded.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Bad Request - a problem reading or understanding the request.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unauthorized - authentication required.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Forbidden - insufficient permissions to process the request.
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Unprocessable Entity - a request validation error.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceError'
          description: Internal Server Error - the server could not process the request.
      security:
      - BasicAuth: []
      - ApiKeyAuth: []
      summary: Schedule running the Account Updater
      tags:
      - General
      x-addedInVersion: "4"
      x-methodName: scheduleAccountUpdater
      x-sortIndex: 3
      x-openapi-router-controller: openapi_server.controllers.general_controller
      x-codegen-request-body-name: body
components:
  examples:
    post-disable-disableARecurringContract:
      summary: Disable a recurring contract
      value:
        merchantAccount: YOUR_MERCHANT_ACCOUNT
        recurringDetailReference: "8314442372419167"
        shopperReference: YOUR_SHOPPER_REFERENCE
    post-listRecurringDetails-listAllRecurringDetails:
      summary: List recurring details of the specified contract value
      value:
        merchantAccount: YOUR_MERCHANT_ACCOUNT
        recurring:
          contract: RECURRING
        shopperReference: YOUR_SHOPPER_REFERENCE
    post-notifyShopper-notifyShopperOfUpcomingRecurringPayment:
      summary: Request issuer to notify shopper of upcoming recurring payment
      value:
        amount:
          currency: INR
          value: 1000
        billingDate: 2021-03-16
        displayedReference: exampleDisplayedReference
        merchantAccount: YOUR_MERCHANT_ACCOUNT
        reference: Example reference
        shopperReference: YOUR_SHOPPER_REFERENCE
        storedPaymentMethodId: "8415995487234100"
    post-notifyShopper-notifyShopperOfUpcomingRecurringPayment-200:
      summary: Example response for request 'notifyShopper'
      value:
        displayedReference: exampleDisplayedReference
        message: Request Processed Successfully
        pspReference: M5N7TQ4TG5PFWR50
        reference: Example reference
        resultCode: Success
        shopperNotificationReference: "9915003646742627"
        storedPaymentMethodId: "8415995487234100"
    post-scheduleAccountUpdater-scheduleAccountUpdaterWithCardData:
      summary: Schedule AccountUpdater with card data
      value:
        card:
          expiryMonth: "03"
          expiryYear: "2030"
          holderName: Adyen Test
          number: "4111111111111111"
        merchantAccount: YOUR_MERCHANT_ACCOUNT
        reference: YOUR_REFERENCE
    post-scheduleAccountUpdater-scheduleAccountUpdaterWithTokenData:
      summary: Schedule AccountUpdater with token data
      value:
        merchantAccount: YOUR_MERCHANT_ACCOUNT
        reference: YOUR_REFERENCE
        selectedRecurringDetailReference: "8814232895168272"
        shopperReference: YOUR_SHOPPER_REFERENCE
  schemas:
    Address:
      example:
        country: country
        stateOrProvince: stateOrProvince
        city: city
        houseNumberOrName: houseNumberOrName
        street: street
        postalCode: postalCode
      properties:
        city:
          description: "The name of the city. Maximum length: 3000 characters."
          maxLength: 3000
          title: city
          type: string
        country:
          description: |-
            The two-character ISO-3166-1 alpha-2 country code. For example, **US**.
            > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.
          title: country
          type: string
        houseNumberOrName:
          description: "The number or name of the house. Maximum length: 3000 characters."
          maxLength: 3000
          title: houseNumberOrName
          type: string
        postalCode:
          description: "A maximum of five digits for an address in the US, or a maximum\
            \ of ten characters for an address in all other countries."
          title: postalCode
          type: string
        stateOrProvince:
          description: |-
            The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada.
            > Required for the US and Canada.
          title: stateOrProvince
          type: string
        street:
          description: |-
            The name of the street. Maximum length: 3000 characters.
            > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.
          maxLength: 3000
          title: street
          type: string
      required:
      - city
      - country
      - houseNumberOrName
      - postalCode
      - street
      title: Address
    Amount:
      example:
        currency: currency
        value: 0
      properties:
        currency:
          description: "The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes)."
          maxLength: 3
          minLength: 3
          title: currency
          type: string
        value:
          description: "The amount of the transaction, in [minor units](https://docs.adyen.com/development-resources/currency-codes)."
          format: int64
          title: value
          type: integer
      required:
      - currency
      - value
      title: Amount
    BankAccount:
      example:
        ownerName: ownerName
        countryCode: countryCode
        taxId: taxId
        iban: iban
        bankAccountNumber: bankAccountNumber
        bankName: bankName
        bankLocationId: bankLocationId
        bic: bic
        bankCity: bankCity
      properties:
        bankAccountNumber:
          description: The bank account number (without separators).
          title: bankAccountNumber
          type: string
        bankCity:
          description: The bank city.
          title: bankCity
          type: string
          x-addedInVersion: "18"
        bankLocationId:
          description: The location id of the bank. The field value is `nil` in most
            cases.
          title: bankLocationId
          type: string
        bankName:
          description: The name of the bank.
          title: bankName
          type: string
        bic:
          description: "The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362)\
            \ (BIC) is the SWIFT address assigned to a bank. The field value is `nil`\
            \ in most cases."
          title: bic
          type: string
        countryCode:
          description: |-
            Country code where the bank is located.

            A valid value is an ISO two-character country code (e.g. 'NL').
          title: countryCode
          type: string
        iban:
          description: "The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number)\
            \ (IBAN)."
          title: iban
          type: string
        ownerName:
          description: |-
            The name of the bank account holder.
            If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example:
            * χ12 is converted to ch12.
            * üA is converted to euA.
            * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'.
            After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example:
            * John17 - allowed.
            * J17 - allowed.
            * 171 - not allowed.
            * John-7 - allowed.
            > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
          title: ownerName
          type: string
        taxId:
          description: The bank account holder's tax ID.
          title: taxId
          type: string
          x-addedInVersion: "18"
      title: BankAccount
    Card:
      example:
        cvc: cvc
        number: number
        holderName: holderName
        startMonth: startMonth
        issueNumber: issueNumber
        expiryMonth: expiryMonth
        startYear: startYear
        expiryYear: expiryYear
      properties:
        cvc:
          description: |-
            The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as:
            * CVV2/CVC2 – length: 3 digits
            * CID – length: 4 digits
            > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server.
            > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments).
            > When this value is returned in a response, it is always empty because it is not stored.
          maxLength: 20
          minLength: 1
          title: cvc
          type: string
        expiryMonth:
          description: |-
            The card expiry month.
            Format: 2 digits, zero-padded for single digits. For example:
            * 03 = March
            * 11 = November
          maxLength: 2
          minLength: 1
          title: expiryMonth
          type: string
        expiryYear:
          description: |-
            The card expiry year.
            Format: 4 digits. For example: 2020
          maxLength: 4
          minLength: 4
          title: expiryYear
          type: string
        holderName:
          description: "The name of the cardholder, as printed on the card."
          maxLength: 50
          minLength: 1
          title: holderName
          type: string
        issueNumber:
          description: The issue number of the card (for some UK debit cards only).
          maxLength: 2
          minLength: 1
          title: issueNumber
          type: string
        number:
          description: |-
            The card number (4-19 characters). Do not use any separators.
            When this value is returned in a response, only the last 4 digits of the card number are returned.
          maxLength: 19
          minLength: 4
          title: number
          type: string
        startMonth:
          description: The month component of the start date (for some UK debit cards
            only).
          maxLength: 2
          minLength: 1
          title: startMonth
          type: string
        startYear:
          description: The year component of the start date (for some UK debit cards
            only).
          maxLength: 4
          minLength: 4
          title: startYear
          type: string
      title: Card
    CreatePermitRequest:
      example:
        merchantAccount: merchantAccount
        permits:
        - profileReference: profileReference
          validTillDate: 2000-01-23T04:56:07.000+00:00
          restriction:
            singleTransactionLimit:
              currency: currency
              value: 0
            singleUse: true
            maxAmount:
              currency: currency
              value: 0
          resultKey: resultKey
          partnerId: partnerId
        - profileReference: profileReference
          validTillDate: 2000-01-23T04:56:07.000+00:00
          restriction:
            singleTransactionLimit:
              currency: currency
              value: 0
            singleUse: true
            maxAmount:
              currency: currency
              value: 0
          resultKey: resultKey
          partnerId: partnerId
        recurringDetailReference: recurringDetailReference
        shopperReference: shopperReference
      properties:
        merchantAccount:
          description: "The merchant account identifier, with which you want to process\
            \ the transaction."
          title: merchantAccount
          type: string
        permits:
          description: The permits to create for this recurring contract.
          items:
            $ref: '#/components/schemas/Permit'
          title: permits
          type: array
        recurringDetailReference:
          description: The recurring contract the new permits will use.
          title: recurringDetailReference
          type: string
        shopperReference:
          description: The shopper's reference to uniquely identify this shopper (e.g.
            user ID or account ID).
          title: shopperReference
          type: string
      required:
      - merchantAccount
      - permits
      - recurringDetailReference
      - shopperReference
      title: CreatePermitRequest
    CreatePermitResult:
      example:
        permitResultList:
        - resultKey: resultKey
          token: token
        - resultKey: resultKey
          token: token
        pspReference: pspReference
      properties:
        permitResultList:
          description: List of new permits.
          items:
            $ref: '#/components/schemas/PermitResult'
          title: permitResultList
          type: array
        pspReference:
          description: A unique reference associated with the request. This value
            is globally unique; quote it when communicating with us about this request.
          title: pspReference
          type: string
      title: CreatePermitResult
    DisablePermitRequest:
      example:
        merchantAccount: merchantAccount
        token: token
      properties:
        merchantAccount:
          description: "The merchant account identifier, with which you want to process\
            \ the transaction."
          title: merchantAccount
          type: string
        token:
          description: The permit token to disable.
          title: token
          type: string
      required:
      - merchantAccount
      - token
      title: DisablePermitRequest
    DisablePermitResult:
      example:
        pspReference: pspReference
        status: status
      properties:
        pspReference:
          description: A unique reference associated with the request. This value
            is globally unique; quote it when communicating with us about this request.
          title: pspReference
          type: string
        status:
          description: Status of the disable request.
          title: status
          type: string
      title: DisablePermitResult
    DisableRequest:
      example:
        merchantAccount: merchantAccount
        contract: contract
        recurringDetailReference: recurringDetailReference
        shopperReference: shopperReference
      properties:
        contract:
          description: |-
            Specify the contract if you only want to disable a specific use.

            This field can be set to one of the following values, or to their combination (comma-separated):
            * ONECLICK
            * RECURRING
            * PAYOUT
          title: contract
          type: string
          x-addedInVersion: "3"
        merchantAccount:
          description: The merchant account identifier with which you want to process
            the transaction.
          title: merchantAccount
          type: string
        recurringDetailReference:
          description: |-
            The ID that uniquely identifies the recurring detail reference.

            If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.
          title: recurringDetailReference
          type: string
        shopperReference:
          description: |-
            The ID that uniquely identifies the shopper.

            This `shopperReference` must be the same as the `shopperReference` used in the initial payment.
          title: shopperReference
          type: string
      required:
      - merchantAccount
      - shopperReference
      title: DisableRequest
    DisableResult:
      example:
        response: response
      properties:
        response:
          description: "Depending on whether a specific recurring detail was in the\
            \ request, result is either [detail-successfully-disabled] or [all-details-successfully-disabled]."
          title: response
          type: string
      title: DisableResult
    Name:
      example:
        firstName: firstName
        lastName: lastName
      properties:
        firstName:
          description: The first name.
          title: firstName
          type: string
        lastName:
          description: The last name.
          title: lastName
          type: string
      required:
      - firstName
      - lastName
      title: Name
    NotifyShopperRequest:
      example:
        reference: reference
        billingDate: billingDate
        amount:
          currency: currency
          value: 0
        merchantAccount: merchantAccount
        storedPaymentMethodId: storedPaymentMethodId
        displayedReference: displayedReference
        recurringDetailReference: recurringDetailReference
        billingSequenceNumber: billingSequenceNumber
        shopperReference: shopperReference
      properties:
        amount:
          $ref: '#/components/schemas/Amount'
        billingDate:
          description: Date on which the subscription amount will be debited from
            the shopper. In YYYY-MM-DD format
          title: billingDate
          type: string
        billingSequenceNumber:
          description: Sequence of the debit. Depends on Frequency and Billing Attempts
            Rule.
          title: billingSequenceNumber
          type: string
        displayedReference:
          description: Reference of Pre-debit notification that is displayed to the
            shopper. Optional field. Maps to reference if missing
          title: displayedReference
          type: string
        merchantAccount:
          description: The merchant account identifier with which you want to process
            the transaction.
          title: merchantAccount
          type: string
        recurringDetailReference:
          description: This is the `recurringDetailReference` returned in the response
            when you created the token.
          title: recurringDetailReference
          type: string
        reference:
          description: Pre-debit notification reference sent by the merchant. This
            is a mandatory field
          title: reference
          type: string
        shopperReference:
          description: |-
            The ID that uniquely identifies the shopper.

            This `shopperReference` must be the same as the `shopperReference` used in the initial payment.
          title: shopperReference
          type: string
        storedPaymentMethodId:
          description: This is the `recurringDetailReference` returned in the response
            when you created the token.
          title: storedPaymentMethodId
          type: string
      required:
      - amount
      - merchantAccount
      - reference
      - shopperReference
      title: NotifyShopperRequest
    NotifyShopperResult:
      example:
        reference: reference
        storedPaymentMethodId: storedPaymentMethodId
        resultCode: resultCode
        displayedReference: displayedReference
        message: message
        pspReference: pspReference
        shopperNotificationReference: shopperNotificationReference
      properties:
        displayedReference:
          description: Reference of Pre-debit notification that is displayed to the
            shopper
          title: displayedReference
          type: string
        message:
          description: A simple description of the `resultCode`.
          title: message
          type: string
        pspReference:
          description: The unique reference that is associated with the request.
          title: pspReference
          type: string
        reference:
          description: Reference of Pre-debit notification sent in my the merchant
          title: reference
          type: string
        resultCode:
          description: The code indicating the status of notification.
          title: resultCode
          type: string
        shopperNotificationReference:
          description: The unique reference for the request sent downstream.
          title: shopperNotificationReference
          type: string
        storedPaymentMethodId:
          description: This is the recurringDetailReference returned in the response
            when token was created
          title: storedPaymentMethodId
          type: string
      title: NotifyShopperResult
    Permit:
      example:
        profileReference: profileReference
        validTillDate: 2000-01-23T04:56:07.000+00:00
        restriction:
          singleTransactionLimit:
            currency: currency
            value: 0
          singleUse: true
          maxAmount:
            currency: currency
            value: 0
        resultKey: resultKey
        partnerId: partnerId
      properties:
        partnerId:
          description: Partner ID (when using the permit-per-partner token sharing
            model).
          title: partnerId
          type: string
        profileReference:
          description: The profile to apply to this permit (when using the shared
            permits model).
          title: profileReference
          type: string
        restriction:
          $ref: '#/components/schemas/PermitRestriction'
        resultKey:
          description: The key to link permit requests to permit results.
          title: resultKey
          type: string
        validTillDate:
          description: The expiry date for this permit.
          format: date-time
          title: validTillDate
          type: string
      title: Permit
    PermitRestriction:
      example:
        singleTransactionLimit:
          currency: currency
          value: 0
        singleUse: true
        maxAmount:
          currency: currency
          value: 0
      properties:
        maxAmount:
          $ref: '#/components/schemas/Amount'
        singleTransactionLimit:
          $ref: '#/components/schemas/Amount'
        singleUse:
          description: "Only a single payment can be made using this permit if set\
            \ to true, otherwise multiple payments are allowed."
          title: singleUse
          type: boolean
      title: PermitRestriction
    PermitResult:
      example:
        resultKey: resultKey
        token: token
      properties:
        resultKey:
          description: The key to link permit requests to permit results.
          title: resultKey
          type: string
          x-addedInVersion: "32"
        token:
          description: The permit token which is used to make payments by the partner
            company.
          title: token
          type: string
          x-addedInVersion: "32"
      title: PermitResult
    Recurring:
      example:
        recurringExpiry: 2000-01-23T04:56:07.000+00:00
        recurringFrequency: recurringFrequency
        tokenService: VISATOKENSERVICE
        contract: ONECLICK
        recurringDetailName: recurringDetailName
      properties:
        contract:
          description: |-
            The type of recurring contract to be used.
            Possible values:
            * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid).
            * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp).
            * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not.
            * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
          enum:
          - ONECLICK
          - RECURRING
          - PAYOUT
          title: contract
          type: string
        recurringDetailName:
          description: A descriptive name for this detail.
          title: recurringDetailName
          type: string
        recurringExpiry:
          description: Date after which no further authorisations shall be performed.
            Only for 3D Secure 2.
          format: date-time
          title: recurringExpiry
          type: string
          x-addedInVersion: "40"
        recurringFrequency:
          description: Minimum number of days between authorisations. Only for 3D
            Secure 2.
          title: recurringFrequency
          type: string
          x-addedInVersion: "40"
        tokenService:
          description: The name of the token service.
          enum:
          - VISATOKENSERVICE
          - MCTOKENSERVICE
          - AMEXTOKENSERVICE
          - TOKEN_SHARING
          title: tokenService
          type: string
          x-addedInVersion: "25"
      title: Recurring
    RecurringDetail:
      example:
        tokenDetails:
          tokenData:
            key: tokenData
          tokenDataType: tokenDataType
        socialSecurityNumber: socialSecurityNumber
        firstPspReference: firstPspReference
        creationDate: 2000-01-23T04:56:07.000+00:00
        bank:
          ownerName: ownerName
          countryCode: countryCode
          taxId: taxId
          iban: iban
          bankAccountNumber: bankAccountNumber
          bankName: bankName
          bankLocationId: bankLocationId
          bic: bic
          bankCity: bankCity
        shopperName:
          firstName: firstName
          lastName: lastName
        aliasType: aliasType
        name: name
        variant: variant
        alias: alias
        recurringDetailReference: recurringDetailReference
        contractTypes:
        - contractTypes
        - contractTypes
        additionalData:
          key: additionalData
        billingAddress:
          country: country
          stateOrProvince: stateOrProvince
          city: city
          houseNumberOrName: houseNumberOrName
          street: street
          postalCode: postalCode
        paymentMethodVariant: paymentMethodVariant
        card:
          cvc: cvc
          number: number
          holderName: holderName
          startMonth: startMonth
          issueNumber: issueNumber
          expiryMonth: expiryMonth
          startYear: startYear
          expiryYear: expiryYear
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: |-
            This field contains additional data, which may be returned in a particular response.

            The additionalData object consists of entries, each of which includes the key and value.
          title: additionalData
          x-addedInVersion: "5"
        alias:
          description: |-
            The alias of the credit card number.

            Applies only to recurring contracts storing credit card details
          title: alias
          type: string
          x-addedInVersion: "4"
        aliasType:
          description: |-
            The alias type of the credit card number.

            Applies only to recurring contracts storing credit card details.
          title: aliasType
          type: string
          x-addedInVersion: "4"
        bank:
          $ref: '#/components/schemas/BankAccount'
        billingAddress:
          $ref: '#/components/schemas/Address'
        card:
          $ref: '#/components/schemas/Card'
        contractTypes:
          description: Types of recurring contracts.
          items:
            type: string
          title: contractTypes
          type: array
          x-addedInVersion: "12"
        creationDate:
          description: The date when the recurring details were created.
          format: date-time
          title: creationDate
          type: string
        firstPspReference:
          description: The `pspReference` of the first recurring payment that created
            the recurring detail.
          title: firstPspReference
          type: string
          x-addedInVersion: "4"
        name:
          description: An optional descriptive name for this recurring detail.
          title: name
          type: string
        paymentMethodVariant:
          description: "The  type or sub-brand of a payment method used, e.g. Visa\
            \ Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant)."
          title: paymentMethodVariant
          type: string
          x-addedInVersion: "2"
        recurringDetailReference:
          description: The reference that uniquely identifies the recurring detail.
          title: recurringDetailReference
          type: string
        shopperName:
          $ref: '#/components/schemas/Name'
        socialSecurityNumber:
          description: A shopper's social security number (only in countries where
            it is legal to collect).
          title: socialSecurityNumber
          type: string
          x-addedInVersion: "4"
        tokenDetails:
          $ref: '#/components/schemas/TokenDetails'
        variant:
          description: "The payment method, such as “mc\", \"visa\", \"ideal\", \"\
            paypal\"."
          title: variant
          type: string
      required:
      - recurringDetailReference
      - variant
      title: RecurringDetail
    RecurringDetailWrapper:
      example:
        RecurringDetail:
          tokenDetails:
            tokenData:
              key: tokenData
            tokenDataType: tokenDataType
          socialSecurityNumber: socialSecurityNumber
          firstPspReference: firstPspReference
          creationDate: 2000-01-23T04:56:07.000+00:00
          bank:
            ownerName: ownerName
            countryCode: countryCode
            taxId: taxId
            iban: iban
            bankAccountNumber: bankAccountNumber
            bankName: bankName
            bankLocationId: bankLocationId
            bic: bic
            bankCity: bankCity
          shopperName:
            firstName: firstName
            lastName: lastName
          aliasType: aliasType
          name: name
          variant: variant
          alias: alias
          recurringDetailReference: recurringDetailReference
          contractTypes:
          - contractTypes
          - contractTypes
          additionalData:
            key: additionalData
          billingAddress:
            country: country
            stateOrProvince: stateOrProvince
            city: city
            houseNumberOrName: houseNumberOrName
            street: street
            postalCode: postalCode
          paymentMethodVariant: paymentMethodVariant
          card:
            cvc: cvc
            number: number
            holderName: holderName
            startMonth: startMonth
            issueNumber: issueNumber
            expiryMonth: expiryMonth
            startYear: startYear
            expiryYear: expiryYear
      properties:
        RecurringDetail:
          $ref: '#/components/schemas/RecurringDetail'
      title: RecurringDetailWrapper
    RecurringDetailsRequest:
      example:
        merchantAccount: merchantAccount
        recurring:
          recurringExpiry: 2000-01-23T04:56:07.000+00:00
          recurringFrequency: recurringFrequency
          tokenService: VISATOKENSERVICE
          contract: ONECLICK
          recurringDetailName: recurringDetailName
        shopperReference: shopperReference
      properties:
        merchantAccount:
          description: The merchant account identifier you want to process the (transaction)
            request with.
          title: merchantAccount
          type: string
        recurring:
          $ref: '#/components/schemas/Recurring'
        shopperReference:
          description: The reference you use to uniquely identify the shopper (e.g.
            user ID or account ID).
          title: shopperReference
          type: string
      required:
      - merchantAccount
      - shopperReference
      title: RecurringDetailsRequest
    RecurringDetailsResult:
      example:
        lastKnownShopperEmail: lastKnownShopperEmail
        details:
        - RecurringDetail:
            tokenDetails:
              tokenData:
                key: tokenData
              tokenDataType: tokenDataType
            socialSecurityNumber: socialSecurityNumber
            firstPspReference: firstPspReference
            creationDate: 2000-01-23T04:56:07.000+00:00
            bank:
              ownerName: ownerName
              countryCode: countryCode
              taxId: taxId
              iban: iban
              bankAccountNumber: bankAccountNumber
              bankName: bankName
              bankLocationId: bankLocationId
              bic: bic
              bankCity: bankCity
            shopperName:
              firstName: firstName
              lastName: lastName
            aliasType: aliasType
            name: name
            variant: variant
            alias: alias
            recurringDetailReference: recurringDetailReference
            contractTypes:
            - contractTypes
            - contractTypes
            additionalData:
              key: additionalData
            billingAddress:
              country: country
              stateOrProvince: stateOrProvince
              city: city
              houseNumberOrName: houseNumberOrName
              street: street
              postalCode: postalCode
            paymentMethodVariant: paymentMethodVariant
            card:
              cvc: cvc
              number: number
              holderName: holderName
              startMonth: startMonth
              issueNumber: issueNumber
              expiryMonth: expiryMonth
              startYear: startYear
              expiryYear: expiryYear
        - RecurringDetail:
            tokenDetails:
              tokenData:
                key: tokenData
              tokenDataType: tokenDataType
            socialSecurityNumber: socialSecurityNumber
            firstPspReference: firstPspReference
            creationDate: 2000-01-23T04:56:07.000+00:00
            bank:
              ownerName: ownerName
              countryCode: countryCode
              taxId: taxId
              iban: iban
              bankAccountNumber: bankAccountNumber
              bankName: bankName
              bankLocationId: bankLocationId
              bic: bic
              bankCity: bankCity
            shopperName:
              firstName: firstName
              lastName: lastName
            aliasType: aliasType
            name: name
            variant: variant
            alias: alias
            recurringDetailReference: recurringDetailReference
            contractTypes:
            - contractTypes
            - contractTypes
            additionalData:
              key: additionalData
            billingAddress:
              country: country
              stateOrProvince: stateOrProvince
              city: city
              houseNumberOrName: houseNumberOrName
              street: street
              postalCode: postalCode
            paymentMethodVariant: paymentMethodVariant
            card:
              cvc: cvc
              number: number
              holderName: holderName
              startMonth: startMonth
              issueNumber: issueNumber
              expiryMonth: expiryMonth
              startYear: startYear
              expiryYear: expiryYear
        creationDate: 2000-01-23T04:56:07.000+00:00
        shopperReference: shopperReference
      properties:
        creationDate:
          description: The date when the recurring details were created.
          format: date-time
          title: creationDate
          type: string
        details:
          description: Payment details stored for recurring payments.
          items:
            $ref: '#/components/schemas/RecurringDetailWrapper'
          title: details
          type: array
        lastKnownShopperEmail:
          description: The most recent email for this shopper (if available).
          title: lastKnownShopperEmail
          type: string
        shopperReference:
          description: The reference you use to uniquely identify the shopper (e.g.
            user ID or account ID).
          title: shopperReference
          type: string
      title: RecurringDetailsResult
    ScheduleAccountUpdaterRequest:
      example:
        reference: reference
        merchantAccount: merchantAccount
        selectedRecurringDetailReference: selectedRecurringDetailReference
        additionalData:
          key: additionalData
        card:
          cvc: cvc
          number: number
          holderName: holderName
          startMonth: startMonth
          issueNumber: issueNumber
          expiryMonth: expiryMonth
          startYear: startYear
          expiryYear: expiryYear
        shopperReference: shopperReference
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: "This field contains additional data, which may be required\
            \ for a particular request."
          title: additionalData
        card:
          $ref: '#/components/schemas/Card'
        merchantAccount:
          description: Account of the merchant.
          title: merchantAccount
          type: string
        reference:
          description: A reference that merchants can apply for the call.
          title: reference
          type: string
        selectedRecurringDetailReference:
          description: |-
            The selected detail recurring reference.

            Optional if `card` is provided.
          title: selectedRecurringDetailReference
          type: string
        shopperReference:
          description: |-
            The reference of the shopper that owns the recurring contract.

            Optional if `card` is provided.
          title: shopperReference
          type: string
      required:
      - merchantAccount
      - reference
      title: ScheduleAccountUpdaterRequest
    ScheduleAccountUpdaterResult:
      example:
        result: result
        pspReference: pspReference
      properties:
        pspReference:
          description: Adyen's 16-character unique reference associated with the transaction.
            This value is globally unique; quote it when communicating with us about
            this request.
          title: pspReference
          type: string
        result:
          description: "The result of scheduling an Account Updater. If scheduling\
            \ was successful, this field returns **Success**; otherwise it contains\
            \ the error message."
          title: result
          type: string
      required:
      - pspReference
      - result
      title: ScheduleAccountUpdaterResult
    ServiceError:
      example:
        errorType: errorType
        errorCode: errorCode
        additionalData:
          key: additionalData
        message: message
        pspReference: pspReference
        status: 0
      properties:
        additionalData:
          additionalProperties:
            type: string
          description: Contains additional information about the payment. Some data
            fields are included only if you select them first. Go to **Customer Area**
            > **Developers** > **Additional data**.
          title: additionalData
          x-addedInVersion: "46"
        errorCode:
          description: The error code mapped to the error message.
          title: errorCode
          type: string
        errorType:
          description: The category of the error.
          title: errorType
          type: string
        message:
          description: A short explanation of the issue.
          title: message
          type: string
        pspReference:
          description: The PSP reference of the payment.
          title: pspReference
          type: string
        status:
          description: The HTTP response status.
          format: int32
          title: status
          type: integer
      title: ServiceError
    TokenDetails:
      example:
        tokenData:
          key: tokenData
        tokenDataType: tokenDataType
      properties:
        tokenData:
          additionalProperties:
            type: string
          title: tokenData
        tokenDataType:
          title: tokenDataType
          type: string
      title: TokenDetails
  securitySchemes:
    ApiKeyAuth:
      in: header
      name: X-API-Key
      type: apiKey
      x-apikeyInfoFunc: openapi_server.controllers.security_controller.info_from_ApiKeyAuth
    BasicAuth:
      scheme: basic
      type: http
      x-basicInfoFunc: openapi_server.controllers.security_controller.info_from_BasicAuth
