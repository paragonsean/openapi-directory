# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisablePermitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, token: str=None):
        """DisablePermitRequest - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this DisablePermitRequest.
        :param token: The token of this DisablePermitRequest.
        """
        self.openapi_types = {
            'merchant_account': str,
            'token': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'token': 'token'
        }

        self._merchant_account = merchant_account
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisablePermitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisablePermitRequest of this DisablePermitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DisablePermitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this DisablePermitRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DisablePermitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this DisablePermitRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def token(self):
        """Gets the token of this DisablePermitRequest.

        The permit token to disable.

        :return: The token of this DisablePermitRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this DisablePermitRequest.

        The permit token to disable.

        :param token: The token of this DisablePermitRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
