# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class PermitRestriction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_amount: Amount=None, single_transaction_limit: Amount=None, single_use: bool=None):
        """PermitRestriction - a model defined in OpenAPI

        :param max_amount: The max_amount of this PermitRestriction.
        :param single_transaction_limit: The single_transaction_limit of this PermitRestriction.
        :param single_use: The single_use of this PermitRestriction.
        """
        self.openapi_types = {
            'max_amount': Amount,
            'single_transaction_limit': Amount,
            'single_use': bool
        }

        self.attribute_map = {
            'max_amount': 'maxAmount',
            'single_transaction_limit': 'singleTransactionLimit',
            'single_use': 'singleUse'
        }

        self._max_amount = max_amount
        self._single_transaction_limit = single_transaction_limit
        self._single_use = single_use

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PermitRestriction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PermitRestriction of this PermitRestriction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_amount(self):
        """Gets the max_amount of this PermitRestriction.

        The total sum amount of one or more payments made using this permit may not exceed this amount if set.

        :return: The max_amount of this PermitRestriction.
        :rtype: Amount
        """
        return self._max_amount

    @max_amount.setter
    def max_amount(self, max_amount):
        """Sets the max_amount of this PermitRestriction.

        The total sum amount of one or more payments made using this permit may not exceed this amount if set.

        :param max_amount: The max_amount of this PermitRestriction.
        :type max_amount: Amount
        """

        self._max_amount = max_amount

    @property
    def single_transaction_limit(self):
        """Gets the single_transaction_limit of this PermitRestriction.

        The amount of any single payment using this permit may not exceed this amount if set.

        :return: The single_transaction_limit of this PermitRestriction.
        :rtype: Amount
        """
        return self._single_transaction_limit

    @single_transaction_limit.setter
    def single_transaction_limit(self, single_transaction_limit):
        """Sets the single_transaction_limit of this PermitRestriction.

        The amount of any single payment using this permit may not exceed this amount if set.

        :param single_transaction_limit: The single_transaction_limit of this PermitRestriction.
        :type single_transaction_limit: Amount
        """

        self._single_transaction_limit = single_transaction_limit

    @property
    def single_use(self):
        """Gets the single_use of this PermitRestriction.

        Only a single payment can be made using this permit if set to true, otherwise multiple payments are allowed.

        :return: The single_use of this PermitRestriction.
        :rtype: bool
        """
        return self._single_use

    @single_use.setter
    def single_use(self, single_use):
        """Sets the single_use of this PermitRestriction.

        Only a single payment can be made using this permit if set to true, otherwise multiple payments are allowed.

        :param single_use: The single_use of this PermitRestriction.
        :type single_use: bool
        """

        self._single_use = single_use
