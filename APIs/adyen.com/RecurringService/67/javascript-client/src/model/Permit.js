/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v67/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v67/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PermitRestriction from './PermitRestriction';

/**
 * The Permit model module.
 * @module model/Permit
 * @version 67
 */
class Permit {
    /**
     * Constructs a new <code>Permit</code>.
     * @alias module:model/Permit
     */
    constructor() { 
        
        Permit.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Permit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Permit} obj Optional instance to populate.
     * @return {module:model/Permit} The populated <code>Permit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Permit();

            if (data.hasOwnProperty('partnerId')) {
                obj['partnerId'] = ApiClient.convertToType(data['partnerId'], 'String');
            }
            if (data.hasOwnProperty('profileReference')) {
                obj['profileReference'] = ApiClient.convertToType(data['profileReference'], 'String');
            }
            if (data.hasOwnProperty('restriction')) {
                obj['restriction'] = PermitRestriction.constructFromObject(data['restriction']);
            }
            if (data.hasOwnProperty('resultKey')) {
                obj['resultKey'] = ApiClient.convertToType(data['resultKey'], 'String');
            }
            if (data.hasOwnProperty('validTillDate')) {
                obj['validTillDate'] = ApiClient.convertToType(data['validTillDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Permit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Permit</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['partnerId'] && !(typeof data['partnerId'] === 'string' || data['partnerId'] instanceof String)) {
            throw new Error("Expected the field `partnerId` to be a primitive type in the JSON string but got " + data['partnerId']);
        }
        // ensure the json data is a string
        if (data['profileReference'] && !(typeof data['profileReference'] === 'string' || data['profileReference'] instanceof String)) {
            throw new Error("Expected the field `profileReference` to be a primitive type in the JSON string but got " + data['profileReference']);
        }
        // validate the optional field `restriction`
        if (data['restriction']) { // data not null
          PermitRestriction.validateJSON(data['restriction']);
        }
        // ensure the json data is a string
        if (data['resultKey'] && !(typeof data['resultKey'] === 'string' || data['resultKey'] instanceof String)) {
            throw new Error("Expected the field `resultKey` to be a primitive type in the JSON string but got " + data['resultKey']);
        }

        return true;
    }


}



/**
 * Partner ID (when using the permit-per-partner token sharing model).
 * @member {String} partnerId
 */
Permit.prototype['partnerId'] = undefined;

/**
 * The profile to apply to this permit (when using the shared permits model).
 * @member {String} profileReference
 */
Permit.prototype['profileReference'] = undefined;

/**
 * Permit level restriction overrides.
 * @member {module:model/PermitRestriction} restriction
 */
Permit.prototype['restriction'] = undefined;

/**
 * The key to link permit requests to permit results.
 * @member {String} resultKey
 */
Permit.prototype['resultKey'] = undefined;

/**
 * The expiry date for this permit.
 * @member {Date} validTillDate
 */
Permit.prototype['validTillDate'] = undefined;






export default Permit;

