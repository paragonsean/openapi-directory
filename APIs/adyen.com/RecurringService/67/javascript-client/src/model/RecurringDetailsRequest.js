/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v67/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v67/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Recurring from './Recurring';

/**
 * The RecurringDetailsRequest model module.
 * @module model/RecurringDetailsRequest
 * @version 67
 */
class RecurringDetailsRequest {
    /**
     * Constructs a new <code>RecurringDetailsRequest</code>.
     * @alias module:model/RecurringDetailsRequest
     * @param merchantAccount {String} The merchant account identifier you want to process the (transaction) request with.
     * @param shopperReference {String} The reference you use to uniquely identify the shopper (e.g. user ID or account ID).
     */
    constructor(merchantAccount, shopperReference) { 
        
        RecurringDetailsRequest.initialize(this, merchantAccount, shopperReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, merchantAccount, shopperReference) { 
        obj['merchantAccount'] = merchantAccount;
        obj['shopperReference'] = shopperReference;
    }

    /**
     * Constructs a <code>RecurringDetailsRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringDetailsRequest} obj Optional instance to populate.
     * @return {module:model/RecurringDetailsRequest} The populated <code>RecurringDetailsRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringDetailsRequest();

            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringDetailsRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringDetailsRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecurringDetailsRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }

        return true;
    }


}

RecurringDetailsRequest.RequiredProperties = ["merchantAccount", "shopperReference"];

/**
 * The merchant account identifier you want to process the (transaction) request with.
 * @member {String} merchantAccount
 */
RecurringDetailsRequest.prototype['merchantAccount'] = undefined;

/**
 * A container for the type of a recurring contract to be retrieved.  The contract value needs to match the contract value submitted in the payment transaction used to create a recurring contract. However, if `ONECLICK,RECURRING` is the original contract definition in the initial payment, then `contract` should take either `ONECLICK` or `RECURRING`, depending on whether or not you want the shopper to enter their card's security code when they finalize their purchase.
 * @member {module:model/Recurring} recurring
 */
RecurringDetailsRequest.prototype['recurring'] = undefined;

/**
 * The reference you use to uniquely identify the shopper (e.g. user ID or account ID).
 * @member {String} shopperReference
 */
RecurringDetailsRequest.prototype['shopperReference'] = undefined;






export default RecurringDetailsRequest;

