/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v25/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v25/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 25
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurringDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurringDetail::OAIRecurringDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurringDetail::OAIRecurringDetail() {
    this->initializeModel();
}

OAIRecurringDetail::~OAIRecurringDetail() {}

void OAIRecurringDetail::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_alias_type_isSet = false;
    m_alias_type_isValid = false;

    m_bank_isSet = false;
    m_bank_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_contract_types_isSet = false;
    m_contract_types_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_first_psp_reference_isSet = false;
    m_first_psp_reference_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_payment_method_variant_isSet = false;
    m_payment_method_variant_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_token_details_isSet = false;
    m_token_details_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAIRecurringDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurringDetail::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_alias_type_isValid = ::OpenAPI::fromJsonValue(m_alias_type, json[QString("aliasType")]);
    m_alias_type_isSet = !json[QString("aliasType")].isNull() && m_alias_type_isValid;

    m_bank_isValid = ::OpenAPI::fromJsonValue(m_bank, json[QString("bank")]);
    m_bank_isSet = !json[QString("bank")].isNull() && m_bank_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_contract_types_isValid = ::OpenAPI::fromJsonValue(m_contract_types, json[QString("contractTypes")]);
    m_contract_types_isSet = !json[QString("contractTypes")].isNull() && m_contract_types_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_first_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_first_psp_reference, json[QString("firstPspReference")]);
    m_first_psp_reference_isSet = !json[QString("firstPspReference")].isNull() && m_first_psp_reference_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_payment_method_variant_isValid = ::OpenAPI::fromJsonValue(m_payment_method_variant, json[QString("paymentMethodVariant")]);
    m_payment_method_variant_isSet = !json[QString("paymentMethodVariant")].isNull() && m_payment_method_variant_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_token_details_isValid = ::OpenAPI::fromJsonValue(m_token_details, json[QString("tokenDetails")]);
    m_token_details_isSet = !json[QString("tokenDetails")].isNull() && m_token_details_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAIRecurringDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurringDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.size() > 0) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_alias_type_isSet) {
        obj.insert(QString("aliasType"), ::OpenAPI::toJsonValue(m_alias_type));
    }
    if (m_bank.isSet()) {
        obj.insert(QString("bank"), ::OpenAPI::toJsonValue(m_bank));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_contract_types.size() > 0) {
        obj.insert(QString("contractTypes"), ::OpenAPI::toJsonValue(m_contract_types));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_first_psp_reference_isSet) {
        obj.insert(QString("firstPspReference"), ::OpenAPI::toJsonValue(m_first_psp_reference));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_payment_method_variant_isSet) {
        obj.insert(QString("paymentMethodVariant"), ::OpenAPI::toJsonValue(m_payment_method_variant));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_token_details.isSet()) {
        obj.insert(QString("tokenDetails"), ::OpenAPI::toJsonValue(m_token_details));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QMap<QString, QString> OAIRecurringDetail::getAdditionalData() const {
    return m_additional_data;
}
void OAIRecurringDetail::setAdditionalData(const QMap<QString, QString> &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIRecurringDetail::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIRecurringDetail::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QString OAIRecurringDetail::getAlias() const {
    return m_alias;
}
void OAIRecurringDetail::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIRecurringDetail::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIRecurringDetail::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIRecurringDetail::getAliasType() const {
    return m_alias_type;
}
void OAIRecurringDetail::setAliasType(const QString &alias_type) {
    m_alias_type = alias_type;
    m_alias_type_isSet = true;
}

bool OAIRecurringDetail::is_alias_type_Set() const{
    return m_alias_type_isSet;
}

bool OAIRecurringDetail::is_alias_type_Valid() const{
    return m_alias_type_isValid;
}

OAIBankAccount OAIRecurringDetail::getBank() const {
    return m_bank;
}
void OAIRecurringDetail::setBank(const OAIBankAccount &bank) {
    m_bank = bank;
    m_bank_isSet = true;
}

bool OAIRecurringDetail::is_bank_Set() const{
    return m_bank_isSet;
}

bool OAIRecurringDetail::is_bank_Valid() const{
    return m_bank_isValid;
}

OAIAddress OAIRecurringDetail::getBillingAddress() const {
    return m_billing_address;
}
void OAIRecurringDetail::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIRecurringDetail::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIRecurringDetail::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICard OAIRecurringDetail::getCard() const {
    return m_card;
}
void OAIRecurringDetail::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIRecurringDetail::is_card_Set() const{
    return m_card_isSet;
}

bool OAIRecurringDetail::is_card_Valid() const{
    return m_card_isValid;
}

QList<QString> OAIRecurringDetail::getContractTypes() const {
    return m_contract_types;
}
void OAIRecurringDetail::setContractTypes(const QList<QString> &contract_types) {
    m_contract_types = contract_types;
    m_contract_types_isSet = true;
}

bool OAIRecurringDetail::is_contract_types_Set() const{
    return m_contract_types_isSet;
}

bool OAIRecurringDetail::is_contract_types_Valid() const{
    return m_contract_types_isValid;
}

QDateTime OAIRecurringDetail::getCreationDate() const {
    return m_creation_date;
}
void OAIRecurringDetail::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRecurringDetail::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRecurringDetail::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIRecurringDetail::getFirstPspReference() const {
    return m_first_psp_reference;
}
void OAIRecurringDetail::setFirstPspReference(const QString &first_psp_reference) {
    m_first_psp_reference = first_psp_reference;
    m_first_psp_reference_isSet = true;
}

bool OAIRecurringDetail::is_first_psp_reference_Set() const{
    return m_first_psp_reference_isSet;
}

bool OAIRecurringDetail::is_first_psp_reference_Valid() const{
    return m_first_psp_reference_isValid;
}

QString OAIRecurringDetail::getName() const {
    return m_name;
}
void OAIRecurringDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecurringDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecurringDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIRecurringDetail::getPaymentMethodVariant() const {
    return m_payment_method_variant;
}
void OAIRecurringDetail::setPaymentMethodVariant(const QString &payment_method_variant) {
    m_payment_method_variant = payment_method_variant;
    m_payment_method_variant_isSet = true;
}

bool OAIRecurringDetail::is_payment_method_variant_Set() const{
    return m_payment_method_variant_isSet;
}

bool OAIRecurringDetail::is_payment_method_variant_Valid() const{
    return m_payment_method_variant_isValid;
}

QString OAIRecurringDetail::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIRecurringDetail::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIRecurringDetail::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIRecurringDetail::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

OAIName OAIRecurringDetail::getShopperName() const {
    return m_shopper_name;
}
void OAIRecurringDetail::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIRecurringDetail::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIRecurringDetail::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIRecurringDetail::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAIRecurringDetail::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAIRecurringDetail::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAIRecurringDetail::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

OAITokenDetails OAIRecurringDetail::getTokenDetails() const {
    return m_token_details;
}
void OAIRecurringDetail::setTokenDetails(const OAITokenDetails &token_details) {
    m_token_details = token_details;
    m_token_details_isSet = true;
}

bool OAIRecurringDetail::is_token_details_Set() const{
    return m_token_details_isSet;
}

bool OAIRecurringDetail::is_token_details_Valid() const{
    return m_token_details_isValid;
}

QString OAIRecurringDetail::getVariant() const {
    return m_variant;
}
void OAIRecurringDetail::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIRecurringDetail::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIRecurringDetail::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAIRecurringDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contract_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurringDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recurring_detail_reference_isValid && m_variant_isValid && true;
}

} // namespace OpenAPI
