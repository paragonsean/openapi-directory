/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v25/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v25/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 25
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifyShopperResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifyShopperResult::OAINotifyShopperResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifyShopperResult::OAINotifyShopperResult() {
    this->initializeModel();
}

OAINotifyShopperResult::~OAINotifyShopperResult() {}

void OAINotifyShopperResult::initializeModel() {

    m_displayed_reference_isSet = false;
    m_displayed_reference_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_shopper_notification_reference_isSet = false;
    m_shopper_notification_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;
}

void OAINotifyShopperResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifyShopperResult::fromJsonObject(QJsonObject json) {

    m_displayed_reference_isValid = ::OpenAPI::fromJsonValue(m_displayed_reference, json[QString("displayedReference")]);
    m_displayed_reference_isSet = !json[QString("displayedReference")].isNull() && m_displayed_reference_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_shopper_notification_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_notification_reference, json[QString("shopperNotificationReference")]);
    m_shopper_notification_reference_isSet = !json[QString("shopperNotificationReference")].isNull() && m_shopper_notification_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;
}

QString OAINotifyShopperResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifyShopperResult::asJsonObject() const {
    QJsonObject obj;
    if (m_displayed_reference_isSet) {
        obj.insert(QString("displayedReference"), ::OpenAPI::toJsonValue(m_displayed_reference));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_shopper_notification_reference_isSet) {
        obj.insert(QString("shopperNotificationReference"), ::OpenAPI::toJsonValue(m_shopper_notification_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    return obj;
}

QString OAINotifyShopperResult::getDisplayedReference() const {
    return m_displayed_reference;
}
void OAINotifyShopperResult::setDisplayedReference(const QString &displayed_reference) {
    m_displayed_reference = displayed_reference;
    m_displayed_reference_isSet = true;
}

bool OAINotifyShopperResult::is_displayed_reference_Set() const{
    return m_displayed_reference_isSet;
}

bool OAINotifyShopperResult::is_displayed_reference_Valid() const{
    return m_displayed_reference_isValid;
}

QString OAINotifyShopperResult::getMessage() const {
    return m_message;
}
void OAINotifyShopperResult::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAINotifyShopperResult::is_message_Set() const{
    return m_message_isSet;
}

bool OAINotifyShopperResult::is_message_Valid() const{
    return m_message_isValid;
}

QString OAINotifyShopperResult::getPspReference() const {
    return m_psp_reference;
}
void OAINotifyShopperResult::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAINotifyShopperResult::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAINotifyShopperResult::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAINotifyShopperResult::getReference() const {
    return m_reference;
}
void OAINotifyShopperResult::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAINotifyShopperResult::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAINotifyShopperResult::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAINotifyShopperResult::getResultCode() const {
    return m_result_code;
}
void OAINotifyShopperResult::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAINotifyShopperResult::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAINotifyShopperResult::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAINotifyShopperResult::getShopperNotificationReference() const {
    return m_shopper_notification_reference;
}
void OAINotifyShopperResult::setShopperNotificationReference(const QString &shopper_notification_reference) {
    m_shopper_notification_reference = shopper_notification_reference;
    m_shopper_notification_reference_isSet = true;
}

bool OAINotifyShopperResult::is_shopper_notification_reference_Set() const{
    return m_shopper_notification_reference_isSet;
}

bool OAINotifyShopperResult::is_shopper_notification_reference_Valid() const{
    return m_shopper_notification_reference_isValid;
}

QString OAINotifyShopperResult::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAINotifyShopperResult::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAINotifyShopperResult::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAINotifyShopperResult::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

bool OAINotifyShopperResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_displayed_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_notification_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifyShopperResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
