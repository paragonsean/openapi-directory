/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v25/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v25/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import BankAccount from './BankAccount';
import Card from './Card';
import Name from './Name';
import TokenDetails from './TokenDetails';

/**
 * The RecurringDetail model module.
 * @module model/RecurringDetail
 * @version 25
 */
class RecurringDetail {
    /**
     * Constructs a new <code>RecurringDetail</code>.
     * @alias module:model/RecurringDetail
     * @param recurringDetailReference {String} The reference that uniquely identifies the recurring detail.
     * @param variant {String} The payment method, such as â€œmc\", \"visa\", \"ideal\", \"paypal\".
     */
    constructor(recurringDetailReference, variant) { 
        
        RecurringDetail.initialize(this, recurringDetailReference, variant);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recurringDetailReference, variant) { 
        obj['recurringDetailReference'] = recurringDetailReference;
        obj['variant'] = variant;
    }

    /**
     * Constructs a <code>RecurringDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RecurringDetail} obj Optional instance to populate.
     * @return {module:model/RecurringDetail} The populated <code>RecurringDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RecurringDetail();

            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = ApiClient.convertToType(data['additionalData'], {'String': 'String'});
            }
            if (data.hasOwnProperty('alias')) {
                obj['alias'] = ApiClient.convertToType(data['alias'], 'String');
            }
            if (data.hasOwnProperty('aliasType')) {
                obj['aliasType'] = ApiClient.convertToType(data['aliasType'], 'String');
            }
            if (data.hasOwnProperty('bank')) {
                obj['bank'] = BankAccount.constructFromObject(data['bank']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('card')) {
                obj['card'] = Card.constructFromObject(data['card']);
            }
            if (data.hasOwnProperty('contractTypes')) {
                obj['contractTypes'] = ApiClient.convertToType(data['contractTypes'], ['String']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('firstPspReference')) {
                obj['firstPspReference'] = ApiClient.convertToType(data['firstPspReference'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('paymentMethodVariant')) {
                obj['paymentMethodVariant'] = ApiClient.convertToType(data['paymentMethodVariant'], 'String');
            }
            if (data.hasOwnProperty('recurringDetailReference')) {
                obj['recurringDetailReference'] = ApiClient.convertToType(data['recurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
            if (data.hasOwnProperty('tokenDetails')) {
                obj['tokenDetails'] = TokenDetails.constructFromObject(data['tokenDetails']);
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RecurringDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecurringDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RecurringDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['alias'] && !(typeof data['alias'] === 'string' || data['alias'] instanceof String)) {
            throw new Error("Expected the field `alias` to be a primitive type in the JSON string but got " + data['alias']);
        }
        // ensure the json data is a string
        if (data['aliasType'] && !(typeof data['aliasType'] === 'string' || data['aliasType'] instanceof String)) {
            throw new Error("Expected the field `aliasType` to be a primitive type in the JSON string but got " + data['aliasType']);
        }
        // validate the optional field `bank`
        if (data['bank']) { // data not null
          BankAccount.validateJSON(data['bank']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `card`
        if (data['card']) { // data not null
          Card.validateJSON(data['card']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contractTypes'])) {
            throw new Error("Expected the field `contractTypes` to be an array in the JSON data but got " + data['contractTypes']);
        }
        // ensure the json data is a string
        if (data['firstPspReference'] && !(typeof data['firstPspReference'] === 'string' || data['firstPspReference'] instanceof String)) {
            throw new Error("Expected the field `firstPspReference` to be a primitive type in the JSON string but got " + data['firstPspReference']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['paymentMethodVariant'] && !(typeof data['paymentMethodVariant'] === 'string' || data['paymentMethodVariant'] instanceof String)) {
            throw new Error("Expected the field `paymentMethodVariant` to be a primitive type in the JSON string but got " + data['paymentMethodVariant']);
        }
        // ensure the json data is a string
        if (data['recurringDetailReference'] && !(typeof data['recurringDetailReference'] === 'string' || data['recurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `recurringDetailReference` to be a primitive type in the JSON string but got " + data['recurringDetailReference']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }
        // validate the optional field `tokenDetails`
        if (data['tokenDetails']) { // data not null
          TokenDetails.validateJSON(data['tokenDetails']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }

        return true;
    }


}

RecurringDetail.RequiredProperties = ["recurringDetailReference", "variant"];

/**
 * This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value.
 * @member {Object.<String, String>} additionalData
 */
RecurringDetail.prototype['additionalData'] = undefined;

/**
 * The alias of the credit card number.  Applies only to recurring contracts storing credit card details
 * @member {String} alias
 */
RecurringDetail.prototype['alias'] = undefined;

/**
 * The alias type of the credit card number.  Applies only to recurring contracts storing credit card details.
 * @member {String} aliasType
 */
RecurringDetail.prototype['aliasType'] = undefined;

/**
 * A container for bank account data.
 * @member {module:model/BankAccount} bank
 */
RecurringDetail.prototype['bank'] = undefined;

/**
 * The billing address.
 * @member {module:model/Address} billingAddress
 */
RecurringDetail.prototype['billingAddress'] = undefined;

/**
 * A container for card data.
 * @member {module:model/Card} card
 */
RecurringDetail.prototype['card'] = undefined;

/**
 * Types of recurring contracts.
 * @member {Array.<String>} contractTypes
 */
RecurringDetail.prototype['contractTypes'] = undefined;

/**
 * The date when the recurring details were created.
 * @member {Date} creationDate
 */
RecurringDetail.prototype['creationDate'] = undefined;

/**
 * The `pspReference` of the first recurring payment that created the recurring detail.
 * @member {String} firstPspReference
 */
RecurringDetail.prototype['firstPspReference'] = undefined;

/**
 * An optional descriptive name for this recurring detail.
 * @member {String} name
 */
RecurringDetail.prototype['name'] = undefined;

/**
 * The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).
 * @member {String} paymentMethodVariant
 */
RecurringDetail.prototype['paymentMethodVariant'] = undefined;

/**
 * The reference that uniquely identifies the recurring detail.
 * @member {String} recurringDetailReference
 */
RecurringDetail.prototype['recurringDetailReference'] = undefined;

/**
 * The name of the shopper.
 * @member {module:model/Name} shopperName
 */
RecurringDetail.prototype['shopperName'] = undefined;

/**
 * A shopper's social security number (only in countries where it is legal to collect).
 * @member {String} socialSecurityNumber
 */
RecurringDetail.prototype['socialSecurityNumber'] = undefined;

/**
 * @member {module:model/TokenDetails} tokenDetails
 */
RecurringDetail.prototype['tokenDetails'] = undefined;

/**
 * The payment method, such as â€œmc\", \"visa\", \"ideal\", \"paypal\".
 * @member {String} variant
 */
RecurringDetail.prototype['variant'] = undefined;






export default RecurringDetail;

