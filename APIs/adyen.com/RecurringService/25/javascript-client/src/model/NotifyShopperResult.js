/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v25/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v25/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NotifyShopperResult model module.
 * @module model/NotifyShopperResult
 * @version 25
 */
class NotifyShopperResult {
    /**
     * Constructs a new <code>NotifyShopperResult</code>.
     * @alias module:model/NotifyShopperResult
     */
    constructor() { 
        
        NotifyShopperResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NotifyShopperResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotifyShopperResult} obj Optional instance to populate.
     * @return {module:model/NotifyShopperResult} The populated <code>NotifyShopperResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotifyShopperResult();

            if (data.hasOwnProperty('displayedReference')) {
                obj['displayedReference'] = ApiClient.convertToType(data['displayedReference'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('shopperNotificationReference')) {
                obj['shopperNotificationReference'] = ApiClient.convertToType(data['shopperNotificationReference'], 'String');
            }
            if (data.hasOwnProperty('storedPaymentMethodId')) {
                obj['storedPaymentMethodId'] = ApiClient.convertToType(data['storedPaymentMethodId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotifyShopperResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotifyShopperResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayedReference'] && !(typeof data['displayedReference'] === 'string' || data['displayedReference'] instanceof String)) {
            throw new Error("Expected the field `displayedReference` to be a primitive type in the JSON string but got " + data['displayedReference']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }
        // ensure the json data is a string
        if (data['shopperNotificationReference'] && !(typeof data['shopperNotificationReference'] === 'string' || data['shopperNotificationReference'] instanceof String)) {
            throw new Error("Expected the field `shopperNotificationReference` to be a primitive type in the JSON string but got " + data['shopperNotificationReference']);
        }
        // ensure the json data is a string
        if (data['storedPaymentMethodId'] && !(typeof data['storedPaymentMethodId'] === 'string' || data['storedPaymentMethodId'] instanceof String)) {
            throw new Error("Expected the field `storedPaymentMethodId` to be a primitive type in the JSON string but got " + data['storedPaymentMethodId']);
        }

        return true;
    }


}



/**
 * Reference of Pre-debit notification that is displayed to the shopper
 * @member {String} displayedReference
 */
NotifyShopperResult.prototype['displayedReference'] = undefined;

/**
 * A simple description of the `resultCode`.
 * @member {String} message
 */
NotifyShopperResult.prototype['message'] = undefined;

/**
 * The unique reference that is associated with the request.
 * @member {String} pspReference
 */
NotifyShopperResult.prototype['pspReference'] = undefined;

/**
 * Reference of Pre-debit notification sent in my the merchant
 * @member {String} reference
 */
NotifyShopperResult.prototype['reference'] = undefined;

/**
 * The code indicating the status of notification.
 * @member {String} resultCode
 */
NotifyShopperResult.prototype['resultCode'] = undefined;

/**
 * The unique reference for the request sent downstream.
 * @member {String} shopperNotificationReference
 */
NotifyShopperResult.prototype['shopperNotificationReference'] = undefined;

/**
 * This is the recurringDetailReference returned in the response when token was created
 * @member {String} storedPaymentMethodId
 */
NotifyShopperResult.prototype['storedPaymentMethodId'] = undefined;






export default NotifyShopperResult;

