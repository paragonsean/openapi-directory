# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recurring import Recurring
from openapi_server import util


class RecurringDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, recurring: Recurring=None, shopper_reference: str=None):
        """RecurringDetailsRequest - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this RecurringDetailsRequest.
        :param recurring: The recurring of this RecurringDetailsRequest.
        :param shopper_reference: The shopper_reference of this RecurringDetailsRequest.
        """
        self.openapi_types = {
            'merchant_account': str,
            'recurring': Recurring,
            'shopper_reference': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'recurring': 'recurring',
            'shopper_reference': 'shopperReference'
        }

        self._merchant_account = merchant_account
        self._recurring = recurring
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringDetailsRequest of this RecurringDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this RecurringDetailsRequest.

        The merchant account identifier you want to process the (transaction) request with.

        :return: The merchant_account of this RecurringDetailsRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this RecurringDetailsRequest.

        The merchant account identifier you want to process the (transaction) request with.

        :param merchant_account: The merchant_account of this RecurringDetailsRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def recurring(self):
        """Gets the recurring of this RecurringDetailsRequest.

        A container for the type of a recurring contract to be retrieved.  The contract value needs to match the contract value submitted in the payment transaction used to create a recurring contract. However, if `ONECLICK,RECURRING` is the original contract definition in the initial payment, then `contract` should take either `ONECLICK` or `RECURRING`, depending on whether or not you want the shopper to enter their card's security code when they finalize their purchase.

        :return: The recurring of this RecurringDetailsRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this RecurringDetailsRequest.

        A container for the type of a recurring contract to be retrieved.  The contract value needs to match the contract value submitted in the payment transaction used to create a recurring contract. However, if `ONECLICK,RECURRING` is the original contract definition in the initial payment, then `contract` should take either `ONECLICK` or `RECURRING`, depending on whether or not you want the shopper to enter their card's security code when they finalize their purchase.

        :param recurring: The recurring of this RecurringDetailsRequest.
        :type recurring: Recurring
        """

        self._recurring = recurring

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this RecurringDetailsRequest.

        The reference you use to uniquely identify the shopper (e.g. user ID or account ID).

        :return: The shopper_reference of this RecurringDetailsRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this RecurringDetailsRequest.

        The reference you use to uniquely identify the shopper (e.g. user ID or account ID).

        :param shopper_reference: The shopper_reference of this RecurringDetailsRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference
