/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v40/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v40/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurring.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurring::OAIRecurring(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurring::OAIRecurring() {
    this->initializeModel();
}

OAIRecurring::~OAIRecurring() {}

void OAIRecurring::initializeModel() {

    m_contract_isSet = false;
    m_contract_isValid = false;

    m_recurring_detail_name_isSet = false;
    m_recurring_detail_name_isValid = false;

    m_recurring_expiry_isSet = false;
    m_recurring_expiry_isValid = false;

    m_recurring_frequency_isSet = false;
    m_recurring_frequency_isValid = false;

    m_token_service_isSet = false;
    m_token_service_isValid = false;
}

void OAIRecurring::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurring::fromJsonObject(QJsonObject json) {

    m_contract_isValid = ::OpenAPI::fromJsonValue(m_contract, json[QString("contract")]);
    m_contract_isSet = !json[QString("contract")].isNull() && m_contract_isValid;

    m_recurring_detail_name_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_name, json[QString("recurringDetailName")]);
    m_recurring_detail_name_isSet = !json[QString("recurringDetailName")].isNull() && m_recurring_detail_name_isValid;

    m_recurring_expiry_isValid = ::OpenAPI::fromJsonValue(m_recurring_expiry, json[QString("recurringExpiry")]);
    m_recurring_expiry_isSet = !json[QString("recurringExpiry")].isNull() && m_recurring_expiry_isValid;

    m_recurring_frequency_isValid = ::OpenAPI::fromJsonValue(m_recurring_frequency, json[QString("recurringFrequency")]);
    m_recurring_frequency_isSet = !json[QString("recurringFrequency")].isNull() && m_recurring_frequency_isValid;

    m_token_service_isValid = ::OpenAPI::fromJsonValue(m_token_service, json[QString("tokenService")]);
    m_token_service_isSet = !json[QString("tokenService")].isNull() && m_token_service_isValid;
}

QString OAIRecurring::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurring::asJsonObject() const {
    QJsonObject obj;
    if (m_contract_isSet) {
        obj.insert(QString("contract"), ::OpenAPI::toJsonValue(m_contract));
    }
    if (m_recurring_detail_name_isSet) {
        obj.insert(QString("recurringDetailName"), ::OpenAPI::toJsonValue(m_recurring_detail_name));
    }
    if (m_recurring_expiry_isSet) {
        obj.insert(QString("recurringExpiry"), ::OpenAPI::toJsonValue(m_recurring_expiry));
    }
    if (m_recurring_frequency_isSet) {
        obj.insert(QString("recurringFrequency"), ::OpenAPI::toJsonValue(m_recurring_frequency));
    }
    if (m_token_service_isSet) {
        obj.insert(QString("tokenService"), ::OpenAPI::toJsonValue(m_token_service));
    }
    return obj;
}

QString OAIRecurring::getContract() const {
    return m_contract;
}
void OAIRecurring::setContract(const QString &contract) {
    m_contract = contract;
    m_contract_isSet = true;
}

bool OAIRecurring::is_contract_Set() const{
    return m_contract_isSet;
}

bool OAIRecurring::is_contract_Valid() const{
    return m_contract_isValid;
}

QString OAIRecurring::getRecurringDetailName() const {
    return m_recurring_detail_name;
}
void OAIRecurring::setRecurringDetailName(const QString &recurring_detail_name) {
    m_recurring_detail_name = recurring_detail_name;
    m_recurring_detail_name_isSet = true;
}

bool OAIRecurring::is_recurring_detail_name_Set() const{
    return m_recurring_detail_name_isSet;
}

bool OAIRecurring::is_recurring_detail_name_Valid() const{
    return m_recurring_detail_name_isValid;
}

QDateTime OAIRecurring::getRecurringExpiry() const {
    return m_recurring_expiry;
}
void OAIRecurring::setRecurringExpiry(const QDateTime &recurring_expiry) {
    m_recurring_expiry = recurring_expiry;
    m_recurring_expiry_isSet = true;
}

bool OAIRecurring::is_recurring_expiry_Set() const{
    return m_recurring_expiry_isSet;
}

bool OAIRecurring::is_recurring_expiry_Valid() const{
    return m_recurring_expiry_isValid;
}

QString OAIRecurring::getRecurringFrequency() const {
    return m_recurring_frequency;
}
void OAIRecurring::setRecurringFrequency(const QString &recurring_frequency) {
    m_recurring_frequency = recurring_frequency;
    m_recurring_frequency_isSet = true;
}

bool OAIRecurring::is_recurring_frequency_Set() const{
    return m_recurring_frequency_isSet;
}

bool OAIRecurring::is_recurring_frequency_Valid() const{
    return m_recurring_frequency_isValid;
}

QString OAIRecurring::getTokenService() const {
    return m_token_service;
}
void OAIRecurring::setTokenService(const QString &token_service) {
    m_token_service = token_service;
    m_token_service_isSet = true;
}

bool OAIRecurring::is_token_service_Set() const{
    return m_token_service_isSet;
}

bool OAIRecurring::is_token_service_Valid() const{
    return m_token_service_isValid;
}

bool OAIRecurring::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_service_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurring::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
