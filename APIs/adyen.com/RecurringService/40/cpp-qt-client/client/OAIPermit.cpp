/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v40/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v40/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermit.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermit::OAIPermit(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermit::OAIPermit() {
    this->initializeModel();
}

OAIPermit::~OAIPermit() {}

void OAIPermit::initializeModel() {

    m_partner_id_isSet = false;
    m_partner_id_isValid = false;

    m_profile_reference_isSet = false;
    m_profile_reference_isValid = false;

    m_restriction_isSet = false;
    m_restriction_isValid = false;

    m_result_key_isSet = false;
    m_result_key_isValid = false;

    m_valid_till_date_isSet = false;
    m_valid_till_date_isValid = false;
}

void OAIPermit::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermit::fromJsonObject(QJsonObject json) {

    m_partner_id_isValid = ::OpenAPI::fromJsonValue(m_partner_id, json[QString("partnerId")]);
    m_partner_id_isSet = !json[QString("partnerId")].isNull() && m_partner_id_isValid;

    m_profile_reference_isValid = ::OpenAPI::fromJsonValue(m_profile_reference, json[QString("profileReference")]);
    m_profile_reference_isSet = !json[QString("profileReference")].isNull() && m_profile_reference_isValid;

    m_restriction_isValid = ::OpenAPI::fromJsonValue(m_restriction, json[QString("restriction")]);
    m_restriction_isSet = !json[QString("restriction")].isNull() && m_restriction_isValid;

    m_result_key_isValid = ::OpenAPI::fromJsonValue(m_result_key, json[QString("resultKey")]);
    m_result_key_isSet = !json[QString("resultKey")].isNull() && m_result_key_isValid;

    m_valid_till_date_isValid = ::OpenAPI::fromJsonValue(m_valid_till_date, json[QString("validTillDate")]);
    m_valid_till_date_isSet = !json[QString("validTillDate")].isNull() && m_valid_till_date_isValid;
}

QString OAIPermit::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermit::asJsonObject() const {
    QJsonObject obj;
    if (m_partner_id_isSet) {
        obj.insert(QString("partnerId"), ::OpenAPI::toJsonValue(m_partner_id));
    }
    if (m_profile_reference_isSet) {
        obj.insert(QString("profileReference"), ::OpenAPI::toJsonValue(m_profile_reference));
    }
    if (m_restriction.isSet()) {
        obj.insert(QString("restriction"), ::OpenAPI::toJsonValue(m_restriction));
    }
    if (m_result_key_isSet) {
        obj.insert(QString("resultKey"), ::OpenAPI::toJsonValue(m_result_key));
    }
    if (m_valid_till_date_isSet) {
        obj.insert(QString("validTillDate"), ::OpenAPI::toJsonValue(m_valid_till_date));
    }
    return obj;
}

QString OAIPermit::getPartnerId() const {
    return m_partner_id;
}
void OAIPermit::setPartnerId(const QString &partner_id) {
    m_partner_id = partner_id;
    m_partner_id_isSet = true;
}

bool OAIPermit::is_partner_id_Set() const{
    return m_partner_id_isSet;
}

bool OAIPermit::is_partner_id_Valid() const{
    return m_partner_id_isValid;
}

QString OAIPermit::getProfileReference() const {
    return m_profile_reference;
}
void OAIPermit::setProfileReference(const QString &profile_reference) {
    m_profile_reference = profile_reference;
    m_profile_reference_isSet = true;
}

bool OAIPermit::is_profile_reference_Set() const{
    return m_profile_reference_isSet;
}

bool OAIPermit::is_profile_reference_Valid() const{
    return m_profile_reference_isValid;
}

OAIPermitRestriction OAIPermit::getRestriction() const {
    return m_restriction;
}
void OAIPermit::setRestriction(const OAIPermitRestriction &restriction) {
    m_restriction = restriction;
    m_restriction_isSet = true;
}

bool OAIPermit::is_restriction_Set() const{
    return m_restriction_isSet;
}

bool OAIPermit::is_restriction_Valid() const{
    return m_restriction_isValid;
}

QString OAIPermit::getResultKey() const {
    return m_result_key;
}
void OAIPermit::setResultKey(const QString &result_key) {
    m_result_key = result_key;
    m_result_key_isSet = true;
}

bool OAIPermit::is_result_key_Set() const{
    return m_result_key_isSet;
}

bool OAIPermit::is_result_key_Valid() const{
    return m_result_key_isValid;
}

QDateTime OAIPermit::getValidTillDate() const {
    return m_valid_till_date;
}
void OAIPermit::setValidTillDate(const QDateTime &valid_till_date) {
    m_valid_till_date = valid_till_date;
    m_valid_till_date_isSet = true;
}

bool OAIPermit::is_valid_till_date_Set() const{
    return m_valid_till_date_isSet;
}

bool OAIPermit::is_valid_till_date_Valid() const{
    return m_valid_till_date_isValid;
}

bool OAIPermit::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_till_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermit::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
