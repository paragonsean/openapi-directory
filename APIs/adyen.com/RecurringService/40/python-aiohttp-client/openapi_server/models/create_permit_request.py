# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permit import Permit
from openapi_server import util


class CreatePermitRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, permits: List[Permit]=None, recurring_detail_reference: str=None, shopper_reference: str=None):
        """CreatePermitRequest - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this CreatePermitRequest.
        :param permits: The permits of this CreatePermitRequest.
        :param recurring_detail_reference: The recurring_detail_reference of this CreatePermitRequest.
        :param shopper_reference: The shopper_reference of this CreatePermitRequest.
        """
        self.openapi_types = {
            'merchant_account': str,
            'permits': List[Permit],
            'recurring_detail_reference': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'permits': 'permits',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_reference': 'shopperReference'
        }

        self._merchant_account = merchant_account
        self._permits = permits
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatePermitRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreatePermitRequest of this CreatePermitRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CreatePermitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this CreatePermitRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CreatePermitRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this CreatePermitRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def permits(self):
        """Gets the permits of this CreatePermitRequest.

        The permits to create for this recurring contract.

        :return: The permits of this CreatePermitRequest.
        :rtype: List[Permit]
        """
        return self._permits

    @permits.setter
    def permits(self, permits):
        """Sets the permits of this CreatePermitRequest.

        The permits to create for this recurring contract.

        :param permits: The permits of this CreatePermitRequest.
        :type permits: List[Permit]
        """
        if permits is None:
            raise ValueError("Invalid value for `permits`, must not be `None`")

        self._permits = permits

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this CreatePermitRequest.

        The recurring contract the new permits will use.

        :return: The recurring_detail_reference of this CreatePermitRequest.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this CreatePermitRequest.

        The recurring contract the new permits will use.

        :param recurring_detail_reference: The recurring_detail_reference of this CreatePermitRequest.
        :type recurring_detail_reference: str
        """
        if recurring_detail_reference is None:
            raise ValueError("Invalid value for `recurring_detail_reference`, must not be `None`")

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this CreatePermitRequest.

        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).

        :return: The shopper_reference of this CreatePermitRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this CreatePermitRequest.

        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).

        :param shopper_reference: The shopper_reference of this CreatePermitRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference
