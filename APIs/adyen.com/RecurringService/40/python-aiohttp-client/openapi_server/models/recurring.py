# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Recurring(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract: str=None, recurring_detail_name: str=None, recurring_expiry: datetime=None, recurring_frequency: str=None, token_service: str=None):
        """Recurring - a model defined in OpenAPI

        :param contract: The contract of this Recurring.
        :param recurring_detail_name: The recurring_detail_name of this Recurring.
        :param recurring_expiry: The recurring_expiry of this Recurring.
        :param recurring_frequency: The recurring_frequency of this Recurring.
        :param token_service: The token_service of this Recurring.
        """
        self.openapi_types = {
            'contract': str,
            'recurring_detail_name': str,
            'recurring_expiry': datetime,
            'recurring_frequency': str,
            'token_service': str
        }

        self.attribute_map = {
            'contract': 'contract',
            'recurring_detail_name': 'recurringDetailName',
            'recurring_expiry': 'recurringExpiry',
            'recurring_frequency': 'recurringFrequency',
            'token_service': 'tokenService'
        }

        self._contract = contract
        self._recurring_detail_name = recurring_detail_name
        self._recurring_expiry = recurring_expiry
        self._recurring_frequency = recurring_frequency
        self._token_service = token_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Recurring':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Recurring of this Recurring.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract(self):
        """Gets the contract of this Recurring.

        The type of recurring contract to be used. Possible values: * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not. * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).

        :return: The contract of this Recurring.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this Recurring.

        The type of recurring contract to be used. Possible values: * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not. * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).

        :param contract: The contract of this Recurring.
        :type contract: str
        """
        allowed_values = ["ONECLICK", "RECURRING", "PAYOUT"]  # noqa: E501
        if contract not in allowed_values:
            raise ValueError(
                "Invalid value for `contract` ({0}), must be one of {1}"
                .format(contract, allowed_values)
            )

        self._contract = contract

    @property
    def recurring_detail_name(self):
        """Gets the recurring_detail_name of this Recurring.

        A descriptive name for this detail.

        :return: The recurring_detail_name of this Recurring.
        :rtype: str
        """
        return self._recurring_detail_name

    @recurring_detail_name.setter
    def recurring_detail_name(self, recurring_detail_name):
        """Sets the recurring_detail_name of this Recurring.

        A descriptive name for this detail.

        :param recurring_detail_name: The recurring_detail_name of this Recurring.
        :type recurring_detail_name: str
        """

        self._recurring_detail_name = recurring_detail_name

    @property
    def recurring_expiry(self):
        """Gets the recurring_expiry of this Recurring.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :return: The recurring_expiry of this Recurring.
        :rtype: datetime
        """
        return self._recurring_expiry

    @recurring_expiry.setter
    def recurring_expiry(self, recurring_expiry):
        """Sets the recurring_expiry of this Recurring.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :param recurring_expiry: The recurring_expiry of this Recurring.
        :type recurring_expiry: datetime
        """

        self._recurring_expiry = recurring_expiry

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this Recurring.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :return: The recurring_frequency of this Recurring.
        :rtype: str
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this Recurring.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :param recurring_frequency: The recurring_frequency of this Recurring.
        :type recurring_frequency: str
        """

        self._recurring_frequency = recurring_frequency

    @property
    def token_service(self):
        """Gets the token_service of this Recurring.

        The name of the token service.

        :return: The token_service of this Recurring.
        :rtype: str
        """
        return self._token_service

    @token_service.setter
    def token_service(self, token_service):
        """Sets the token_service of this Recurring.

        The name of the token service.

        :param token_service: The token_service of this Recurring.
        :type token_service: str
        """
        allowed_values = ["VISATOKENSERVICE", "MCTOKENSERVICE", "AMEXTOKENSERVICE", "TOKEN_SHARING"]  # noqa: E501
        if token_service not in allowed_values:
            raise ValueError(
                "Invalid value for `token_service` ({0}), must be one of {1}"
                .format(token_service, allowed_values)
            )

        self._token_service = token_service
