/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v40/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v40/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The NotifyShopperRequest model module.
 * @module model/NotifyShopperRequest
 * @version 40
 */
class NotifyShopperRequest {
    /**
     * Constructs a new <code>NotifyShopperRequest</code>.
     * @alias module:model/NotifyShopperRequest
     * @param amount {module:model/Amount} The amount of the upcoming payment.
     * @param merchantAccount {String} The merchant account identifier with which you want to process the transaction.
     * @param reference {String} Pre-debit notification reference sent by the merchant. This is a mandatory field
     * @param shopperReference {String} The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.
     */
    constructor(amount, merchantAccount, reference, shopperReference) { 
        
        NotifyShopperRequest.initialize(this, amount, merchantAccount, reference, shopperReference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount, reference, shopperReference) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
        obj['reference'] = reference;
        obj['shopperReference'] = shopperReference;
    }

    /**
     * Constructs a <code>NotifyShopperRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotifyShopperRequest} obj Optional instance to populate.
     * @return {module:model/NotifyShopperRequest} The populated <code>NotifyShopperRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotifyShopperRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('billingDate')) {
                obj['billingDate'] = ApiClient.convertToType(data['billingDate'], 'String');
            }
            if (data.hasOwnProperty('billingSequenceNumber')) {
                obj['billingSequenceNumber'] = ApiClient.convertToType(data['billingSequenceNumber'], 'String');
            }
            if (data.hasOwnProperty('displayedReference')) {
                obj['displayedReference'] = ApiClient.convertToType(data['displayedReference'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('recurringDetailReference')) {
                obj['recurringDetailReference'] = ApiClient.convertToType(data['recurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('storedPaymentMethodId')) {
                obj['storedPaymentMethodId'] = ApiClient.convertToType(data['storedPaymentMethodId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotifyShopperRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotifyShopperRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotifyShopperRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['billingDate'] && !(typeof data['billingDate'] === 'string' || data['billingDate'] instanceof String)) {
            throw new Error("Expected the field `billingDate` to be a primitive type in the JSON string but got " + data['billingDate']);
        }
        // ensure the json data is a string
        if (data['billingSequenceNumber'] && !(typeof data['billingSequenceNumber'] === 'string' || data['billingSequenceNumber'] instanceof String)) {
            throw new Error("Expected the field `billingSequenceNumber` to be a primitive type in the JSON string but got " + data['billingSequenceNumber']);
        }
        // ensure the json data is a string
        if (data['displayedReference'] && !(typeof data['displayedReference'] === 'string' || data['displayedReference'] instanceof String)) {
            throw new Error("Expected the field `displayedReference` to be a primitive type in the JSON string but got " + data['displayedReference']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['recurringDetailReference'] && !(typeof data['recurringDetailReference'] === 'string' || data['recurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `recurringDetailReference` to be a primitive type in the JSON string but got " + data['recurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['storedPaymentMethodId'] && !(typeof data['storedPaymentMethodId'] === 'string' || data['storedPaymentMethodId'] instanceof String)) {
            throw new Error("Expected the field `storedPaymentMethodId` to be a primitive type in the JSON string but got " + data['storedPaymentMethodId']);
        }

        return true;
    }


}

NotifyShopperRequest.RequiredProperties = ["amount", "merchantAccount", "reference", "shopperReference"];

/**
 * The amount of the upcoming payment.
 * @member {module:model/Amount} amount
 */
NotifyShopperRequest.prototype['amount'] = undefined;

/**
 * Date on which the subscription amount will be debited from the shopper. In YYYY-MM-DD format
 * @member {String} billingDate
 */
NotifyShopperRequest.prototype['billingDate'] = undefined;

/**
 * Sequence of the debit. Depends on Frequency and Billing Attempts Rule.
 * @member {String} billingSequenceNumber
 */
NotifyShopperRequest.prototype['billingSequenceNumber'] = undefined;

/**
 * Reference of Pre-debit notification that is displayed to the shopper. Optional field. Maps to reference if missing
 * @member {String} displayedReference
 */
NotifyShopperRequest.prototype['displayedReference'] = undefined;

/**
 * The merchant account identifier with which you want to process the transaction.
 * @member {String} merchantAccount
 */
NotifyShopperRequest.prototype['merchantAccount'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} recurringDetailReference
 */
NotifyShopperRequest.prototype['recurringDetailReference'] = undefined;

/**
 * Pre-debit notification reference sent by the merchant. This is a mandatory field
 * @member {String} reference
 */
NotifyShopperRequest.prototype['reference'] = undefined;

/**
 * The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.
 * @member {String} shopperReference
 */
NotifyShopperRequest.prototype['shopperReference'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} storedPaymentMethodId
 */
NotifyShopperRequest.prototype['storedPaymentMethodId'] = undefined;






export default NotifyShopperRequest;

