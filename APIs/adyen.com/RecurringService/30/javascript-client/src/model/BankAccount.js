/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v30/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BankAccount model module.
 * @module model/BankAccount
 * @version 30
 */
class BankAccount {
    /**
     * Constructs a new <code>BankAccount</code>.
     * @alias module:model/BankAccount
     */
    constructor() { 
        
        BankAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BankAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BankAccount} obj Optional instance to populate.
     * @return {module:model/BankAccount} The populated <code>BankAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BankAccount();

            if (data.hasOwnProperty('bankAccountNumber')) {
                obj['bankAccountNumber'] = ApiClient.convertToType(data['bankAccountNumber'], 'String');
            }
            if (data.hasOwnProperty('bankCity')) {
                obj['bankCity'] = ApiClient.convertToType(data['bankCity'], 'String');
            }
            if (data.hasOwnProperty('bankLocationId')) {
                obj['bankLocationId'] = ApiClient.convertToType(data['bankLocationId'], 'String');
            }
            if (data.hasOwnProperty('bankName')) {
                obj['bankName'] = ApiClient.convertToType(data['bankName'], 'String');
            }
            if (data.hasOwnProperty('bic')) {
                obj['bic'] = ApiClient.convertToType(data['bic'], 'String');
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BankAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BankAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bankAccountNumber'] && !(typeof data['bankAccountNumber'] === 'string' || data['bankAccountNumber'] instanceof String)) {
            throw new Error("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got " + data['bankAccountNumber']);
        }
        // ensure the json data is a string
        if (data['bankCity'] && !(typeof data['bankCity'] === 'string' || data['bankCity'] instanceof String)) {
            throw new Error("Expected the field `bankCity` to be a primitive type in the JSON string but got " + data['bankCity']);
        }
        // ensure the json data is a string
        if (data['bankLocationId'] && !(typeof data['bankLocationId'] === 'string' || data['bankLocationId'] instanceof String)) {
            throw new Error("Expected the field `bankLocationId` to be a primitive type in the JSON string but got " + data['bankLocationId']);
        }
        // ensure the json data is a string
        if (data['bankName'] && !(typeof data['bankName'] === 'string' || data['bankName'] instanceof String)) {
            throw new Error("Expected the field `bankName` to be a primitive type in the JSON string but got " + data['bankName']);
        }
        // ensure the json data is a string
        if (data['bic'] && !(typeof data['bic'] === 'string' || data['bic'] instanceof String)) {
            throw new Error("Expected the field `bic` to be a primitive type in the JSON string but got " + data['bic']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['taxId'] && !(typeof data['taxId'] === 'string' || data['taxId'] instanceof String)) {
            throw new Error("Expected the field `taxId` to be a primitive type in the JSON string but got " + data['taxId']);
        }

        return true;
    }


}



/**
 * The bank account number (without separators).
 * @member {String} bankAccountNumber
 */
BankAccount.prototype['bankAccountNumber'] = undefined;

/**
 * The bank city.
 * @member {String} bankCity
 */
BankAccount.prototype['bankCity'] = undefined;

/**
 * The location id of the bank. The field value is `nil` in most cases.
 * @member {String} bankLocationId
 */
BankAccount.prototype['bankLocationId'] = undefined;

/**
 * The name of the bank.
 * @member {String} bankName
 */
BankAccount.prototype['bankName'] = undefined;

/**
 * The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.
 * @member {String} bic
 */
BankAccount.prototype['bic'] = undefined;

/**
 * Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. 'NL').
 * @member {String} countryCode
 */
BankAccount.prototype['countryCode'] = undefined;

/**
 * The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).
 * @member {String} iban
 */
BankAccount.prototype['iban'] = undefined;

/**
 * The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.
 * @member {String} ownerName
 */
BankAccount.prototype['ownerName'] = undefined;

/**
 * The bank account holder's tax ID.
 * @member {String} taxId
 */
BankAccount.prototype['taxId'] = undefined;






export default BankAccount;

