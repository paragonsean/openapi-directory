# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class NotifyShopperRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, billing_date: str=None, billing_sequence_number: str=None, displayed_reference: str=None, merchant_account: str=None, recurring_detail_reference: str=None, reference: str=None, shopper_reference: str=None, stored_payment_method_id: str=None):
        """NotifyShopperRequest - a model defined in OpenAPI

        :param amount: The amount of this NotifyShopperRequest.
        :param billing_date: The billing_date of this NotifyShopperRequest.
        :param billing_sequence_number: The billing_sequence_number of this NotifyShopperRequest.
        :param displayed_reference: The displayed_reference of this NotifyShopperRequest.
        :param merchant_account: The merchant_account of this NotifyShopperRequest.
        :param recurring_detail_reference: The recurring_detail_reference of this NotifyShopperRequest.
        :param reference: The reference of this NotifyShopperRequest.
        :param shopper_reference: The shopper_reference of this NotifyShopperRequest.
        :param stored_payment_method_id: The stored_payment_method_id of this NotifyShopperRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'billing_date': str,
            'billing_sequence_number': str,
            'displayed_reference': str,
            'merchant_account': str,
            'recurring_detail_reference': str,
            'reference': str,
            'shopper_reference': str,
            'stored_payment_method_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'billing_date': 'billingDate',
            'billing_sequence_number': 'billingSequenceNumber',
            'displayed_reference': 'displayedReference',
            'merchant_account': 'merchantAccount',
            'recurring_detail_reference': 'recurringDetailReference',
            'reference': 'reference',
            'shopper_reference': 'shopperReference',
            'stored_payment_method_id': 'storedPaymentMethodId'
        }

        self._amount = amount
        self._billing_date = billing_date
        self._billing_sequence_number = billing_sequence_number
        self._displayed_reference = displayed_reference
        self._merchant_account = merchant_account
        self._recurring_detail_reference = recurring_detail_reference
        self._reference = reference
        self._shopper_reference = shopper_reference
        self._stored_payment_method_id = stored_payment_method_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotifyShopperRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotifyShopperRequest of this NotifyShopperRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this NotifyShopperRequest.

        The amount of the upcoming payment.

        :return: The amount of this NotifyShopperRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NotifyShopperRequest.

        The amount of the upcoming payment.

        :param amount: The amount of this NotifyShopperRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def billing_date(self):
        """Gets the billing_date of this NotifyShopperRequest.

        Date on which the subscription amount will be debited from the shopper. In YYYY-MM-DD format

        :return: The billing_date of this NotifyShopperRequest.
        :rtype: str
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """Sets the billing_date of this NotifyShopperRequest.

        Date on which the subscription amount will be debited from the shopper. In YYYY-MM-DD format

        :param billing_date: The billing_date of this NotifyShopperRequest.
        :type billing_date: str
        """

        self._billing_date = billing_date

    @property
    def billing_sequence_number(self):
        """Gets the billing_sequence_number of this NotifyShopperRequest.

        Sequence of the debit. Depends on Frequency and Billing Attempts Rule.

        :return: The billing_sequence_number of this NotifyShopperRequest.
        :rtype: str
        """
        return self._billing_sequence_number

    @billing_sequence_number.setter
    def billing_sequence_number(self, billing_sequence_number):
        """Sets the billing_sequence_number of this NotifyShopperRequest.

        Sequence of the debit. Depends on Frequency and Billing Attempts Rule.

        :param billing_sequence_number: The billing_sequence_number of this NotifyShopperRequest.
        :type billing_sequence_number: str
        """

        self._billing_sequence_number = billing_sequence_number

    @property
    def displayed_reference(self):
        """Gets the displayed_reference of this NotifyShopperRequest.

        Reference of Pre-debit notification that is displayed to the shopper. Optional field. Maps to reference if missing

        :return: The displayed_reference of this NotifyShopperRequest.
        :rtype: str
        """
        return self._displayed_reference

    @displayed_reference.setter
    def displayed_reference(self, displayed_reference):
        """Sets the displayed_reference of this NotifyShopperRequest.

        Reference of Pre-debit notification that is displayed to the shopper. Optional field. Maps to reference if missing

        :param displayed_reference: The displayed_reference of this NotifyShopperRequest.
        :type displayed_reference: str
        """

        self._displayed_reference = displayed_reference

    @property
    def merchant_account(self):
        """Gets the merchant_account of this NotifyShopperRequest.

        The merchant account identifier with which you want to process the transaction.

        :return: The merchant_account of this NotifyShopperRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this NotifyShopperRequest.

        The merchant account identifier with which you want to process the transaction.

        :param merchant_account: The merchant_account of this NotifyShopperRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this NotifyShopperRequest.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this NotifyShopperRequest.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this NotifyShopperRequest.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this NotifyShopperRequest.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def reference(self):
        """Gets the reference of this NotifyShopperRequest.

        Pre-debit notification reference sent by the merchant. This is a mandatory field

        :return: The reference of this NotifyShopperRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this NotifyShopperRequest.

        Pre-debit notification reference sent by the merchant. This is a mandatory field

        :param reference: The reference of this NotifyShopperRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this NotifyShopperRequest.

        The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.

        :return: The shopper_reference of this NotifyShopperRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this NotifyShopperRequest.

        The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.

        :param shopper_reference: The shopper_reference of this NotifyShopperRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this NotifyShopperRequest.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this NotifyShopperRequest.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this NotifyShopperRequest.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this NotifyShopperRequest.
        :type stored_payment_method_id: str
        """

        self._stored_payment_method_id = stored_payment_method_id
