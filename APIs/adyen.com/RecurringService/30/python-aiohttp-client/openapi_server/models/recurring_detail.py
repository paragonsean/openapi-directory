# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.card import Card
from openapi_server.models.name import Name
from openapi_server.models.token_details import TokenDetails
from openapi_server import util


class RecurringDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, alias: str=None, alias_type: str=None, bank: BankAccount=None, billing_address: Address=None, card: Card=None, contract_types: List[str]=None, creation_date: datetime=None, first_psp_reference: str=None, name: str=None, payment_method_variant: str=None, recurring_detail_reference: str=None, shopper_name: Name=None, social_security_number: str=None, token_details: TokenDetails=None, variant: str=None):
        """RecurringDetail - a model defined in OpenAPI

        :param additional_data: The additional_data of this RecurringDetail.
        :param alias: The alias of this RecurringDetail.
        :param alias_type: The alias_type of this RecurringDetail.
        :param bank: The bank of this RecurringDetail.
        :param billing_address: The billing_address of this RecurringDetail.
        :param card: The card of this RecurringDetail.
        :param contract_types: The contract_types of this RecurringDetail.
        :param creation_date: The creation_date of this RecurringDetail.
        :param first_psp_reference: The first_psp_reference of this RecurringDetail.
        :param name: The name of this RecurringDetail.
        :param payment_method_variant: The payment_method_variant of this RecurringDetail.
        :param recurring_detail_reference: The recurring_detail_reference of this RecurringDetail.
        :param shopper_name: The shopper_name of this RecurringDetail.
        :param social_security_number: The social_security_number of this RecurringDetail.
        :param token_details: The token_details of this RecurringDetail.
        :param variant: The variant of this RecurringDetail.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'alias': str,
            'alias_type': str,
            'bank': BankAccount,
            'billing_address': Address,
            'card': Card,
            'contract_types': List[str],
            'creation_date': datetime,
            'first_psp_reference': str,
            'name': str,
            'payment_method_variant': str,
            'recurring_detail_reference': str,
            'shopper_name': Name,
            'social_security_number': str,
            'token_details': TokenDetails,
            'variant': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'alias': 'alias',
            'alias_type': 'aliasType',
            'bank': 'bank',
            'billing_address': 'billingAddress',
            'card': 'card',
            'contract_types': 'contractTypes',
            'creation_date': 'creationDate',
            'first_psp_reference': 'firstPspReference',
            'name': 'name',
            'payment_method_variant': 'paymentMethodVariant',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_name': 'shopperName',
            'social_security_number': 'socialSecurityNumber',
            'token_details': 'tokenDetails',
            'variant': 'variant'
        }

        self._additional_data = additional_data
        self._alias = alias
        self._alias_type = alias_type
        self._bank = bank
        self._billing_address = billing_address
        self._card = card
        self._contract_types = contract_types
        self._creation_date = creation_date
        self._first_psp_reference = first_psp_reference
        self._name = name
        self._payment_method_variant = payment_method_variant
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_name = shopper_name
        self._social_security_number = social_security_number
        self._token_details = token_details
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RecurringDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RecurringDetail of this RecurringDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this RecurringDetail.

        This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value.

        :return: The additional_data of this RecurringDetail.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this RecurringDetail.

        This field contains additional data, which may be returned in a particular response.  The additionalData object consists of entries, each of which includes the key and value.

        :param additional_data: The additional_data of this RecurringDetail.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def alias(self):
        """Gets the alias of this RecurringDetail.

        The alias of the credit card number.  Applies only to recurring contracts storing credit card details

        :return: The alias of this RecurringDetail.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this RecurringDetail.

        The alias of the credit card number.  Applies only to recurring contracts storing credit card details

        :param alias: The alias of this RecurringDetail.
        :type alias: str
        """

        self._alias = alias

    @property
    def alias_type(self):
        """Gets the alias_type of this RecurringDetail.

        The alias type of the credit card number.  Applies only to recurring contracts storing credit card details.

        :return: The alias_type of this RecurringDetail.
        :rtype: str
        """
        return self._alias_type

    @alias_type.setter
    def alias_type(self, alias_type):
        """Sets the alias_type of this RecurringDetail.

        The alias type of the credit card number.  Applies only to recurring contracts storing credit card details.

        :param alias_type: The alias_type of this RecurringDetail.
        :type alias_type: str
        """

        self._alias_type = alias_type

    @property
    def bank(self):
        """Gets the bank of this RecurringDetail.

        A container for bank account data.

        :return: The bank of this RecurringDetail.
        :rtype: BankAccount
        """
        return self._bank

    @bank.setter
    def bank(self, bank):
        """Sets the bank of this RecurringDetail.

        A container for bank account data.

        :param bank: The bank of this RecurringDetail.
        :type bank: BankAccount
        """

        self._bank = bank

    @property
    def billing_address(self):
        """Gets the billing_address of this RecurringDetail.

        The billing address.

        :return: The billing_address of this RecurringDetail.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this RecurringDetail.

        The billing address.

        :param billing_address: The billing_address of this RecurringDetail.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def card(self):
        """Gets the card of this RecurringDetail.

        A container for card data.

        :return: The card of this RecurringDetail.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this RecurringDetail.

        A container for card data.

        :param card: The card of this RecurringDetail.
        :type card: Card
        """

        self._card = card

    @property
    def contract_types(self):
        """Gets the contract_types of this RecurringDetail.

        Types of recurring contracts.

        :return: The contract_types of this RecurringDetail.
        :rtype: List[str]
        """
        return self._contract_types

    @contract_types.setter
    def contract_types(self, contract_types):
        """Sets the contract_types of this RecurringDetail.

        Types of recurring contracts.

        :param contract_types: The contract_types of this RecurringDetail.
        :type contract_types: List[str]
        """

        self._contract_types = contract_types

    @property
    def creation_date(self):
        """Gets the creation_date of this RecurringDetail.

        The date when the recurring details were created.

        :return: The creation_date of this RecurringDetail.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this RecurringDetail.

        The date when the recurring details were created.

        :param creation_date: The creation_date of this RecurringDetail.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def first_psp_reference(self):
        """Gets the first_psp_reference of this RecurringDetail.

        The `pspReference` of the first recurring payment that created the recurring detail.

        :return: The first_psp_reference of this RecurringDetail.
        :rtype: str
        """
        return self._first_psp_reference

    @first_psp_reference.setter
    def first_psp_reference(self, first_psp_reference):
        """Sets the first_psp_reference of this RecurringDetail.

        The `pspReference` of the first recurring payment that created the recurring detail.

        :param first_psp_reference: The first_psp_reference of this RecurringDetail.
        :type first_psp_reference: str
        """

        self._first_psp_reference = first_psp_reference

    @property
    def name(self):
        """Gets the name of this RecurringDetail.

        An optional descriptive name for this recurring detail.

        :return: The name of this RecurringDetail.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RecurringDetail.

        An optional descriptive name for this recurring detail.

        :param name: The name of this RecurringDetail.
        :type name: str
        """

        self._name = name

    @property
    def payment_method_variant(self):
        """Gets the payment_method_variant of this RecurringDetail.

        The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).

        :return: The payment_method_variant of this RecurringDetail.
        :rtype: str
        """
        return self._payment_method_variant

    @payment_method_variant.setter
    def payment_method_variant(self, payment_method_variant):
        """Sets the payment_method_variant of this RecurringDetail.

        The  type or sub-brand of a payment method used, e.g. Visa Debit, Visa Corporate, etc. For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).

        :param payment_method_variant: The payment_method_variant of this RecurringDetail.
        :type payment_method_variant: str
        """

        self._payment_method_variant = payment_method_variant

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this RecurringDetail.

        The reference that uniquely identifies the recurring detail.

        :return: The recurring_detail_reference of this RecurringDetail.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this RecurringDetail.

        The reference that uniquely identifies the recurring detail.

        :param recurring_detail_reference: The recurring_detail_reference of this RecurringDetail.
        :type recurring_detail_reference: str
        """
        if recurring_detail_reference is None:
            raise ValueError("Invalid value for `recurring_detail_reference`, must not be `None`")

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_name(self):
        """Gets the shopper_name of this RecurringDetail.

        The name of the shopper.

        :return: The shopper_name of this RecurringDetail.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this RecurringDetail.

        The name of the shopper.

        :param shopper_name: The shopper_name of this RecurringDetail.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def social_security_number(self):
        """Gets the social_security_number of this RecurringDetail.

        A shopper's social security number (only in countries where it is legal to collect).

        :return: The social_security_number of this RecurringDetail.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this RecurringDetail.

        A shopper's social security number (only in countries where it is legal to collect).

        :param social_security_number: The social_security_number of this RecurringDetail.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def token_details(self):
        """Gets the token_details of this RecurringDetail.


        :return: The token_details of this RecurringDetail.
        :rtype: TokenDetails
        """
        return self._token_details

    @token_details.setter
    def token_details(self, token_details):
        """Sets the token_details of this RecurringDetail.


        :param token_details: The token_details of this RecurringDetail.
        :type token_details: TokenDetails
        """

        self._token_details = token_details

    @property
    def variant(self):
        """Gets the variant of this RecurringDetail.

        The payment method, such as “mc\", \"visa\", \"ideal\", \"paypal\".

        :return: The variant of this RecurringDetail.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this RecurringDetail.

        The payment method, such as “mc\", \"visa\", \"ideal\", \"paypal\".

        :param variant: The variant of this RecurringDetail.
        :type variant: str
        """
        if variant is None:
            raise ValueError("Invalid value for `variant`, must not be `None`")

        self._variant = variant
