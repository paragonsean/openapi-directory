# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisableRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contract: str=None, merchant_account: str=None, recurring_detail_reference: str=None, shopper_reference: str=None):
        """DisableRequest - a model defined in OpenAPI

        :param contract: The contract of this DisableRequest.
        :param merchant_account: The merchant_account of this DisableRequest.
        :param recurring_detail_reference: The recurring_detail_reference of this DisableRequest.
        :param shopper_reference: The shopper_reference of this DisableRequest.
        """
        self.openapi_types = {
            'contract': str,
            'merchant_account': str,
            'recurring_detail_reference': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'contract': 'contract',
            'merchant_account': 'merchantAccount',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_reference': 'shopperReference'
        }

        self._contract = contract
        self._merchant_account = merchant_account
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisableRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisableRequest of this DisableRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contract(self):
        """Gets the contract of this DisableRequest.

        Specify the contract if you only want to disable a specific use.  This field can be set to one of the following values, or to their combination (comma-separated): * ONECLICK * RECURRING * PAYOUT

        :return: The contract of this DisableRequest.
        :rtype: str
        """
        return self._contract

    @contract.setter
    def contract(self, contract):
        """Sets the contract of this DisableRequest.

        Specify the contract if you only want to disable a specific use.  This field can be set to one of the following values, or to their combination (comma-separated): * ONECLICK * RECURRING * PAYOUT

        :param contract: The contract of this DisableRequest.
        :type contract: str
        """

        self._contract = contract

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DisableRequest.

        The merchant account identifier with which you want to process the transaction.

        :return: The merchant_account of this DisableRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DisableRequest.

        The merchant account identifier with which you want to process the transaction.

        :param merchant_account: The merchant_account of this DisableRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this DisableRequest.

        The ID that uniquely identifies the recurring detail reference.  If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.

        :return: The recurring_detail_reference of this DisableRequest.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this DisableRequest.

        The ID that uniquely identifies the recurring detail reference.  If it is not provided, the whole recurring contract of the `shopperReference` will be disabled, which includes all recurring details.

        :param recurring_detail_reference: The recurring_detail_reference of this DisableRequest.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this DisableRequest.

        The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.

        :return: The shopper_reference of this DisableRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this DisableRequest.

        The ID that uniquely identifies the shopper.  This `shopperReference` must be the same as the `shopperReference` used in the initial payment.

        :param shopper_reference: The shopper_reference of this DisableRequest.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference
