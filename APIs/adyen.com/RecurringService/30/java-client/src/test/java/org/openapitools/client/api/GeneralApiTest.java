/*
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v30/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DisableRequest;
import org.openapitools.client.model.DisableResult;
import org.openapitools.client.model.NotifyShopperRequest;
import org.openapitools.client.model.NotifyShopperResult;
import org.openapitools.client.model.RecurringDetailsRequest;
import org.openapitools.client.model.RecurringDetailsResult;
import org.openapitools.client.model.ScheduleAccountUpdaterRequest;
import org.openapitools.client.model.ScheduleAccountUpdaterResult;
import org.openapitools.client.model.ServiceError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneralApi
 */
@Disabled
public class GeneralApiTest {

    private final GeneralApi api = new GeneralApi();

    /**
     * Disable stored payment details
     *
     * Disables stored payment details to stop charging a shopper with this particular recurring detail ID.  For more information, refer to [Disable stored details](https://docs.adyen.com/classic-integration/recurring-payments/disable-stored-details/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDisableTest() throws ApiException {
        DisableRequest disableRequest = null;
        DisableResult response = api.postDisable(disableRequest);
        // TODO: test validations
    }

    /**
     * Get stored payment details
     *
     * Lists the stored payment details for a shopper, if there are any available. The recurring detail ID can be used with a regular authorisation request to charge the shopper. A summary of the payment detail is returned for presentation to the shopper.  For more information, refer to [Retrieve stored details](https://docs.adyen.com/classic-integration/recurring-payments/retrieve-stored-details/).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postListRecurringDetailsTest() throws ApiException {
        RecurringDetailsRequest recurringDetailsRequest = null;
        RecurringDetailsResult response = api.postListRecurringDetails(recurringDetailsRequest);
        // TODO: test validations
    }

    /**
     * Ask issuer to notify the shopper
     *
     * Sends a request to the issuer so they can inform the shopper about the upcoming recurring payment. This endpoint is used only for local acquiring in India. For more information, refer to [Recurring card payments in India](https://docs.adyen.com/payment-methods/cards/cards-recurring-india).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postNotifyShopperTest() throws ApiException {
        NotifyShopperRequest notifyShopperRequest = null;
        NotifyShopperResult response = api.postNotifyShopper(notifyShopperRequest);
        // TODO: test validations
    }

    /**
     * Schedule running the Account Updater
     *
     * When making the API call, you can submit either the credit card information, or the recurring detail reference and the shopper reference: * If the card information is provided, all the sub-fields for &#x60;card&#x60; are mandatory. * If the recurring detail reference is provided, the fields for &#x60;shopperReference&#x60; and &#x60;selectedRecurringDetailReference&#x60; are mandatory.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postScheduleAccountUpdaterTest() throws ApiException {
        ScheduleAccountUpdaterRequest scheduleAccountUpdaterRequest = null;
        ScheduleAccountUpdaterResult response = api.postScheduleAccountUpdater(scheduleAccountUpdaterRequest);
        // TODO: test validations
    }

}
