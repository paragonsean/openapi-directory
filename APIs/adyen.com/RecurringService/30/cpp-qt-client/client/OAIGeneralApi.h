/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v30/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisableRequest.h"
#include "OAIDisableResult.h"
#include "OAINotifyShopperRequest.h"
#include "OAINotifyShopperResult.h"
#include "OAIRecurringDetailsRequest.h"
#include "OAIRecurringDetailsResult.h"
#include "OAIScheduleAccountUpdaterRequest.h"
#include "OAIScheduleAccountUpdaterResult.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_disable_request OAIDisableRequest [optional]
    */
    virtual void postDisable(const ::OpenAPI::OptionalParam<OAIDisableRequest> &oai_disable_request = ::OpenAPI::OptionalParam<OAIDisableRequest>());

    /**
    * @param[in]  oai_recurring_details_request OAIRecurringDetailsRequest [optional]
    */
    virtual void postListRecurringDetails(const ::OpenAPI::OptionalParam<OAIRecurringDetailsRequest> &oai_recurring_details_request = ::OpenAPI::OptionalParam<OAIRecurringDetailsRequest>());

    /**
    * @param[in]  oai_notify_shopper_request OAINotifyShopperRequest [optional]
    */
    virtual void postNotifyShopper(const ::OpenAPI::OptionalParam<OAINotifyShopperRequest> &oai_notify_shopper_request = ::OpenAPI::OptionalParam<OAINotifyShopperRequest>());

    /**
    * @param[in]  oai_schedule_account_updater_request OAIScheduleAccountUpdaterRequest [optional]
    */
    virtual void postScheduleAccountUpdater(const ::OpenAPI::OptionalParam<OAIScheduleAccountUpdaterRequest> &oai_schedule_account_updater_request = ::OpenAPI::OptionalParam<OAIScheduleAccountUpdaterRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postDisableCallback(OAIHttpRequestWorker *worker);
    void postListRecurringDetailsCallback(OAIHttpRequestWorker *worker);
    void postNotifyShopperCallback(OAIHttpRequestWorker *worker);
    void postScheduleAccountUpdaterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postDisableSignal(OAIDisableResult summary);
    void postListRecurringDetailsSignal(OAIRecurringDetailsResult summary);
    void postNotifyShopperSignal(OAINotifyShopperResult summary);
    void postScheduleAccountUpdaterSignal(OAIScheduleAccountUpdaterResult summary);


    void postDisableSignalFull(OAIHttpRequestWorker *worker, OAIDisableResult summary);
    void postListRecurringDetailsSignalFull(OAIHttpRequestWorker *worker, OAIRecurringDetailsResult summary);
    void postNotifyShopperSignalFull(OAIHttpRequestWorker *worker, OAINotifyShopperResult summary);
    void postScheduleAccountUpdaterSignalFull(OAIHttpRequestWorker *worker, OAIScheduleAccountUpdaterResult summary);

    Q_DECL_DEPRECATED_X("Use postDisableSignalError() instead")
    void postDisableSignalE(OAIDisableResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDisableSignalError(OAIDisableResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postListRecurringDetailsSignalError() instead")
    void postListRecurringDetailsSignalE(OAIRecurringDetailsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postListRecurringDetailsSignalError(OAIRecurringDetailsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotifyShopperSignalError() instead")
    void postNotifyShopperSignalE(OAINotifyShopperResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotifyShopperSignalError(OAINotifyShopperResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScheduleAccountUpdaterSignalError() instead")
    void postScheduleAccountUpdaterSignalE(OAIScheduleAccountUpdaterResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postScheduleAccountUpdaterSignalError(OAIScheduleAccountUpdaterResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postDisableSignalErrorFull() instead")
    void postDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postListRecurringDetailsSignalErrorFull() instead")
    void postListRecurringDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postListRecurringDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postNotifyShopperSignalErrorFull() instead")
    void postNotifyShopperSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postNotifyShopperSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postScheduleAccountUpdaterSignalErrorFull() instead")
    void postScheduleAccountUpdaterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postScheduleAccountUpdaterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
