/**
 * Adyen Recurring API
 * The Recurring APIs allow you to manage and remove your tokens or saved payment details. Tokens should be created with validation during a payment request.  For more information, refer to our [Tokenization documentation](https://docs.adyen.com/online-payments/tokenization). ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Recurring API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Recurring/v30/disable ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Recurring/v30/disable ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITokenDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITokenDetails::OAITokenDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITokenDetails::OAITokenDetails() {
    this->initializeModel();
}

OAITokenDetails::~OAITokenDetails() {}

void OAITokenDetails::initializeModel() {

    m_token_data_isSet = false;
    m_token_data_isValid = false;

    m_token_data_type_isSet = false;
    m_token_data_type_isValid = false;
}

void OAITokenDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITokenDetails::fromJsonObject(QJsonObject json) {

    m_token_data_isValid = ::OpenAPI::fromJsonValue(m_token_data, json[QString("tokenData")]);
    m_token_data_isSet = !json[QString("tokenData")].isNull() && m_token_data_isValid;

    m_token_data_type_isValid = ::OpenAPI::fromJsonValue(m_token_data_type, json[QString("tokenDataType")]);
    m_token_data_type_isSet = !json[QString("tokenDataType")].isNull() && m_token_data_type_isValid;
}

QString OAITokenDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITokenDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_token_data.size() > 0) {
        obj.insert(QString("tokenData"), ::OpenAPI::toJsonValue(m_token_data));
    }
    if (m_token_data_type_isSet) {
        obj.insert(QString("tokenDataType"), ::OpenAPI::toJsonValue(m_token_data_type));
    }
    return obj;
}

QMap<QString, QString> OAITokenDetails::getTokenData() const {
    return m_token_data;
}
void OAITokenDetails::setTokenData(const QMap<QString, QString> &token_data) {
    m_token_data = token_data;
    m_token_data_isSet = true;
}

bool OAITokenDetails::is_token_data_Set() const{
    return m_token_data_isSet;
}

bool OAITokenDetails::is_token_data_Valid() const{
    return m_token_data_isValid;
}

QString OAITokenDetails::getTokenDataType() const {
    return m_token_data_type;
}
void OAITokenDetails::setTokenDataType(const QString &token_data_type) {
    m_token_data_type = token_data_type;
    m_token_data_type_isSet = true;
}

bool OAITokenDetails::is_token_data_type_Set() const{
    return m_token_data_type_isSet;
}

bool OAITokenDetails::is_token_data_type_Valid() const{
    return m_token_data_type_isValid;
}

bool OAITokenDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_token_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITokenDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
