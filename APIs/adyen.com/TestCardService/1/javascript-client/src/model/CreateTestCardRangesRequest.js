/**
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TestCardRange from './TestCardRange';

/**
 * The CreateTestCardRangesRequest model module.
 * @module model/CreateTestCardRangesRequest
 * @version 1
 */
class CreateTestCardRangesRequest {
    /**
     * Constructs a new <code>CreateTestCardRangesRequest</code>.
     * @alias module:model/CreateTestCardRangesRequest
     * @param accountCode {String} The code of the account, for which the test card ranges should be created.
     * @param accountTypeCode {String} The type of the account, for which the test card ranges should be created.  Permitted values: * Company * MerchantAccount > These values are case-sensitive.
     * @param testCardRanges {Array.<module:model/TestCardRange>} A list of test card ranges to create.
     */
    constructor(accountCode, accountTypeCode, testCardRanges) { 
        
        CreateTestCardRangesRequest.initialize(this, accountCode, accountTypeCode, testCardRanges);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountCode, accountTypeCode, testCardRanges) { 
        obj['accountCode'] = accountCode;
        obj['accountTypeCode'] = accountTypeCode;
        obj['testCardRanges'] = testCardRanges;
    }

    /**
     * Constructs a <code>CreateTestCardRangesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateTestCardRangesRequest} obj Optional instance to populate.
     * @return {module:model/CreateTestCardRangesRequest} The populated <code>CreateTestCardRangesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateTestCardRangesRequest();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('accountTypeCode')) {
                obj['accountTypeCode'] = ApiClient.convertToType(data['accountTypeCode'], 'String');
            }
            if (data.hasOwnProperty('testCardRanges')) {
                obj['testCardRanges'] = ApiClient.convertToType(data['testCardRanges'], [TestCardRange]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateTestCardRangesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateTestCardRangesRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateTestCardRangesRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['accountTypeCode'] && !(typeof data['accountTypeCode'] === 'string' || data['accountTypeCode'] instanceof String)) {
            throw new Error("Expected the field `accountTypeCode` to be a primitive type in the JSON string but got " + data['accountTypeCode']);
        }
        if (data['testCardRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['testCardRanges'])) {
                throw new Error("Expected the field `testCardRanges` to be an array in the JSON data but got " + data['testCardRanges']);
            }
            // validate the optional field `testCardRanges` (array)
            for (const item of data['testCardRanges']) {
                TestCardRange.validateJSON(item);
            };
        }

        return true;
    }


}

CreateTestCardRangesRequest.RequiredProperties = ["accountCode", "accountTypeCode", "testCardRanges"];

/**
 * The code of the account, for which the test card ranges should be created.
 * @member {String} accountCode
 */
CreateTestCardRangesRequest.prototype['accountCode'] = undefined;

/**
 * The type of the account, for which the test card ranges should be created.  Permitted values: * Company * MerchantAccount > These values are case-sensitive.
 * @member {String} accountTypeCode
 */
CreateTestCardRangesRequest.prototype['accountTypeCode'] = undefined;

/**
 * A list of test card ranges to create.
 * @member {Array.<module:model/TestCardRange>} testCardRanges
 */
CreateTestCardRangesRequest.prototype['testCardRanges'] = undefined;






export default CreateTestCardRangesRequest;

