/**
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AvsAddress from './AvsAddress';

/**
 * The TestCardRange model module.
 * @module model/TestCardRange
 * @version 1
 */
class TestCardRange {
    /**
     * Constructs a new <code>TestCardRange</code>.
     * @alias module:model/TestCardRange
     * @param cardHolderName {String} The name of the card holder, as it appears on the card, for the test card range.
     * @param expiryMonth {module:model/TestCardRange.ExpiryMonthEnum} Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER
     * @param expiryYear {Number} Expiry year for the test card range.  Example: 2020
     * @param rangeEnd {String} The last test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 4321
     * @param rangeStart {String} The first test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 1234
     */
    constructor(cardHolderName, expiryMonth, expiryYear, rangeEnd, rangeStart) { 
        
        TestCardRange.initialize(this, cardHolderName, expiryMonth, expiryYear, rangeEnd, rangeStart);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cardHolderName, expiryMonth, expiryYear, rangeEnd, rangeStart) { 
        obj['cardHolderName'] = cardHolderName;
        obj['expiryMonth'] = expiryMonth;
        obj['expiryYear'] = expiryYear;
        obj['rangeEnd'] = rangeEnd;
        obj['rangeStart'] = rangeStart;
    }

    /**
     * Constructs a <code>TestCardRange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TestCardRange} obj Optional instance to populate.
     * @return {module:model/TestCardRange} The populated <code>TestCardRange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TestCardRange();

            if (data.hasOwnProperty('address')) {
                obj['address'] = AvsAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('cardHolderName')) {
                obj['cardHolderName'] = ApiClient.convertToType(data['cardHolderName'], 'String');
            }
            if (data.hasOwnProperty('cvc')) {
                obj['cvc'] = ApiClient.convertToType(data['cvc'], 'String');
            }
            if (data.hasOwnProperty('expiryMonth')) {
                obj['expiryMonth'] = ApiClient.convertToType(data['expiryMonth'], 'String');
            }
            if (data.hasOwnProperty('expiryYear')) {
                obj['expiryYear'] = ApiClient.convertToType(data['expiryYear'], 'Number');
            }
            if (data.hasOwnProperty('rangeEnd')) {
                obj['rangeEnd'] = ApiClient.convertToType(data['rangeEnd'], 'String');
            }
            if (data.hasOwnProperty('rangeStart')) {
                obj['rangeStart'] = ApiClient.convertToType(data['rangeStart'], 'String');
            }
            if (data.hasOwnProperty('threeDDirectoryServerResponse')) {
                obj['threeDDirectoryServerResponse'] = ApiClient.convertToType(data['threeDDirectoryServerResponse'], 'String');
            }
            if (data.hasOwnProperty('threeDPassword')) {
                obj['threeDPassword'] = ApiClient.convertToType(data['threeDPassword'], 'String');
            }
            if (data.hasOwnProperty('threeDUsername')) {
                obj['threeDUsername'] = ApiClient.convertToType(data['threeDUsername'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TestCardRange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TestCardRange</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TestCardRange.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          AvsAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['cardHolderName'] && !(typeof data['cardHolderName'] === 'string' || data['cardHolderName'] instanceof String)) {
            throw new Error("Expected the field `cardHolderName` to be a primitive type in the JSON string but got " + data['cardHolderName']);
        }
        // ensure the json data is a string
        if (data['cvc'] && !(typeof data['cvc'] === 'string' || data['cvc'] instanceof String)) {
            throw new Error("Expected the field `cvc` to be a primitive type in the JSON string but got " + data['cvc']);
        }
        // ensure the json data is a string
        if (data['expiryMonth'] && !(typeof data['expiryMonth'] === 'string' || data['expiryMonth'] instanceof String)) {
            throw new Error("Expected the field `expiryMonth` to be a primitive type in the JSON string but got " + data['expiryMonth']);
        }
        // ensure the json data is a string
        if (data['rangeEnd'] && !(typeof data['rangeEnd'] === 'string' || data['rangeEnd'] instanceof String)) {
            throw new Error("Expected the field `rangeEnd` to be a primitive type in the JSON string but got " + data['rangeEnd']);
        }
        // ensure the json data is a string
        if (data['rangeStart'] && !(typeof data['rangeStart'] === 'string' || data['rangeStart'] instanceof String)) {
            throw new Error("Expected the field `rangeStart` to be a primitive type in the JSON string but got " + data['rangeStart']);
        }
        // ensure the json data is a string
        if (data['threeDDirectoryServerResponse'] && !(typeof data['threeDDirectoryServerResponse'] === 'string' || data['threeDDirectoryServerResponse'] instanceof String)) {
            throw new Error("Expected the field `threeDDirectoryServerResponse` to be a primitive type in the JSON string but got " + data['threeDDirectoryServerResponse']);
        }
        // ensure the json data is a string
        if (data['threeDPassword'] && !(typeof data['threeDPassword'] === 'string' || data['threeDPassword'] instanceof String)) {
            throw new Error("Expected the field `threeDPassword` to be a primitive type in the JSON string but got " + data['threeDPassword']);
        }
        // ensure the json data is a string
        if (data['threeDUsername'] && !(typeof data['threeDUsername'] === 'string' || data['threeDUsername'] instanceof String)) {
            throw new Error("Expected the field `threeDUsername` to be a primitive type in the JSON string but got " + data['threeDUsername']);
        }

        return true;
    }


}

TestCardRange.RequiredProperties = ["cardHolderName", "expiryMonth", "expiryYear", "rangeEnd", "rangeStart"];

/**
 * Contains the billing address of the card holder. The address details need to be AVS-compliant, which means that you need to provide at least street address.
 * @member {module:model/AvsAddress} address
 */
TestCardRange.prototype['address'] = undefined;

/**
 * The name of the card holder, as it appears on the card, for the test card range.
 * @member {String} cardHolderName
 */
TestCardRange.prototype['cardHolderName'] = undefined;

/**
 * The test card range security code.  Example: 123
 * @member {String} cvc
 */
TestCardRange.prototype['cvc'] = undefined;

/**
 * Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER
 * @member {module:model/TestCardRange.ExpiryMonthEnum} expiryMonth
 */
TestCardRange.prototype['expiryMonth'] = undefined;

/**
 * Expiry year for the test card range.  Example: 2020
 * @member {Number} expiryYear
 */
TestCardRange.prototype['expiryYear'] = undefined;

/**
 * The last test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 4321
 * @member {String} rangeEnd
 */
TestCardRange.prototype['rangeEnd'] = undefined;

/**
 * The first test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 1234
 * @member {String} rangeStart
 */
TestCardRange.prototype['rangeStart'] = undefined;

/**
 * 3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:  * Y (Authentication available) * N (Card holder not enrolled/not participating) * U (Unable to authenticate)
 * @member {module:model/TestCardRange.ThreeDDirectoryServerResponseEnum} threeDDirectoryServerResponse
 */
TestCardRange.prototype['threeDDirectoryServerResponse'] = undefined;

/**
 * The password used for 3D Secure authentication.
 * @member {String} threeDPassword
 */
TestCardRange.prototype['threeDPassword'] = undefined;

/**
 * The username used for 3D Secure authentication.
 * @member {String} threeDUsername
 */
TestCardRange.prototype['threeDUsername'] = undefined;





/**
 * Allowed values for the <code>expiryMonth</code> property.
 * @enum {String}
 * @readonly
 */
TestCardRange['ExpiryMonthEnum'] = {

    /**
     * value: "APRIL"
     * @const
     */
    "APRIL": "APRIL",

    /**
     * value: "AUGUST"
     * @const
     */
    "AUGUST": "AUGUST",

    /**
     * value: "DECEMBER"
     * @const
     */
    "DECEMBER": "DECEMBER",

    /**
     * value: "FEBRUARY"
     * @const
     */
    "FEBRUARY": "FEBRUARY",

    /**
     * value: "JANUARY"
     * @const
     */
    "JANUARY": "JANUARY",

    /**
     * value: "JULY"
     * @const
     */
    "JULY": "JULY",

    /**
     * value: "JUNE"
     * @const
     */
    "JUNE": "JUNE",

    /**
     * value: "MARCH"
     * @const
     */
    "MARCH": "MARCH",

    /**
     * value: "MAY"
     * @const
     */
    "MAY": "MAY",

    /**
     * value: "NOVEMBER"
     * @const
     */
    "NOVEMBER": "NOVEMBER",

    /**
     * value: "OCTOBER"
     * @const
     */
    "OCTOBER": "OCTOBER",

    /**
     * value: "SEPTEMBER"
     * @const
     */
    "SEPTEMBER": "SEPTEMBER"
};


/**
 * Allowed values for the <code>threeDDirectoryServerResponse</code> property.
 * @enum {String}
 * @readonly
 */
TestCardRange['ThreeDDirectoryServerResponseEnum'] = {

    /**
     * value: "N"
     * @const
     */
    "N": "N",

    /**
     * value: "U"
     * @const
     */
    "U": "U",

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y"
};



export default TestCardRange;

