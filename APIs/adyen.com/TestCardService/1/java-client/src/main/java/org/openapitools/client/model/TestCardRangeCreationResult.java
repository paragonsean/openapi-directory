/*
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestCardRangeCreationResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:12.099979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCardRangeCreationResult {
  public static final String SERIALIZED_NAME_CARD_NUMBER_RANGE_END = "cardNumberRangeEnd";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_RANGE_END)
  private String cardNumberRangeEnd;

  public static final String SERIALIZED_NAME_CARD_NUMBER_RANGE_START = "cardNumberRangeStart";
  @SerializedName(SERIALIZED_NAME_CARD_NUMBER_RANGE_START)
  private String cardNumberRangeStart;

  /**
   * Notification message. It informs about the outcome of the operation. Possible values: * CREATED * ALREADY_EXISTS * ERROR
   */
  @JsonAdapter(CreationResultCodeEnum.Adapter.class)
  public enum CreationResultCodeEnum {
    ALREADY_EXISTS("ALREADY_EXISTS"),
    
    CREATED("CREATED"),
    
    ERROR("ERROR");

    private String value;

    CreationResultCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreationResultCodeEnum fromValue(String value) {
      for (CreationResultCodeEnum b : CreationResultCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreationResultCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreationResultCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreationResultCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreationResultCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreationResultCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATION_RESULT_CODE = "creationResultCode";
  @SerializedName(SERIALIZED_NAME_CREATION_RESULT_CODE)
  private CreationResultCodeEnum creationResultCode;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public TestCardRangeCreationResult() {
  }

  public TestCardRangeCreationResult cardNumberRangeEnd(String cardNumberRangeEnd) {
    this.cardNumberRangeEnd = cardNumberRangeEnd;
    return this;
  }

  /**
   * The last test card number in the generated test card range.  Example: 5432 1234 1234 4321
   * @return cardNumberRangeEnd
   */
  @javax.annotation.Nonnull
  public String getCardNumberRangeEnd() {
    return cardNumberRangeEnd;
  }

  public void setCardNumberRangeEnd(String cardNumberRangeEnd) {
    this.cardNumberRangeEnd = cardNumberRangeEnd;
  }


  public TestCardRangeCreationResult cardNumberRangeStart(String cardNumberRangeStart) {
    this.cardNumberRangeStart = cardNumberRangeStart;
    return this;
  }

  /**
   * The first test card number in the generated test card range.  Example: 5432 1234 1234 1234
   * @return cardNumberRangeStart
   */
  @javax.annotation.Nonnull
  public String getCardNumberRangeStart() {
    return cardNumberRangeStart;
  }

  public void setCardNumberRangeStart(String cardNumberRangeStart) {
    this.cardNumberRangeStart = cardNumberRangeStart;
  }


  public TestCardRangeCreationResult creationResultCode(CreationResultCodeEnum creationResultCode) {
    this.creationResultCode = creationResultCode;
    return this;
  }

  /**
   * Notification message. It informs about the outcome of the operation. Possible values: * CREATED * ALREADY_EXISTS * ERROR
   * @return creationResultCode
   */
  @javax.annotation.Nonnull
  public CreationResultCodeEnum getCreationResultCode() {
    return creationResultCode;
  }

  public void setCreationResultCode(CreationResultCodeEnum creationResultCode) {
    this.creationResultCode = creationResultCode;
  }


  public TestCardRangeCreationResult message(String message) {
    this.message = message;
    return this;
  }

  /**
   * An optional information message about the result.
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCardRangeCreationResult testCardRangeCreationResult = (TestCardRangeCreationResult) o;
    return Objects.equals(this.cardNumberRangeEnd, testCardRangeCreationResult.cardNumberRangeEnd) &&
        Objects.equals(this.cardNumberRangeStart, testCardRangeCreationResult.cardNumberRangeStart) &&
        Objects.equals(this.creationResultCode, testCardRangeCreationResult.creationResultCode) &&
        Objects.equals(this.message, testCardRangeCreationResult.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardNumberRangeEnd, cardNumberRangeStart, creationResultCode, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCardRangeCreationResult {\n");
    sb.append("    cardNumberRangeEnd: ").append(toIndentedString(cardNumberRangeEnd)).append("\n");
    sb.append("    cardNumberRangeStart: ").append(toIndentedString(cardNumberRangeStart)).append("\n");
    sb.append("    creationResultCode: ").append(toIndentedString(creationResultCode)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cardNumberRangeEnd");
    openapiFields.add("cardNumberRangeStart");
    openapiFields.add("creationResultCode");
    openapiFields.add("message");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cardNumberRangeEnd");
    openapiRequiredFields.add("cardNumberRangeStart");
    openapiRequiredFields.add("creationResultCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCardRangeCreationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCardRangeCreationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCardRangeCreationResult is not found in the empty JSON string", TestCardRangeCreationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCardRangeCreationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCardRangeCreationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCardRangeCreationResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("cardNumberRangeEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumberRangeEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumberRangeEnd").toString()));
      }
      if (!jsonObj.get("cardNumberRangeStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardNumberRangeStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardNumberRangeStart").toString()));
      }
      if (!jsonObj.get("creationResultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationResultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationResultCode").toString()));
      }
      // validate the required field `creationResultCode`
      CreationResultCodeEnum.validateJsonElement(jsonObj.get("creationResultCode"));
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCardRangeCreationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCardRangeCreationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCardRangeCreationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCardRangeCreationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCardRangeCreationResult>() {
           @Override
           public void write(JsonWriter out, TestCardRangeCreationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCardRangeCreationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCardRangeCreationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCardRangeCreationResult
   * @throws IOException if the JSON string is invalid with respect to TestCardRangeCreationResult
   */
  public static TestCardRangeCreationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCardRangeCreationResult.class);
  }

  /**
   * Convert an instance of TestCardRangeCreationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

