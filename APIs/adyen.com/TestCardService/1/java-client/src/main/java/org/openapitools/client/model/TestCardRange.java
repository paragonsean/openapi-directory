/*
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AvsAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TestCardRange
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:12.099979-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TestCardRange {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AvsAddress address;

  public static final String SERIALIZED_NAME_CARD_HOLDER_NAME = "cardHolderName";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER_NAME)
  private String cardHolderName;

  public static final String SERIALIZED_NAME_CVC = "cvc";
  @SerializedName(SERIALIZED_NAME_CVC)
  private String cvc;

  /**
   * Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER
   */
  @JsonAdapter(ExpiryMonthEnum.Adapter.class)
  public enum ExpiryMonthEnum {
    APRIL("APRIL"),
    
    AUGUST("AUGUST"),
    
    DECEMBER("DECEMBER"),
    
    FEBRUARY("FEBRUARY"),
    
    JANUARY("JANUARY"),
    
    JULY("JULY"),
    
    JUNE("JUNE"),
    
    MARCH("MARCH"),
    
    MAY("MAY"),
    
    NOVEMBER("NOVEMBER"),
    
    OCTOBER("OCTOBER"),
    
    SEPTEMBER("SEPTEMBER");

    private String value;

    ExpiryMonthEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExpiryMonthEnum fromValue(String value) {
      for (ExpiryMonthEnum b : ExpiryMonthEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExpiryMonthEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExpiryMonthEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExpiryMonthEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExpiryMonthEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExpiryMonthEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXPIRY_MONTH = "expiryMonth";
  @SerializedName(SERIALIZED_NAME_EXPIRY_MONTH)
  private ExpiryMonthEnum expiryMonth;

  public static final String SERIALIZED_NAME_EXPIRY_YEAR = "expiryYear";
  @SerializedName(SERIALIZED_NAME_EXPIRY_YEAR)
  private Integer expiryYear;

  public static final String SERIALIZED_NAME_RANGE_END = "rangeEnd";
  @SerializedName(SERIALIZED_NAME_RANGE_END)
  private String rangeEnd;

  public static final String SERIALIZED_NAME_RANGE_START = "rangeStart";
  @SerializedName(SERIALIZED_NAME_RANGE_START)
  private String rangeStart;

  /**
   * 3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:  * Y (Authentication available) * N (Card holder not enrolled/not participating) * U (Unable to authenticate)
   */
  @JsonAdapter(ThreeDDirectoryServerResponseEnum.Adapter.class)
  public enum ThreeDDirectoryServerResponseEnum {
    N("N"),
    
    U("U"),
    
    Y("Y");

    private String value;

    ThreeDDirectoryServerResponseEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreeDDirectoryServerResponseEnum fromValue(String value) {
      for (ThreeDDirectoryServerResponseEnum b : ThreeDDirectoryServerResponseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreeDDirectoryServerResponseEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreeDDirectoryServerResponseEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreeDDirectoryServerResponseEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreeDDirectoryServerResponseEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThreeDDirectoryServerResponseEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THREE_D_DIRECTORY_SERVER_RESPONSE = "threeDDirectoryServerResponse";
  @SerializedName(SERIALIZED_NAME_THREE_D_DIRECTORY_SERVER_RESPONSE)
  private ThreeDDirectoryServerResponseEnum threeDDirectoryServerResponse;

  public static final String SERIALIZED_NAME_THREE_D_PASSWORD = "threeDPassword";
  @SerializedName(SERIALIZED_NAME_THREE_D_PASSWORD)
  private String threeDPassword;

  public static final String SERIALIZED_NAME_THREE_D_USERNAME = "threeDUsername";
  @SerializedName(SERIALIZED_NAME_THREE_D_USERNAME)
  private String threeDUsername;

  public TestCardRange() {
  }

  public TestCardRange address(AvsAddress address) {
    this.address = address;
    return this;
  }

  /**
   * Contains the billing address of the card holder. The address details need to be AVS-compliant, which means that you need to provide at least street address.
   * @return address
   */
  @javax.annotation.Nullable
  public AvsAddress getAddress() {
    return address;
  }

  public void setAddress(AvsAddress address) {
    this.address = address;
  }


  public TestCardRange cardHolderName(String cardHolderName) {
    this.cardHolderName = cardHolderName;
    return this;
  }

  /**
   * The name of the card holder, as it appears on the card, for the test card range.
   * @return cardHolderName
   */
  @javax.annotation.Nonnull
  public String getCardHolderName() {
    return cardHolderName;
  }

  public void setCardHolderName(String cardHolderName) {
    this.cardHolderName = cardHolderName;
  }


  public TestCardRange cvc(String cvc) {
    this.cvc = cvc;
    return this;
  }

  /**
   * The test card range security code.  Example: 123
   * @return cvc
   */
  @javax.annotation.Nullable
  public String getCvc() {
    return cvc;
  }

  public void setCvc(String cvc) {
    this.cvc = cvc;
  }


  public TestCardRange expiryMonth(ExpiryMonthEnum expiryMonth) {
    this.expiryMonth = expiryMonth;
    return this;
  }

  /**
   * Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER
   * @return expiryMonth
   */
  @javax.annotation.Nonnull
  public ExpiryMonthEnum getExpiryMonth() {
    return expiryMonth;
  }

  public void setExpiryMonth(ExpiryMonthEnum expiryMonth) {
    this.expiryMonth = expiryMonth;
  }


  public TestCardRange expiryYear(Integer expiryYear) {
    this.expiryYear = expiryYear;
    return this;
  }

  /**
   * Expiry year for the test card range.  Example: 2020
   * @return expiryYear
   */
  @javax.annotation.Nonnull
  public Integer getExpiryYear() {
    return expiryYear;
  }

  public void setExpiryYear(Integer expiryYear) {
    this.expiryYear = expiryYear;
  }


  public TestCardRange rangeEnd(String rangeEnd) {
    this.rangeEnd = rangeEnd;
    return this;
  }

  /**
   * The last test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 4321
   * @return rangeEnd
   */
  @javax.annotation.Nonnull
  public String getRangeEnd() {
    return rangeEnd;
  }

  public void setRangeEnd(String rangeEnd) {
    this.rangeEnd = rangeEnd;
  }


  public TestCardRange rangeStart(String rangeStart) {
    this.rangeStart = rangeStart;
    return this;
  }

  /**
   * The first test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 1234
   * @return rangeStart
   */
  @javax.annotation.Nonnull
  public String getRangeStart() {
    return rangeStart;
  }

  public void setRangeStart(String rangeStart) {
    this.rangeStart = rangeStart;
  }


  public TestCardRange threeDDirectoryServerResponse(ThreeDDirectoryServerResponseEnum threeDDirectoryServerResponse) {
    this.threeDDirectoryServerResponse = threeDDirectoryServerResponse;
    return this;
  }

  /**
   * 3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:  * Y (Authentication available) * N (Card holder not enrolled/not participating) * U (Unable to authenticate)
   * @return threeDDirectoryServerResponse
   */
  @javax.annotation.Nullable
  public ThreeDDirectoryServerResponseEnum getThreeDDirectoryServerResponse() {
    return threeDDirectoryServerResponse;
  }

  public void setThreeDDirectoryServerResponse(ThreeDDirectoryServerResponseEnum threeDDirectoryServerResponse) {
    this.threeDDirectoryServerResponse = threeDDirectoryServerResponse;
  }


  public TestCardRange threeDPassword(String threeDPassword) {
    this.threeDPassword = threeDPassword;
    return this;
  }

  /**
   * The password used for 3D Secure authentication.
   * @return threeDPassword
   */
  @javax.annotation.Nullable
  public String getThreeDPassword() {
    return threeDPassword;
  }

  public void setThreeDPassword(String threeDPassword) {
    this.threeDPassword = threeDPassword;
  }


  public TestCardRange threeDUsername(String threeDUsername) {
    this.threeDUsername = threeDUsername;
    return this;
  }

  /**
   * The username used for 3D Secure authentication.
   * @return threeDUsername
   */
  @javax.annotation.Nullable
  public String getThreeDUsername() {
    return threeDUsername;
  }

  public void setThreeDUsername(String threeDUsername) {
    this.threeDUsername = threeDUsername;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCardRange testCardRange = (TestCardRange) o;
    return Objects.equals(this.address, testCardRange.address) &&
        Objects.equals(this.cardHolderName, testCardRange.cardHolderName) &&
        Objects.equals(this.cvc, testCardRange.cvc) &&
        Objects.equals(this.expiryMonth, testCardRange.expiryMonth) &&
        Objects.equals(this.expiryYear, testCardRange.expiryYear) &&
        Objects.equals(this.rangeEnd, testCardRange.rangeEnd) &&
        Objects.equals(this.rangeStart, testCardRange.rangeStart) &&
        Objects.equals(this.threeDDirectoryServerResponse, testCardRange.threeDDirectoryServerResponse) &&
        Objects.equals(this.threeDPassword, testCardRange.threeDPassword) &&
        Objects.equals(this.threeDUsername, testCardRange.threeDUsername);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, cardHolderName, cvc, expiryMonth, expiryYear, rangeEnd, rangeStart, threeDDirectoryServerResponse, threeDPassword, threeDUsername);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCardRange {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    cardHolderName: ").append(toIndentedString(cardHolderName)).append("\n");
    sb.append("    cvc: ").append(toIndentedString(cvc)).append("\n");
    sb.append("    expiryMonth: ").append(toIndentedString(expiryMonth)).append("\n");
    sb.append("    expiryYear: ").append(toIndentedString(expiryYear)).append("\n");
    sb.append("    rangeEnd: ").append(toIndentedString(rangeEnd)).append("\n");
    sb.append("    rangeStart: ").append(toIndentedString(rangeStart)).append("\n");
    sb.append("    threeDDirectoryServerResponse: ").append(toIndentedString(threeDDirectoryServerResponse)).append("\n");
    sb.append("    threeDPassword: ").append(toIndentedString(threeDPassword)).append("\n");
    sb.append("    threeDUsername: ").append(toIndentedString(threeDUsername)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("cardHolderName");
    openapiFields.add("cvc");
    openapiFields.add("expiryMonth");
    openapiFields.add("expiryYear");
    openapiFields.add("rangeEnd");
    openapiFields.add("rangeStart");
    openapiFields.add("threeDDirectoryServerResponse");
    openapiFields.add("threeDPassword");
    openapiFields.add("threeDUsername");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cardHolderName");
    openapiRequiredFields.add("expiryMonth");
    openapiRequiredFields.add("expiryYear");
    openapiRequiredFields.add("rangeEnd");
    openapiRequiredFields.add("rangeStart");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestCardRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TestCardRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestCardRange is not found in the empty JSON string", TestCardRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestCardRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestCardRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestCardRange.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        AvsAddress.validateJsonElement(jsonObj.get("address"));
      }
      if (!jsonObj.get("cardHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolderName").toString()));
      }
      if ((jsonObj.get("cvc") != null && !jsonObj.get("cvc").isJsonNull()) && !jsonObj.get("cvc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cvc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cvc").toString()));
      }
      if (!jsonObj.get("expiryMonth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryMonth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryMonth").toString()));
      }
      // validate the required field `expiryMonth`
      ExpiryMonthEnum.validateJsonElement(jsonObj.get("expiryMonth"));
      if (!jsonObj.get("rangeEnd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeEnd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rangeEnd").toString()));
      }
      if (!jsonObj.get("rangeStart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rangeStart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rangeStart").toString()));
      }
      if ((jsonObj.get("threeDDirectoryServerResponse") != null && !jsonObj.get("threeDDirectoryServerResponse").isJsonNull()) && !jsonObj.get("threeDDirectoryServerResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDDirectoryServerResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDDirectoryServerResponse").toString()));
      }
      // validate the optional field `threeDDirectoryServerResponse`
      if (jsonObj.get("threeDDirectoryServerResponse") != null && !jsonObj.get("threeDDirectoryServerResponse").isJsonNull()) {
        ThreeDDirectoryServerResponseEnum.validateJsonElement(jsonObj.get("threeDDirectoryServerResponse"));
      }
      if ((jsonObj.get("threeDPassword") != null && !jsonObj.get("threeDPassword").isJsonNull()) && !jsonObj.get("threeDPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDPassword").toString()));
      }
      if ((jsonObj.get("threeDUsername") != null && !jsonObj.get("threeDUsername").isJsonNull()) && !jsonObj.get("threeDUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDUsername").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestCardRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestCardRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestCardRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestCardRange.class));

       return (TypeAdapter<T>) new TypeAdapter<TestCardRange>() {
           @Override
           public void write(JsonWriter out, TestCardRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestCardRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestCardRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestCardRange
   * @throws IOException if the JSON string is invalid with respect to TestCardRange
   */
  public static TestCardRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestCardRange.class);
  }

  /**
   * Convert an instance of TestCardRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

