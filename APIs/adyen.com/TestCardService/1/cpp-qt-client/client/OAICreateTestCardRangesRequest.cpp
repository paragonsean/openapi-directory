/**
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateTestCardRangesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateTestCardRangesRequest::OAICreateTestCardRangesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateTestCardRangesRequest::OAICreateTestCardRangesRequest() {
    this->initializeModel();
}

OAICreateTestCardRangesRequest::~OAICreateTestCardRangesRequest() {}

void OAICreateTestCardRangesRequest::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_account_type_code_isSet = false;
    m_account_type_code_isValid = false;

    m_test_card_ranges_isSet = false;
    m_test_card_ranges_isValid = false;
}

void OAICreateTestCardRangesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateTestCardRangesRequest::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_account_type_code_isValid = ::OpenAPI::fromJsonValue(m_account_type_code, json[QString("accountTypeCode")]);
    m_account_type_code_isSet = !json[QString("accountTypeCode")].isNull() && m_account_type_code_isValid;

    m_test_card_ranges_isValid = ::OpenAPI::fromJsonValue(m_test_card_ranges, json[QString("testCardRanges")]);
    m_test_card_ranges_isSet = !json[QString("testCardRanges")].isNull() && m_test_card_ranges_isValid;
}

QString OAICreateTestCardRangesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateTestCardRangesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_account_type_code_isSet) {
        obj.insert(QString("accountTypeCode"), ::OpenAPI::toJsonValue(m_account_type_code));
    }
    if (m_test_card_ranges.size() > 0) {
        obj.insert(QString("testCardRanges"), ::OpenAPI::toJsonValue(m_test_card_ranges));
    }
    return obj;
}

QString OAICreateTestCardRangesRequest::getAccountCode() const {
    return m_account_code;
}
void OAICreateTestCardRangesRequest::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAICreateTestCardRangesRequest::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAICreateTestCardRangesRequest::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAICreateTestCardRangesRequest::getAccountTypeCode() const {
    return m_account_type_code;
}
void OAICreateTestCardRangesRequest::setAccountTypeCode(const QString &account_type_code) {
    m_account_type_code = account_type_code;
    m_account_type_code_isSet = true;
}

bool OAICreateTestCardRangesRequest::is_account_type_code_Set() const{
    return m_account_type_code_isSet;
}

bool OAICreateTestCardRangesRequest::is_account_type_code_Valid() const{
    return m_account_type_code_isValid;
}

QList<OAITestCardRange> OAICreateTestCardRangesRequest::getTestCardRanges() const {
    return m_test_card_ranges;
}
void OAICreateTestCardRangesRequest::setTestCardRanges(const QList<OAITestCardRange> &test_card_ranges) {
    m_test_card_ranges = test_card_ranges;
    m_test_card_ranges_isSet = true;
}

bool OAICreateTestCardRangesRequest::is_test_card_ranges_Set() const{
    return m_test_card_ranges_isSet;
}

bool OAICreateTestCardRangesRequest::is_test_card_ranges_Valid() const{
    return m_test_card_ranges_isValid;
}

bool OAICreateTestCardRangesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_test_card_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateTestCardRangesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_code_isValid && m_account_type_code_isValid && m_test_card_ranges_isValid && true;
}

} // namespace OpenAPI
