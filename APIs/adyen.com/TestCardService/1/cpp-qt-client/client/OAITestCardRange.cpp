/**
 * Adyen Test Cards API
 * The Test Cards API provides endpoints for generating custom test card numbers. For more information, refer to [Custom test cards](https://docs.adyen.com/development-resources/testing/create-test-cards) documentation.
 *
 * The version of the OpenAPI document: 1
 * Contact: developer-experience@adyen.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestCardRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestCardRange::OAITestCardRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestCardRange::OAITestCardRange() {
    this->initializeModel();
}

OAITestCardRange::~OAITestCardRange() {}

void OAITestCardRange::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_card_holder_name_isSet = false;
    m_card_holder_name_isValid = false;

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_range_end_isSet = false;
    m_range_end_isValid = false;

    m_range_start_isSet = false;
    m_range_start_isValid = false;

    m_three_d_directory_server_response_isSet = false;
    m_three_d_directory_server_response_isValid = false;

    m_three_d_password_isSet = false;
    m_three_d_password_isValid = false;

    m_three_d_username_isSet = false;
    m_three_d_username_isValid = false;
}

void OAITestCardRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestCardRange::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_card_holder_name_isValid = ::OpenAPI::fromJsonValue(m_card_holder_name, json[QString("cardHolderName")]);
    m_card_holder_name_isSet = !json[QString("cardHolderName")].isNull() && m_card_holder_name_isValid;

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_range_end_isValid = ::OpenAPI::fromJsonValue(m_range_end, json[QString("rangeEnd")]);
    m_range_end_isSet = !json[QString("rangeEnd")].isNull() && m_range_end_isValid;

    m_range_start_isValid = ::OpenAPI::fromJsonValue(m_range_start, json[QString("rangeStart")]);
    m_range_start_isSet = !json[QString("rangeStart")].isNull() && m_range_start_isValid;

    m_three_d_directory_server_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_directory_server_response, json[QString("threeDDirectoryServerResponse")]);
    m_three_d_directory_server_response_isSet = !json[QString("threeDDirectoryServerResponse")].isNull() && m_three_d_directory_server_response_isValid;

    m_three_d_password_isValid = ::OpenAPI::fromJsonValue(m_three_d_password, json[QString("threeDPassword")]);
    m_three_d_password_isSet = !json[QString("threeDPassword")].isNull() && m_three_d_password_isValid;

    m_three_d_username_isValid = ::OpenAPI::fromJsonValue(m_three_d_username, json[QString("threeDUsername")]);
    m_three_d_username_isSet = !json[QString("threeDUsername")].isNull() && m_three_d_username_isValid;
}

QString OAITestCardRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestCardRange::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_card_holder_name_isSet) {
        obj.insert(QString("cardHolderName"), ::OpenAPI::toJsonValue(m_card_holder_name));
    }
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_range_end_isSet) {
        obj.insert(QString("rangeEnd"), ::OpenAPI::toJsonValue(m_range_end));
    }
    if (m_range_start_isSet) {
        obj.insert(QString("rangeStart"), ::OpenAPI::toJsonValue(m_range_start));
    }
    if (m_three_d_directory_server_response_isSet) {
        obj.insert(QString("threeDDirectoryServerResponse"), ::OpenAPI::toJsonValue(m_three_d_directory_server_response));
    }
    if (m_three_d_password_isSet) {
        obj.insert(QString("threeDPassword"), ::OpenAPI::toJsonValue(m_three_d_password));
    }
    if (m_three_d_username_isSet) {
        obj.insert(QString("threeDUsername"), ::OpenAPI::toJsonValue(m_three_d_username));
    }
    return obj;
}

OAIAvsAddress OAITestCardRange::getAddress() const {
    return m_address;
}
void OAITestCardRange::setAddress(const OAIAvsAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAITestCardRange::is_address_Set() const{
    return m_address_isSet;
}

bool OAITestCardRange::is_address_Valid() const{
    return m_address_isValid;
}

QString OAITestCardRange::getCardHolderName() const {
    return m_card_holder_name;
}
void OAITestCardRange::setCardHolderName(const QString &card_holder_name) {
    m_card_holder_name = card_holder_name;
    m_card_holder_name_isSet = true;
}

bool OAITestCardRange::is_card_holder_name_Set() const{
    return m_card_holder_name_isSet;
}

bool OAITestCardRange::is_card_holder_name_Valid() const{
    return m_card_holder_name_isValid;
}

QString OAITestCardRange::getCvc() const {
    return m_cvc;
}
void OAITestCardRange::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAITestCardRange::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAITestCardRange::is_cvc_Valid() const{
    return m_cvc_isValid;
}

QString OAITestCardRange::getExpiryMonth() const {
    return m_expiry_month;
}
void OAITestCardRange::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAITestCardRange::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAITestCardRange::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

qint32 OAITestCardRange::getExpiryYear() const {
    return m_expiry_year;
}
void OAITestCardRange::setExpiryYear(const qint32 &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAITestCardRange::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAITestCardRange::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAITestCardRange::getRangeEnd() const {
    return m_range_end;
}
void OAITestCardRange::setRangeEnd(const QString &range_end) {
    m_range_end = range_end;
    m_range_end_isSet = true;
}

bool OAITestCardRange::is_range_end_Set() const{
    return m_range_end_isSet;
}

bool OAITestCardRange::is_range_end_Valid() const{
    return m_range_end_isValid;
}

QString OAITestCardRange::getRangeStart() const {
    return m_range_start;
}
void OAITestCardRange::setRangeStart(const QString &range_start) {
    m_range_start = range_start;
    m_range_start_isSet = true;
}

bool OAITestCardRange::is_range_start_Set() const{
    return m_range_start_isSet;
}

bool OAITestCardRange::is_range_start_Valid() const{
    return m_range_start_isValid;
}

QString OAITestCardRange::getThreeDDirectoryServerResponse() const {
    return m_three_d_directory_server_response;
}
void OAITestCardRange::setThreeDDirectoryServerResponse(const QString &three_d_directory_server_response) {
    m_three_d_directory_server_response = three_d_directory_server_response;
    m_three_d_directory_server_response_isSet = true;
}

bool OAITestCardRange::is_three_d_directory_server_response_Set() const{
    return m_three_d_directory_server_response_isSet;
}

bool OAITestCardRange::is_three_d_directory_server_response_Valid() const{
    return m_three_d_directory_server_response_isValid;
}

QString OAITestCardRange::getThreeDPassword() const {
    return m_three_d_password;
}
void OAITestCardRange::setThreeDPassword(const QString &three_d_password) {
    m_three_d_password = three_d_password;
    m_three_d_password_isSet = true;
}

bool OAITestCardRange::is_three_d_password_Set() const{
    return m_three_d_password_isSet;
}

bool OAITestCardRange::is_three_d_password_Valid() const{
    return m_three_d_password_isValid;
}

QString OAITestCardRange::getThreeDUsername() const {
    return m_three_d_username;
}
void OAITestCardRange::setThreeDUsername(const QString &three_d_username) {
    m_three_d_username = three_d_username;
    m_three_d_username_isSet = true;
}

bool OAITestCardRange::is_three_d_username_Set() const{
    return m_three_d_username_isSet;
}

bool OAITestCardRange::is_three_d_username_Valid() const{
    return m_three_d_username_isValid;
}

bool OAITestCardRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_range_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_directory_server_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestCardRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_holder_name_isValid && m_expiry_month_isValid && m_expiry_year_isValid && m_range_end_isValid && m_range_start_isValid && true;
}

} // namespace OpenAPI
