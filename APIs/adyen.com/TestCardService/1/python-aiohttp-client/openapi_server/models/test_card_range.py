# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.avs_address import AvsAddress
from openapi_server import util


class TestCardRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: AvsAddress=None, card_holder_name: str=None, cvc: str=None, expiry_month: str=None, expiry_year: int=None, range_end: str=None, range_start: str=None, three_d_directory_server_response: str=None, three_d_password: str=None, three_d_username: str=None):
        """TestCardRange - a model defined in OpenAPI

        :param address: The address of this TestCardRange.
        :param card_holder_name: The card_holder_name of this TestCardRange.
        :param cvc: The cvc of this TestCardRange.
        :param expiry_month: The expiry_month of this TestCardRange.
        :param expiry_year: The expiry_year of this TestCardRange.
        :param range_end: The range_end of this TestCardRange.
        :param range_start: The range_start of this TestCardRange.
        :param three_d_directory_server_response: The three_d_directory_server_response of this TestCardRange.
        :param three_d_password: The three_d_password of this TestCardRange.
        :param three_d_username: The three_d_username of this TestCardRange.
        """
        self.openapi_types = {
            'address': AvsAddress,
            'card_holder_name': str,
            'cvc': str,
            'expiry_month': str,
            'expiry_year': int,
            'range_end': str,
            'range_start': str,
            'three_d_directory_server_response': str,
            'three_d_password': str,
            'three_d_username': str
        }

        self.attribute_map = {
            'address': 'address',
            'card_holder_name': 'cardHolderName',
            'cvc': 'cvc',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'range_end': 'rangeEnd',
            'range_start': 'rangeStart',
            'three_d_directory_server_response': 'threeDDirectoryServerResponse',
            'three_d_password': 'threeDPassword',
            'three_d_username': 'threeDUsername'
        }

        self._address = address
        self._card_holder_name = card_holder_name
        self._cvc = cvc
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._range_end = range_end
        self._range_start = range_start
        self._three_d_directory_server_response = three_d_directory_server_response
        self._three_d_password = three_d_password
        self._three_d_username = three_d_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCardRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCardRange of this TestCardRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this TestCardRange.

        Contains the billing address of the card holder. The address details need to be AVS-compliant, which means that you need to provide at least street address.

        :return: The address of this TestCardRange.
        :rtype: AvsAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TestCardRange.

        Contains the billing address of the card holder. The address details need to be AVS-compliant, which means that you need to provide at least street address.

        :param address: The address of this TestCardRange.
        :type address: AvsAddress
        """

        self._address = address

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this TestCardRange.

        The name of the card holder, as it appears on the card, for the test card range.

        :return: The card_holder_name of this TestCardRange.
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this TestCardRange.

        The name of the card holder, as it appears on the card, for the test card range.

        :param card_holder_name: The card_holder_name of this TestCardRange.
        :type card_holder_name: str
        """
        if card_holder_name is None:
            raise ValueError("Invalid value for `card_holder_name`, must not be `None`")

        self._card_holder_name = card_holder_name

    @property
    def cvc(self):
        """Gets the cvc of this TestCardRange.

        The test card range security code.  Example: 123

        :return: The cvc of this TestCardRange.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this TestCardRange.

        The test card range security code.  Example: 123

        :param cvc: The cvc of this TestCardRange.
        :type cvc: str
        """

        self._cvc = cvc

    @property
    def expiry_month(self):
        """Gets the expiry_month of this TestCardRange.

        Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER

        :return: The expiry_month of this TestCardRange.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this TestCardRange.

        Expiry month for the test card range.  Allowed values: * JANUARY * FEBRUARY * MARCH * APRIL * MAY * JUNE * JULY * AUGUST * SEPTEMBER * OCTOBER * NOVEMBER * DECEMBER

        :param expiry_month: The expiry_month of this TestCardRange.
        :type expiry_month: str
        """
        allowed_values = ["APRIL", "AUGUST", "DECEMBER", "FEBRUARY", "JANUARY", "JULY", "JUNE", "MARCH", "MAY", "NOVEMBER", "OCTOBER", "SEPTEMBER"]  # noqa: E501
        if expiry_month not in allowed_values:
            raise ValueError(
                "Invalid value for `expiry_month` ({0}), must be one of {1}"
                .format(expiry_month, allowed_values)
            )

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this TestCardRange.

        Expiry year for the test card range.  Example: 2020

        :return: The expiry_year of this TestCardRange.
        :rtype: int
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this TestCardRange.

        Expiry year for the test card range.  Example: 2020

        :param expiry_year: The expiry_year of this TestCardRange.
        :type expiry_year: int
        """
        if expiry_year is None:
            raise ValueError("Invalid value for `expiry_year`, must not be `None`")

        self._expiry_year = expiry_year

    @property
    def range_end(self):
        """Gets the range_end of this TestCardRange.

        The last test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 4321

        :return: The range_end of this TestCardRange.
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this TestCardRange.

        The last test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 4321

        :param range_end: The range_end of this TestCardRange.
        :type range_end: str
        """
        if range_end is None:
            raise ValueError("Invalid value for `range_end`, must not be `None`")

        self._range_end = range_end

    @property
    def range_start(self):
        """Gets the range_start of this TestCardRange.

        The first test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 1234

        :return: The range_start of this TestCardRange.
        :rtype: str
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this TestCardRange.

        The first test card number in the test card range (inclusive):  * Min 6, max 19 digits * BIN compliant Example: 5432 1234 1234 1234

        :param range_start: The range_start of this TestCardRange.
        :type range_start: str
        """
        if range_start is None:
            raise ValueError("Invalid value for `range_start`, must not be `None`")

        self._range_start = range_start

    @property
    def three_d_directory_server_response(self):
        """Gets the three_d_directory_server_response of this TestCardRange.

        3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:  * Y (Authentication available) * N (Card holder not enrolled/not participating) * U (Unable to authenticate)

        :return: The three_d_directory_server_response of this TestCardRange.
        :rtype: str
        """
        return self._three_d_directory_server_response

    @three_d_directory_server_response.setter
    def three_d_directory_server_response(self, three_d_directory_server_response):
        """Sets the three_d_directory_server_response of this TestCardRange.

        3D Secure server response. It notifies whether the specified card holder is enrolled in a 3D Secure service. Possible values:  * Y (Authentication available) * N (Card holder not enrolled/not participating) * U (Unable to authenticate)

        :param three_d_directory_server_response: The three_d_directory_server_response of this TestCardRange.
        :type three_d_directory_server_response: str
        """
        allowed_values = ["N", "U", "Y"]  # noqa: E501
        if three_d_directory_server_response not in allowed_values:
            raise ValueError(
                "Invalid value for `three_d_directory_server_response` ({0}), must be one of {1}"
                .format(three_d_directory_server_response, allowed_values)
            )

        self._three_d_directory_server_response = three_d_directory_server_response

    @property
    def three_d_password(self):
        """Gets the three_d_password of this TestCardRange.

        The password used for 3D Secure authentication.

        :return: The three_d_password of this TestCardRange.
        :rtype: str
        """
        return self._three_d_password

    @three_d_password.setter
    def three_d_password(self, three_d_password):
        """Sets the three_d_password of this TestCardRange.

        The password used for 3D Secure authentication.

        :param three_d_password: The three_d_password of this TestCardRange.
        :type three_d_password: str
        """

        self._three_d_password = three_d_password

    @property
    def three_d_username(self):
        """Gets the three_d_username of this TestCardRange.

        The username used for 3D Secure authentication.

        :return: The three_d_username of this TestCardRange.
        :rtype: str
        """
        return self._three_d_username

    @three_d_username.setter
    def three_d_username(self, three_d_username):
        """Sets the three_d_username of this TestCardRange.

        The username used for 3D Secure authentication.

        :param three_d_username: The three_d_username of this TestCardRange.
        :type three_d_username: str
        """

        self._three_d_username = three_d_username
