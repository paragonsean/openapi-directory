# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TestCardRangeCreationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number_range_end: str=None, card_number_range_start: str=None, creation_result_code: str=None, message: str=None):
        """TestCardRangeCreationResult - a model defined in OpenAPI

        :param card_number_range_end: The card_number_range_end of this TestCardRangeCreationResult.
        :param card_number_range_start: The card_number_range_start of this TestCardRangeCreationResult.
        :param creation_result_code: The creation_result_code of this TestCardRangeCreationResult.
        :param message: The message of this TestCardRangeCreationResult.
        """
        self.openapi_types = {
            'card_number_range_end': str,
            'card_number_range_start': str,
            'creation_result_code': str,
            'message': str
        }

        self.attribute_map = {
            'card_number_range_end': 'cardNumberRangeEnd',
            'card_number_range_start': 'cardNumberRangeStart',
            'creation_result_code': 'creationResultCode',
            'message': 'message'
        }

        self._card_number_range_end = card_number_range_end
        self._card_number_range_start = card_number_range_start
        self._creation_result_code = creation_result_code
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TestCardRangeCreationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TestCardRangeCreationResult of this TestCardRangeCreationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number_range_end(self):
        """Gets the card_number_range_end of this TestCardRangeCreationResult.

        The last test card number in the generated test card range.  Example: 5432 1234 1234 4321

        :return: The card_number_range_end of this TestCardRangeCreationResult.
        :rtype: str
        """
        return self._card_number_range_end

    @card_number_range_end.setter
    def card_number_range_end(self, card_number_range_end):
        """Sets the card_number_range_end of this TestCardRangeCreationResult.

        The last test card number in the generated test card range.  Example: 5432 1234 1234 4321

        :param card_number_range_end: The card_number_range_end of this TestCardRangeCreationResult.
        :type card_number_range_end: str
        """
        if card_number_range_end is None:
            raise ValueError("Invalid value for `card_number_range_end`, must not be `None`")

        self._card_number_range_end = card_number_range_end

    @property
    def card_number_range_start(self):
        """Gets the card_number_range_start of this TestCardRangeCreationResult.

        The first test card number in the generated test card range.  Example: 5432 1234 1234 1234

        :return: The card_number_range_start of this TestCardRangeCreationResult.
        :rtype: str
        """
        return self._card_number_range_start

    @card_number_range_start.setter
    def card_number_range_start(self, card_number_range_start):
        """Sets the card_number_range_start of this TestCardRangeCreationResult.

        The first test card number in the generated test card range.  Example: 5432 1234 1234 1234

        :param card_number_range_start: The card_number_range_start of this TestCardRangeCreationResult.
        :type card_number_range_start: str
        """
        if card_number_range_start is None:
            raise ValueError("Invalid value for `card_number_range_start`, must not be `None`")

        self._card_number_range_start = card_number_range_start

    @property
    def creation_result_code(self):
        """Gets the creation_result_code of this TestCardRangeCreationResult.

        Notification message. It informs about the outcome of the operation. Possible values: * CREATED * ALREADY_EXISTS * ERROR

        :return: The creation_result_code of this TestCardRangeCreationResult.
        :rtype: str
        """
        return self._creation_result_code

    @creation_result_code.setter
    def creation_result_code(self, creation_result_code):
        """Sets the creation_result_code of this TestCardRangeCreationResult.

        Notification message. It informs about the outcome of the operation. Possible values: * CREATED * ALREADY_EXISTS * ERROR

        :param creation_result_code: The creation_result_code of this TestCardRangeCreationResult.
        :type creation_result_code: str
        """
        allowed_values = ["ALREADY_EXISTS", "CREATED", "ERROR"]  # noqa: E501
        if creation_result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `creation_result_code` ({0}), must be one of {1}"
                .format(creation_result_code, allowed_values)
            )

        self._creation_result_code = creation_result_code

    @property
    def message(self):
        """Gets the message of this TestCardRangeCreationResult.

        An optional information message about the result.

        :return: The message of this TestCardRangeCreationResult.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TestCardRangeCreationResult.

        An optional information message about the result.

        :param message: The message of this TestCardRangeCreationResult.
        :type message: str
        """

        self._message = message
