# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_card_range import TestCardRange
from openapi_server import util


class CreateTestCardRangesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, account_type_code: str=None, test_card_ranges: List[TestCardRange]=None):
        """CreateTestCardRangesRequest - a model defined in OpenAPI

        :param account_code: The account_code of this CreateTestCardRangesRequest.
        :param account_type_code: The account_type_code of this CreateTestCardRangesRequest.
        :param test_card_ranges: The test_card_ranges of this CreateTestCardRangesRequest.
        """
        self.openapi_types = {
            'account_code': str,
            'account_type_code': str,
            'test_card_ranges': List[TestCardRange]
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'account_type_code': 'accountTypeCode',
            'test_card_ranges': 'testCardRanges'
        }

        self._account_code = account_code
        self._account_type_code = account_type_code
        self._test_card_ranges = test_card_ranges

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTestCardRangesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTestCardRangesRequest of this CreateTestCardRangesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this CreateTestCardRangesRequest.

        The code of the account, for which the test card ranges should be created.

        :return: The account_code of this CreateTestCardRangesRequest.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this CreateTestCardRangesRequest.

        The code of the account, for which the test card ranges should be created.

        :param account_code: The account_code of this CreateTestCardRangesRequest.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def account_type_code(self):
        """Gets the account_type_code of this CreateTestCardRangesRequest.

        The type of the account, for which the test card ranges should be created.  Permitted values: * Company * MerchantAccount > These values are case-sensitive.

        :return: The account_type_code of this CreateTestCardRangesRequest.
        :rtype: str
        """
        return self._account_type_code

    @account_type_code.setter
    def account_type_code(self, account_type_code):
        """Sets the account_type_code of this CreateTestCardRangesRequest.

        The type of the account, for which the test card ranges should be created.  Permitted values: * Company * MerchantAccount > These values are case-sensitive.

        :param account_type_code: The account_type_code of this CreateTestCardRangesRequest.
        :type account_type_code: str
        """
        if account_type_code is None:
            raise ValueError("Invalid value for `account_type_code`, must not be `None`")

        self._account_type_code = account_type_code

    @property
    def test_card_ranges(self):
        """Gets the test_card_ranges of this CreateTestCardRangesRequest.

        A list of test card ranges to create.

        :return: The test_card_ranges of this CreateTestCardRangesRequest.
        :rtype: List[TestCardRange]
        """
        return self._test_card_ranges

    @test_card_ranges.setter
    def test_card_ranges(self, test_card_ranges):
        """Sets the test_card_ranges of this CreateTestCardRangesRequest.

        A list of test card ranges to create.

        :param test_card_ranges: The test_card_ranges of this CreateTestCardRangesRequest.
        :type test_card_ranges: List[TestCardRange]
        """
        if test_card_ranges is None:
            raise ValueError("Invalid value for `test_card_ranges`, must not be `None`")

        self._test_card_ranges = test_card_ranges
