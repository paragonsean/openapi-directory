# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.test_card_range_creation_result import TestCardRangeCreationResult
from openapi_server import util


class CreateTestCardRangesResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, range_creation_results: List[TestCardRangeCreationResult]=None):
        """CreateTestCardRangesResult - a model defined in OpenAPI

        :param range_creation_results: The range_creation_results of this CreateTestCardRangesResult.
        """
        self.openapi_types = {
            'range_creation_results': List[TestCardRangeCreationResult]
        }

        self.attribute_map = {
            'range_creation_results': 'rangeCreationResults'
        }

        self._range_creation_results = range_creation_results

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTestCardRangesResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateTestCardRangesResult of this CreateTestCardRangesResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def range_creation_results(self):
        """Gets the range_creation_results of this CreateTestCardRangesResult.

        The results of the test card creation.

        :return: The range_creation_results of this CreateTestCardRangesResult.
        :rtype: List[TestCardRangeCreationResult]
        """
        return self._range_creation_results

    @range_creation_results.setter
    def range_creation_results(self, range_creation_results):
        """Sets the range_creation_results of this CreateTestCardRangesResult.

        The results of the test card creation.

        :param range_creation_results: The range_creation_results of this CreateTestCardRangesResult.
        :type range_creation_results: List[TestCardRangeCreationResult]
        """
        if range_creation_results is None:
            raise ValueError("Invalid value for `range_creation_results`, must not be `None`")

        self._range_creation_results = range_creation_results
