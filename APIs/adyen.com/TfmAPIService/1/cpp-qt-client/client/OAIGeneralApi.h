/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssignTerminalsRequest.h"
#include "OAIAssignTerminalsResponse.h"
#include "OAIFindTerminalRequest.h"
#include "OAIFindTerminalResponse.h"
#include "OAIGetStoresUnderAccountRequest.h"
#include "OAIGetStoresUnderAccountResponse.h"
#include "OAIGetTerminalDetailsRequest.h"
#include "OAIGetTerminalDetailsResponse.h"
#include "OAIGetTerminalsUnderAccountRequest.h"
#include "OAIGetTerminalsUnderAccountResponse.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_assign_terminals_request OAIAssignTerminalsRequest [optional]
    */
    virtual void postAssignTerminals(const ::OpenAPI::OptionalParam<OAIAssignTerminalsRequest> &oai_assign_terminals_request = ::OpenAPI::OptionalParam<OAIAssignTerminalsRequest>());

    /**
    * @param[in]  oai_find_terminal_request OAIFindTerminalRequest [optional]
    */
    virtual void postFindTerminal(const ::OpenAPI::OptionalParam<OAIFindTerminalRequest> &oai_find_terminal_request = ::OpenAPI::OptionalParam<OAIFindTerminalRequest>());

    /**
    * @param[in]  oai_get_stores_under_account_request OAIGetStoresUnderAccountRequest [optional]
    */
    virtual void postGetStoresUnderAccount(const ::OpenAPI::OptionalParam<OAIGetStoresUnderAccountRequest> &oai_get_stores_under_account_request = ::OpenAPI::OptionalParam<OAIGetStoresUnderAccountRequest>());

    /**
    * @param[in]  oai_get_terminal_details_request OAIGetTerminalDetailsRequest [optional]
    */
    virtual void postGetTerminalDetails(const ::OpenAPI::OptionalParam<OAIGetTerminalDetailsRequest> &oai_get_terminal_details_request = ::OpenAPI::OptionalParam<OAIGetTerminalDetailsRequest>());

    /**
    * @param[in]  oai_get_terminals_under_account_request OAIGetTerminalsUnderAccountRequest [optional]
    */
    virtual void postGetTerminalsUnderAccount(const ::OpenAPI::OptionalParam<OAIGetTerminalsUnderAccountRequest> &oai_get_terminals_under_account_request = ::OpenAPI::OptionalParam<OAIGetTerminalsUnderAccountRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postAssignTerminalsCallback(OAIHttpRequestWorker *worker);
    void postFindTerminalCallback(OAIHttpRequestWorker *worker);
    void postGetStoresUnderAccountCallback(OAIHttpRequestWorker *worker);
    void postGetTerminalDetailsCallback(OAIHttpRequestWorker *worker);
    void postGetTerminalsUnderAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postAssignTerminalsSignal(OAIAssignTerminalsResponse summary);
    void postFindTerminalSignal(OAIFindTerminalResponse summary);
    void postGetStoresUnderAccountSignal(OAIGetStoresUnderAccountResponse summary);
    void postGetTerminalDetailsSignal(OAIGetTerminalDetailsResponse summary);
    void postGetTerminalsUnderAccountSignal(OAIGetTerminalsUnderAccountResponse summary);


    void postAssignTerminalsSignalFull(OAIHttpRequestWorker *worker, OAIAssignTerminalsResponse summary);
    void postFindTerminalSignalFull(OAIHttpRequestWorker *worker, OAIFindTerminalResponse summary);
    void postGetStoresUnderAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetStoresUnderAccountResponse summary);
    void postGetTerminalDetailsSignalFull(OAIHttpRequestWorker *worker, OAIGetTerminalDetailsResponse summary);
    void postGetTerminalsUnderAccountSignalFull(OAIHttpRequestWorker *worker, OAIGetTerminalsUnderAccountResponse summary);

    Q_DECL_DEPRECATED_X("Use postAssignTerminalsSignalError() instead")
    void postAssignTerminalsSignalE(OAIAssignTerminalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAssignTerminalsSignalError(OAIAssignTerminalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFindTerminalSignalError() instead")
    void postFindTerminalSignalE(OAIFindTerminalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postFindTerminalSignalError(OAIFindTerminalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetStoresUnderAccountSignalError() instead")
    void postGetStoresUnderAccountSignalE(OAIGetStoresUnderAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetStoresUnderAccountSignalError(OAIGetStoresUnderAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTerminalDetailsSignalError() instead")
    void postGetTerminalDetailsSignalE(OAIGetTerminalDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTerminalDetailsSignalError(OAIGetTerminalDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTerminalsUnderAccountSignalError() instead")
    void postGetTerminalsUnderAccountSignalE(OAIGetTerminalsUnderAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTerminalsUnderAccountSignalError(OAIGetTerminalsUnderAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postAssignTerminalsSignalErrorFull() instead")
    void postAssignTerminalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAssignTerminalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postFindTerminalSignalErrorFull() instead")
    void postFindTerminalSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postFindTerminalSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetStoresUnderAccountSignalErrorFull() instead")
    void postGetStoresUnderAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetStoresUnderAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTerminalDetailsSignalErrorFull() instead")
    void postGetTerminalDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTerminalDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTerminalsUnderAccountSignalErrorFull() instead")
    void postGetTerminalsUnderAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTerminalsUnderAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
