/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStore.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStore::OAIStore(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStore::OAIStore() {
    this->initializeModel();
}

OAIStore::~OAIStore() {}

void OAIStore::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_in_store_terminals_isSet = false;
    m_in_store_terminals_isValid = false;

    m_merchant_account_code_isSet = false;
    m_merchant_account_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;
}

void OAIStore::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStore::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_in_store_terminals_isValid = ::OpenAPI::fromJsonValue(m_in_store_terminals, json[QString("inStoreTerminals")]);
    m_in_store_terminals_isSet = !json[QString("inStoreTerminals")].isNull() && m_in_store_terminals_isValid;

    m_merchant_account_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_account_code, json[QString("merchantAccountCode")]);
    m_merchant_account_code_isSet = !json[QString("merchantAccountCode")].isNull() && m_merchant_account_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;
}

QString OAIStore::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStore::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_in_store_terminals.size() > 0) {
        obj.insert(QString("inStoreTerminals"), ::OpenAPI::toJsonValue(m_in_store_terminals));
    }
    if (m_merchant_account_code_isSet) {
        obj.insert(QString("merchantAccountCode"), ::OpenAPI::toJsonValue(m_merchant_account_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    return obj;
}

OAIAddress OAIStore::getAddress() const {
    return m_address;
}
void OAIStore::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIStore::is_address_Set() const{
    return m_address_isSet;
}

bool OAIStore::is_address_Valid() const{
    return m_address_isValid;
}

QString OAIStore::getDescription() const {
    return m_description;
}
void OAIStore::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStore::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStore::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAIStore::getInStoreTerminals() const {
    return m_in_store_terminals;
}
void OAIStore::setInStoreTerminals(const QList<QString> &in_store_terminals) {
    m_in_store_terminals = in_store_terminals;
    m_in_store_terminals_isSet = true;
}

bool OAIStore::is_in_store_terminals_Set() const{
    return m_in_store_terminals_isSet;
}

bool OAIStore::is_in_store_terminals_Valid() const{
    return m_in_store_terminals_isValid;
}

QString OAIStore::getMerchantAccountCode() const {
    return m_merchant_account_code;
}
void OAIStore::setMerchantAccountCode(const QString &merchant_account_code) {
    m_merchant_account_code = merchant_account_code;
    m_merchant_account_code_isSet = true;
}

bool OAIStore::is_merchant_account_code_Set() const{
    return m_merchant_account_code_isSet;
}

bool OAIStore::is_merchant_account_code_Valid() const{
    return m_merchant_account_code_isValid;
}

QString OAIStore::getStatus() const {
    return m_status;
}
void OAIStore::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStore::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStore::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStore::getStore() const {
    return m_store;
}
void OAIStore::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIStore::is_store_Set() const{
    return m_store_isSet;
}

bool OAIStore::is_store_Valid() const{
    return m_store_isValid;
}

bool OAIStore::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_store_terminals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStore::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_store_isValid && true;
}

} // namespace OpenAPI
