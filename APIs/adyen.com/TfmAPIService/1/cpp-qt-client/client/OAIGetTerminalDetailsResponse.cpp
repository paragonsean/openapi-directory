/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTerminalDetailsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTerminalDetailsResponse::OAIGetTerminalDetailsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTerminalDetailsResponse::OAIGetTerminalDetailsResponse() {
    this->initializeModel();
}

OAIGetTerminalDetailsResponse::~OAIGetTerminalDetailsResponse() {}

void OAIGetTerminalDetailsResponse::initializeModel() {

    m_bluetooth_ip_isSet = false;
    m_bluetooth_ip_isValid = false;

    m_bluetooth_mac_isSet = false;
    m_bluetooth_mac_isValid = false;

    m_company_account_isSet = false;
    m_company_account_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_device_model_isSet = false;
    m_device_model_isValid = false;

    m_dhcp_enabled_isSet = false;
    m_dhcp_enabled_isValid = false;

    m_display_label_isSet = false;
    m_display_label_isValid = false;

    m_ethernet_ip_isSet = false;
    m_ethernet_ip_isValid = false;

    m_ethernet_mac_isSet = false;
    m_ethernet_mac_isValid = false;

    m_firmware_version_isSet = false;
    m_firmware_version_isValid = false;

    m_iccid_isSet = false;
    m_iccid_isValid = false;

    m_last_activity_date_time_isSet = false;
    m_last_activity_date_time_isValid = false;

    m_last_transaction_date_time_isSet = false;
    m_last_transaction_date_time_isValid = false;

    m_link_negotiation_isSet = false;
    m_link_negotiation_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_inventory_isSet = false;
    m_merchant_inventory_isValid = false;

    m_permanent_terminal_id_isSet = false;
    m_permanent_terminal_id_isValid = false;

    m_serial_number_isSet = false;
    m_serial_number_isValid = false;

    m_sim_status_isSet = false;
    m_sim_status_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_store_details_isSet = false;
    m_store_details_isValid = false;

    m_terminal_isSet = false;
    m_terminal_isValid = false;

    m_terminal_status_isSet = false;
    m_terminal_status_isValid = false;

    m_wifi_ip_isSet = false;
    m_wifi_ip_isValid = false;

    m_wifi_mac_isSet = false;
    m_wifi_mac_isValid = false;
}

void OAIGetTerminalDetailsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTerminalDetailsResponse::fromJsonObject(QJsonObject json) {

    m_bluetooth_ip_isValid = ::OpenAPI::fromJsonValue(m_bluetooth_ip, json[QString("bluetoothIp")]);
    m_bluetooth_ip_isSet = !json[QString("bluetoothIp")].isNull() && m_bluetooth_ip_isValid;

    m_bluetooth_mac_isValid = ::OpenAPI::fromJsonValue(m_bluetooth_mac, json[QString("bluetoothMac")]);
    m_bluetooth_mac_isSet = !json[QString("bluetoothMac")].isNull() && m_bluetooth_mac_isValid;

    m_company_account_isValid = ::OpenAPI::fromJsonValue(m_company_account, json[QString("companyAccount")]);
    m_company_account_isSet = !json[QString("companyAccount")].isNull() && m_company_account_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_device_model_isValid = ::OpenAPI::fromJsonValue(m_device_model, json[QString("deviceModel")]);
    m_device_model_isSet = !json[QString("deviceModel")].isNull() && m_device_model_isValid;

    m_dhcp_enabled_isValid = ::OpenAPI::fromJsonValue(m_dhcp_enabled, json[QString("dhcpEnabled")]);
    m_dhcp_enabled_isSet = !json[QString("dhcpEnabled")].isNull() && m_dhcp_enabled_isValid;

    m_display_label_isValid = ::OpenAPI::fromJsonValue(m_display_label, json[QString("displayLabel")]);
    m_display_label_isSet = !json[QString("displayLabel")].isNull() && m_display_label_isValid;

    m_ethernet_ip_isValid = ::OpenAPI::fromJsonValue(m_ethernet_ip, json[QString("ethernetIp")]);
    m_ethernet_ip_isSet = !json[QString("ethernetIp")].isNull() && m_ethernet_ip_isValid;

    m_ethernet_mac_isValid = ::OpenAPI::fromJsonValue(m_ethernet_mac, json[QString("ethernetMac")]);
    m_ethernet_mac_isSet = !json[QString("ethernetMac")].isNull() && m_ethernet_mac_isValid;

    m_firmware_version_isValid = ::OpenAPI::fromJsonValue(m_firmware_version, json[QString("firmwareVersion")]);
    m_firmware_version_isSet = !json[QString("firmwareVersion")].isNull() && m_firmware_version_isValid;

    m_iccid_isValid = ::OpenAPI::fromJsonValue(m_iccid, json[QString("iccid")]);
    m_iccid_isSet = !json[QString("iccid")].isNull() && m_iccid_isValid;

    m_last_activity_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date_time, json[QString("lastActivityDateTime")]);
    m_last_activity_date_time_isSet = !json[QString("lastActivityDateTime")].isNull() && m_last_activity_date_time_isValid;

    m_last_transaction_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_transaction_date_time, json[QString("lastTransactionDateTime")]);
    m_last_transaction_date_time_isSet = !json[QString("lastTransactionDateTime")].isNull() && m_last_transaction_date_time_isValid;

    m_link_negotiation_isValid = ::OpenAPI::fromJsonValue(m_link_negotiation, json[QString("linkNegotiation")]);
    m_link_negotiation_isSet = !json[QString("linkNegotiation")].isNull() && m_link_negotiation_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_inventory_isValid = ::OpenAPI::fromJsonValue(m_merchant_inventory, json[QString("merchantInventory")]);
    m_merchant_inventory_isSet = !json[QString("merchantInventory")].isNull() && m_merchant_inventory_isValid;

    m_permanent_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_permanent_terminal_id, json[QString("permanentTerminalId")]);
    m_permanent_terminal_id_isSet = !json[QString("permanentTerminalId")].isNull() && m_permanent_terminal_id_isValid;

    m_serial_number_isValid = ::OpenAPI::fromJsonValue(m_serial_number, json[QString("serialNumber")]);
    m_serial_number_isSet = !json[QString("serialNumber")].isNull() && m_serial_number_isValid;

    m_sim_status_isValid = ::OpenAPI::fromJsonValue(m_sim_status, json[QString("simStatus")]);
    m_sim_status_isSet = !json[QString("simStatus")].isNull() && m_sim_status_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_store_details_isValid = ::OpenAPI::fromJsonValue(m_store_details, json[QString("storeDetails")]);
    m_store_details_isSet = !json[QString("storeDetails")].isNull() && m_store_details_isValid;

    m_terminal_isValid = ::OpenAPI::fromJsonValue(m_terminal, json[QString("terminal")]);
    m_terminal_isSet = !json[QString("terminal")].isNull() && m_terminal_isValid;

    m_terminal_status_isValid = ::OpenAPI::fromJsonValue(m_terminal_status, json[QString("terminalStatus")]);
    m_terminal_status_isSet = !json[QString("terminalStatus")].isNull() && m_terminal_status_isValid;

    m_wifi_ip_isValid = ::OpenAPI::fromJsonValue(m_wifi_ip, json[QString("wifiIp")]);
    m_wifi_ip_isSet = !json[QString("wifiIp")].isNull() && m_wifi_ip_isValid;

    m_wifi_mac_isValid = ::OpenAPI::fromJsonValue(m_wifi_mac, json[QString("wifiMac")]);
    m_wifi_mac_isSet = !json[QString("wifiMac")].isNull() && m_wifi_mac_isValid;
}

QString OAIGetTerminalDetailsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTerminalDetailsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bluetooth_ip_isSet) {
        obj.insert(QString("bluetoothIp"), ::OpenAPI::toJsonValue(m_bluetooth_ip));
    }
    if (m_bluetooth_mac_isSet) {
        obj.insert(QString("bluetoothMac"), ::OpenAPI::toJsonValue(m_bluetooth_mac));
    }
    if (m_company_account_isSet) {
        obj.insert(QString("companyAccount"), ::OpenAPI::toJsonValue(m_company_account));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_device_model_isSet) {
        obj.insert(QString("deviceModel"), ::OpenAPI::toJsonValue(m_device_model));
    }
    if (m_dhcp_enabled_isSet) {
        obj.insert(QString("dhcpEnabled"), ::OpenAPI::toJsonValue(m_dhcp_enabled));
    }
    if (m_display_label_isSet) {
        obj.insert(QString("displayLabel"), ::OpenAPI::toJsonValue(m_display_label));
    }
    if (m_ethernet_ip_isSet) {
        obj.insert(QString("ethernetIp"), ::OpenAPI::toJsonValue(m_ethernet_ip));
    }
    if (m_ethernet_mac_isSet) {
        obj.insert(QString("ethernetMac"), ::OpenAPI::toJsonValue(m_ethernet_mac));
    }
    if (m_firmware_version_isSet) {
        obj.insert(QString("firmwareVersion"), ::OpenAPI::toJsonValue(m_firmware_version));
    }
    if (m_iccid_isSet) {
        obj.insert(QString("iccid"), ::OpenAPI::toJsonValue(m_iccid));
    }
    if (m_last_activity_date_time_isSet) {
        obj.insert(QString("lastActivityDateTime"), ::OpenAPI::toJsonValue(m_last_activity_date_time));
    }
    if (m_last_transaction_date_time_isSet) {
        obj.insert(QString("lastTransactionDateTime"), ::OpenAPI::toJsonValue(m_last_transaction_date_time));
    }
    if (m_link_negotiation_isSet) {
        obj.insert(QString("linkNegotiation"), ::OpenAPI::toJsonValue(m_link_negotiation));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_inventory_isSet) {
        obj.insert(QString("merchantInventory"), ::OpenAPI::toJsonValue(m_merchant_inventory));
    }
    if (m_permanent_terminal_id_isSet) {
        obj.insert(QString("permanentTerminalId"), ::OpenAPI::toJsonValue(m_permanent_terminal_id));
    }
    if (m_serial_number_isSet) {
        obj.insert(QString("serialNumber"), ::OpenAPI::toJsonValue(m_serial_number));
    }
    if (m_sim_status_isSet) {
        obj.insert(QString("simStatus"), ::OpenAPI::toJsonValue(m_sim_status));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_store_details.isSet()) {
        obj.insert(QString("storeDetails"), ::OpenAPI::toJsonValue(m_store_details));
    }
    if (m_terminal_isSet) {
        obj.insert(QString("terminal"), ::OpenAPI::toJsonValue(m_terminal));
    }
    if (m_terminal_status_isSet) {
        obj.insert(QString("terminalStatus"), ::OpenAPI::toJsonValue(m_terminal_status));
    }
    if (m_wifi_ip_isSet) {
        obj.insert(QString("wifiIp"), ::OpenAPI::toJsonValue(m_wifi_ip));
    }
    if (m_wifi_mac_isSet) {
        obj.insert(QString("wifiMac"), ::OpenAPI::toJsonValue(m_wifi_mac));
    }
    return obj;
}

QString OAIGetTerminalDetailsResponse::getBluetoothIp() const {
    return m_bluetooth_ip;
}
void OAIGetTerminalDetailsResponse::setBluetoothIp(const QString &bluetooth_ip) {
    m_bluetooth_ip = bluetooth_ip;
    m_bluetooth_ip_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_bluetooth_ip_Set() const{
    return m_bluetooth_ip_isSet;
}

bool OAIGetTerminalDetailsResponse::is_bluetooth_ip_Valid() const{
    return m_bluetooth_ip_isValid;
}

QString OAIGetTerminalDetailsResponse::getBluetoothMac() const {
    return m_bluetooth_mac;
}
void OAIGetTerminalDetailsResponse::setBluetoothMac(const QString &bluetooth_mac) {
    m_bluetooth_mac = bluetooth_mac;
    m_bluetooth_mac_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_bluetooth_mac_Set() const{
    return m_bluetooth_mac_isSet;
}

bool OAIGetTerminalDetailsResponse::is_bluetooth_mac_Valid() const{
    return m_bluetooth_mac_isValid;
}

QString OAIGetTerminalDetailsResponse::getCompanyAccount() const {
    return m_company_account;
}
void OAIGetTerminalDetailsResponse::setCompanyAccount(const QString &company_account) {
    m_company_account = company_account;
    m_company_account_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_company_account_Set() const{
    return m_company_account_isSet;
}

bool OAIGetTerminalDetailsResponse::is_company_account_Valid() const{
    return m_company_account_isValid;
}

QString OAIGetTerminalDetailsResponse::getCountry() const {
    return m_country;
}
void OAIGetTerminalDetailsResponse::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_country_Set() const{
    return m_country_isSet;
}

bool OAIGetTerminalDetailsResponse::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIGetTerminalDetailsResponse::getDeviceModel() const {
    return m_device_model;
}
void OAIGetTerminalDetailsResponse::setDeviceModel(const QString &device_model) {
    m_device_model = device_model;
    m_device_model_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_device_model_Set() const{
    return m_device_model_isSet;
}

bool OAIGetTerminalDetailsResponse::is_device_model_Valid() const{
    return m_device_model_isValid;
}

bool OAIGetTerminalDetailsResponse::isDhcpEnabled() const {
    return m_dhcp_enabled;
}
void OAIGetTerminalDetailsResponse::setDhcpEnabled(const bool &dhcp_enabled) {
    m_dhcp_enabled = dhcp_enabled;
    m_dhcp_enabled_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_dhcp_enabled_Set() const{
    return m_dhcp_enabled_isSet;
}

bool OAIGetTerminalDetailsResponse::is_dhcp_enabled_Valid() const{
    return m_dhcp_enabled_isValid;
}

QString OAIGetTerminalDetailsResponse::getDisplayLabel() const {
    return m_display_label;
}
void OAIGetTerminalDetailsResponse::setDisplayLabel(const QString &display_label) {
    m_display_label = display_label;
    m_display_label_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_display_label_Set() const{
    return m_display_label_isSet;
}

bool OAIGetTerminalDetailsResponse::is_display_label_Valid() const{
    return m_display_label_isValid;
}

QString OAIGetTerminalDetailsResponse::getEthernetIp() const {
    return m_ethernet_ip;
}
void OAIGetTerminalDetailsResponse::setEthernetIp(const QString &ethernet_ip) {
    m_ethernet_ip = ethernet_ip;
    m_ethernet_ip_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_ethernet_ip_Set() const{
    return m_ethernet_ip_isSet;
}

bool OAIGetTerminalDetailsResponse::is_ethernet_ip_Valid() const{
    return m_ethernet_ip_isValid;
}

QString OAIGetTerminalDetailsResponse::getEthernetMac() const {
    return m_ethernet_mac;
}
void OAIGetTerminalDetailsResponse::setEthernetMac(const QString &ethernet_mac) {
    m_ethernet_mac = ethernet_mac;
    m_ethernet_mac_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_ethernet_mac_Set() const{
    return m_ethernet_mac_isSet;
}

bool OAIGetTerminalDetailsResponse::is_ethernet_mac_Valid() const{
    return m_ethernet_mac_isValid;
}

QString OAIGetTerminalDetailsResponse::getFirmwareVersion() const {
    return m_firmware_version;
}
void OAIGetTerminalDetailsResponse::setFirmwareVersion(const QString &firmware_version) {
    m_firmware_version = firmware_version;
    m_firmware_version_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_firmware_version_Set() const{
    return m_firmware_version_isSet;
}

bool OAIGetTerminalDetailsResponse::is_firmware_version_Valid() const{
    return m_firmware_version_isValid;
}

QString OAIGetTerminalDetailsResponse::getIccid() const {
    return m_iccid;
}
void OAIGetTerminalDetailsResponse::setIccid(const QString &iccid) {
    m_iccid = iccid;
    m_iccid_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_iccid_Set() const{
    return m_iccid_isSet;
}

bool OAIGetTerminalDetailsResponse::is_iccid_Valid() const{
    return m_iccid_isValid;
}

QDateTime OAIGetTerminalDetailsResponse::getLastActivityDateTime() const {
    return m_last_activity_date_time;
}
void OAIGetTerminalDetailsResponse::setLastActivityDateTime(const QDateTime &last_activity_date_time) {
    m_last_activity_date_time = last_activity_date_time;
    m_last_activity_date_time_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_last_activity_date_time_Set() const{
    return m_last_activity_date_time_isSet;
}

bool OAIGetTerminalDetailsResponse::is_last_activity_date_time_Valid() const{
    return m_last_activity_date_time_isValid;
}

QDateTime OAIGetTerminalDetailsResponse::getLastTransactionDateTime() const {
    return m_last_transaction_date_time;
}
void OAIGetTerminalDetailsResponse::setLastTransactionDateTime(const QDateTime &last_transaction_date_time) {
    m_last_transaction_date_time = last_transaction_date_time;
    m_last_transaction_date_time_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_last_transaction_date_time_Set() const{
    return m_last_transaction_date_time_isSet;
}

bool OAIGetTerminalDetailsResponse::is_last_transaction_date_time_Valid() const{
    return m_last_transaction_date_time_isValid;
}

QString OAIGetTerminalDetailsResponse::getLinkNegotiation() const {
    return m_link_negotiation;
}
void OAIGetTerminalDetailsResponse::setLinkNegotiation(const QString &link_negotiation) {
    m_link_negotiation = link_negotiation;
    m_link_negotiation_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_link_negotiation_Set() const{
    return m_link_negotiation_isSet;
}

bool OAIGetTerminalDetailsResponse::is_link_negotiation_Valid() const{
    return m_link_negotiation_isValid;
}

QString OAIGetTerminalDetailsResponse::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIGetTerminalDetailsResponse::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIGetTerminalDetailsResponse::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

bool OAIGetTerminalDetailsResponse::isMerchantInventory() const {
    return m_merchant_inventory;
}
void OAIGetTerminalDetailsResponse::setMerchantInventory(const bool &merchant_inventory) {
    m_merchant_inventory = merchant_inventory;
    m_merchant_inventory_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_merchant_inventory_Set() const{
    return m_merchant_inventory_isSet;
}

bool OAIGetTerminalDetailsResponse::is_merchant_inventory_Valid() const{
    return m_merchant_inventory_isValid;
}

QString OAIGetTerminalDetailsResponse::getPermanentTerminalId() const {
    return m_permanent_terminal_id;
}
void OAIGetTerminalDetailsResponse::setPermanentTerminalId(const QString &permanent_terminal_id) {
    m_permanent_terminal_id = permanent_terminal_id;
    m_permanent_terminal_id_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_permanent_terminal_id_Set() const{
    return m_permanent_terminal_id_isSet;
}

bool OAIGetTerminalDetailsResponse::is_permanent_terminal_id_Valid() const{
    return m_permanent_terminal_id_isValid;
}

QString OAIGetTerminalDetailsResponse::getSerialNumber() const {
    return m_serial_number;
}
void OAIGetTerminalDetailsResponse::setSerialNumber(const QString &serial_number) {
    m_serial_number = serial_number;
    m_serial_number_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_serial_number_Set() const{
    return m_serial_number_isSet;
}

bool OAIGetTerminalDetailsResponse::is_serial_number_Valid() const{
    return m_serial_number_isValid;
}

QString OAIGetTerminalDetailsResponse::getSimStatus() const {
    return m_sim_status;
}
void OAIGetTerminalDetailsResponse::setSimStatus(const QString &sim_status) {
    m_sim_status = sim_status;
    m_sim_status_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_sim_status_Set() const{
    return m_sim_status_isSet;
}

bool OAIGetTerminalDetailsResponse::is_sim_status_Valid() const{
    return m_sim_status_isValid;
}

QString OAIGetTerminalDetailsResponse::getStore() const {
    return m_store;
}
void OAIGetTerminalDetailsResponse::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_store_Set() const{
    return m_store_isSet;
}

bool OAIGetTerminalDetailsResponse::is_store_Valid() const{
    return m_store_isValid;
}

OAIStore OAIGetTerminalDetailsResponse::getStoreDetails() const {
    return m_store_details;
}
void OAIGetTerminalDetailsResponse::setStoreDetails(const OAIStore &store_details) {
    m_store_details = store_details;
    m_store_details_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_store_details_Set() const{
    return m_store_details_isSet;
}

bool OAIGetTerminalDetailsResponse::is_store_details_Valid() const{
    return m_store_details_isValid;
}

QString OAIGetTerminalDetailsResponse::getTerminal() const {
    return m_terminal;
}
void OAIGetTerminalDetailsResponse::setTerminal(const QString &terminal) {
    m_terminal = terminal;
    m_terminal_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_terminal_Set() const{
    return m_terminal_isSet;
}

bool OAIGetTerminalDetailsResponse::is_terminal_Valid() const{
    return m_terminal_isValid;
}

QString OAIGetTerminalDetailsResponse::getTerminalStatus() const {
    return m_terminal_status;
}
void OAIGetTerminalDetailsResponse::setTerminalStatus(const QString &terminal_status) {
    m_terminal_status = terminal_status;
    m_terminal_status_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_terminal_status_Set() const{
    return m_terminal_status_isSet;
}

bool OAIGetTerminalDetailsResponse::is_terminal_status_Valid() const{
    return m_terminal_status_isValid;
}

QString OAIGetTerminalDetailsResponse::getWifiIp() const {
    return m_wifi_ip;
}
void OAIGetTerminalDetailsResponse::setWifiIp(const QString &wifi_ip) {
    m_wifi_ip = wifi_ip;
    m_wifi_ip_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_wifi_ip_Set() const{
    return m_wifi_ip_isSet;
}

bool OAIGetTerminalDetailsResponse::is_wifi_ip_Valid() const{
    return m_wifi_ip_isValid;
}

QString OAIGetTerminalDetailsResponse::getWifiMac() const {
    return m_wifi_mac;
}
void OAIGetTerminalDetailsResponse::setWifiMac(const QString &wifi_mac) {
    m_wifi_mac = wifi_mac;
    m_wifi_mac_isSet = true;
}

bool OAIGetTerminalDetailsResponse::is_wifi_mac_Set() const{
    return m_wifi_mac_isSet;
}

bool OAIGetTerminalDetailsResponse::is_wifi_mac_Valid() const{
    return m_wifi_mac_isValid;
}

bool OAIGetTerminalDetailsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bluetooth_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bluetooth_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dhcp_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethernet_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ethernet_mac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_firmware_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iccid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_transaction_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_negotiation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_inventory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permanent_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sim_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wifi_mac_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTerminalDetailsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_company_account_isValid && m_terminal_isValid && true;
}

} // namespace OpenAPI
