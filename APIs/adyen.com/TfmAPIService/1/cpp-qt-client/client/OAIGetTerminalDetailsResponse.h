/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetTerminalDetailsResponse.h
 *
 * 
 */

#ifndef OAIGetTerminalDetailsResponse_H
#define OAIGetTerminalDetailsResponse_H

#include <QJsonObject>

#include "OAIStore.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStore;

class OAIGetTerminalDetailsResponse : public OAIObject {
public:
    OAIGetTerminalDetailsResponse();
    OAIGetTerminalDetailsResponse(QString json);
    ~OAIGetTerminalDetailsResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBluetoothIp() const;
    void setBluetoothIp(const QString &bluetooth_ip);
    bool is_bluetooth_ip_Set() const;
    bool is_bluetooth_ip_Valid() const;

    QString getBluetoothMac() const;
    void setBluetoothMac(const QString &bluetooth_mac);
    bool is_bluetooth_mac_Set() const;
    bool is_bluetooth_mac_Valid() const;

    QString getCompanyAccount() const;
    void setCompanyAccount(const QString &company_account);
    bool is_company_account_Set() const;
    bool is_company_account_Valid() const;

    QString getCountry() const;
    void setCountry(const QString &country);
    bool is_country_Set() const;
    bool is_country_Valid() const;

    QString getDeviceModel() const;
    void setDeviceModel(const QString &device_model);
    bool is_device_model_Set() const;
    bool is_device_model_Valid() const;

    bool isDhcpEnabled() const;
    void setDhcpEnabled(const bool &dhcp_enabled);
    bool is_dhcp_enabled_Set() const;
    bool is_dhcp_enabled_Valid() const;

    QString getDisplayLabel() const;
    void setDisplayLabel(const QString &display_label);
    bool is_display_label_Set() const;
    bool is_display_label_Valid() const;

    QString getEthernetIp() const;
    void setEthernetIp(const QString &ethernet_ip);
    bool is_ethernet_ip_Set() const;
    bool is_ethernet_ip_Valid() const;

    QString getEthernetMac() const;
    void setEthernetMac(const QString &ethernet_mac);
    bool is_ethernet_mac_Set() const;
    bool is_ethernet_mac_Valid() const;

    QString getFirmwareVersion() const;
    void setFirmwareVersion(const QString &firmware_version);
    bool is_firmware_version_Set() const;
    bool is_firmware_version_Valid() const;

    QString getIccid() const;
    void setIccid(const QString &iccid);
    bool is_iccid_Set() const;
    bool is_iccid_Valid() const;

    QDateTime getLastActivityDateTime() const;
    void setLastActivityDateTime(const QDateTime &last_activity_date_time);
    bool is_last_activity_date_time_Set() const;
    bool is_last_activity_date_time_Valid() const;

    QDateTime getLastTransactionDateTime() const;
    void setLastTransactionDateTime(const QDateTime &last_transaction_date_time);
    bool is_last_transaction_date_time_Set() const;
    bool is_last_transaction_date_time_Valid() const;

    QString getLinkNegotiation() const;
    void setLinkNegotiation(const QString &link_negotiation);
    bool is_link_negotiation_Set() const;
    bool is_link_negotiation_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    bool isMerchantInventory() const;
    void setMerchantInventory(const bool &merchant_inventory);
    bool is_merchant_inventory_Set() const;
    bool is_merchant_inventory_Valid() const;

    QString getPermanentTerminalId() const;
    void setPermanentTerminalId(const QString &permanent_terminal_id);
    bool is_permanent_terminal_id_Set() const;
    bool is_permanent_terminal_id_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getSimStatus() const;
    void setSimStatus(const QString &sim_status);
    bool is_sim_status_Set() const;
    bool is_sim_status_Valid() const;

    QString getStore() const;
    void setStore(const QString &store);
    bool is_store_Set() const;
    bool is_store_Valid() const;

    OAIStore getStoreDetails() const;
    void setStoreDetails(const OAIStore &store_details);
    bool is_store_details_Set() const;
    bool is_store_details_Valid() const;

    QString getTerminal() const;
    void setTerminal(const QString &terminal);
    bool is_terminal_Set() const;
    bool is_terminal_Valid() const;

    QString getTerminalStatus() const;
    void setTerminalStatus(const QString &terminal_status);
    bool is_terminal_status_Set() const;
    bool is_terminal_status_Valid() const;

    QString getWifiIp() const;
    void setWifiIp(const QString &wifi_ip);
    bool is_wifi_ip_Set() const;
    bool is_wifi_ip_Valid() const;

    QString getWifiMac() const;
    void setWifiMac(const QString &wifi_mac);
    bool is_wifi_mac_Set() const;
    bool is_wifi_mac_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bluetooth_ip;
    bool m_bluetooth_ip_isSet;
    bool m_bluetooth_ip_isValid;

    QString m_bluetooth_mac;
    bool m_bluetooth_mac_isSet;
    bool m_bluetooth_mac_isValid;

    QString m_company_account;
    bool m_company_account_isSet;
    bool m_company_account_isValid;

    QString m_country;
    bool m_country_isSet;
    bool m_country_isValid;

    QString m_device_model;
    bool m_device_model_isSet;
    bool m_device_model_isValid;

    bool m_dhcp_enabled;
    bool m_dhcp_enabled_isSet;
    bool m_dhcp_enabled_isValid;

    QString m_display_label;
    bool m_display_label_isSet;
    bool m_display_label_isValid;

    QString m_ethernet_ip;
    bool m_ethernet_ip_isSet;
    bool m_ethernet_ip_isValid;

    QString m_ethernet_mac;
    bool m_ethernet_mac_isSet;
    bool m_ethernet_mac_isValid;

    QString m_firmware_version;
    bool m_firmware_version_isSet;
    bool m_firmware_version_isValid;

    QString m_iccid;
    bool m_iccid_isSet;
    bool m_iccid_isValid;

    QDateTime m_last_activity_date_time;
    bool m_last_activity_date_time_isSet;
    bool m_last_activity_date_time_isValid;

    QDateTime m_last_transaction_date_time;
    bool m_last_transaction_date_time_isSet;
    bool m_last_transaction_date_time_isValid;

    QString m_link_negotiation;
    bool m_link_negotiation_isSet;
    bool m_link_negotiation_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    bool m_merchant_inventory;
    bool m_merchant_inventory_isSet;
    bool m_merchant_inventory_isValid;

    QString m_permanent_terminal_id;
    bool m_permanent_terminal_id_isSet;
    bool m_permanent_terminal_id_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_sim_status;
    bool m_sim_status_isSet;
    bool m_sim_status_isValid;

    QString m_store;
    bool m_store_isSet;
    bool m_store_isValid;

    OAIStore m_store_details;
    bool m_store_details_isSet;
    bool m_store_details_isValid;

    QString m_terminal;
    bool m_terminal_isSet;
    bool m_terminal_isValid;

    QString m_terminal_status;
    bool m_terminal_status_isSet;
    bool m_terminal_status_isValid;

    QString m_wifi_ip;
    bool m_wifi_ip_isSet;
    bool m_wifi_ip_isValid;

    QString m_wifi_mac;
    bool m_wifi_mac_isSet;
    bool m_wifi_mac_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetTerminalDetailsResponse)

#endif // OAIGetTerminalDetailsResponse_H
