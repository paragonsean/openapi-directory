# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssignTerminalsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_account: str=None, merchant_account: str=None, merchant_inventory: bool=None, store: str=None, terminals: List[str]=None):
        """AssignTerminalsRequest - a model defined in OpenAPI

        :param company_account: The company_account of this AssignTerminalsRequest.
        :param merchant_account: The merchant_account of this AssignTerminalsRequest.
        :param merchant_inventory: The merchant_inventory of this AssignTerminalsRequest.
        :param store: The store of this AssignTerminalsRequest.
        :param terminals: The terminals of this AssignTerminalsRequest.
        """
        self.openapi_types = {
            'company_account': str,
            'merchant_account': str,
            'merchant_inventory': bool,
            'store': str,
            'terminals': List[str]
        }

        self.attribute_map = {
            'company_account': 'companyAccount',
            'merchant_account': 'merchantAccount',
            'merchant_inventory': 'merchantInventory',
            'store': 'store',
            'terminals': 'terminals'
        }

        self._company_account = company_account
        self._merchant_account = merchant_account
        self._merchant_inventory = merchant_inventory
        self._store = store
        self._terminals = terminals

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssignTerminalsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssignTerminalsRequest of this AssignTerminalsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_account(self):
        """Gets the company_account of this AssignTerminalsRequest.

        Your company account. To return terminals to the company inventory, specify only this parameter and the `terminals`.

        :return: The company_account of this AssignTerminalsRequest.
        :rtype: str
        """
        return self._company_account

    @company_account.setter
    def company_account(self, company_account):
        """Sets the company_account of this AssignTerminalsRequest.

        Your company account. To return terminals to the company inventory, specify only this parameter and the `terminals`.

        :param company_account: The company_account of this AssignTerminalsRequest.
        :type company_account: str
        """
        if company_account is None:
            raise ValueError("Invalid value for `company_account`, must not be `None`")

        self._company_account = company_account

    @property
    def merchant_account(self):
        """Gets the merchant_account of this AssignTerminalsRequest.

        Name of the merchant account. Specify this parameter to assign terminals to this merchant account or to a store under this merchant account.

        :return: The merchant_account of this AssignTerminalsRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this AssignTerminalsRequest.

        Name of the merchant account. Specify this parameter to assign terminals to this merchant account or to a store under this merchant account.

        :param merchant_account: The merchant_account of this AssignTerminalsRequest.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def merchant_inventory(self):
        """Gets the merchant_inventory of this AssignTerminalsRequest.

        Boolean that indicates if you are assigning the terminals to the merchant inventory. Do not use when assigning terminals to a store. Required when assigning the terminal to a merchant account.  - Set this to **true** to assign the terminals to the merchant inventory. This also means that the terminals cannot be boarded.  - Set this to **false** to assign the terminals to the merchant account as in-store terminals. This makes the terminals ready to be boarded and to process payments through the specified merchant account.

        :return: The merchant_inventory of this AssignTerminalsRequest.
        :rtype: bool
        """
        return self._merchant_inventory

    @merchant_inventory.setter
    def merchant_inventory(self, merchant_inventory):
        """Sets the merchant_inventory of this AssignTerminalsRequest.

        Boolean that indicates if you are assigning the terminals to the merchant inventory. Do not use when assigning terminals to a store. Required when assigning the terminal to a merchant account.  - Set this to **true** to assign the terminals to the merchant inventory. This also means that the terminals cannot be boarded.  - Set this to **false** to assign the terminals to the merchant account as in-store terminals. This makes the terminals ready to be boarded and to process payments through the specified merchant account.

        :param merchant_inventory: The merchant_inventory of this AssignTerminalsRequest.
        :type merchant_inventory: bool
        """

        self._merchant_inventory = merchant_inventory

    @property
    def store(self):
        """Gets the store of this AssignTerminalsRequest.

        The store code of the store that you want to assign the terminals to.

        :return: The store of this AssignTerminalsRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this AssignTerminalsRequest.

        The store code of the store that you want to assign the terminals to.

        :param store: The store of this AssignTerminalsRequest.
        :type store: str
        """

        self._store = store

    @property
    def terminals(self):
        """Gets the terminals of this AssignTerminalsRequest.

        Array containing a list of terminal IDs that you want to assign or reassign to the merchant account or store, or that you want to return to the company inventory.  For example, `[\"V400m-324689776\",\"P400Plus-329127412\"]`.

        :return: The terminals of this AssignTerminalsRequest.
        :rtype: List[str]
        """
        return self._terminals

    @terminals.setter
    def terminals(self, terminals):
        """Sets the terminals of this AssignTerminalsRequest.

        Array containing a list of terminal IDs that you want to assign or reassign to the merchant account or store, or that you want to return to the company inventory.  For example, `[\"V400m-324689776\",\"P400Plus-329127412\"]`.

        :param terminals: The terminals of this AssignTerminalsRequest.
        :type terminals: List[str]
        """
        if terminals is None:
            raise ValueError("Invalid value for `terminals`, must not be `None`")

        self._terminals = terminals
