# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FindTerminalResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_account: str=None, merchant_account: str=None, merchant_inventory: bool=None, store: str=None, terminal: str=None):
        """FindTerminalResponse - a model defined in OpenAPI

        :param company_account: The company_account of this FindTerminalResponse.
        :param merchant_account: The merchant_account of this FindTerminalResponse.
        :param merchant_inventory: The merchant_inventory of this FindTerminalResponse.
        :param store: The store of this FindTerminalResponse.
        :param terminal: The terminal of this FindTerminalResponse.
        """
        self.openapi_types = {
            'company_account': str,
            'merchant_account': str,
            'merchant_inventory': bool,
            'store': str,
            'terminal': str
        }

        self.attribute_map = {
            'company_account': 'companyAccount',
            'merchant_account': 'merchantAccount',
            'merchant_inventory': 'merchantInventory',
            'store': 'store',
            'terminal': 'terminal'
        }

        self._company_account = company_account
        self._merchant_account = merchant_account
        self._merchant_inventory = merchant_inventory
        self._store = store
        self._terminal = terminal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FindTerminalResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FindTerminalResponse of this FindTerminalResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_account(self):
        """Gets the company_account of this FindTerminalResponse.

        The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.

        :return: The company_account of this FindTerminalResponse.
        :rtype: str
        """
        return self._company_account

    @company_account.setter
    def company_account(self, company_account):
        """Sets the company_account of this FindTerminalResponse.

        The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.

        :param company_account: The company_account of this FindTerminalResponse.
        :type company_account: str
        """
        if company_account is None:
            raise ValueError("Invalid value for `company_account`, must not be `None`")

        self._company_account = company_account

    @property
    def merchant_account(self):
        """Gets the merchant_account of this FindTerminalResponse.

        The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.

        :return: The merchant_account of this FindTerminalResponse.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this FindTerminalResponse.

        The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.

        :param merchant_account: The merchant_account of this FindTerminalResponse.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def merchant_inventory(self):
        """Gets the merchant_inventory of this FindTerminalResponse.

        Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.  - If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.  - If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.

        :return: The merchant_inventory of this FindTerminalResponse.
        :rtype: bool
        """
        return self._merchant_inventory

    @merchant_inventory.setter
    def merchant_inventory(self, merchant_inventory):
        """Sets the merchant_inventory of this FindTerminalResponse.

        Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.  - If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.  - If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.

        :param merchant_inventory: The merchant_inventory of this FindTerminalResponse.
        :type merchant_inventory: bool
        """

        self._merchant_inventory = merchant_inventory

    @property
    def store(self):
        """Gets the store of this FindTerminalResponse.

        The store code of the store that the terminal is assigned to.

        :return: The store of this FindTerminalResponse.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this FindTerminalResponse.

        The store code of the store that the terminal is assigned to.

        :param store: The store of this FindTerminalResponse.
        :type store: str
        """

        self._store = store

    @property
    def terminal(self):
        """Gets the terminal of this FindTerminalResponse.

        The unique terminal ID.

        :return: The terminal of this FindTerminalResponse.
        :rtype: str
        """
        return self._terminal

    @terminal.setter
    def terminal(self, terminal):
        """Sets the terminal of this FindTerminalResponse.

        The unique terminal ID.

        :param terminal: The terminal of this FindTerminalResponse.
        :type terminal: str
        """
        if terminal is None:
            raise ValueError("Invalid value for `terminal`, must not be `None`")

        self._terminal = terminal
