# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country_code: str=None, postal_code: str=None, state_or_province: str=None, street_address: str=None, street_address2: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country_code: The country_code of this Address.
        :param postal_code: The postal_code of this Address.
        :param state_or_province: The state_or_province of this Address.
        :param street_address: The street_address of this Address.
        :param street_address2: The street_address2 of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country_code': str,
            'postal_code': str,
            'state_or_province': str,
            'street_address': str,
            'street_address2': str
        }

        self.attribute_map = {
            'city': 'city',
            'country_code': 'countryCode',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince',
            'street_address': 'streetAddress',
            'street_address2': 'streetAddress2'
        }

        self._city = city
        self._country_code = country_code
        self._postal_code = postal_code
        self._state_or_province = state_or_province
        self._street_address = street_address
        self._street_address2 = street_address2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country_code(self):
        """Gets the country_code of this Address.


        :return: The country_code of this Address.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Address.


        :param country_code: The country_code of this Address.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.


        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this Address.


        :return: The state_or_province of this Address.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this Address.


        :param state_or_province: The state_or_province of this Address.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def street_address(self):
        """Gets the street_address of this Address.


        :return: The street_address of this Address.
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this Address.


        :param street_address: The street_address of this Address.
        :type street_address: str
        """

        self._street_address = street_address

    @property
    def street_address2(self):
        """Gets the street_address2 of this Address.


        :return: The street_address2 of this Address.
        :rtype: str
        """
        return self._street_address2

    @street_address2.setter
    def street_address2(self, street_address2):
        """Sets the street_address2 of this Address.


        :param street_address2: The street_address2 of this Address.
        :type street_address2: str
        """

        self._street_address2 = street_address2
