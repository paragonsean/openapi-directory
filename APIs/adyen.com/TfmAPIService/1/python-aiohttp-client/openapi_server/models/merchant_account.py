# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.store import Store
from openapi_server import util


class MerchantAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_store_terminals: List[str]=None, inventory_terminals: List[str]=None, merchant_account: str=None, stores: List[Store]=None):
        """MerchantAccount - a model defined in OpenAPI

        :param in_store_terminals: The in_store_terminals of this MerchantAccount.
        :param inventory_terminals: The inventory_terminals of this MerchantAccount.
        :param merchant_account: The merchant_account of this MerchantAccount.
        :param stores: The stores of this MerchantAccount.
        """
        self.openapi_types = {
            'in_store_terminals': List[str],
            'inventory_terminals': List[str],
            'merchant_account': str,
            'stores': List[Store]
        }

        self.attribute_map = {
            'in_store_terminals': 'inStoreTerminals',
            'inventory_terminals': 'inventoryTerminals',
            'merchant_account': 'merchantAccount',
            'stores': 'stores'
        }

        self._in_store_terminals = in_store_terminals
        self._inventory_terminals = inventory_terminals
        self._merchant_account = merchant_account
        self._stores = stores

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantAccount of this MerchantAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_store_terminals(self):
        """Gets the in_store_terminals of this MerchantAccount.

        List of terminals assigned to this merchant account as in-store terminals. This means that the terminal is ready to be boarded, or is already boarded.

        :return: The in_store_terminals of this MerchantAccount.
        :rtype: List[str]
        """
        return self._in_store_terminals

    @in_store_terminals.setter
    def in_store_terminals(self, in_store_terminals):
        """Sets the in_store_terminals of this MerchantAccount.

        List of terminals assigned to this merchant account as in-store terminals. This means that the terminal is ready to be boarded, or is already boarded.

        :param in_store_terminals: The in_store_terminals of this MerchantAccount.
        :type in_store_terminals: List[str]
        """

        self._in_store_terminals = in_store_terminals

    @property
    def inventory_terminals(self):
        """Gets the inventory_terminals of this MerchantAccount.

        List of terminals assigned to the inventory of this merchant account.

        :return: The inventory_terminals of this MerchantAccount.
        :rtype: List[str]
        """
        return self._inventory_terminals

    @inventory_terminals.setter
    def inventory_terminals(self, inventory_terminals):
        """Sets the inventory_terminals of this MerchantAccount.

        List of terminals assigned to the inventory of this merchant account.

        :param inventory_terminals: The inventory_terminals of this MerchantAccount.
        :type inventory_terminals: List[str]
        """

        self._inventory_terminals = inventory_terminals

    @property
    def merchant_account(self):
        """Gets the merchant_account of this MerchantAccount.

        The merchant account.

        :return: The merchant_account of this MerchantAccount.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this MerchantAccount.

        The merchant account.

        :param merchant_account: The merchant_account of this MerchantAccount.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def stores(self):
        """Gets the stores of this MerchantAccount.

        Array of stores under this merchant account.

        :return: The stores of this MerchantAccount.
        :rtype: List[Store]
        """
        return self._stores

    @stores.setter
    def stores(self, stores):
        """Sets the stores of this MerchantAccount.

        Array of stores under this merchant account.

        :param stores: The stores of this MerchantAccount.
        :type stores: List[Store]
        """

        self._stores = stores
