# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Store(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, description: str=None, in_store_terminals: List[str]=None, merchant_account_code: str=None, status: str=None, store: str=None):
        """Store - a model defined in OpenAPI

        :param address: The address of this Store.
        :param description: The description of this Store.
        :param in_store_terminals: The in_store_terminals of this Store.
        :param merchant_account_code: The merchant_account_code of this Store.
        :param status: The status of this Store.
        :param store: The store of this Store.
        """
        self.openapi_types = {
            'address': Address,
            'description': str,
            'in_store_terminals': List[str],
            'merchant_account_code': str,
            'status': str,
            'store': str
        }

        self.attribute_map = {
            'address': 'address',
            'description': 'description',
            'in_store_terminals': 'inStoreTerminals',
            'merchant_account_code': 'merchantAccountCode',
            'status': 'status',
            'store': 'store'
        }

        self._address = address
        self._description = description
        self._in_store_terminals = in_store_terminals
        self._merchant_account_code = merchant_account_code
        self._status = status
        self._store = store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Store':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Store of this Store.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Store.

        The address of the store.

        :return: The address of this Store.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Store.

        The address of the store.

        :param address: The address of this Store.
        :type address: Address
        """

        self._address = address

    @property
    def description(self):
        """Gets the description of this Store.

        The description of the store.

        :return: The description of this Store.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Store.

        The description of the store.

        :param description: The description of this Store.
        :type description: str
        """

        self._description = description

    @property
    def in_store_terminals(self):
        """Gets the in_store_terminals of this Store.

        The list of terminals assigned to the store.

        :return: The in_store_terminals of this Store.
        :rtype: List[str]
        """
        return self._in_store_terminals

    @in_store_terminals.setter
    def in_store_terminals(self, in_store_terminals):
        """Sets the in_store_terminals of this Store.

        The list of terminals assigned to the store.

        :param in_store_terminals: The in_store_terminals of this Store.
        :type in_store_terminals: List[str]
        """

        self._in_store_terminals = in_store_terminals

    @property
    def merchant_account_code(self):
        """Gets the merchant_account_code of this Store.

        The code of the merchant account.

        :return: The merchant_account_code of this Store.
        :rtype: str
        """
        return self._merchant_account_code

    @merchant_account_code.setter
    def merchant_account_code(self, merchant_account_code):
        """Sets the merchant_account_code of this Store.

        The code of the merchant account.

        :param merchant_account_code: The merchant_account_code of this Store.
        :type merchant_account_code: str
        """

        self._merchant_account_code = merchant_account_code

    @property
    def status(self):
        """Gets the status of this Store.

        The status of the store:  - `PreActive`: the store has been created, but not yet activated.   - `Active`: the store has been activated. This means you can process payments for this store.   - `Inactive`: the store is currently not active.   - `InactiveWithModifications`: the store is currently not active, but payment modifications such as refunds are possible.   - `Closed`: the store has been closed. 

        :return: The status of this Store.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Store.

        The status of the store:  - `PreActive`: the store has been created, but not yet activated.   - `Active`: the store has been activated. This means you can process payments for this store.   - `Inactive`: the store is currently not active.   - `InactiveWithModifications`: the store is currently not active, but payment modifications such as refunds are possible.   - `Closed`: the store has been closed. 

        :param status: The status of this Store.
        :type status: str
        """

        self._status = status

    @property
    def store(self):
        """Gets the store of this Store.

        The code of the store.

        :return: The store of this Store.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this Store.

        The code of the store.

        :param store: The store of this Store.
        :type store: str
        """
        if store is None:
            raise ValueError("Invalid value for `store`, must not be `None`")

        self._store = store
