# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTerminalsUnderAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, company_account: str=None, merchant_account: str=None, store: str=None):
        """GetTerminalsUnderAccountRequest - a model defined in OpenAPI

        :param company_account: The company_account of this GetTerminalsUnderAccountRequest.
        :param merchant_account: The merchant_account of this GetTerminalsUnderAccountRequest.
        :param store: The store of this GetTerminalsUnderAccountRequest.
        """
        self.openapi_types = {
            'company_account': str,
            'merchant_account': str,
            'store': str
        }

        self.attribute_map = {
            'company_account': 'companyAccount',
            'merchant_account': 'merchantAccount',
            'store': 'store'
        }

        self._company_account = company_account
        self._merchant_account = merchant_account
        self._store = store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTerminalsUnderAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTerminalsUnderAccountRequest of this GetTerminalsUnderAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def company_account(self):
        """Gets the company_account of this GetTerminalsUnderAccountRequest.

        Your company account. If you only specify this parameter, the response includes all terminals at all account levels.

        :return: The company_account of this GetTerminalsUnderAccountRequest.
        :rtype: str
        """
        return self._company_account

    @company_account.setter
    def company_account(self, company_account):
        """Sets the company_account of this GetTerminalsUnderAccountRequest.

        Your company account. If you only specify this parameter, the response includes all terminals at all account levels.

        :param company_account: The company_account of this GetTerminalsUnderAccountRequest.
        :type company_account: str
        """
        if company_account is None:
            raise ValueError("Invalid value for `company_account`, must not be `None`")

        self._company_account = company_account

    @property
    def merchant_account(self):
        """Gets the merchant_account of this GetTerminalsUnderAccountRequest.

        The merchant account. This is required if you are retrieving the terminals assigned to a store.If you don't specify a `store` the response includes the terminals assigned to the specified merchant account and the terminals assigned to the stores under this merchant account.

        :return: The merchant_account of this GetTerminalsUnderAccountRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this GetTerminalsUnderAccountRequest.

        The merchant account. This is required if you are retrieving the terminals assigned to a store.If you don't specify a `store` the response includes the terminals assigned to the specified merchant account and the terminals assigned to the stores under this merchant account.

        :param merchant_account: The merchant_account of this GetTerminalsUnderAccountRequest.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def store(self):
        """Gets the store of this GetTerminalsUnderAccountRequest.

        The store code of the store. With this parameter, the response only includes the terminals assigned to the specified store.

        :return: The store of this GetTerminalsUnderAccountRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this GetTerminalsUnderAccountRequest.

        The store code of the store. With this parameter, the response only includes the terminals assigned to the specified store.

        :param store: The store of this GetTerminalsUnderAccountRequest.
        :type store: str
        """

        self._store = store
