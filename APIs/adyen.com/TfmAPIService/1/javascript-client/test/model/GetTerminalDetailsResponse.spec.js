/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PosTerminalManagementApi);
  }
}(this, function(expect, PosTerminalManagementApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetTerminalDetailsResponse', function() {
    it('should create an instance of GetTerminalDetailsResponse', function() {
      // uncomment below and update the code to test GetTerminalDetailsResponse
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be.a(PosTerminalManagementApi.GetTerminalDetailsResponse);
    });

    it('should have the property bluetoothIp (base name: "bluetoothIp")', function() {
      // uncomment below and update the code to test the property bluetoothIp
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property bluetoothMac (base name: "bluetoothMac")', function() {
      // uncomment below and update the code to test the property bluetoothMac
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property companyAccount (base name: "companyAccount")', function() {
      // uncomment below and update the code to test the property companyAccount
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property country (base name: "country")', function() {
      // uncomment below and update the code to test the property country
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property deviceModel (base name: "deviceModel")', function() {
      // uncomment below and update the code to test the property deviceModel
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property dhcpEnabled (base name: "dhcpEnabled")', function() {
      // uncomment below and update the code to test the property dhcpEnabled
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property displayLabel (base name: "displayLabel")', function() {
      // uncomment below and update the code to test the property displayLabel
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property ethernetIp (base name: "ethernetIp")', function() {
      // uncomment below and update the code to test the property ethernetIp
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property ethernetMac (base name: "ethernetMac")', function() {
      // uncomment below and update the code to test the property ethernetMac
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property firmwareVersion (base name: "firmwareVersion")', function() {
      // uncomment below and update the code to test the property firmwareVersion
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property iccid (base name: "iccid")', function() {
      // uncomment below and update the code to test the property iccid
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityDateTime (base name: "lastActivityDateTime")', function() {
      // uncomment below and update the code to test the property lastActivityDateTime
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property lastTransactionDateTime (base name: "lastTransactionDateTime")', function() {
      // uncomment below and update the code to test the property lastTransactionDateTime
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property linkNegotiation (base name: "linkNegotiation")', function() {
      // uncomment below and update the code to test the property linkNegotiation
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property merchantAccount (base name: "merchantAccount")', function() {
      // uncomment below and update the code to test the property merchantAccount
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property merchantInventory (base name: "merchantInventory")', function() {
      // uncomment below and update the code to test the property merchantInventory
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property permanentTerminalId (base name: "permanentTerminalId")', function() {
      // uncomment below and update the code to test the property permanentTerminalId
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property serialNumber (base name: "serialNumber")', function() {
      // uncomment below and update the code to test the property serialNumber
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property simStatus (base name: "simStatus")', function() {
      // uncomment below and update the code to test the property simStatus
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property store (base name: "store")', function() {
      // uncomment below and update the code to test the property store
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property storeDetails (base name: "storeDetails")', function() {
      // uncomment below and update the code to test the property storeDetails
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property terminal (base name: "terminal")', function() {
      // uncomment below and update the code to test the property terminal
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property terminalStatus (base name: "terminalStatus")', function() {
      // uncomment below and update the code to test the property terminalStatus
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property wifiIp (base name: "wifiIp")', function() {
      // uncomment below and update the code to test the property wifiIp
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

    it('should have the property wifiMac (base name: "wifiMac")', function() {
      // uncomment below and update the code to test the property wifiMac
      //var instance = new PosTerminalManagementApi.GetTerminalDetailsResponse();
      //expect(instance).to.be();
    });

  });

}));
