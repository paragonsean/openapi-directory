/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The Store model module.
 * @module model/Store
 * @version 1
 */
class Store {
    /**
     * Constructs a new <code>Store</code>.
     * @alias module:model/Store
     * @param store {String} The code of the store.
     */
    constructor(store) { 
        
        Store.initialize(this, store);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, store) { 
        obj['store'] = store;
    }

    /**
     * Constructs a <code>Store</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Store} obj Optional instance to populate.
     * @return {module:model/Store} The populated <code>Store</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Store();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('inStoreTerminals')) {
                obj['inStoreTerminals'] = ApiClient.convertToType(data['inStoreTerminals'], ['String']);
            }
            if (data.hasOwnProperty('merchantAccountCode')) {
                obj['merchantAccountCode'] = ApiClient.convertToType(data['merchantAccountCode'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Store</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Store</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Store.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['inStoreTerminals'])) {
            throw new Error("Expected the field `inStoreTerminals` to be an array in the JSON data but got " + data['inStoreTerminals']);
        }
        // ensure the json data is a string
        if (data['merchantAccountCode'] && !(typeof data['merchantAccountCode'] === 'string' || data['merchantAccountCode'] instanceof String)) {
            throw new Error("Expected the field `merchantAccountCode` to be a primitive type in the JSON string but got " + data['merchantAccountCode']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }

        return true;
    }


}

Store.RequiredProperties = ["store"];

/**
 * The address of the store.
 * @member {module:model/Address} address
 */
Store.prototype['address'] = undefined;

/**
 * The description of the store.
 * @member {String} description
 */
Store.prototype['description'] = undefined;

/**
 * The list of terminals assigned to the store.
 * @member {Array.<String>} inStoreTerminals
 */
Store.prototype['inStoreTerminals'] = undefined;

/**
 * The code of the merchant account.
 * @member {String} merchantAccountCode
 */
Store.prototype['merchantAccountCode'] = undefined;

/**
 * The status of the store:  - `PreActive`: the store has been created, but not yet activated.   - `Active`: the store has been activated. This means you can process payments for this store.   - `Inactive`: the store is currently not active.   - `InactiveWithModifications`: the store is currently not active, but payment modifications such as refunds are possible.   - `Closed`: the store has been closed. 
 * @member {String} status
 */
Store.prototype['status'] = undefined;

/**
 * The code of the store.
 * @member {String} store
 */
Store.prototype['store'] = undefined;






export default Store;

