/**
 * POS Terminal Management API
 * This API provides endpoints for managing your point-of-sale (POS) payment terminals. You can use the API to obtain information about a specific terminal, retrieve overviews of your terminals and stores, and assign terminals to a merchant account or store.  For more information, refer to [Assign terminals](https://docs.adyen.com/point-of-sale/automating-terminal-management/assign-terminals-api).  ## Authentication Each request to the Terminal Management API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Terminal Management API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://postfmapi-test.adyen.com/postfmapi/terminal/v1/getTerminalsUnderAccount ``` When using versioned endpoints, Boolean response values are returned in string format: `\"true\"` or `\"false\"`. If you omit the version from the endpoint URL, Boolean response values are returned like this: `true` or `false`.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FindTerminalResponse model module.
 * @module model/FindTerminalResponse
 * @version 1
 */
class FindTerminalResponse {
    /**
     * Constructs a new <code>FindTerminalResponse</code>.
     * @alias module:model/FindTerminalResponse
     * @param companyAccount {String} The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.
     * @param terminal {String} The unique terminal ID.
     */
    constructor(companyAccount, terminal) { 
        
        FindTerminalResponse.initialize(this, companyAccount, terminal);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyAccount, terminal) { 
        obj['companyAccount'] = companyAccount;
        obj['terminal'] = terminal;
    }

    /**
     * Constructs a <code>FindTerminalResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FindTerminalResponse} obj Optional instance to populate.
     * @return {module:model/FindTerminalResponse} The populated <code>FindTerminalResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FindTerminalResponse();

            if (data.hasOwnProperty('companyAccount')) {
                obj['companyAccount'] = ApiClient.convertToType(data['companyAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantInventory')) {
                obj['merchantInventory'] = ApiClient.convertToType(data['merchantInventory'], 'Boolean');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('terminal')) {
                obj['terminal'] = ApiClient.convertToType(data['terminal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FindTerminalResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FindTerminalResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FindTerminalResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['companyAccount'] && !(typeof data['companyAccount'] === 'string' || data['companyAccount'] instanceof String)) {
            throw new Error("Expected the field `companyAccount` to be a primitive type in the JSON string but got " + data['companyAccount']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['terminal'] && !(typeof data['terminal'] === 'string' || data['terminal'] instanceof String)) {
            throw new Error("Expected the field `terminal` to be a primitive type in the JSON string but got " + data['terminal']);
        }

        return true;
    }


}

FindTerminalResponse.RequiredProperties = ["companyAccount", "terminal"];

/**
 * The company account that the terminal is associated with. If this is the only account level shown in the response, the terminal is assigned to the inventory of the company account.
 * @member {String} companyAccount
 */
FindTerminalResponse.prototype['companyAccount'] = undefined;

/**
 * The merchant account that the terminal is associated with. If the response doesn't contain a `store` the terminal is assigned to this merchant account.
 * @member {String} merchantAccount
 */
FindTerminalResponse.prototype['merchantAccount'] = undefined;

/**
 * Boolean that indicates if the terminal is assigned to the merchant inventory. This is returned when the terminal is assigned to a merchant account.  - If **true**, this indicates that the terminal is in the merchant inventory. This also means that the terminal cannot be boarded.  - If **false**, this indicates that the terminal is assigned to the merchant account as an in-store terminal. This means that the terminal is ready to be boarded, or is already boarded.
 * @member {Boolean} merchantInventory
 */
FindTerminalResponse.prototype['merchantInventory'] = undefined;

/**
 * The store code of the store that the terminal is assigned to.
 * @member {String} store
 */
FindTerminalResponse.prototype['store'] = undefined;

/**
 * The unique terminal ID.
 * @member {String} terminal
 */
FindTerminalResponse.prototype['terminal'] = undefined;






export default FindTerminalResponse;

