# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, postal_code: str=None, state_or_province: str=None, street: str=None, street2: str=None):
        """Address3 - a model defined in OpenAPI

        :param city: The city of this Address3.
        :param country: The country of this Address3.
        :param postal_code: The postal_code of this Address3.
        :param state_or_province: The state_or_province of this Address3.
        :param street: The street of this Address3.
        :param street2: The street2 of this Address3.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'postal_code': str,
            'state_or_province': str,
            'street': str,
            'street2': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince',
            'street': 'street',
            'street2': 'street2'
        }

        self._city = city
        self._country = country
        self._postal_code = postal_code
        self._state_or_province = state_or_province
        self._street = street
        self._street2 = street2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address-3 of this Address3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address3.

        The name of the city. Required if `stateOrProvince` is provided.  If you specify the city, you must also send `postalCode` and `street`.

        :return: The city of this Address3.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address3.

        The name of the city. Required if `stateOrProvince` is provided.  If you specify the city, you must also send `postalCode` and `street`.

        :param city: The city of this Address3.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address3.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.

        :return: The country of this Address3.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address3.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code.

        :param country: The country of this Address3.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this Address3.

        Postal code. Required if `stateOrProvince` and/or `city` is provided.

        :return: The postal_code of this Address3.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address3.

        Postal code. Required if `stateOrProvince` and/or `city` is provided.

        :param postal_code: The postal_code of this Address3.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this Address3.

        The two-letter ISO 3166-2 state or province code. For example, **CA** in the US.   If you specify the state or province, you must also send `city`, `postalCode`, and `street`.

        :return: The state_or_province of this Address3.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this Address3.

        The two-letter ISO 3166-2 state or province code. For example, **CA** in the US.   If you specify the state or province, you must also send `city`, `postalCode`, and `street`.

        :param state_or_province: The state_or_province of this Address3.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def street(self):
        """Gets the street of this Address3.

        The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.

        :return: The street of this Address3.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this Address3.

        The name of the street, and the house or building number. Required if `stateOrProvince` and/or `city` is provided.

        :param street: The street of this Address3.
        :type street: str
        """

        self._street = street

    @property
    def street2(self):
        """Gets the street2 of this Address3.

        The apartment, unit, or suite number.

        :return: The street2 of this Address3.
        :rtype: str
        """
        return self._street2

    @street2.setter
    def street2(self, street2):
        """Sets the street2 of this Address3.

        The apartment, unit, or suite number.

        :param street2: The street2 of this Address3.
        :type street2: str
        """

        self._street2 = street2
