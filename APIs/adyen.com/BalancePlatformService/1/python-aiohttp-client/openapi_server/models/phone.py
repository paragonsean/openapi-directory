# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: str=None, type: str=None):
        """Phone - a model defined in OpenAPI

        :param number: The number of this Phone.
        :param type: The type of this Phone.
        """
        self.openapi_types = {
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'number': 'number',
            'type': 'type'
        }

        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this Phone.

        The full phone number provided as a single string.  For example, **\"0031 6 11 22 33 44\"**, **\"+316/1122-3344\"**,    or **\"(0031) 611223344\"**.

        :return: The number of this Phone.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Phone.

        The full phone number provided as a single string.  For example, **\"0031 6 11 22 33 44\"**, **\"+316/1122-3344\"**,    or **\"(0031) 611223344\"**.

        :param number: The number of this Phone.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this Phone.

        Type of phone number. Possible values:  **Landline**, **Mobile**. 

        :return: The type of this Phone.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Phone.

        Type of phone number. Possible values:  **Landline**, **Mobile**. 

        :param type: The type of this Phone.
        :type type: str
        """
        allowed_values = ["Landline", "Mobile"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
