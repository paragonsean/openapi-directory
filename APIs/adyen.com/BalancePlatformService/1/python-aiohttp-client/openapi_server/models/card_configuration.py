# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bulk_address import BulkAddress
from openapi_server import util


class CardConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation: str=None, activation_url: str=None, bulk_address: BulkAddress=None, card_image_id: str=None, carrier: str=None, carrier_image_id: str=None, configuration_profile_id: str=None, currency: str=None, envelope: str=None, insert: str=None, language: str=None, logo_image_id: str=None, pin_mailer: str=None, shipment_method: str=None):
        """CardConfiguration - a model defined in OpenAPI

        :param activation: The activation of this CardConfiguration.
        :param activation_url: The activation_url of this CardConfiguration.
        :param bulk_address: The bulk_address of this CardConfiguration.
        :param card_image_id: The card_image_id of this CardConfiguration.
        :param carrier: The carrier of this CardConfiguration.
        :param carrier_image_id: The carrier_image_id of this CardConfiguration.
        :param configuration_profile_id: The configuration_profile_id of this CardConfiguration.
        :param currency: The currency of this CardConfiguration.
        :param envelope: The envelope of this CardConfiguration.
        :param insert: The insert of this CardConfiguration.
        :param language: The language of this CardConfiguration.
        :param logo_image_id: The logo_image_id of this CardConfiguration.
        :param pin_mailer: The pin_mailer of this CardConfiguration.
        :param shipment_method: The shipment_method of this CardConfiguration.
        """
        self.openapi_types = {
            'activation': str,
            'activation_url': str,
            'bulk_address': BulkAddress,
            'card_image_id': str,
            'carrier': str,
            'carrier_image_id': str,
            'configuration_profile_id': str,
            'currency': str,
            'envelope': str,
            'insert': str,
            'language': str,
            'logo_image_id': str,
            'pin_mailer': str,
            'shipment_method': str
        }

        self.attribute_map = {
            'activation': 'activation',
            'activation_url': 'activationUrl',
            'bulk_address': 'bulkAddress',
            'card_image_id': 'cardImageId',
            'carrier': 'carrier',
            'carrier_image_id': 'carrierImageId',
            'configuration_profile_id': 'configurationProfileId',
            'currency': 'currency',
            'envelope': 'envelope',
            'insert': 'insert',
            'language': 'language',
            'logo_image_id': 'logoImageId',
            'pin_mailer': 'pinMailer',
            'shipment_method': 'shipmentMethod'
        }

        self._activation = activation
        self._activation_url = activation_url
        self._bulk_address = bulk_address
        self._card_image_id = card_image_id
        self._carrier = carrier
        self._carrier_image_id = carrier_image_id
        self._configuration_profile_id = configuration_profile_id
        self._currency = currency
        self._envelope = envelope
        self._insert = insert
        self._language = language
        self._logo_image_id = logo_image_id
        self._pin_mailer = pin_mailer
        self._shipment_method = shipment_method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardConfiguration of this CardConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation(self):
        """Gets the activation of this CardConfiguration.

        Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.

        :return: The activation of this CardConfiguration.
        :rtype: str
        """
        return self._activation

    @activation.setter
    def activation(self, activation):
        """Sets the activation of this CardConfiguration.

        Overrides the activation label design ID defined in the `configurationProfileId`. The activation label is attached to the card and contains the activation instructions.

        :param activation: The activation of this CardConfiguration.
        :type activation: str
        """

        self._activation = activation

    @property
    def activation_url(self):
        """Gets the activation_url of this CardConfiguration.

        Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.   Maximum length: 255 characters.

        :return: The activation_url of this CardConfiguration.
        :rtype: str
        """
        return self._activation_url

    @activation_url.setter
    def activation_url(self, activation_url):
        """Sets the activation_url of this CardConfiguration.

        Your app's URL, if you want to activate cards through your app. For example, **my-app://ref1236a7d**. A QR code is created based on this URL, and is included in the carrier. Before you use this field, reach out to your Adyen contact to set up the QR code process.   Maximum length: 255 characters.

        :param activation_url: The activation_url of this CardConfiguration.
        :type activation_url: str
        """
        if activation_url is not None and len(activation_url) > 255:
            raise ValueError("Invalid value for `activation_url`, length must be less than or equal to `255`")

        self._activation_url = activation_url

    @property
    def bulk_address(self):
        """Gets the bulk_address of this CardConfiguration.

        Overrides the shipment bulk address defined in the `configurationProfileId`.

        :return: The bulk_address of this CardConfiguration.
        :rtype: BulkAddress
        """
        return self._bulk_address

    @bulk_address.setter
    def bulk_address(self, bulk_address):
        """Sets the bulk_address of this CardConfiguration.

        Overrides the shipment bulk address defined in the `configurationProfileId`.

        :param bulk_address: The bulk_address of this CardConfiguration.
        :type bulk_address: BulkAddress
        """

        self._bulk_address = bulk_address

    @property
    def card_image_id(self):
        """Gets the card_image_id of this CardConfiguration.

        The ID of the card image. This is the image that will be printed on the full front of the card.

        :return: The card_image_id of this CardConfiguration.
        :rtype: str
        """
        return self._card_image_id

    @card_image_id.setter
    def card_image_id(self, card_image_id):
        """Sets the card_image_id of this CardConfiguration.

        The ID of the card image. This is the image that will be printed on the full front of the card.

        :param card_image_id: The card_image_id of this CardConfiguration.
        :type card_image_id: str
        """

        self._card_image_id = card_image_id

    @property
    def carrier(self):
        """Gets the carrier of this CardConfiguration.

        Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.

        :return: The carrier of this CardConfiguration.
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this CardConfiguration.

        Overrides the carrier design ID defined in the `configurationProfileId`. The carrier is the letter or packaging to which the card is attached.

        :param carrier: The carrier of this CardConfiguration.
        :type carrier: str
        """

        self._carrier = carrier

    @property
    def carrier_image_id(self):
        """Gets the carrier_image_id of this CardConfiguration.

        The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.

        :return: The carrier_image_id of this CardConfiguration.
        :rtype: str
        """
        return self._carrier_image_id

    @carrier_image_id.setter
    def carrier_image_id(self, carrier_image_id):
        """Sets the carrier_image_id of this CardConfiguration.

        The ID of the carrier image. This is the image that will printed on the letter to which the card is attached.

        :param carrier_image_id: The carrier_image_id of this CardConfiguration.
        :type carrier_image_id: str
        """

        self._carrier_image_id = carrier_image_id

    @property
    def configuration_profile_id(self):
        """Gets the configuration_profile_id of this CardConfiguration.

        The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.  For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.

        :return: The configuration_profile_id of this CardConfiguration.
        :rtype: str
        """
        return self._configuration_profile_id

    @configuration_profile_id.setter
    def configuration_profile_id(self, configuration_profile_id):
        """Sets the configuration_profile_id of this CardConfiguration.

        The ID of the card configuration profile that contains the settings of the card. For example, the envelope and PIN mailer designs or the logistics company handling the shipment. All the settings in the profile are applied to the card, unless you provide other fields to override them.  For example, send the `shipmentMethod` to override the logistics company defined in the card configuration profile.

        :param configuration_profile_id: The configuration_profile_id of this CardConfiguration.
        :type configuration_profile_id: str
        """
        if configuration_profile_id is None:
            raise ValueError("Invalid value for `configuration_profile_id`, must not be `None`")

        self._configuration_profile_id = configuration_profile_id

    @property
    def currency(self):
        """Gets the currency of this CardConfiguration.

        The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.

        :return: The currency of this CardConfiguration.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CardConfiguration.

        The three-letter [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217) currency code of the card. For example, **EUR**.

        :param currency: The currency of this CardConfiguration.
        :type currency: str
        """

        self._currency = currency

    @property
    def envelope(self):
        """Gets the envelope of this CardConfiguration.

        Overrides the envelope design ID defined in the `configurationProfileId`. 

        :return: The envelope of this CardConfiguration.
        :rtype: str
        """
        return self._envelope

    @envelope.setter
    def envelope(self, envelope):
        """Sets the envelope of this CardConfiguration.

        Overrides the envelope design ID defined in the `configurationProfileId`. 

        :param envelope: The envelope of this CardConfiguration.
        :type envelope: str
        """

        self._envelope = envelope

    @property
    def insert(self):
        """Gets the insert of this CardConfiguration.

        Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.

        :return: The insert of this CardConfiguration.
        :rtype: str
        """
        return self._insert

    @insert.setter
    def insert(self, insert):
        """Sets the insert of this CardConfiguration.

        Overrides the insert design ID defined in the `configurationProfileId`. An insert is any additional material, such as marketing materials, that are shipped together with the card.

        :param insert: The insert of this CardConfiguration.
        :type insert: str
        """

        self._insert = insert

    @property
    def language(self):
        """Gets the language of this CardConfiguration.

        The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.

        :return: The language of this CardConfiguration.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this CardConfiguration.

        The two-letter [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) language code of the card. For example, **en**.

        :param language: The language of this CardConfiguration.
        :type language: str
        """

        self._language = language

    @property
    def logo_image_id(self):
        """Gets the logo_image_id of this CardConfiguration.

        The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.

        :return: The logo_image_id of this CardConfiguration.
        :rtype: str
        """
        return self._logo_image_id

    @logo_image_id.setter
    def logo_image_id(self, logo_image_id):
        """Sets the logo_image_id of this CardConfiguration.

        The ID of the logo image. This is the image that will be printed on the partial front of the card, such as a logo on the upper right corner.

        :param logo_image_id: The logo_image_id of this CardConfiguration.
        :type logo_image_id: str
        """

        self._logo_image_id = logo_image_id

    @property
    def pin_mailer(self):
        """Gets the pin_mailer of this CardConfiguration.

        Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.

        :return: The pin_mailer of this CardConfiguration.
        :rtype: str
        """
        return self._pin_mailer

    @pin_mailer.setter
    def pin_mailer(self, pin_mailer):
        """Sets the pin_mailer of this CardConfiguration.

        Overrides the PIN mailer design ID defined in the `configurationProfileId`. The PIN mailer is the letter on which the PIN is printed.

        :param pin_mailer: The pin_mailer of this CardConfiguration.
        :type pin_mailer: str
        """

        self._pin_mailer = pin_mailer

    @property
    def shipment_method(self):
        """Gets the shipment_method of this CardConfiguration.

        Overrides the logistics company defined in the `configurationProfileId`.

        :return: The shipment_method of this CardConfiguration.
        :rtype: str
        """
        return self._shipment_method

    @shipment_method.setter
    def shipment_method(self, shipment_method):
        """Sets the shipment_method of this CardConfiguration.

        Overrides the logistics company defined in the `configurationProfileId`.

        :param shipment_method: The shipment_method of this CardConfiguration.
        :type shipment_method: str
        """

        self._shipment_method = shipment_method
