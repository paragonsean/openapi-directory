# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_holder_capability import AccountHolderCapability
from openapi_server.models.contact_details import ContactDetails
from openapi_server import util


class AccountHolderInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_platform: str=None, capabilities: Dict[str, AccountHolderCapability]=None, contact_details: ContactDetails=None, description: str=None, legal_entity_id: str=None, reference: str=None, time_zone: str=None):
        """AccountHolderInfo - a model defined in OpenAPI

        :param balance_platform: The balance_platform of this AccountHolderInfo.
        :param capabilities: The capabilities of this AccountHolderInfo.
        :param contact_details: The contact_details of this AccountHolderInfo.
        :param description: The description of this AccountHolderInfo.
        :param legal_entity_id: The legal_entity_id of this AccountHolderInfo.
        :param reference: The reference of this AccountHolderInfo.
        :param time_zone: The time_zone of this AccountHolderInfo.
        """
        self.openapi_types = {
            'balance_platform': str,
            'capabilities': Dict[str, AccountHolderCapability],
            'contact_details': ContactDetails,
            'description': str,
            'legal_entity_id': str,
            'reference': str,
            'time_zone': str
        }

        self.attribute_map = {
            'balance_platform': 'balancePlatform',
            'capabilities': 'capabilities',
            'contact_details': 'contactDetails',
            'description': 'description',
            'legal_entity_id': 'legalEntityId',
            'reference': 'reference',
            'time_zone': 'timeZone'
        }

        self._balance_platform = balance_platform
        self._capabilities = capabilities
        self._contact_details = contact_details
        self._description = description
        self._legal_entity_id = legal_entity_id
        self._reference = reference
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolderInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolderInfo of this AccountHolderInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_platform(self):
        """Gets the balance_platform of this AccountHolderInfo.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.

        :return: The balance_platform of this AccountHolderInfo.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this AccountHolderInfo.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.

        :param balance_platform: The balance_platform of this AccountHolderInfo.
        :type balance_platform: str
        """

        self._balance_platform = balance_platform

    @property
    def capabilities(self):
        """Gets the capabilities of this AccountHolderInfo.

        Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.

        :return: The capabilities of this AccountHolderInfo.
        :rtype: Dict[str, AccountHolderCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this AccountHolderInfo.

        Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.

        :param capabilities: The capabilities of this AccountHolderInfo.
        :type capabilities: Dict[str, AccountHolderCapability]
        """

        self._capabilities = capabilities

    @property
    def contact_details(self):
        """Gets the contact_details of this AccountHolderInfo.

        Contact details of the account holder.

        :return: The contact_details of this AccountHolderInfo.
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this AccountHolderInfo.

        Contact details of the account holder.

        :param contact_details: The contact_details of this AccountHolderInfo.
        :type contact_details: ContactDetails
        """

        self._contact_details = contact_details

    @property
    def description(self):
        """Gets the description of this AccountHolderInfo.

        Your description for the account holder, maximum 300 characters.

        :return: The description of this AccountHolderInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountHolderInfo.

        Your description for the account holder, maximum 300 characters.

        :param description: The description of this AccountHolderInfo.
        :type description: str
        """
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this AccountHolderInfo.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.

        :return: The legal_entity_id of this AccountHolderInfo.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this AccountHolderInfo.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.

        :param legal_entity_id: The legal_entity_id of this AccountHolderInfo.
        :type legal_entity_id: str
        """
        if legal_entity_id is None:
            raise ValueError("Invalid value for `legal_entity_id`, must not be `None`")

        self._legal_entity_id = legal_entity_id

    @property
    def reference(self):
        """Gets the reference of this AccountHolderInfo.

        Your reference for the account holder, maximum 150 characters.

        :return: The reference of this AccountHolderInfo.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AccountHolderInfo.

        Your reference for the account holder, maximum 150 characters.

        :param reference: The reference of this AccountHolderInfo.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def time_zone(self):
        """Gets the time_zone of this AccountHolderInfo.

        The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**. Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :return: The time_zone of this AccountHolderInfo.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AccountHolderInfo.

        The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**. Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :param time_zone: The time_zone of this AccountHolderInfo.
        :type time_zone: str
        """

        self._time_zone = time_zone
