# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authentication import Authentication
from openapi_server.models.card_configuration import CardConfiguration
from openapi_server.models.contact import Contact
from openapi_server import util


class CardInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication: Authentication=None, brand: str=None, brand_variant: str=None, cardholder_name: str=None, configuration: CardConfiguration=None, delivery_contact: Contact=None, form_factor: str=None):
        """CardInfo - a model defined in OpenAPI

        :param authentication: The authentication of this CardInfo.
        :param brand: The brand of this CardInfo.
        :param brand_variant: The brand_variant of this CardInfo.
        :param cardholder_name: The cardholder_name of this CardInfo.
        :param configuration: The configuration of this CardInfo.
        :param delivery_contact: The delivery_contact of this CardInfo.
        :param form_factor: The form_factor of this CardInfo.
        """
        self.openapi_types = {
            'authentication': Authentication,
            'brand': str,
            'brand_variant': str,
            'cardholder_name': str,
            'configuration': CardConfiguration,
            'delivery_contact': Contact,
            'form_factor': str
        }

        self.attribute_map = {
            'authentication': 'authentication',
            'brand': 'brand',
            'brand_variant': 'brandVariant',
            'cardholder_name': 'cardholderName',
            'configuration': 'configuration',
            'delivery_contact': 'deliveryContact',
            'form_factor': 'formFactor'
        }

        self._authentication = authentication
        self._brand = brand
        self._brand_variant = brand_variant
        self._cardholder_name = cardholder_name
        self._configuration = configuration
        self._delivery_contact = delivery_contact
        self._form_factor = form_factor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardInfo of this CardInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication(self):
        """Gets the authentication of this CardInfo.

        Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.

        :return: The authentication of this CardInfo.
        :rtype: Authentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this CardInfo.

        Contains the card user's password and mobile phone number. This is required when you issue cards that can be used to make online payments within the EEA and the UK, or can be added to digital wallets. Refer to [3D Secure and digital wallets](https://docs.adyen.com/issuing/3d-secure-and-wallets) for more information.

        :param authentication: The authentication of this CardInfo.
        :type authentication: Authentication
        """

        self._authentication = authentication

    @property
    def brand(self):
        """Gets the brand of this CardInfo.

        The brand of the physical or the virtual card. Possible values: **visa**, **mc**.

        :return: The brand of this CardInfo.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this CardInfo.

        The brand of the physical or the virtual card. Possible values: **visa**, **mc**.

        :param brand: The brand of this CardInfo.
        :type brand: str
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")

        self._brand = brand

    @property
    def brand_variant(self):
        """Gets the brand_variant of this CardInfo.

        The brand variant of the physical or the virtual card. >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.

        :return: The brand_variant of this CardInfo.
        :rtype: str
        """
        return self._brand_variant

    @brand_variant.setter
    def brand_variant(self, brand_variant):
        """Sets the brand_variant of this CardInfo.

        The brand variant of the physical or the virtual card. >Contact your Adyen Implementation Manager to get the values that are relevant to your integration. Examples: **visadebit**, **mcprepaid**.

        :param brand_variant: The brand_variant of this CardInfo.
        :type brand_variant: str
        """
        if brand_variant is None:
            raise ValueError("Invalid value for `brand_variant`, must not be `None`")

        self._brand_variant = brand_variant

    @property
    def cardholder_name(self):
        """Gets the cardholder_name of this CardInfo.

        The name of the cardholder.  Maximum length: 26 characters.

        :return: The cardholder_name of this CardInfo.
        :rtype: str
        """
        return self._cardholder_name

    @cardholder_name.setter
    def cardholder_name(self, cardholder_name):
        """Sets the cardholder_name of this CardInfo.

        The name of the cardholder.  Maximum length: 26 characters.

        :param cardholder_name: The cardholder_name of this CardInfo.
        :type cardholder_name: str
        """
        if cardholder_name is None:
            raise ValueError("Invalid value for `cardholder_name`, must not be `None`")
        if cardholder_name is not None and len(cardholder_name) > 26:
            raise ValueError("Invalid value for `cardholder_name`, length must be less than or equal to `26`")

        self._cardholder_name = cardholder_name

    @property
    def configuration(self):
        """Gets the configuration of this CardInfo.

        Settings required when creating a physical or a virtual card.   Reach out to your Adyen contact to get the values that you can send in this object.

        :return: The configuration of this CardInfo.
        :rtype: CardConfiguration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this CardInfo.

        Settings required when creating a physical or a virtual card.   Reach out to your Adyen contact to get the values that you can send in this object.

        :param configuration: The configuration of this CardInfo.
        :type configuration: CardConfiguration
        """

        self._configuration = configuration

    @property
    def delivery_contact(self):
        """Gets the delivery_contact of this CardInfo.

        The delivery contact (name and address) for physical card delivery.

        :return: The delivery_contact of this CardInfo.
        :rtype: Contact
        """
        return self._delivery_contact

    @delivery_contact.setter
    def delivery_contact(self, delivery_contact):
        """Sets the delivery_contact of this CardInfo.

        The delivery contact (name and address) for physical card delivery.

        :param delivery_contact: The delivery_contact of this CardInfo.
        :type delivery_contact: Contact
        """

        self._delivery_contact = delivery_contact

    @property
    def form_factor(self):
        """Gets the form_factor of this CardInfo.

        The form factor of the card. Possible values: **virtual**, **physical**.

        :return: The form_factor of this CardInfo.
        :rtype: str
        """
        return self._form_factor

    @form_factor.setter
    def form_factor(self, form_factor):
        """Sets the form_factor of this CardInfo.

        The form factor of the card. Possible values: **virtual**, **physical**.

        :param form_factor: The form_factor of this CardInfo.
        :type form_factor: str
        """
        allowed_values = ["physical", "unknown", "virtual"]  # noqa: E501
        if form_factor not in allowed_values:
            raise ValueError(
                "Invalid value for `form_factor` ({0}), must be one of {1}"
                .format(form_factor, allowed_values)
            )

        self._form_factor = form_factor
