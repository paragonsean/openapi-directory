# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.sweep_configuration_schedule import SweepConfigurationSchedule
from openapi_server import util


class SweepConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, id: str=None, merchant_account: str=None, schedule: SweepConfigurationSchedule=None, status: str=None, sweep_amount: Amount=None, target_amount: Amount=None, transfer_instrument_id: str=None, trigger_amount: Amount=None, type: str='push'):
        """SweepConfiguration - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this SweepConfiguration.
        :param id: The id of this SweepConfiguration.
        :param merchant_account: The merchant_account of this SweepConfiguration.
        :param schedule: The schedule of this SweepConfiguration.
        :param status: The status of this SweepConfiguration.
        :param sweep_amount: The sweep_amount of this SweepConfiguration.
        :param target_amount: The target_amount of this SweepConfiguration.
        :param transfer_instrument_id: The transfer_instrument_id of this SweepConfiguration.
        :param trigger_amount: The trigger_amount of this SweepConfiguration.
        :param type: The type of this SweepConfiguration.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'id': str,
            'merchant_account': str,
            'schedule': SweepConfigurationSchedule,
            'status': str,
            'sweep_amount': Amount,
            'target_amount': Amount,
            'transfer_instrument_id': str,
            'trigger_amount': Amount,
            'type': str
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'id': 'id',
            'merchant_account': 'merchantAccount',
            'schedule': 'schedule',
            'status': 'status',
            'sweep_amount': 'sweepAmount',
            'target_amount': 'targetAmount',
            'transfer_instrument_id': 'transferInstrumentId',
            'trigger_amount': 'triggerAmount',
            'type': 'type'
        }

        self._balance_account_id = balance_account_id
        self._id = id
        self._merchant_account = merchant_account
        self._schedule = schedule
        self._status = status
        self._sweep_amount = sweep_amount
        self._target_amount = target_amount
        self._transfer_instrument_id = transfer_instrument_id
        self._trigger_amount = trigger_amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SweepConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SweepConfiguration of this SweepConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this SweepConfiguration.

        The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).   You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.

        :return: The balance_account_id of this SweepConfiguration.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this SweepConfiguration.

        The unique identifier of the destination or source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).   You can only use this for periodic sweep schedules such as `schedule.type` **daily** or **monthly**.

        :param balance_account_id: The balance_account_id of this SweepConfiguration.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def id(self):
        """Gets the id of this SweepConfiguration.

        The unique identifier of the sweep.

        :return: The id of this SweepConfiguration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SweepConfiguration.

        The unique identifier of the sweep.

        :param id: The id of this SweepConfiguration.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def merchant_account(self):
        """Gets the merchant_account of this SweepConfiguration.

        The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.

        :return: The merchant_account of this SweepConfiguration.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this SweepConfiguration.

        The merchant account that will be the source of funds. You can only use this if you are processing payments with Adyen. This can only be used for sweeps of `type` **pull** and `schedule.type` **balance**.

        :param merchant_account: The merchant_account of this SweepConfiguration.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def schedule(self):
        """Gets the schedule of this SweepConfiguration.


        :return: The schedule of this SweepConfiguration.
        :rtype: SweepConfigurationSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this SweepConfiguration.


        :param schedule: The schedule of this SweepConfiguration.
        :type schedule: SweepConfigurationSchedule
        """
        if schedule is None:
            raise ValueError("Invalid value for `schedule`, must not be `None`")

        self._schedule = schedule

    @property
    def status(self):
        """Gets the status of this SweepConfiguration.

        The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   

        :return: The status of this SweepConfiguration.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SweepConfiguration.

        The status of the sweep. If not provided, by default, this is set to **active**.  Possible values:    * **active**:  the sweep is enabled and funds will be pulled in or pushed out based on the defined configuration.    * **inactive**: the sweep is disabled and cannot be triggered.   

        :param status: The status of this SweepConfiguration.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sweep_amount(self):
        """Gets the sweep_amount of this SweepConfiguration.

        The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.

        :return: The sweep_amount of this SweepConfiguration.
        :rtype: Amount
        """
        return self._sweep_amount

    @sweep_amount.setter
    def sweep_amount(self, sweep_amount):
        """Sets the sweep_amount of this SweepConfiguration.

        The amount that must be pushed out or pulled in. You can configure either `sweepAmount` or `targetAmount`, not both.

        :param sweep_amount: The sweep_amount of this SweepConfiguration.
        :type sweep_amount: Amount
        """

        self._sweep_amount = sweep_amount

    @property
    def target_amount(self):
        """Gets the target_amount of this SweepConfiguration.

        The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.

        :return: The target_amount of this SweepConfiguration.
        :rtype: Amount
        """
        return self._target_amount

    @target_amount.setter
    def target_amount(self, target_amount):
        """Sets the target_amount of this SweepConfiguration.

        The amount that must be available in the balance account after the sweep. You can configure either `sweepAmount` or `targetAmount`, not both.

        :param target_amount: The target_amount of this SweepConfiguration.
        :type target_amount: Amount
        """

        self._target_amount = target_amount

    @property
    def transfer_instrument_id(self):
        """Gets the transfer_instrument_id of this SweepConfiguration.

        The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).  You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.

        :return: The transfer_instrument_id of this SweepConfiguration.
        :rtype: str
        """
        return self._transfer_instrument_id

    @transfer_instrument_id.setter
    def transfer_instrument_id(self, transfer_instrument_id):
        """Sets the transfer_instrument_id of this SweepConfiguration.

        The unique identifier of the destination or source [transfer instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/transferInstruments__resParam_id).  You can also use this in combination with a `merchantAccount` and a `type` **pull** to start a direct debit request from the source transfer instrument. To use this feature, reach out to your Adyen contact.

        :param transfer_instrument_id: The transfer_instrument_id of this SweepConfiguration.
        :type transfer_instrument_id: str
        """

        self._transfer_instrument_id = transfer_instrument_id

    @property
    def trigger_amount(self):
        """Gets the trigger_amount of this SweepConfiguration.

        The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.  * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.  * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.

        :return: The trigger_amount of this SweepConfiguration.
        :rtype: Amount
        """
        return self._trigger_amount

    @trigger_amount.setter
    def trigger_amount(self, trigger_amount):
        """Sets the trigger_amount of this SweepConfiguration.

        The threshold amount that triggers the sweep. If not provided, by default, the amount is set to zero. The `triggerAmount` is evaluated according to the specified `schedule.type`.  * For `type` **pull**, if the balance is less than or equal to the `triggerAmount`, funds are pulled in to the balance account.  * For `type` **push**, if the balance is more than or equal to the `triggerAmount`, funds are pushed out of the balance account.

        :param trigger_amount: The trigger_amount of this SweepConfiguration.
        :type trigger_amount: Amount
        """

        self._trigger_amount = trigger_amount

    @property
    def type(self):
        """Gets the type of this SweepConfiguration.

        The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.

        :return: The type of this SweepConfiguration.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SweepConfiguration.

        The direction of sweep, whether pushing out or pulling in funds to the balance account. If not provided, by default, this is set to **push**.  Possible values:   * **push**: _push out funds_ to a destination balance account or transfer instrument.   * **pull**: _pull in funds_ from a source merchant account, transfer instrument, or balance account.

        :param type: The type of this SweepConfiguration.
        :type type: str
        """
        allowed_values = ["pull", "push"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
