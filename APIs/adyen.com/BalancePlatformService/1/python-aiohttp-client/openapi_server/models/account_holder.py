# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_holder_capability import AccountHolderCapability
from openapi_server.models.contact_details import ContactDetails
from openapi_server import util


class AccountHolder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_platform: str=None, capabilities: Dict[str, AccountHolderCapability]=None, contact_details: ContactDetails=None, description: str=None, id: str=None, legal_entity_id: str=None, primary_balance_account: str=None, reference: str=None, status: str=None, time_zone: str=None):
        """AccountHolder - a model defined in OpenAPI

        :param balance_platform: The balance_platform of this AccountHolder.
        :param capabilities: The capabilities of this AccountHolder.
        :param contact_details: The contact_details of this AccountHolder.
        :param description: The description of this AccountHolder.
        :param id: The id of this AccountHolder.
        :param legal_entity_id: The legal_entity_id of this AccountHolder.
        :param primary_balance_account: The primary_balance_account of this AccountHolder.
        :param reference: The reference of this AccountHolder.
        :param status: The status of this AccountHolder.
        :param time_zone: The time_zone of this AccountHolder.
        """
        self.openapi_types = {
            'balance_platform': str,
            'capabilities': Dict[str, AccountHolderCapability],
            'contact_details': ContactDetails,
            'description': str,
            'id': str,
            'legal_entity_id': str,
            'primary_balance_account': str,
            'reference': str,
            'status': str,
            'time_zone': str
        }

        self.attribute_map = {
            'balance_platform': 'balancePlatform',
            'capabilities': 'capabilities',
            'contact_details': 'contactDetails',
            'description': 'description',
            'id': 'id',
            'legal_entity_id': 'legalEntityId',
            'primary_balance_account': 'primaryBalanceAccount',
            'reference': 'reference',
            'status': 'status',
            'time_zone': 'timeZone'
        }

        self._balance_platform = balance_platform
        self._capabilities = capabilities
        self._contact_details = contact_details
        self._description = description
        self._id = id
        self._legal_entity_id = legal_entity_id
        self._primary_balance_account = primary_balance_account
        self._reference = reference
        self._status = status
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountHolder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountHolder of this AccountHolder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_platform(self):
        """Gets the balance_platform of this AccountHolder.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.

        :return: The balance_platform of this AccountHolder.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this AccountHolder.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the account holder belongs. Required in the request if your API credentials can be used for multiple balance platforms.

        :param balance_platform: The balance_platform of this AccountHolder.
        :type balance_platform: str
        """

        self._balance_platform = balance_platform

    @property
    def capabilities(self):
        """Gets the capabilities of this AccountHolder.

        Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.

        :return: The capabilities of this AccountHolder.
        :rtype: Dict[str, AccountHolderCapability]
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities):
        """Sets the capabilities of this AccountHolder.

        Contains key-value pairs that specify the actions that an account holder can do in your platform. The key is a capability required for your integration. For example, **issueCard** for Issuing. The value is an object containing the settings for the capability.

        :param capabilities: The capabilities of this AccountHolder.
        :type capabilities: Dict[str, AccountHolderCapability]
        """

        self._capabilities = capabilities

    @property
    def contact_details(self):
        """Gets the contact_details of this AccountHolder.

        Contact details of the account holder.

        :return: The contact_details of this AccountHolder.
        :rtype: ContactDetails
        """
        return self._contact_details

    @contact_details.setter
    def contact_details(self, contact_details):
        """Sets the contact_details of this AccountHolder.

        Contact details of the account holder.

        :param contact_details: The contact_details of this AccountHolder.
        :type contact_details: ContactDetails
        """

        self._contact_details = contact_details

    @property
    def description(self):
        """Gets the description of this AccountHolder.

        Your description for the account holder, maximum 300 characters.

        :return: The description of this AccountHolder.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AccountHolder.

        Your description for the account holder, maximum 300 characters.

        :param description: The description of this AccountHolder.
        :type description: str
        """
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this AccountHolder.

        The unique identifier of the account holder.

        :return: The id of this AccountHolder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountHolder.

        The unique identifier of the account holder.

        :param id: The id of this AccountHolder.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def legal_entity_id(self):
        """Gets the legal_entity_id of this AccountHolder.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.

        :return: The legal_entity_id of this AccountHolder.
        :rtype: str
        """
        return self._legal_entity_id

    @legal_entity_id.setter
    def legal_entity_id(self, legal_entity_id):
        """Sets the legal_entity_id of this AccountHolder.

        The unique identifier of the [legal entity](https://docs.adyen.com/api-explorer/legalentity/latest/post/legalEntities#responses-200-id) associated with the account holder. Adyen performs a verification process against the legal entity of the account holder.

        :param legal_entity_id: The legal_entity_id of this AccountHolder.
        :type legal_entity_id: str
        """
        if legal_entity_id is None:
            raise ValueError("Invalid value for `legal_entity_id`, must not be `None`")

        self._legal_entity_id = legal_entity_id

    @property
    def primary_balance_account(self):
        """Gets the primary_balance_account of this AccountHolder.

        The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.

        :return: The primary_balance_account of this AccountHolder.
        :rtype: str
        """
        return self._primary_balance_account

    @primary_balance_account.setter
    def primary_balance_account(self, primary_balance_account):
        """Sets the primary_balance_account of this AccountHolder.

        The ID of the account holder's primary balance account. By default, this is set to the first balance account that you create for the account holder. To assign a different balance account, send a PATCH request.

        :param primary_balance_account: The primary_balance_account of this AccountHolder.
        :type primary_balance_account: str
        """

        self._primary_balance_account = primary_balance_account

    @property
    def reference(self):
        """Gets the reference of this AccountHolder.

        Your reference for the account holder, maximum 150 characters.

        :return: The reference of this AccountHolder.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this AccountHolder.

        Your reference for the account holder, maximum 150 characters.

        :param reference: The reference of this AccountHolder.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this AccountHolder.

        The status of the account holder.  Possible values:    * **Active**: The account holder is active. This is the default status when creating an account holder.    * **Inactive**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.    * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.   * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.

        :return: The status of this AccountHolder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountHolder.

        The status of the account holder.  Possible values:    * **Active**: The account holder is active. This is the default status when creating an account holder.    * **Inactive**: The account holder is temporarily inactive due to missing KYC details. You can set the account back to active by providing the missing KYC details.    * **Suspended**: The account holder is permanently deactivated by Adyen. This action cannot be undone.   * **Closed**: The account holder is permanently deactivated by you. This action cannot be undone.

        :param status: The status of this AccountHolder.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "Suspended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time_zone(self):
        """Gets the time_zone of this AccountHolder.

        The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**. Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :return: The time_zone of this AccountHolder.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this AccountHolder.

        The [time zone](https://www.iana.org/time-zones) of the account holder. For example, **Europe/Amsterdam**. Defaults to the time zone of the balance platform if no time zone is set. For possible values, see the [list of time zone codes](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).

        :param time_zone: The time_zone of this AccountHolder.
        :type time_zone: str
        """

        self._time_zone = time_zone
