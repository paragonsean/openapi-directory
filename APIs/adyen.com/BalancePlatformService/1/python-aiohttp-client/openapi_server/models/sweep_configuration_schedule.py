# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cron_sweep_schedule import CronSweepSchedule
from openapi_server.models.sweep_schedule import SweepSchedule
from openapi_server import util


class SweepConfigurationSchedule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cron_expression: str=None, type: str=None):
        """SweepConfigurationSchedule - a model defined in OpenAPI

        :param cron_expression: The cron_expression of this SweepConfigurationSchedule.
        :param type: The type of this SweepConfigurationSchedule.
        """
        self.openapi_types = {
            'cron_expression': str,
            'type': str
        }

        self.attribute_map = {
            'cron_expression': 'cronExpression',
            'type': 'type'
        }

        self._cron_expression = cron_expression
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SweepConfigurationSchedule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SweepConfiguration_schedule of this SweepConfigurationSchedule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cron_expression(self):
        """Gets the cron_expression of this SweepConfigurationSchedule.

        A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.  The expression must have five values separated by a single space in the following order:  * Minute: **0-59**  * Hour: **0-23**  * Day of the month: **1-31**  * Month: **1-12** or **JAN-DEC**  * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.  The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.

        :return: The cron_expression of this SweepConfigurationSchedule.
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this SweepConfigurationSchedule.

        A [cron expression](https://en.wikipedia.org/wiki/Cron#CRON_expression) that is used to set the sweep schedule. The schedule uses the time zone of the balance account. For example, **30 17 * * MON** schedules a sweep every Monday at 17:30.  The expression must have five values separated by a single space in the following order:  * Minute: **0-59**  * Hour: **0-23**  * Day of the month: **1-31**  * Month: **1-12** or **JAN-DEC**  * Day of the week: **0-7** (0 and 7 are Sunday) or **MON-SUN**.  The following non-standard characters are supported: **&ast;**, **L**, **#**, **W** and **/**. See [crontab guru](https://crontab.guru/) for more examples.

        :param cron_expression: The cron_expression of this SweepConfigurationSchedule.
        :type cron_expression: str
        """
        if cron_expression is None:
            raise ValueError("Invalid value for `cron_expression`, must not be `None`")

        self._cron_expression = cron_expression

    @property
    def type(self):
        """Gets the type of this SweepConfigurationSchedule.

        The schedule type.  Possible values:  * **cron**: push out funds based on a cron expression.  * **daily**: push out funds daily at 07:00 AM CET.  * **weekly**: push out funds every Monday at 07:00 AM CET.  * **monthly**: push out funds every first of the month at 07:00 AM CET.  * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.

        :return: The type of this SweepConfigurationSchedule.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SweepConfigurationSchedule.

        The schedule type.  Possible values:  * **cron**: push out funds based on a cron expression.  * **daily**: push out funds daily at 07:00 AM CET.  * **weekly**: push out funds every Monday at 07:00 AM CET.  * **monthly**: push out funds every first of the month at 07:00 AM CET.  * **balance**: pull in funds instantly if the balance is less than or equal to the `triggerAmount`. You can only use this for sweeps of `type` **pull** and when the source is a `merchantAccount` or `transferInstrument`.

        :param type: The type of this SweepConfigurationSchedule.
        :type type: str
        """
        allowed_values = ["daily", "weekly", "monthly", "balance", "cron"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
