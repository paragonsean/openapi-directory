# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IbanAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, iban: str=None, type: str='iban'):
        """IbanAccountIdentification - a model defined in OpenAPI

        :param iban: The iban of this IbanAccountIdentification.
        :param type: The type of this IbanAccountIdentification.
        """
        self.openapi_types = {
            'iban': str,
            'type': str
        }

        self.attribute_map = {
            'iban': 'iban',
            'type': 'type'
        }

        self._iban = iban
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IbanAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IbanAccountIdentification of this IbanAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def iban(self):
        """Gets the iban of this IbanAccountIdentification.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :return: The iban of this IbanAccountIdentification.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this IbanAccountIdentification.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :param iban: The iban of this IbanAccountIdentification.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")

        self._iban = iban

    @property
    def type(self):
        """Gets the type of this IbanAccountIdentification.

        **iban**

        :return: The type of this IbanAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IbanAccountIdentification.

        **iban**

        :param type: The type of this IbanAccountIdentification.
        :type type: str
        """
        allowed_values = ["iban"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
