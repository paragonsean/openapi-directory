# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PhoneNumber2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, number: str=None, type: str=None):
        """PhoneNumber2 - a model defined in OpenAPI

        :param country_code: The country_code of this PhoneNumber2.
        :param number: The number of this PhoneNumber2.
        :param type: The type of this PhoneNumber2.
        """
        self.openapi_types = {
            'country_code': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'number': 'number',
            'type': 'type'
        }

        self._country_code = country_code
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PhoneNumber2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PhoneNumber-2 of this PhoneNumber2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this PhoneNumber2.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. For example, **US** or **NL**.

        :return: The country_code of this PhoneNumber2.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PhoneNumber2.

        The two-letter [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code. For example, **US** or **NL**.

        :param country_code: The country_code of this PhoneNumber2.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def number(self):
        """Gets the number of this PhoneNumber2.

        The phone number.

        :return: The number of this PhoneNumber2.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PhoneNumber2.

        The phone number.

        :param number: The number of this PhoneNumber2.
        :type number: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def type(self):
        """Gets the type of this PhoneNumber2.

        The type of phone number.  Possible values: **mobile**, **landline**, **sip**, **fax.** 

        :return: The type of this PhoneNumber2.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneNumber2.

        The type of phone number.  Possible values: **mobile**, **landline**, **sip**, **fax.** 

        :param type: The type of this PhoneNumber2.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
