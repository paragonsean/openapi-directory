# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentInstrumentGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_platform: str=None, description: str=None, id: str=None, properties: Dict[str, str]=None, reference: str=None, tx_variant: str=None):
        """PaymentInstrumentGroup - a model defined in OpenAPI

        :param balance_platform: The balance_platform of this PaymentInstrumentGroup.
        :param description: The description of this PaymentInstrumentGroup.
        :param id: The id of this PaymentInstrumentGroup.
        :param properties: The properties of this PaymentInstrumentGroup.
        :param reference: The reference of this PaymentInstrumentGroup.
        :param tx_variant: The tx_variant of this PaymentInstrumentGroup.
        """
        self.openapi_types = {
            'balance_platform': str,
            'description': str,
            'id': str,
            'properties': Dict[str, str],
            'reference': str,
            'tx_variant': str
        }

        self.attribute_map = {
            'balance_platform': 'balancePlatform',
            'description': 'description',
            'id': 'id',
            'properties': 'properties',
            'reference': 'reference',
            'tx_variant': 'txVariant'
        }

        self._balance_platform = balance_platform
        self._description = description
        self._id = id
        self._properties = properties
        self._reference = reference
        self._tx_variant = tx_variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentGroup of this PaymentInstrumentGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_platform(self):
        """Gets the balance_platform of this PaymentInstrumentGroup.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.

        :return: The balance_platform of this PaymentInstrumentGroup.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this PaymentInstrumentGroup.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/get/balancePlatforms/{id}__queryParam_id) to which the payment instrument group belongs.

        :param balance_platform: The balance_platform of this PaymentInstrumentGroup.
        :type balance_platform: str
        """
        if balance_platform is None:
            raise ValueError("Invalid value for `balance_platform`, must not be `None`")

        self._balance_platform = balance_platform

    @property
    def description(self):
        """Gets the description of this PaymentInstrumentGroup.

        Your description for the payment instrument group, maximum 300 characters.

        :return: The description of this PaymentInstrumentGroup.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentInstrumentGroup.

        Your description for the payment instrument group, maximum 300 characters.

        :param description: The description of this PaymentInstrumentGroup.
        :type description: str
        """
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this PaymentInstrumentGroup.

        The unique identifier of the payment instrument group.

        :return: The id of this PaymentInstrumentGroup.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentInstrumentGroup.

        The unique identifier of the payment instrument group.

        :param id: The id of this PaymentInstrumentGroup.
        :type id: str
        """

        self._id = id

    @property
    def properties(self):
        """Gets the properties of this PaymentInstrumentGroup.

        Properties of the payment instrument group.

        :return: The properties of this PaymentInstrumentGroup.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PaymentInstrumentGroup.

        Properties of the payment instrument group.

        :param properties: The properties of this PaymentInstrumentGroup.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def reference(self):
        """Gets the reference of this PaymentInstrumentGroup.

        Your reference for the payment instrument group, maximum 150 characters.

        :return: The reference of this PaymentInstrumentGroup.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentInstrumentGroup.

        Your reference for the payment instrument group, maximum 150 characters.

        :param reference: The reference of this PaymentInstrumentGroup.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def tx_variant(self):
        """Gets the tx_variant of this PaymentInstrumentGroup.

        The tx variant of the payment instrument group.

        :return: The tx_variant of this PaymentInstrumentGroup.
        :rtype: str
        """
        return self._tx_variant

    @tx_variant.setter
    def tx_variant(self, tx_variant):
        """Sets the tx_variant of this PaymentInstrumentGroup.

        The tx variant of the payment instrument group.

        :param tx_variant: The tx_variant of this PaymentInstrumentGroup.
        :type tx_variant: str
        """
        if tx_variant is None:
            raise ValueError("Invalid value for `tx_variant`, must not be `None`")

        self._tx_variant = tx_variant
