# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.au_local_account_identification import AULocalAccountIdentification
from openapi_server.models.additional_bank_identification import AdditionalBankIdentification
from openapi_server.models.ca_local_account_identification import CALocalAccountIdentification
from openapi_server.models.cz_local_account_identification import CZLocalAccountIdentification
from openapi_server.models.hu_local_account_identification import HULocalAccountIdentification
from openapi_server.models.iban_account_identification import IbanAccountIdentification
from openapi_server.models.no_local_account_identification import NOLocalAccountIdentification
from openapi_server.models.number_and_bic_account_identification import NumberAndBicAccountIdentification
from openapi_server.models.pl_local_account_identification import PLLocalAccountIdentification
from openapi_server.models.se_local_account_identification import SELocalAccountIdentification
from openapi_server.models.sg_local_account_identification import SGLocalAccountIdentification
from openapi_server.models.uk_local_account_identification import UKLocalAccountIdentification
from openapi_server.models.us_local_account_identification import USLocalAccountIdentification
from openapi_server import util


class BankAccountIdentificationValidationRequestAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, bsb_code: str=None, type: str='auLocal', institution_number: str=None, transit_number: str=None, bank_code: str=None, iban: str=None, additional_bank_identification: AdditionalBankIdentification=None, bic: str=None, clearing_number: str=None, sort_code: str=None, account_type: str='checking', routing_number: str=None):
        """BankAccountIdentificationValidationRequestAccountIdentification - a model defined in OpenAPI

        :param account_number: The account_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param bsb_code: The bsb_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param type: The type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param institution_number: The institution_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param transit_number: The transit_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param bank_code: The bank_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param iban: The iban of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param additional_bank_identification: The additional_bank_identification of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param bic: The bic of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param clearing_number: The clearing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param sort_code: The sort_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param account_type: The account_type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :param routing_number: The routing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        """
        self.openapi_types = {
            'account_number': str,
            'bsb_code': str,
            'type': str,
            'institution_number': str,
            'transit_number': str,
            'bank_code': str,
            'iban': str,
            'additional_bank_identification': AdditionalBankIdentification,
            'bic': str,
            'clearing_number': str,
            'sort_code': str,
            'account_type': str,
            'routing_number': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'bsb_code': 'bsbCode',
            'type': 'type',
            'institution_number': 'institutionNumber',
            'transit_number': 'transitNumber',
            'bank_code': 'bankCode',
            'iban': 'iban',
            'additional_bank_identification': 'additionalBankIdentification',
            'bic': 'bic',
            'clearing_number': 'clearingNumber',
            'sort_code': 'sortCode',
            'account_type': 'accountType',
            'routing_number': 'routingNumber'
        }

        self._account_number = account_number
        self._bsb_code = bsb_code
        self._type = type
        self._institution_number = institution_number
        self._transit_number = transit_number
        self._bank_code = bank_code
        self._iban = iban
        self._additional_bank_identification = additional_bank_identification
        self._bic = bic
        self._clearing_number = clearing_number
        self._sort_code = sort_code
        self._account_type = account_type
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountIdentificationValidationRequestAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountIdentificationValidationRequest_accountIdentification of this BankAccountIdentificationValidationRequestAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank account number, without separators or whitespace.

        :return: The account_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank account number, without separators or whitespace.

        :param account_number: The account_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 18:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `18`")
        if account_number is not None and len(account_number) < 2:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `2`")

        self._account_number = account_number

    @property
    def bsb_code(self):
        """Gets the bsb_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.

        :return: The bsb_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._bsb_code

    @bsb_code.setter
    def bsb_code(self, bsb_code):
        """Sets the bsb_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 6-digit [Bank State Branch (BSB) code](https://en.wikipedia.org/wiki/Bank_state_branch), without separators or whitespace.

        :param bsb_code: The bsb_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type bsb_code: str
        """
        if bsb_code is None:
            raise ValueError("Invalid value for `bsb_code`, must not be `None`")
        if bsb_code is not None and len(bsb_code) > 6:
            raise ValueError("Invalid value for `bsb_code`, length must be less than or equal to `6`")
        if bsb_code is not None and len(bsb_code) < 6:
            raise ValueError("Invalid value for `bsb_code`, length must be greater than or equal to `6`")

        self._bsb_code = bsb_code

    @property
    def type(self):
        """Gets the type of this BankAccountIdentificationValidationRequestAccountIdentification.

        **auLocal**

        :return: The type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankAccountIdentificationValidationRequestAccountIdentification.

        **auLocal**

        :param type: The type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type type: str
        """
        allowed_values = ["auLocal", "caLocal", "czLocal", "huLocal", "iban", "noLocal", "numberAndBic", "plLocal", "seLocal", "sgLocal", "ukLocal", "usLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def institution_number(self):
        """Gets the institution_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 3-digit institution number, without separators or whitespace.

        :return: The institution_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._institution_number

    @institution_number.setter
    def institution_number(self, institution_number):
        """Sets the institution_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 3-digit institution number, without separators or whitespace.

        :param institution_number: The institution_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type institution_number: str
        """
        if institution_number is None:
            raise ValueError("Invalid value for `institution_number`, must not be `None`")
        if institution_number is not None and len(institution_number) > 3:
            raise ValueError("Invalid value for `institution_number`, length must be less than or equal to `3`")
        if institution_number is not None and len(institution_number) < 3:
            raise ValueError("Invalid value for `institution_number`, length must be greater than or equal to `3`")

        self._institution_number = institution_number

    @property
    def transit_number(self):
        """Gets the transit_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 5-digit transit number, without separators or whitespace.

        :return: The transit_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._transit_number

    @transit_number.setter
    def transit_number(self, transit_number):
        """Sets the transit_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 5-digit transit number, without separators or whitespace.

        :param transit_number: The transit_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type transit_number: str
        """
        if transit_number is None:
            raise ValueError("Invalid value for `transit_number`, must not be `None`")
        if transit_number is not None and len(transit_number) > 5:
            raise ValueError("Invalid value for `transit_number`, length must be less than or equal to `5`")
        if transit_number is not None and len(transit_number) < 5:
            raise ValueError("Invalid value for `transit_number`, length must be greater than or equal to `5`")

        self._transit_number = transit_number

    @property
    def bank_code(self):
        """Gets the bank_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 4-digit bank code (Kód banky), without separators or whitespace.

        :return: The bank_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 4-digit bank code (Kód banky), without separators or whitespace.

        :param bank_code: The bank_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type bank_code: str
        """
        if bank_code is None:
            raise ValueError("Invalid value for `bank_code`, must not be `None`")
        if bank_code is not None and len(bank_code) > 4:
            raise ValueError("Invalid value for `bank_code`, length must be less than or equal to `4`")
        if bank_code is not None and len(bank_code) < 4:
            raise ValueError("Invalid value for `bank_code`, length must be greater than or equal to `4`")

        self._bank_code = bank_code

    @property
    def iban(self):
        """Gets the iban of this BankAccountIdentificationValidationRequestAccountIdentification.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :return: The iban of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccountIdentificationValidationRequestAccountIdentification.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :param iban: The iban of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")

        self._iban = iban

    @property
    def additional_bank_identification(self):
        """Gets the additional_bank_identification of this BankAccountIdentificationValidationRequestAccountIdentification.

        Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.

        :return: The additional_bank_identification of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: AdditionalBankIdentification
        """
        return self._additional_bank_identification

    @additional_bank_identification.setter
    def additional_bank_identification(self, additional_bank_identification):
        """Sets the additional_bank_identification of this BankAccountIdentificationValidationRequestAccountIdentification.

        Additional identification codes of the bank. Some banks may require these identifiers for cross-border transfers.

        :param additional_bank_identification: The additional_bank_identification of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type additional_bank_identification: AdditionalBankIdentification
        """

        self._additional_bank_identification = additional_bank_identification

    @property
    def bic(self):
        """Gets the bic of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank's 8- or 11-character BIC or SWIFT code.

        :return: The bic of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank's 8- or 11-character BIC or SWIFT code.

        :param bic: The bic of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type bic: str
        """
        if bic is None:
            raise ValueError("Invalid value for `bic`, must not be `None`")
        if bic is not None and len(bic) > 11:
            raise ValueError("Invalid value for `bic`, length must be less than or equal to `11`")
        if bic is not None and len(bic) < 8:
            raise ValueError("Invalid value for `bic`, length must be greater than or equal to `8`")

        self._bic = bic

    @property
    def clearing_number(self):
        """Gets the clearing_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.

        :return: The clearing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._clearing_number

    @clearing_number.setter
    def clearing_number(self, clearing_number):
        """Sets the clearing_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 4- to 5-digit clearing number ([Clearingnummer](https://sv.wikipedia.org/wiki/Clearingnummer)), without separators or whitespace.

        :param clearing_number: The clearing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type clearing_number: str
        """
        if clearing_number is None:
            raise ValueError("Invalid value for `clearing_number`, must not be `None`")
        if clearing_number is not None and len(clearing_number) > 5:
            raise ValueError("Invalid value for `clearing_number`, length must be less than or equal to `5`")
        if clearing_number is not None and len(clearing_number) < 4:
            raise ValueError("Invalid value for `clearing_number`, length must be greater than or equal to `4`")

        self._clearing_number = clearing_number

    @property
    def sort_code(self):
        """Gets the sort_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.

        :return: The sort_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._sort_code

    @sort_code.setter
    def sort_code(self, sort_code):
        """Sets the sort_code of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 6-digit [sort code](https://en.wikipedia.org/wiki/Sort_code), without separators or whitespace.

        :param sort_code: The sort_code of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type sort_code: str
        """
        if sort_code is None:
            raise ValueError("Invalid value for `sort_code`, must not be `None`")
        if sort_code is not None and len(sort_code) > 6:
            raise ValueError("Invalid value for `sort_code`, length must be less than or equal to `6`")
        if sort_code is not None and len(sort_code) < 6:
            raise ValueError("Invalid value for `sort_code`, length must be greater than or equal to `6`")

        self._sort_code = sort_code

    @property
    def account_type(self):
        """Gets the account_type of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :return: The account_type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BankAccountIdentificationValidationRequestAccountIdentification.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :param account_type: The account_type of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type account_type: str
        """
        allowed_values = ["checking", "savings"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def routing_number(self):
        """Gets the routing_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.

        :return: The routing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this BankAccountIdentificationValidationRequestAccountIdentification.

        The 9-digit [routing number](https://en.wikipedia.org/wiki/ABA_routing_transit_number), without separators or whitespace.

        :param routing_number: The routing_number of this BankAccountIdentificationValidationRequestAccountIdentification.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and len(routing_number) > 9:
            raise ValueError("Invalid value for `routing_number`, length must be less than or equal to `9`")
        if routing_number is not None and len(routing_number) < 9:
            raise ValueError("Invalid value for `routing_number`, length must be greater than or equal to `9`")

        self._routing_number = routing_number
