# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number: str=None, expiry_date: str=None, issuer_country: str=None, issuer_state: str=None, national_id_exempt: bool=None, number: str=None, type: str=None):
        """IdentificationData - a model defined in OpenAPI

        :param card_number: The card_number of this IdentificationData.
        :param expiry_date: The expiry_date of this IdentificationData.
        :param issuer_country: The issuer_country of this IdentificationData.
        :param issuer_state: The issuer_state of this IdentificationData.
        :param national_id_exempt: The national_id_exempt of this IdentificationData.
        :param number: The number of this IdentificationData.
        :param type: The type of this IdentificationData.
        """
        self.openapi_types = {
            'card_number': str,
            'expiry_date': str,
            'issuer_country': str,
            'issuer_state': str,
            'national_id_exempt': bool,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'card_number': 'cardNumber',
            'expiry_date': 'expiryDate',
            'issuer_country': 'issuerCountry',
            'issuer_state': 'issuerState',
            'national_id_exempt': 'nationalIdExempt',
            'number': 'number',
            'type': 'type'
        }

        self._card_number = card_number
        self._expiry_date = expiry_date
        self._issuer_country = issuer_country
        self._issuer_state = issuer_state
        self._national_id_exempt = national_id_exempt
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentificationData of this IdentificationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this IdentificationData.

        The card number of the document that was issued (AU only).

        :return: The card_number of this IdentificationData.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this IdentificationData.

        The card number of the document that was issued (AU only).

        :param card_number: The card_number of this IdentificationData.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def expiry_date(self):
        """Gets the expiry_date of this IdentificationData.

        The expiry date of the document, in YYYY-MM-DD format.

        :return: The expiry_date of this IdentificationData.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this IdentificationData.

        The expiry date of the document, in YYYY-MM-DD format.

        :param expiry_date: The expiry_date of this IdentificationData.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def issuer_country(self):
        """Gets the issuer_country of this IdentificationData.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.

        :return: The issuer_country of this IdentificationData.
        :rtype: str
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this IdentificationData.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the document was issued. For example, **US**.

        :param issuer_country: The issuer_country of this IdentificationData.
        :type issuer_country: str
        """

        self._issuer_country = issuer_country

    @property
    def issuer_state(self):
        """Gets the issuer_state of this IdentificationData.

        The state or province where the document was issued (AU only).

        :return: The issuer_state of this IdentificationData.
        :rtype: str
        """
        return self._issuer_state

    @issuer_state.setter
    def issuer_state(self, issuer_state):
        """Sets the issuer_state of this IdentificationData.

        The state or province where the document was issued (AU only).

        :param issuer_state: The issuer_state of this IdentificationData.
        :type issuer_state: str
        """

        self._issuer_state = issuer_state

    @property
    def national_id_exempt(self):
        """Gets the national_id_exempt of this IdentificationData.

        Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, Adyen will require them to upload an ID document.

        :return: The national_id_exempt of this IdentificationData.
        :rtype: bool
        """
        return self._national_id_exempt

    @national_id_exempt.setter
    def national_id_exempt(self, national_id_exempt):
        """Sets the national_id_exempt of this IdentificationData.

        Applies only to individuals in the US. Set to **true** if the individual does not have an SSN. To verify their identity, Adyen will require them to upload an ID document.

        :param national_id_exempt: The national_id_exempt of this IdentificationData.
        :type national_id_exempt: bool
        """

        self._national_id_exempt = national_id_exempt

    @property
    def number(self):
        """Gets the number of this IdentificationData.

        The number in the document.

        :return: The number of this IdentificationData.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IdentificationData.

        The number in the document.

        :param number: The number of this IdentificationData.
        :type number: str
        """

        self._number = number

    @property
    def type(self):
        """Gets the type of this IdentificationData.

        Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  When providing ID numbers: * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.  When uploading documents: * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**.   * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).

        :return: The type of this IdentificationData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IdentificationData.

        Type of document, used when providing an ID number or uploading a document. The possible values depend on the legal entity type.  When providing ID numbers: * For **individual**, the `type` values can be **driversLicense**, **identityCard**, **nationalIdNumber**, or **passport**.  When uploading documents: * For **organization**, the `type` values can be **proofOfAddress**, **registrationDocument**, **taxDocument**, **proofOfOwnership**, or **proofOfIndustry**.   * For **individual**, the `type` values can be **identityCard**, **driversLicense**, **proofOfNationalIdNumber**, **proofOfResidency**, or **proofOfIndustry**.  * Use **bankStatement** to upload documents for a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id).

        :param type: The type of this IdentificationData.
        :type type: str
        """
        allowed_values = ["bankStatement", "driversLicense", "identityCard", "nationalIdNumber", "passport", "proofOfAddress", "proofOfNationalIdNumber", "proofOfResidency", "registrationDocument", "taxDocument", "proofOfIndustry"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
