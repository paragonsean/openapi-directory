# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_account import BalanceAccount
from openapi_server import util


class PaginatedBalanceAccountsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_accounts: List[BalanceAccount]=None, has_next: bool=None, has_previous: bool=None):
        """PaginatedBalanceAccountsResponse - a model defined in OpenAPI

        :param balance_accounts: The balance_accounts of this PaginatedBalanceAccountsResponse.
        :param has_next: The has_next of this PaginatedBalanceAccountsResponse.
        :param has_previous: The has_previous of this PaginatedBalanceAccountsResponse.
        """
        self.openapi_types = {
            'balance_accounts': List[BalanceAccount],
            'has_next': bool,
            'has_previous': bool
        }

        self.attribute_map = {
            'balance_accounts': 'balanceAccounts',
            'has_next': 'hasNext',
            'has_previous': 'hasPrevious'
        }

        self._balance_accounts = balance_accounts
        self._has_next = has_next
        self._has_previous = has_previous

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginatedBalanceAccountsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginatedBalanceAccountsResponse of this PaginatedBalanceAccountsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_accounts(self):
        """Gets the balance_accounts of this PaginatedBalanceAccountsResponse.

        List of balance accounts.

        :return: The balance_accounts of this PaginatedBalanceAccountsResponse.
        :rtype: List[BalanceAccount]
        """
        return self._balance_accounts

    @balance_accounts.setter
    def balance_accounts(self, balance_accounts):
        """Sets the balance_accounts of this PaginatedBalanceAccountsResponse.

        List of balance accounts.

        :param balance_accounts: The balance_accounts of this PaginatedBalanceAccountsResponse.
        :type balance_accounts: List[BalanceAccount]
        """
        if balance_accounts is None:
            raise ValueError("Invalid value for `balance_accounts`, must not be `None`")

        self._balance_accounts = balance_accounts

    @property
    def has_next(self):
        """Gets the has_next of this PaginatedBalanceAccountsResponse.

        Indicates whether there are more items on the next page.

        :return: The has_next of this PaginatedBalanceAccountsResponse.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this PaginatedBalanceAccountsResponse.

        Indicates whether there are more items on the next page.

        :param has_next: The has_next of this PaginatedBalanceAccountsResponse.
        :type has_next: bool
        """
        if has_next is None:
            raise ValueError("Invalid value for `has_next`, must not be `None`")

        self._has_next = has_next

    @property
    def has_previous(self):
        """Gets the has_previous of this PaginatedBalanceAccountsResponse.

        Indicates whether there are more items on the previous page.

        :return: The has_previous of this PaginatedBalanceAccountsResponse.
        :rtype: bool
        """
        return self._has_previous

    @has_previous.setter
    def has_previous(self, has_previous):
        """Sets the has_previous of this PaginatedBalanceAccountsResponse.

        Indicates whether there are more items on the previous page.

        :param has_previous: The has_previous of this PaginatedBalanceAccountsResponse.
        :type has_previous: bool
        """
        if has_previous is None:
            raise ValueError("Invalid value for `has_previous`, must not be `None`")

        self._has_previous = has_previous
