# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.transaction_rule_interval import TransactionRuleInterval
from openapi_server import util


class TransactionRuleInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, balance_platform_id: str=None, countries: List[str]=None, description: str=None, end_date: str=None, entry_modes: List[str]=None, interval: TransactionRuleInterval=None, max_transactions: int=None, mccs: List[str]=None, payment_instrument_group_id: str=None, payment_instrument_id: str=None, processing_types: List[str]=None, reference: str=None, start_date: str=None, status: str=None, type: str=None):
        """TransactionRuleInfo - a model defined in OpenAPI

        :param amount: The amount of this TransactionRuleInfo.
        :param balance_platform_id: The balance_platform_id of this TransactionRuleInfo.
        :param countries: The countries of this TransactionRuleInfo.
        :param description: The description of this TransactionRuleInfo.
        :param end_date: The end_date of this TransactionRuleInfo.
        :param entry_modes: The entry_modes of this TransactionRuleInfo.
        :param interval: The interval of this TransactionRuleInfo.
        :param max_transactions: The max_transactions of this TransactionRuleInfo.
        :param mccs: The mccs of this TransactionRuleInfo.
        :param payment_instrument_group_id: The payment_instrument_group_id of this TransactionRuleInfo.
        :param payment_instrument_id: The payment_instrument_id of this TransactionRuleInfo.
        :param processing_types: The processing_types of this TransactionRuleInfo.
        :param reference: The reference of this TransactionRuleInfo.
        :param start_date: The start_date of this TransactionRuleInfo.
        :param status: The status of this TransactionRuleInfo.
        :param type: The type of this TransactionRuleInfo.
        """
        self.openapi_types = {
            'amount': Amount,
            'balance_platform_id': str,
            'countries': List[str],
            'description': str,
            'end_date': str,
            'entry_modes': List[str],
            'interval': TransactionRuleInterval,
            'max_transactions': int,
            'mccs': List[str],
            'payment_instrument_group_id': str,
            'payment_instrument_id': str,
            'processing_types': List[str],
            'reference': str,
            'start_date': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'balance_platform_id': 'balancePlatformId',
            'countries': 'countries',
            'description': 'description',
            'end_date': 'endDate',
            'entry_modes': 'entryModes',
            'interval': 'interval',
            'max_transactions': 'maxTransactions',
            'mccs': 'mccs',
            'payment_instrument_group_id': 'paymentInstrumentGroupId',
            'payment_instrument_id': 'paymentInstrumentId',
            'processing_types': 'processingTypes',
            'reference': 'reference',
            'start_date': 'startDate',
            'status': 'status',
            'type': 'type'
        }

        self._amount = amount
        self._balance_platform_id = balance_platform_id
        self._countries = countries
        self._description = description
        self._end_date = end_date
        self._entry_modes = entry_modes
        self._interval = interval
        self._max_transactions = max_transactions
        self._mccs = mccs
        self._payment_instrument_group_id = payment_instrument_group_id
        self._payment_instrument_id = payment_instrument_id
        self._processing_types = processing_types
        self._reference = reference
        self._start_date = start_date
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionRuleInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionRuleInfo of this TransactionRuleInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransactionRuleInfo.

        The maximum amount that a payment instrument can be used for in the period specified in the `interval.type`.

        :return: The amount of this TransactionRuleInfo.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionRuleInfo.

        The maximum amount that a payment instrument can be used for in the period specified in the `interval.type`.

        :param amount: The amount of this TransactionRuleInfo.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def balance_platform_id(self):
        """Gets the balance_platform_id of this TransactionRuleInfo.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.

        :return: The balance_platform_id of this TransactionRuleInfo.
        :rtype: str
        """
        return self._balance_platform_id

    @balance_platform_id.setter
    def balance_platform_id(self, balance_platform_id):
        """Sets the balance_platform_id of this TransactionRuleInfo.

        The unique identifier of the [balance platform](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/get/balancePlatforms/{id}__queryParam_id) to which the rule applies.

        :param balance_platform_id: The balance_platform_id of this TransactionRuleInfo.
        :type balance_platform_id: str
        """

        self._balance_platform_id = balance_platform_id

    @property
    def countries(self):
        """Gets the countries of this TransactionRuleInfo.

        List of countries to which the rule applies. For example: **[\"NL\",\"US\"]**.

        :return: The countries of this TransactionRuleInfo.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this TransactionRuleInfo.

        List of countries to which the rule applies. For example: **[\"NL\",\"US\"]**.

        :param countries: The countries of this TransactionRuleInfo.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def description(self):
        """Gets the description of this TransactionRuleInfo.

        Your description for the transaction rule, maximum 300 characters.

        :return: The description of this TransactionRuleInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionRuleInfo.

        Your description for the transaction rule, maximum 300 characters.

        :param description: The description of this TransactionRuleInfo.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def end_date(self):
        """Gets the end_date of this TransactionRuleInfo.

        The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.  If not provided, the rule will be evaluated until the rule status is set to **inactive**.

        :return: The end_date of this TransactionRuleInfo.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TransactionRuleInfo.

        The date when the rule will stop being evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.  If not provided, the rule will be evaluated until the rule status is set to **inactive**.

        :param end_date: The end_date of this TransactionRuleInfo.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def entry_modes(self):
        """Gets the entry_modes of this TransactionRuleInfo.

        List of point-of-sale entry modes to which the rule applies.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.

        :return: The entry_modes of this TransactionRuleInfo.
        :rtype: List[str]
        """
        return self._entry_modes

    @entry_modes.setter
    def entry_modes(self, entry_modes):
        """Sets the entry_modes of this TransactionRuleInfo.

        List of point-of-sale entry modes to which the rule applies.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **token**, **server**, **barcode**, **ocr**.

        :param entry_modes: The entry_modes of this TransactionRuleInfo.
        :type entry_modes: List[str]
        """
        allowed_values = ["barcode", "chip", "cof", "contactless", "magstripe", "manual", "ocr", "server", "unknown"]  # noqa: E501
        if not set(entry_modes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entry_modes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entry_modes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entry_modes = entry_modes

    @property
    def interval(self):
        """Gets the interval of this TransactionRuleInfo.

        The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.

        :return: The interval of this TransactionRuleInfo.
        :rtype: TransactionRuleInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this TransactionRuleInfo.

        The [time interval](https://docs.adyen.com/issuing/transaction-rules#time-intervals) when the rule conditions apply.

        :param interval: The interval of this TransactionRuleInfo.
        :type interval: TransactionRuleInterval
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def max_transactions(self):
        """Gets the max_transactions of this TransactionRuleInfo.

        The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`.

        :return: The max_transactions of this TransactionRuleInfo.
        :rtype: int
        """
        return self._max_transactions

    @max_transactions.setter
    def max_transactions(self, max_transactions):
        """Sets the max_transactions of this TransactionRuleInfo.

        The maximum number of transactions that a payment instrument can be used for in the period specified in the `interval.type`.

        :param max_transactions: The max_transactions of this TransactionRuleInfo.
        :type max_transactions: int
        """

        self._max_transactions = max_transactions

    @property
    def mccs(self):
        """Gets the mccs of this TransactionRuleInfo.

        List of Merchant Category Codes (MCCs) to which the rule applies.

        :return: The mccs of this TransactionRuleInfo.
        :rtype: List[str]
        """
        return self._mccs

    @mccs.setter
    def mccs(self, mccs):
        """Sets the mccs of this TransactionRuleInfo.

        List of Merchant Category Codes (MCCs) to which the rule applies.

        :param mccs: The mccs of this TransactionRuleInfo.
        :type mccs: List[str]
        """

        self._mccs = mccs

    @property
    def payment_instrument_group_id(self):
        """Gets the payment_instrument_group_id of this TransactionRuleInfo.

        The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies.

        :return: The payment_instrument_group_id of this TransactionRuleInfo.
        :rtype: str
        """
        return self._payment_instrument_group_id

    @payment_instrument_group_id.setter
    def payment_instrument_group_id(self, payment_instrument_group_id):
        """Sets the payment_instrument_group_id of this TransactionRuleInfo.

        The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstrumentGroups__resParam_id) to which the rule applies.

        :param payment_instrument_group_id: The payment_instrument_group_id of this TransactionRuleInfo.
        :type payment_instrument_group_id: str
        """

        self._payment_instrument_group_id = payment_instrument_group_id

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this TransactionRuleInfo.

        The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies.

        :return: The payment_instrument_id of this TransactionRuleInfo.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this TransactionRuleInfo.

        The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id) to which the rule applies.

        :param payment_instrument_id: The payment_instrument_id of this TransactionRuleInfo.
        :type payment_instrument_id: str
        """

        self._payment_instrument_id = payment_instrument_id

    @property
    def processing_types(self):
        """Gets the processing_types of this TransactionRuleInfo.

        List of processing types to which the rule applies.  Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.

        :return: The processing_types of this TransactionRuleInfo.
        :rtype: List[str]
        """
        return self._processing_types

    @processing_types.setter
    def processing_types(self, processing_types):
        """Sets the processing_types of this TransactionRuleInfo.

        List of processing types to which the rule applies.  Possible values: **atmWithdraw**, **pos**, **ecommerce**, **moto**, **recurring**, **balanceInquiry**.

        :param processing_types: The processing_types of this TransactionRuleInfo.
        :type processing_types: List[str]
        """
        allowed_values = ["atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "recurring", "token", "unknown"]  # noqa: E501
        if not set(processing_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `processing_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(processing_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._processing_types = processing_types

    @property
    def reference(self):
        """Gets the reference of this TransactionRuleInfo.

        Your reference for the transaction rule, maximum 150 characters.

        :return: The reference of this TransactionRuleInfo.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransactionRuleInfo.

        Your reference for the transaction rule, maximum 150 characters.

        :param reference: The reference of this TransactionRuleInfo.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def start_date(self):
        """Gets the start_date of this TransactionRuleInfo.

        The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.  If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.   

        :return: The start_date of this TransactionRuleInfo.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TransactionRuleInfo.

        The date when the rule will start to be evaluated, in ISO 8601 extended offset date-time format. For example, **2020-12-18T10:15:30+01:00**.  If not provided when creating a transaction rule, the `startDate` is set to the date when the rule status is set to **active**.   

        :param start_date: The start_date of this TransactionRuleInfo.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def status(self):
        """Gets the status of this TransactionRuleInfo.

        The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created  with an **active** status.   Possible values: **active**, **inactive**.

        :return: The status of this TransactionRuleInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionRuleInfo.

        The status of the transaction rule. If you provide a `startDate` in the request, the rule is automatically created  with an **active** status.   Possible values: **active**, **inactive**.

        :param status: The status of this TransactionRuleInfo.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this TransactionRuleInfo.

        Type of conditions provided in the rule.  Possible values:   * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.  * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.  * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.  * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval. 

        :return: The type of this TransactionRuleInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionRuleInfo.

        Type of conditions provided in the rule.  Possible values:   * **allowList**: The rule provides categories (such as country and MCC) where payments must be allowed.  * **blockList**: The rule provides categories (such as country and MCC) where payments must be blocked.  * **maxUsage**: The rule sets limits for the maximum amount or maximum number of transactions for the lifetime of the payment instrument.  * **velocity**: The rule sets limits for the maximum amount or maximum number of transactions for a given time interval. 

        :param type: The type of this TransactionRuleInfo.
        :type type: str
        """
        allowed_values = ["allowList", "blockList", "maxUsage", "velocity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
