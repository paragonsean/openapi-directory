# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_info import CardInfo
from openapi_server import util


class PaymentInstrumentUpdateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, card: CardInfo=None, status: str=None, status_comment: str=None):
        """PaymentInstrumentUpdateRequest - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this PaymentInstrumentUpdateRequest.
        :param card: The card of this PaymentInstrumentUpdateRequest.
        :param status: The status of this PaymentInstrumentUpdateRequest.
        :param status_comment: The status_comment of this PaymentInstrumentUpdateRequest.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'card': CardInfo,
            'status': str,
            'status_comment': str
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'card': 'card',
            'status': 'status',
            'status_comment': 'statusComment'
        }

        self._balance_account_id = balance_account_id
        self._card = card
        self._status = status
        self._status_comment = status_comment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentUpdateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentUpdateRequest of this PaymentInstrumentUpdateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this PaymentInstrumentUpdateRequest.

        The unique identifier of the balance account associated with this payment instrument. >You can only change the balance account ID if the payment instrument has **Requested** or **Inactive** status.

        :return: The balance_account_id of this PaymentInstrumentUpdateRequest.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this PaymentInstrumentUpdateRequest.

        The unique identifier of the balance account associated with this payment instrument. >You can only change the balance account ID if the payment instrument has **Requested** or **Inactive** status.

        :param balance_account_id: The balance_account_id of this PaymentInstrumentUpdateRequest.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def card(self):
        """Gets the card of this PaymentInstrumentUpdateRequest.

        Object that contains information about the card payment instrument.

        :return: The card of this PaymentInstrumentUpdateRequest.
        :rtype: CardInfo
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentInstrumentUpdateRequest.

        Object that contains information about the card payment instrument.

        :param card: The card of this PaymentInstrumentUpdateRequest.
        :type card: CardInfo
        """

        self._card = card

    @property
    def status(self):
        """Gets the status of this PaymentInstrumentUpdateRequest.

        The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   

        :return: The status of this PaymentInstrumentUpdateRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentInstrumentUpdateRequest.

        The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   

        :param status: The status of this PaymentInstrumentUpdateRequest.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "Lost", "Requested", "Stolen", "Suspended", "blocked", "discarded"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_comment(self):
        """Gets the status_comment of this PaymentInstrumentUpdateRequest.

        Comment for the status of the payment instrument.

        :return: The status_comment of this PaymentInstrumentUpdateRequest.
        :rtype: str
        """
        return self._status_comment

    @status_comment.setter
    def status_comment(self, status_comment):
        """Sets the status_comment of this PaymentInstrumentUpdateRequest.

        Comment for the status of the payment instrument.

        :param status_comment: The status_comment of this PaymentInstrumentUpdateRequest.
        :type status_comment: str
        """

        self._status_comment = status_comment
