# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server import util


class PaginatedPaymentInstrumentsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_next: bool=None, has_previous: bool=None, payment_instruments: List[PaymentInstrument]=None):
        """PaginatedPaymentInstrumentsResponse - a model defined in OpenAPI

        :param has_next: The has_next of this PaginatedPaymentInstrumentsResponse.
        :param has_previous: The has_previous of this PaginatedPaymentInstrumentsResponse.
        :param payment_instruments: The payment_instruments of this PaginatedPaymentInstrumentsResponse.
        """
        self.openapi_types = {
            'has_next': bool,
            'has_previous': bool,
            'payment_instruments': List[PaymentInstrument]
        }

        self.attribute_map = {
            'has_next': 'hasNext',
            'has_previous': 'hasPrevious',
            'payment_instruments': 'paymentInstruments'
        }

        self._has_next = has_next
        self._has_previous = has_previous
        self._payment_instruments = payment_instruments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaginatedPaymentInstrumentsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaginatedPaymentInstrumentsResponse of this PaginatedPaymentInstrumentsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_next(self):
        """Gets the has_next of this PaginatedPaymentInstrumentsResponse.

        Indicates whether there are more items on the next page.

        :return: The has_next of this PaginatedPaymentInstrumentsResponse.
        :rtype: bool
        """
        return self._has_next

    @has_next.setter
    def has_next(self, has_next):
        """Sets the has_next of this PaginatedPaymentInstrumentsResponse.

        Indicates whether there are more items on the next page.

        :param has_next: The has_next of this PaginatedPaymentInstrumentsResponse.
        :type has_next: bool
        """
        if has_next is None:
            raise ValueError("Invalid value for `has_next`, must not be `None`")

        self._has_next = has_next

    @property
    def has_previous(self):
        """Gets the has_previous of this PaginatedPaymentInstrumentsResponse.

        Indicates whether there are more items on the previous page.

        :return: The has_previous of this PaginatedPaymentInstrumentsResponse.
        :rtype: bool
        """
        return self._has_previous

    @has_previous.setter
    def has_previous(self, has_previous):
        """Sets the has_previous of this PaginatedPaymentInstrumentsResponse.

        Indicates whether there are more items on the previous page.

        :param has_previous: The has_previous of this PaginatedPaymentInstrumentsResponse.
        :type has_previous: bool
        """
        if has_previous is None:
            raise ValueError("Invalid value for `has_previous`, must not be `None`")

        self._has_previous = has_previous

    @property
    def payment_instruments(self):
        """Gets the payment_instruments of this PaginatedPaymentInstrumentsResponse.

        List of payment instruments associated with the balance account.

        :return: The payment_instruments of this PaginatedPaymentInstrumentsResponse.
        :rtype: List[PaymentInstrument]
        """
        return self._payment_instruments

    @payment_instruments.setter
    def payment_instruments(self, payment_instruments):
        """Sets the payment_instruments of this PaginatedPaymentInstrumentsResponse.

        List of payment instruments associated with the balance account.

        :param payment_instruments: The payment_instruments of this PaginatedPaymentInstrumentsResponse.
        :type payment_instruments: List[PaymentInstrument]
        """
        if payment_instruments is None:
            raise ValueError("Invalid value for `payment_instruments`, must not be `None`")

        self._payment_instruments = payment_instruments
