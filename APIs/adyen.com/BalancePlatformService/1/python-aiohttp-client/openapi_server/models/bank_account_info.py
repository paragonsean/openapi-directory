# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccountInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, account_type: str=None, bank_bic_swift: str=None, bank_city: str=None, bank_code: str=None, bank_name: str=None, branch_code: str=None, check_code: str=None, country_code: str=None, currency_code: str=None, iban: str=None):
        """BankAccountInfo - a model defined in OpenAPI

        :param account_number: The account_number of this BankAccountInfo.
        :param account_type: The account_type of this BankAccountInfo.
        :param bank_bic_swift: The bank_bic_swift of this BankAccountInfo.
        :param bank_city: The bank_city of this BankAccountInfo.
        :param bank_code: The bank_code of this BankAccountInfo.
        :param bank_name: The bank_name of this BankAccountInfo.
        :param branch_code: The branch_code of this BankAccountInfo.
        :param check_code: The check_code of this BankAccountInfo.
        :param country_code: The country_code of this BankAccountInfo.
        :param currency_code: The currency_code of this BankAccountInfo.
        :param iban: The iban of this BankAccountInfo.
        """
        self.openapi_types = {
            'account_number': str,
            'account_type': str,
            'bank_bic_swift': str,
            'bank_city': str,
            'bank_code': str,
            'bank_name': str,
            'branch_code': str,
            'check_code': str,
            'country_code': str,
            'currency_code': str,
            'iban': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'bank_bic_swift': 'bankBicSwift',
            'bank_city': 'bankCity',
            'bank_code': 'bankCode',
            'bank_name': 'bankName',
            'branch_code': 'branchCode',
            'check_code': 'checkCode',
            'country_code': 'countryCode',
            'currency_code': 'currencyCode',
            'iban': 'iban'
        }

        self._account_number = account_number
        self._account_type = account_type
        self._bank_bic_swift = bank_bic_swift
        self._bank_city = bank_city
        self._bank_code = bank_code
        self._bank_name = bank_name
        self._branch_code = branch_code
        self._check_code = check_code
        self._country_code = country_code
        self._currency_code = currency_code
        self._iban = iban

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountInfo of this BankAccountInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this BankAccountInfo.

        The bank account number (without separators).   When this is provided, the `branchCode` is also required.

        :return: The account_number of this BankAccountInfo.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BankAccountInfo.

        The bank account number (without separators).   When this is provided, the `branchCode` is also required.

        :param account_number: The account_number of this BankAccountInfo.
        :type account_number: str
        """

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this BankAccountInfo.

        The type of bank account.

        :return: The account_type of this BankAccountInfo.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BankAccountInfo.

        The type of bank account.

        :param account_type: The account_type of this BankAccountInfo.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def bank_bic_swift(self):
        """Gets the bank_bic_swift of this BankAccountInfo.

        The bank's BIC or SWIFT code.

        :return: The bank_bic_swift of this BankAccountInfo.
        :rtype: str
        """
        return self._bank_bic_swift

    @bank_bic_swift.setter
    def bank_bic_swift(self, bank_bic_swift):
        """Sets the bank_bic_swift of this BankAccountInfo.

        The bank's BIC or SWIFT code.

        :param bank_bic_swift: The bank_bic_swift of this BankAccountInfo.
        :type bank_bic_swift: str
        """

        self._bank_bic_swift = bank_bic_swift

    @property
    def bank_city(self):
        """Gets the bank_city of this BankAccountInfo.

        The city where the bank is located.

        :return: The bank_city of this BankAccountInfo.
        :rtype: str
        """
        return self._bank_city

    @bank_city.setter
    def bank_city(self, bank_city):
        """Sets the bank_city of this BankAccountInfo.

        The city where the bank is located.

        :param bank_city: The bank_city of this BankAccountInfo.
        :type bank_city: str
        """

        self._bank_city = bank_city

    @property
    def bank_code(self):
        """Gets the bank_code of this BankAccountInfo.

        The bank code of the banking institution with which the bank account is registered.

        :return: The bank_code of this BankAccountInfo.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this BankAccountInfo.

        The bank code of the banking institution with which the bank account is registered.

        :param bank_code: The bank_code of this BankAccountInfo.
        :type bank_code: str
        """

        self._bank_code = bank_code

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccountInfo.

        The name of the banking institution where the bank account is held.

        :return: The bank_name of this BankAccountInfo.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccountInfo.

        The name of the banking institution where the bank account is held.

        :param bank_name: The bank_name of this BankAccountInfo.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def branch_code(self):
        """Gets the branch_code of this BankAccountInfo.

        The branch code of the branch under which the bank account is registered.  Required when you provide an `accountNumber`.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl

        :return: The branch_code of this BankAccountInfo.
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this BankAccountInfo.

        The branch code of the branch under which the bank account is registered.  Required when you provide an `accountNumber`.   In the following countries, this value corresponds to:   * United States: routing number * United Kingdom: sort code * Germany: Bankleitzahl

        :param branch_code: The branch_code of this BankAccountInfo.
        :type branch_code: str
        """

        self._branch_code = branch_code

    @property
    def check_code(self):
        """Gets the check_code of this BankAccountInfo.

        The check code of the bank account.

        :return: The check_code of this BankAccountInfo.
        :rtype: str
        """
        return self._check_code

    @check_code.setter
    def check_code(self, check_code):
        """Sets the check_code of this BankAccountInfo.

        The check code of the bank account.

        :param check_code: The check_code of this BankAccountInfo.
        :type check_code: str
        """

        self._check_code = check_code

    @property
    def country_code(self):
        """Gets the country_code of this BankAccountInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.

        :return: The country_code of this BankAccountInfo.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BankAccountInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the bank account is registered. For example, **NL**.

        :param country_code: The country_code of this BankAccountInfo.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this BankAccountInfo.

        The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.

        :return: The currency_code of this BankAccountInfo.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this BankAccountInfo.

        The account's three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes). For example, **EUR**.

        :param currency_code: The currency_code of this BankAccountInfo.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def iban(self):
        """Gets the iban of this BankAccountInfo.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :return: The iban of this BankAccountInfo.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccountInfo.

        The international bank account number as defined in the [ISO-13616](https://www.iso.org/standard/81090.html) standard.

        :param iban: The iban of this BankAccountInfo.
        :type iban: str
        """

        self._iban = iban
