# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.phone import Phone
from openapi_server import util


class ContactDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, email: str=None, phone: Phone=None, web_address: str=None):
        """ContactDetails - a model defined in OpenAPI

        :param address: The address of this ContactDetails.
        :param email: The email of this ContactDetails.
        :param phone: The phone of this ContactDetails.
        :param web_address: The web_address of this ContactDetails.
        """
        self.openapi_types = {
            'address': Address,
            'email': str,
            'phone': Phone,
            'web_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'phone': 'phone',
            'web_address': 'webAddress'
        }

        self._address = address
        self._email = email
        self._phone = phone
        self._web_address = web_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactDetails of this ContactDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ContactDetails.

        The address of the account holder.

        :return: The address of this ContactDetails.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactDetails.

        The address of the account holder.

        :param address: The address of this ContactDetails.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")

        self._address = address

    @property
    def email(self):
        """Gets the email of this ContactDetails.

        The email address of the account holder.

        :return: The email of this ContactDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ContactDetails.

        The email address of the account holder.

        :param email: The email of this ContactDetails.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this ContactDetails.

        The phone number of the account holder.

        :return: The phone of this ContactDetails.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this ContactDetails.

        The phone number of the account holder.

        :param phone: The phone of this ContactDetails.
        :type phone: Phone
        """
        if phone is None:
            raise ValueError("Invalid value for `phone`, must not be `None`")

        self._phone = phone

    @property
    def web_address(self):
        """Gets the web_address of this ContactDetails.

        The URL of the account holder's website.

        :return: The web_address of this ContactDetails.
        :rtype: str
        """
        return self._web_address

    @web_address.setter
    def web_address(self, web_address):
        """Sets the web_address of this ContactDetails.

        The URL of the account holder's website.

        :param web_address: The web_address of this ContactDetails.
        :type web_address: str
        """

        self._web_address = web_address
