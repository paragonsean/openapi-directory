# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.expiry import Expiry
from openapi_server import util


class PaymentInstrumentRevealInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvc: str=None, expiration: Expiry=None, pan: str=None):
        """PaymentInstrumentRevealInfo - a model defined in OpenAPI

        :param cvc: The cvc of this PaymentInstrumentRevealInfo.
        :param expiration: The expiration of this PaymentInstrumentRevealInfo.
        :param pan: The pan of this PaymentInstrumentRevealInfo.
        """
        self.openapi_types = {
            'cvc': str,
            'expiration': Expiry,
            'pan': str
        }

        self.attribute_map = {
            'cvc': 'cvc',
            'expiration': 'expiration',
            'pan': 'pan'
        }

        self._cvc = cvc
        self._expiration = expiration
        self._pan = pan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentRevealInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentRevealInfo of this PaymentInstrumentRevealInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvc(self):
        """Gets the cvc of this PaymentInstrumentRevealInfo.

        The CVC2 value of the card.

        :return: The cvc of this PaymentInstrumentRevealInfo.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this PaymentInstrumentRevealInfo.

        The CVC2 value of the card.

        :param cvc: The cvc of this PaymentInstrumentRevealInfo.
        :type cvc: str
        """
        if cvc is None:
            raise ValueError("Invalid value for `cvc`, must not be `None`")

        self._cvc = cvc

    @property
    def expiration(self):
        """Gets the expiration of this PaymentInstrumentRevealInfo.

        The expiration date of the card.

        :return: The expiration of this PaymentInstrumentRevealInfo.
        :rtype: Expiry
        """
        return self._expiration

    @expiration.setter
    def expiration(self, expiration):
        """Sets the expiration of this PaymentInstrumentRevealInfo.

        The expiration date of the card.

        :param expiration: The expiration of this PaymentInstrumentRevealInfo.
        :type expiration: Expiry
        """
        if expiration is None:
            raise ValueError("Invalid value for `expiration`, must not be `None`")

        self._expiration = expiration

    @property
    def pan(self):
        """Gets the pan of this PaymentInstrumentRevealInfo.

        The primary account number (PAN) of the card.

        :return: The pan of this PaymentInstrumentRevealInfo.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PaymentInstrumentRevealInfo.

        The primary account number (PAN) of the card.

        :param pan: The pan of this PaymentInstrumentRevealInfo.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")

        self._pan = pan
