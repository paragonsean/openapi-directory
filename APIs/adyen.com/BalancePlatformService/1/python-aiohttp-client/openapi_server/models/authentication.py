# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.phone import Phone
from openapi_server import util


class Authentication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email: str=None, password: str=None, phone: Phone=None):
        """Authentication - a model defined in OpenAPI

        :param email: The email of this Authentication.
        :param password: The password of this Authentication.
        :param phone: The phone of this Authentication.
        """
        self.openapi_types = {
            'email': str,
            'password': str,
            'phone': Phone
        }

        self.attribute_map = {
            'email': 'email',
            'password': 'password',
            'phone': 'phone'
        }

        self._email = email
        self._password = password
        self._phone = phone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authentication':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Authentication of this Authentication.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email(self):
        """Gets the email of this Authentication.

        The email address where the one-time password (OTP) is sent.

        :return: The email of this Authentication.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Authentication.

        The email address where the one-time password (OTP) is sent.

        :param email: The email of this Authentication.
        :type email: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this Authentication.

        The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.  * Characters between **a-z**, **A-Z**, and **0-9**  * Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'\",;:$&àùòâôûáúó**

        :return: The password of this Authentication.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Authentication.

        The password used for 3D Secure password-based authentication. The value must be between 1 to 30 characters and must only contain the following supported characters.  * Characters between **a-z**, **A-Z**, and **0-9**  * Special characters: **äöüßÄÖÜ+-*/ç%()=?!~#'\",;:$&àùòâôûáúó**

        :param password: The password of this Authentication.
        :type password: str
        """
        if password is not None and len(password) > 30:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `30`")
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")

        self._password = password

    @property
    def phone(self):
        """Gets the phone of this Authentication.

        The phone number where the one-time password (OTP) is sent.  This object must have:  * A `type` set to **mobile**.  * A `number` with a valid country code.  * A `number` with more than 4 digits, excluding the country code.  >Make sure to verify that the card user owns the phone number.

        :return: The phone of this Authentication.
        :rtype: Phone
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Authentication.

        The phone number where the one-time password (OTP) is sent.  This object must have:  * A `type` set to **mobile**.  * A `number` with a valid country code.  * A `number` with more than 4 digits, excluding the country code.  >Make sure to verify that the card user owns the phone number.

        :param phone: The phone of this Authentication.
        :type phone: Phone
        """

        self._phone = phone
