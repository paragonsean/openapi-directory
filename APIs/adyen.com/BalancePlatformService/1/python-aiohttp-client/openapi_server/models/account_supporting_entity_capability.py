# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccountSupportingEntityCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, allowed_level: str=None, enabled: bool=None, id: str=None, requested: bool=None, requested_level: str=None, verification_status: str=None):
        """AccountSupportingEntityCapability - a model defined in OpenAPI

        :param allowed: The allowed of this AccountSupportingEntityCapability.
        :param allowed_level: The allowed_level of this AccountSupportingEntityCapability.
        :param enabled: The enabled of this AccountSupportingEntityCapability.
        :param id: The id of this AccountSupportingEntityCapability.
        :param requested: The requested of this AccountSupportingEntityCapability.
        :param requested_level: The requested_level of this AccountSupportingEntityCapability.
        :param verification_status: The verification_status of this AccountSupportingEntityCapability.
        """
        self.openapi_types = {
            'allowed': bool,
            'allowed_level': str,
            'enabled': bool,
            'id': str,
            'requested': bool,
            'requested_level': str,
            'verification_status': str
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'allowed_level': 'allowedLevel',
            'enabled': 'enabled',
            'id': 'id',
            'requested': 'requested',
            'requested_level': 'requestedLevel',
            'verification_status': 'verificationStatus'
        }

        self._allowed = allowed
        self._allowed_level = allowed_level
        self._enabled = enabled
        self._id = id
        self._requested = requested
        self._requested_level = requested_level
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountSupportingEntityCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountSupportingEntityCapability of this AccountSupportingEntityCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this AccountSupportingEntityCapability.

        Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.

        :return: The allowed of this AccountSupportingEntityCapability.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this AccountSupportingEntityCapability.

        Indicates whether the supporting entity capability is allowed. Adyen sets this to **true** if the verification is successful and the account holder is permitted to use the capability.

        :param allowed: The allowed of this AccountSupportingEntityCapability.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def allowed_level(self):
        """Gets the allowed_level of this AccountSupportingEntityCapability.

        The capability level that is allowed for the account holder.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :return: The allowed_level of this AccountSupportingEntityCapability.
        :rtype: str
        """
        return self._allowed_level

    @allowed_level.setter
    def allowed_level(self, allowed_level):
        """Sets the allowed_level of this AccountSupportingEntityCapability.

        The capability level that is allowed for the account holder.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :param allowed_level: The allowed_level of this AccountSupportingEntityCapability.
        :type allowed_level: str
        """
        allowed_values = ["high", "low", "medium", "notApplicable"]  # noqa: E501
        if allowed_level not in allowed_values:
            raise ValueError(
                "Invalid value for `allowed_level` ({0}), must be one of {1}"
                .format(allowed_level, allowed_values)
            )

        self._allowed_level = allowed_level

    @property
    def enabled(self):
        """Gets the enabled of this AccountSupportingEntityCapability.

        Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.

        :return: The enabled of this AccountSupportingEntityCapability.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AccountSupportingEntityCapability.

        Indicates whether the capability is enabled. If **false**, the capability is temporarily disabled for the account holder.

        :param enabled: The enabled of this AccountSupportingEntityCapability.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def id(self):
        """Gets the id of this AccountSupportingEntityCapability.

        The ID of the supporting entity.

        :return: The id of this AccountSupportingEntityCapability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountSupportingEntityCapability.

        The ID of the supporting entity.

        :param id: The id of this AccountSupportingEntityCapability.
        :type id: str
        """

        self._id = id

    @property
    def requested(self):
        """Gets the requested of this AccountSupportingEntityCapability.

        Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.

        :return: The requested of this AccountSupportingEntityCapability.
        :rtype: bool
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this AccountSupportingEntityCapability.

        Indicates whether the capability is requested. To check whether the account holder is permitted to use the capability, refer to the `allowed` field.

        :param requested: The requested of this AccountSupportingEntityCapability.
        :type requested: bool
        """

        self._requested = requested

    @property
    def requested_level(self):
        """Gets the requested_level of this AccountSupportingEntityCapability.

        The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :return: The requested_level of this AccountSupportingEntityCapability.
        :rtype: str
        """
        return self._requested_level

    @requested_level.setter
    def requested_level(self, requested_level):
        """Sets the requested_level of this AccountSupportingEntityCapability.

        The requested level of the capability. Some capabilities, such as those used in [card issuing](https://docs.adyen.com/issuing/add-capabilities#capability-levels), have different levels. Levels increase the capability, but also require additional checks and increased monitoring.  Possible values: **notApplicable**, **low**, **medium**, **high**.

        :param requested_level: The requested_level of this AccountSupportingEntityCapability.
        :type requested_level: str
        """
        allowed_values = ["high", "low", "medium", "notApplicable"]  # noqa: E501
        if requested_level not in allowed_values:
            raise ValueError(
                "Invalid value for `requested_level` ({0}), must be one of {1}"
                .format(requested_level, allowed_values)
            )

        self._requested_level = requested_level

    @property
    def verification_status(self):
        """Gets the verification_status of this AccountSupportingEntityCapability.

        The status of the verification checks for the supporting entity capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :return: The verification_status of this AccountSupportingEntityCapability.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this AccountSupportingEntityCapability.

        The status of the verification checks for the supporting entity capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :param verification_status: The verification_status of this AccountSupportingEntityCapability.
        :type verification_status: str
        """
        allowed_values = ["invalid", "pending", "rejected", "valid"]  # noqa: E501
        if verification_status not in allowed_values:
            raise ValueError(
                "Invalid value for `verification_status` ({0}), must be one of {1}"
                .format(verification_status, allowed_values)
            )

        self._verification_status = verification_status
