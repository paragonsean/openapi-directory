# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SupportingEntityCapability(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed: bool=None, id: str=None, requested: bool=None, verification_status: str=None):
        """SupportingEntityCapability - a model defined in OpenAPI

        :param allowed: The allowed of this SupportingEntityCapability.
        :param id: The id of this SupportingEntityCapability.
        :param requested: The requested of this SupportingEntityCapability.
        :param verification_status: The verification_status of this SupportingEntityCapability.
        """
        self.openapi_types = {
            'allowed': bool,
            'id': str,
            'requested': bool,
            'verification_status': str
        }

        self.attribute_map = {
            'allowed': 'allowed',
            'id': 'id',
            'requested': 'requested',
            'verification_status': 'verificationStatus'
        }

        self._allowed = allowed
        self._id = id
        self._requested = requested
        self._verification_status = verification_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SupportingEntityCapability':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SupportingEntityCapability of this SupportingEntityCapability.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed(self):
        """Gets the allowed of this SupportingEntityCapability.

        Indicates whether the supporting entity capability is allowed.  If a supporting entity is allowed but its parent legal entity is not, it means there are other supporting entities that failed validation.  **The allowed supporting entity can still be used**

        :return: The allowed of this SupportingEntityCapability.
        :rtype: bool
        """
        return self._allowed

    @allowed.setter
    def allowed(self, allowed):
        """Sets the allowed of this SupportingEntityCapability.

        Indicates whether the supporting entity capability is allowed.  If a supporting entity is allowed but its parent legal entity is not, it means there are other supporting entities that failed validation.  **The allowed supporting entity can still be used**

        :param allowed: The allowed of this SupportingEntityCapability.
        :type allowed: bool
        """

        self._allowed = allowed

    @property
    def id(self):
        """Gets the id of this SupportingEntityCapability.

        Supporting entity reference 

        :return: The id of this SupportingEntityCapability.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupportingEntityCapability.

        Supporting entity reference 

        :param id: The id of this SupportingEntityCapability.
        :type id: str
        """

        self._id = id

    @property
    def requested(self):
        """Gets the requested of this SupportingEntityCapability.

        Indicates whether the supporting entity capability is requested. 

        :return: The requested of this SupportingEntityCapability.
        :rtype: bool
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this SupportingEntityCapability.

        Indicates whether the supporting entity capability is requested. 

        :param requested: The requested of this SupportingEntityCapability.
        :type requested: bool
        """

        self._requested = requested

    @property
    def verification_status(self):
        """Gets the verification_status of this SupportingEntityCapability.

        The status of the verification checks for the supporting entity capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :return: The verification_status of this SupportingEntityCapability.
        :rtype: str
        """
        return self._verification_status

    @verification_status.setter
    def verification_status(self, verification_status):
        """Sets the verification_status of this SupportingEntityCapability.

        The status of the verification checks for the supporting entity capability.  Possible values:  * **pending**: Adyen is running the verification.  * **invalid**: The verification failed. Check if the `errors` array contains more information.  * **valid**: The verification has been successfully completed.  * **rejected**: Adyen has verified the information, but found reasons to not allow the capability. 

        :param verification_status: The verification_status of this SupportingEntityCapability.
        :type verification_status: str
        """

        self._verification_status = verification_status
