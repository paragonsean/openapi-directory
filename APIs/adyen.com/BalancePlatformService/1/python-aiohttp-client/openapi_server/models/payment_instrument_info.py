# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_info import CardInfo
from openapi_server import util


class PaymentInstrumentInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, card: CardInfo=None, description: str=None, issuing_country_code: str=None, payment_instrument_group_id: str=None, reference: str=None, status: str=None, type: str=None):
        """PaymentInstrumentInfo - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this PaymentInstrumentInfo.
        :param card: The card of this PaymentInstrumentInfo.
        :param description: The description of this PaymentInstrumentInfo.
        :param issuing_country_code: The issuing_country_code of this PaymentInstrumentInfo.
        :param payment_instrument_group_id: The payment_instrument_group_id of this PaymentInstrumentInfo.
        :param reference: The reference of this PaymentInstrumentInfo.
        :param status: The status of this PaymentInstrumentInfo.
        :param type: The type of this PaymentInstrumentInfo.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'card': CardInfo,
            'description': str,
            'issuing_country_code': str,
            'payment_instrument_group_id': str,
            'reference': str,
            'status': str,
            'type': str
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'card': 'card',
            'description': 'description',
            'issuing_country_code': 'issuingCountryCode',
            'payment_instrument_group_id': 'paymentInstrumentGroupId',
            'reference': 'reference',
            'status': 'status',
            'type': 'type'
        }

        self._balance_account_id = balance_account_id
        self._card = card
        self._description = description
        self._issuing_country_code = issuing_country_code
        self._payment_instrument_group_id = payment_instrument_group_id
        self._reference = reference
        self._status = status
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentInfo of this PaymentInstrumentInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this PaymentInstrumentInfo.

        The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.

        :return: The balance_account_id of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this PaymentInstrumentInfo.

        The unique identifier of the [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/balanceAccounts__resParam_id) associated with the payment instrument.

        :param balance_account_id: The balance_account_id of this PaymentInstrumentInfo.
        :type balance_account_id: str
        """
        if balance_account_id is None:
            raise ValueError("Invalid value for `balance_account_id`, must not be `None`")

        self._balance_account_id = balance_account_id

    @property
    def card(self):
        """Gets the card of this PaymentInstrumentInfo.

        Contains information about the card. Required when you create a payment instrument of `type` **card**.

        :return: The card of this PaymentInstrumentInfo.
        :rtype: CardInfo
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentInstrumentInfo.

        Contains information about the card. Required when you create a payment instrument of `type` **card**.

        :param card: The card of this PaymentInstrumentInfo.
        :type card: CardInfo
        """

        self._card = card

    @property
    def description(self):
        """Gets the description of this PaymentInstrumentInfo.

        Your description for the payment instrument, maximum 300 characters.

        :return: The description of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentInstrumentInfo.

        Your description for the payment instrument, maximum 300 characters.

        :param description: The description of this PaymentInstrumentInfo.
        :type description: str
        """
        if description is not None and len(description) > 300:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `300`")

        self._description = description

    @property
    def issuing_country_code(self):
        """Gets the issuing_country_code of this PaymentInstrumentInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.

        :return: The issuing_country_code of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._issuing_country_code

    @issuing_country_code.setter
    def issuing_country_code(self, issuing_country_code):
        """Sets the issuing_country_code of this PaymentInstrumentInfo.

        The two-character [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) country code where the payment instrument is issued. For example, **NL** or **US**.

        :param issuing_country_code: The issuing_country_code of this PaymentInstrumentInfo.
        :type issuing_country_code: str
        """
        if issuing_country_code is None:
            raise ValueError("Invalid value for `issuing_country_code`, must not be `None`")

        self._issuing_country_code = issuing_country_code

    @property
    def payment_instrument_group_id(self):
        """Gets the payment_instrument_group_id of this PaymentInstrumentInfo.

        The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.

        :return: The payment_instrument_group_id of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._payment_instrument_group_id

    @payment_instrument_group_id.setter
    def payment_instrument_group_id(self, payment_instrument_group_id):
        """Sets the payment_instrument_group_id of this PaymentInstrumentInfo.

        The unique identifier of the [payment instrument group](https://docs.adyen.com/api-explorer/#/balanceplatform/v1/post/paymentInstrumentGroups__resParam_id) to which the payment instrument belongs.

        :param payment_instrument_group_id: The payment_instrument_group_id of this PaymentInstrumentInfo.
        :type payment_instrument_group_id: str
        """

        self._payment_instrument_group_id = payment_instrument_group_id

    @property
    def reference(self):
        """Gets the reference of this PaymentInstrumentInfo.

        Your reference for the payment instrument, maximum 150 characters.

        :return: The reference of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentInstrumentInfo.

        Your reference for the payment instrument, maximum 150 characters.

        :param reference: The reference of this PaymentInstrumentInfo.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this PaymentInstrumentInfo.

        The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   

        :return: The status of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentInstrumentInfo.

        The status of the payment instrument. If a status is not specified when creating a payment instrument, it is set to **Active** by default. However, there can be exceptions for cards based on the `card.formFactor` and the `issuingCountryCode`. For example, when issuing physical cards in the US, the default status is **Requested**.  Possible values:    * **Active**:  The payment instrument is active and can be used to make payments.    * **Requested**: The payment instrument has been requested. This state is applicable for physical cards.   * **Inactive**: The payment instrument is inactive and cannot be used to make payments.    * **Suspended**: The payment instrument is temporarily suspended and cannot be used to make payments.    * **Closed**: The payment instrument is permanently closed. This action cannot be undone.   * **Stolen**    * **Lost**   

        :param status: The status of this PaymentInstrumentInfo.
        :type status: str
        """
        allowed_values = ["Active", "Closed", "Inactive", "Lost", "Requested", "Stolen", "Suspended", "blocked", "discarded"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this PaymentInstrumentInfo.

        Type of payment instrument.  Possible value: **card**, **bankAccount**. 

        :return: The type of this PaymentInstrumentInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentInstrumentInfo.

        Type of payment instrument.  Possible value: **card**, **bankAccount**. 

        :param type: The type of this PaymentInstrumentInfo.
        :type type: str
        """
        allowed_values = ["bankAccount", "card"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
