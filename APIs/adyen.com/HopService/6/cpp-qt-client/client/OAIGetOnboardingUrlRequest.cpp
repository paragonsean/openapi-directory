/**
 * Hosted onboarding API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Hosted onboarding API provides endpoints that you can use to generate links to Adyen-hosted pages, such as an [onboarding page](https://docs.adyen.com/marketplaces-and-platforms/classic/hosted-onboarding-page) or a [PCI compliance questionnaire](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners). You can provide these links to your account holders so that they can complete their onboarding.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Hosted onboarding API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Hop/v6/getOnboardingUrl ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetOnboardingUrlRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetOnboardingUrlRequest::OAIGetOnboardingUrlRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetOnboardingUrlRequest::OAIGetOnboardingUrlRequest() {
    this->initializeModel();
}

OAIGetOnboardingUrlRequest::~OAIGetOnboardingUrlRequest() {}

void OAIGetOnboardingUrlRequest::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_collect_information_isSet = false;
    m_collect_information_isValid = false;

    m_edit_mode_isSet = false;
    m_edit_mode_isValid = false;

    m_mobile_o_auth_callback_url_isSet = false;
    m_mobile_o_auth_callback_url_isValid = false;

    m_platform_name_isSet = false;
    m_platform_name_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_show_pages_isSet = false;
    m_show_pages_isValid = false;
}

void OAIGetOnboardingUrlRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetOnboardingUrlRequest::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_collect_information_isValid = ::OpenAPI::fromJsonValue(m_collect_information, json[QString("collectInformation")]);
    m_collect_information_isSet = !json[QString("collectInformation")].isNull() && m_collect_information_isValid;

    m_edit_mode_isValid = ::OpenAPI::fromJsonValue(m_edit_mode, json[QString("editMode")]);
    m_edit_mode_isSet = !json[QString("editMode")].isNull() && m_edit_mode_isValid;

    m_mobile_o_auth_callback_url_isValid = ::OpenAPI::fromJsonValue(m_mobile_o_auth_callback_url, json[QString("mobileOAuthCallbackUrl")]);
    m_mobile_o_auth_callback_url_isSet = !json[QString("mobileOAuthCallbackUrl")].isNull() && m_mobile_o_auth_callback_url_isValid;

    m_platform_name_isValid = ::OpenAPI::fromJsonValue(m_platform_name, json[QString("platformName")]);
    m_platform_name_isSet = !json[QString("platformName")].isNull() && m_platform_name_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("returnUrl")]);
    m_return_url_isSet = !json[QString("returnUrl")].isNull() && m_return_url_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_show_pages_isValid = ::OpenAPI::fromJsonValue(m_show_pages, json[QString("showPages")]);
    m_show_pages_isSet = !json[QString("showPages")].isNull() && m_show_pages_isValid;
}

QString OAIGetOnboardingUrlRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetOnboardingUrlRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_collect_information.isSet()) {
        obj.insert(QString("collectInformation"), ::OpenAPI::toJsonValue(m_collect_information));
    }
    if (m_edit_mode_isSet) {
        obj.insert(QString("editMode"), ::OpenAPI::toJsonValue(m_edit_mode));
    }
    if (m_mobile_o_auth_callback_url_isSet) {
        obj.insert(QString("mobileOAuthCallbackUrl"), ::OpenAPI::toJsonValue(m_mobile_o_auth_callback_url));
    }
    if (m_platform_name_isSet) {
        obj.insert(QString("platformName"), ::OpenAPI::toJsonValue(m_platform_name));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("returnUrl"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_show_pages.isSet()) {
        obj.insert(QString("showPages"), ::OpenAPI::toJsonValue(m_show_pages));
    }
    return obj;
}

QString OAIGetOnboardingUrlRequest::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIGetOnboardingUrlRequest::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIGetOnboardingUrlRequest::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAICollectInformation OAIGetOnboardingUrlRequest::getCollectInformation() const {
    return m_collect_information;
}
void OAIGetOnboardingUrlRequest::setCollectInformation(const OAICollectInformation &collect_information) {
    m_collect_information = collect_information;
    m_collect_information_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_collect_information_Set() const{
    return m_collect_information_isSet;
}

bool OAIGetOnboardingUrlRequest::is_collect_information_Valid() const{
    return m_collect_information_isValid;
}

bool OAIGetOnboardingUrlRequest::isEditMode() const {
    return m_edit_mode;
}
void OAIGetOnboardingUrlRequest::setEditMode(const bool &edit_mode) {
    m_edit_mode = edit_mode;
    m_edit_mode_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_edit_mode_Set() const{
    return m_edit_mode_isSet;
}

bool OAIGetOnboardingUrlRequest::is_edit_mode_Valid() const{
    return m_edit_mode_isValid;
}

QString OAIGetOnboardingUrlRequest::getMobileOAuthCallbackUrl() const {
    return m_mobile_o_auth_callback_url;
}
void OAIGetOnboardingUrlRequest::setMobileOAuthCallbackUrl(const QString &mobile_o_auth_callback_url) {
    m_mobile_o_auth_callback_url = mobile_o_auth_callback_url;
    m_mobile_o_auth_callback_url_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_mobile_o_auth_callback_url_Set() const{
    return m_mobile_o_auth_callback_url_isSet;
}

bool OAIGetOnboardingUrlRequest::is_mobile_o_auth_callback_url_Valid() const{
    return m_mobile_o_auth_callback_url_isValid;
}

QString OAIGetOnboardingUrlRequest::getPlatformName() const {
    return m_platform_name;
}
void OAIGetOnboardingUrlRequest::setPlatformName(const QString &platform_name) {
    m_platform_name = platform_name;
    m_platform_name_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_platform_name_Set() const{
    return m_platform_name_isSet;
}

bool OAIGetOnboardingUrlRequest::is_platform_name_Valid() const{
    return m_platform_name_isValid;
}

QString OAIGetOnboardingUrlRequest::getReturnUrl() const {
    return m_return_url;
}
void OAIGetOnboardingUrlRequest::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAIGetOnboardingUrlRequest::is_return_url_Valid() const{
    return m_return_url_isValid;
}

QString OAIGetOnboardingUrlRequest::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIGetOnboardingUrlRequest::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIGetOnboardingUrlRequest::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

OAIShowPages OAIGetOnboardingUrlRequest::getShowPages() const {
    return m_show_pages;
}
void OAIGetOnboardingUrlRequest::setShowPages(const OAIShowPages &show_pages) {
    m_show_pages = show_pages;
    m_show_pages_isSet = true;
}

bool OAIGetOnboardingUrlRequest::is_show_pages_Set() const{
    return m_show_pages_isSet;
}

bool OAIGetOnboardingUrlRequest::is_show_pages_Valid() const{
    return m_show_pages_isValid;
}

bool OAIGetOnboardingUrlRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collect_information.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edit_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_o_auth_callback_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_pages.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetOnboardingUrlRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_code_isValid && true;
}

} // namespace OpenAPI
