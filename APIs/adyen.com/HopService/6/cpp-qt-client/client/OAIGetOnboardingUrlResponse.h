/**
 * Hosted onboarding API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Hosted onboarding API provides endpoints that you can use to generate links to Adyen-hosted pages, such as an [onboarding page](https://docs.adyen.com/marketplaces-and-platforms/classic/hosted-onboarding-page) or a [PCI compliance questionnaire](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners). You can provide these links to your account holders so that they can complete their onboarding.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Hosted onboarding API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Hop/v6/getOnboardingUrl ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetOnboardingUrlResponse.h
 *
 * 
 */

#ifndef OAIGetOnboardingUrlResponse_H
#define OAIGetOnboardingUrlResponse_H

#include <QJsonObject>

#include "OAIErrorFieldType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIErrorFieldType;

class OAIGetOnboardingUrlResponse : public OAIObject {
public:
    OAIGetOnboardingUrlResponse();
    OAIGetOnboardingUrlResponse(QString json);
    ~OAIGetOnboardingUrlResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIErrorFieldType> getInvalidFields() const;
    void setInvalidFields(const QList<OAIErrorFieldType> &invalid_fields);
    bool is_invalid_fields_Set() const;
    bool is_invalid_fields_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    QString getRedirectUrl() const;
    void setRedirectUrl(const QString &redirect_url);
    bool is_redirect_url_Set() const;
    bool is_redirect_url_Valid() const;

    QString getResultCode() const;
    void setResultCode(const QString &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIErrorFieldType> m_invalid_fields;
    bool m_invalid_fields_isSet;
    bool m_invalid_fields_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;

    QString m_redirect_url;
    bool m_redirect_url_isSet;
    bool m_redirect_url_isValid;

    QString m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetOnboardingUrlResponse)

#endif // OAIGetOnboardingUrlResponse_H
