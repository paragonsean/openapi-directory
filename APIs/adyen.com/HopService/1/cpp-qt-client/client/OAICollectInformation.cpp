/**
 * Hosted onboarding API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Hosted onboarding API provides endpoints that you can use to generate links to Adyen-hosted pages, such as an [onboarding page](https://docs.adyen.com/marketplaces-and-platforms/classic/hosted-onboarding-page) or a [PCI compliance questionnaire](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners). You can provide these links to your account holders so that they can complete their onboarding.  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Hosted onboarding API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Hop/v1/getOnboardingUrl ```
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectInformation::OAICollectInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectInformation::OAICollectInformation() {
    this->initializeModel();
}

OAICollectInformation::~OAICollectInformation() {}

void OAICollectInformation::initializeModel() {

    m_bank_details_isSet = false;
    m_bank_details_isValid = false;

    m_business_details_isSet = false;
    m_business_details_isValid = false;

    m_individual_details_isSet = false;
    m_individual_details_isValid = false;

    m_legal_arrangement_details_isSet = false;
    m_legal_arrangement_details_isValid = false;

    m_pci_questionnaire_isSet = false;
    m_pci_questionnaire_isValid = false;

    m_shareholder_details_isSet = false;
    m_shareholder_details_isValid = false;
}

void OAICollectInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectInformation::fromJsonObject(QJsonObject json) {

    m_bank_details_isValid = ::OpenAPI::fromJsonValue(m_bank_details, json[QString("bankDetails")]);
    m_bank_details_isSet = !json[QString("bankDetails")].isNull() && m_bank_details_isValid;

    m_business_details_isValid = ::OpenAPI::fromJsonValue(m_business_details, json[QString("businessDetails")]);
    m_business_details_isSet = !json[QString("businessDetails")].isNull() && m_business_details_isValid;

    m_individual_details_isValid = ::OpenAPI::fromJsonValue(m_individual_details, json[QString("individualDetails")]);
    m_individual_details_isSet = !json[QString("individualDetails")].isNull() && m_individual_details_isValid;

    m_legal_arrangement_details_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_details, json[QString("legalArrangementDetails")]);
    m_legal_arrangement_details_isSet = !json[QString("legalArrangementDetails")].isNull() && m_legal_arrangement_details_isValid;

    m_pci_questionnaire_isValid = ::OpenAPI::fromJsonValue(m_pci_questionnaire, json[QString("pciQuestionnaire")]);
    m_pci_questionnaire_isSet = !json[QString("pciQuestionnaire")].isNull() && m_pci_questionnaire_isValid;

    m_shareholder_details_isValid = ::OpenAPI::fromJsonValue(m_shareholder_details, json[QString("shareholderDetails")]);
    m_shareholder_details_isSet = !json[QString("shareholderDetails")].isNull() && m_shareholder_details_isValid;
}

QString OAICollectInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_details_isSet) {
        obj.insert(QString("bankDetails"), ::OpenAPI::toJsonValue(m_bank_details));
    }
    if (m_business_details_isSet) {
        obj.insert(QString("businessDetails"), ::OpenAPI::toJsonValue(m_business_details));
    }
    if (m_individual_details_isSet) {
        obj.insert(QString("individualDetails"), ::OpenAPI::toJsonValue(m_individual_details));
    }
    if (m_legal_arrangement_details_isSet) {
        obj.insert(QString("legalArrangementDetails"), ::OpenAPI::toJsonValue(m_legal_arrangement_details));
    }
    if (m_pci_questionnaire_isSet) {
        obj.insert(QString("pciQuestionnaire"), ::OpenAPI::toJsonValue(m_pci_questionnaire));
    }
    if (m_shareholder_details_isSet) {
        obj.insert(QString("shareholderDetails"), ::OpenAPI::toJsonValue(m_shareholder_details));
    }
    return obj;
}

bool OAICollectInformation::isBankDetails() const {
    return m_bank_details;
}
void OAICollectInformation::setBankDetails(const bool &bank_details) {
    m_bank_details = bank_details;
    m_bank_details_isSet = true;
}

bool OAICollectInformation::is_bank_details_Set() const{
    return m_bank_details_isSet;
}

bool OAICollectInformation::is_bank_details_Valid() const{
    return m_bank_details_isValid;
}

bool OAICollectInformation::isBusinessDetails() const {
    return m_business_details;
}
void OAICollectInformation::setBusinessDetails(const bool &business_details) {
    m_business_details = business_details;
    m_business_details_isSet = true;
}

bool OAICollectInformation::is_business_details_Set() const{
    return m_business_details_isSet;
}

bool OAICollectInformation::is_business_details_Valid() const{
    return m_business_details_isValid;
}

bool OAICollectInformation::isIndividualDetails() const {
    return m_individual_details;
}
void OAICollectInformation::setIndividualDetails(const bool &individual_details) {
    m_individual_details = individual_details;
    m_individual_details_isSet = true;
}

bool OAICollectInformation::is_individual_details_Set() const{
    return m_individual_details_isSet;
}

bool OAICollectInformation::is_individual_details_Valid() const{
    return m_individual_details_isValid;
}

bool OAICollectInformation::isLegalArrangementDetails() const {
    return m_legal_arrangement_details;
}
void OAICollectInformation::setLegalArrangementDetails(const bool &legal_arrangement_details) {
    m_legal_arrangement_details = legal_arrangement_details;
    m_legal_arrangement_details_isSet = true;
}

bool OAICollectInformation::is_legal_arrangement_details_Set() const{
    return m_legal_arrangement_details_isSet;
}

bool OAICollectInformation::is_legal_arrangement_details_Valid() const{
    return m_legal_arrangement_details_isValid;
}

bool OAICollectInformation::isPciQuestionnaire() const {
    return m_pci_questionnaire;
}
void OAICollectInformation::setPciQuestionnaire(const bool &pci_questionnaire) {
    m_pci_questionnaire = pci_questionnaire;
    m_pci_questionnaire_isSet = true;
}

bool OAICollectInformation::is_pci_questionnaire_Set() const{
    return m_pci_questionnaire_isSet;
}

bool OAICollectInformation::is_pci_questionnaire_Valid() const{
    return m_pci_questionnaire_isValid;
}

bool OAICollectInformation::isShareholderDetails() const {
    return m_shareholder_details;
}
void OAICollectInformation::setShareholderDetails(const bool &shareholder_details) {
    m_shareholder_details = shareholder_details;
    m_shareholder_details_isSet = true;
}

bool OAICollectInformation::is_shareholder_details_Set() const{
    return m_shareholder_details_isSet;
}

bool OAICollectInformation::is_shareholder_details_Valid() const{
    return m_shareholder_details_isValid;
}

bool OAICollectInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pci_questionnaire_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_details_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
