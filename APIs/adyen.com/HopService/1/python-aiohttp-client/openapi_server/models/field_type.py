# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FieldType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _field: str=None, field_name: str=None, shareholder_code: str=None):
        """FieldType - a model defined in OpenAPI

        :param _field: The _field of this FieldType.
        :param field_name: The field_name of this FieldType.
        :param shareholder_code: The shareholder_code of this FieldType.
        """
        self.openapi_types = {
            '_field': str,
            'field_name': str,
            'shareholder_code': str
        }

        self.attribute_map = {
            '_field': 'field',
            'field_name': 'fieldName',
            'shareholder_code': 'shareholderCode'
        }

        self.__field = _field
        self._field_name = field_name
        self._shareholder_code = shareholder_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FieldType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FieldType of this FieldType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _field(self):
        """Gets the _field of this FieldType.

        The full name of the property.

        :return: The _field of this FieldType.
        :rtype: str
        """
        return self.__field

    @_field.setter
    def _field(self, _field):
        """Sets the _field of this FieldType.

        The full name of the property.

        :param _field: The _field of this FieldType.
        :type _field: str
        """

        self.__field = _field

    @property
    def field_name(self):
        """Gets the field_name of this FieldType.

        The type of the field.

        :return: The field_name of this FieldType.
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this FieldType.

        The type of the field.

        :param field_name: The field_name of this FieldType.
        :type field_name: str
        """
        allowed_values = ["accountCode", "accountHolderCode", "accountHolderDetails", "accountNumber", "accountStateType", "accountStatus", "accountType", "address", "balanceAccount", "balanceAccountActive", "balanceAccountCode", "balanceAccountId", "bankAccount", "bankAccountCode", "bankAccountName", "bankAccountUUID", "bankBicSwift", "bankCity", "bankCode", "bankName", "bankStatement", "branchCode", "businessContact", "cardToken", "checkCode", "city", "companyRegistration", "constitutionalDocument", "controller", "country", "countryCode", "currency", "currencyCode", "dateOfBirth", "destinationAccountCode", "document", "documentContent", "documentExpirationDate", "documentIssuerCountry", "documentIssuerState", "documentName", "documentNumber", "documentType", "doingBusinessAs", "drivingLicence", "drivingLicenceBack", "drivingLicenceFront", "drivingLicense", "email", "firstName", "formType", "fullPhoneNumber", "gender", "hopWebserviceUser", "houseNumberOrName", "iban", "idCard", "idNumber", "identityDocument", "individualDetails", "infix", "jobTitle", "lastName", "lastReviewDate", "legalArrangement", "legalArrangementCode", "legalArrangementEntity", "legalArrangementEntityCode", "legalArrangementLegalForm", "legalArrangementMember", "legalArrangementMembers", "legalArrangementName", "legalArrangementReference", "legalArrangementRegistrationNumber", "legalArrangementTaxNumber", "legalArrangementType", "legalBusinessName", "legalEntity", "legalEntityType", "logo", "merchantAccount", "merchantCategoryCode", "merchantHouseNumber", "merchantReference", "microDeposit", "name", "nationality", "originalReference", "ownerCity", "ownerCountryCode", "ownerDateOfBirth", "ownerHouseNumberOrName", "ownerName", "ownerPostalCode", "ownerState", "ownerStreet", "passport", "passportNumber", "payoutMethod", "payoutMethodCode", "payoutSchedule", "pciSelfAssessment", "personalData", "phoneCountryCode", "phoneNumber", "postalCode", "primaryCurrency", "reason", "returnUrl", "schedule", "shareholder", "shareholderCode", "shareholderCodeAndSignatoryCode", "shareholderCodeOrSignatoryCode", "shareholderType", "shareholderTypes", "shopperInteraction", "signatory", "signatoryCode", "socialSecurityNumber", "sourceAccountCode", "splitAccount", "splitConfigurationUUID", "splitCurrency", "splitValue", "splits", "stateOrProvince", "status", "stockExchange", "stockNumber", "stockTicker", "store", "storeDetail", "storeName", "storeReference", "street", "taxId", "tier", "tierNumber", "transferCode", "ultimateParentCompany", "ultimateParentCompanyAddressDetails", "ultimateParentCompanyAddressDetailsCountry", "ultimateParentCompanyBusinessDetails", "ultimateParentCompanyBusinessDetailsLegalBusinessName", "ultimateParentCompanyBusinessDetailsRegistrationNumber", "ultimateParentCompanyCode", "ultimateParentCompanyStockExchange", "ultimateParentCompanyStockNumber", "ultimateParentCompanyStockNumberOrStockTicker", "ultimateParentCompanyStockTicker", "unknown", "value", "verificationType", "virtualAccount", "visaNumber", "webAddress", "year"]  # noqa: E501
        if field_name not in allowed_values:
            raise ValueError(
                "Invalid value for `field_name` ({0}), must be one of {1}"
                .format(field_name, allowed_values)
            )

        self._field_name = field_name

    @property
    def shareholder_code(self):
        """Gets the shareholder_code of this FieldType.

        The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.

        :return: The shareholder_code of this FieldType.
        :rtype: str
        """
        return self._shareholder_code

    @shareholder_code.setter
    def shareholder_code(self, shareholder_code):
        """Sets the shareholder_code of this FieldType.

        The code of the shareholder that the field belongs to. If empty, the field belongs to an account holder.

        :param shareholder_code: The shareholder_code of this FieldType.
        :type shareholder_code: str
        """

        self._shareholder_code = shareholder_code
