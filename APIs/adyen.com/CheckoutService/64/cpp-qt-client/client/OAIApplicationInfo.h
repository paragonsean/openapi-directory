/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v64/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v64/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=64) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApplicationInfo.h
 *
 * 
 */

#ifndef OAIApplicationInfo_H
#define OAIApplicationInfo_H

#include <QJsonObject>

#include "OAICommonField.h"
#include "OAIExternalPlatform.h"
#include "OAIMerchantDevice.h"
#include "OAIShopperInteractionDevice.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICommonField;
class OAIExternalPlatform;
class OAIMerchantDevice;
class OAIShopperInteractionDevice;

class OAIApplicationInfo : public OAIObject {
public:
    OAIApplicationInfo();
    OAIApplicationInfo(QString json);
    ~OAIApplicationInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICommonField getAdyenLibrary() const;
    void setAdyenLibrary(const OAICommonField &adyen_library);
    bool is_adyen_library_Set() const;
    bool is_adyen_library_Valid() const;

    OAICommonField getAdyenPaymentSource() const;
    void setAdyenPaymentSource(const OAICommonField &adyen_payment_source);
    bool is_adyen_payment_source_Set() const;
    bool is_adyen_payment_source_Valid() const;

    OAIExternalPlatform getExternalPlatform() const;
    void setExternalPlatform(const OAIExternalPlatform &external_platform);
    bool is_external_platform_Set() const;
    bool is_external_platform_Valid() const;

    OAICommonField getMerchantApplication() const;
    void setMerchantApplication(const OAICommonField &merchant_application);
    bool is_merchant_application_Set() const;
    bool is_merchant_application_Valid() const;

    OAIMerchantDevice getMerchantDevice() const;
    void setMerchantDevice(const OAIMerchantDevice &merchant_device);
    bool is_merchant_device_Set() const;
    bool is_merchant_device_Valid() const;

    OAIShopperInteractionDevice getShopperInteractionDevice() const;
    void setShopperInteractionDevice(const OAIShopperInteractionDevice &shopper_interaction_device);
    bool is_shopper_interaction_device_Set() const;
    bool is_shopper_interaction_device_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICommonField m_adyen_library;
    bool m_adyen_library_isSet;
    bool m_adyen_library_isValid;

    OAICommonField m_adyen_payment_source;
    bool m_adyen_payment_source_isSet;
    bool m_adyen_payment_source_isValid;

    OAIExternalPlatform m_external_platform;
    bool m_external_platform_isSet;
    bool m_external_platform_isValid;

    OAICommonField m_merchant_application;
    bool m_merchant_application_isSet;
    bool m_merchant_application_isValid;

    OAIMerchantDevice m_merchant_device;
    bool m_merchant_device_isSet;
    bool m_merchant_device_isValid;

    OAIShopperInteractionDevice m_shopper_interaction_device;
    bool m_shopper_interaction_device_isSet;
    bool m_shopper_interaction_device_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApplicationInfo)

#endif // OAIApplicationInfo_H
