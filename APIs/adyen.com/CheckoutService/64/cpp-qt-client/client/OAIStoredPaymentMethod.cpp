/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v64/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v64/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=64) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredPaymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredPaymentMethod::OAIStoredPaymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredPaymentMethod::OAIStoredPaymentMethod() {
    this->initializeModel();
}

OAIStoredPaymentMethod::~OAIStoredPaymentMethod() {}

void OAIStoredPaymentMethod::initializeModel() {

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_location_id_isSet = false;
    m_bank_location_id_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_four_isSet = false;
    m_last_four_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_supported_shopper_interactions_isSet = false;
    m_supported_shopper_interactions_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStoredPaymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredPaymentMethod::fromJsonObject(QJsonObject json) {

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_bank_location_id, json[QString("bankLocationId")]);
    m_bank_location_id_isSet = !json[QString("bankLocationId")].isNull() && m_bank_location_id_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_four_isValid = ::OpenAPI::fromJsonValue(m_last_four, json[QString("lastFour")]);
    m_last_four_isSet = !json[QString("lastFour")].isNull() && m_last_four_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_supported_shopper_interactions_isValid = ::OpenAPI::fromJsonValue(m_supported_shopper_interactions, json[QString("supportedShopperInteractions")]);
    m_supported_shopper_interactions_isSet = !json[QString("supportedShopperInteractions")].isNull() && m_supported_shopper_interactions_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStoredPaymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredPaymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_location_id_isSet) {
        obj.insert(QString("bankLocationId"), ::OpenAPI::toJsonValue(m_bank_location_id));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_four_isSet) {
        obj.insert(QString("lastFour"), ::OpenAPI::toJsonValue(m_last_four));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_supported_shopper_interactions.size() > 0) {
        obj.insert(QString("supportedShopperInteractions"), ::OpenAPI::toJsonValue(m_supported_shopper_interactions));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStoredPaymentMethod::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIStoredPaymentMethod::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIStoredPaymentMethod::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIStoredPaymentMethod::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIStoredPaymentMethod::getBankLocationId() const {
    return m_bank_location_id;
}
void OAIStoredPaymentMethod::setBankLocationId(const QString &bank_location_id) {
    m_bank_location_id = bank_location_id;
    m_bank_location_id_isSet = true;
}

bool OAIStoredPaymentMethod::is_bank_location_id_Set() const{
    return m_bank_location_id_isSet;
}

bool OAIStoredPaymentMethod::is_bank_location_id_Valid() const{
    return m_bank_location_id_isValid;
}

QString OAIStoredPaymentMethod::getBrand() const {
    return m_brand;
}
void OAIStoredPaymentMethod::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIStoredPaymentMethod::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIStoredPaymentMethod::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIStoredPaymentMethod::getExpiryMonth() const {
    return m_expiry_month;
}
void OAIStoredPaymentMethod::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAIStoredPaymentMethod::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAIStoredPaymentMethod::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAIStoredPaymentMethod::getExpiryYear() const {
    return m_expiry_year;
}
void OAIStoredPaymentMethod::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAIStoredPaymentMethod::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAIStoredPaymentMethod::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAIStoredPaymentMethod::getHolderName() const {
    return m_holder_name;
}
void OAIStoredPaymentMethod::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIStoredPaymentMethod::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIStoredPaymentMethod::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIStoredPaymentMethod::getId() const {
    return m_id;
}
void OAIStoredPaymentMethod::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoredPaymentMethod::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoredPaymentMethod::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoredPaymentMethod::getLastFour() const {
    return m_last_four;
}
void OAIStoredPaymentMethod::setLastFour(const QString &last_four) {
    m_last_four = last_four;
    m_last_four_isSet = true;
}

bool OAIStoredPaymentMethod::is_last_four_Set() const{
    return m_last_four_isSet;
}

bool OAIStoredPaymentMethod::is_last_four_Valid() const{
    return m_last_four_isValid;
}

QString OAIStoredPaymentMethod::getName() const {
    return m_name;
}
void OAIStoredPaymentMethod::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStoredPaymentMethod::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStoredPaymentMethod::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStoredPaymentMethod::getShopperEmail() const {
    return m_shopper_email;
}
void OAIStoredPaymentMethod::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIStoredPaymentMethod::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIStoredPaymentMethod::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QList<QString> OAIStoredPaymentMethod::getSupportedShopperInteractions() const {
    return m_supported_shopper_interactions;
}
void OAIStoredPaymentMethod::setSupportedShopperInteractions(const QList<QString> &supported_shopper_interactions) {
    m_supported_shopper_interactions = supported_shopper_interactions;
    m_supported_shopper_interactions_isSet = true;
}

bool OAIStoredPaymentMethod::is_supported_shopper_interactions_Set() const{
    return m_supported_shopper_interactions_isSet;
}

bool OAIStoredPaymentMethod::is_supported_shopper_interactions_Valid() const{
    return m_supported_shopper_interactions_isValid;
}

QString OAIStoredPaymentMethod::getType() const {
    return m_type;
}
void OAIStoredPaymentMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStoredPaymentMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStoredPaymentMethod::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStoredPaymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_four_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_shopper_interactions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredPaymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
