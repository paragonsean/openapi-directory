/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v64/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v64/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=64) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataSubMerchant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataSubMerchant::OAIAdditionalDataSubMerchant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataSubMerchant::OAIAdditionalDataSubMerchant() {
    this->initializeModel();
}

OAIAdditionalDataSubMerchant::~OAIAdditionalDataSubMerchant() {}

void OAIAdditionalDataSubMerchant::initializeModel() {

    m_sub_merchant_number_of_sub_sellers_isSet = false;
    m_sub_merchant_number_of_sub_sellers_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_city_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_city_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_country_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_country_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_id_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_id_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_name_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_name_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_state_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_state_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_street_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_street_isValid = false;

    m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet = false;
    m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid = false;
}

void OAIAdditionalDataSubMerchant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataSubMerchant::fromJsonObject(QJsonObject json) {

    m_sub_merchant_number_of_sub_sellers_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_number_of_sub_sellers, json[QString("subMerchant.numberOfSubSellers")]);
    m_sub_merchant_number_of_sub_sellers_isSet = !json[QString("subMerchant.numberOfSubSellers")].isNull() && m_sub_merchant_number_of_sub_sellers_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_city_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_city, json[QString("subMerchant.subSeller[subSellerNr].city")]);
    m_sub_merchant_sub_seller_sub_seller_nr_city_isSet = !json[QString("subMerchant.subSeller[subSellerNr].city")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_city_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_country_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_country, json[QString("subMerchant.subSeller[subSellerNr].country")]);
    m_sub_merchant_sub_seller_sub_seller_nr_country_isSet = !json[QString("subMerchant.subSeller[subSellerNr].country")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_country_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_id_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_id, json[QString("subMerchant.subSeller[subSellerNr].id")]);
    m_sub_merchant_sub_seller_sub_seller_nr_id_isSet = !json[QString("subMerchant.subSeller[subSellerNr].id")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_id_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_mcc, json[QString("subMerchant.subSeller[subSellerNr].mcc")]);
    m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet = !json[QString("subMerchant.subSeller[subSellerNr].mcc")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_name_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_name, json[QString("subMerchant.subSeller[subSellerNr].name")]);
    m_sub_merchant_sub_seller_sub_seller_nr_name_isSet = !json[QString("subMerchant.subSeller[subSellerNr].name")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_name_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_postal_code, json[QString("subMerchant.subSeller[subSellerNr].postalCode")]);
    m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet = !json[QString("subMerchant.subSeller[subSellerNr].postalCode")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_state_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_state, json[QString("subMerchant.subSeller[subSellerNr].state")]);
    m_sub_merchant_sub_seller_sub_seller_nr_state_isSet = !json[QString("subMerchant.subSeller[subSellerNr].state")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_state_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_street_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_street, json[QString("subMerchant.subSeller[subSellerNr].street")]);
    m_sub_merchant_sub_seller_sub_seller_nr_street_isSet = !json[QString("subMerchant.subSeller[subSellerNr].street")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_street_isValid;

    m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_tax_id, json[QString("subMerchant.subSeller[subSellerNr].taxId")]);
    m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet = !json[QString("subMerchant.subSeller[subSellerNr].taxId")].isNull() && m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid;
}

QString OAIAdditionalDataSubMerchant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataSubMerchant::asJsonObject() const {
    QJsonObject obj;
    if (m_sub_merchant_number_of_sub_sellers_isSet) {
        obj.insert(QString("subMerchant.numberOfSubSellers"), ::OpenAPI::toJsonValue(m_sub_merchant_number_of_sub_sellers));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_city_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].city"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_city));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_country_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].country"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_country));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_id_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].id"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_id));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].mcc"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_mcc));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_name_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].name"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_name));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].postalCode"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_postal_code));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_state_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].state"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_state));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_street_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].street"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_street));
    }
    if (m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet) {
        obj.insert(QString("subMerchant.subSeller[subSellerNr].taxId"), ::OpenAPI::toJsonValue(m_sub_merchant_sub_seller_sub_seller_nr_tax_id));
    }
    return obj;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantNumberOfSubSellers() const {
    return m_sub_merchant_number_of_sub_sellers;
}
void OAIAdditionalDataSubMerchant::setSubMerchantNumberOfSubSellers(const QString &sub_merchant_number_of_sub_sellers) {
    m_sub_merchant_number_of_sub_sellers = sub_merchant_number_of_sub_sellers;
    m_sub_merchant_number_of_sub_sellers_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_number_of_sub_sellers_Set() const{
    return m_sub_merchant_number_of_sub_sellers_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_number_of_sub_sellers_Valid() const{
    return m_sub_merchant_number_of_sub_sellers_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrCity() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_city;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrCity(const QString &sub_merchant_sub_seller_sub_seller_nr_city) {
    m_sub_merchant_sub_seller_sub_seller_nr_city = sub_merchant_sub_seller_sub_seller_nr_city;
    m_sub_merchant_sub_seller_sub_seller_nr_city_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_city_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_city_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_city_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_city_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrCountry() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_country;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrCountry(const QString &sub_merchant_sub_seller_sub_seller_nr_country) {
    m_sub_merchant_sub_seller_sub_seller_nr_country = sub_merchant_sub_seller_sub_seller_nr_country;
    m_sub_merchant_sub_seller_sub_seller_nr_country_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_country_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_country_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_country_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_country_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrId() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_id;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrId(const QString &sub_merchant_sub_seller_sub_seller_nr_id) {
    m_sub_merchant_sub_seller_sub_seller_nr_id = sub_merchant_sub_seller_sub_seller_nr_id;
    m_sub_merchant_sub_seller_sub_seller_nr_id_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_id_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_id_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_id_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_id_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrMcc() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_mcc;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrMcc(const QString &sub_merchant_sub_seller_sub_seller_nr_mcc) {
    m_sub_merchant_sub_seller_sub_seller_nr_mcc = sub_merchant_sub_seller_sub_seller_nr_mcc;
    m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_mcc_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_mcc_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrName() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_name;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrName(const QString &sub_merchant_sub_seller_sub_seller_nr_name) {
    m_sub_merchant_sub_seller_sub_seller_nr_name = sub_merchant_sub_seller_sub_seller_nr_name;
    m_sub_merchant_sub_seller_sub_seller_nr_name_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_name_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_name_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_name_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_name_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrPostalCode() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_postal_code;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrPostalCode(const QString &sub_merchant_sub_seller_sub_seller_nr_postal_code) {
    m_sub_merchant_sub_seller_sub_seller_nr_postal_code = sub_merchant_sub_seller_sub_seller_nr_postal_code;
    m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrState() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_state;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrState(const QString &sub_merchant_sub_seller_sub_seller_nr_state) {
    m_sub_merchant_sub_seller_sub_seller_nr_state = sub_merchant_sub_seller_sub_seller_nr_state;
    m_sub_merchant_sub_seller_sub_seller_nr_state_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_state_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_state_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_state_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_state_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrStreet() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_street;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrStreet(const QString &sub_merchant_sub_seller_sub_seller_nr_street) {
    m_sub_merchant_sub_seller_sub_seller_nr_street = sub_merchant_sub_seller_sub_seller_nr_street;
    m_sub_merchant_sub_seller_sub_seller_nr_street_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_street_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_street_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_street_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_street_isValid;
}

QString OAIAdditionalDataSubMerchant::getSubMerchantSubSellerSubSellerNrTaxId() const {
    return m_sub_merchant_sub_seller_sub_seller_nr_tax_id;
}
void OAIAdditionalDataSubMerchant::setSubMerchantSubSellerSubSellerNrTaxId(const QString &sub_merchant_sub_seller_sub_seller_nr_tax_id) {
    m_sub_merchant_sub_seller_sub_seller_nr_tax_id = sub_merchant_sub_seller_sub_seller_nr_tax_id;
    m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet = true;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Set() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet;
}

bool OAIAdditionalDataSubMerchant::is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Valid() const{
    return m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid;
}

bool OAIAdditionalDataSubMerchant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sub_merchant_number_of_sub_sellers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataSubMerchant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
