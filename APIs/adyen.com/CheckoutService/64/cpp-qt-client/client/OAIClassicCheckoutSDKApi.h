/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v64/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v64/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=64) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIClassicCheckoutSDKApi_H
#define OAI_OAIClassicCheckoutSDKApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPaymentSetupRequest.h"
#include "OAIPaymentSetupResponse.h"
#include "OAIPaymentVerificationRequest.h"
#include "OAIPaymentVerificationResponse.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIClassicCheckoutSDKApi : public QObject {
    Q_OBJECT

public:
    OAIClassicCheckoutSDKApi(const int timeOut = 0);
    ~OAIClassicCheckoutSDKApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_setup_request OAIPaymentSetupRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postPaymentSession(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentSetupRequest> &oai_payment_setup_request = ::OpenAPI::OptionalParam<OAIPaymentSetupRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_verification_request OAIPaymentVerificationRequest [optional]
    */
    Q_DECL_DEPRECATED virtual void postPaymentsResult(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentVerificationRequest> &oai_payment_verification_request = ::OpenAPI::OptionalParam<OAIPaymentVerificationRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postPaymentSessionCallback(OAIHttpRequestWorker *worker);
    void postPaymentsResultCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postPaymentSessionSignal(OAIPaymentSetupResponse summary);
    void postPaymentsResultSignal(OAIPaymentVerificationResponse summary);


    void postPaymentSessionSignalFull(OAIHttpRequestWorker *worker, OAIPaymentSetupResponse summary);
    void postPaymentsResultSignalFull(OAIHttpRequestWorker *worker, OAIPaymentVerificationResponse summary);

    Q_DECL_DEPRECATED_X("Use postPaymentSessionSignalError() instead")
    void postPaymentSessionSignalE(OAIPaymentSetupResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentSessionSignalError(OAIPaymentSetupResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsResultSignalError() instead")
    void postPaymentsResultSignalE(OAIPaymentVerificationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsResultSignalError(OAIPaymentVerificationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postPaymentSessionSignalErrorFull() instead")
    void postPaymentSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsResultSignalErrorFull() instead")
    void postPaymentsResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
