/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v64/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v64/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=64) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIResponseAdditionalDataInstallments.h
 *
 * 
 */

#ifndef OAIResponseAdditionalDataInstallments_H
#define OAIResponseAdditionalDataInstallments_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIResponseAdditionalDataInstallments : public OAIObject {
public:
    OAIResponseAdditionalDataInstallments();
    OAIResponseAdditionalDataInstallments(QString json);
    ~OAIResponseAdditionalDataInstallments() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getInstallmentPaymentDataInstallmentType() const;
    void setInstallmentPaymentDataInstallmentType(const QString &installment_payment_data_installment_type);
    bool is_installment_payment_data_installment_type_Set() const;
    bool is_installment_payment_data_installment_type_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrAnnualPercentageRate() const;
    void setInstallmentPaymentDataOptionItemNrAnnualPercentageRate(const QString &installment_payment_data_option_item_nr_annual_percentage_rate);
    bool is_installment_payment_data_option_item_nr_annual_percentage_rate_Set() const;
    bool is_installment_payment_data_option_item_nr_annual_percentage_rate_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrFirstInstallmentAmount() const;
    void setInstallmentPaymentDataOptionItemNrFirstInstallmentAmount(const QString &installment_payment_data_option_item_nr_first_installment_amount);
    bool is_installment_payment_data_option_item_nr_first_installment_amount_Set() const;
    bool is_installment_payment_data_option_item_nr_first_installment_amount_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrInstallmentFee() const;
    void setInstallmentPaymentDataOptionItemNrInstallmentFee(const QString &installment_payment_data_option_item_nr_installment_fee);
    bool is_installment_payment_data_option_item_nr_installment_fee_Set() const;
    bool is_installment_payment_data_option_item_nr_installment_fee_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrInterestRate() const;
    void setInstallmentPaymentDataOptionItemNrInterestRate(const QString &installment_payment_data_option_item_nr_interest_rate);
    bool is_installment_payment_data_option_item_nr_interest_rate_Set() const;
    bool is_installment_payment_data_option_item_nr_interest_rate_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments() const;
    void setInstallmentPaymentDataOptionItemNrMaximumNumberOfInstallments(const QString &installment_payment_data_option_item_nr_maximum_number_of_installments);
    bool is_installment_payment_data_option_item_nr_maximum_number_of_installments_Set() const;
    bool is_installment_payment_data_option_item_nr_maximum_number_of_installments_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments() const;
    void setInstallmentPaymentDataOptionItemNrMinimumNumberOfInstallments(const QString &installment_payment_data_option_item_nr_minimum_number_of_installments);
    bool is_installment_payment_data_option_item_nr_minimum_number_of_installments_Set() const;
    bool is_installment_payment_data_option_item_nr_minimum_number_of_installments_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrNumberOfInstallments() const;
    void setInstallmentPaymentDataOptionItemNrNumberOfInstallments(const QString &installment_payment_data_option_item_nr_number_of_installments);
    bool is_installment_payment_data_option_item_nr_number_of_installments_Set() const;
    bool is_installment_payment_data_option_item_nr_number_of_installments_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount() const;
    void setInstallmentPaymentDataOptionItemNrSubsequentInstallmentAmount(const QString &installment_payment_data_option_item_nr_subsequent_installment_amount);
    bool is_installment_payment_data_option_item_nr_subsequent_installment_amount_Set() const;
    bool is_installment_payment_data_option_item_nr_subsequent_installment_amount_Valid() const;

    QString getInstallmentPaymentDataOptionItemNrTotalAmountDue() const;
    void setInstallmentPaymentDataOptionItemNrTotalAmountDue(const QString &installment_payment_data_option_item_nr_total_amount_due);
    bool is_installment_payment_data_option_item_nr_total_amount_due_Set() const;
    bool is_installment_payment_data_option_item_nr_total_amount_due_Valid() const;

    QString getInstallmentPaymentDataPaymentOptions() const;
    void setInstallmentPaymentDataPaymentOptions(const QString &installment_payment_data_payment_options);
    bool is_installment_payment_data_payment_options_Set() const;
    bool is_installment_payment_data_payment_options_Valid() const;

    QString getInstallmentsValue() const;
    void setInstallmentsValue(const QString &installments_value);
    bool is_installments_value_Set() const;
    bool is_installments_value_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_installment_payment_data_installment_type;
    bool m_installment_payment_data_installment_type_isSet;
    bool m_installment_payment_data_installment_type_isValid;

    QString m_installment_payment_data_option_item_nr_annual_percentage_rate;
    bool m_installment_payment_data_option_item_nr_annual_percentage_rate_isSet;
    bool m_installment_payment_data_option_item_nr_annual_percentage_rate_isValid;

    QString m_installment_payment_data_option_item_nr_first_installment_amount;
    bool m_installment_payment_data_option_item_nr_first_installment_amount_isSet;
    bool m_installment_payment_data_option_item_nr_first_installment_amount_isValid;

    QString m_installment_payment_data_option_item_nr_installment_fee;
    bool m_installment_payment_data_option_item_nr_installment_fee_isSet;
    bool m_installment_payment_data_option_item_nr_installment_fee_isValid;

    QString m_installment_payment_data_option_item_nr_interest_rate;
    bool m_installment_payment_data_option_item_nr_interest_rate_isSet;
    bool m_installment_payment_data_option_item_nr_interest_rate_isValid;

    QString m_installment_payment_data_option_item_nr_maximum_number_of_installments;
    bool m_installment_payment_data_option_item_nr_maximum_number_of_installments_isSet;
    bool m_installment_payment_data_option_item_nr_maximum_number_of_installments_isValid;

    QString m_installment_payment_data_option_item_nr_minimum_number_of_installments;
    bool m_installment_payment_data_option_item_nr_minimum_number_of_installments_isSet;
    bool m_installment_payment_data_option_item_nr_minimum_number_of_installments_isValid;

    QString m_installment_payment_data_option_item_nr_number_of_installments;
    bool m_installment_payment_data_option_item_nr_number_of_installments_isSet;
    bool m_installment_payment_data_option_item_nr_number_of_installments_isValid;

    QString m_installment_payment_data_option_item_nr_subsequent_installment_amount;
    bool m_installment_payment_data_option_item_nr_subsequent_installment_amount_isSet;
    bool m_installment_payment_data_option_item_nr_subsequent_installment_amount_isValid;

    QString m_installment_payment_data_option_item_nr_total_amount_due;
    bool m_installment_payment_data_option_item_nr_total_amount_due_isSet;
    bool m_installment_payment_data_option_item_nr_total_amount_due_isValid;

    QString m_installment_payment_data_payment_options;
    bool m_installment_payment_data_payment_options_isSet;
    bool m_installment_payment_data_payment_options_isValid;

    QString m_installments_value;
    bool m_installments_value_isSet;
    bool m_installments_value_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIResponseAdditionalDataInstallments)

#endif // OAIResponseAdditionalDataInstallments_H
