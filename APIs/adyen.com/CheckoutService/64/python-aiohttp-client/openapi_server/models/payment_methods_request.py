# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.balance_check_request_additional_data import BalanceCheckRequestAdditionalData
from openapi_server.models.encrypted_order_data import EncryptedOrderData
from openapi_server import util


class PaymentMethodsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: BalanceCheckRequestAdditionalData=None, allowed_payment_methods: List[str]=None, amount: Amount=None, blocked_payment_methods: List[str]=None, channel: str=None, country_code: str=None, enable_real_time_update: bool=None, merchant_account: str=None, order: EncryptedOrderData=None, shopper_locale: str=None, shopper_reference: str=None, split_card_funding_sources: bool=False, store: str=None):
        """PaymentMethodsRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this PaymentMethodsRequest.
        :param allowed_payment_methods: The allowed_payment_methods of this PaymentMethodsRequest.
        :param amount: The amount of this PaymentMethodsRequest.
        :param blocked_payment_methods: The blocked_payment_methods of this PaymentMethodsRequest.
        :param channel: The channel of this PaymentMethodsRequest.
        :param country_code: The country_code of this PaymentMethodsRequest.
        :param enable_real_time_update: The enable_real_time_update of this PaymentMethodsRequest.
        :param merchant_account: The merchant_account of this PaymentMethodsRequest.
        :param order: The order of this PaymentMethodsRequest.
        :param shopper_locale: The shopper_locale of this PaymentMethodsRequest.
        :param shopper_reference: The shopper_reference of this PaymentMethodsRequest.
        :param split_card_funding_sources: The split_card_funding_sources of this PaymentMethodsRequest.
        :param store: The store of this PaymentMethodsRequest.
        """
        self.openapi_types = {
            'additional_data': BalanceCheckRequestAdditionalData,
            'allowed_payment_methods': List[str],
            'amount': Amount,
            'blocked_payment_methods': List[str],
            'channel': str,
            'country_code': str,
            'enable_real_time_update': bool,
            'merchant_account': str,
            'order': EncryptedOrderData,
            'shopper_locale': str,
            'shopper_reference': str,
            'split_card_funding_sources': bool,
            'store': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'allowed_payment_methods': 'allowedPaymentMethods',
            'amount': 'amount',
            'blocked_payment_methods': 'blockedPaymentMethods',
            'channel': 'channel',
            'country_code': 'countryCode',
            'enable_real_time_update': 'enableRealTimeUpdate',
            'merchant_account': 'merchantAccount',
            'order': 'order',
            'shopper_locale': 'shopperLocale',
            'shopper_reference': 'shopperReference',
            'split_card_funding_sources': 'splitCardFundingSources',
            'store': 'store'
        }

        self._additional_data = additional_data
        self._allowed_payment_methods = allowed_payment_methods
        self._amount = amount
        self._blocked_payment_methods = blocked_payment_methods
        self._channel = channel
        self._country_code = country_code
        self._enable_real_time_update = enable_real_time_update
        self._merchant_account = merchant_account
        self._order = order
        self._shopper_locale = shopper_locale
        self._shopper_reference = shopper_reference
        self._split_card_funding_sources = split_card_funding_sources
        self._store = store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethodsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethodsRequest of this PaymentMethodsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentMethodsRequest.


        :return: The additional_data of this PaymentMethodsRequest.
        :rtype: BalanceCheckRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentMethodsRequest.


        :param additional_data: The additional_data of this PaymentMethodsRequest.
        :type additional_data: BalanceCheckRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def allowed_payment_methods(self):
        """Gets the allowed_payment_methods of this PaymentMethodsRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The allowed_payment_methods of this PaymentMethodsRequest.
        :rtype: List[str]
        """
        return self._allowed_payment_methods

    @allowed_payment_methods.setter
    def allowed_payment_methods(self, allowed_payment_methods):
        """Sets the allowed_payment_methods of this PaymentMethodsRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param allowed_payment_methods: The allowed_payment_methods of this PaymentMethodsRequest.
        :type allowed_payment_methods: List[str]
        """

        self._allowed_payment_methods = allowed_payment_methods

    @property
    def amount(self):
        """Gets the amount of this PaymentMethodsRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :return: The amount of this PaymentMethodsRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentMethodsRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :param amount: The amount of this PaymentMethodsRequest.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def blocked_payment_methods(self):
        """Gets the blocked_payment_methods of this PaymentMethodsRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The blocked_payment_methods of this PaymentMethodsRequest.
        :rtype: List[str]
        """
        return self._blocked_payment_methods

    @blocked_payment_methods.setter
    def blocked_payment_methods(self, blocked_payment_methods):
        """Sets the blocked_payment_methods of this PaymentMethodsRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param blocked_payment_methods: The blocked_payment_methods of this PaymentMethodsRequest.
        :type blocked_payment_methods: List[str]
        """

        self._blocked_payment_methods = blocked_payment_methods

    @property
    def channel(self):
        """Gets the channel of this PaymentMethodsRequest.

        The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web

        :return: The channel of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PaymentMethodsRequest.

        The platform where a payment transaction takes place. This field can be used for filtering out payment methods that are only available on specific platforms. Possible values: * iOS * Android * Web

        :param channel: The channel of this PaymentMethodsRequest.
        :type channel: str
        """
        allowed_values = ["iOS", "Android", "Web"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def country_code(self):
        """Gets the country_code of this PaymentMethodsRequest.

        The shopper's country code.

        :return: The country_code of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PaymentMethodsRequest.

        The shopper's country code.

        :param country_code: The country_code of this PaymentMethodsRequest.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def enable_real_time_update(self):
        """Gets the enable_real_time_update of this PaymentMethodsRequest.

        Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.

        :return: The enable_real_time_update of this PaymentMethodsRequest.
        :rtype: bool
        """
        return self._enable_real_time_update

    @enable_real_time_update.setter
    def enable_real_time_update(self, enable_real_time_update):
        """Sets the enable_real_time_update of this PaymentMethodsRequest.

        Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.

        :param enable_real_time_update: The enable_real_time_update of this PaymentMethodsRequest.
        :type enable_real_time_update: bool
        """

        self._enable_real_time_update = enable_real_time_update

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentMethodsRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentMethodsRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this PaymentMethodsRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def order(self):
        """Gets the order of this PaymentMethodsRequest.

        The order information required for partial payments.

        :return: The order of this PaymentMethodsRequest.
        :rtype: EncryptedOrderData
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PaymentMethodsRequest.

        The order information required for partial payments.

        :param order: The order of this PaymentMethodsRequest.
        :type order: EncryptedOrderData
        """

        self._order = order

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentMethodsRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :return: The shopper_locale of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentMethodsRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :param shopper_locale: The shopper_locale of this PaymentMethodsRequest.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PaymentMethodsRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PaymentMethodsRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this PaymentMethodsRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def split_card_funding_sources(self):
        """Gets the split_card_funding_sources of this PaymentMethodsRequest.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :return: The split_card_funding_sources of this PaymentMethodsRequest.
        :rtype: bool
        """
        return self._split_card_funding_sources

    @split_card_funding_sources.setter
    def split_card_funding_sources(self, split_card_funding_sources):
        """Sets the split_card_funding_sources of this PaymentMethodsRequest.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :param split_card_funding_sources: The split_card_funding_sources of this PaymentMethodsRequest.
        :type split_card_funding_sources: bool
        """

        self._split_card_funding_sources = split_card_funding_sources

    @property
    def store(self):
        """Gets the store of this PaymentMethodsRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :return: The store of this PaymentMethodsRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PaymentMethodsRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :param store: The store of this PaymentMethodsRequest.
        :type store: str
        """
        if store is not None and len(store) > 16:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `16`")
        if store is not None and len(store) < 1:
            raise ValueError("Invalid value for `store`, length must be greater than or equal to `1`")

        self._store = store
