/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentCompletionDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentCompletionDetails::OAIPaymentCompletionDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentCompletionDetails::OAIPaymentCompletionDetails() {
    this->initializeModel();
}

OAIPaymentCompletionDetails::~OAIPaymentCompletionDetails() {}

void OAIPaymentCompletionDetails::initializeModel() {

    m_md_isSet = false;
    m_md_isValid = false;

    m_pa_req_isSet = false;
    m_pa_req_isValid = false;

    m_pa_res_isSet = false;
    m_pa_res_isValid = false;

    m_authorization_token_isSet = false;
    m_authorization_token_isValid = false;

    m_billing_token_isSet = false;
    m_billing_token_isValid = false;

    m_cupsecureplus_smscode_isSet = false;
    m_cupsecureplus_smscode_isValid = false;

    m_facilitator_access_token_isSet = false;
    m_facilitator_access_token_isValid = false;

    m_one_time_passcode_isSet = false;
    m_one_time_passcode_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payer_id_isSet = false;
    m_payer_id_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_payment_id_isSet = false;
    m_payment_id_isValid = false;

    m_payment_status_isSet = false;
    m_payment_status_isValid = false;

    m_redirect_result_isSet = false;
    m_redirect_result_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_three_ds_result_isSet = false;
    m_three_ds_result_isValid = false;

    m_threeds2_challenge_result_isSet = false;
    m_threeds2_challenge_result_isValid = false;

    m_threeds2_fingerprint_isSet = false;
    m_threeds2_fingerprint_isValid = false;
}

void OAIPaymentCompletionDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentCompletionDetails::fromJsonObject(QJsonObject json) {

    m_md_isValid = ::OpenAPI::fromJsonValue(m_md, json[QString("MD")]);
    m_md_isSet = !json[QString("MD")].isNull() && m_md_isValid;

    m_pa_req_isValid = ::OpenAPI::fromJsonValue(m_pa_req, json[QString("PaReq")]);
    m_pa_req_isSet = !json[QString("PaReq")].isNull() && m_pa_req_isValid;

    m_pa_res_isValid = ::OpenAPI::fromJsonValue(m_pa_res, json[QString("PaRes")]);
    m_pa_res_isSet = !json[QString("PaRes")].isNull() && m_pa_res_isValid;

    m_authorization_token_isValid = ::OpenAPI::fromJsonValue(m_authorization_token, json[QString("authorization_token")]);
    m_authorization_token_isSet = !json[QString("authorization_token")].isNull() && m_authorization_token_isValid;

    m_billing_token_isValid = ::OpenAPI::fromJsonValue(m_billing_token, json[QString("billingToken")]);
    m_billing_token_isSet = !json[QString("billingToken")].isNull() && m_billing_token_isValid;

    m_cupsecureplus_smscode_isValid = ::OpenAPI::fromJsonValue(m_cupsecureplus_smscode, json[QString("cupsecureplus.smscode")]);
    m_cupsecureplus_smscode_isSet = !json[QString("cupsecureplus.smscode")].isNull() && m_cupsecureplus_smscode_isValid;

    m_facilitator_access_token_isValid = ::OpenAPI::fromJsonValue(m_facilitator_access_token, json[QString("facilitatorAccessToken")]);
    m_facilitator_access_token_isSet = !json[QString("facilitatorAccessToken")].isNull() && m_facilitator_access_token_isValid;

    m_one_time_passcode_isValid = ::OpenAPI::fromJsonValue(m_one_time_passcode, json[QString("oneTimePasscode")]);
    m_one_time_passcode_isSet = !json[QString("oneTimePasscode")].isNull() && m_one_time_passcode_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderID")]);
    m_order_id_isSet = !json[QString("orderID")].isNull() && m_order_id_isValid;

    m_payer_id_isValid = ::OpenAPI::fromJsonValue(m_payer_id, json[QString("payerID")]);
    m_payer_id_isSet = !json[QString("payerID")].isNull() && m_payer_id_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_payment_id_isValid = ::OpenAPI::fromJsonValue(m_payment_id, json[QString("paymentID")]);
    m_payment_id_isSet = !json[QString("paymentID")].isNull() && m_payment_id_isValid;

    m_payment_status_isValid = ::OpenAPI::fromJsonValue(m_payment_status, json[QString("paymentStatus")]);
    m_payment_status_isSet = !json[QString("paymentStatus")].isNull() && m_payment_status_isValid;

    m_redirect_result_isValid = ::OpenAPI::fromJsonValue(m_redirect_result, json[QString("redirectResult")]);
    m_redirect_result_isSet = !json[QString("redirectResult")].isNull() && m_redirect_result_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_three_ds_result_isValid = ::OpenAPI::fromJsonValue(m_three_ds_result, json[QString("threeDSResult")]);
    m_three_ds_result_isSet = !json[QString("threeDSResult")].isNull() && m_three_ds_result_isValid;

    m_threeds2_challenge_result_isValid = ::OpenAPI::fromJsonValue(m_threeds2_challenge_result, json[QString("threeds2.challengeResult")]);
    m_threeds2_challenge_result_isSet = !json[QString("threeds2.challengeResult")].isNull() && m_threeds2_challenge_result_isValid;

    m_threeds2_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_threeds2_fingerprint, json[QString("threeds2.fingerprint")]);
    m_threeds2_fingerprint_isSet = !json[QString("threeds2.fingerprint")].isNull() && m_threeds2_fingerprint_isValid;
}

QString OAIPaymentCompletionDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentCompletionDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_md_isSet) {
        obj.insert(QString("MD"), ::OpenAPI::toJsonValue(m_md));
    }
    if (m_pa_req_isSet) {
        obj.insert(QString("PaReq"), ::OpenAPI::toJsonValue(m_pa_req));
    }
    if (m_pa_res_isSet) {
        obj.insert(QString("PaRes"), ::OpenAPI::toJsonValue(m_pa_res));
    }
    if (m_authorization_token_isSet) {
        obj.insert(QString("authorization_token"), ::OpenAPI::toJsonValue(m_authorization_token));
    }
    if (m_billing_token_isSet) {
        obj.insert(QString("billingToken"), ::OpenAPI::toJsonValue(m_billing_token));
    }
    if (m_cupsecureplus_smscode_isSet) {
        obj.insert(QString("cupsecureplus.smscode"), ::OpenAPI::toJsonValue(m_cupsecureplus_smscode));
    }
    if (m_facilitator_access_token_isSet) {
        obj.insert(QString("facilitatorAccessToken"), ::OpenAPI::toJsonValue(m_facilitator_access_token));
    }
    if (m_one_time_passcode_isSet) {
        obj.insert(QString("oneTimePasscode"), ::OpenAPI::toJsonValue(m_one_time_passcode));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderID"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payer_id_isSet) {
        obj.insert(QString("payerID"), ::OpenAPI::toJsonValue(m_payer_id));
    }
    if (m_payload_isSet) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_payment_id_isSet) {
        obj.insert(QString("paymentID"), ::OpenAPI::toJsonValue(m_payment_id));
    }
    if (m_payment_status_isSet) {
        obj.insert(QString("paymentStatus"), ::OpenAPI::toJsonValue(m_payment_status));
    }
    if (m_redirect_result_isSet) {
        obj.insert(QString("redirectResult"), ::OpenAPI::toJsonValue(m_redirect_result));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_three_ds_result_isSet) {
        obj.insert(QString("threeDSResult"), ::OpenAPI::toJsonValue(m_three_ds_result));
    }
    if (m_threeds2_challenge_result_isSet) {
        obj.insert(QString("threeds2.challengeResult"), ::OpenAPI::toJsonValue(m_threeds2_challenge_result));
    }
    if (m_threeds2_fingerprint_isSet) {
        obj.insert(QString("threeds2.fingerprint"), ::OpenAPI::toJsonValue(m_threeds2_fingerprint));
    }
    return obj;
}

QString OAIPaymentCompletionDetails::getMd() const {
    return m_md;
}
void OAIPaymentCompletionDetails::setMd(const QString &md) {
    m_md = md;
    m_md_isSet = true;
}

bool OAIPaymentCompletionDetails::is_md_Set() const{
    return m_md_isSet;
}

bool OAIPaymentCompletionDetails::is_md_Valid() const{
    return m_md_isValid;
}

QString OAIPaymentCompletionDetails::getPaReq() const {
    return m_pa_req;
}
void OAIPaymentCompletionDetails::setPaReq(const QString &pa_req) {
    m_pa_req = pa_req;
    m_pa_req_isSet = true;
}

bool OAIPaymentCompletionDetails::is_pa_req_Set() const{
    return m_pa_req_isSet;
}

bool OAIPaymentCompletionDetails::is_pa_req_Valid() const{
    return m_pa_req_isValid;
}

QString OAIPaymentCompletionDetails::getPaRes() const {
    return m_pa_res;
}
void OAIPaymentCompletionDetails::setPaRes(const QString &pa_res) {
    m_pa_res = pa_res;
    m_pa_res_isSet = true;
}

bool OAIPaymentCompletionDetails::is_pa_res_Set() const{
    return m_pa_res_isSet;
}

bool OAIPaymentCompletionDetails::is_pa_res_Valid() const{
    return m_pa_res_isValid;
}

QString OAIPaymentCompletionDetails::getAuthorizationToken() const {
    return m_authorization_token;
}
void OAIPaymentCompletionDetails::setAuthorizationToken(const QString &authorization_token) {
    m_authorization_token = authorization_token;
    m_authorization_token_isSet = true;
}

bool OAIPaymentCompletionDetails::is_authorization_token_Set() const{
    return m_authorization_token_isSet;
}

bool OAIPaymentCompletionDetails::is_authorization_token_Valid() const{
    return m_authorization_token_isValid;
}

QString OAIPaymentCompletionDetails::getBillingToken() const {
    return m_billing_token;
}
void OAIPaymentCompletionDetails::setBillingToken(const QString &billing_token) {
    m_billing_token = billing_token;
    m_billing_token_isSet = true;
}

bool OAIPaymentCompletionDetails::is_billing_token_Set() const{
    return m_billing_token_isSet;
}

bool OAIPaymentCompletionDetails::is_billing_token_Valid() const{
    return m_billing_token_isValid;
}

QString OAIPaymentCompletionDetails::getCupsecureplusSmscode() const {
    return m_cupsecureplus_smscode;
}
void OAIPaymentCompletionDetails::setCupsecureplusSmscode(const QString &cupsecureplus_smscode) {
    m_cupsecureplus_smscode = cupsecureplus_smscode;
    m_cupsecureplus_smscode_isSet = true;
}

bool OAIPaymentCompletionDetails::is_cupsecureplus_smscode_Set() const{
    return m_cupsecureplus_smscode_isSet;
}

bool OAIPaymentCompletionDetails::is_cupsecureplus_smscode_Valid() const{
    return m_cupsecureplus_smscode_isValid;
}

QString OAIPaymentCompletionDetails::getFacilitatorAccessToken() const {
    return m_facilitator_access_token;
}
void OAIPaymentCompletionDetails::setFacilitatorAccessToken(const QString &facilitator_access_token) {
    m_facilitator_access_token = facilitator_access_token;
    m_facilitator_access_token_isSet = true;
}

bool OAIPaymentCompletionDetails::is_facilitator_access_token_Set() const{
    return m_facilitator_access_token_isSet;
}

bool OAIPaymentCompletionDetails::is_facilitator_access_token_Valid() const{
    return m_facilitator_access_token_isValid;
}

QString OAIPaymentCompletionDetails::getOneTimePasscode() const {
    return m_one_time_passcode;
}
void OAIPaymentCompletionDetails::setOneTimePasscode(const QString &one_time_passcode) {
    m_one_time_passcode = one_time_passcode;
    m_one_time_passcode_isSet = true;
}

bool OAIPaymentCompletionDetails::is_one_time_passcode_Set() const{
    return m_one_time_passcode_isSet;
}

bool OAIPaymentCompletionDetails::is_one_time_passcode_Valid() const{
    return m_one_time_passcode_isValid;
}

QString OAIPaymentCompletionDetails::getOrderId() const {
    return m_order_id;
}
void OAIPaymentCompletionDetails::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPaymentCompletionDetails::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPaymentCompletionDetails::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPaymentCompletionDetails::getPayerId() const {
    return m_payer_id;
}
void OAIPaymentCompletionDetails::setPayerId(const QString &payer_id) {
    m_payer_id = payer_id;
    m_payer_id_isSet = true;
}

bool OAIPaymentCompletionDetails::is_payer_id_Set() const{
    return m_payer_id_isSet;
}

bool OAIPaymentCompletionDetails::is_payer_id_Valid() const{
    return m_payer_id_isValid;
}

QString OAIPaymentCompletionDetails::getPayload() const {
    return m_payload;
}
void OAIPaymentCompletionDetails::setPayload(const QString &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIPaymentCompletionDetails::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIPaymentCompletionDetails::is_payload_Valid() const{
    return m_payload_isValid;
}

QString OAIPaymentCompletionDetails::getPaymentId() const {
    return m_payment_id;
}
void OAIPaymentCompletionDetails::setPaymentId(const QString &payment_id) {
    m_payment_id = payment_id;
    m_payment_id_isSet = true;
}

bool OAIPaymentCompletionDetails::is_payment_id_Set() const{
    return m_payment_id_isSet;
}

bool OAIPaymentCompletionDetails::is_payment_id_Valid() const{
    return m_payment_id_isValid;
}

QString OAIPaymentCompletionDetails::getPaymentStatus() const {
    return m_payment_status;
}
void OAIPaymentCompletionDetails::setPaymentStatus(const QString &payment_status) {
    m_payment_status = payment_status;
    m_payment_status_isSet = true;
}

bool OAIPaymentCompletionDetails::is_payment_status_Set() const{
    return m_payment_status_isSet;
}

bool OAIPaymentCompletionDetails::is_payment_status_Valid() const{
    return m_payment_status_isValid;
}

QString OAIPaymentCompletionDetails::getRedirectResult() const {
    return m_redirect_result;
}
void OAIPaymentCompletionDetails::setRedirectResult(const QString &redirect_result) {
    m_redirect_result = redirect_result;
    m_redirect_result_isSet = true;
}

bool OAIPaymentCompletionDetails::is_redirect_result_Set() const{
    return m_redirect_result_isSet;
}

bool OAIPaymentCompletionDetails::is_redirect_result_Valid() const{
    return m_redirect_result_isValid;
}

QString OAIPaymentCompletionDetails::getResultCode() const {
    return m_result_code;
}
void OAIPaymentCompletionDetails::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIPaymentCompletionDetails::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIPaymentCompletionDetails::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAIPaymentCompletionDetails::getThreeDsResult() const {
    return m_three_ds_result;
}
void OAIPaymentCompletionDetails::setThreeDsResult(const QString &three_ds_result) {
    m_three_ds_result = three_ds_result;
    m_three_ds_result_isSet = true;
}

bool OAIPaymentCompletionDetails::is_three_ds_result_Set() const{
    return m_three_ds_result_isSet;
}

bool OAIPaymentCompletionDetails::is_three_ds_result_Valid() const{
    return m_three_ds_result_isValid;
}

QString OAIPaymentCompletionDetails::getThreeds2ChallengeResult() const {
    return m_threeds2_challenge_result;
}
void OAIPaymentCompletionDetails::setThreeds2ChallengeResult(const QString &threeds2_challenge_result) {
    m_threeds2_challenge_result = threeds2_challenge_result;
    m_threeds2_challenge_result_isSet = true;
}

bool OAIPaymentCompletionDetails::is_threeds2_challenge_result_Set() const{
    return m_threeds2_challenge_result_isSet;
}

bool OAIPaymentCompletionDetails::is_threeds2_challenge_result_Valid() const{
    return m_threeds2_challenge_result_isValid;
}

QString OAIPaymentCompletionDetails::getThreeds2Fingerprint() const {
    return m_threeds2_fingerprint;
}
void OAIPaymentCompletionDetails::setThreeds2Fingerprint(const QString &threeds2_fingerprint) {
    m_threeds2_fingerprint = threeds2_fingerprint;
    m_threeds2_fingerprint_isSet = true;
}

bool OAIPaymentCompletionDetails::is_threeds2_fingerprint_Set() const{
    return m_threeds2_fingerprint_isSet;
}

bool OAIPaymentCompletionDetails::is_threeds2_fingerprint_Valid() const{
    return m_threeds2_fingerprint_isValid;
}

bool OAIPaymentCompletionDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_md_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pa_req_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pa_res_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cupsecureplus_smscode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facilitator_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_one_time_passcode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threeds2_challenge_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_threeds2_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentCompletionDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
