/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForexQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForexQuote::OAIForexQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForexQuote::OAIForexQuote() {
    this->initializeModel();
}

OAIForexQuote::~OAIForexQuote() {}

void OAIForexQuote::initializeModel() {

    m_account_isSet = false;
    m_account_isValid = false;

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_base_amount_isSet = false;
    m_base_amount_isValid = false;

    m_base_points_isSet = false;
    m_base_points_isValid = false;

    m_buy_isSet = false;
    m_buy_isValid = false;

    m_interbank_isSet = false;
    m_interbank_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_sell_isSet = false;
    m_sell_isValid = false;

    m_signature_isSet = false;
    m_signature_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_valid_till_isSet = false;
    m_valid_till_isValid = false;
}

void OAIForexQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForexQuote::fromJsonObject(QJsonObject json) {

    m_account_isValid = ::OpenAPI::fromJsonValue(m_account, json[QString("account")]);
    m_account_isSet = !json[QString("account")].isNull() && m_account_isValid;

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("accountType")]);
    m_account_type_isSet = !json[QString("accountType")].isNull() && m_account_type_isValid;

    m_base_amount_isValid = ::OpenAPI::fromJsonValue(m_base_amount, json[QString("baseAmount")]);
    m_base_amount_isSet = !json[QString("baseAmount")].isNull() && m_base_amount_isValid;

    m_base_points_isValid = ::OpenAPI::fromJsonValue(m_base_points, json[QString("basePoints")]);
    m_base_points_isSet = !json[QString("basePoints")].isNull() && m_base_points_isValid;

    m_buy_isValid = ::OpenAPI::fromJsonValue(m_buy, json[QString("buy")]);
    m_buy_isSet = !json[QString("buy")].isNull() && m_buy_isValid;

    m_interbank_isValid = ::OpenAPI::fromJsonValue(m_interbank, json[QString("interbank")]);
    m_interbank_isSet = !json[QString("interbank")].isNull() && m_interbank_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_sell_isValid = ::OpenAPI::fromJsonValue(m_sell, json[QString("sell")]);
    m_sell_isSet = !json[QString("sell")].isNull() && m_sell_isValid;

    m_signature_isValid = ::OpenAPI::fromJsonValue(m_signature, json[QString("signature")]);
    m_signature_isSet = !json[QString("signature")].isNull() && m_signature_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_valid_till_isValid = ::OpenAPI::fromJsonValue(m_valid_till, json[QString("validTill")]);
    m_valid_till_isSet = !json[QString("validTill")].isNull() && m_valid_till_isValid;
}

QString OAIForexQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForexQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_account_isSet) {
        obj.insert(QString("account"), ::OpenAPI::toJsonValue(m_account));
    }
    if (m_account_type_isSet) {
        obj.insert(QString("accountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_base_amount.isSet()) {
        obj.insert(QString("baseAmount"), ::OpenAPI::toJsonValue(m_base_amount));
    }
    if (m_base_points_isSet) {
        obj.insert(QString("basePoints"), ::OpenAPI::toJsonValue(m_base_points));
    }
    if (m_buy.isSet()) {
        obj.insert(QString("buy"), ::OpenAPI::toJsonValue(m_buy));
    }
    if (m_interbank.isSet()) {
        obj.insert(QString("interbank"), ::OpenAPI::toJsonValue(m_interbank));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_sell.isSet()) {
        obj.insert(QString("sell"), ::OpenAPI::toJsonValue(m_sell));
    }
    if (m_signature_isSet) {
        obj.insert(QString("signature"), ::OpenAPI::toJsonValue(m_signature));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_valid_till_isSet) {
        obj.insert(QString("validTill"), ::OpenAPI::toJsonValue(m_valid_till));
    }
    return obj;
}

QString OAIForexQuote::getAccount() const {
    return m_account;
}
void OAIForexQuote::setAccount(const QString &account) {
    m_account = account;
    m_account_isSet = true;
}

bool OAIForexQuote::is_account_Set() const{
    return m_account_isSet;
}

bool OAIForexQuote::is_account_Valid() const{
    return m_account_isValid;
}

QString OAIForexQuote::getAccountType() const {
    return m_account_type;
}
void OAIForexQuote::setAccountType(const QString &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIForexQuote::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIForexQuote::is_account_type_Valid() const{
    return m_account_type_isValid;
}

OAIAmount OAIForexQuote::getBaseAmount() const {
    return m_base_amount;
}
void OAIForexQuote::setBaseAmount(const OAIAmount &base_amount) {
    m_base_amount = base_amount;
    m_base_amount_isSet = true;
}

bool OAIForexQuote::is_base_amount_Set() const{
    return m_base_amount_isSet;
}

bool OAIForexQuote::is_base_amount_Valid() const{
    return m_base_amount_isValid;
}

qint32 OAIForexQuote::getBasePoints() const {
    return m_base_points;
}
void OAIForexQuote::setBasePoints(const qint32 &base_points) {
    m_base_points = base_points;
    m_base_points_isSet = true;
}

bool OAIForexQuote::is_base_points_Set() const{
    return m_base_points_isSet;
}

bool OAIForexQuote::is_base_points_Valid() const{
    return m_base_points_isValid;
}

OAIAmount OAIForexQuote::getBuy() const {
    return m_buy;
}
void OAIForexQuote::setBuy(const OAIAmount &buy) {
    m_buy = buy;
    m_buy_isSet = true;
}

bool OAIForexQuote::is_buy_Set() const{
    return m_buy_isSet;
}

bool OAIForexQuote::is_buy_Valid() const{
    return m_buy_isValid;
}

OAIAmount OAIForexQuote::getInterbank() const {
    return m_interbank;
}
void OAIForexQuote::setInterbank(const OAIAmount &interbank) {
    m_interbank = interbank;
    m_interbank_isSet = true;
}

bool OAIForexQuote::is_interbank_Set() const{
    return m_interbank_isSet;
}

bool OAIForexQuote::is_interbank_Valid() const{
    return m_interbank_isValid;
}

QString OAIForexQuote::getReference() const {
    return m_reference;
}
void OAIForexQuote::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIForexQuote::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIForexQuote::is_reference_Valid() const{
    return m_reference_isValid;
}

OAIAmount OAIForexQuote::getSell() const {
    return m_sell;
}
void OAIForexQuote::setSell(const OAIAmount &sell) {
    m_sell = sell;
    m_sell_isSet = true;
}

bool OAIForexQuote::is_sell_Set() const{
    return m_sell_isSet;
}

bool OAIForexQuote::is_sell_Valid() const{
    return m_sell_isValid;
}

QString OAIForexQuote::getSignature() const {
    return m_signature;
}
void OAIForexQuote::setSignature(const QString &signature) {
    m_signature = signature;
    m_signature_isSet = true;
}

bool OAIForexQuote::is_signature_Set() const{
    return m_signature_isSet;
}

bool OAIForexQuote::is_signature_Valid() const{
    return m_signature_isValid;
}

QString OAIForexQuote::getSource() const {
    return m_source;
}
void OAIForexQuote::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIForexQuote::is_source_Set() const{
    return m_source_isSet;
}

bool OAIForexQuote::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIForexQuote::getType() const {
    return m_type;
}
void OAIForexQuote::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIForexQuote::is_type_Set() const{
    return m_type_isSet;
}

bool OAIForexQuote::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAIForexQuote::getValidTill() const {
    return m_valid_till;
}
void OAIForexQuote::setValidTill(const QDateTime &valid_till) {
    m_valid_till = valid_till;
    m_valid_till_isSet = true;
}

bool OAIForexQuote::is_valid_till_Set() const{
    return m_valid_till_isSet;
}

bool OAIForexQuote::is_valid_till_Valid() const{
    return m_valid_till_isValid;
}

bool OAIForexQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interbank.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_till_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForexQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_base_points_isValid && m_valid_till_isValid && true;
}

} // namespace OpenAPI
