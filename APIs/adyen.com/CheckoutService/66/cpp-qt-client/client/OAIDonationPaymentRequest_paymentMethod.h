/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDonationPaymentRequest_paymentMethod.h
 *
 * The type and required details of a payment method to use.
 */

#ifndef OAIDonationPaymentRequest_paymentMethod_H
#define OAIDonationPaymentRequest_paymentMethod_H

#include <QJsonObject>

#include "OAIApplePayDonations.h"
#include "OAICardDonations.h"
#include "OAIGooglePayDonations.h"
#include "OAIIdealDonations.h"
#include "OAIPayWithGoogleDonations.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDonationPaymentRequest_paymentMethod : public OAIObject {
public:
    OAIDonationPaymentRequest_paymentMethod();
    OAIDonationPaymentRequest_paymentMethod(QString json);
    ~OAIDonationPaymentRequest_paymentMethod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplePayToken() const;
    void setApplePayToken(const QString &apple_pay_token);
    bool is_apple_pay_token_Set() const;
    bool is_apple_pay_token_Valid() const;

    QString getFundingSource() const;
    void setFundingSource(const QString &funding_source);
    bool is_funding_source_Set() const;
    bool is_funding_source_Valid() const;

    Q_DECL_DEPRECATED QString getRecurringDetailReference() const;
    Q_DECL_DEPRECATED void setRecurringDetailReference(const QString &recurring_detail_reference);
    Q_DECL_DEPRECATED bool is_recurring_detail_reference_Set() const;
    Q_DECL_DEPRECATED bool is_recurring_detail_reference_Valid() const;

    QString getStoredPaymentMethodId() const;
    void setStoredPaymentMethodId(const QString &stored_payment_method_id);
    bool is_stored_payment_method_id_Set() const;
    bool is_stored_payment_method_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    Q_DECL_DEPRECATED QString getCupsecureplusSmscode() const;
    Q_DECL_DEPRECATED void setCupsecureplusSmscode(const QString &cupsecureplus_smscode);
    Q_DECL_DEPRECATED bool is_cupsecureplus_smscode_Set() const;
    Q_DECL_DEPRECATED bool is_cupsecureplus_smscode_Valid() const;

    QString getCvc() const;
    void setCvc(const QString &cvc);
    bool is_cvc_Set() const;
    bool is_cvc_Valid() const;

    QString getEncryptedCardNumber() const;
    void setEncryptedCardNumber(const QString &encrypted_card_number);
    bool is_encrypted_card_number_Set() const;
    bool is_encrypted_card_number_Valid() const;

    QString getEncryptedExpiryMonth() const;
    void setEncryptedExpiryMonth(const QString &encrypted_expiry_month);
    bool is_encrypted_expiry_month_Set() const;
    bool is_encrypted_expiry_month_Valid() const;

    QString getEncryptedExpiryYear() const;
    void setEncryptedExpiryYear(const QString &encrypted_expiry_year);
    bool is_encrypted_expiry_year_Set() const;
    bool is_encrypted_expiry_year_Valid() const;

    QString getEncryptedSecurityCode() const;
    void setEncryptedSecurityCode(const QString &encrypted_security_code);
    bool is_encrypted_security_code_Set() const;
    bool is_encrypted_security_code_Valid() const;

    QString getExpiryMonth() const;
    void setExpiryMonth(const QString &expiry_month);
    bool is_expiry_month_Set() const;
    bool is_expiry_month_Valid() const;

    QString getExpiryYear() const;
    void setExpiryYear(const QString &expiry_year);
    bool is_expiry_year_Set() const;
    bool is_expiry_year_Valid() const;

    QString getHolderName() const;
    void setHolderName(const QString &holder_name);
    bool is_holder_name_Set() const;
    bool is_holder_name_Valid() const;

    QString getNetworkPaymentReference() const;
    void setNetworkPaymentReference(const QString &network_payment_reference);
    bool is_network_payment_reference_Set() const;
    bool is_network_payment_reference_Valid() const;

    QString getNumber() const;
    void setNumber(const QString &number);
    bool is_number_Set() const;
    bool is_number_Valid() const;

    QString getShopperNotificationReference() const;
    void setShopperNotificationReference(const QString &shopper_notification_reference);
    bool is_shopper_notification_reference_Set() const;
    bool is_shopper_notification_reference_Valid() const;

    QString getThreeDs2SdkVersion() const;
    void setThreeDs2SdkVersion(const QString &three_ds2_sdk_version);
    bool is_three_ds2_sdk_version_Set() const;
    bool is_three_ds2_sdk_version_Valid() const;

    QString getGooglePayCardNetwork() const;
    void setGooglePayCardNetwork(const QString &google_pay_card_network);
    bool is_google_pay_card_network_Set() const;
    bool is_google_pay_card_network_Valid() const;

    QString getGooglePayToken() const;
    void setGooglePayToken(const QString &google_pay_token);
    bool is_google_pay_token_Set() const;
    bool is_google_pay_token_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_apple_pay_token;
    bool m_apple_pay_token_isSet;
    bool m_apple_pay_token_isValid;

    QString m_funding_source;
    bool m_funding_source_isSet;
    bool m_funding_source_isValid;

    QString m_recurring_detail_reference;
    bool m_recurring_detail_reference_isSet;
    bool m_recurring_detail_reference_isValid;

    QString m_stored_payment_method_id;
    bool m_stored_payment_method_id_isSet;
    bool m_stored_payment_method_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QString m_cupsecureplus_smscode;
    bool m_cupsecureplus_smscode_isSet;
    bool m_cupsecureplus_smscode_isValid;

    QString m_cvc;
    bool m_cvc_isSet;
    bool m_cvc_isValid;

    QString m_encrypted_card_number;
    bool m_encrypted_card_number_isSet;
    bool m_encrypted_card_number_isValid;

    QString m_encrypted_expiry_month;
    bool m_encrypted_expiry_month_isSet;
    bool m_encrypted_expiry_month_isValid;

    QString m_encrypted_expiry_year;
    bool m_encrypted_expiry_year_isSet;
    bool m_encrypted_expiry_year_isValid;

    QString m_encrypted_security_code;
    bool m_encrypted_security_code_isSet;
    bool m_encrypted_security_code_isValid;

    QString m_expiry_month;
    bool m_expiry_month_isSet;
    bool m_expiry_month_isValid;

    QString m_expiry_year;
    bool m_expiry_year_isSet;
    bool m_expiry_year_isValid;

    QString m_holder_name;
    bool m_holder_name_isSet;
    bool m_holder_name_isValid;

    QString m_network_payment_reference;
    bool m_network_payment_reference_isSet;
    bool m_network_payment_reference_isValid;

    QString m_number;
    bool m_number_isSet;
    bool m_number_isValid;

    QString m_shopper_notification_reference;
    bool m_shopper_notification_reference_isSet;
    bool m_shopper_notification_reference_isValid;

    QString m_three_ds2_sdk_version;
    bool m_three_ds2_sdk_version_isSet;
    bool m_three_ds2_sdk_version_isValid;

    QString m_google_pay_card_network;
    bool m_google_pay_card_network_isSet;
    bool m_google_pay_card_network_isValid;

    QString m_google_pay_token;
    bool m_google_pay_token_isSet;
    bool m_google_pay_token_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDonationPaymentRequest_paymentMethod)

#endif // OAIDonationPaymentRequest_paymentMethod_H
