/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataCommon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataCommon::OAIAdditionalDataCommon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataCommon::OAIAdditionalDataCommon() {
    this->initializeModel();
}

OAIAdditionalDataCommon::~OAIAdditionalDataCommon() {}

void OAIAdditionalDataCommon::initializeModel() {

    m_requested_test_error_response_code_isSet = false;
    m_requested_test_error_response_code_isValid = false;

    m_allow_partial_auth_isSet = false;
    m_allow_partial_auth_isValid = false;

    m_authorisation_type_isSet = false;
    m_authorisation_type_isValid = false;

    m_custom_routing_flag_isSet = false;
    m_custom_routing_flag_isValid = false;

    m_industry_usage_isSet = false;
    m_industry_usage_isValid = false;

    m_manual_capture_isSet = false;
    m_manual_capture_isValid = false;

    m_network_tx_reference_isSet = false;
    m_network_tx_reference_isValid = false;

    m_overwrite_brand_isSet = false;
    m_overwrite_brand_isValid = false;

    m_sub_merchant_city_isSet = false;
    m_sub_merchant_city_isValid = false;

    m_sub_merchant_country_isSet = false;
    m_sub_merchant_country_isValid = false;

    m_sub_merchant_id_isSet = false;
    m_sub_merchant_id_isValid = false;

    m_sub_merchant_name_isSet = false;
    m_sub_merchant_name_isValid = false;

    m_sub_merchant_postal_code_isSet = false;
    m_sub_merchant_postal_code_isValid = false;

    m_sub_merchant_state_isSet = false;
    m_sub_merchant_state_isValid = false;

    m_sub_merchant_street_isSet = false;
    m_sub_merchant_street_isValid = false;

    m_sub_merchant_tax_id_isSet = false;
    m_sub_merchant_tax_id_isValid = false;
}

void OAIAdditionalDataCommon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataCommon::fromJsonObject(QJsonObject json) {

    m_requested_test_error_response_code_isValid = ::OpenAPI::fromJsonValue(m_requested_test_error_response_code, json[QString("RequestedTestErrorResponseCode")]);
    m_requested_test_error_response_code_isSet = !json[QString("RequestedTestErrorResponseCode")].isNull() && m_requested_test_error_response_code_isValid;

    m_allow_partial_auth_isValid = ::OpenAPI::fromJsonValue(m_allow_partial_auth, json[QString("allowPartialAuth")]);
    m_allow_partial_auth_isSet = !json[QString("allowPartialAuth")].isNull() && m_allow_partial_auth_isValid;

    m_authorisation_type_isValid = ::OpenAPI::fromJsonValue(m_authorisation_type, json[QString("authorisationType")]);
    m_authorisation_type_isSet = !json[QString("authorisationType")].isNull() && m_authorisation_type_isValid;

    m_custom_routing_flag_isValid = ::OpenAPI::fromJsonValue(m_custom_routing_flag, json[QString("customRoutingFlag")]);
    m_custom_routing_flag_isSet = !json[QString("customRoutingFlag")].isNull() && m_custom_routing_flag_isValid;

    m_industry_usage_isValid = ::OpenAPI::fromJsonValue(m_industry_usage, json[QString("industryUsage")]);
    m_industry_usage_isSet = !json[QString("industryUsage")].isNull() && m_industry_usage_isValid;

    m_manual_capture_isValid = ::OpenAPI::fromJsonValue(m_manual_capture, json[QString("manualCapture")]);
    m_manual_capture_isSet = !json[QString("manualCapture")].isNull() && m_manual_capture_isValid;

    m_network_tx_reference_isValid = ::OpenAPI::fromJsonValue(m_network_tx_reference, json[QString("networkTxReference")]);
    m_network_tx_reference_isSet = !json[QString("networkTxReference")].isNull() && m_network_tx_reference_isValid;

    m_overwrite_brand_isValid = ::OpenAPI::fromJsonValue(m_overwrite_brand, json[QString("overwriteBrand")]);
    m_overwrite_brand_isSet = !json[QString("overwriteBrand")].isNull() && m_overwrite_brand_isValid;

    m_sub_merchant_city_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_city, json[QString("subMerchantCity")]);
    m_sub_merchant_city_isSet = !json[QString("subMerchantCity")].isNull() && m_sub_merchant_city_isValid;

    m_sub_merchant_country_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_country, json[QString("subMerchantCountry")]);
    m_sub_merchant_country_isSet = !json[QString("subMerchantCountry")].isNull() && m_sub_merchant_country_isValid;

    m_sub_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_id, json[QString("subMerchantID")]);
    m_sub_merchant_id_isSet = !json[QString("subMerchantID")].isNull() && m_sub_merchant_id_isValid;

    m_sub_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_name, json[QString("subMerchantName")]);
    m_sub_merchant_name_isSet = !json[QString("subMerchantName")].isNull() && m_sub_merchant_name_isValid;

    m_sub_merchant_postal_code_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_postal_code, json[QString("subMerchantPostalCode")]);
    m_sub_merchant_postal_code_isSet = !json[QString("subMerchantPostalCode")].isNull() && m_sub_merchant_postal_code_isValid;

    m_sub_merchant_state_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_state, json[QString("subMerchantState")]);
    m_sub_merchant_state_isSet = !json[QString("subMerchantState")].isNull() && m_sub_merchant_state_isValid;

    m_sub_merchant_street_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_street, json[QString("subMerchantStreet")]);
    m_sub_merchant_street_isSet = !json[QString("subMerchantStreet")].isNull() && m_sub_merchant_street_isValid;

    m_sub_merchant_tax_id_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant_tax_id, json[QString("subMerchantTaxId")]);
    m_sub_merchant_tax_id_isSet = !json[QString("subMerchantTaxId")].isNull() && m_sub_merchant_tax_id_isValid;
}

QString OAIAdditionalDataCommon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataCommon::asJsonObject() const {
    QJsonObject obj;
    if (m_requested_test_error_response_code_isSet) {
        obj.insert(QString("RequestedTestErrorResponseCode"), ::OpenAPI::toJsonValue(m_requested_test_error_response_code));
    }
    if (m_allow_partial_auth_isSet) {
        obj.insert(QString("allowPartialAuth"), ::OpenAPI::toJsonValue(m_allow_partial_auth));
    }
    if (m_authorisation_type_isSet) {
        obj.insert(QString("authorisationType"), ::OpenAPI::toJsonValue(m_authorisation_type));
    }
    if (m_custom_routing_flag_isSet) {
        obj.insert(QString("customRoutingFlag"), ::OpenAPI::toJsonValue(m_custom_routing_flag));
    }
    if (m_industry_usage_isSet) {
        obj.insert(QString("industryUsage"), ::OpenAPI::toJsonValue(m_industry_usage));
    }
    if (m_manual_capture_isSet) {
        obj.insert(QString("manualCapture"), ::OpenAPI::toJsonValue(m_manual_capture));
    }
    if (m_network_tx_reference_isSet) {
        obj.insert(QString("networkTxReference"), ::OpenAPI::toJsonValue(m_network_tx_reference));
    }
    if (m_overwrite_brand_isSet) {
        obj.insert(QString("overwriteBrand"), ::OpenAPI::toJsonValue(m_overwrite_brand));
    }
    if (m_sub_merchant_city_isSet) {
        obj.insert(QString("subMerchantCity"), ::OpenAPI::toJsonValue(m_sub_merchant_city));
    }
    if (m_sub_merchant_country_isSet) {
        obj.insert(QString("subMerchantCountry"), ::OpenAPI::toJsonValue(m_sub_merchant_country));
    }
    if (m_sub_merchant_id_isSet) {
        obj.insert(QString("subMerchantID"), ::OpenAPI::toJsonValue(m_sub_merchant_id));
    }
    if (m_sub_merchant_name_isSet) {
        obj.insert(QString("subMerchantName"), ::OpenAPI::toJsonValue(m_sub_merchant_name));
    }
    if (m_sub_merchant_postal_code_isSet) {
        obj.insert(QString("subMerchantPostalCode"), ::OpenAPI::toJsonValue(m_sub_merchant_postal_code));
    }
    if (m_sub_merchant_state_isSet) {
        obj.insert(QString("subMerchantState"), ::OpenAPI::toJsonValue(m_sub_merchant_state));
    }
    if (m_sub_merchant_street_isSet) {
        obj.insert(QString("subMerchantStreet"), ::OpenAPI::toJsonValue(m_sub_merchant_street));
    }
    if (m_sub_merchant_tax_id_isSet) {
        obj.insert(QString("subMerchantTaxId"), ::OpenAPI::toJsonValue(m_sub_merchant_tax_id));
    }
    return obj;
}

QString OAIAdditionalDataCommon::getRequestedTestErrorResponseCode() const {
    return m_requested_test_error_response_code;
}
void OAIAdditionalDataCommon::setRequestedTestErrorResponseCode(const QString &requested_test_error_response_code) {
    m_requested_test_error_response_code = requested_test_error_response_code;
    m_requested_test_error_response_code_isSet = true;
}

bool OAIAdditionalDataCommon::is_requested_test_error_response_code_Set() const{
    return m_requested_test_error_response_code_isSet;
}

bool OAIAdditionalDataCommon::is_requested_test_error_response_code_Valid() const{
    return m_requested_test_error_response_code_isValid;
}

QString OAIAdditionalDataCommon::getAllowPartialAuth() const {
    return m_allow_partial_auth;
}
void OAIAdditionalDataCommon::setAllowPartialAuth(const QString &allow_partial_auth) {
    m_allow_partial_auth = allow_partial_auth;
    m_allow_partial_auth_isSet = true;
}

bool OAIAdditionalDataCommon::is_allow_partial_auth_Set() const{
    return m_allow_partial_auth_isSet;
}

bool OAIAdditionalDataCommon::is_allow_partial_auth_Valid() const{
    return m_allow_partial_auth_isValid;
}

QString OAIAdditionalDataCommon::getAuthorisationType() const {
    return m_authorisation_type;
}
void OAIAdditionalDataCommon::setAuthorisationType(const QString &authorisation_type) {
    m_authorisation_type = authorisation_type;
    m_authorisation_type_isSet = true;
}

bool OAIAdditionalDataCommon::is_authorisation_type_Set() const{
    return m_authorisation_type_isSet;
}

bool OAIAdditionalDataCommon::is_authorisation_type_Valid() const{
    return m_authorisation_type_isValid;
}

QString OAIAdditionalDataCommon::getCustomRoutingFlag() const {
    return m_custom_routing_flag;
}
void OAIAdditionalDataCommon::setCustomRoutingFlag(const QString &custom_routing_flag) {
    m_custom_routing_flag = custom_routing_flag;
    m_custom_routing_flag_isSet = true;
}

bool OAIAdditionalDataCommon::is_custom_routing_flag_Set() const{
    return m_custom_routing_flag_isSet;
}

bool OAIAdditionalDataCommon::is_custom_routing_flag_Valid() const{
    return m_custom_routing_flag_isValid;
}

QString OAIAdditionalDataCommon::getIndustryUsage() const {
    return m_industry_usage;
}
void OAIAdditionalDataCommon::setIndustryUsage(const QString &industry_usage) {
    m_industry_usage = industry_usage;
    m_industry_usage_isSet = true;
}

bool OAIAdditionalDataCommon::is_industry_usage_Set() const{
    return m_industry_usage_isSet;
}

bool OAIAdditionalDataCommon::is_industry_usage_Valid() const{
    return m_industry_usage_isValid;
}

QString OAIAdditionalDataCommon::getManualCapture() const {
    return m_manual_capture;
}
void OAIAdditionalDataCommon::setManualCapture(const QString &manual_capture) {
    m_manual_capture = manual_capture;
    m_manual_capture_isSet = true;
}

bool OAIAdditionalDataCommon::is_manual_capture_Set() const{
    return m_manual_capture_isSet;
}

bool OAIAdditionalDataCommon::is_manual_capture_Valid() const{
    return m_manual_capture_isValid;
}

QString OAIAdditionalDataCommon::getNetworkTxReference() const {
    return m_network_tx_reference;
}
void OAIAdditionalDataCommon::setNetworkTxReference(const QString &network_tx_reference) {
    m_network_tx_reference = network_tx_reference;
    m_network_tx_reference_isSet = true;
}

bool OAIAdditionalDataCommon::is_network_tx_reference_Set() const{
    return m_network_tx_reference_isSet;
}

bool OAIAdditionalDataCommon::is_network_tx_reference_Valid() const{
    return m_network_tx_reference_isValid;
}

QString OAIAdditionalDataCommon::getOverwriteBrand() const {
    return m_overwrite_brand;
}
void OAIAdditionalDataCommon::setOverwriteBrand(const QString &overwrite_brand) {
    m_overwrite_brand = overwrite_brand;
    m_overwrite_brand_isSet = true;
}

bool OAIAdditionalDataCommon::is_overwrite_brand_Set() const{
    return m_overwrite_brand_isSet;
}

bool OAIAdditionalDataCommon::is_overwrite_brand_Valid() const{
    return m_overwrite_brand_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantCity() const {
    return m_sub_merchant_city;
}
void OAIAdditionalDataCommon::setSubMerchantCity(const QString &sub_merchant_city) {
    m_sub_merchant_city = sub_merchant_city;
    m_sub_merchant_city_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_city_Set() const{
    return m_sub_merchant_city_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_city_Valid() const{
    return m_sub_merchant_city_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantCountry() const {
    return m_sub_merchant_country;
}
void OAIAdditionalDataCommon::setSubMerchantCountry(const QString &sub_merchant_country) {
    m_sub_merchant_country = sub_merchant_country;
    m_sub_merchant_country_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_country_Set() const{
    return m_sub_merchant_country_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_country_Valid() const{
    return m_sub_merchant_country_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantId() const {
    return m_sub_merchant_id;
}
void OAIAdditionalDataCommon::setSubMerchantId(const QString &sub_merchant_id) {
    m_sub_merchant_id = sub_merchant_id;
    m_sub_merchant_id_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_id_Set() const{
    return m_sub_merchant_id_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_id_Valid() const{
    return m_sub_merchant_id_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantName() const {
    return m_sub_merchant_name;
}
void OAIAdditionalDataCommon::setSubMerchantName(const QString &sub_merchant_name) {
    m_sub_merchant_name = sub_merchant_name;
    m_sub_merchant_name_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_name_Set() const{
    return m_sub_merchant_name_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_name_Valid() const{
    return m_sub_merchant_name_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantPostalCode() const {
    return m_sub_merchant_postal_code;
}
void OAIAdditionalDataCommon::setSubMerchantPostalCode(const QString &sub_merchant_postal_code) {
    m_sub_merchant_postal_code = sub_merchant_postal_code;
    m_sub_merchant_postal_code_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_postal_code_Set() const{
    return m_sub_merchant_postal_code_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_postal_code_Valid() const{
    return m_sub_merchant_postal_code_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantState() const {
    return m_sub_merchant_state;
}
void OAIAdditionalDataCommon::setSubMerchantState(const QString &sub_merchant_state) {
    m_sub_merchant_state = sub_merchant_state;
    m_sub_merchant_state_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_state_Set() const{
    return m_sub_merchant_state_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_state_Valid() const{
    return m_sub_merchant_state_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantStreet() const {
    return m_sub_merchant_street;
}
void OAIAdditionalDataCommon::setSubMerchantStreet(const QString &sub_merchant_street) {
    m_sub_merchant_street = sub_merchant_street;
    m_sub_merchant_street_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_street_Set() const{
    return m_sub_merchant_street_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_street_Valid() const{
    return m_sub_merchant_street_isValid;
}

QString OAIAdditionalDataCommon::getSubMerchantTaxId() const {
    return m_sub_merchant_tax_id;
}
void OAIAdditionalDataCommon::setSubMerchantTaxId(const QString &sub_merchant_tax_id) {
    m_sub_merchant_tax_id = sub_merchant_tax_id;
    m_sub_merchant_tax_id_isSet = true;
}

bool OAIAdditionalDataCommon::is_sub_merchant_tax_id_Set() const{
    return m_sub_merchant_tax_id_isSet;
}

bool OAIAdditionalDataCommon::is_sub_merchant_tax_id_Valid() const{
    return m_sub_merchant_tax_id_isValid;
}

bool OAIAdditionalDataCommon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_requested_test_error_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_partial_auth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorisation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_routing_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_industry_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tx_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_street_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataCommon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
