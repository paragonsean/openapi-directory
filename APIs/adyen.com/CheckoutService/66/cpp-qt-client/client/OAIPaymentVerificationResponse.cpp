/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentVerificationResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentVerificationResponse::OAIPaymentVerificationResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentVerificationResponse::OAIPaymentVerificationResponse() {
    this->initializeModel();
}

OAIPaymentVerificationResponse::~OAIPaymentVerificationResponse() {}

void OAIPaymentVerificationResponse::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_fraud_result_isSet = false;
    m_fraud_result_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_refusal_reason_code_isSet = false;
    m_refusal_reason_code_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_service_error_isSet = false;
    m_service_error_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;
}

void OAIPaymentVerificationResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentVerificationResponse::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_fraud_result_isValid = ::OpenAPI::fromJsonValue(m_fraud_result, json[QString("fraudResult")]);
    m_fraud_result_isSet = !json[QString("fraudResult")].isNull() && m_fraud_result_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_refusal_reason_code_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason_code, json[QString("refusalReasonCode")]);
    m_refusal_reason_code_isSet = !json[QString("refusalReasonCode")].isNull() && m_refusal_reason_code_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_service_error_isValid = ::OpenAPI::fromJsonValue(m_service_error, json[QString("serviceError")]);
    m_service_error_isSet = !json[QString("serviceError")].isNull() && m_service_error_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;
}

QString OAIPaymentVerificationResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentVerificationResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_fraud_result.isSet()) {
        obj.insert(QString("fraudResult"), ::OpenAPI::toJsonValue(m_fraud_result));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_refusal_reason_code_isSet) {
        obj.insert(QString("refusalReasonCode"), ::OpenAPI::toJsonValue(m_refusal_reason_code));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_service_error.isSet()) {
        obj.insert(QString("serviceError"), ::OpenAPI::toJsonValue(m_service_error));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    return obj;
}

OAIBalanceCheckResponse_additionalData OAIPaymentVerificationResponse::getAdditionalData() const {
    return m_additional_data;
}
void OAIPaymentVerificationResponse::setAdditionalData(const OAIBalanceCheckResponse_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPaymentVerificationResponse::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPaymentVerificationResponse::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

OAIFraudResult OAIPaymentVerificationResponse::getFraudResult() const {
    return m_fraud_result;
}
void OAIPaymentVerificationResponse::setFraudResult(const OAIFraudResult &fraud_result) {
    m_fraud_result = fraud_result;
    m_fraud_result_isSet = true;
}

bool OAIPaymentVerificationResponse::is_fraud_result_Set() const{
    return m_fraud_result_isSet;
}

bool OAIPaymentVerificationResponse::is_fraud_result_Valid() const{
    return m_fraud_result_isValid;
}

QString OAIPaymentVerificationResponse::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIPaymentVerificationResponse::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIPaymentVerificationResponse::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIPaymentVerificationResponse::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

OAICheckoutOrderResponse OAIPaymentVerificationResponse::getOrder() const {
    return m_order;
}
void OAIPaymentVerificationResponse::setOrder(const OAICheckoutOrderResponse &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPaymentVerificationResponse::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPaymentVerificationResponse::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPaymentVerificationResponse::getPaymentMethod() const {
    return m_payment_method;
}
void OAIPaymentVerificationResponse::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIPaymentVerificationResponse::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIPaymentVerificationResponse::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIPaymentVerificationResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIPaymentVerificationResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIPaymentVerificationResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIPaymentVerificationResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIPaymentVerificationResponse::getRefusalReason() const {
    return m_refusal_reason;
}
void OAIPaymentVerificationResponse::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAIPaymentVerificationResponse::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAIPaymentVerificationResponse::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

QString OAIPaymentVerificationResponse::getRefusalReasonCode() const {
    return m_refusal_reason_code;
}
void OAIPaymentVerificationResponse::setRefusalReasonCode(const QString &refusal_reason_code) {
    m_refusal_reason_code = refusal_reason_code;
    m_refusal_reason_code_isSet = true;
}

bool OAIPaymentVerificationResponse::is_refusal_reason_code_Set() const{
    return m_refusal_reason_code_isSet;
}

bool OAIPaymentVerificationResponse::is_refusal_reason_code_Valid() const{
    return m_refusal_reason_code_isValid;
}

QString OAIPaymentVerificationResponse::getResultCode() const {
    return m_result_code;
}
void OAIPaymentVerificationResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIPaymentVerificationResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIPaymentVerificationResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

OAIServiceErrorDetails OAIPaymentVerificationResponse::getServiceError() const {
    return m_service_error;
}
void OAIPaymentVerificationResponse::setServiceError(const OAIServiceErrorDetails &service_error) {
    m_service_error = service_error;
    m_service_error_isSet = true;
}

bool OAIPaymentVerificationResponse::is_service_error_Set() const{
    return m_service_error_isSet;
}

bool OAIPaymentVerificationResponse::is_service_error_Valid() const{
    return m_service_error_isValid;
}

QString OAIPaymentVerificationResponse::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIPaymentVerificationResponse::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIPaymentVerificationResponse::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIPaymentVerificationResponse::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

bool OAIPaymentVerificationResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentVerificationResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_reference_isValid && m_payment_method_isValid && m_shopper_locale_isValid && true;
}

} // namespace OpenAPI
