/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplePayDonations from './ApplePayDonations';
import CardDonations from './CardDonations';
import GooglePayDonations from './GooglePayDonations';
import IdealDonations from './IdealDonations';
import PayWithGoogleDonations from './PayWithGoogleDonations';

/**
 * The DonationPaymentRequestPaymentMethod model module.
 * @module model/DonationPaymentRequestPaymentMethod
 * @version 66
 */
class DonationPaymentRequestPaymentMethod {
    /**
     * Constructs a new <code>DonationPaymentRequestPaymentMethod</code>.
     * The type and required details of a payment method to use.
     * @alias module:model/DonationPaymentRequestPaymentMethod
     * @param {(module:model/ApplePayDonations|module:model/CardDonations|module:model/GooglePayDonations|module:model/IdealDonations|module:model/PayWithGoogleDonations)} instance The actual instance to initialize DonationPaymentRequestPaymentMethod.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "ApplePayDonations") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ApplePayDonations.validateJSON(instance); // throw an exception if no match
                // create ApplePayDonations from JS object
                this.actualInstance = ApplePayDonations.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ApplePayDonations
            errorMessages.push("Failed to construct ApplePayDonations: " + err)
        }

        try {
            if (typeof instance === "CardDonations") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CardDonations.validateJSON(instance); // throw an exception if no match
                // create CardDonations from JS object
                this.actualInstance = CardDonations.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CardDonations
            errorMessages.push("Failed to construct CardDonations: " + err)
        }

        try {
            if (typeof instance === "GooglePayDonations") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GooglePayDonations.validateJSON(instance); // throw an exception if no match
                // create GooglePayDonations from JS object
                this.actualInstance = GooglePayDonations.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GooglePayDonations
            errorMessages.push("Failed to construct GooglePayDonations: " + err)
        }

        try {
            if (typeof instance === "IdealDonations") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                IdealDonations.validateJSON(instance); // throw an exception if no match
                // create IdealDonations from JS object
                this.actualInstance = IdealDonations.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into IdealDonations
            errorMessages.push("Failed to construct IdealDonations: " + err)
        }

        try {
            if (typeof instance === "PayWithGoogleDonations") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PayWithGoogleDonations.validateJSON(instance); // throw an exception if no match
                // create PayWithGoogleDonations from JS object
                this.actualInstance = PayWithGoogleDonations.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PayWithGoogleDonations
            errorMessages.push("Failed to construct PayWithGoogleDonations: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `DonationPaymentRequestPaymentMethod` with oneOf schemas ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `DonationPaymentRequestPaymentMethod` with oneOf schemas ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>DonationPaymentRequestPaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DonationPaymentRequestPaymentMethod} obj Optional instance to populate.
     * @return {module:model/DonationPaymentRequestPaymentMethod} The populated <code>DonationPaymentRequestPaymentMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        return new DonationPaymentRequestPaymentMethod(data);
    }

    /**
     * Gets the actual instance, which can be <code>ApplePayDonations</code>, <code>CardDonations</code>, <code>GooglePayDonations</code>, <code>IdealDonations</code>, <code>PayWithGoogleDonations</code>.
     * @return {(module:model/ApplePayDonations|module:model/CardDonations|module:model/GooglePayDonations|module:model/IdealDonations|module:model/PayWithGoogleDonations)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>ApplePayDonations</code>, <code>CardDonations</code>, <code>GooglePayDonations</code>, <code>IdealDonations</code>, <code>PayWithGoogleDonations</code>.
     * @param {(module:model/ApplePayDonations|module:model/CardDonations|module:model/GooglePayDonations|module:model/IdealDonations|module:model/PayWithGoogleDonations)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = DonationPaymentRequestPaymentMethod.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of DonationPaymentRequestPaymentMethod from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/DonationPaymentRequestPaymentMethod} An instance of DonationPaymentRequestPaymentMethod.
     */
    static fromJSON = function(json_string){
        return DonationPaymentRequestPaymentMethod.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.
 * @member {String} applePayToken
 */
DonationPaymentRequestPaymentMethod.prototype['applePayToken'] = undefined;

/**
 * The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
 * @member {module:model/DonationPaymentRequestPaymentMethod.FundingSourceEnum} fundingSource
 */
DonationPaymentRequestPaymentMethod.prototype['fundingSource'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} recurringDetailReference
 */
DonationPaymentRequestPaymentMethod.prototype['recurringDetailReference'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} storedPaymentMethodId
 */
DonationPaymentRequestPaymentMethod.prototype['storedPaymentMethodId'] = undefined;

/**
 * **applepay**
 * @member {module:model/DonationPaymentRequestPaymentMethod.TypeEnum} type
 * @default 'applepay'
 */
DonationPaymentRequestPaymentMethod.prototype['type'] = 'applepay';

/**
 * Secondary brand of the card. For example: **plastix**, **hmclub**.
 * @member {String} brand
 */
DonationPaymentRequestPaymentMethod.prototype['brand'] = undefined;

/**
 * @member {String} cupsecureplus.smscode
 */
DonationPaymentRequestPaymentMethod.prototype['cupsecureplus.smscode'] = undefined;

/**
 * The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} cvc
 */
DonationPaymentRequestPaymentMethod.prototype['cvc'] = undefined;

/**
 * The encrypted card number.
 * @member {String} encryptedCardNumber
 */
DonationPaymentRequestPaymentMethod.prototype['encryptedCardNumber'] = undefined;

/**
 * The encrypted card expiry month.
 * @member {String} encryptedExpiryMonth
 */
DonationPaymentRequestPaymentMethod.prototype['encryptedExpiryMonth'] = undefined;

/**
 * The encrypted card expiry year.
 * @member {String} encryptedExpiryYear
 */
DonationPaymentRequestPaymentMethod.prototype['encryptedExpiryYear'] = undefined;

/**
 * The encrypted card verification code.
 * @member {String} encryptedSecurityCode
 */
DonationPaymentRequestPaymentMethod.prototype['encryptedSecurityCode'] = undefined;

/**
 * The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} expiryMonth
 */
DonationPaymentRequestPaymentMethod.prototype['expiryMonth'] = undefined;

/**
 * The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} expiryYear
 */
DonationPaymentRequestPaymentMethod.prototype['expiryYear'] = undefined;

/**
 * The name of the card holder.
 * @member {String} holderName
 */
DonationPaymentRequestPaymentMethod.prototype['holderName'] = undefined;

/**
 * The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
 * @member {String} networkPaymentReference
 */
DonationPaymentRequestPaymentMethod.prototype['networkPaymentReference'] = undefined;

/**
 * The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} number
 */
DonationPaymentRequestPaymentMethod.prototype['number'] = undefined;

/**
 * The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.
 * @member {String} shopperNotificationReference
 */
DonationPaymentRequestPaymentMethod.prototype['shopperNotificationReference'] = undefined;

/**
 * Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
 * @member {String} threeDS2SdkVersion
 */
DonationPaymentRequestPaymentMethod.prototype['threeDS2SdkVersion'] = undefined;

/**
 * The selected payment card network. 
 * @member {String} googlePayCardNetwork
 */
DonationPaymentRequestPaymentMethod.prototype['googlePayCardNetwork'] = undefined;

/**
 * The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.
 * @member {String} googlePayToken
 */
DonationPaymentRequestPaymentMethod.prototype['googlePayToken'] = undefined;

/**
 * The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it.
 * @member {String} issuer
 */
DonationPaymentRequestPaymentMethod.prototype['issuer'] = undefined;


DonationPaymentRequestPaymentMethod.OneOf = ["ApplePayDonations", "CardDonations", "GooglePayDonations", "IdealDonations", "PayWithGoogleDonations"];

export default DonationPaymentRequestPaymentMethod;

