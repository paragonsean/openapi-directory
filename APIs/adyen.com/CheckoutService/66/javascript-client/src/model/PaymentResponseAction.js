/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CheckoutAwaitAction from './CheckoutAwaitAction';
import CheckoutNativeRedirectAction from './CheckoutNativeRedirectAction';
import CheckoutQrCodeAction from './CheckoutQrCodeAction';
import CheckoutRedirectAction from './CheckoutRedirectAction';
import CheckoutSDKAction from './CheckoutSDKAction';
import CheckoutThreeDS2ChallengeAction from './CheckoutThreeDS2ChallengeAction';
import CheckoutThreeDS2FingerPrintAction from './CheckoutThreeDS2FingerPrintAction';
import CheckoutVoucherAction from './CheckoutVoucherAction';

/**
 * The PaymentResponseAction model module.
 * @module model/PaymentResponseAction
 * @version 66
 */
class PaymentResponseAction {
    /**
     * Constructs a new <code>PaymentResponseAction</code>.
     * Action to be taken for completing the payment.
     * @alias module:model/PaymentResponseAction
     * @param {(module:model/CheckoutAwaitAction|module:model/CheckoutNativeRedirectAction|module:model/CheckoutQrCodeAction|module:model/CheckoutRedirectAction|module:model/CheckoutSDKAction|module:model/CheckoutThreeDS2ChallengeAction|module:model/CheckoutThreeDS2FingerPrintAction|module:model/CheckoutVoucherAction)} instance The actual instance to initialize PaymentResponseAction.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "CheckoutAwaitAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutAwaitAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutAwaitAction from JS object
                this.actualInstance = CheckoutAwaitAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutAwaitAction
            errorMessages.push("Failed to construct CheckoutAwaitAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutNativeRedirectAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutNativeRedirectAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutNativeRedirectAction from JS object
                this.actualInstance = CheckoutNativeRedirectAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutNativeRedirectAction
            errorMessages.push("Failed to construct CheckoutNativeRedirectAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutQrCodeAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutQrCodeAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutQrCodeAction from JS object
                this.actualInstance = CheckoutQrCodeAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutQrCodeAction
            errorMessages.push("Failed to construct CheckoutQrCodeAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutRedirectAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutRedirectAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutRedirectAction from JS object
                this.actualInstance = CheckoutRedirectAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutRedirectAction
            errorMessages.push("Failed to construct CheckoutRedirectAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutSDKAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutSDKAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutSDKAction from JS object
                this.actualInstance = CheckoutSDKAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutSDKAction
            errorMessages.push("Failed to construct CheckoutSDKAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutThreeDS2ChallengeAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutThreeDS2ChallengeAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutThreeDS2ChallengeAction from JS object
                this.actualInstance = CheckoutThreeDS2ChallengeAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutThreeDS2ChallengeAction
            errorMessages.push("Failed to construct CheckoutThreeDS2ChallengeAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutThreeDS2FingerPrintAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutThreeDS2FingerPrintAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutThreeDS2FingerPrintAction from JS object
                this.actualInstance = CheckoutThreeDS2FingerPrintAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutThreeDS2FingerPrintAction
            errorMessages.push("Failed to construct CheckoutThreeDS2FingerPrintAction: " + err)
        }

        try {
            if (typeof instance === "CheckoutVoucherAction") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CheckoutVoucherAction.validateJSON(instance); // throw an exception if no match
                // create CheckoutVoucherAction from JS object
                this.actualInstance = CheckoutVoucherAction.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CheckoutVoucherAction
            errorMessages.push("Failed to construct CheckoutVoucherAction: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PaymentResponseAction` with oneOf schemas CheckoutAwaitAction, CheckoutNativeRedirectAction, CheckoutQrCodeAction, CheckoutRedirectAction, CheckoutSDKAction, CheckoutThreeDS2ChallengeAction, CheckoutThreeDS2FingerPrintAction, CheckoutVoucherAction. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PaymentResponseAction` with oneOf schemas CheckoutAwaitAction, CheckoutNativeRedirectAction, CheckoutQrCodeAction, CheckoutRedirectAction, CheckoutSDKAction, CheckoutThreeDS2ChallengeAction, CheckoutThreeDS2FingerPrintAction, CheckoutVoucherAction. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PaymentResponseAction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentResponseAction} obj Optional instance to populate.
     * @return {module:model/PaymentResponseAction} The populated <code>PaymentResponseAction</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PaymentResponseAction(data);
    }

    /**
     * Gets the actual instance, which can be <code>CheckoutAwaitAction</code>, <code>CheckoutNativeRedirectAction</code>, <code>CheckoutQrCodeAction</code>, <code>CheckoutRedirectAction</code>, <code>CheckoutSDKAction</code>, <code>CheckoutThreeDS2ChallengeAction</code>, <code>CheckoutThreeDS2FingerPrintAction</code>, <code>CheckoutVoucherAction</code>.
     * @return {(module:model/CheckoutAwaitAction|module:model/CheckoutNativeRedirectAction|module:model/CheckoutQrCodeAction|module:model/CheckoutRedirectAction|module:model/CheckoutSDKAction|module:model/CheckoutThreeDS2ChallengeAction|module:model/CheckoutThreeDS2FingerPrintAction|module:model/CheckoutVoucherAction)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>CheckoutAwaitAction</code>, <code>CheckoutNativeRedirectAction</code>, <code>CheckoutQrCodeAction</code>, <code>CheckoutRedirectAction</code>, <code>CheckoutSDKAction</code>, <code>CheckoutThreeDS2ChallengeAction</code>, <code>CheckoutThreeDS2FingerPrintAction</code>, <code>CheckoutVoucherAction</code>.
     * @param {(module:model/CheckoutAwaitAction|module:model/CheckoutNativeRedirectAction|module:model/CheckoutQrCodeAction|module:model/CheckoutRedirectAction|module:model/CheckoutSDKAction|module:model/CheckoutThreeDS2ChallengeAction|module:model/CheckoutThreeDS2FingerPrintAction|module:model/CheckoutVoucherAction)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PaymentResponseAction.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PaymentResponseAction from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PaymentResponseAction} An instance of PaymentResponseAction.
     */
    static fromJSON = function(json_string){
        return PaymentResponseAction.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * A value that must be submitted to the `/payments/details` endpoint to verify this payment.
 * @member {String} paymentData
 */
PaymentResponseAction.prototype['paymentData'] = undefined;

/**
 * Specifies the payment method.
 * @member {String} paymentMethodType
 */
PaymentResponseAction.prototype['paymentMethodType'] = undefined;

/**
 * **await**
 * @member {module:model/PaymentResponseAction.TypeEnum} type
 */
PaymentResponseAction.prototype['type'] = undefined;

/**
 * Specifies the URL to redirect to.
 * @member {String} url
 */
PaymentResponseAction.prototype['url'] = undefined;

/**
 * When the redirect URL must be accessed via POST, use this data to post to the redirect URL.
 * @member {Object.<String, String>} data
 */
PaymentResponseAction.prototype['data'] = undefined;

/**
 * Specifies the HTTP method, for example GET or POST.
 * @member {String} method
 */
PaymentResponseAction.prototype['method'] = undefined;

/**
 * Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.
 * @member {String} nativeRedirectData
 */
PaymentResponseAction.prototype['nativeRedirectData'] = undefined;

/**
 * The date time of the voucher expiry.
 * @member {String} expiresAt
 */
PaymentResponseAction.prototype['expiresAt'] = undefined;

/**
 * The contents of the QR code as a UTF8 string.
 * @member {String} qrCodeData
 */
PaymentResponseAction.prototype['qrCodeData'] = undefined;

/**
 * The data to pass to the SDK.
 * @member {Object.<String, String>} sdkData
 */
PaymentResponseAction.prototype['sdkData'] = undefined;

/**
 * A token to pass to the 3DS2 Component to get the fingerprint.
 * @member {String} token
 */
PaymentResponseAction.prototype['token'] = undefined;

/**
 * The voucher alternative reference code.
 * @member {String} alternativeReference
 */
PaymentResponseAction.prototype['alternativeReference'] = undefined;

/**
 * A collection institution number (store number) for Econtext Pay-Easy ATM.
 * @member {String} collectionInstitutionNumber
 */
PaymentResponseAction.prototype['collectionInstitutionNumber'] = undefined;

/**
 * The URL to download the voucher.
 * @member {String} downloadUrl
 */
PaymentResponseAction.prototype['downloadUrl'] = undefined;

/**
 * An entity number of Multibanco.
 * @member {String} entity
 */
PaymentResponseAction.prototype['entity'] = undefined;

/**
 * The initial amount.
 * @member {module:model/Amount} initialAmount
 */
PaymentResponseAction.prototype['initialAmount'] = undefined;

/**
 * The URL to the detailed instructions to make payment using the voucher.
 * @member {String} instructionsUrl
 */
PaymentResponseAction.prototype['instructionsUrl'] = undefined;

/**
 * The issuer of the voucher.
 * @member {String} issuer
 */
PaymentResponseAction.prototype['issuer'] = undefined;

/**
 * The shopper telephone number (partially masked).
 * @member {String} maskedTelephoneNumber
 */
PaymentResponseAction.prototype['maskedTelephoneNumber'] = undefined;

/**
 * The merchant name.
 * @member {String} merchantName
 */
PaymentResponseAction.prototype['merchantName'] = undefined;

/**
 * The merchant reference.
 * @member {String} merchantReference
 */
PaymentResponseAction.prototype['merchantReference'] = undefined;

/**
 * The voucher reference code.
 * @member {String} reference
 */
PaymentResponseAction.prototype['reference'] = undefined;

/**
 * The shopper email.
 * @member {String} shopperEmail
 */
PaymentResponseAction.prototype['shopperEmail'] = undefined;

/**
 * The shopper name.
 * @member {String} shopperName
 */
PaymentResponseAction.prototype['shopperName'] = undefined;

/**
 * The surcharge amount.
 * @member {module:model/Amount} surcharge
 */
PaymentResponseAction.prototype['surcharge'] = undefined;

/**
 * The total amount (initial plus surcharge amount).
 * @member {module:model/Amount} totalAmount
 */
PaymentResponseAction.prototype['totalAmount'] = undefined;


PaymentResponseAction.OneOf = ["CheckoutAwaitAction", "CheckoutNativeRedirectAction", "CheckoutQrCodeAction", "CheckoutRedirectAction", "CheckoutSDKAction", "CheckoutThreeDS2ChallengeAction", "CheckoutThreeDS2FingerPrintAction", "CheckoutVoucherAction"];

export default PaymentResponseAction;

