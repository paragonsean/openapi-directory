/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v66/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v66/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=66) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 66
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';
import Amount from './Amount';
import ApplicationInfo from './ApplicationInfo';
import InstallmentOption from './InstallmentOption';
import LineItem from './LineItem';
import Name from './Name';
import RiskData from './RiskData';
import Split from './Split';

/**
 * The PaymentLinkResponse model module.
 * @module model/PaymentLinkResponse
 * @version 66
 */
class PaymentLinkResponse {
    /**
     * Constructs a new <code>PaymentLinkResponse</code>.
     * @alias module:model/PaymentLinkResponse
     * @param amount {module:model/Amount} The payment amount and currency.
     * @param id {String} A unique identifier of the payment link.
     * @param merchantAccount {String} The merchant account identifier for which the payment link is created.
     * @param reference {String} A reference that is used to uniquely identify the payment in future communications about the payment status.
     * @param status {module:model/PaymentLinkResponse.StatusEnum} Status of the payment link. Possible values: * **active**: The link can be used to make payments. * **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments. * **completed**: The shopper completed the payment.
     * @param url {String} The URL at which the shopper can complete the payment.
     */
    constructor(amount, id, merchantAccount, reference, status, url) { 
        
        PaymentLinkResponse.initialize(this, amount, id, merchantAccount, reference, status, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, id, merchantAccount, reference, status, url) { 
        obj['amount'] = amount;
        obj['id'] = id;
        obj['merchantAccount'] = merchantAccount;
        obj['reference'] = reference;
        obj['showRemovePaymentMethodButton'] = true;
        obj['status'] = status;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>PaymentLinkResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentLinkResponse} obj Optional instance to populate.
     * @return {module:model/PaymentLinkResponse} The populated <code>PaymentLinkResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentLinkResponse();

            if (data.hasOwnProperty('allowedPaymentMethods')) {
                obj['allowedPaymentMethods'] = ApiClient.convertToType(data['allowedPaymentMethods'], ['String']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('applicationInfo')) {
                obj['applicationInfo'] = ApplicationInfo.constructFromObject(data['applicationInfo']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('blockedPaymentMethods')) {
                obj['blockedPaymentMethods'] = ApiClient.convertToType(data['blockedPaymentMethods'], ['String']);
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('deliverAt')) {
                obj['deliverAt'] = ApiClient.convertToType(data['deliverAt'], 'Date');
            }
            if (data.hasOwnProperty('deliveryAddress')) {
                obj['deliveryAddress'] = Address.constructFromObject(data['deliveryAddress']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installmentOptions')) {
                obj['installmentOptions'] = ApiClient.convertToType(data['installmentOptions'], {'String': InstallmentOption});
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('manualCapture')) {
                obj['manualCapture'] = ApiClient.convertToType(data['manualCapture'], 'Boolean');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderReference')) {
                obj['merchantOrderReference'] = ApiClient.convertToType(data['merchantOrderReference'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('recurringProcessingModel')) {
                obj['recurringProcessingModel'] = ApiClient.convertToType(data['recurringProcessingModel'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('reusable')) {
                obj['reusable'] = ApiClient.convertToType(data['reusable'], 'Boolean');
            }
            if (data.hasOwnProperty('riskData')) {
                obj['riskData'] = RiskData.constructFromObject(data['riskData']);
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperLocale')) {
                obj['shopperLocale'] = ApiClient.convertToType(data['shopperLocale'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('showRemovePaymentMethodButton')) {
                obj['showRemovePaymentMethodButton'] = ApiClient.convertToType(data['showRemovePaymentMethodButton'], 'Boolean');
            }
            if (data.hasOwnProperty('splits')) {
                obj['splits'] = ApiClient.convertToType(data['splits'], [Split]);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('storePaymentMethod')) {
                obj['storePaymentMethod'] = ApiClient.convertToType(data['storePaymentMethod'], 'Boolean');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentLinkResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentLinkResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentLinkResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedPaymentMethods'])) {
            throw new Error("Expected the field `allowedPaymentMethods` to be an array in the JSON data but got " + data['allowedPaymentMethods']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `applicationInfo`
        if (data['applicationInfo']) { // data not null
          ApplicationInfo.validateJSON(data['applicationInfo']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockedPaymentMethods'])) {
            throw new Error("Expected the field `blockedPaymentMethods` to be an array in the JSON data but got " + data['blockedPaymentMethods']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // validate the optional field `deliveryAddress`
        if (data['deliveryAddress']) { // data not null
          Address.validateJSON(data['deliveryAddress']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['expiresAt'] && !(typeof data['expiresAt'] === 'string' || data['expiresAt'] instanceof String)) {
            throw new Error("Expected the field `expiresAt` to be a primitive type in the JSON string but got " + data['expiresAt']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['merchantOrderReference'] && !(typeof data['merchantOrderReference'] === 'string' || data['merchantOrderReference'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderReference` to be a primitive type in the JSON string but got " + data['merchantOrderReference']);
        }
        // ensure the json data is a string
        if (data['recurringProcessingModel'] && !(typeof data['recurringProcessingModel'] === 'string' || data['recurringProcessingModel'] instanceof String)) {
            throw new Error("Expected the field `recurringProcessingModel` to be a primitive type in the JSON string but got " + data['recurringProcessingModel']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        // validate the optional field `riskData`
        if (data['riskData']) { // data not null
          RiskData.validateJSON(data['riskData']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // ensure the json data is a string
        if (data['shopperLocale'] && !(typeof data['shopperLocale'] === 'string' || data['shopperLocale'] instanceof String)) {
            throw new Error("Expected the field `shopperLocale` to be a primitive type in the JSON string but got " + data['shopperLocale']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        if (data['splits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['splits'])) {
                throw new Error("Expected the field `splits` to be an array in the JSON data but got " + data['splits']);
            }
            // validate the optional field `splits` (array)
            for (const item of data['splits']) {
                Split.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

PaymentLinkResponse.RequiredProperties = ["amount", "id", "merchantAccount", "reference", "status", "url"];

/**
 * List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @member {Array.<String>} allowedPaymentMethods
 */
PaymentLinkResponse.prototype['allowedPaymentMethods'] = undefined;

/**
 * The payment amount and currency.
 * @member {module:model/Amount} amount
 */
PaymentLinkResponse.prototype['amount'] = undefined;

/**
 * Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).
 * @member {module:model/ApplicationInfo} applicationInfo
 */
PaymentLinkResponse.prototype['applicationInfo'] = undefined;

/**
 * The address where to send the invoice.
 * @member {module:model/Address} billingAddress
 */
PaymentLinkResponse.prototype['billingAddress'] = undefined;

/**
 * List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @member {Array.<String>} blockedPaymentMethods
 */
PaymentLinkResponse.prototype['blockedPaymentMethods'] = undefined;

/**
 * The shopper's two-letter country code.
 * @member {String} countryCode
 */
PaymentLinkResponse.prototype['countryCode'] = undefined;

/**
 * The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} deliverAt
 */
PaymentLinkResponse.prototype['deliverAt'] = undefined;

/**
 * The address where the purchased goods should be delivered.
 * @member {module:model/Address} deliveryAddress
 */
PaymentLinkResponse.prototype['deliveryAddress'] = undefined;

/**
 * A short description visible on the payment page. Maximum length: 280 characters.
 * @member {String} description
 */
PaymentLinkResponse.prototype['description'] = undefined;

/**
 * The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone designator **Z**: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30Z**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.
 * @member {String} expiresAt
 */
PaymentLinkResponse.prototype['expiresAt'] = undefined;

/**
 * A unique identifier of the payment link.
 * @member {String} id
 */
PaymentLinkResponse.prototype['id'] = undefined;

/**
 * A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
 * @member {Object.<String, module:model/InstallmentOption>} installmentOptions
 */
PaymentLinkResponse.prototype['installmentOptions'] = undefined;

/**
 * Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.
 * @member {Array.<module:model/LineItem>} lineItems
 */
PaymentLinkResponse.prototype['lineItems'] = undefined;

/**
 * Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).
 * @member {Boolean} manualCapture
 */
PaymentLinkResponse.prototype['manualCapture'] = undefined;

/**
 * The merchant account identifier for which the payment link is created.
 * @member {String} merchantAccount
 */
PaymentLinkResponse.prototype['merchantAccount'] = undefined;

/**
 * This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.
 * @member {String} merchantOrderReference
 */
PaymentLinkResponse.prototype['merchantOrderReference'] = undefined;

/**
 * Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\" * Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\" * A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.
 * @member {Object.<String, String>} metadata
 */
PaymentLinkResponse.prototype['metadata'] = undefined;

/**
 * Defines a recurring payment type. Required when `storePaymentMethodMode` is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 
 * @member {module:model/PaymentLinkResponse.RecurringProcessingModelEnum} recurringProcessingModel
 */
PaymentLinkResponse.prototype['recurringProcessingModel'] = undefined;

/**
 * A reference that is used to uniquely identify the payment in future communications about the payment status.
 * @member {String} reference
 */
PaymentLinkResponse.prototype['reference'] = undefined;

/**
 * Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.
 * @member {String} returnUrl
 */
PaymentLinkResponse.prototype['returnUrl'] = undefined;

/**
 * Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.
 * @member {Boolean} reusable
 */
PaymentLinkResponse.prototype['reusable'] = undefined;

/**
 * Any risk-related settings to apply to the payment.
 * @member {module:model/RiskData} riskData
 */
PaymentLinkResponse.prototype['riskData'] = undefined;

/**
 * The shopper's email address.
 * @member {String} shopperEmail
 */
PaymentLinkResponse.prototype['shopperEmail'] = undefined;

/**
 * The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).
 * @member {String} shopperLocale
 */
PaymentLinkResponse.prototype['shopperLocale'] = undefined;

/**
 * The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.
 * @member {module:model/Name} shopperName
 */
PaymentLinkResponse.prototype['shopperName'] = undefined;

/**
 * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
PaymentLinkResponse.prototype['shopperReference'] = undefined;

/**
 * Set to **false** to hide the button that lets the shopper remove a stored payment method.
 * @member {Boolean} showRemovePaymentMethodButton
 * @default true
 */
PaymentLinkResponse.prototype['showRemovePaymentMethodButton'] = true;

/**
 * An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
 * @member {Array.<module:model/Split>} splits
 */
PaymentLinkResponse.prototype['splits'] = undefined;

/**
 * Status of the payment link. Possible values: * **active**: The link can be used to make payments. * **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments. * **completed**: The shopper completed the payment.
 * @member {module:model/PaymentLinkResponse.StatusEnum} status
 */
PaymentLinkResponse.prototype['status'] = undefined;

/**
 * The physical store, for which this payment is processed.
 * @member {String} store
 */
PaymentLinkResponse.prototype['store'] = undefined;

/**
 * When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.
 * @member {Boolean} storePaymentMethod
 */
PaymentLinkResponse.prototype['storePaymentMethod'] = undefined;

/**
 * The date when the payment link status was updated.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} updatedAt
 */
PaymentLinkResponse.prototype['updatedAt'] = undefined;

/**
 * The URL at which the shopper can complete the payment.
 * @member {String} url
 */
PaymentLinkResponse.prototype['url'] = undefined;





/**
 * Allowed values for the <code>recurringProcessingModel</code> property.
 * @enum {String}
 * @readonly
 */
PaymentLinkResponse['RecurringProcessingModelEnum'] = {

    /**
     * value: "CardOnFile"
     * @const
     */
    "CardOnFile": "CardOnFile",

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription",

    /**
     * value: "UnscheduledCardOnFile"
     * @const
     */
    "UnscheduledCardOnFile": "UnscheduledCardOnFile"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
PaymentLinkResponse['StatusEnum'] = {

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "paid"
     * @const
     */
    "paid": "paid",

    /**
     * value: "paymentPending"
     * @const
     */
    "paymentPending": "paymentPending"
};



export default PaymentLinkResponse;

