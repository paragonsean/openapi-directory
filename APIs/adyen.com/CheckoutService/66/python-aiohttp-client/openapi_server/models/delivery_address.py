# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeliveryAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, first_name: str=None, house_number_or_name: str=None, last_name: str=None, postal_code: str=None, state_or_province: str=None, street: str=None):
        """DeliveryAddress - a model defined in OpenAPI

        :param city: The city of this DeliveryAddress.
        :param country: The country of this DeliveryAddress.
        :param first_name: The first_name of this DeliveryAddress.
        :param house_number_or_name: The house_number_or_name of this DeliveryAddress.
        :param last_name: The last_name of this DeliveryAddress.
        :param postal_code: The postal_code of this DeliveryAddress.
        :param state_or_province: The state_or_province of this DeliveryAddress.
        :param street: The street of this DeliveryAddress.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'first_name': str,
            'house_number_or_name': str,
            'last_name': str,
            'postal_code': str,
            'state_or_province': str,
            'street': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'first_name': 'firstName',
            'house_number_or_name': 'houseNumberOrName',
            'last_name': 'lastName',
            'postal_code': 'postalCode',
            'state_or_province': 'stateOrProvince',
            'street': 'street'
        }

        self._city = city
        self._country = country
        self._first_name = first_name
        self._house_number_or_name = house_number_or_name
        self._last_name = last_name
        self._postal_code = postal_code
        self._state_or_province = state_or_province
        self._street = street

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeliveryAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeliveryAddress of this DeliveryAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this DeliveryAddress.

        The name of the city. Maximum length: 3000 characters.

        :return: The city of this DeliveryAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this DeliveryAddress.

        The name of the city. Maximum length: 3000 characters.

        :param city: The city of this DeliveryAddress.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")
        if city is not None and len(city) > 3000:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `3000`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this DeliveryAddress.

        The two-character ISO-3166-1 alpha-2 country code. For example, **US**. > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.

        :return: The country of this DeliveryAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this DeliveryAddress.

        The two-character ISO-3166-1 alpha-2 country code. For example, **US**. > If you don't know the country or are not collecting the country from the shopper, provide `country` as `ZZ`.

        :param country: The country of this DeliveryAddress.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def first_name(self):
        """Gets the first_name of this DeliveryAddress.


        :return: The first_name of this DeliveryAddress.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this DeliveryAddress.


        :param first_name: The first_name of this DeliveryAddress.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def house_number_or_name(self):
        """Gets the house_number_or_name of this DeliveryAddress.

        The number or name of the house. Maximum length: 3000 characters.

        :return: The house_number_or_name of this DeliveryAddress.
        :rtype: str
        """
        return self._house_number_or_name

    @house_number_or_name.setter
    def house_number_or_name(self, house_number_or_name):
        """Sets the house_number_or_name of this DeliveryAddress.

        The number or name of the house. Maximum length: 3000 characters.

        :param house_number_or_name: The house_number_or_name of this DeliveryAddress.
        :type house_number_or_name: str
        """
        if house_number_or_name is None:
            raise ValueError("Invalid value for `house_number_or_name`, must not be `None`")
        if house_number_or_name is not None and len(house_number_or_name) > 3000:
            raise ValueError("Invalid value for `house_number_or_name`, length must be less than or equal to `3000`")

        self._house_number_or_name = house_number_or_name

    @property
    def last_name(self):
        """Gets the last_name of this DeliveryAddress.


        :return: The last_name of this DeliveryAddress.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this DeliveryAddress.


        :param last_name: The last_name of this DeliveryAddress.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def postal_code(self):
        """Gets the postal_code of this DeliveryAddress.

        A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.

        :return: The postal_code of this DeliveryAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this DeliveryAddress.

        A maximum of five digits for an address in the US, or a maximum of ten characters for an address in all other countries.

        :param postal_code: The postal_code of this DeliveryAddress.
        :type postal_code: str
        """
        if postal_code is None:
            raise ValueError("Invalid value for `postal_code`, must not be `None`")

        self._postal_code = postal_code

    @property
    def state_or_province(self):
        """Gets the state_or_province of this DeliveryAddress.

        The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada. > Required for the US and Canada.

        :return: The state_or_province of this DeliveryAddress.
        :rtype: str
        """
        return self._state_or_province

    @state_or_province.setter
    def state_or_province(self, state_or_province):
        """Sets the state_or_province of this DeliveryAddress.

        The two-character ISO 3166-2 state or province code. For example, **CA** in the US or **ON** in Canada. > Required for the US and Canada.

        :param state_or_province: The state_or_province of this DeliveryAddress.
        :type state_or_province: str
        """

        self._state_or_province = state_or_province

    @property
    def street(self):
        """Gets the street of this DeliveryAddress.

        The name of the street. Maximum length: 3000 characters. > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.

        :return: The street of this DeliveryAddress.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """Sets the street of this DeliveryAddress.

        The name of the street. Maximum length: 3000 characters. > The house number should not be included in this field; it should be separately provided via `houseNumberOrName`.

        :param street: The street of this DeliveryAddress.
        :type street: str
        """
        if street is None:
            raise ValueError("Invalid value for `street`, must not be `None`")
        if street is not None and len(street) > 3000:
            raise ValueError("Invalid value for `street`, length must be less than or equal to `3000`")

        self._street = street
