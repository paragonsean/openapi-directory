# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.checkout_redirect_action import CheckoutRedirectAction
from openapi_server import util


class PaymentDetailsResponseAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: Dict[str, str]=None, method: str=None, payment_data: str=None, payment_method_type: str=None, type: str=None, url: str=None):
        """PaymentDetailsResponseAction - a model defined in OpenAPI

        :param data: The data of this PaymentDetailsResponseAction.
        :param method: The method of this PaymentDetailsResponseAction.
        :param payment_data: The payment_data of this PaymentDetailsResponseAction.
        :param payment_method_type: The payment_method_type of this PaymentDetailsResponseAction.
        :param type: The type of this PaymentDetailsResponseAction.
        :param url: The url of this PaymentDetailsResponseAction.
        """
        self.openapi_types = {
            'data': Dict[str, str],
            'method': str,
            'payment_data': str,
            'payment_method_type': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'data': 'data',
            'method': 'method',
            'payment_data': 'paymentData',
            'payment_method_type': 'paymentMethodType',
            'type': 'type',
            'url': 'url'
        }

        self._data = data
        self._method = method
        self._payment_data = payment_data
        self._payment_method_type = payment_method_type
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDetailsResponseAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDetailsResponse_action of this PaymentDetailsResponseAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this PaymentDetailsResponseAction.

        When the redirect URL must be accessed via POST, use this data to post to the redirect URL.

        :return: The data of this PaymentDetailsResponseAction.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PaymentDetailsResponseAction.

        When the redirect URL must be accessed via POST, use this data to post to the redirect URL.

        :param data: The data of this PaymentDetailsResponseAction.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def method(self):
        """Gets the method of this PaymentDetailsResponseAction.

        Specifies the HTTP method, for example GET or POST.

        :return: The method of this PaymentDetailsResponseAction.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentDetailsResponseAction.

        Specifies the HTTP method, for example GET or POST.

        :param method: The method of this PaymentDetailsResponseAction.
        :type method: str
        """

        self._method = method

    @property
    def payment_data(self):
        """Gets the payment_data of this PaymentDetailsResponseAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :return: The payment_data of this PaymentDetailsResponseAction.
        :rtype: str
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this PaymentDetailsResponseAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :param payment_data: The payment_data of this PaymentDetailsResponseAction.
        :type payment_data: str
        """

        self._payment_data = payment_data

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentDetailsResponseAction.

        Specifies the payment method.

        :return: The payment_method_type of this PaymentDetailsResponseAction.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentDetailsResponseAction.

        Specifies the payment method.

        :param payment_method_type: The payment_method_type of this PaymentDetailsResponseAction.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def type(self):
        """Gets the type of this PaymentDetailsResponseAction.

        **redirect**

        :return: The type of this PaymentDetailsResponseAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentDetailsResponseAction.

        **redirect**

        :param type: The type of this PaymentDetailsResponseAction.
        :type type: str
        """
        allowed_values = ["redirect"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this PaymentDetailsResponseAction.

        Specifies the URL to redirect to.

        :return: The url of this PaymentDetailsResponseAction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PaymentDetailsResponseAction.

        Specifies the URL to redirect to.

        :param url: The url of this PaymentDetailsResponseAction.
        :type url: str
        """

        self._url = url
