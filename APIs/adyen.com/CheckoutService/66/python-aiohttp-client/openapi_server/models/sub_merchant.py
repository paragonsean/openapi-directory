# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubMerchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, mcc: str=None, name: str=None, tax_id: str=None):
        """SubMerchant - a model defined in OpenAPI

        :param city: The city of this SubMerchant.
        :param country: The country of this SubMerchant.
        :param mcc: The mcc of this SubMerchant.
        :param name: The name of this SubMerchant.
        :param tax_id: The tax_id of this SubMerchant.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'mcc': str,
            'name': str,
            'tax_id': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'mcc': 'mcc',
            'name': 'name',
            'tax_id': 'taxId'
        }

        self._city = city
        self._country = country
        self._mcc = mcc
        self._name = name
        self._tax_id = tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubMerchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubMerchant of this SubMerchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this SubMerchant.

        The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters

        :return: The city of this SubMerchant.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this SubMerchant.

        The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters

        :param city: The city of this SubMerchant.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this SubMerchant.

        The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters

        :return: The country of this SubMerchant.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this SubMerchant.

        The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters

        :param country: The country of this SubMerchant.
        :type country: str
        """

        self._country = country

    @property
    def mcc(self):
        """Gets the mcc of this SubMerchant.

        The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits

        :return: The mcc of this SubMerchant.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this SubMerchant.

        The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits

        :param mcc: The mcc of this SubMerchant.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def name(self):
        """Gets the name of this SubMerchant.

        The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters

        :return: The name of this SubMerchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubMerchant.

        The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters

        :param name: The name of this SubMerchant.
        :type name: str
        """

        self._name = name

    @property
    def tax_id(self):
        """Gets the tax_id of this SubMerchant.

        The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ

        :return: The tax_id of this SubMerchant.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this SubMerchant.

        The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ

        :param tax_id: The tax_id of this SubMerchant.
        :type tax_id: str
        """

        self._tax_id = tax_id
