# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RiskData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_data: str=None, custom_fields: Dict[str, str]=None, fraud_offset: int=None, profile_reference: str=None):
        """RiskData - a model defined in OpenAPI

        :param client_data: The client_data of this RiskData.
        :param custom_fields: The custom_fields of this RiskData.
        :param fraud_offset: The fraud_offset of this RiskData.
        :param profile_reference: The profile_reference of this RiskData.
        """
        self.openapi_types = {
            'client_data': str,
            'custom_fields': Dict[str, str],
            'fraud_offset': int,
            'profile_reference': str
        }

        self.attribute_map = {
            'client_data': 'clientData',
            'custom_fields': 'customFields',
            'fraud_offset': 'fraudOffset',
            'profile_reference': 'profileReference'
        }

        self._client_data = client_data
        self._custom_fields = custom_fields
        self._fraud_offset = fraud_offset
        self._profile_reference = profile_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RiskData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RiskData of this RiskData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_data(self):
        """Gets the client_data of this RiskData.

        Contains client-side data, like the device fingerprint, cookies, and specific browser settings.

        :return: The client_data of this RiskData.
        :rtype: str
        """
        return self._client_data

    @client_data.setter
    def client_data(self, client_data):
        """Sets the client_data of this RiskData.

        Contains client-side data, like the device fingerprint, cookies, and specific browser settings.

        :param client_data: The client_data of this RiskData.
        :type client_data: str
        """

        self._client_data = client_data

    @property
    def custom_fields(self):
        """Gets the custom_fields of this RiskData.

        Any custom fields used as part of the input to configured risk rules.

        :return: The custom_fields of this RiskData.
        :rtype: Dict[str, str]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this RiskData.

        Any custom fields used as part of the input to configured risk rules.

        :param custom_fields: The custom_fields of this RiskData.
        :type custom_fields: Dict[str, str]
        """

        self._custom_fields = custom_fields

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this RiskData.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this RiskData.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this RiskData.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this RiskData.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def profile_reference(self):
        """Gets the profile_reference of this RiskData.

        The risk profile to assign to this payment. When left empty, the merchant-level account's default risk profile will be applied.

        :return: The profile_reference of this RiskData.
        :rtype: str
        """
        return self._profile_reference

    @profile_reference.setter
    def profile_reference(self, profile_reference):
        """Sets the profile_reference of this RiskData.

        The risk profile to assign to this payment. When left empty, the merchant-level account's default risk profile will be applied.

        :param profile_reference: The profile_reference of this RiskData.
        :type profile_reference: str
        """

        self._profile_reference = profile_reference
