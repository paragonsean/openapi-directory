# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.line_item import LineItem
from openapi_server.models.split import Split
from openapi_server import util


class PaymentRefundRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, application_info: ApplicationInfo=None, line_items: List[LineItem]=None, merchant_account: str=None, merchant_refund_reason: str=None, reference: str=None, splits: List[Split]=None, store: str=None):
        """PaymentRefundRequest - a model defined in OpenAPI

        :param amount: The amount of this PaymentRefundRequest.
        :param application_info: The application_info of this PaymentRefundRequest.
        :param line_items: The line_items of this PaymentRefundRequest.
        :param merchant_account: The merchant_account of this PaymentRefundRequest.
        :param merchant_refund_reason: The merchant_refund_reason of this PaymentRefundRequest.
        :param reference: The reference of this PaymentRefundRequest.
        :param splits: The splits of this PaymentRefundRequest.
        :param store: The store of this PaymentRefundRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'application_info': ApplicationInfo,
            'line_items': List[LineItem],
            'merchant_account': str,
            'merchant_refund_reason': str,
            'reference': str,
            'splits': List[Split],
            'store': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'application_info': 'applicationInfo',
            'line_items': 'lineItems',
            'merchant_account': 'merchantAccount',
            'merchant_refund_reason': 'merchantRefundReason',
            'reference': 'reference',
            'splits': 'splits',
            'store': 'store'
        }

        self._amount = amount
        self._application_info = application_info
        self._line_items = line_items
        self._merchant_account = merchant_account
        self._merchant_refund_reason = merchant_refund_reason
        self._reference = reference
        self._splits = splits
        self._store = store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRefundRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRefundRequest of this PaymentRefundRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PaymentRefundRequest.

        The amount that you want to refund. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :return: The amount of this PaymentRefundRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRefundRequest.

        The amount that you want to refund. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :param amount: The amount of this PaymentRefundRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def application_info(self):
        """Gets the application_info of this PaymentRefundRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :return: The application_info of this PaymentRefundRequest.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this PaymentRefundRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :param application_info: The application_info of this PaymentRefundRequest.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def line_items(self):
        """Gets the line_items of this PaymentRefundRequest.

        Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.

        :return: The line_items of this PaymentRefundRequest.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PaymentRefundRequest.

        Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, Walley, and Zip.

        :param line_items: The line_items of this PaymentRefundRequest.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentRefundRequest.

        The merchant account that is used to process the payment.

        :return: The merchant_account of this PaymentRefundRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentRefundRequest.

        The merchant account that is used to process the payment.

        :param merchant_account: The merchant_account of this PaymentRefundRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_refund_reason(self):
        """Gets the merchant_refund_reason of this PaymentRefundRequest.

        Your reason for the refund request

        :return: The merchant_refund_reason of this PaymentRefundRequest.
        :rtype: str
        """
        return self._merchant_refund_reason

    @merchant_refund_reason.setter
    def merchant_refund_reason(self, merchant_refund_reason):
        """Sets the merchant_refund_reason of this PaymentRefundRequest.

        Your reason for the refund request

        :param merchant_refund_reason: The merchant_refund_reason of this PaymentRefundRequest.
        :type merchant_refund_reason: str
        """
        allowed_values = ["FRAUD", "CUSTOMER REQUEST", "RETURN", "DUPLICATE", "OTHER"]  # noqa: E501
        if merchant_refund_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `merchant_refund_reason` ({0}), must be one of {1}"
                .format(merchant_refund_reason, allowed_values)
            )

        self._merchant_refund_reason = merchant_refund_reason

    @property
    def reference(self):
        """Gets the reference of this PaymentRefundRequest.

        Your reference for the refund request. Maximum length: 80 characters.

        :return: The reference of this PaymentRefundRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentRefundRequest.

        Your reference for the refund request. Maximum length: 80 characters.

        :param reference: The reference of this PaymentRefundRequest.
        :type reference: str
        """

        self._reference = reference

    @property
    def splits(self):
        """Gets the splits of this PaymentRefundRequest.

        An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).

        :return: The splits of this PaymentRefundRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this PaymentRefundRequest.

        An array of objects specifying how the amount should be split between accounts when using Adyen for Platforms. For details, refer to [Providing split information](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information).

        :param splits: The splits of this PaymentRefundRequest.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def store(self):
        """Gets the store of this PaymentRefundRequest.

        The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails.

        :return: The store of this PaymentRefundRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PaymentRefundRequest.

        The online store or [physical store](https://docs.adyen.com/point-of-sale/design-your-integration/determine-account-structure/#create-stores) that is processing the refund. This must be the same as the store name configured in your Customer Area.  Otherwise, you get an error and the refund fails.

        :param store: The store of this PaymentRefundRequest.
        :type store: str
        """

        self._store = store
