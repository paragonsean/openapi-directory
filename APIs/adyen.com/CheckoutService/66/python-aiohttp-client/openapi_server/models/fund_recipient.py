# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.card_details import CardDetails
from openapi_server.models.name import Name
from openapi_server.models.sub_merchant import SubMerchant
from openapi_server import util


class FundRecipient(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: Address=None, payment_method: CardDetails=None, shopper_email: str=None, shopper_name: Name=None, shopper_reference: str=None, stored_payment_method_id: str=None, sub_merchant: SubMerchant=None, telephone_number: str=None, wallet_identifier: str=None, wallet_owner_tax_id: str=None):
        """FundRecipient - a model defined in OpenAPI

        :param billing_address: The billing_address of this FundRecipient.
        :param payment_method: The payment_method of this FundRecipient.
        :param shopper_email: The shopper_email of this FundRecipient.
        :param shopper_name: The shopper_name of this FundRecipient.
        :param shopper_reference: The shopper_reference of this FundRecipient.
        :param stored_payment_method_id: The stored_payment_method_id of this FundRecipient.
        :param sub_merchant: The sub_merchant of this FundRecipient.
        :param telephone_number: The telephone_number of this FundRecipient.
        :param wallet_identifier: The wallet_identifier of this FundRecipient.
        :param wallet_owner_tax_id: The wallet_owner_tax_id of this FundRecipient.
        """
        self.openapi_types = {
            'billing_address': Address,
            'payment_method': CardDetails,
            'shopper_email': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'stored_payment_method_id': str,
            'sub_merchant': SubMerchant,
            'telephone_number': str,
            'wallet_identifier': str,
            'wallet_owner_tax_id': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'payment_method': 'paymentMethod',
            'shopper_email': 'shopperEmail',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'sub_merchant': 'subMerchant',
            'telephone_number': 'telephoneNumber',
            'wallet_identifier': 'walletIdentifier',
            'wallet_owner_tax_id': 'walletOwnerTaxId'
        }

        self._billing_address = billing_address
        self._payment_method = payment_method
        self._shopper_email = shopper_email
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._sub_merchant = sub_merchant
        self._telephone_number = telephone_number
        self._wallet_identifier = wallet_identifier
        self._wallet_owner_tax_id = wallet_owner_tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundRecipient':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundRecipient of this FundRecipient.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this FundRecipient.

        The address where to send the invoice.

        :return: The billing_address of this FundRecipient.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this FundRecipient.

        The address where to send the invoice.

        :param billing_address: The billing_address of this FundRecipient.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def payment_method(self):
        """Gets the payment_method of this FundRecipient.

        the used paymentMetohd

        :return: The payment_method of this FundRecipient.
        :rtype: CardDetails
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this FundRecipient.

        the used paymentMetohd

        :param payment_method: The payment_method of this FundRecipient.
        :type payment_method: CardDetails
        """

        self._payment_method = payment_method

    @property
    def shopper_email(self):
        """Gets the shopper_email of this FundRecipient.

        the email address of the person

        :return: The shopper_email of this FundRecipient.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this FundRecipient.

        the email address of the person

        :param shopper_email: The shopper_email of this FundRecipient.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_name(self):
        """Gets the shopper_name of this FundRecipient.

        the name of the person

        :return: The shopper_name of this FundRecipient.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this FundRecipient.

        the name of the person

        :param shopper_name: The shopper_name of this FundRecipient.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this FundRecipient.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this FundRecipient.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this FundRecipient.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this FundRecipient.
        :type shopper_reference: str
        """
        if shopper_reference is not None and len(shopper_reference) > 256:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `256`")
        if shopper_reference is not None and len(shopper_reference) < 3:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `3`")

        self._shopper_reference = shopper_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this FundRecipient.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this FundRecipient.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this FundRecipient.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this FundRecipient.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def sub_merchant(self):
        """Gets the sub_merchant of this FundRecipient.

        Required for Back-to-Back/ purchase driven load in Wallet transactions. Contains the final merchant who will be receiving the money, also known as subMerchant, information.

        :return: The sub_merchant of this FundRecipient.
        :rtype: SubMerchant
        """
        return self._sub_merchant

    @sub_merchant.setter
    def sub_merchant(self, sub_merchant):
        """Sets the sub_merchant of this FundRecipient.

        Required for Back-to-Back/ purchase driven load in Wallet transactions. Contains the final merchant who will be receiving the money, also known as subMerchant, information.

        :param sub_merchant: The sub_merchant of this FundRecipient.
        :type sub_merchant: SubMerchant
        """

        self._sub_merchant = sub_merchant

    @property
    def telephone_number(self):
        """Gets the telephone_number of this FundRecipient.

        the telephone number of the person

        :return: The telephone_number of this FundRecipient.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this FundRecipient.

        the telephone number of the person

        :param telephone_number: The telephone_number of this FundRecipient.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def wallet_identifier(self):
        """Gets the wallet_identifier of this FundRecipient.

        indicates where the money is going

        :return: The wallet_identifier of this FundRecipient.
        :rtype: str
        """
        return self._wallet_identifier

    @wallet_identifier.setter
    def wallet_identifier(self, wallet_identifier):
        """Sets the wallet_identifier of this FundRecipient.

        indicates where the money is going

        :param wallet_identifier: The wallet_identifier of this FundRecipient.
        :type wallet_identifier: str
        """

        self._wallet_identifier = wallet_identifier

    @property
    def wallet_owner_tax_id(self):
        """Gets the wallet_owner_tax_id of this FundRecipient.

        indicates the tax identifier of the fund recepient

        :return: The wallet_owner_tax_id of this FundRecipient.
        :rtype: str
        """
        return self._wallet_owner_tax_id

    @wallet_owner_tax_id.setter
    def wallet_owner_tax_id(self, wallet_owner_tax_id):
        """Sets the wallet_owner_tax_id of this FundRecipient.

        indicates the tax identifier of the fund recepient

        :param wallet_owner_tax_id: The wallet_owner_tax_id of this FundRecipient.
        :type wallet_owner_tax_id: str
        """

        self._wallet_owner_tax_id = wallet_owner_tax_id
