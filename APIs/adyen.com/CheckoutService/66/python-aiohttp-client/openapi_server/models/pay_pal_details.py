# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayPalDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, order_id: str=None, payee_preferred: str=None, payer_id: str=None, payer_selected: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, subtype: str=None, type: str='paypal'):
        """PayPalDetails - a model defined in OpenAPI

        :param order_id: The order_id of this PayPalDetails.
        :param payee_preferred: The payee_preferred of this PayPalDetails.
        :param payer_id: The payer_id of this PayPalDetails.
        :param payer_selected: The payer_selected of this PayPalDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this PayPalDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this PayPalDetails.
        :param subtype: The subtype of this PayPalDetails.
        :param type: The type of this PayPalDetails.
        """
        self.openapi_types = {
            'order_id': str,
            'payee_preferred': str,
            'payer_id': str,
            'payer_selected': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'subtype': str,
            'type': str
        }

        self.attribute_map = {
            'order_id': 'orderID',
            'payee_preferred': 'payeePreferred',
            'payer_id': 'payerID',
            'payer_selected': 'payerSelected',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'subtype': 'subtype',
            'type': 'type'
        }

        self._order_id = order_id
        self._payee_preferred = payee_preferred
        self._payer_id = payer_id
        self._payer_selected = payer_selected
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._subtype = subtype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayPalDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayPalDetails of this PayPalDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def order_id(self):
        """Gets the order_id of this PayPalDetails.

        The unique ID associated with the order.

        :return: The order_id of this PayPalDetails.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PayPalDetails.

        The unique ID associated with the order.

        :param order_id: The order_id of this PayPalDetails.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payee_preferred(self):
        """Gets the payee_preferred of this PayPalDetails.

        IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED

        :return: The payee_preferred of this PayPalDetails.
        :rtype: str
        """
        return self._payee_preferred

    @payee_preferred.setter
    def payee_preferred(self, payee_preferred):
        """Sets the payee_preferred of this PayPalDetails.

        IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED

        :param payee_preferred: The payee_preferred of this PayPalDetails.
        :type payee_preferred: str
        """

        self._payee_preferred = payee_preferred

    @property
    def payer_id(self):
        """Gets the payer_id of this PayPalDetails.

        The unique ID associated with the payer.

        :return: The payer_id of this PayPalDetails.
        :rtype: str
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this PayPalDetails.

        The unique ID associated with the payer.

        :param payer_id: The payer_id of this PayPalDetails.
        :type payer_id: str
        """

        self._payer_id = payer_id

    @property
    def payer_selected(self):
        """Gets the payer_selected of this PayPalDetails.

        PAYPAL or PAYPAL_CREDIT

        :return: The payer_selected of this PayPalDetails.
        :rtype: str
        """
        return self._payer_selected

    @payer_selected.setter
    def payer_selected(self, payer_selected):
        """Sets the payer_selected of this PayPalDetails.

        PAYPAL or PAYPAL_CREDIT

        :param payer_selected: The payer_selected of this PayPalDetails.
        :type payer_selected: str
        """

        self._payer_selected = payer_selected

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this PayPalDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this PayPalDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this PayPalDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this PayPalDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this PayPalDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this PayPalDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this PayPalDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this PayPalDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def subtype(self):
        """Gets the subtype of this PayPalDetails.

        The type of flow to initiate.

        :return: The subtype of this PayPalDetails.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this PayPalDetails.

        The type of flow to initiate.

        :param subtype: The subtype of this PayPalDetails.
        :type subtype: str
        """
        allowed_values = ["redirect", "sdk"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def type(self):
        """Gets the type of this PayPalDetails.

        **paypal**

        :return: The type of this PayPalDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PayPalDetails.

        **paypal**

        :param type: The type of this PayPalDetails.
        :type type: str
        """
        allowed_values = ["paypal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
