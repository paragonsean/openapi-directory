# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class CreateOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, expires_at: str=None, merchant_account: str=None, reference: str=None):
        """CreateOrderRequest - a model defined in OpenAPI

        :param amount: The amount of this CreateOrderRequest.
        :param expires_at: The expires_at of this CreateOrderRequest.
        :param merchant_account: The merchant_account of this CreateOrderRequest.
        :param reference: The reference of this CreateOrderRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'expires_at': str,
            'merchant_account': str,
            'reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'expires_at': 'expiresAt',
            'merchant_account': 'merchantAccount',
            'reference': 'reference'
        }

        self._amount = amount
        self._expires_at = expires_at
        self._merchant_account = merchant_account
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrderRequest of this CreateOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CreateOrderRequest.

        The total amount of the order.

        :return: The amount of this CreateOrderRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOrderRequest.

        The total amount of the order.

        :param amount: The amount of this CreateOrderRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def expires_at(self):
        """Gets the expires_at of this CreateOrderRequest.

        The date that order expires; e.g. 2019-03-23T12:25:28Z. If not provided, the default expiry duration is 1 day.

        :return: The expires_at of this CreateOrderRequest.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CreateOrderRequest.

        The date that order expires; e.g. 2019-03-23T12:25:28Z. If not provided, the default expiry duration is 1 day.

        :param expires_at: The expires_at of this CreateOrderRequest.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CreateOrderRequest.

        The merchant account identifier, with which you want to process the order.

        :return: The merchant_account of this CreateOrderRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CreateOrderRequest.

        The merchant account identifier, with which you want to process the order.

        :param merchant_account: The merchant_account of this CreateOrderRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def reference(self):
        """Gets the reference of this CreateOrderRequest.

        A custom reference identifying the order.

        :return: The reference of this CreateOrderRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateOrderRequest.

        A custom reference identifying the order.

        :param reference: The reference of this CreateOrderRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference
