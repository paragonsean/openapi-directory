/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdditionalDataWallets
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:58.142349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalDataWallets {
  public static final String SERIALIZED_NAME_ANDROIDPAY_TOKEN = "androidpay.token";
  @SerializedName(SERIALIZED_NAME_ANDROIDPAY_TOKEN)
  private String androidpayToken;

  public static final String SERIALIZED_NAME_MASTERPASS_TRANSACTION_ID = "masterpass.transactionId";
  @SerializedName(SERIALIZED_NAME_MASTERPASS_TRANSACTION_ID)
  private String masterpassTransactionId;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "payment.token";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private String paymentToken;

  public static final String SERIALIZED_NAME_PAYWITHGOOGLE_TOKEN = "paywithgoogle.token";
  @SerializedName(SERIALIZED_NAME_PAYWITHGOOGLE_TOKEN)
  private String paywithgoogleToken;

  public static final String SERIALIZED_NAME_SAMSUNGPAY_TOKEN = "samsungpay.token";
  @SerializedName(SERIALIZED_NAME_SAMSUNGPAY_TOKEN)
  private String samsungpayToken;

  public static final String SERIALIZED_NAME_VISACHECKOUT_CALL_ID = "visacheckout.callId";
  @SerializedName(SERIALIZED_NAME_VISACHECKOUT_CALL_ID)
  private String visacheckoutCallId;

  public AdditionalDataWallets() {
  }

  public AdditionalDataWallets androidpayToken(String androidpayToken) {
    this.androidpayToken = androidpayToken;
    return this;
  }

  /**
   * The Android Pay token retrieved from the SDK.
   * @return androidpayToken
   */
  @javax.annotation.Nullable
  public String getAndroidpayToken() {
    return androidpayToken;
  }

  public void setAndroidpayToken(String androidpayToken) {
    this.androidpayToken = androidpayToken;
  }


  public AdditionalDataWallets masterpassTransactionId(String masterpassTransactionId) {
    this.masterpassTransactionId = masterpassTransactionId;
    return this;
  }

  /**
   * The Mastercard Masterpass Transaction ID retrieved from the SDK.
   * @return masterpassTransactionId
   */
  @javax.annotation.Nullable
  public String getMasterpassTransactionId() {
    return masterpassTransactionId;
  }

  public void setMasterpassTransactionId(String masterpassTransactionId) {
    this.masterpassTransactionId = masterpassTransactionId;
  }


  public AdditionalDataWallets paymentToken(String paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

  /**
   * The Apple Pay token retrieved from the SDK.
   * @return paymentToken
   */
  @javax.annotation.Nullable
  public String getPaymentToken() {
    return paymentToken;
  }

  public void setPaymentToken(String paymentToken) {
    this.paymentToken = paymentToken;
  }


  public AdditionalDataWallets paywithgoogleToken(String paywithgoogleToken) {
    this.paywithgoogleToken = paywithgoogleToken;
    return this;
  }

  /**
   * The Google Pay token retrieved from the SDK.
   * @return paywithgoogleToken
   */
  @javax.annotation.Nullable
  public String getPaywithgoogleToken() {
    return paywithgoogleToken;
  }

  public void setPaywithgoogleToken(String paywithgoogleToken) {
    this.paywithgoogleToken = paywithgoogleToken;
  }


  public AdditionalDataWallets samsungpayToken(String samsungpayToken) {
    this.samsungpayToken = samsungpayToken;
    return this;
  }

  /**
   * The Samsung Pay token retrieved from the SDK.
   * @return samsungpayToken
   */
  @javax.annotation.Nullable
  public String getSamsungpayToken() {
    return samsungpayToken;
  }

  public void setSamsungpayToken(String samsungpayToken) {
    this.samsungpayToken = samsungpayToken;
  }


  public AdditionalDataWallets visacheckoutCallId(String visacheckoutCallId) {
    this.visacheckoutCallId = visacheckoutCallId;
    return this;
  }

  /**
   * The Visa Checkout Call ID retrieved from the SDK.
   * @return visacheckoutCallId
   */
  @javax.annotation.Nullable
  public String getVisacheckoutCallId() {
    return visacheckoutCallId;
  }

  public void setVisacheckoutCallId(String visacheckoutCallId) {
    this.visacheckoutCallId = visacheckoutCallId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalDataWallets additionalDataWallets = (AdditionalDataWallets) o;
    return Objects.equals(this.androidpayToken, additionalDataWallets.androidpayToken) &&
        Objects.equals(this.masterpassTransactionId, additionalDataWallets.masterpassTransactionId) &&
        Objects.equals(this.paymentToken, additionalDataWallets.paymentToken) &&
        Objects.equals(this.paywithgoogleToken, additionalDataWallets.paywithgoogleToken) &&
        Objects.equals(this.samsungpayToken, additionalDataWallets.samsungpayToken) &&
        Objects.equals(this.visacheckoutCallId, additionalDataWallets.visacheckoutCallId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(androidpayToken, masterpassTransactionId, paymentToken, paywithgoogleToken, samsungpayToken, visacheckoutCallId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalDataWallets {\n");
    sb.append("    androidpayToken: ").append(toIndentedString(androidpayToken)).append("\n");
    sb.append("    masterpassTransactionId: ").append(toIndentedString(masterpassTransactionId)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    paywithgoogleToken: ").append(toIndentedString(paywithgoogleToken)).append("\n");
    sb.append("    samsungpayToken: ").append(toIndentedString(samsungpayToken)).append("\n");
    sb.append("    visacheckoutCallId: ").append(toIndentedString(visacheckoutCallId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("androidpay.token");
    openapiFields.add("masterpass.transactionId");
    openapiFields.add("payment.token");
    openapiFields.add("paywithgoogle.token");
    openapiFields.add("samsungpay.token");
    openapiFields.add("visacheckout.callId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalDataWallets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalDataWallets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalDataWallets is not found in the empty JSON string", AdditionalDataWallets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalDataWallets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalDataWallets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("androidpay.token") != null && !jsonObj.get("androidpay.token").isJsonNull()) && !jsonObj.get("androidpay.token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `androidpay.token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("androidpay.token").toString()));
      }
      if ((jsonObj.get("masterpass.transactionId") != null && !jsonObj.get("masterpass.transactionId").isJsonNull()) && !jsonObj.get("masterpass.transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterpass.transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterpass.transactionId").toString()));
      }
      if ((jsonObj.get("payment.token") != null && !jsonObj.get("payment.token").isJsonNull()) && !jsonObj.get("payment.token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payment.token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payment.token").toString()));
      }
      if ((jsonObj.get("paywithgoogle.token") != null && !jsonObj.get("paywithgoogle.token").isJsonNull()) && !jsonObj.get("paywithgoogle.token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paywithgoogle.token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paywithgoogle.token").toString()));
      }
      if ((jsonObj.get("samsungpay.token") != null && !jsonObj.get("samsungpay.token").isJsonNull()) && !jsonObj.get("samsungpay.token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `samsungpay.token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("samsungpay.token").toString()));
      }
      if ((jsonObj.get("visacheckout.callId") != null && !jsonObj.get("visacheckout.callId").isJsonNull()) && !jsonObj.get("visacheckout.callId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visacheckout.callId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visacheckout.callId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalDataWallets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalDataWallets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalDataWallets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataWallets.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalDataWallets>() {
           @Override
           public void write(JsonWriter out, AdditionalDataWallets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalDataWallets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalDataWallets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalDataWallets
   * @throws IOException if the JSON string is invalid with respect to AdditionalDataWallets
   */
  public static AdditionalDataWallets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalDataWallets.class);
  }

  /**
   * Convert an instance of AdditionalDataWallets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

