/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.BalanceCheckRequestAdditionalData;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.ForexQuote;
import org.openapitools.client.model.Installments;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Mandate;
import org.openapitools.client.model.ModelConfiguration;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.RiskData;
import org.openapitools.client.model.Split;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentSetupRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:58.142349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentSetupRequest {
  public static final String SERIALIZED_NAME_ADDITIONAL_AMOUNT = "additionalAmount";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_AMOUNT)
  private Amount additionalAmount;

  public static final String SERIALIZED_NAME_ADDITIONAL_DATA = "additionalData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_DATA)
  private BalanceCheckRequestAdditionalData additionalData;

  public static final String SERIALIZED_NAME_ALLOWED_PAYMENT_METHODS = "allowedPaymentMethods";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PAYMENT_METHODS)
  private List<String> allowedPaymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Amount amount;

  public static final String SERIALIZED_NAME_APPLICATION_INFO = "applicationInfo";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INFO)
  private ApplicationInfo applicationInfo;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private Address billingAddress;

  public static final String SERIALIZED_NAME_BLOCKED_PAYMENT_METHODS = "blockedPaymentMethods";
  @SerializedName(SERIALIZED_NAME_BLOCKED_PAYMENT_METHODS)
  private List<String> blockedPaymentMethods = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPTURE_DELAY_HOURS = "captureDelayHours";
  @SerializedName(SERIALIZED_NAME_CAPTURE_DELAY_HOURS)
  private Integer captureDelayHours;

  /**
   * The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web
   */
  @JsonAdapter(ChannelEnum.Adapter.class)
  public enum ChannelEnum {
    I_OS("iOS"),
    
    ANDROID("Android"),
    
    WEB("Web");

    private String value;

    ChannelEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChannelEnum fromValue(String value) {
      for (ChannelEnum b : ChannelEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChannelEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChannelEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChannelEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChannelEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChannelEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANNEL = "channel";
  @SerializedName(SERIALIZED_NAME_CHANNEL)
  private ChannelEnum channel;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private Company company;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private ModelConfiguration _configuration;

  public static final String SERIALIZED_NAME_CONVERSION_ID = "conversionId";
  @SerializedName(SERIALIZED_NAME_CONVERSION_ID)
  private String conversionId;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private LocalDate dateOfBirth;

  public static final String SERIALIZED_NAME_DCC_QUOTE = "dccQuote";
  @SerializedName(SERIALIZED_NAME_DCC_QUOTE)
  private ForexQuote dccQuote;

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS = "deliveryAddress";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS)
  private Address deliveryAddress;

  public static final String SERIALIZED_NAME_DELIVERY_DATE = "deliveryDate";
  @SerializedName(SERIALIZED_NAME_DELIVERY_DATE)
  private OffsetDateTime deliveryDate;

  public static final String SERIALIZED_NAME_ENABLE_ONE_CLICK = "enableOneClick";
  @SerializedName(SERIALIZED_NAME_ENABLE_ONE_CLICK)
  private Boolean enableOneClick;

  public static final String SERIALIZED_NAME_ENABLE_PAY_OUT = "enablePayOut";
  @SerializedName(SERIALIZED_NAME_ENABLE_PAY_OUT)
  private Boolean enablePayOut;

  public static final String SERIALIZED_NAME_ENABLE_RECURRING = "enableRecurring";
  @SerializedName(SERIALIZED_NAME_ENABLE_RECURRING)
  private Boolean enableRecurring;

  /**
   * The type of the entity the payment is processed for.
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    NATURAL_PERSON("NaturalPerson"),
    
    COMPANY_NAME("CompanyName");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_FRAUD_OFFSET = "fraudOffset";
  @SerializedName(SERIALIZED_NAME_FRAUD_OFFSET)
  private Integer fraudOffset;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private Installments installments;

  public static final String SERIALIZED_NAME_LINE_ITEMS = "lineItems";
  @SerializedName(SERIALIZED_NAME_LINE_ITEMS)
  private List<LineItem> lineItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANDATE = "mandate";
  @SerializedName(SERIALIZED_NAME_MANDATE)
  private Mandate mandate;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MERCHANT_ACCOUNT = "merchantAccount";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCOUNT)
  private String merchantAccount;

  public static final String SERIALIZED_NAME_MERCHANT_ORDER_REFERENCE = "merchantOrderReference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ORDER_REFERENCE)
  private String merchantOrderReference;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_ORDER_REFERENCE = "orderReference";
  @SerializedName(SERIALIZED_NAME_ORDER_REFERENCE)
  private String orderReference;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private String origin;

  public static final String SERIALIZED_NAME_RECURRING_EXPIRY = "recurringExpiry";
  @SerializedName(SERIALIZED_NAME_RECURRING_EXPIRY)
  private String recurringExpiry;

  public static final String SERIALIZED_NAME_RECURRING_FREQUENCY = "recurringFrequency";
  @SerializedName(SERIALIZED_NAME_RECURRING_FREQUENCY)
  private String recurringFrequency;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_RETURN_URL = "returnUrl";
  @SerializedName(SERIALIZED_NAME_RETURN_URL)
  private String returnUrl;

  public static final String SERIALIZED_NAME_RISK_DATA = "riskData";
  @SerializedName(SERIALIZED_NAME_RISK_DATA)
  private RiskData riskData;

  public static final String SERIALIZED_NAME_SDK_VERSION = "sdkVersion";
  @SerializedName(SERIALIZED_NAME_SDK_VERSION)
  private String sdkVersion;

  public static final String SERIALIZED_NAME_SESSION_VALIDITY = "sessionValidity";
  @SerializedName(SERIALIZED_NAME_SESSION_VALIDITY)
  private String sessionValidity;

  public static final String SERIALIZED_NAME_SHOPPER_EMAIL = "shopperEmail";
  @SerializedName(SERIALIZED_NAME_SHOPPER_EMAIL)
  private String shopperEmail;

  public static final String SERIALIZED_NAME_SHOPPER_I_P = "shopperIP";
  @SerializedName(SERIALIZED_NAME_SHOPPER_I_P)
  private String shopperIP;

  /**
   * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
   */
  @JsonAdapter(ShopperInteractionEnum.Adapter.class)
  public enum ShopperInteractionEnum {
    ECOMMERCE("Ecommerce"),
    
    CONT_AUTH("ContAuth"),
    
    MOTO("Moto"),
    
    POS("POS");

    private String value;

    ShopperInteractionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShopperInteractionEnum fromValue(String value) {
      for (ShopperInteractionEnum b : ShopperInteractionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShopperInteractionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShopperInteractionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShopperInteractionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShopperInteractionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShopperInteractionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOPPER_INTERACTION = "shopperInteraction";
  @SerializedName(SERIALIZED_NAME_SHOPPER_INTERACTION)
  private ShopperInteractionEnum shopperInteraction;

  public static final String SERIALIZED_NAME_SHOPPER_LOCALE = "shopperLocale";
  @SerializedName(SERIALIZED_NAME_SHOPPER_LOCALE)
  private String shopperLocale;

  public static final String SERIALIZED_NAME_SHOPPER_NAME = "shopperName";
  @SerializedName(SERIALIZED_NAME_SHOPPER_NAME)
  private Name shopperName;

  public static final String SERIALIZED_NAME_SHOPPER_REFERENCE = "shopperReference";
  @SerializedName(SERIALIZED_NAME_SHOPPER_REFERENCE)
  private String shopperReference;

  public static final String SERIALIZED_NAME_SHOPPER_STATEMENT = "shopperStatement";
  @SerializedName(SERIALIZED_NAME_SHOPPER_STATEMENT)
  private String shopperStatement;

  public static final String SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER = "socialSecurityNumber";
  @SerializedName(SERIALIZED_NAME_SOCIAL_SECURITY_NUMBER)
  private String socialSecurityNumber;

  public static final String SERIALIZED_NAME_SPLITS = "splits";
  @SerializedName(SERIALIZED_NAME_SPLITS)
  private List<Split> splits = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE = "store";
  @SerializedName(SERIALIZED_NAME_STORE)
  private String store;

  public static final String SERIALIZED_NAME_STORE_PAYMENT_METHOD = "storePaymentMethod";
  @SerializedName(SERIALIZED_NAME_STORE_PAYMENT_METHOD)
  private Boolean storePaymentMethod;

  public static final String SERIALIZED_NAME_TELEPHONE_NUMBER = "telephoneNumber";
  @SerializedName(SERIALIZED_NAME_TELEPHONE_NUMBER)
  private String telephoneNumber;

  public static final String SERIALIZED_NAME_THREE_D_S_AUTHENTICATION_ONLY = "threeDSAuthenticationOnly";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_AUTHENTICATION_ONLY)
  private Boolean threeDSAuthenticationOnly = false;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_TRUSTED_SHOPPER = "trustedShopper";
  @SerializedName(SERIALIZED_NAME_TRUSTED_SHOPPER)
  private Boolean trustedShopper;

  public PaymentSetupRequest() {
  }

  public PaymentSetupRequest additionalAmount(Amount additionalAmount) {
    this.additionalAmount = additionalAmount;
    return this;
  }

  /**
   * If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to &#x60;additionalAmount&#x60; (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the &#x60;amount&#x60;. 
   * @return additionalAmount
   */
  @javax.annotation.Nullable
  public Amount getAdditionalAmount() {
    return additionalAmount;
  }

  public void setAdditionalAmount(Amount additionalAmount) {
    this.additionalAmount = additionalAmount;
  }


  public PaymentSetupRequest additionalData(BalanceCheckRequestAdditionalData additionalData) {
    this.additionalData = additionalData;
    return this;
  }

  /**
   * Get additionalData
   * @return additionalData
   */
  @javax.annotation.Nullable
  public BalanceCheckRequestAdditionalData getAdditionalData() {
    return additionalData;
  }

  public void setAdditionalData(BalanceCheckRequestAdditionalData additionalData) {
    this.additionalData = additionalData;
  }


  public PaymentSetupRequest allowedPaymentMethods(List<String> allowedPaymentMethods) {
    this.allowedPaymentMethods = allowedPaymentMethods;
    return this;
  }

  public PaymentSetupRequest addAllowedPaymentMethodsItem(String allowedPaymentMethodsItem) {
    if (this.allowedPaymentMethods == null) {
      this.allowedPaymentMethods = new ArrayList<>();
    }
    this.allowedPaymentMethods.add(allowedPaymentMethodsItem);
    return this;
  }

  /**
   * List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;allowedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
   * @return allowedPaymentMethods
   */
  @javax.annotation.Nullable
  public List<String> getAllowedPaymentMethods() {
    return allowedPaymentMethods;
  }

  public void setAllowedPaymentMethods(List<String> allowedPaymentMethods) {
    this.allowedPaymentMethods = allowedPaymentMethods;
  }


  public PaymentSetupRequest amount(Amount amount) {
    this.amount = amount;
    return this;
  }

  /**
   * The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
   * @return amount
   */
  @javax.annotation.Nonnull
  public Amount getAmount() {
    return amount;
  }

  public void setAmount(Amount amount) {
    this.amount = amount;
  }


  public PaymentSetupRequest applicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
    return this;
  }

  /**
   * Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).
   * @return applicationInfo
   */
  @javax.annotation.Nullable
  public ApplicationInfo getApplicationInfo() {
    return applicationInfo;
  }

  public void setApplicationInfo(ApplicationInfo applicationInfo) {
    this.applicationInfo = applicationInfo;
  }


  public PaymentSetupRequest billingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
    return this;
  }

  /**
   * The address where to send the invoice. &gt; The &#x60;billingAddress&#x60; object is required in the following scenarios. Include all of the fields within this object. &gt;* For 3D Secure 2 transactions in all browser-based and mobile implementations. &gt;* For cross-border payouts to and from Canada.
   * @return billingAddress
   */
  @javax.annotation.Nullable
  public Address getBillingAddress() {
    return billingAddress;
  }

  public void setBillingAddress(Address billingAddress) {
    this.billingAddress = billingAddress;
  }


  public PaymentSetupRequest blockedPaymentMethods(List<String> blockedPaymentMethods) {
    this.blockedPaymentMethods = blockedPaymentMethods;
    return this;
  }

  public PaymentSetupRequest addBlockedPaymentMethodsItem(String blockedPaymentMethodsItem) {
    if (this.blockedPaymentMethods == null) {
      this.blockedPaymentMethods = new ArrayList<>();
    }
    this.blockedPaymentMethods.add(blockedPaymentMethodsItem);
    return this;
  }

  /**
   * List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: &#x60;\&quot;blockedPaymentMethods\&quot;:[\&quot;ideal\&quot;,\&quot;giropay\&quot;]&#x60;
   * @return blockedPaymentMethods
   */
  @javax.annotation.Nullable
  public List<String> getBlockedPaymentMethods() {
    return blockedPaymentMethods;
  }

  public void setBlockedPaymentMethods(List<String> blockedPaymentMethods) {
    this.blockedPaymentMethods = blockedPaymentMethods;
  }


  public PaymentSetupRequest captureDelayHours(Integer captureDelayHours) {
    this.captureDelayHours = captureDelayHours;
    return this;
  }

  /**
   * The delay between the authorisation and scheduled auto-capture, specified in hours.
   * @return captureDelayHours
   */
  @javax.annotation.Nullable
  public Integer getCaptureDelayHours() {
    return captureDelayHours;
  }

  public void setCaptureDelayHours(Integer captureDelayHours) {
    this.captureDelayHours = captureDelayHours;
  }


  public PaymentSetupRequest channel(ChannelEnum channel) {
    this.channel = channel;
    return this;
  }

  /**
   * The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the &#x60;sdkVersion&#x60; or &#x60;token&#x60;.  Possible values: * iOS * Android * Web
   * @return channel
   */
  @javax.annotation.Nullable
  public ChannelEnum getChannel() {
    return channel;
  }

  public void setChannel(ChannelEnum channel) {
    this.channel = channel;
  }


  public PaymentSetupRequest company(Company company) {
    this.company = company;
    return this;
  }

  /**
   * Information regarding the company.
   * @return company
   */
  @javax.annotation.Nullable
  public Company getCompany() {
    return company;
  }

  public void setCompany(Company company) {
    this.company = company;
  }


  public PaymentSetupRequest _configuration(ModelConfiguration _configuration) {
    this._configuration = _configuration;
    return this;
  }

  /**
   * Specify configurations to enable additional features.
   * @return _configuration
   */
  @javax.annotation.Nullable
  public ModelConfiguration getConfiguration() {
    return _configuration;
  }

  public void setConfiguration(ModelConfiguration _configuration) {
    this._configuration = _configuration;
  }


  public PaymentSetupRequest conversionId(String conversionId) {
    this.conversionId = conversionId;
    return this;
  }

  /**
   * Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.
   * @return conversionId
   */
  @javax.annotation.Nullable
  public String getConversionId() {
    return conversionId;
  }

  public void setConversionId(String conversionId) {
    this.conversionId = conversionId;
  }


  public PaymentSetupRequest countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public PaymentSetupRequest dateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The shopper&#39;s date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public LocalDate getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(LocalDate dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public PaymentSetupRequest dccQuote(ForexQuote dccQuote) {
    this.dccQuote = dccQuote;
    return this;
  }

  /**
   * The forex quote as returned in the response of the forex service.
   * @return dccQuote
   */
  @javax.annotation.Nullable
  public ForexQuote getDccQuote() {
    return dccQuote;
  }

  public void setDccQuote(ForexQuote dccQuote) {
    this.dccQuote = dccQuote;
  }


  public PaymentSetupRequest deliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
    return this;
  }

  /**
   * The address where the purchased goods should be delivered.
   * @return deliveryAddress
   */
  @javax.annotation.Nullable
  public Address getDeliveryAddress() {
    return deliveryAddress;
  }

  public void setDeliveryAddress(Address deliveryAddress) {
    this.deliveryAddress = deliveryAddress;
  }


  public PaymentSetupRequest deliveryDate(OffsetDateTime deliveryDate) {
    this.deliveryDate = deliveryDate;
    return this;
  }

  /**
   * The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
   * @return deliveryDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDeliveryDate() {
    return deliveryDate;
  }

  public void setDeliveryDate(OffsetDateTime deliveryDate) {
    this.deliveryDate = deliveryDate;
  }


  public PaymentSetupRequest enableOneClick(Boolean enableOneClick) {
    this.enableOneClick = enableOneClick;
    return this;
  }

  /**
   * When true and &#x60;shopperReference&#x60; is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
   * @return enableOneClick
   */
  @javax.annotation.Nullable
  public Boolean getEnableOneClick() {
    return enableOneClick;
  }

  public void setEnableOneClick(Boolean enableOneClick) {
    this.enableOneClick = enableOneClick;
  }


  public PaymentSetupRequest enablePayOut(Boolean enablePayOut) {
    this.enablePayOut = enablePayOut;
    return this;
  }

  /**
   * When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for payouts.
   * @return enablePayOut
   */
  @javax.annotation.Nullable
  public Boolean getEnablePayOut() {
    return enablePayOut;
  }

  public void setEnablePayOut(Boolean enablePayOut) {
    this.enablePayOut = enablePayOut;
  }


  public PaymentSetupRequest enableRecurring(Boolean enableRecurring) {
    this.enableRecurring = enableRecurring;
    return this;
  }

  /**
   * When true and &#x60;shopperReference&#x60; is provided, the payment details will be tokenized for recurring payments.
   * @return enableRecurring
   */
  @javax.annotation.Nullable
  public Boolean getEnableRecurring() {
    return enableRecurring;
  }

  public void setEnableRecurring(Boolean enableRecurring) {
    this.enableRecurring = enableRecurring;
  }


  public PaymentSetupRequest entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The type of the entity the payment is processed for.
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public PaymentSetupRequest fraudOffset(Integer fraudOffset) {
    this.fraudOffset = fraudOffset;
    return this;
  }

  /**
   * An integer value that is added to the normal fraud score. The value can be either positive or negative.
   * @return fraudOffset
   */
  @javax.annotation.Nullable
  public Integer getFraudOffset() {
    return fraudOffset;
  }

  public void setFraudOffset(Integer fraudOffset) {
    this.fraudOffset = fraudOffset;
  }


  public PaymentSetupRequest installments(Installments installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).
   * @return installments
   */
  @javax.annotation.Nullable
  public Installments getInstallments() {
    return installments;
  }

  public void setInstallments(Installments installments) {
    this.installments = installments;
  }


  public PaymentSetupRequest lineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
    return this;
  }

  public PaymentSetupRequest addLineItemsItem(LineItem lineItemsItem) {
    if (this.lineItems == null) {
      this.lineItems = new ArrayList<>();
    }
    this.lineItems.add(lineItemsItem);
    return this;
  }

  /**
   * Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). &gt; This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, and Zip.
   * @return lineItems
   */
  @javax.annotation.Nullable
  public List<LineItem> getLineItems() {
    return lineItems;
  }

  public void setLineItems(List<LineItem> lineItems) {
    this.lineItems = lineItems;
  }


  public PaymentSetupRequest mandate(Mandate mandate) {
    this.mandate = mandate;
    return this;
  }

  /**
   * The mandate details to initiate recurring transaction.
   * @return mandate
   */
  @javax.annotation.Nullable
  public Mandate getMandate() {
    return mandate;
  }

  public void setMandate(Mandate mandate) {
    this.mandate = mandate;
  }


  public PaymentSetupRequest mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
   * @return mcc
   */
  @javax.annotation.Nullable
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public PaymentSetupRequest merchantAccount(String merchantAccount) {
    this.merchantAccount = merchantAccount;
    return this;
  }

  /**
   * The merchant account identifier, with which you want to process the transaction.
   * @return merchantAccount
   */
  @javax.annotation.Nonnull
  public String getMerchantAccount() {
    return merchantAccount;
  }

  public void setMerchantAccount(String merchantAccount) {
    this.merchantAccount = merchantAccount;
  }


  public PaymentSetupRequest merchantOrderReference(String merchantOrderReference) {
    this.merchantOrderReference = merchantOrderReference;
    return this;
  }

  /**
   * This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. &gt; We strongly recommend you send the &#x60;merchantOrderReference&#x60; value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide &#x60;retry.orderAttemptNumber&#x60;, &#x60;retry.chainAttemptNumber&#x60;, and &#x60;retry.skipRetry&#x60; values in &#x60;PaymentRequest.additionalData&#x60;.
   * @return merchantOrderReference
   */
  @javax.annotation.Nullable
  public String getMerchantOrderReference() {
    return merchantOrderReference;
  }

  public void setMerchantOrderReference(String merchantOrderReference) {
    this.merchantOrderReference = merchantOrderReference;
  }


  public PaymentSetupRequest metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PaymentSetupRequest putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \&quot;177\&quot; error occurs: \&quot;Metadata size exceeds limit\&quot;. * Maximum 20 characters per key. * Maximum 80 characters per value. 
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public PaymentSetupRequest orderReference(String orderReference) {
    this.orderReference = orderReference;
    return this;
  }

  /**
   * When you are doing multiple partial (gift card) payments, this is the &#x60;pspReference&#x60; of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the &#x60;merchantOrderReference&#x60;instead.
   * @return orderReference
   */
  @javax.annotation.Nullable
  public String getOrderReference() {
    return orderReference;
  }

  public void setOrderReference(String orderReference) {
    this.orderReference = orderReference;
  }


  public PaymentSetupRequest origin(String origin) {
    this.origin = origin;
    return this;
  }

  /**
   * Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.
   * @return origin
   */
  @javax.annotation.Nullable
  public String getOrigin() {
    return origin;
  }

  public void setOrigin(String origin) {
    this.origin = origin;
  }


  public PaymentSetupRequest recurringExpiry(String recurringExpiry) {
    this.recurringExpiry = recurringExpiry;
    return this;
  }

  /**
   * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
   * @return recurringExpiry
   */
  @javax.annotation.Nullable
  public String getRecurringExpiry() {
    return recurringExpiry;
  }

  public void setRecurringExpiry(String recurringExpiry) {
    this.recurringExpiry = recurringExpiry;
  }


  public PaymentSetupRequest recurringFrequency(String recurringFrequency) {
    this.recurringFrequency = recurringFrequency;
    return this;
  }

  /**
   * Minimum number of days between authorisations. Only for 3D Secure 2.
   * @return recurringFrequency
   */
  @javax.annotation.Nullable
  public String getRecurringFrequency() {
    return recurringFrequency;
  }

  public void setRecurringFrequency(String recurringFrequency) {
    this.recurringFrequency = recurringFrequency;
  }


  public PaymentSetupRequest reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\&quot;-\&quot;). Maximum length: 80 characters.
   * @return reference
   */
  @javax.annotation.Nonnull
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public PaymentSetupRequest returnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
    return this;
  }

  /**
   * The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol &#x60;http://&#x60; or &#x60;https://&#x60;. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: &#x60;https://your-company.com/checkout?shopperOrder&#x3D;12xy&#x60; * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: &#x60;my-app://&#x60; * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: &#x60;my-app://your.package.name&#x60;
   * @return returnUrl
   */
  @javax.annotation.Nonnull
  public String getReturnUrl() {
    return returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }


  public PaymentSetupRequest riskData(RiskData riskData) {
    this.riskData = riskData;
    return this;
  }

  /**
   * Contains risk data, such as client-side data, used to identify risk for a transaction.
   * @return riskData
   */
  @javax.annotation.Nullable
  public RiskData getRiskData() {
    return riskData;
  }

  public void setRiskData(RiskData riskData) {
    this.riskData = riskData;
  }


  public PaymentSetupRequest sdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
    return this;
  }

  /**
   * The version of the SDK you are using (for Web SDK integrations only).
   * @return sdkVersion
   */
  @javax.annotation.Nullable
  public String getSdkVersion() {
    return sdkVersion;
  }

  public void setSdkVersion(String sdkVersion) {
    this.sdkVersion = sdkVersion;
  }


  public PaymentSetupRequest sessionValidity(String sessionValidity) {
    this.sessionValidity = sessionValidity;
    return this;
  }

  /**
   * The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00
   * @return sessionValidity
   */
  @javax.annotation.Nullable
  public String getSessionValidity() {
    return sessionValidity;
  }

  public void setSessionValidity(String sessionValidity) {
    this.sessionValidity = sessionValidity;
  }


  public PaymentSetupRequest shopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
    return this;
  }

  /**
   * The shopper&#39;s email address. We recommend that you provide this data, as it is used in velocity fraud checks. &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperEmail&#x60; for all browser-based and mobile implementations.
   * @return shopperEmail
   */
  @javax.annotation.Nullable
  public String getShopperEmail() {
    return shopperEmail;
  }

  public void setShopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
  }


  public PaymentSetupRequest shopperIP(String shopperIP) {
    this.shopperIP = shopperIP;
    return this;
  }

  /**
   * The shopper&#39;s IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). &gt; For 3D Secure 2 transactions, schemes require &#x60;shopperIP&#x60; for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
   * @return shopperIP
   */
  @javax.annotation.Nullable
  public String getShopperIP() {
    return shopperIP;
  }

  public void setShopperIP(String shopperIP) {
    this.shopperIP = shopperIP;
  }


  public PaymentSetupRequest shopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
    return this;
  }

  /**
   * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * &#x60;Ecommerce&#x60; - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * &#x60;ContAuth&#x60; - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * &#x60;Moto&#x60; - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * &#x60;POS&#x60; - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
   * @return shopperInteraction
   */
  @javax.annotation.Nullable
  public ShopperInteractionEnum getShopperInteraction() {
    return shopperInteraction;
  }

  public void setShopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
  }


  public PaymentSetupRequest shopperLocale(String shopperLocale) {
    this.shopperLocale = shopperLocale;
    return this;
  }

  /**
   * The combination of a language code and a country code to specify the language to be used in the payment.
   * @return shopperLocale
   */
  @javax.annotation.Nullable
  public String getShopperLocale() {
    return shopperLocale;
  }

  public void setShopperLocale(String shopperLocale) {
    this.shopperLocale = shopperLocale;
  }


  public PaymentSetupRequest shopperName(Name shopperName) {
    this.shopperName = shopperName;
    return this;
  }

  /**
   * The shopper&#39;s full name.
   * @return shopperName
   */
  @javax.annotation.Nullable
  public Name getShopperName() {
    return shopperName;
  }

  public void setShopperName(Name shopperName) {
    this.shopperName = shopperName;
  }


  public PaymentSetupRequest shopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
    return this;
  }

  /**
   * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address.
   * @return shopperReference
   */
  @javax.annotation.Nullable
  public String getShopperReference() {
    return shopperReference;
  }

  public void setShopperReference(String shopperReference) {
    this.shopperReference = shopperReference;
  }


  public PaymentSetupRequest shopperStatement(String shopperStatement) {
    this.shopperStatement = shopperStatement;
    return this;
  }

  /**
   * The text to be shown on the shopper&#39;s bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , &#39; _ - ? + * /_**.
   * @return shopperStatement
   */
  @javax.annotation.Nullable
  public String getShopperStatement() {
    return shopperStatement;
  }

  public void setShopperStatement(String shopperStatement) {
    this.shopperStatement = shopperStatement;
  }


  public PaymentSetupRequest socialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
    return this;
  }

  /**
   * The shopper&#39;s social security number.
   * @return socialSecurityNumber
   */
  @javax.annotation.Nullable
  public String getSocialSecurityNumber() {
    return socialSecurityNumber;
  }

  public void setSocialSecurityNumber(String socialSecurityNumber) {
    this.socialSecurityNumber = socialSecurityNumber;
  }


  public PaymentSetupRequest splits(List<Split> splits) {
    this.splits = splits;
    return this;
  }

  public PaymentSetupRequest addSplitsItem(Split splitsItem) {
    if (this.splits == null) {
      this.splits = new ArrayList<>();
    }
    this.splits.add(splitsItem);
    return this;
  }

  /**
   * An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
   * @return splits
   */
  @javax.annotation.Nullable
  public List<Split> getSplits() {
    return splits;
  }

  public void setSplits(List<Split> splits) {
    this.splits = splits;
  }


  public PaymentSetupRequest store(String store) {
    this.store = store;
    return this;
  }

  /**
   * Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
   * @return store
   */
  @javax.annotation.Nullable
  public String getStore() {
    return store;
  }

  public void setStore(String store) {
    this.store = store;
  }


  public PaymentSetupRequest storePaymentMethod(Boolean storePaymentMethod) {
    this.storePaymentMethod = storePaymentMethod;
    return this;
  }

  /**
   * When true and &#x60;shopperReference&#x60; is provided, the payment details will be stored.
   * @return storePaymentMethod
   */
  @javax.annotation.Nullable
  public Boolean getStorePaymentMethod() {
    return storePaymentMethod;
  }

  public void setStorePaymentMethod(Boolean storePaymentMethod) {
    this.storePaymentMethod = storePaymentMethod;
  }


  public PaymentSetupRequest telephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
    return this;
  }

  /**
   * The shopper&#39;s telephone number.
   * @return telephoneNumber
   */
  @javax.annotation.Nullable
  public String getTelephoneNumber() {
    return telephoneNumber;
  }

  public void setTelephoneNumber(String telephoneNumber) {
    this.telephoneNumber = telephoneNumber;
  }


  public PaymentSetupRequest threeDSAuthenticationOnly(Boolean threeDSAuthenticationOnly) {
    this.threeDSAuthenticationOnly = threeDSAuthenticationOnly;
    return this;
  }

  /**
   * If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
   * @return threeDSAuthenticationOnly
   */
  @javax.annotation.Nullable
  public Boolean getThreeDSAuthenticationOnly() {
    return threeDSAuthenticationOnly;
  }

  public void setThreeDSAuthenticationOnly(Boolean threeDSAuthenticationOnly) {
    this.threeDSAuthenticationOnly = threeDSAuthenticationOnly;
  }


  public PaymentSetupRequest token(String token) {
    this.token = token;
    return this;
  }

  /**
   * The token obtained when initializing the SDK.  &gt; This parameter is required for iOS and Android; not required for Web.
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public PaymentSetupRequest trustedShopper(Boolean trustedShopper) {
    this.trustedShopper = trustedShopper;
    return this;
  }

  /**
   * Set to true if the payment should be routed to a trusted MID.
   * @return trustedShopper
   */
  @javax.annotation.Nullable
  public Boolean getTrustedShopper() {
    return trustedShopper;
  }

  public void setTrustedShopper(Boolean trustedShopper) {
    this.trustedShopper = trustedShopper;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentSetupRequest paymentSetupRequest = (PaymentSetupRequest) o;
    return Objects.equals(this.additionalAmount, paymentSetupRequest.additionalAmount) &&
        Objects.equals(this.additionalData, paymentSetupRequest.additionalData) &&
        Objects.equals(this.allowedPaymentMethods, paymentSetupRequest.allowedPaymentMethods) &&
        Objects.equals(this.amount, paymentSetupRequest.amount) &&
        Objects.equals(this.applicationInfo, paymentSetupRequest.applicationInfo) &&
        Objects.equals(this.billingAddress, paymentSetupRequest.billingAddress) &&
        Objects.equals(this.blockedPaymentMethods, paymentSetupRequest.blockedPaymentMethods) &&
        Objects.equals(this.captureDelayHours, paymentSetupRequest.captureDelayHours) &&
        Objects.equals(this.channel, paymentSetupRequest.channel) &&
        Objects.equals(this.company, paymentSetupRequest.company) &&
        Objects.equals(this._configuration, paymentSetupRequest._configuration) &&
        Objects.equals(this.conversionId, paymentSetupRequest.conversionId) &&
        Objects.equals(this.countryCode, paymentSetupRequest.countryCode) &&
        Objects.equals(this.dateOfBirth, paymentSetupRequest.dateOfBirth) &&
        Objects.equals(this.dccQuote, paymentSetupRequest.dccQuote) &&
        Objects.equals(this.deliveryAddress, paymentSetupRequest.deliveryAddress) &&
        Objects.equals(this.deliveryDate, paymentSetupRequest.deliveryDate) &&
        Objects.equals(this.enableOneClick, paymentSetupRequest.enableOneClick) &&
        Objects.equals(this.enablePayOut, paymentSetupRequest.enablePayOut) &&
        Objects.equals(this.enableRecurring, paymentSetupRequest.enableRecurring) &&
        Objects.equals(this.entityType, paymentSetupRequest.entityType) &&
        Objects.equals(this.fraudOffset, paymentSetupRequest.fraudOffset) &&
        Objects.equals(this.installments, paymentSetupRequest.installments) &&
        Objects.equals(this.lineItems, paymentSetupRequest.lineItems) &&
        Objects.equals(this.mandate, paymentSetupRequest.mandate) &&
        Objects.equals(this.mcc, paymentSetupRequest.mcc) &&
        Objects.equals(this.merchantAccount, paymentSetupRequest.merchantAccount) &&
        Objects.equals(this.merchantOrderReference, paymentSetupRequest.merchantOrderReference) &&
        Objects.equals(this.metadata, paymentSetupRequest.metadata) &&
        Objects.equals(this.orderReference, paymentSetupRequest.orderReference) &&
        Objects.equals(this.origin, paymentSetupRequest.origin) &&
        Objects.equals(this.recurringExpiry, paymentSetupRequest.recurringExpiry) &&
        Objects.equals(this.recurringFrequency, paymentSetupRequest.recurringFrequency) &&
        Objects.equals(this.reference, paymentSetupRequest.reference) &&
        Objects.equals(this.returnUrl, paymentSetupRequest.returnUrl) &&
        Objects.equals(this.riskData, paymentSetupRequest.riskData) &&
        Objects.equals(this.sdkVersion, paymentSetupRequest.sdkVersion) &&
        Objects.equals(this.sessionValidity, paymentSetupRequest.sessionValidity) &&
        Objects.equals(this.shopperEmail, paymentSetupRequest.shopperEmail) &&
        Objects.equals(this.shopperIP, paymentSetupRequest.shopperIP) &&
        Objects.equals(this.shopperInteraction, paymentSetupRequest.shopperInteraction) &&
        Objects.equals(this.shopperLocale, paymentSetupRequest.shopperLocale) &&
        Objects.equals(this.shopperName, paymentSetupRequest.shopperName) &&
        Objects.equals(this.shopperReference, paymentSetupRequest.shopperReference) &&
        Objects.equals(this.shopperStatement, paymentSetupRequest.shopperStatement) &&
        Objects.equals(this.socialSecurityNumber, paymentSetupRequest.socialSecurityNumber) &&
        Objects.equals(this.splits, paymentSetupRequest.splits) &&
        Objects.equals(this.store, paymentSetupRequest.store) &&
        Objects.equals(this.storePaymentMethod, paymentSetupRequest.storePaymentMethod) &&
        Objects.equals(this.telephoneNumber, paymentSetupRequest.telephoneNumber) &&
        Objects.equals(this.threeDSAuthenticationOnly, paymentSetupRequest.threeDSAuthenticationOnly) &&
        Objects.equals(this.token, paymentSetupRequest.token) &&
        Objects.equals(this.trustedShopper, paymentSetupRequest.trustedShopper);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalAmount, additionalData, allowedPaymentMethods, amount, applicationInfo, billingAddress, blockedPaymentMethods, captureDelayHours, channel, company, _configuration, conversionId, countryCode, dateOfBirth, dccQuote, deliveryAddress, deliveryDate, enableOneClick, enablePayOut, enableRecurring, entityType, fraudOffset, installments, lineItems, mandate, mcc, merchantAccount, merchantOrderReference, metadata, orderReference, origin, recurringExpiry, recurringFrequency, reference, returnUrl, riskData, sdkVersion, sessionValidity, shopperEmail, shopperIP, shopperInteraction, shopperLocale, shopperName, shopperReference, shopperStatement, socialSecurityNumber, splits, store, storePaymentMethod, telephoneNumber, threeDSAuthenticationOnly, token, trustedShopper);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentSetupRequest {\n");
    sb.append("    additionalAmount: ").append(toIndentedString(additionalAmount)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("    allowedPaymentMethods: ").append(toIndentedString(allowedPaymentMethods)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    applicationInfo: ").append(toIndentedString(applicationInfo)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    blockedPaymentMethods: ").append(toIndentedString(blockedPaymentMethods)).append("\n");
    sb.append("    captureDelayHours: ").append(toIndentedString(captureDelayHours)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    conversionId: ").append(toIndentedString(conversionId)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    dccQuote: ").append(toIndentedString(dccQuote)).append("\n");
    sb.append("    deliveryAddress: ").append(toIndentedString(deliveryAddress)).append("\n");
    sb.append("    deliveryDate: ").append(toIndentedString(deliveryDate)).append("\n");
    sb.append("    enableOneClick: ").append(toIndentedString(enableOneClick)).append("\n");
    sb.append("    enablePayOut: ").append(toIndentedString(enablePayOut)).append("\n");
    sb.append("    enableRecurring: ").append(toIndentedString(enableRecurring)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    fraudOffset: ").append(toIndentedString(fraudOffset)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    lineItems: ").append(toIndentedString(lineItems)).append("\n");
    sb.append("    mandate: ").append(toIndentedString(mandate)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    merchantAccount: ").append(toIndentedString(merchantAccount)).append("\n");
    sb.append("    merchantOrderReference: ").append(toIndentedString(merchantOrderReference)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    orderReference: ").append(toIndentedString(orderReference)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    recurringExpiry: ").append(toIndentedString(recurringExpiry)).append("\n");
    sb.append("    recurringFrequency: ").append(toIndentedString(recurringFrequency)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    returnUrl: ").append(toIndentedString(returnUrl)).append("\n");
    sb.append("    riskData: ").append(toIndentedString(riskData)).append("\n");
    sb.append("    sdkVersion: ").append(toIndentedString(sdkVersion)).append("\n");
    sb.append("    sessionValidity: ").append(toIndentedString(sessionValidity)).append("\n");
    sb.append("    shopperEmail: ").append(toIndentedString(shopperEmail)).append("\n");
    sb.append("    shopperIP: ").append(toIndentedString(shopperIP)).append("\n");
    sb.append("    shopperInteraction: ").append(toIndentedString(shopperInteraction)).append("\n");
    sb.append("    shopperLocale: ").append(toIndentedString(shopperLocale)).append("\n");
    sb.append("    shopperName: ").append(toIndentedString(shopperName)).append("\n");
    sb.append("    shopperReference: ").append(toIndentedString(shopperReference)).append("\n");
    sb.append("    shopperStatement: ").append(toIndentedString(shopperStatement)).append("\n");
    sb.append("    socialSecurityNumber: ").append(toIndentedString(socialSecurityNumber)).append("\n");
    sb.append("    splits: ").append(toIndentedString(splits)).append("\n");
    sb.append("    store: ").append(toIndentedString(store)).append("\n");
    sb.append("    storePaymentMethod: ").append(toIndentedString(storePaymentMethod)).append("\n");
    sb.append("    telephoneNumber: ").append(toIndentedString(telephoneNumber)).append("\n");
    sb.append("    threeDSAuthenticationOnly: ").append(toIndentedString(threeDSAuthenticationOnly)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    trustedShopper: ").append(toIndentedString(trustedShopper)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalAmount");
    openapiFields.add("additionalData");
    openapiFields.add("allowedPaymentMethods");
    openapiFields.add("amount");
    openapiFields.add("applicationInfo");
    openapiFields.add("billingAddress");
    openapiFields.add("blockedPaymentMethods");
    openapiFields.add("captureDelayHours");
    openapiFields.add("channel");
    openapiFields.add("company");
    openapiFields.add("configuration");
    openapiFields.add("conversionId");
    openapiFields.add("countryCode");
    openapiFields.add("dateOfBirth");
    openapiFields.add("dccQuote");
    openapiFields.add("deliveryAddress");
    openapiFields.add("deliveryDate");
    openapiFields.add("enableOneClick");
    openapiFields.add("enablePayOut");
    openapiFields.add("enableRecurring");
    openapiFields.add("entityType");
    openapiFields.add("fraudOffset");
    openapiFields.add("installments");
    openapiFields.add("lineItems");
    openapiFields.add("mandate");
    openapiFields.add("mcc");
    openapiFields.add("merchantAccount");
    openapiFields.add("merchantOrderReference");
    openapiFields.add("metadata");
    openapiFields.add("orderReference");
    openapiFields.add("origin");
    openapiFields.add("recurringExpiry");
    openapiFields.add("recurringFrequency");
    openapiFields.add("reference");
    openapiFields.add("returnUrl");
    openapiFields.add("riskData");
    openapiFields.add("sdkVersion");
    openapiFields.add("sessionValidity");
    openapiFields.add("shopperEmail");
    openapiFields.add("shopperIP");
    openapiFields.add("shopperInteraction");
    openapiFields.add("shopperLocale");
    openapiFields.add("shopperName");
    openapiFields.add("shopperReference");
    openapiFields.add("shopperStatement");
    openapiFields.add("socialSecurityNumber");
    openapiFields.add("splits");
    openapiFields.add("store");
    openapiFields.add("storePaymentMethod");
    openapiFields.add("telephoneNumber");
    openapiFields.add("threeDSAuthenticationOnly");
    openapiFields.add("token");
    openapiFields.add("trustedShopper");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("merchantAccount");
    openapiRequiredFields.add("reference");
    openapiRequiredFields.add("returnUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentSetupRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentSetupRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentSetupRequest is not found in the empty JSON string", PaymentSetupRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentSetupRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentSetupRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentSetupRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additionalAmount`
      if (jsonObj.get("additionalAmount") != null && !jsonObj.get("additionalAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("additionalAmount"));
      }
      // validate the optional field `additionalData`
      if (jsonObj.get("additionalData") != null && !jsonObj.get("additionalData").isJsonNull()) {
        BalanceCheckRequestAdditionalData.validateJsonElement(jsonObj.get("additionalData"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedPaymentMethods") != null && !jsonObj.get("allowedPaymentMethods").isJsonNull() && !jsonObj.get("allowedPaymentMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedPaymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("allowedPaymentMethods").toString()));
      }
      // validate the required field `amount`
      Amount.validateJsonElement(jsonObj.get("amount"));
      // validate the optional field `applicationInfo`
      if (jsonObj.get("applicationInfo") != null && !jsonObj.get("applicationInfo").isJsonNull()) {
        ApplicationInfo.validateJsonElement(jsonObj.get("applicationInfo"));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.get("billingAddress") != null && !jsonObj.get("billingAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("billingAddress"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("blockedPaymentMethods") != null && !jsonObj.get("blockedPaymentMethods").isJsonNull() && !jsonObj.get("blockedPaymentMethods").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockedPaymentMethods` to be an array in the JSON string but got `%s`", jsonObj.get("blockedPaymentMethods").toString()));
      }
      if ((jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) && !jsonObj.get("channel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channel").toString()));
      }
      // validate the optional field `channel`
      if (jsonObj.get("channel") != null && !jsonObj.get("channel").isJsonNull()) {
        ChannelEnum.validateJsonElement(jsonObj.get("channel"));
      }
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        Company.validateJsonElement(jsonObj.get("company"));
      }
      // validate the optional field `configuration`
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull()) {
        ModelConfiguration.validateJsonElement(jsonObj.get("configuration"));
      }
      if ((jsonObj.get("conversionId") != null && !jsonObj.get("conversionId").isJsonNull()) && !jsonObj.get("conversionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversionId").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `dccQuote`
      if (jsonObj.get("dccQuote") != null && !jsonObj.get("dccQuote").isJsonNull()) {
        ForexQuote.validateJsonElement(jsonObj.get("dccQuote"));
      }
      // validate the optional field `deliveryAddress`
      if (jsonObj.get("deliveryAddress") != null && !jsonObj.get("deliveryAddress").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("deliveryAddress"));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      // validate the optional field `installments`
      if (jsonObj.get("installments") != null && !jsonObj.get("installments").isJsonNull()) {
        Installments.validateJsonElement(jsonObj.get("installments"));
      }
      if (jsonObj.get("lineItems") != null && !jsonObj.get("lineItems").isJsonNull()) {
        JsonArray jsonArraylineItems = jsonObj.getAsJsonArray("lineItems");
        if (jsonArraylineItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("lineItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `lineItems` to be an array in the JSON string but got `%s`", jsonObj.get("lineItems").toString()));
          }

          // validate the optional field `lineItems` (array)
          for (int i = 0; i < jsonArraylineItems.size(); i++) {
            LineItem.validateJsonElement(jsonArraylineItems.get(i));
          };
        }
      }
      // validate the optional field `mandate`
      if (jsonObj.get("mandate") != null && !jsonObj.get("mandate").isJsonNull()) {
        Mandate.validateJsonElement(jsonObj.get("mandate"));
      }
      if ((jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonNull()) && !jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if (!jsonObj.get("merchantAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAccount").toString()));
      }
      if ((jsonObj.get("merchantOrderReference") != null && !jsonObj.get("merchantOrderReference").isJsonNull()) && !jsonObj.get("merchantOrderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantOrderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantOrderReference").toString()));
      }
      if ((jsonObj.get("orderReference") != null && !jsonObj.get("orderReference").isJsonNull()) && !jsonObj.get("orderReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderReference").toString()));
      }
      if ((jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) && !jsonObj.get("origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("recurringExpiry") != null && !jsonObj.get("recurringExpiry").isJsonNull()) && !jsonObj.get("recurringExpiry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurringExpiry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurringExpiry").toString()));
      }
      if ((jsonObj.get("recurringFrequency") != null && !jsonObj.get("recurringFrequency").isJsonNull()) && !jsonObj.get("recurringFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurringFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurringFrequency").toString()));
      }
      if (!jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if (!jsonObj.get("returnUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `returnUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("returnUrl").toString()));
      }
      // validate the optional field `riskData`
      if (jsonObj.get("riskData") != null && !jsonObj.get("riskData").isJsonNull()) {
        RiskData.validateJsonElement(jsonObj.get("riskData"));
      }
      if ((jsonObj.get("sdkVersion") != null && !jsonObj.get("sdkVersion").isJsonNull()) && !jsonObj.get("sdkVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkVersion").toString()));
      }
      if ((jsonObj.get("sessionValidity") != null && !jsonObj.get("sessionValidity").isJsonNull()) && !jsonObj.get("sessionValidity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sessionValidity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sessionValidity").toString()));
      }
      if ((jsonObj.get("shopperEmail") != null && !jsonObj.get("shopperEmail").isJsonNull()) && !jsonObj.get("shopperEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperEmail").toString()));
      }
      if ((jsonObj.get("shopperIP") != null && !jsonObj.get("shopperIP").isJsonNull()) && !jsonObj.get("shopperIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperIP").toString()));
      }
      if ((jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) && !jsonObj.get("shopperInteraction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperInteraction").toString()));
      }
      // validate the optional field `shopperInteraction`
      if (jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) {
        ShopperInteractionEnum.validateJsonElement(jsonObj.get("shopperInteraction"));
      }
      if ((jsonObj.get("shopperLocale") != null && !jsonObj.get("shopperLocale").isJsonNull()) && !jsonObj.get("shopperLocale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperLocale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperLocale").toString()));
      }
      // validate the optional field `shopperName`
      if (jsonObj.get("shopperName") != null && !jsonObj.get("shopperName").isJsonNull()) {
        Name.validateJsonElement(jsonObj.get("shopperName"));
      }
      if ((jsonObj.get("shopperReference") != null && !jsonObj.get("shopperReference").isJsonNull()) && !jsonObj.get("shopperReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperReference").toString()));
      }
      if ((jsonObj.get("shopperStatement") != null && !jsonObj.get("shopperStatement").isJsonNull()) && !jsonObj.get("shopperStatement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperStatement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperStatement").toString()));
      }
      if ((jsonObj.get("socialSecurityNumber") != null && !jsonObj.get("socialSecurityNumber").isJsonNull()) && !jsonObj.get("socialSecurityNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("socialSecurityNumber").toString()));
      }
      if (jsonObj.get("splits") != null && !jsonObj.get("splits").isJsonNull()) {
        JsonArray jsonArraysplits = jsonObj.getAsJsonArray("splits");
        if (jsonArraysplits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("splits").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `splits` to be an array in the JSON string but got `%s`", jsonObj.get("splits").toString()));
          }

          // validate the optional field `splits` (array)
          for (int i = 0; i < jsonArraysplits.size(); i++) {
            Split.validateJsonElement(jsonArraysplits.get(i));
          };
        }
      }
      if ((jsonObj.get("store") != null && !jsonObj.get("store").isJsonNull()) && !jsonObj.get("store").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store").toString()));
      }
      if ((jsonObj.get("telephoneNumber") != null && !jsonObj.get("telephoneNumber").isJsonNull()) && !jsonObj.get("telephoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("telephoneNumber").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentSetupRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentSetupRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentSetupRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentSetupRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentSetupRequest>() {
           @Override
           public void write(JsonWriter out, PaymentSetupRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentSetupRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentSetupRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentSetupRequest
   * @throws IOException if the JSON string is invalid with respect to PaymentSetupRequest
   */
  public static PaymentSetupRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentSetupRequest.class);
  }

  /**
   * Convert an instance of PaymentSetupRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

