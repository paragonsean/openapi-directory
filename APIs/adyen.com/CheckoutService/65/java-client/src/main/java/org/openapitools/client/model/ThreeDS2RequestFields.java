/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceRenderOptions;
import org.openapitools.client.model.SDKEphemPubKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ThreeDS2RequestFields
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:58.142349-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ThreeDS2RequestFields {
  public static final String SERIALIZED_NAME_ACQUIRER_B_I_N = "acquirerBIN";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_B_I_N)
  private String acquirerBIN;

  public static final String SERIALIZED_NAME_ACQUIRER_MERCHANT_I_D = "acquirerMerchantID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_MERCHANT_I_D)
  private String acquirerMerchantID;

  public static final String SERIALIZED_NAME_AUTHENTICATION_ONLY = "authenticationOnly";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_ONLY)
  private Boolean authenticationOnly = false;

  /**
   * Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
   */
  @JsonAdapter(ChallengeIndicatorEnum.Adapter.class)
  public enum ChallengeIndicatorEnum {
    NO_PREFERENCE("noPreference"),
    
    REQUEST_NO_CHALLENGE("requestNoChallenge"),
    
    REQUEST_CHALLENGE("requestChallenge"),
    
    REQUEST_CHALLENGE_AS_MANDATE("requestChallengeAsMandate");

    private String value;

    ChallengeIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChallengeIndicatorEnum fromValue(String value) {
      for (ChallengeIndicatorEnum b : ChallengeIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChallengeIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChallengeIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChallengeIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChallengeIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChallengeIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHALLENGE_INDICATOR = "challengeIndicator";
  @SerializedName(SERIALIZED_NAME_CHALLENGE_INDICATOR)
  private ChallengeIndicatorEnum challengeIndicator;

  public static final String SERIALIZED_NAME_DEVICE_RENDER_OPTIONS = "deviceRenderOptions";
  @SerializedName(SERIALIZED_NAME_DEVICE_RENDER_OPTIONS)
  private DeviceRenderOptions deviceRenderOptions;

  public static final String SERIALIZED_NAME_MCC = "mcc";
  @SerializedName(SERIALIZED_NAME_MCC)
  private String mcc;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_MESSAGE_VERSION = "messageVersion";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VERSION)
  private String messageVersion;

  public static final String SERIALIZED_NAME_NOTIFICATION_U_R_L = "notificationURL";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_U_R_L)
  private String notificationURL;

  /**
   * The platform of the shopper. Allowed values: * &#x60;iOS&#x60; * &#x60;android&#x60; * &#x60;browser&#x60;
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    I_OS("iOS"),
    
    ANDROID("android"),
    
    BROWSER("browser");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  public static final String SERIALIZED_NAME_SDK_APP_I_D = "sdkAppID";
  @SerializedName(SERIALIZED_NAME_SDK_APP_I_D)
  private String sdkAppID;

  public static final String SERIALIZED_NAME_SDK_EPHEM_PUB_KEY = "sdkEphemPubKey";
  @SerializedName(SERIALIZED_NAME_SDK_EPHEM_PUB_KEY)
  private SDKEphemPubKey sdkEphemPubKey;

  public static final String SERIALIZED_NAME_SDK_MAX_TIMEOUT = "sdkMaxTimeout";
  @SerializedName(SERIALIZED_NAME_SDK_MAX_TIMEOUT)
  private Integer sdkMaxTimeout = 60;

  public static final String SERIALIZED_NAME_SDK_REFERENCE_NUMBER = "sdkReferenceNumber";
  @SerializedName(SERIALIZED_NAME_SDK_REFERENCE_NUMBER)
  private String sdkReferenceNumber;

  public static final String SERIALIZED_NAME_SDK_TRANS_I_D = "sdkTransID";
  @SerializedName(SERIALIZED_NAME_SDK_TRANS_I_D)
  private String sdkTransID;

  public static final String SERIALIZED_NAME_THREE_D_S_COMP_IND = "threeDSCompInd";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_COMP_IND)
  private String threeDSCompInd;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_I_D = "threeDSRequestorID";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_I_D)
  private String threeDSRequestorID;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_NAME = "threeDSRequestorName";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_NAME)
  private String threeDSRequestorName;

  public static final String SERIALIZED_NAME_THREE_D_S_REQUESTOR_U_R_L = "threeDSRequestorURL";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_REQUESTOR_U_R_L)
  private String threeDSRequestorURL;

  /**
   * Identify the type of the transaction being authenticated.
   */
  @JsonAdapter(TransactionTypeEnum.Adapter.class)
  public enum TransactionTypeEnum {
    GOODS_OR_SERVICE_PURCHASE("goodsOrServicePurchase"),
    
    CHECK_ACCEPTANCE("checkAcceptance"),
    
    ACCOUNT_FUNDING("accountFunding"),
    
    QUASI_CASH_TRANSACTION("quasiCashTransaction"),
    
    PREPAID_ACTIVATION_AND_LOAD("prepaidActivationAndLoad");

    private String value;

    TransactionTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TransactionTypeEnum fromValue(String value) {
      for (TransactionTypeEnum b : TransactionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TransactionTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransactionTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TransactionTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TransactionTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TransactionTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRANSACTION_TYPE = "transactionType";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TYPE)
  private TransactionTypeEnum transactionType;

  public static final String SERIALIZED_NAME_WHITE_LIST_STATUS = "whiteListStatus";
  @SerializedName(SERIALIZED_NAME_WHITE_LIST_STATUS)
  private String whiteListStatus;

  public ThreeDS2RequestFields() {
  }

  public ThreeDS2RequestFields acquirerBIN(String acquirerBIN) {
    this.acquirerBIN = acquirerBIN;
    return this;
  }

  /**
   * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
   * @return acquirerBIN
   */
  @javax.annotation.Nullable
  public String getAcquirerBIN() {
    return acquirerBIN;
  }

  public void setAcquirerBIN(String acquirerBIN) {
    this.acquirerBIN = acquirerBIN;
  }


  public ThreeDS2RequestFields acquirerMerchantID(String acquirerMerchantID) {
    this.acquirerMerchantID = acquirerMerchantID;
    return this;
  }

  /**
   * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant&#39;s acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
   * @return acquirerMerchantID
   */
  @javax.annotation.Nullable
  public String getAcquirerMerchantID() {
    return acquirerMerchantID;
  }

  public void setAcquirerMerchantID(String acquirerMerchantID) {
    this.acquirerMerchantID = acquirerMerchantID;
  }


  @Deprecated
  public ThreeDS2RequestFields authenticationOnly(Boolean authenticationOnly) {
    this.authenticationOnly = authenticationOnly;
    return this;
  }

  /**
   * If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
   * @return authenticationOnly
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAuthenticationOnly() {
    return authenticationOnly;
  }

  @Deprecated
  public void setAuthenticationOnly(Boolean authenticationOnly) {
    this.authenticationOnly = authenticationOnly;
  }


  public ThreeDS2RequestFields challengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    this.challengeIndicator = challengeIndicator;
    return this;
  }

  /**
   * Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * &#x60;noPreference&#x60; * &#x60;requestNoChallenge&#x60; * &#x60;requestChallenge&#x60; * &#x60;requestChallengeAsMandate&#x60; 
   * @return challengeIndicator
   */
  @javax.annotation.Nullable
  public ChallengeIndicatorEnum getChallengeIndicator() {
    return challengeIndicator;
  }

  public void setChallengeIndicator(ChallengeIndicatorEnum challengeIndicator) {
    this.challengeIndicator = challengeIndicator;
  }


  public ThreeDS2RequestFields deviceRenderOptions(DeviceRenderOptions deviceRenderOptions) {
    this.deviceRenderOptions = deviceRenderOptions;
    return this;
  }

  /**
   * Display options for the 3D Secure 2 SDK. Optional and only for &#x60;deviceChannel&#x60; **app**.
   * @return deviceRenderOptions
   */
  @javax.annotation.Nullable
  public DeviceRenderOptions getDeviceRenderOptions() {
    return deviceRenderOptions;
  }

  public void setDeviceRenderOptions(DeviceRenderOptions deviceRenderOptions) {
    this.deviceRenderOptions = deviceRenderOptions;
  }


  public ThreeDS2RequestFields mcc(String mcc) {
    this.mcc = mcc;
    return this;
  }

  /**
   * Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The &#x60;mcc&#x60; is a four-digit code with which the previously given &#x60;acquirerMerchantID&#x60; is registered at the scheme.
   * @return mcc
   */
  @javax.annotation.Nullable
  public String getMcc() {
    return mcc;
  }

  public void setMcc(String mcc) {
    this.mcc = mcc;
  }


  public ThreeDS2RequestFields merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. &gt; Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
   * @return merchantName
   */
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public ThreeDS2RequestFields messageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
    return this;
  }

  /**
   * The &#x60;messageVersion&#x60; value indicating the 3D Secure 2 protocol version.
   * @return messageVersion
   */
  @javax.annotation.Nullable
  public String getMessageVersion() {
    return messageVersion;
  }

  public void setMessageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
  }


  public ThreeDS2RequestFields notificationURL(String notificationURL) {
    this.notificationURL = notificationURL;
    return this;
  }

  /**
   * URL to where the issuer should send the &#x60;CRes&#x60;. Required if you are not using components for &#x60;channel&#x60; **Web** or if you are using classic integration &#x60;deviceChannel&#x60; **browser**.
   * @return notificationURL
   */
  @javax.annotation.Nullable
  public String getNotificationURL() {
    return notificationURL;
  }

  public void setNotificationURL(String notificationURL) {
    this.notificationURL = notificationURL;
  }


  public ThreeDS2RequestFields platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * The platform of the shopper. Allowed values: * &#x60;iOS&#x60; * &#x60;android&#x60; * &#x60;browser&#x60;
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public ThreeDS2RequestFields sdkAppID(String sdkAppID) {
    this.sdkAppID = sdkAppID;
    return this;
  }

  /**
   * The &#x60;sdkAppID&#x60; value as received from the 3D Secure 2 SDK.
   * @return sdkAppID
   */
  @javax.annotation.Nullable
  public String getSdkAppID() {
    return sdkAppID;
  }

  public void setSdkAppID(String sdkAppID) {
    this.sdkAppID = sdkAppID;
  }


  public ThreeDS2RequestFields sdkEphemPubKey(SDKEphemPubKey sdkEphemPubKey) {
    this.sdkEphemPubKey = sdkEphemPubKey;
    return this;
  }

  /**
   * The &#x60;sdkEphemPubKey&#x60; value as received from the 3D Secure 2 SDK.
   * @return sdkEphemPubKey
   */
  @javax.annotation.Nullable
  public SDKEphemPubKey getSdkEphemPubKey() {
    return sdkEphemPubKey;
  }

  public void setSdkEphemPubKey(SDKEphemPubKey sdkEphemPubKey) {
    this.sdkEphemPubKey = sdkEphemPubKey;
  }


  public ThreeDS2RequestFields sdkMaxTimeout(Integer sdkMaxTimeout) {
    this.sdkMaxTimeout = sdkMaxTimeout;
    return this;
  }

  /**
   * The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for &#x60;deviceChannel&#x60; set to **app**. Defaults to **60** minutes.
   * @return sdkMaxTimeout
   */
  @javax.annotation.Nullable
  public Integer getSdkMaxTimeout() {
    return sdkMaxTimeout;
  }

  public void setSdkMaxTimeout(Integer sdkMaxTimeout) {
    this.sdkMaxTimeout = sdkMaxTimeout;
  }


  public ThreeDS2RequestFields sdkReferenceNumber(String sdkReferenceNumber) {
    this.sdkReferenceNumber = sdkReferenceNumber;
    return this;
  }

  /**
   * The &#x60;sdkReferenceNumber&#x60; value as received from the 3D Secure 2 SDK.
   * @return sdkReferenceNumber
   */
  @javax.annotation.Nullable
  public String getSdkReferenceNumber() {
    return sdkReferenceNumber;
  }

  public void setSdkReferenceNumber(String sdkReferenceNumber) {
    this.sdkReferenceNumber = sdkReferenceNumber;
  }


  public ThreeDS2RequestFields sdkTransID(String sdkTransID) {
    this.sdkTransID = sdkTransID;
    return this;
  }

  /**
   * The &#x60;sdkTransID&#x60; value as received from the 3D Secure 2 SDK.
   * @return sdkTransID
   */
  @javax.annotation.Nullable
  public String getSdkTransID() {
    return sdkTransID;
  }

  public void setSdkTransID(String sdkTransID) {
    this.sdkTransID = sdkTransID;
  }


  public ThreeDS2RequestFields threeDSCompInd(String threeDSCompInd) {
    this.threeDSCompInd = threeDSCompInd;
    return this;
  }

  /**
   * Completion indicator for the device fingerprinting.
   * @return threeDSCompInd
   */
  @javax.annotation.Nullable
  public String getThreeDSCompInd() {
    return threeDSCompInd;
  }

  public void setThreeDSCompInd(String threeDSCompInd) {
    this.threeDSCompInd = threeDSCompInd;
  }


  public ThreeDS2RequestFields threeDSRequestorID(String threeDSRequestorID) {
    this.threeDSRequestorID = threeDSRequestorID;
    return this;
  }

  /**
   * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
   * @return threeDSRequestorID
   */
  @javax.annotation.Nullable
  public String getThreeDSRequestorID() {
    return threeDSRequestorID;
  }

  public void setThreeDSRequestorID(String threeDSRequestorID) {
    this.threeDSRequestorID = threeDSRequestorID;
  }


  public ThreeDS2RequestFields threeDSRequestorName(String threeDSRequestorName) {
    this.threeDSRequestorName = threeDSRequestorName;
    return this;
  }

  /**
   * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
   * @return threeDSRequestorName
   */
  @javax.annotation.Nullable
  public String getThreeDSRequestorName() {
    return threeDSRequestorName;
  }

  public void setThreeDSRequestorName(String threeDSRequestorName) {
    this.threeDSRequestorName = threeDSRequestorName;
  }


  public ThreeDS2RequestFields threeDSRequestorURL(String threeDSRequestorURL) {
    this.threeDSRequestorURL = threeDSRequestorURL;
    return this;
  }

  /**
   * URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
   * @return threeDSRequestorURL
   */
  @javax.annotation.Nullable
  public String getThreeDSRequestorURL() {
    return threeDSRequestorURL;
  }

  public void setThreeDSRequestorURL(String threeDSRequestorURL) {
    this.threeDSRequestorURL = threeDSRequestorURL;
  }


  public ThreeDS2RequestFields transactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  /**
   * Identify the type of the transaction being authenticated.
   * @return transactionType
   */
  @javax.annotation.Nullable
  public TransactionTypeEnum getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypeEnum transactionType) {
    this.transactionType = transactionType;
  }


  public ThreeDS2RequestFields whiteListStatus(String whiteListStatus) {
    this.whiteListStatus = whiteListStatus;
    return this;
  }

  /**
   * The &#x60;whiteListStatus&#x60; value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
   * @return whiteListStatus
   */
  @javax.annotation.Nullable
  public String getWhiteListStatus() {
    return whiteListStatus;
  }

  public void setWhiteListStatus(String whiteListStatus) {
    this.whiteListStatus = whiteListStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThreeDS2RequestFields threeDS2RequestFields = (ThreeDS2RequestFields) o;
    return Objects.equals(this.acquirerBIN, threeDS2RequestFields.acquirerBIN) &&
        Objects.equals(this.acquirerMerchantID, threeDS2RequestFields.acquirerMerchantID) &&
        Objects.equals(this.authenticationOnly, threeDS2RequestFields.authenticationOnly) &&
        Objects.equals(this.challengeIndicator, threeDS2RequestFields.challengeIndicator) &&
        Objects.equals(this.deviceRenderOptions, threeDS2RequestFields.deviceRenderOptions) &&
        Objects.equals(this.mcc, threeDS2RequestFields.mcc) &&
        Objects.equals(this.merchantName, threeDS2RequestFields.merchantName) &&
        Objects.equals(this.messageVersion, threeDS2RequestFields.messageVersion) &&
        Objects.equals(this.notificationURL, threeDS2RequestFields.notificationURL) &&
        Objects.equals(this.platform, threeDS2RequestFields.platform) &&
        Objects.equals(this.sdkAppID, threeDS2RequestFields.sdkAppID) &&
        Objects.equals(this.sdkEphemPubKey, threeDS2RequestFields.sdkEphemPubKey) &&
        Objects.equals(this.sdkMaxTimeout, threeDS2RequestFields.sdkMaxTimeout) &&
        Objects.equals(this.sdkReferenceNumber, threeDS2RequestFields.sdkReferenceNumber) &&
        Objects.equals(this.sdkTransID, threeDS2RequestFields.sdkTransID) &&
        Objects.equals(this.threeDSCompInd, threeDS2RequestFields.threeDSCompInd) &&
        Objects.equals(this.threeDSRequestorID, threeDS2RequestFields.threeDSRequestorID) &&
        Objects.equals(this.threeDSRequestorName, threeDS2RequestFields.threeDSRequestorName) &&
        Objects.equals(this.threeDSRequestorURL, threeDS2RequestFields.threeDSRequestorURL) &&
        Objects.equals(this.transactionType, threeDS2RequestFields.transactionType) &&
        Objects.equals(this.whiteListStatus, threeDS2RequestFields.whiteListStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerBIN, acquirerMerchantID, authenticationOnly, challengeIndicator, deviceRenderOptions, mcc, merchantName, messageVersion, notificationURL, platform, sdkAppID, sdkEphemPubKey, sdkMaxTimeout, sdkReferenceNumber, sdkTransID, threeDSCompInd, threeDSRequestorID, threeDSRequestorName, threeDSRequestorURL, transactionType, whiteListStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThreeDS2RequestFields {\n");
    sb.append("    acquirerBIN: ").append(toIndentedString(acquirerBIN)).append("\n");
    sb.append("    acquirerMerchantID: ").append(toIndentedString(acquirerMerchantID)).append("\n");
    sb.append("    authenticationOnly: ").append(toIndentedString(authenticationOnly)).append("\n");
    sb.append("    challengeIndicator: ").append(toIndentedString(challengeIndicator)).append("\n");
    sb.append("    deviceRenderOptions: ").append(toIndentedString(deviceRenderOptions)).append("\n");
    sb.append("    mcc: ").append(toIndentedString(mcc)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    notificationURL: ").append(toIndentedString(notificationURL)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    sdkAppID: ").append(toIndentedString(sdkAppID)).append("\n");
    sb.append("    sdkEphemPubKey: ").append(toIndentedString(sdkEphemPubKey)).append("\n");
    sb.append("    sdkMaxTimeout: ").append(toIndentedString(sdkMaxTimeout)).append("\n");
    sb.append("    sdkReferenceNumber: ").append(toIndentedString(sdkReferenceNumber)).append("\n");
    sb.append("    sdkTransID: ").append(toIndentedString(sdkTransID)).append("\n");
    sb.append("    threeDSCompInd: ").append(toIndentedString(threeDSCompInd)).append("\n");
    sb.append("    threeDSRequestorID: ").append(toIndentedString(threeDSRequestorID)).append("\n");
    sb.append("    threeDSRequestorName: ").append(toIndentedString(threeDSRequestorName)).append("\n");
    sb.append("    threeDSRequestorURL: ").append(toIndentedString(threeDSRequestorURL)).append("\n");
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    whiteListStatus: ").append(toIndentedString(whiteListStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acquirerBIN");
    openapiFields.add("acquirerMerchantID");
    openapiFields.add("authenticationOnly");
    openapiFields.add("challengeIndicator");
    openapiFields.add("deviceRenderOptions");
    openapiFields.add("mcc");
    openapiFields.add("merchantName");
    openapiFields.add("messageVersion");
    openapiFields.add("notificationURL");
    openapiFields.add("platform");
    openapiFields.add("sdkAppID");
    openapiFields.add("sdkEphemPubKey");
    openapiFields.add("sdkMaxTimeout");
    openapiFields.add("sdkReferenceNumber");
    openapiFields.add("sdkTransID");
    openapiFields.add("threeDSCompInd");
    openapiFields.add("threeDSRequestorID");
    openapiFields.add("threeDSRequestorName");
    openapiFields.add("threeDSRequestorURL");
    openapiFields.add("transactionType");
    openapiFields.add("whiteListStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ThreeDS2RequestFields
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ThreeDS2RequestFields.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ThreeDS2RequestFields is not found in the empty JSON string", ThreeDS2RequestFields.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ThreeDS2RequestFields.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ThreeDS2RequestFields` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acquirerBIN") != null && !jsonObj.get("acquirerBIN").isJsonNull()) && !jsonObj.get("acquirerBIN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerBIN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerBIN").toString()));
      }
      if ((jsonObj.get("acquirerMerchantID") != null && !jsonObj.get("acquirerMerchantID").isJsonNull()) && !jsonObj.get("acquirerMerchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acquirerMerchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acquirerMerchantID").toString()));
      }
      if ((jsonObj.get("challengeIndicator") != null && !jsonObj.get("challengeIndicator").isJsonNull()) && !jsonObj.get("challengeIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `challengeIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("challengeIndicator").toString()));
      }
      // validate the optional field `challengeIndicator`
      if (jsonObj.get("challengeIndicator") != null && !jsonObj.get("challengeIndicator").isJsonNull()) {
        ChallengeIndicatorEnum.validateJsonElement(jsonObj.get("challengeIndicator"));
      }
      // validate the optional field `deviceRenderOptions`
      if (jsonObj.get("deviceRenderOptions") != null && !jsonObj.get("deviceRenderOptions").isJsonNull()) {
        DeviceRenderOptions.validateJsonElement(jsonObj.get("deviceRenderOptions"));
      }
      if ((jsonObj.get("mcc") != null && !jsonObj.get("mcc").isJsonNull()) && !jsonObj.get("mcc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mcc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mcc").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if ((jsonObj.get("messageVersion") != null && !jsonObj.get("messageVersion").isJsonNull()) && !jsonObj.get("messageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageVersion").toString()));
      }
      if ((jsonObj.get("notificationURL") != null && !jsonObj.get("notificationURL").isJsonNull()) && !jsonObj.get("notificationURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationURL").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("sdkAppID") != null && !jsonObj.get("sdkAppID").isJsonNull()) && !jsonObj.get("sdkAppID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkAppID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkAppID").toString()));
      }
      // validate the optional field `sdkEphemPubKey`
      if (jsonObj.get("sdkEphemPubKey") != null && !jsonObj.get("sdkEphemPubKey").isJsonNull()) {
        SDKEphemPubKey.validateJsonElement(jsonObj.get("sdkEphemPubKey"));
      }
      if ((jsonObj.get("sdkReferenceNumber") != null && !jsonObj.get("sdkReferenceNumber").isJsonNull()) && !jsonObj.get("sdkReferenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkReferenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkReferenceNumber").toString()));
      }
      if ((jsonObj.get("sdkTransID") != null && !jsonObj.get("sdkTransID").isJsonNull()) && !jsonObj.get("sdkTransID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkTransID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkTransID").toString()));
      }
      if ((jsonObj.get("threeDSCompInd") != null && !jsonObj.get("threeDSCompInd").isJsonNull()) && !jsonObj.get("threeDSCompInd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSCompInd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSCompInd").toString()));
      }
      if ((jsonObj.get("threeDSRequestorID") != null && !jsonObj.get("threeDSRequestorID").isJsonNull()) && !jsonObj.get("threeDSRequestorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorID").toString()));
      }
      if ((jsonObj.get("threeDSRequestorName") != null && !jsonObj.get("threeDSRequestorName").isJsonNull()) && !jsonObj.get("threeDSRequestorName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorName").toString()));
      }
      if ((jsonObj.get("threeDSRequestorURL") != null && !jsonObj.get("threeDSRequestorURL").isJsonNull()) && !jsonObj.get("threeDSRequestorURL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSRequestorURL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSRequestorURL").toString()));
      }
      if ((jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) && !jsonObj.get("transactionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionType").toString()));
      }
      // validate the optional field `transactionType`
      if (jsonObj.get("transactionType") != null && !jsonObj.get("transactionType").isJsonNull()) {
        TransactionTypeEnum.validateJsonElement(jsonObj.get("transactionType"));
      }
      if ((jsonObj.get("whiteListStatus") != null && !jsonObj.get("whiteListStatus").isJsonNull()) && !jsonObj.get("whiteListStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `whiteListStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("whiteListStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ThreeDS2RequestFields.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ThreeDS2RequestFields' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ThreeDS2RequestFields> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ThreeDS2RequestFields.class));

       return (TypeAdapter<T>) new TypeAdapter<ThreeDS2RequestFields>() {
           @Override
           public void write(JsonWriter out, ThreeDS2RequestFields value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ThreeDS2RequestFields read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ThreeDS2RequestFields given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ThreeDS2RequestFields
   * @throws IOException if the JSON string is invalid with respect to ThreeDS2RequestFields
   */
  public static ThreeDS2RequestFields fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ThreeDS2RequestFields.class);
  }

  /**
   * Convert an instance of ThreeDS2RequestFields to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

