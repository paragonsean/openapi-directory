/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.InstallmentOption;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.RiskData;
import org.openapitools.client.model.Split;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentLinkResponse
 */
public class PaymentLinkResponseTest {
    private final PaymentLinkResponse model = new PaymentLinkResponse();

    /**
     * Model tests for PaymentLinkResponse
     */
    @Test
    public void testPaymentLinkResponse() {
        // TODO: test PaymentLinkResponse
    }

    /**
     * Test the property 'allowedPaymentMethods'
     */
    @Test
    public void allowedPaymentMethodsTest() {
        // TODO: test allowedPaymentMethods
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'applicationInfo'
     */
    @Test
    public void applicationInfoTest() {
        // TODO: test applicationInfo
    }

    /**
     * Test the property 'billingAddress'
     */
    @Test
    public void billingAddressTest() {
        // TODO: test billingAddress
    }

    /**
     * Test the property 'blockedPaymentMethods'
     */
    @Test
    public void blockedPaymentMethodsTest() {
        // TODO: test blockedPaymentMethods
    }

    /**
     * Test the property 'countryCode'
     */
    @Test
    public void countryCodeTest() {
        // TODO: test countryCode
    }

    /**
     * Test the property 'deliverAt'
     */
    @Test
    public void deliverAtTest() {
        // TODO: test deliverAt
    }

    /**
     * Test the property 'deliveryAddress'
     */
    @Test
    public void deliveryAddressTest() {
        // TODO: test deliveryAddress
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'expiresAt'
     */
    @Test
    public void expiresAtTest() {
        // TODO: test expiresAt
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'installmentOptions'
     */
    @Test
    public void installmentOptionsTest() {
        // TODO: test installmentOptions
    }

    /**
     * Test the property 'lineItems'
     */
    @Test
    public void lineItemsTest() {
        // TODO: test lineItems
    }

    /**
     * Test the property 'manualCapture'
     */
    @Test
    public void manualCaptureTest() {
        // TODO: test manualCapture
    }

    /**
     * Test the property 'merchantAccount'
     */
    @Test
    public void merchantAccountTest() {
        // TODO: test merchantAccount
    }

    /**
     * Test the property 'merchantOrderReference'
     */
    @Test
    public void merchantOrderReferenceTest() {
        // TODO: test merchantOrderReference
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'recurringProcessingModel'
     */
    @Test
    public void recurringProcessingModelTest() {
        // TODO: test recurringProcessingModel
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'returnUrl'
     */
    @Test
    public void returnUrlTest() {
        // TODO: test returnUrl
    }

    /**
     * Test the property 'reusable'
     */
    @Test
    public void reusableTest() {
        // TODO: test reusable
    }

    /**
     * Test the property 'riskData'
     */
    @Test
    public void riskDataTest() {
        // TODO: test riskData
    }

    /**
     * Test the property 'shopperEmail'
     */
    @Test
    public void shopperEmailTest() {
        // TODO: test shopperEmail
    }

    /**
     * Test the property 'shopperLocale'
     */
    @Test
    public void shopperLocaleTest() {
        // TODO: test shopperLocale
    }

    /**
     * Test the property 'shopperName'
     */
    @Test
    public void shopperNameTest() {
        // TODO: test shopperName
    }

    /**
     * Test the property 'shopperReference'
     */
    @Test
    public void shopperReferenceTest() {
        // TODO: test shopperReference
    }

    /**
     * Test the property 'showRemovePaymentMethodButton'
     */
    @Test
    public void showRemovePaymentMethodButtonTest() {
        // TODO: test showRemovePaymentMethodButton
    }

    /**
     * Test the property 'splits'
     */
    @Test
    public void splitsTest() {
        // TODO: test splits
    }

    /**
     * Test the property 'status'
     */
    @Test
    public void statusTest() {
        // TODO: test status
    }

    /**
     * Test the property 'store'
     */
    @Test
    public void storeTest() {
        // TODO: test store
    }

    /**
     * Test the property 'storePaymentMethod'
     */
    @Test
    public void storePaymentMethodTest() {
        // TODO: test storePaymentMethod
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    public void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

}
