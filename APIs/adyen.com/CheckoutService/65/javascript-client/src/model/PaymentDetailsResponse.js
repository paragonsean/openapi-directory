/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import BalanceCheckResponseAdditionalData from './BalanceCheckResponseAdditionalData';
import CheckoutOrderResponse from './CheckoutOrderResponse';
import FraudResult from './FraudResult';
import InputDetail from './InputDetail';
import PaymentDetailsResponseAction from './PaymentDetailsResponseAction';
import Redirect from './Redirect';
import ThreeDS2Result from './ThreeDS2Result';

/**
 * The PaymentDetailsResponse model module.
 * @module model/PaymentDetailsResponse
 * @version 65
 */
class PaymentDetailsResponse {
    /**
     * Constructs a new <code>PaymentDetailsResponse</code>.
     * @alias module:model/PaymentDetailsResponse
     */
    constructor() { 
        
        PaymentDetailsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PaymentDetailsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentDetailsResponse} obj Optional instance to populate.
     * @return {module:model/PaymentDetailsResponse} The populated <code>PaymentDetailsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentDetailsResponse();

            if (data.hasOwnProperty('action')) {
                obj['action'] = PaymentDetailsResponseAction.constructFromObject(data['action']);
            }
            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = BalanceCheckResponseAdditionalData.constructFromObject(data['additionalData']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('authentication')) {
                obj['authentication'] = ApiClient.convertToType(data['authentication'], {'String': 'String'});
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], [InputDetail]);
            }
            if (data.hasOwnProperty('fraudResult')) {
                obj['fraudResult'] = FraudResult.constructFromObject(data['fraudResult']);
            }
            if (data.hasOwnProperty('merchantReference')) {
                obj['merchantReference'] = ApiClient.convertToType(data['merchantReference'], 'String');
            }
            if (data.hasOwnProperty('order')) {
                obj['order'] = CheckoutOrderResponse.constructFromObject(data['order']);
            }
            if (data.hasOwnProperty('outputDetails')) {
                obj['outputDetails'] = ApiClient.convertToType(data['outputDetails'], {'String': 'String'});
            }
            if (data.hasOwnProperty('paymentData')) {
                obj['paymentData'] = ApiClient.convertToType(data['paymentData'], 'String');
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('redirect')) {
                obj['redirect'] = Redirect.constructFromObject(data['redirect']);
            }
            if (data.hasOwnProperty('refusalReason')) {
                obj['refusalReason'] = ApiClient.convertToType(data['refusalReason'], 'String');
            }
            if (data.hasOwnProperty('refusalReasonCode')) {
                obj['refusalReasonCode'] = ApiClient.convertToType(data['refusalReasonCode'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('shopperLocale')) {
                obj['shopperLocale'] = ApiClient.convertToType(data['shopperLocale'], 'String');
            }
            if (data.hasOwnProperty('threeDS2Result')) {
                obj['threeDS2Result'] = ThreeDS2Result.constructFromObject(data['threeDS2Result']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentDetailsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentDetailsResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `action`
        if (data['action']) { // data not null
          PaymentDetailsResponseAction.validateJSON(data['action']);
        }
        // validate the optional field `additionalData`
        if (data['additionalData']) { // data not null
          BalanceCheckResponseAdditionalData.validateJSON(data['additionalData']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        if (data['details']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['details'])) {
                throw new Error("Expected the field `details` to be an array in the JSON data but got " + data['details']);
            }
            // validate the optional field `details` (array)
            for (const item of data['details']) {
                InputDetail.validateJSON(item);
            };
        }
        // validate the optional field `fraudResult`
        if (data['fraudResult']) { // data not null
          FraudResult.validateJSON(data['fraudResult']);
        }
        // ensure the json data is a string
        if (data['merchantReference'] && !(typeof data['merchantReference'] === 'string' || data['merchantReference'] instanceof String)) {
            throw new Error("Expected the field `merchantReference` to be a primitive type in the JSON string but got " + data['merchantReference']);
        }
        // validate the optional field `order`
        if (data['order']) { // data not null
          CheckoutOrderResponse.validateJSON(data['order']);
        }
        // ensure the json data is a string
        if (data['paymentData'] && !(typeof data['paymentData'] === 'string' || data['paymentData'] instanceof String)) {
            throw new Error("Expected the field `paymentData` to be a primitive type in the JSON string but got " + data['paymentData']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // validate the optional field `redirect`
        if (data['redirect']) { // data not null
          Redirect.validateJSON(data['redirect']);
        }
        // ensure the json data is a string
        if (data['refusalReason'] && !(typeof data['refusalReason'] === 'string' || data['refusalReason'] instanceof String)) {
            throw new Error("Expected the field `refusalReason` to be a primitive type in the JSON string but got " + data['refusalReason']);
        }
        // ensure the json data is a string
        if (data['refusalReasonCode'] && !(typeof data['refusalReasonCode'] === 'string' || data['refusalReasonCode'] instanceof String)) {
            throw new Error("Expected the field `refusalReasonCode` to be a primitive type in the JSON string but got " + data['refusalReasonCode']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }
        // ensure the json data is a string
        if (data['shopperLocale'] && !(typeof data['shopperLocale'] === 'string' || data['shopperLocale'] instanceof String)) {
            throw new Error("Expected the field `shopperLocale` to be a primitive type in the JSON string but got " + data['shopperLocale']);
        }
        // validate the optional field `threeDS2Result`
        if (data['threeDS2Result']) { // data not null
          ThreeDS2Result.validateJSON(data['threeDS2Result']);
        }

        return true;
    }


}



/**
 * @member {module:model/PaymentDetailsResponseAction} action
 */
PaymentDetailsResponse.prototype['action'] = undefined;

/**
 * @member {module:model/BalanceCheckResponseAdditionalData} additionalData
 */
PaymentDetailsResponse.prototype['additionalData'] = undefined;

/**
 * Authorised amount in the transaction.
 * @member {module:model/Amount} amount
 */
PaymentDetailsResponse.prototype['amount'] = undefined;

/**
 * Contains `threeds2.fingerprint` or `threeds2.challengeToken` values to be used in further calls to `/payments/details` endpoint. 
 * @member {Object.<String, String>} authentication
 */
PaymentDetailsResponse.prototype['authentication'] = undefined;

/**
 * When non-empty, contains all the fields that you must submit to the `/payments/details` endpoint.
 * @member {Array.<module:model/InputDetail>} details
 */
PaymentDetailsResponse.prototype['details'] = undefined;

/**
 * The fraud result properties of the payment.
 * @member {module:model/FraudResult} fraudResult
 */
PaymentDetailsResponse.prototype['fraudResult'] = undefined;

/**
 * The reference used during the /payments request.
 * @member {String} merchantReference
 */
PaymentDetailsResponse.prototype['merchantReference'] = undefined;

/**
 * Contains updated information regarding the order in case order information was provided in the request.
 * @member {module:model/CheckoutOrderResponse} order
 */
PaymentDetailsResponse.prototype['order'] = undefined;

/**
 * Contains the details that will be presented to the shopper.
 * @member {Object.<String, String>} outputDetails
 */
PaymentDetailsResponse.prototype['outputDetails'] = undefined;

/**
 * When non-empty, contains a value that you must submit to the `/payments/details` endpoint.
 * @member {String} paymentData
 */
PaymentDetailsResponse.prototype['paymentData'] = undefined;

/**
 * Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
 * @member {String} pspReference
 */
PaymentDetailsResponse.prototype['pspReference'] = undefined;

/**
 * When the payment flow requires a redirect, this object contains information about the redirect URL.
 * @member {module:model/Redirect} redirect
 */
PaymentDetailsResponse.prototype['redirect'] = undefined;

/**
 * If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
 * @member {String} refusalReason
 */
PaymentDetailsResponse.prototype['refusalReason'] = undefined;

/**
 * Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).
 * @member {String} refusalReasonCode
 */
PaymentDetailsResponse.prototype['refusalReasonCode'] = undefined;

/**
 * The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.
 * @member {module:model/PaymentDetailsResponse.ResultCodeEnum} resultCode
 */
PaymentDetailsResponse.prototype['resultCode'] = undefined;

/**
 * The shopperLocale.
 * @member {String} shopperLocale
 */
PaymentDetailsResponse.prototype['shopperLocale'] = undefined;

/**
 * Result of the 3D Secure 2 authentication.
 * @member {module:model/ThreeDS2Result} threeDS2Result
 */
PaymentDetailsResponse.prototype['threeDS2Result'] = undefined;





/**
 * Allowed values for the <code>resultCode</code> property.
 * @enum {String}
 * @readonly
 */
PaymentDetailsResponse['ResultCodeEnum'] = {

    /**
     * value: "AuthenticationFinished"
     * @const
     */
    "AuthenticationFinished": "AuthenticationFinished",

    /**
     * value: "AuthenticationNotRequired"
     * @const
     */
    "AuthenticationNotRequired": "AuthenticationNotRequired",

    /**
     * value: "Authorised"
     * @const
     */
    "Authorised": "Authorised",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "ChallengeShopper"
     * @const
     */
    "ChallengeShopper": "ChallengeShopper",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "IdentifyShopper"
     * @const
     */
    "IdentifyShopper": "IdentifyShopper",

    /**
     * value: "PartiallyAuthorised"
     * @const
     */
    "PartiallyAuthorised": "PartiallyAuthorised",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "PresentToShopper"
     * @const
     */
    "PresentToShopper": "PresentToShopper",

    /**
     * value: "Received"
     * @const
     */
    "Received": "Received",

    /**
     * value: "RedirectShopper"
     * @const
     */
    "RedirectShopper": "RedirectShopper",

    /**
     * value: "Refused"
     * @const
     */
    "Refused": "Refused",

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success"
};



export default PaymentDetailsResponse;

