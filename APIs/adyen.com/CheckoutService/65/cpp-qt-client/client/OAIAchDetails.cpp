/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAchDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAchDetails::OAIAchDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAchDetails::OAIAchDetails() {
    this->initializeModel();
}

OAIAchDetails::~OAIAchDetails() {}

void OAIAchDetails::initializeModel() {

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_account_type_isSet = false;
    m_bank_account_type_isValid = false;

    m_bank_location_id_isSet = false;
    m_bank_location_id_isValid = false;

    m_encrypted_bank_account_number_isSet = false;
    m_encrypted_bank_account_number_isValid = false;

    m_encrypted_bank_location_id_isSet = false;
    m_encrypted_bank_location_id_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAchDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAchDetails::fromJsonObject(QJsonObject json) {

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_account_type_isValid = ::OpenAPI::fromJsonValue(m_bank_account_type, json[QString("bankAccountType")]);
    m_bank_account_type_isSet = !json[QString("bankAccountType")].isNull() && m_bank_account_type_isValid;

    m_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_bank_location_id, json[QString("bankLocationId")]);
    m_bank_location_id_isSet = !json[QString("bankLocationId")].isNull() && m_bank_location_id_isValid;

    m_encrypted_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_encrypted_bank_account_number, json[QString("encryptedBankAccountNumber")]);
    m_encrypted_bank_account_number_isSet = !json[QString("encryptedBankAccountNumber")].isNull() && m_encrypted_bank_account_number_isValid;

    m_encrypted_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_encrypted_bank_location_id, json[QString("encryptedBankLocationId")]);
    m_encrypted_bank_location_id_isSet = !json[QString("encryptedBankLocationId")].isNull() && m_encrypted_bank_location_id_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAchDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAchDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_account_type_isSet) {
        obj.insert(QString("bankAccountType"), ::OpenAPI::toJsonValue(m_bank_account_type));
    }
    if (m_bank_location_id_isSet) {
        obj.insert(QString("bankLocationId"), ::OpenAPI::toJsonValue(m_bank_location_id));
    }
    if (m_encrypted_bank_account_number_isSet) {
        obj.insert(QString("encryptedBankAccountNumber"), ::OpenAPI::toJsonValue(m_encrypted_bank_account_number));
    }
    if (m_encrypted_bank_location_id_isSet) {
        obj.insert(QString("encryptedBankLocationId"), ::OpenAPI::toJsonValue(m_encrypted_bank_location_id));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIAchDetails::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIAchDetails::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIAchDetails::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIAchDetails::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIAchDetails::getBankAccountType() const {
    return m_bank_account_type;
}
void OAIAchDetails::setBankAccountType(const QString &bank_account_type) {
    m_bank_account_type = bank_account_type;
    m_bank_account_type_isSet = true;
}

bool OAIAchDetails::is_bank_account_type_Set() const{
    return m_bank_account_type_isSet;
}

bool OAIAchDetails::is_bank_account_type_Valid() const{
    return m_bank_account_type_isValid;
}

QString OAIAchDetails::getBankLocationId() const {
    return m_bank_location_id;
}
void OAIAchDetails::setBankLocationId(const QString &bank_location_id) {
    m_bank_location_id = bank_location_id;
    m_bank_location_id_isSet = true;
}

bool OAIAchDetails::is_bank_location_id_Set() const{
    return m_bank_location_id_isSet;
}

bool OAIAchDetails::is_bank_location_id_Valid() const{
    return m_bank_location_id_isValid;
}

QString OAIAchDetails::getEncryptedBankAccountNumber() const {
    return m_encrypted_bank_account_number;
}
void OAIAchDetails::setEncryptedBankAccountNumber(const QString &encrypted_bank_account_number) {
    m_encrypted_bank_account_number = encrypted_bank_account_number;
    m_encrypted_bank_account_number_isSet = true;
}

bool OAIAchDetails::is_encrypted_bank_account_number_Set() const{
    return m_encrypted_bank_account_number_isSet;
}

bool OAIAchDetails::is_encrypted_bank_account_number_Valid() const{
    return m_encrypted_bank_account_number_isValid;
}

QString OAIAchDetails::getEncryptedBankLocationId() const {
    return m_encrypted_bank_location_id;
}
void OAIAchDetails::setEncryptedBankLocationId(const QString &encrypted_bank_location_id) {
    m_encrypted_bank_location_id = encrypted_bank_location_id;
    m_encrypted_bank_location_id_isSet = true;
}

bool OAIAchDetails::is_encrypted_bank_location_id_Set() const{
    return m_encrypted_bank_location_id_isSet;
}

bool OAIAchDetails::is_encrypted_bank_location_id_Valid() const{
    return m_encrypted_bank_location_id_isValid;
}

QString OAIAchDetails::getOwnerName() const {
    return m_owner_name;
}
void OAIAchDetails::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIAchDetails::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIAchDetails::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIAchDetails::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIAchDetails::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIAchDetails::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIAchDetails::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIAchDetails::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAIAchDetails::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAIAchDetails::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAIAchDetails::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

QString OAIAchDetails::getType() const {
    return m_type;
}
void OAIAchDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAchDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAchDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAchDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAchDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bank_account_number_isValid && true;
}

} // namespace OpenAPI
