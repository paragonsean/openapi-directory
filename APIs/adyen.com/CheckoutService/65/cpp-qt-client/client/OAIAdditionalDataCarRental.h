/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDataCarRental.h
 *
 * 
 */

#ifndef OAIAdditionalDataCarRental_H
#define OAIAdditionalDataCarRental_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDataCarRental : public OAIObject {
public:
    OAIAdditionalDataCarRental();
    OAIAdditionalDataCarRental(QString json);
    ~OAIAdditionalDataCarRental() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCarRentalCheckOutDate() const;
    void setCarRentalCheckOutDate(const QString &car_rental_check_out_date);
    bool is_car_rental_check_out_date_Set() const;
    bool is_car_rental_check_out_date_Valid() const;

    QString getCarRentalCustomerServiceTollFreeNumber() const;
    void setCarRentalCustomerServiceTollFreeNumber(const QString &car_rental_customer_service_toll_free_number);
    bool is_car_rental_customer_service_toll_free_number_Set() const;
    bool is_car_rental_customer_service_toll_free_number_Valid() const;

    QString getCarRentalDaysRented() const;
    void setCarRentalDaysRented(const QString &car_rental_days_rented);
    bool is_car_rental_days_rented_Set() const;
    bool is_car_rental_days_rented_Valid() const;

    QString getCarRentalFuelCharges() const;
    void setCarRentalFuelCharges(const QString &car_rental_fuel_charges);
    bool is_car_rental_fuel_charges_Set() const;
    bool is_car_rental_fuel_charges_Valid() const;

    QString getCarRentalInsuranceCharges() const;
    void setCarRentalInsuranceCharges(const QString &car_rental_insurance_charges);
    bool is_car_rental_insurance_charges_Set() const;
    bool is_car_rental_insurance_charges_Valid() const;

    QString getCarRentalLocationCity() const;
    void setCarRentalLocationCity(const QString &car_rental_location_city);
    bool is_car_rental_location_city_Set() const;
    bool is_car_rental_location_city_Valid() const;

    QString getCarRentalLocationCountry() const;
    void setCarRentalLocationCountry(const QString &car_rental_location_country);
    bool is_car_rental_location_country_Set() const;
    bool is_car_rental_location_country_Valid() const;

    QString getCarRentalLocationStateProvince() const;
    void setCarRentalLocationStateProvince(const QString &car_rental_location_state_province);
    bool is_car_rental_location_state_province_Set() const;
    bool is_car_rental_location_state_province_Valid() const;

    QString getCarRentalNoShowIndicator() const;
    void setCarRentalNoShowIndicator(const QString &car_rental_no_show_indicator);
    bool is_car_rental_no_show_indicator_Set() const;
    bool is_car_rental_no_show_indicator_Valid() const;

    QString getCarRentalOneWayDropOffCharges() const;
    void setCarRentalOneWayDropOffCharges(const QString &car_rental_one_way_drop_off_charges);
    bool is_car_rental_one_way_drop_off_charges_Set() const;
    bool is_car_rental_one_way_drop_off_charges_Valid() const;

    QString getCarRentalRate() const;
    void setCarRentalRate(const QString &car_rental_rate);
    bool is_car_rental_rate_Set() const;
    bool is_car_rental_rate_Valid() const;

    QString getCarRentalRateIndicator() const;
    void setCarRentalRateIndicator(const QString &car_rental_rate_indicator);
    bool is_car_rental_rate_indicator_Set() const;
    bool is_car_rental_rate_indicator_Valid() const;

    QString getCarRentalRentalAgreementNumber() const;
    void setCarRentalRentalAgreementNumber(const QString &car_rental_rental_agreement_number);
    bool is_car_rental_rental_agreement_number_Set() const;
    bool is_car_rental_rental_agreement_number_Valid() const;

    QString getCarRentalRentalClassId() const;
    void setCarRentalRentalClassId(const QString &car_rental_rental_class_id);
    bool is_car_rental_rental_class_id_Set() const;
    bool is_car_rental_rental_class_id_Valid() const;

    QString getCarRentalRenterName() const;
    void setCarRentalRenterName(const QString &car_rental_renter_name);
    bool is_car_rental_renter_name_Set() const;
    bool is_car_rental_renter_name_Valid() const;

    QString getCarRentalReturnCity() const;
    void setCarRentalReturnCity(const QString &car_rental_return_city);
    bool is_car_rental_return_city_Set() const;
    bool is_car_rental_return_city_Valid() const;

    QString getCarRentalReturnCountry() const;
    void setCarRentalReturnCountry(const QString &car_rental_return_country);
    bool is_car_rental_return_country_Set() const;
    bool is_car_rental_return_country_Valid() const;

    QString getCarRentalReturnDate() const;
    void setCarRentalReturnDate(const QString &car_rental_return_date);
    bool is_car_rental_return_date_Set() const;
    bool is_car_rental_return_date_Valid() const;

    QString getCarRentalReturnLocationId() const;
    void setCarRentalReturnLocationId(const QString &car_rental_return_location_id);
    bool is_car_rental_return_location_id_Set() const;
    bool is_car_rental_return_location_id_Valid() const;

    QString getCarRentalReturnStateProvince() const;
    void setCarRentalReturnStateProvince(const QString &car_rental_return_state_province);
    bool is_car_rental_return_state_province_Set() const;
    bool is_car_rental_return_state_province_Valid() const;

    QString getCarRentalTaxExemptIndicator() const;
    void setCarRentalTaxExemptIndicator(const QString &car_rental_tax_exempt_indicator);
    bool is_car_rental_tax_exempt_indicator_Set() const;
    bool is_car_rental_tax_exempt_indicator_Valid() const;

    QString getTravelEntertainmentAuthDataDuration() const;
    void setTravelEntertainmentAuthDataDuration(const QString &travel_entertainment_auth_data_duration);
    bool is_travel_entertainment_auth_data_duration_Set() const;
    bool is_travel_entertainment_auth_data_duration_Valid() const;

    QString getTravelEntertainmentAuthDataMarket() const;
    void setTravelEntertainmentAuthDataMarket(const QString &travel_entertainment_auth_data_market);
    bool is_travel_entertainment_auth_data_market_Set() const;
    bool is_travel_entertainment_auth_data_market_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_car_rental_check_out_date;
    bool m_car_rental_check_out_date_isSet;
    bool m_car_rental_check_out_date_isValid;

    QString m_car_rental_customer_service_toll_free_number;
    bool m_car_rental_customer_service_toll_free_number_isSet;
    bool m_car_rental_customer_service_toll_free_number_isValid;

    QString m_car_rental_days_rented;
    bool m_car_rental_days_rented_isSet;
    bool m_car_rental_days_rented_isValid;

    QString m_car_rental_fuel_charges;
    bool m_car_rental_fuel_charges_isSet;
    bool m_car_rental_fuel_charges_isValid;

    QString m_car_rental_insurance_charges;
    bool m_car_rental_insurance_charges_isSet;
    bool m_car_rental_insurance_charges_isValid;

    QString m_car_rental_location_city;
    bool m_car_rental_location_city_isSet;
    bool m_car_rental_location_city_isValid;

    QString m_car_rental_location_country;
    bool m_car_rental_location_country_isSet;
    bool m_car_rental_location_country_isValid;

    QString m_car_rental_location_state_province;
    bool m_car_rental_location_state_province_isSet;
    bool m_car_rental_location_state_province_isValid;

    QString m_car_rental_no_show_indicator;
    bool m_car_rental_no_show_indicator_isSet;
    bool m_car_rental_no_show_indicator_isValid;

    QString m_car_rental_one_way_drop_off_charges;
    bool m_car_rental_one_way_drop_off_charges_isSet;
    bool m_car_rental_one_way_drop_off_charges_isValid;

    QString m_car_rental_rate;
    bool m_car_rental_rate_isSet;
    bool m_car_rental_rate_isValid;

    QString m_car_rental_rate_indicator;
    bool m_car_rental_rate_indicator_isSet;
    bool m_car_rental_rate_indicator_isValid;

    QString m_car_rental_rental_agreement_number;
    bool m_car_rental_rental_agreement_number_isSet;
    bool m_car_rental_rental_agreement_number_isValid;

    QString m_car_rental_rental_class_id;
    bool m_car_rental_rental_class_id_isSet;
    bool m_car_rental_rental_class_id_isValid;

    QString m_car_rental_renter_name;
    bool m_car_rental_renter_name_isSet;
    bool m_car_rental_renter_name_isValid;

    QString m_car_rental_return_city;
    bool m_car_rental_return_city_isSet;
    bool m_car_rental_return_city_isValid;

    QString m_car_rental_return_country;
    bool m_car_rental_return_country_isSet;
    bool m_car_rental_return_country_isValid;

    QString m_car_rental_return_date;
    bool m_car_rental_return_date_isSet;
    bool m_car_rental_return_date_isValid;

    QString m_car_rental_return_location_id;
    bool m_car_rental_return_location_id_isSet;
    bool m_car_rental_return_location_id_isValid;

    QString m_car_rental_return_state_province;
    bool m_car_rental_return_state_province_isSet;
    bool m_car_rental_return_state_province_isValid;

    QString m_car_rental_tax_exempt_indicator;
    bool m_car_rental_tax_exempt_indicator_isSet;
    bool m_car_rental_tax_exempt_indicator_isValid;

    QString m_travel_entertainment_auth_data_duration;
    bool m_travel_entertainment_auth_data_duration_isSet;
    bool m_travel_entertainment_auth_data_duration_isValid;

    QString m_travel_entertainment_auth_data_market;
    bool m_travel_entertainment_auth_data_market_isSet;
    bool m_travel_entertainment_auth_data_market_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDataCarRental)

#endif // OAIAdditionalDataCarRental_H
