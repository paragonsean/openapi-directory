/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICardDetailsRequest.h"
#include "OAICardDetailsResponse.h"
#include "OAIPaymentDetailsRequest.h"
#include "OAIPaymentDetailsResponse.h"
#include "OAIPaymentMethodsRequest.h"
#include "OAIPaymentMethodsResponse.h"
#include "OAIPaymentRequest.h"
#include "OAIPaymentResponse.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_card_details_request OAICardDetailsRequest [optional]
    */
    virtual void postCardDetails(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICardDetailsRequest> &oai_card_details_request = ::OpenAPI::OptionalParam<OAICardDetailsRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_methods_request OAIPaymentMethodsRequest [optional]
    */
    virtual void postPaymentMethods(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentMethodsRequest> &oai_payment_methods_request = ::OpenAPI::OptionalParam<OAIPaymentMethodsRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_request OAIPaymentRequest [optional]
    */
    virtual void postPayments(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentRequest> &oai_payment_request = ::OpenAPI::OptionalParam<OAIPaymentRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_details_request OAIPaymentDetailsRequest [optional]
    */
    virtual void postPaymentsDetails(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentDetailsRequest> &oai_payment_details_request = ::OpenAPI::OptionalParam<OAIPaymentDetailsRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCardDetailsCallback(OAIHttpRequestWorker *worker);
    void postPaymentMethodsCallback(OAIHttpRequestWorker *worker);
    void postPaymentsCallback(OAIHttpRequestWorker *worker);
    void postPaymentsDetailsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCardDetailsSignal(OAICardDetailsResponse summary);
    void postPaymentMethodsSignal(OAIPaymentMethodsResponse summary);
    void postPaymentsSignal(OAIPaymentResponse summary);
    void postPaymentsDetailsSignal(OAIPaymentDetailsResponse summary);


    void postCardDetailsSignalFull(OAIHttpRequestWorker *worker, OAICardDetailsResponse summary);
    void postPaymentMethodsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentMethodsResponse summary);
    void postPaymentsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);
    void postPaymentsDetailsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentDetailsResponse summary);

    Q_DECL_DEPRECATED_X("Use postCardDetailsSignalError() instead")
    void postCardDetailsSignalE(OAICardDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCardDetailsSignalError(OAICardDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentMethodsSignalError() instead")
    void postPaymentMethodsSignalE(OAIPaymentMethodsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentMethodsSignalError(OAIPaymentMethodsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsSignalError() instead")
    void postPaymentsSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsDetailsSignalError() instead")
    void postPaymentsDetailsSignalE(OAIPaymentDetailsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsDetailsSignalError(OAIPaymentDetailsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCardDetailsSignalErrorFull() instead")
    void postCardDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCardDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentMethodsSignalErrorFull() instead")
    void postPaymentMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsSignalErrorFull() instead")
    void postPaymentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsDetailsSignalErrorFull() instead")
    void postPaymentsDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
