/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v65/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v65/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=65) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 65
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentRequest_paymentMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentRequest_paymentMethod::OAIPaymentRequest_paymentMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentRequest_paymentMethod::OAIPaymentRequest_paymentMethod() {
    this->initializeModel();
}

OAIPaymentRequest_paymentMethod::~OAIPaymentRequest_paymentMethod() {}

void OAIPaymentRequest_paymentMethod::initializeModel() {

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_account_type_isSet = false;
    m_bank_account_type_isValid = false;

    m_bank_location_id_isSet = false;
    m_bank_location_id_isValid = false;

    m_encrypted_bank_account_number_isSet = false;
    m_encrypted_bank_account_number_isValid = false;

    m_encrypted_bank_location_id_isSet = false;
    m_encrypted_bank_location_id_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_personal_details_isSet = false;
    m_personal_details_isValid = false;

    m_amazon_pay_token_isSet = false;
    m_amazon_pay_token_isValid = false;

    m_checkout_session_id_isSet = false;
    m_checkout_session_id_isValid = false;

    m_apple_pay_token_isSet = false;
    m_apple_pay_token_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_blik_code_isSet = false;
    m_blik_code_isValid = false;

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_cupsecureplus_smscode_isSet = false;
    m_cupsecureplus_smscode_isValid = false;

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_encrypted_card_number_isSet = false;
    m_encrypted_card_number_isValid = false;

    m_encrypted_expiry_month_isSet = false;
    m_encrypted_expiry_month_isValid = false;

    m_encrypted_expiry_year_isSet = false;
    m_encrypted_expiry_year_isValid = false;

    m_encrypted_security_code_isSet = false;
    m_encrypted_security_code_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_network_payment_reference_isSet = false;
    m_network_payment_reference_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_shopper_notification_reference_isSet = false;
    m_shopper_notification_reference_isValid = false;

    m_three_ds2_sdk_version_isSet = false;
    m_three_ds2_sdk_version_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_google_pay_card_network_isSet = false;
    m_google_pay_card_network_isValid = false;

    m_google_pay_token_isSet = false;
    m_google_pay_token_isValid = false;

    m_subtype_isSet = false;
    m_subtype_isValid = false;

    m_masterpass_transaction_id_isSet = false;
    m_masterpass_transaction_id_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_payee_preferred_isSet = false;
    m_payee_preferred_isValid = false;

    m_payer_id_isSet = false;
    m_payer_id_isValid = false;

    m_payer_selected_isSet = false;
    m_payer_selected_isValid = false;

    m_virtual_payment_address_isSet = false;
    m_virtual_payment_address_isValid = false;

    m_samsung_pay_token_isSet = false;
    m_samsung_pay_token_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_billing_sequence_number_isSet = false;
    m_billing_sequence_number_isValid = false;

    m_visa_checkout_call_id_isSet = false;
    m_visa_checkout_call_id_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_openid_isSet = false;
    m_openid_isValid = false;

    m_click_and_collect_isSet = false;
    m_click_and_collect_isValid = false;
}

void OAIPaymentRequest_paymentMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentRequest_paymentMethod::fromJsonObject(QJsonObject json) {

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_account_type_isValid = ::OpenAPI::fromJsonValue(m_bank_account_type, json[QString("bankAccountType")]);
    m_bank_account_type_isSet = !json[QString("bankAccountType")].isNull() && m_bank_account_type_isValid;

    m_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_bank_location_id, json[QString("bankLocationId")]);
    m_bank_location_id_isSet = !json[QString("bankLocationId")].isNull() && m_bank_location_id_isValid;

    m_encrypted_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_encrypted_bank_account_number, json[QString("encryptedBankAccountNumber")]);
    m_encrypted_bank_account_number_isSet = !json[QString("encryptedBankAccountNumber")].isNull() && m_encrypted_bank_account_number_isValid;

    m_encrypted_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_encrypted_bank_location_id, json[QString("encryptedBankLocationId")]);
    m_encrypted_bank_location_id_isSet = !json[QString("encryptedBankLocationId")].isNull() && m_encrypted_bank_location_id_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_personal_details_isValid = ::OpenAPI::fromJsonValue(m_personal_details, json[QString("personalDetails")]);
    m_personal_details_isSet = !json[QString("personalDetails")].isNull() && m_personal_details_isValid;

    m_amazon_pay_token_isValid = ::OpenAPI::fromJsonValue(m_amazon_pay_token, json[QString("amazonPayToken")]);
    m_amazon_pay_token_isSet = !json[QString("amazonPayToken")].isNull() && m_amazon_pay_token_isValid;

    m_checkout_session_id_isValid = ::OpenAPI::fromJsonValue(m_checkout_session_id, json[QString("checkoutSessionId")]);
    m_checkout_session_id_isSet = !json[QString("checkoutSessionId")].isNull() && m_checkout_session_id_isValid;

    m_apple_pay_token_isValid = ::OpenAPI::fromJsonValue(m_apple_pay_token, json[QString("applePayToken")]);
    m_apple_pay_token_isSet = !json[QString("applePayToken")].isNull() && m_apple_pay_token_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_blik_code_isValid = ::OpenAPI::fromJsonValue(m_blik_code, json[QString("blikCode")]);
    m_blik_code_isSet = !json[QString("blikCode")].isNull() && m_blik_code_isValid;

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_cupsecureplus_smscode_isValid = ::OpenAPI::fromJsonValue(m_cupsecureplus_smscode, json[QString("cupsecureplus.smscode")]);
    m_cupsecureplus_smscode_isSet = !json[QString("cupsecureplus.smscode")].isNull() && m_cupsecureplus_smscode_isValid;

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_encrypted_card_number_isValid = ::OpenAPI::fromJsonValue(m_encrypted_card_number, json[QString("encryptedCardNumber")]);
    m_encrypted_card_number_isSet = !json[QString("encryptedCardNumber")].isNull() && m_encrypted_card_number_isValid;

    m_encrypted_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_encrypted_expiry_month, json[QString("encryptedExpiryMonth")]);
    m_encrypted_expiry_month_isSet = !json[QString("encryptedExpiryMonth")].isNull() && m_encrypted_expiry_month_isValid;

    m_encrypted_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_encrypted_expiry_year, json[QString("encryptedExpiryYear")]);
    m_encrypted_expiry_year_isSet = !json[QString("encryptedExpiryYear")].isNull() && m_encrypted_expiry_year_isValid;

    m_encrypted_security_code_isValid = ::OpenAPI::fromJsonValue(m_encrypted_security_code, json[QString("encryptedSecurityCode")]);
    m_encrypted_security_code_isSet = !json[QString("encryptedSecurityCode")].isNull() && m_encrypted_security_code_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_network_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_network_payment_reference, json[QString("networkPaymentReference")]);
    m_network_payment_reference_isSet = !json[QString("networkPaymentReference")].isNull() && m_network_payment_reference_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_shopper_notification_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_notification_reference, json[QString("shopperNotificationReference")]);
    m_shopper_notification_reference_isSet = !json[QString("shopperNotificationReference")].isNull() && m_shopper_notification_reference_isValid;

    m_three_ds2_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_sdk_version, json[QString("threeDS2SdkVersion")]);
    m_three_ds2_sdk_version_isSet = !json[QString("threeDS2SdkVersion")].isNull() && m_three_ds2_sdk_version_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;

    m_google_pay_card_network_isValid = ::OpenAPI::fromJsonValue(m_google_pay_card_network, json[QString("googlePayCardNetwork")]);
    m_google_pay_card_network_isSet = !json[QString("googlePayCardNetwork")].isNull() && m_google_pay_card_network_isValid;

    m_google_pay_token_isValid = ::OpenAPI::fromJsonValue(m_google_pay_token, json[QString("googlePayToken")]);
    m_google_pay_token_isSet = !json[QString("googlePayToken")].isNull() && m_google_pay_token_isValid;

    m_subtype_isValid = ::OpenAPI::fromJsonValue(m_subtype, json[QString("subtype")]);
    m_subtype_isSet = !json[QString("subtype")].isNull() && m_subtype_isValid;

    m_masterpass_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_masterpass_transaction_id, json[QString("masterpassTransactionId")]);
    m_masterpass_transaction_id_isSet = !json[QString("masterpassTransactionId")].isNull() && m_masterpass_transaction_id_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("orderID")]);
    m_order_id_isSet = !json[QString("orderID")].isNull() && m_order_id_isValid;

    m_payee_preferred_isValid = ::OpenAPI::fromJsonValue(m_payee_preferred, json[QString("payeePreferred")]);
    m_payee_preferred_isSet = !json[QString("payeePreferred")].isNull() && m_payee_preferred_isValid;

    m_payer_id_isValid = ::OpenAPI::fromJsonValue(m_payer_id, json[QString("payerID")]);
    m_payer_id_isSet = !json[QString("payerID")].isNull() && m_payer_id_isValid;

    m_payer_selected_isValid = ::OpenAPI::fromJsonValue(m_payer_selected, json[QString("payerSelected")]);
    m_payer_selected_isSet = !json[QString("payerSelected")].isNull() && m_payer_selected_isValid;

    m_virtual_payment_address_isValid = ::OpenAPI::fromJsonValue(m_virtual_payment_address, json[QString("virtualPaymentAddress")]);
    m_virtual_payment_address_isSet = !json[QString("virtualPaymentAddress")].isNull() && m_virtual_payment_address_isValid;

    m_samsung_pay_token_isValid = ::OpenAPI::fromJsonValue(m_samsung_pay_token, json[QString("samsungPayToken")]);
    m_samsung_pay_token_isSet = !json[QString("samsungPayToken")].isNull() && m_samsung_pay_token_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_billing_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_billing_sequence_number, json[QString("billingSequenceNumber")]);
    m_billing_sequence_number_isSet = !json[QString("billingSequenceNumber")].isNull() && m_billing_sequence_number_isValid;

    m_visa_checkout_call_id_isValid = ::OpenAPI::fromJsonValue(m_visa_checkout_call_id, json[QString("visaCheckoutCallId")]);
    m_visa_checkout_call_id_isSet = !json[QString("visaCheckoutCallId")].isNull() && m_visa_checkout_call_id_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_openid_isValid = ::OpenAPI::fromJsonValue(m_openid, json[QString("openid")]);
    m_openid_isSet = !json[QString("openid")].isNull() && m_openid_isValid;

    m_click_and_collect_isValid = ::OpenAPI::fromJsonValue(m_click_and_collect, json[QString("clickAndCollect")]);
    m_click_and_collect_isSet = !json[QString("clickAndCollect")].isNull() && m_click_and_collect_isValid;
}

QString OAIPaymentRequest_paymentMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentRequest_paymentMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_account_type_isSet) {
        obj.insert(QString("bankAccountType"), ::OpenAPI::toJsonValue(m_bank_account_type));
    }
    if (m_bank_location_id_isSet) {
        obj.insert(QString("bankLocationId"), ::OpenAPI::toJsonValue(m_bank_location_id));
    }
    if (m_encrypted_bank_account_number_isSet) {
        obj.insert(QString("encryptedBankAccountNumber"), ::OpenAPI::toJsonValue(m_encrypted_bank_account_number));
    }
    if (m_encrypted_bank_location_id_isSet) {
        obj.insert(QString("encryptedBankLocationId"), ::OpenAPI::toJsonValue(m_encrypted_bank_location_id));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_billing_address_isSet) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_delivery_address_isSet) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_personal_details_isSet) {
        obj.insert(QString("personalDetails"), ::OpenAPI::toJsonValue(m_personal_details));
    }
    if (m_amazon_pay_token_isSet) {
        obj.insert(QString("amazonPayToken"), ::OpenAPI::toJsonValue(m_amazon_pay_token));
    }
    if (m_checkout_session_id_isSet) {
        obj.insert(QString("checkoutSessionId"), ::OpenAPI::toJsonValue(m_checkout_session_id));
    }
    if (m_apple_pay_token_isSet) {
        obj.insert(QString("applePayToken"), ::OpenAPI::toJsonValue(m_apple_pay_token));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_blik_code_isSet) {
        obj.insert(QString("blikCode"), ::OpenAPI::toJsonValue(m_blik_code));
    }
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_cupsecureplus_smscode_isSet) {
        obj.insert(QString("cupsecureplus.smscode"), ::OpenAPI::toJsonValue(m_cupsecureplus_smscode));
    }
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_encrypted_card_number_isSet) {
        obj.insert(QString("encryptedCardNumber"), ::OpenAPI::toJsonValue(m_encrypted_card_number));
    }
    if (m_encrypted_expiry_month_isSet) {
        obj.insert(QString("encryptedExpiryMonth"), ::OpenAPI::toJsonValue(m_encrypted_expiry_month));
    }
    if (m_encrypted_expiry_year_isSet) {
        obj.insert(QString("encryptedExpiryYear"), ::OpenAPI::toJsonValue(m_encrypted_expiry_year));
    }
    if (m_encrypted_security_code_isSet) {
        obj.insert(QString("encryptedSecurityCode"), ::OpenAPI::toJsonValue(m_encrypted_security_code));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_network_payment_reference_isSet) {
        obj.insert(QString("networkPaymentReference"), ::OpenAPI::toJsonValue(m_network_payment_reference));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_shopper_notification_reference_isSet) {
        obj.insert(QString("shopperNotificationReference"), ::OpenAPI::toJsonValue(m_shopper_notification_reference));
    }
    if (m_three_ds2_sdk_version_isSet) {
        obj.insert(QString("threeDS2SdkVersion"), ::OpenAPI::toJsonValue(m_three_ds2_sdk_version));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_google_pay_card_network_isSet) {
        obj.insert(QString("googlePayCardNetwork"), ::OpenAPI::toJsonValue(m_google_pay_card_network));
    }
    if (m_google_pay_token_isSet) {
        obj.insert(QString("googlePayToken"), ::OpenAPI::toJsonValue(m_google_pay_token));
    }
    if (m_subtype_isSet) {
        obj.insert(QString("subtype"), ::OpenAPI::toJsonValue(m_subtype));
    }
    if (m_masterpass_transaction_id_isSet) {
        obj.insert(QString("masterpassTransactionId"), ::OpenAPI::toJsonValue(m_masterpass_transaction_id));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("orderID"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_payee_preferred_isSet) {
        obj.insert(QString("payeePreferred"), ::OpenAPI::toJsonValue(m_payee_preferred));
    }
    if (m_payer_id_isSet) {
        obj.insert(QString("payerID"), ::OpenAPI::toJsonValue(m_payer_id));
    }
    if (m_payer_selected_isSet) {
        obj.insert(QString("payerSelected"), ::OpenAPI::toJsonValue(m_payer_selected));
    }
    if (m_virtual_payment_address_isSet) {
        obj.insert(QString("virtualPaymentAddress"), ::OpenAPI::toJsonValue(m_virtual_payment_address));
    }
    if (m_samsung_pay_token_isSet) {
        obj.insert(QString("samsungPayToken"), ::OpenAPI::toJsonValue(m_samsung_pay_token));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_billing_sequence_number_isSet) {
        obj.insert(QString("billingSequenceNumber"), ::OpenAPI::toJsonValue(m_billing_sequence_number));
    }
    if (m_visa_checkout_call_id_isSet) {
        obj.insert(QString("visaCheckoutCallId"), ::OpenAPI::toJsonValue(m_visa_checkout_call_id));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_openid_isSet) {
        obj.insert(QString("openid"), ::OpenAPI::toJsonValue(m_openid));
    }
    if (m_click_and_collect_isSet) {
        obj.insert(QString("clickAndCollect"), ::OpenAPI::toJsonValue(m_click_and_collect));
    }
    return obj;
}

QString OAIPaymentRequest_paymentMethod::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIPaymentRequest_paymentMethod::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBankAccountType() const {
    return m_bank_account_type;
}
void OAIPaymentRequest_paymentMethod::setBankAccountType(const QString &bank_account_type) {
    m_bank_account_type = bank_account_type;
    m_bank_account_type_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_bank_account_type_Set() const{
    return m_bank_account_type_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_bank_account_type_Valid() const{
    return m_bank_account_type_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBankLocationId() const {
    return m_bank_location_id;
}
void OAIPaymentRequest_paymentMethod::setBankLocationId(const QString &bank_location_id) {
    m_bank_location_id = bank_location_id;
    m_bank_location_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_bank_location_id_Set() const{
    return m_bank_location_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_bank_location_id_Valid() const{
    return m_bank_location_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedBankAccountNumber() const {
    return m_encrypted_bank_account_number;
}
void OAIPaymentRequest_paymentMethod::setEncryptedBankAccountNumber(const QString &encrypted_bank_account_number) {
    m_encrypted_bank_account_number = encrypted_bank_account_number;
    m_encrypted_bank_account_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_bank_account_number_Set() const{
    return m_encrypted_bank_account_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_bank_account_number_Valid() const{
    return m_encrypted_bank_account_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedBankLocationId() const {
    return m_encrypted_bank_location_id;
}
void OAIPaymentRequest_paymentMethod::setEncryptedBankLocationId(const QString &encrypted_bank_location_id) {
    m_encrypted_bank_location_id = encrypted_bank_location_id;
    m_encrypted_bank_location_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_bank_location_id_Set() const{
    return m_encrypted_bank_location_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_bank_location_id_Valid() const{
    return m_encrypted_bank_location_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getOwnerName() const {
    return m_owner_name;
}
void OAIPaymentRequest_paymentMethod::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIPaymentRequest_paymentMethod::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIPaymentRequest_paymentMethod::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIPaymentRequest_paymentMethod::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAIPaymentRequest_paymentMethod::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getType() const {
    return m_type;
}
void OAIPaymentRequest_paymentMethod::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBillingAddress() const {
    return m_billing_address;
}
void OAIPaymentRequest_paymentMethod::setBillingAddress(const QString &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QString OAIPaymentRequest_paymentMethod::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIPaymentRequest_paymentMethod::setDeliveryAddress(const QString &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

QString OAIPaymentRequest_paymentMethod::getPersonalDetails() const {
    return m_personal_details;
}
void OAIPaymentRequest_paymentMethod::setPersonalDetails(const QString &personal_details) {
    m_personal_details = personal_details;
    m_personal_details_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_personal_details_Set() const{
    return m_personal_details_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_personal_details_Valid() const{
    return m_personal_details_isValid;
}

QString OAIPaymentRequest_paymentMethod::getAmazonPayToken() const {
    return m_amazon_pay_token;
}
void OAIPaymentRequest_paymentMethod::setAmazonPayToken(const QString &amazon_pay_token) {
    m_amazon_pay_token = amazon_pay_token;
    m_amazon_pay_token_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_amazon_pay_token_Set() const{
    return m_amazon_pay_token_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_amazon_pay_token_Valid() const{
    return m_amazon_pay_token_isValid;
}

QString OAIPaymentRequest_paymentMethod::getCheckoutSessionId() const {
    return m_checkout_session_id;
}
void OAIPaymentRequest_paymentMethod::setCheckoutSessionId(const QString &checkout_session_id) {
    m_checkout_session_id = checkout_session_id;
    m_checkout_session_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_checkout_session_id_Set() const{
    return m_checkout_session_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_checkout_session_id_Valid() const{
    return m_checkout_session_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getApplePayToken() const {
    return m_apple_pay_token;
}
void OAIPaymentRequest_paymentMethod::setApplePayToken(const QString &apple_pay_token) {
    m_apple_pay_token = apple_pay_token;
    m_apple_pay_token_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_apple_pay_token_Set() const{
    return m_apple_pay_token_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_apple_pay_token_Valid() const{
    return m_apple_pay_token_isValid;
}

QString OAIPaymentRequest_paymentMethod::getFundingSource() const {
    return m_funding_source;
}
void OAIPaymentRequest_paymentMethod::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIPaymentRequest_paymentMethod::getHolderName() const {
    return m_holder_name;
}
void OAIPaymentRequest_paymentMethod::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIPaymentRequest_paymentMethod::getIssuer() const {
    return m_issuer;
}
void OAIPaymentRequest_paymentMethod::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBlikCode() const {
    return m_blik_code;
}
void OAIPaymentRequest_paymentMethod::setBlikCode(const QString &blik_code) {
    m_blik_code = blik_code;
    m_blik_code_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_blik_code_Set() const{
    return m_blik_code_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_blik_code_Valid() const{
    return m_blik_code_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBrand() const {
    return m_brand;
}
void OAIPaymentRequest_paymentMethod::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIPaymentRequest_paymentMethod::getCupsecureplusSmscode() const {
    return m_cupsecureplus_smscode;
}
void OAIPaymentRequest_paymentMethod::setCupsecureplusSmscode(const QString &cupsecureplus_smscode) {
    m_cupsecureplus_smscode = cupsecureplus_smscode;
    m_cupsecureplus_smscode_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_cupsecureplus_smscode_Set() const{
    return m_cupsecureplus_smscode_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_cupsecureplus_smscode_Valid() const{
    return m_cupsecureplus_smscode_isValid;
}

QString OAIPaymentRequest_paymentMethod::getCvc() const {
    return m_cvc;
}
void OAIPaymentRequest_paymentMethod::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_cvc_Valid() const{
    return m_cvc_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedCardNumber() const {
    return m_encrypted_card_number;
}
void OAIPaymentRequest_paymentMethod::setEncryptedCardNumber(const QString &encrypted_card_number) {
    m_encrypted_card_number = encrypted_card_number;
    m_encrypted_card_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_card_number_Set() const{
    return m_encrypted_card_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_card_number_Valid() const{
    return m_encrypted_card_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedExpiryMonth() const {
    return m_encrypted_expiry_month;
}
void OAIPaymentRequest_paymentMethod::setEncryptedExpiryMonth(const QString &encrypted_expiry_month) {
    m_encrypted_expiry_month = encrypted_expiry_month;
    m_encrypted_expiry_month_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_expiry_month_Set() const{
    return m_encrypted_expiry_month_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_expiry_month_Valid() const{
    return m_encrypted_expiry_month_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedExpiryYear() const {
    return m_encrypted_expiry_year;
}
void OAIPaymentRequest_paymentMethod::setEncryptedExpiryYear(const QString &encrypted_expiry_year) {
    m_encrypted_expiry_year = encrypted_expiry_year;
    m_encrypted_expiry_year_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_expiry_year_Set() const{
    return m_encrypted_expiry_year_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_expiry_year_Valid() const{
    return m_encrypted_expiry_year_isValid;
}

QString OAIPaymentRequest_paymentMethod::getEncryptedSecurityCode() const {
    return m_encrypted_security_code;
}
void OAIPaymentRequest_paymentMethod::setEncryptedSecurityCode(const QString &encrypted_security_code) {
    m_encrypted_security_code = encrypted_security_code;
    m_encrypted_security_code_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_security_code_Set() const{
    return m_encrypted_security_code_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_encrypted_security_code_Valid() const{
    return m_encrypted_security_code_isValid;
}

QString OAIPaymentRequest_paymentMethod::getExpiryMonth() const {
    return m_expiry_month;
}
void OAIPaymentRequest_paymentMethod::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAIPaymentRequest_paymentMethod::getExpiryYear() const {
    return m_expiry_year;
}
void OAIPaymentRequest_paymentMethod::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAIPaymentRequest_paymentMethod::getNetworkPaymentReference() const {
    return m_network_payment_reference;
}
void OAIPaymentRequest_paymentMethod::setNetworkPaymentReference(const QString &network_payment_reference) {
    m_network_payment_reference = network_payment_reference;
    m_network_payment_reference_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_network_payment_reference_Set() const{
    return m_network_payment_reference_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_network_payment_reference_Valid() const{
    return m_network_payment_reference_isValid;
}

QString OAIPaymentRequest_paymentMethod::getNumber() const {
    return m_number;
}
void OAIPaymentRequest_paymentMethod::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getShopperNotificationReference() const {
    return m_shopper_notification_reference;
}
void OAIPaymentRequest_paymentMethod::setShopperNotificationReference(const QString &shopper_notification_reference) {
    m_shopper_notification_reference = shopper_notification_reference;
    m_shopper_notification_reference_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_shopper_notification_reference_Set() const{
    return m_shopper_notification_reference_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_shopper_notification_reference_Valid() const{
    return m_shopper_notification_reference_isValid;
}

QString OAIPaymentRequest_paymentMethod::getThreeDs2SdkVersion() const {
    return m_three_ds2_sdk_version;
}
void OAIPaymentRequest_paymentMethod::setThreeDs2SdkVersion(const QString &three_ds2_sdk_version) {
    m_three_ds2_sdk_version = three_ds2_sdk_version;
    m_three_ds2_sdk_version_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_three_ds2_sdk_version_Set() const{
    return m_three_ds2_sdk_version_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_three_ds2_sdk_version_Valid() const{
    return m_three_ds2_sdk_version_isValid;
}

QString OAIPaymentRequest_paymentMethod::getFirstName() const {
    return m_first_name;
}
void OAIPaymentRequest_paymentMethod::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIPaymentRequest_paymentMethod::getLastName() const {
    return m_last_name;
}
void OAIPaymentRequest_paymentMethod::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIPaymentRequest_paymentMethod::getShopperEmail() const {
    return m_shopper_email;
}
void OAIPaymentRequest_paymentMethod::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIPaymentRequest_paymentMethod::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIPaymentRequest_paymentMethod::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getGooglePayCardNetwork() const {
    return m_google_pay_card_network;
}
void OAIPaymentRequest_paymentMethod::setGooglePayCardNetwork(const QString &google_pay_card_network) {
    m_google_pay_card_network = google_pay_card_network;
    m_google_pay_card_network_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_google_pay_card_network_Set() const{
    return m_google_pay_card_network_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_google_pay_card_network_Valid() const{
    return m_google_pay_card_network_isValid;
}

QString OAIPaymentRequest_paymentMethod::getGooglePayToken() const {
    return m_google_pay_token;
}
void OAIPaymentRequest_paymentMethod::setGooglePayToken(const QString &google_pay_token) {
    m_google_pay_token = google_pay_token;
    m_google_pay_token_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_google_pay_token_Set() const{
    return m_google_pay_token_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_google_pay_token_Valid() const{
    return m_google_pay_token_isValid;
}

QString OAIPaymentRequest_paymentMethod::getSubtype() const {
    return m_subtype;
}
void OAIPaymentRequest_paymentMethod::setSubtype(const QString &subtype) {
    m_subtype = subtype;
    m_subtype_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_subtype_Set() const{
    return m_subtype_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_subtype_Valid() const{
    return m_subtype_isValid;
}

QString OAIPaymentRequest_paymentMethod::getMasterpassTransactionId() const {
    return m_masterpass_transaction_id;
}
void OAIPaymentRequest_paymentMethod::setMasterpassTransactionId(const QString &masterpass_transaction_id) {
    m_masterpass_transaction_id = masterpass_transaction_id;
    m_masterpass_transaction_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_masterpass_transaction_id_Set() const{
    return m_masterpass_transaction_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_masterpass_transaction_id_Valid() const{
    return m_masterpass_transaction_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getOrderId() const {
    return m_order_id;
}
void OAIPaymentRequest_paymentMethod::setOrderId(const QString &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getPayeePreferred() const {
    return m_payee_preferred;
}
void OAIPaymentRequest_paymentMethod::setPayeePreferred(const QString &payee_preferred) {
    m_payee_preferred = payee_preferred;
    m_payee_preferred_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_payee_preferred_Set() const{
    return m_payee_preferred_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_payee_preferred_Valid() const{
    return m_payee_preferred_isValid;
}

QString OAIPaymentRequest_paymentMethod::getPayerId() const {
    return m_payer_id;
}
void OAIPaymentRequest_paymentMethod::setPayerId(const QString &payer_id) {
    m_payer_id = payer_id;
    m_payer_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_payer_id_Set() const{
    return m_payer_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_payer_id_Valid() const{
    return m_payer_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getPayerSelected() const {
    return m_payer_selected;
}
void OAIPaymentRequest_paymentMethod::setPayerSelected(const QString &payer_selected) {
    m_payer_selected = payer_selected;
    m_payer_selected_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_payer_selected_Set() const{
    return m_payer_selected_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_payer_selected_Valid() const{
    return m_payer_selected_isValid;
}

QString OAIPaymentRequest_paymentMethod::getVirtualPaymentAddress() const {
    return m_virtual_payment_address;
}
void OAIPaymentRequest_paymentMethod::setVirtualPaymentAddress(const QString &virtual_payment_address) {
    m_virtual_payment_address = virtual_payment_address;
    m_virtual_payment_address_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_virtual_payment_address_Set() const{
    return m_virtual_payment_address_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_virtual_payment_address_Valid() const{
    return m_virtual_payment_address_isValid;
}

QString OAIPaymentRequest_paymentMethod::getSamsungPayToken() const {
    return m_samsung_pay_token;
}
void OAIPaymentRequest_paymentMethod::setSamsungPayToken(const QString &samsung_pay_token) {
    m_samsung_pay_token = samsung_pay_token;
    m_samsung_pay_token_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_samsung_pay_token_Set() const{
    return m_samsung_pay_token_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_samsung_pay_token_Valid() const{
    return m_samsung_pay_token_isValid;
}

QString OAIPaymentRequest_paymentMethod::getIban() const {
    return m_iban;
}
void OAIPaymentRequest_paymentMethod::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIPaymentRequest_paymentMethod::getBillingSequenceNumber() const {
    return m_billing_sequence_number;
}
void OAIPaymentRequest_paymentMethod::setBillingSequenceNumber(const QString &billing_sequence_number) {
    m_billing_sequence_number = billing_sequence_number;
    m_billing_sequence_number_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_billing_sequence_number_Set() const{
    return m_billing_sequence_number_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_billing_sequence_number_Valid() const{
    return m_billing_sequence_number_isValid;
}

QString OAIPaymentRequest_paymentMethod::getVisaCheckoutCallId() const {
    return m_visa_checkout_call_id;
}
void OAIPaymentRequest_paymentMethod::setVisaCheckoutCallId(const QString &visa_checkout_call_id) {
    m_visa_checkout_call_id = visa_checkout_call_id;
    m_visa_checkout_call_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_visa_checkout_call_id_Set() const{
    return m_visa_checkout_call_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_visa_checkout_call_id_Valid() const{
    return m_visa_checkout_call_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getAppId() const {
    return m_app_id;
}
void OAIPaymentRequest_paymentMethod::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIPaymentRequest_paymentMethod::getOpenid() const {
    return m_openid;
}
void OAIPaymentRequest_paymentMethod::setOpenid(const QString &openid) {
    m_openid = openid;
    m_openid_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_openid_Set() const{
    return m_openid_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_openid_Valid() const{
    return m_openid_isValid;
}

QString OAIPaymentRequest_paymentMethod::getClickAndCollect() const {
    return m_click_and_collect;
}
void OAIPaymentRequest_paymentMethod::setClickAndCollect(const QString &click_and_collect) {
    m_click_and_collect = click_and_collect;
    m_click_and_collect_isSet = true;
}

bool OAIPaymentRequest_paymentMethod::is_click_and_collect_Set() const{
    return m_click_and_collect_isSet;
}

bool OAIPaymentRequest_paymentMethod::is_click_and_collect_Valid() const{
    return m_click_and_collect_isValid;
}

bool OAIPaymentRequest_paymentMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_personal_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amazon_pay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apple_pay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blik_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cupsecureplus_smscode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_security_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_payment_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_notification_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_pay_card_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_pay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masterpass_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payee_preferred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payer_selected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_payment_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samsung_pay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visa_checkout_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_openid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_click_and_collect_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentRequest_paymentMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_bank_account_number_isValid && m_owner_name_isValid && m_type_isValid && m_apple_pay_token_isValid && m_issuer_isValid && m_first_name_isValid && m_last_name_isValid && m_shopper_email_isValid && m_telephone_number_isValid && m_google_pay_token_isValid && m_masterpass_transaction_id_isValid && m_samsung_pay_token_isValid && m_iban_isValid && m_billing_sequence_number_isValid && m_visa_checkout_call_id_isValid && true;
}

} // namespace OpenAPI
