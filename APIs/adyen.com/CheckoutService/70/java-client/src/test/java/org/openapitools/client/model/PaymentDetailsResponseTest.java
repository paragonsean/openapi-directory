/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.BalanceCheckResponseAdditionalData;
import org.openapitools.client.model.CheckoutOrderResponse;
import org.openapitools.client.model.FraudResult;
import org.openapitools.client.model.ResponsePaymentMethod;
import org.openapitools.client.model.ThreeDS2ResponseData;
import org.openapitools.client.model.ThreeDS2Result;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentDetailsResponse
 */
public class PaymentDetailsResponseTest {
    private final PaymentDetailsResponse model = new PaymentDetailsResponse();

    /**
     * Model tests for PaymentDetailsResponse
     */
    @Test
    public void testPaymentDetailsResponse() {
        // TODO: test PaymentDetailsResponse
    }

    /**
     * Test the property 'additionalData'
     */
    @Test
    public void additionalDataTest() {
        // TODO: test additionalData
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'donationToken'
     */
    @Test
    public void donationTokenTest() {
        // TODO: test donationToken
    }

    /**
     * Test the property 'fraudResult'
     */
    @Test
    public void fraudResultTest() {
        // TODO: test fraudResult
    }

    /**
     * Test the property 'merchantReference'
     */
    @Test
    public void merchantReferenceTest() {
        // TODO: test merchantReference
    }

    /**
     * Test the property 'order'
     */
    @Test
    public void orderTest() {
        // TODO: test order
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'pspReference'
     */
    @Test
    public void pspReferenceTest() {
        // TODO: test pspReference
    }

    /**
     * Test the property 'refusalReason'
     */
    @Test
    public void refusalReasonTest() {
        // TODO: test refusalReason
    }

    /**
     * Test the property 'refusalReasonCode'
     */
    @Test
    public void refusalReasonCodeTest() {
        // TODO: test refusalReasonCode
    }

    /**
     * Test the property 'resultCode'
     */
    @Test
    public void resultCodeTest() {
        // TODO: test resultCode
    }

    /**
     * Test the property 'shopperLocale'
     */
    @Test
    public void shopperLocaleTest() {
        // TODO: test shopperLocale
    }

    /**
     * Test the property 'threeDS2ResponseData'
     */
    @Test
    public void threeDS2ResponseDataTest() {
        // TODO: test threeDS2ResponseData
    }

    /**
     * Test the property 'threeDS2Result'
     */
    @Test
    public void threeDS2ResultTest() {
        // TODO: test threeDS2Result
    }

    /**
     * Test the property 'threeDSPaymentData'
     */
    @Test
    public void threeDSPaymentDataTest() {
        // TODO: test threeDSPaymentData
    }

}
