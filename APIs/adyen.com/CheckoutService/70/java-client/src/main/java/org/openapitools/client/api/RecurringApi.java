/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ListStoredPaymentMethodsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RecurringApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecurringApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RecurringApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteStoredPaymentMethodsStoredPaymentMethodId
     * @param storedPaymentMethodId The unique identifier of the token. (required)
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (required)
     * @param merchantAccount Your merchant account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content - look at the actual response code for the status of the request.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoredPaymentMethodsStoredPaymentMethodIdCall(String storedPaymentMethodId, String shopperReference, String merchantAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storedPaymentMethods/{storedPaymentMethodId}"
            .replace("{" + "storedPaymentMethodId" + "}", localVarApiClient.escapeString(storedPaymentMethodId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopperReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopperReference", shopperReference));
        }

        if (merchantAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantAccount", merchantAccount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoredPaymentMethodsStoredPaymentMethodIdValidateBeforeCall(String storedPaymentMethodId, String shopperReference, String merchantAccount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'storedPaymentMethodId' is set
        if (storedPaymentMethodId == null) {
            throw new ApiException("Missing the required parameter 'storedPaymentMethodId' when calling deleteStoredPaymentMethodsStoredPaymentMethodId(Async)");
        }

        // verify the required parameter 'shopperReference' is set
        if (shopperReference == null) {
            throw new ApiException("Missing the required parameter 'shopperReference' when calling deleteStoredPaymentMethodsStoredPaymentMethodId(Async)");
        }

        // verify the required parameter 'merchantAccount' is set
        if (merchantAccount == null) {
            throw new ApiException("Missing the required parameter 'merchantAccount' when calling deleteStoredPaymentMethodsStoredPaymentMethodId(Async)");
        }

        return deleteStoredPaymentMethodsStoredPaymentMethodIdCall(storedPaymentMethodId, shopperReference, merchantAccount, _callback);

    }

    /**
     * Delete a token for stored payment details
     * Deletes the token identified in the path. The token can no longer be used with payment requests.
     * @param storedPaymentMethodId The unique identifier of the token. (required)
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (required)
     * @param merchantAccount Your merchant account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content - look at the actual response code for the status of the request.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteStoredPaymentMethodsStoredPaymentMethodId(String storedPaymentMethodId, String shopperReference, String merchantAccount) throws ApiException {
        deleteStoredPaymentMethodsStoredPaymentMethodIdWithHttpInfo(storedPaymentMethodId, shopperReference, merchantAccount);
    }

    /**
     * Delete a token for stored payment details
     * Deletes the token identified in the path. The token can no longer be used with payment requests.
     * @param storedPaymentMethodId The unique identifier of the token. (required)
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (required)
     * @param merchantAccount Your merchant account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content - look at the actual response code for the status of the request.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteStoredPaymentMethodsStoredPaymentMethodIdWithHttpInfo(String storedPaymentMethodId, String shopperReference, String merchantAccount) throws ApiException {
        okhttp3.Call localVarCall = deleteStoredPaymentMethodsStoredPaymentMethodIdValidateBeforeCall(storedPaymentMethodId, shopperReference, merchantAccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a token for stored payment details (asynchronously)
     * Deletes the token identified in the path. The token can no longer be used with payment requests.
     * @param storedPaymentMethodId The unique identifier of the token. (required)
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (required)
     * @param merchantAccount Your merchant account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content - look at the actual response code for the status of the request.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoredPaymentMethodsStoredPaymentMethodIdAsync(String storedPaymentMethodId, String shopperReference, String merchantAccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoredPaymentMethodsStoredPaymentMethodIdValidateBeforeCall(storedPaymentMethodId, shopperReference, merchantAccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoredPaymentMethods
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)
     * @param merchantAccount Your merchant account. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoredPaymentMethodsCall(String shopperReference, String merchantAccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/storedPaymentMethods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shopperReference != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shopperReference", shopperReference));
        }

        if (merchantAccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("merchantAccount", merchantAccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoredPaymentMethodsValidateBeforeCall(String shopperReference, String merchantAccount, final ApiCallback _callback) throws ApiException {
        return getStoredPaymentMethodsCall(shopperReference, merchantAccount, _callback);

    }

    /**
     * Get tokens for stored payment details
     * Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)
     * @param merchantAccount Your merchant account. (optional)
     * @return ListStoredPaymentMethodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ListStoredPaymentMethodsResponse getStoredPaymentMethods(String shopperReference, String merchantAccount) throws ApiException {
        ApiResponse<ListStoredPaymentMethodsResponse> localVarResp = getStoredPaymentMethodsWithHttpInfo(shopperReference, merchantAccount);
        return localVarResp.getData();
    }

    /**
     * Get tokens for stored payment details
     * Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)
     * @param merchantAccount Your merchant account. (optional)
     * @return ApiResponse&lt;ListStoredPaymentMethodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListStoredPaymentMethodsResponse> getStoredPaymentMethodsWithHttpInfo(String shopperReference, String merchantAccount) throws ApiException {
        okhttp3.Call localVarCall = getStoredPaymentMethodsValidateBeforeCall(shopperReference, merchantAccount, null);
        Type localVarReturnType = new TypeToken<ListStoredPaymentMethodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tokens for stored payment details (asynchronously)
     * Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper&#39;s payment. A summary of the stored details is included.  
     * @param shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. &gt; Your reference must not include personally identifiable information (PII), for example name or email address. (optional)
     * @param merchantAccount Your merchant account. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoredPaymentMethodsAsync(String shopperReference, String merchantAccount, final ApiCallback<ListStoredPaymentMethodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoredPaymentMethodsValidateBeforeCall(shopperReference, merchantAccount, _callback);
        Type localVarReturnType = new TypeToken<ListStoredPaymentMethodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
