/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AdditionalDataRatepay
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:55.217248-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AdditionalDataRatepay {
  public static final String SERIALIZED_NAME_RATEPAY_INSTALLMENT_AMOUNT = "ratepay.installmentAmount";
  @SerializedName(SERIALIZED_NAME_RATEPAY_INSTALLMENT_AMOUNT)
  private String ratepayInstallmentAmount;

  public static final String SERIALIZED_NAME_RATEPAY_INTEREST_RATE = "ratepay.interestRate";
  @SerializedName(SERIALIZED_NAME_RATEPAY_INTEREST_RATE)
  private String ratepayInterestRate;

  public static final String SERIALIZED_NAME_RATEPAY_LAST_INSTALLMENT_AMOUNT = "ratepay.lastInstallmentAmount";
  @SerializedName(SERIALIZED_NAME_RATEPAY_LAST_INSTALLMENT_AMOUNT)
  private String ratepayLastInstallmentAmount;

  public static final String SERIALIZED_NAME_RATEPAY_PAYMENT_FIRSTDAY = "ratepay.paymentFirstday";
  @SerializedName(SERIALIZED_NAME_RATEPAY_PAYMENT_FIRSTDAY)
  private String ratepayPaymentFirstday;

  public static final String SERIALIZED_NAME_RATEPAYDATA_DELIVERY_DATE = "ratepaydata.deliveryDate";
  @SerializedName(SERIALIZED_NAME_RATEPAYDATA_DELIVERY_DATE)
  private String ratepaydataDeliveryDate;

  public static final String SERIALIZED_NAME_RATEPAYDATA_DUE_DATE = "ratepaydata.dueDate";
  @SerializedName(SERIALIZED_NAME_RATEPAYDATA_DUE_DATE)
  private String ratepaydataDueDate;

  public static final String SERIALIZED_NAME_RATEPAYDATA_INVOICE_DATE = "ratepaydata.invoiceDate";
  @SerializedName(SERIALIZED_NAME_RATEPAYDATA_INVOICE_DATE)
  private String ratepaydataInvoiceDate;

  public static final String SERIALIZED_NAME_RATEPAYDATA_INVOICE_ID = "ratepaydata.invoiceId";
  @SerializedName(SERIALIZED_NAME_RATEPAYDATA_INVOICE_ID)
  private String ratepaydataInvoiceId;

  public AdditionalDataRatepay() {
  }

  public AdditionalDataRatepay ratepayInstallmentAmount(String ratepayInstallmentAmount) {
    this.ratepayInstallmentAmount = ratepayInstallmentAmount;
    return this;
  }

  /**
   * Amount the customer has to pay each month.
   * @return ratepayInstallmentAmount
   */
  @javax.annotation.Nullable
  public String getRatepayInstallmentAmount() {
    return ratepayInstallmentAmount;
  }

  public void setRatepayInstallmentAmount(String ratepayInstallmentAmount) {
    this.ratepayInstallmentAmount = ratepayInstallmentAmount;
  }


  public AdditionalDataRatepay ratepayInterestRate(String ratepayInterestRate) {
    this.ratepayInterestRate = ratepayInterestRate;
    return this;
  }

  /**
   * Interest rate of this installment.
   * @return ratepayInterestRate
   */
  @javax.annotation.Nullable
  public String getRatepayInterestRate() {
    return ratepayInterestRate;
  }

  public void setRatepayInterestRate(String ratepayInterestRate) {
    this.ratepayInterestRate = ratepayInterestRate;
  }


  public AdditionalDataRatepay ratepayLastInstallmentAmount(String ratepayLastInstallmentAmount) {
    this.ratepayLastInstallmentAmount = ratepayLastInstallmentAmount;
    return this;
  }

  /**
   * Amount of the last installment.
   * @return ratepayLastInstallmentAmount
   */
  @javax.annotation.Nullable
  public String getRatepayLastInstallmentAmount() {
    return ratepayLastInstallmentAmount;
  }

  public void setRatepayLastInstallmentAmount(String ratepayLastInstallmentAmount) {
    this.ratepayLastInstallmentAmount = ratepayLastInstallmentAmount;
  }


  public AdditionalDataRatepay ratepayPaymentFirstday(String ratepayPaymentFirstday) {
    this.ratepayPaymentFirstday = ratepayPaymentFirstday;
    return this;
  }

  /**
   * Calendar day of the first payment.
   * @return ratepayPaymentFirstday
   */
  @javax.annotation.Nullable
  public String getRatepayPaymentFirstday() {
    return ratepayPaymentFirstday;
  }

  public void setRatepayPaymentFirstday(String ratepayPaymentFirstday) {
    this.ratepayPaymentFirstday = ratepayPaymentFirstday;
  }


  public AdditionalDataRatepay ratepaydataDeliveryDate(String ratepaydataDeliveryDate) {
    this.ratepaydataDeliveryDate = ratepaydataDeliveryDate;
    return this;
  }

  /**
   * Date the merchant delivered the goods to the customer.
   * @return ratepaydataDeliveryDate
   */
  @javax.annotation.Nullable
  public String getRatepaydataDeliveryDate() {
    return ratepaydataDeliveryDate;
  }

  public void setRatepaydataDeliveryDate(String ratepaydataDeliveryDate) {
    this.ratepaydataDeliveryDate = ratepaydataDeliveryDate;
  }


  public AdditionalDataRatepay ratepaydataDueDate(String ratepaydataDueDate) {
    this.ratepaydataDueDate = ratepaydataDueDate;
    return this;
  }

  /**
   * Date by which the customer must settle the payment.
   * @return ratepaydataDueDate
   */
  @javax.annotation.Nullable
  public String getRatepaydataDueDate() {
    return ratepaydataDueDate;
  }

  public void setRatepaydataDueDate(String ratepaydataDueDate) {
    this.ratepaydataDueDate = ratepaydataDueDate;
  }


  public AdditionalDataRatepay ratepaydataInvoiceDate(String ratepaydataInvoiceDate) {
    this.ratepaydataInvoiceDate = ratepaydataInvoiceDate;
    return this;
  }

  /**
   * Invoice date, defined by the merchant. If not included, the invoice date is set to the delivery date.
   * @return ratepaydataInvoiceDate
   */
  @javax.annotation.Nullable
  public String getRatepaydataInvoiceDate() {
    return ratepaydataInvoiceDate;
  }

  public void setRatepaydataInvoiceDate(String ratepaydataInvoiceDate) {
    this.ratepaydataInvoiceDate = ratepaydataInvoiceDate;
  }


  public AdditionalDataRatepay ratepaydataInvoiceId(String ratepaydataInvoiceId) {
    this.ratepaydataInvoiceId = ratepaydataInvoiceId;
    return this;
  }

  /**
   * Identification name or number for the invoice, defined by the merchant.
   * @return ratepaydataInvoiceId
   */
  @javax.annotation.Nullable
  public String getRatepaydataInvoiceId() {
    return ratepaydataInvoiceId;
  }

  public void setRatepaydataInvoiceId(String ratepaydataInvoiceId) {
    this.ratepaydataInvoiceId = ratepaydataInvoiceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AdditionalDataRatepay additionalDataRatepay = (AdditionalDataRatepay) o;
    return Objects.equals(this.ratepayInstallmentAmount, additionalDataRatepay.ratepayInstallmentAmount) &&
        Objects.equals(this.ratepayInterestRate, additionalDataRatepay.ratepayInterestRate) &&
        Objects.equals(this.ratepayLastInstallmentAmount, additionalDataRatepay.ratepayLastInstallmentAmount) &&
        Objects.equals(this.ratepayPaymentFirstday, additionalDataRatepay.ratepayPaymentFirstday) &&
        Objects.equals(this.ratepaydataDeliveryDate, additionalDataRatepay.ratepaydataDeliveryDate) &&
        Objects.equals(this.ratepaydataDueDate, additionalDataRatepay.ratepaydataDueDate) &&
        Objects.equals(this.ratepaydataInvoiceDate, additionalDataRatepay.ratepaydataInvoiceDate) &&
        Objects.equals(this.ratepaydataInvoiceId, additionalDataRatepay.ratepaydataInvoiceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ratepayInstallmentAmount, ratepayInterestRate, ratepayLastInstallmentAmount, ratepayPaymentFirstday, ratepaydataDeliveryDate, ratepaydataDueDate, ratepaydataInvoiceDate, ratepaydataInvoiceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AdditionalDataRatepay {\n");
    sb.append("    ratepayInstallmentAmount: ").append(toIndentedString(ratepayInstallmentAmount)).append("\n");
    sb.append("    ratepayInterestRate: ").append(toIndentedString(ratepayInterestRate)).append("\n");
    sb.append("    ratepayLastInstallmentAmount: ").append(toIndentedString(ratepayLastInstallmentAmount)).append("\n");
    sb.append("    ratepayPaymentFirstday: ").append(toIndentedString(ratepayPaymentFirstday)).append("\n");
    sb.append("    ratepaydataDeliveryDate: ").append(toIndentedString(ratepaydataDeliveryDate)).append("\n");
    sb.append("    ratepaydataDueDate: ").append(toIndentedString(ratepaydataDueDate)).append("\n");
    sb.append("    ratepaydataInvoiceDate: ").append(toIndentedString(ratepaydataInvoiceDate)).append("\n");
    sb.append("    ratepaydataInvoiceId: ").append(toIndentedString(ratepaydataInvoiceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ratepay.installmentAmount");
    openapiFields.add("ratepay.interestRate");
    openapiFields.add("ratepay.lastInstallmentAmount");
    openapiFields.add("ratepay.paymentFirstday");
    openapiFields.add("ratepaydata.deliveryDate");
    openapiFields.add("ratepaydata.dueDate");
    openapiFields.add("ratepaydata.invoiceDate");
    openapiFields.add("ratepaydata.invoiceId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AdditionalDataRatepay
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AdditionalDataRatepay.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AdditionalDataRatepay is not found in the empty JSON string", AdditionalDataRatepay.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AdditionalDataRatepay.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AdditionalDataRatepay` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ratepay.installmentAmount") != null && !jsonObj.get("ratepay.installmentAmount").isJsonNull()) && !jsonObj.get("ratepay.installmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepay.installmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepay.installmentAmount").toString()));
      }
      if ((jsonObj.get("ratepay.interestRate") != null && !jsonObj.get("ratepay.interestRate").isJsonNull()) && !jsonObj.get("ratepay.interestRate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepay.interestRate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepay.interestRate").toString()));
      }
      if ((jsonObj.get("ratepay.lastInstallmentAmount") != null && !jsonObj.get("ratepay.lastInstallmentAmount").isJsonNull()) && !jsonObj.get("ratepay.lastInstallmentAmount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepay.lastInstallmentAmount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepay.lastInstallmentAmount").toString()));
      }
      if ((jsonObj.get("ratepay.paymentFirstday") != null && !jsonObj.get("ratepay.paymentFirstday").isJsonNull()) && !jsonObj.get("ratepay.paymentFirstday").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepay.paymentFirstday` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepay.paymentFirstday").toString()));
      }
      if ((jsonObj.get("ratepaydata.deliveryDate") != null && !jsonObj.get("ratepaydata.deliveryDate").isJsonNull()) && !jsonObj.get("ratepaydata.deliveryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepaydata.deliveryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepaydata.deliveryDate").toString()));
      }
      if ((jsonObj.get("ratepaydata.dueDate") != null && !jsonObj.get("ratepaydata.dueDate").isJsonNull()) && !jsonObj.get("ratepaydata.dueDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepaydata.dueDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepaydata.dueDate").toString()));
      }
      if ((jsonObj.get("ratepaydata.invoiceDate") != null && !jsonObj.get("ratepaydata.invoiceDate").isJsonNull()) && !jsonObj.get("ratepaydata.invoiceDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepaydata.invoiceDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepaydata.invoiceDate").toString()));
      }
      if ((jsonObj.get("ratepaydata.invoiceId") != null && !jsonObj.get("ratepaydata.invoiceId").isJsonNull()) && !jsonObj.get("ratepaydata.invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratepaydata.invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratepaydata.invoiceId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AdditionalDataRatepay.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AdditionalDataRatepay' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AdditionalDataRatepay> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataRatepay.class));

       return (TypeAdapter<T>) new TypeAdapter<AdditionalDataRatepay>() {
           @Override
           public void write(JsonWriter out, AdditionalDataRatepay value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AdditionalDataRatepay read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AdditionalDataRatepay given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AdditionalDataRatepay
   * @throws IOException if the JSON string is invalid with respect to AdditionalDataRatepay
   */
  public static AdditionalDataRatepay fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AdditionalDataRatepay.class);
  }

  /**
   * Convert an instance of AdditionalDataRatepay to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

