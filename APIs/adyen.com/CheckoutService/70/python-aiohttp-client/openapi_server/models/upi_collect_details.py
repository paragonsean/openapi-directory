# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpiCollectDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_sequence_number: str=None, checkout_attempt_id: str=None, recurring_detail_reference: str=None, shopper_notification_reference: str=None, stored_payment_method_id: str=None, type: str='upi_collect', virtual_payment_address: str=None):
        """UpiCollectDetails - a model defined in OpenAPI

        :param billing_sequence_number: The billing_sequence_number of this UpiCollectDetails.
        :param checkout_attempt_id: The checkout_attempt_id of this UpiCollectDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this UpiCollectDetails.
        :param shopper_notification_reference: The shopper_notification_reference of this UpiCollectDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this UpiCollectDetails.
        :param type: The type of this UpiCollectDetails.
        :param virtual_payment_address: The virtual_payment_address of this UpiCollectDetails.
        """
        self.openapi_types = {
            'billing_sequence_number': str,
            'checkout_attempt_id': str,
            'recurring_detail_reference': str,
            'shopper_notification_reference': str,
            'stored_payment_method_id': str,
            'type': str,
            'virtual_payment_address': str
        }

        self.attribute_map = {
            'billing_sequence_number': 'billingSequenceNumber',
            'checkout_attempt_id': 'checkoutAttemptId',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_notification_reference': 'shopperNotificationReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type',
            'virtual_payment_address': 'virtualPaymentAddress'
        }

        self._billing_sequence_number = billing_sequence_number
        self._checkout_attempt_id = checkout_attempt_id
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_notification_reference = shopper_notification_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type
        self._virtual_payment_address = virtual_payment_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpiCollectDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpiCollectDetails of this UpiCollectDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_sequence_number(self):
        """Gets the billing_sequence_number of this UpiCollectDetails.

        The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.

        :return: The billing_sequence_number of this UpiCollectDetails.
        :rtype: str
        """
        return self._billing_sequence_number

    @billing_sequence_number.setter
    def billing_sequence_number(self, billing_sequence_number):
        """Sets the billing_sequence_number of this UpiCollectDetails.

        The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.

        :param billing_sequence_number: The billing_sequence_number of this UpiCollectDetails.
        :type billing_sequence_number: str
        """
        if billing_sequence_number is None:
            raise ValueError("Invalid value for `billing_sequence_number`, must not be `None`")

        self._billing_sequence_number = billing_sequence_number

    @property
    def checkout_attempt_id(self):
        """Gets the checkout_attempt_id of this UpiCollectDetails.

        The checkout attempt identifier.

        :return: The checkout_attempt_id of this UpiCollectDetails.
        :rtype: str
        """
        return self._checkout_attempt_id

    @checkout_attempt_id.setter
    def checkout_attempt_id(self, checkout_attempt_id):
        """Sets the checkout_attempt_id of this UpiCollectDetails.

        The checkout attempt identifier.

        :param checkout_attempt_id: The checkout_attempt_id of this UpiCollectDetails.
        :type checkout_attempt_id: str
        """

        self._checkout_attempt_id = checkout_attempt_id

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this UpiCollectDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this UpiCollectDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this UpiCollectDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this UpiCollectDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_notification_reference(self):
        """Gets the shopper_notification_reference of this UpiCollectDetails.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.

        :return: The shopper_notification_reference of this UpiCollectDetails.
        :rtype: str
        """
        return self._shopper_notification_reference

    @shopper_notification_reference.setter
    def shopper_notification_reference(self, shopper_notification_reference):
        """Sets the shopper_notification_reference of this UpiCollectDetails.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.

        :param shopper_notification_reference: The shopper_notification_reference of this UpiCollectDetails.
        :type shopper_notification_reference: str
        """

        self._shopper_notification_reference = shopper_notification_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this UpiCollectDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this UpiCollectDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this UpiCollectDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this UpiCollectDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this UpiCollectDetails.

        **upi_collect**

        :return: The type of this UpiCollectDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpiCollectDetails.

        **upi_collect**

        :param type: The type of this UpiCollectDetails.
        :type type: str
        """
        allowed_values = ["upi_collect"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def virtual_payment_address(self):
        """Gets the virtual_payment_address of this UpiCollectDetails.

        The virtual payment address for UPI.

        :return: The virtual_payment_address of this UpiCollectDetails.
        :rtype: str
        """
        return self._virtual_payment_address

    @virtual_payment_address.setter
    def virtual_payment_address(self, virtual_payment_address):
        """Sets the virtual_payment_address of this UpiCollectDetails.

        The virtual payment address for UPI.

        :param virtual_payment_address: The virtual_payment_address of this UpiCollectDetails.
        :type virtual_payment_address: str
        """

        self._virtual_payment_address = virtual_payment_address
