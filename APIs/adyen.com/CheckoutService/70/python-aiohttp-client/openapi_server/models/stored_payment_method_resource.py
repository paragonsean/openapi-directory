# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StoredPaymentMethodResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, expiry_month: str=None, expiry_year: str=None, external_response_code: str=None, external_token_reference: str=None, holder_name: str=None, iban: str=None, id: str=None, issuer_name: str=None, last_four: str=None, name: str=None, network_tx_reference: str=None, owner_name: str=None, shopper_email: str=None, shopper_reference: str=None, supported_recurring_processing_models: List[str]=None, type: str=None):
        """StoredPaymentMethodResource - a model defined in OpenAPI

        :param brand: The brand of this StoredPaymentMethodResource.
        :param expiry_month: The expiry_month of this StoredPaymentMethodResource.
        :param expiry_year: The expiry_year of this StoredPaymentMethodResource.
        :param external_response_code: The external_response_code of this StoredPaymentMethodResource.
        :param external_token_reference: The external_token_reference of this StoredPaymentMethodResource.
        :param holder_name: The holder_name of this StoredPaymentMethodResource.
        :param iban: The iban of this StoredPaymentMethodResource.
        :param id: The id of this StoredPaymentMethodResource.
        :param issuer_name: The issuer_name of this StoredPaymentMethodResource.
        :param last_four: The last_four of this StoredPaymentMethodResource.
        :param name: The name of this StoredPaymentMethodResource.
        :param network_tx_reference: The network_tx_reference of this StoredPaymentMethodResource.
        :param owner_name: The owner_name of this StoredPaymentMethodResource.
        :param shopper_email: The shopper_email of this StoredPaymentMethodResource.
        :param shopper_reference: The shopper_reference of this StoredPaymentMethodResource.
        :param supported_recurring_processing_models: The supported_recurring_processing_models of this StoredPaymentMethodResource.
        :param type: The type of this StoredPaymentMethodResource.
        """
        self.openapi_types = {
            'brand': str,
            'expiry_month': str,
            'expiry_year': str,
            'external_response_code': str,
            'external_token_reference': str,
            'holder_name': str,
            'iban': str,
            'id': str,
            'issuer_name': str,
            'last_four': str,
            'name': str,
            'network_tx_reference': str,
            'owner_name': str,
            'shopper_email': str,
            'shopper_reference': str,
            'supported_recurring_processing_models': List[str],
            'type': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'external_response_code': 'externalResponseCode',
            'external_token_reference': 'externalTokenReference',
            'holder_name': 'holderName',
            'iban': 'iban',
            'id': 'id',
            'issuer_name': 'issuerName',
            'last_four': 'lastFour',
            'name': 'name',
            'network_tx_reference': 'networkTxReference',
            'owner_name': 'ownerName',
            'shopper_email': 'shopperEmail',
            'shopper_reference': 'shopperReference',
            'supported_recurring_processing_models': 'supportedRecurringProcessingModels',
            'type': 'type'
        }

        self._brand = brand
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._external_response_code = external_response_code
        self._external_token_reference = external_token_reference
        self._holder_name = holder_name
        self._iban = iban
        self._id = id
        self._issuer_name = issuer_name
        self._last_four = last_four
        self._name = name
        self._network_tx_reference = network_tx_reference
        self._owner_name = owner_name
        self._shopper_email = shopper_email
        self._shopper_reference = shopper_reference
        self._supported_recurring_processing_models = supported_recurring_processing_models
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredPaymentMethodResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredPaymentMethodResource of this StoredPaymentMethodResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this StoredPaymentMethodResource.

        The brand of the card.

        :return: The brand of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StoredPaymentMethodResource.

        The brand of the card.

        :param brand: The brand of this StoredPaymentMethodResource.
        :type brand: str
        """

        self._brand = brand

    @property
    def expiry_month(self):
        """Gets the expiry_month of this StoredPaymentMethodResource.

        The month the card expires.

        :return: The expiry_month of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this StoredPaymentMethodResource.

        The month the card expires.

        :param expiry_month: The expiry_month of this StoredPaymentMethodResource.
        :type expiry_month: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this StoredPaymentMethodResource.

        The last two digits of the year the card expires. For example, **22** for the year 2022.

        :return: The expiry_year of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this StoredPaymentMethodResource.

        The last two digits of the year the card expires. For example, **22** for the year 2022.

        :param expiry_year: The expiry_year of this StoredPaymentMethodResource.
        :type expiry_year: str
        """

        self._expiry_year = expiry_year

    @property
    def external_response_code(self):
        """Gets the external_response_code of this StoredPaymentMethodResource.

        The response code returned by an external system (for example after a provisioning operation).

        :return: The external_response_code of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._external_response_code

    @external_response_code.setter
    def external_response_code(self, external_response_code):
        """Sets the external_response_code of this StoredPaymentMethodResource.

        The response code returned by an external system (for example after a provisioning operation).

        :param external_response_code: The external_response_code of this StoredPaymentMethodResource.
        :type external_response_code: str
        """

        self._external_response_code = external_response_code

    @property
    def external_token_reference(self):
        """Gets the external_token_reference of this StoredPaymentMethodResource.

        The token reference of a linked token in an external system (for example a network token reference).

        :return: The external_token_reference of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._external_token_reference

    @external_token_reference.setter
    def external_token_reference(self, external_token_reference):
        """Sets the external_token_reference of this StoredPaymentMethodResource.

        The token reference of a linked token in an external system (for example a network token reference).

        :param external_token_reference: The external_token_reference of this StoredPaymentMethodResource.
        :type external_token_reference: str
        """

        self._external_token_reference = external_token_reference

    @property
    def holder_name(self):
        """Gets the holder_name of this StoredPaymentMethodResource.

        The unique payment method code.

        :return: The holder_name of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this StoredPaymentMethodResource.

        The unique payment method code.

        :param holder_name: The holder_name of this StoredPaymentMethodResource.
        :type holder_name: str
        """

        self._holder_name = holder_name

    @property
    def iban(self):
        """Gets the iban of this StoredPaymentMethodResource.

        The IBAN of the bank account.

        :return: The iban of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this StoredPaymentMethodResource.

        The IBAN of the bank account.

        :param iban: The iban of this StoredPaymentMethodResource.
        :type iban: str
        """

        self._iban = iban

    @property
    def id(self):
        """Gets the id of this StoredPaymentMethodResource.

        A unique identifier of this stored payment method.

        :return: The id of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StoredPaymentMethodResource.

        A unique identifier of this stored payment method.

        :param id: The id of this StoredPaymentMethodResource.
        :type id: str
        """

        self._id = id

    @property
    def issuer_name(self):
        """Gets the issuer_name of this StoredPaymentMethodResource.

        The name of the issuer of token or card.

        :return: The issuer_name of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._issuer_name

    @issuer_name.setter
    def issuer_name(self, issuer_name):
        """Sets the issuer_name of this StoredPaymentMethodResource.

        The name of the issuer of token or card.

        :param issuer_name: The issuer_name of this StoredPaymentMethodResource.
        :type issuer_name: str
        """

        self._issuer_name = issuer_name

    @property
    def last_four(self):
        """Gets the last_four of this StoredPaymentMethodResource.

        The last four digits of the PAN.

        :return: The last_four of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._last_four

    @last_four.setter
    def last_four(self, last_four):
        """Sets the last_four of this StoredPaymentMethodResource.

        The last four digits of the PAN.

        :param last_four: The last_four of this StoredPaymentMethodResource.
        :type last_four: str
        """

        self._last_four = last_four

    @property
    def name(self):
        """Gets the name of this StoredPaymentMethodResource.

        The display name of the stored payment method.

        :return: The name of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StoredPaymentMethodResource.

        The display name of the stored payment method.

        :param name: The name of this StoredPaymentMethodResource.
        :type name: str
        """

        self._name = name

    @property
    def network_tx_reference(self):
        """Gets the network_tx_reference of this StoredPaymentMethodResource.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :return: The network_tx_reference of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._network_tx_reference

    @network_tx_reference.setter
    def network_tx_reference(self, network_tx_reference):
        """Sets the network_tx_reference of this StoredPaymentMethodResource.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :param network_tx_reference: The network_tx_reference of this StoredPaymentMethodResource.
        :type network_tx_reference: str
        """

        self._network_tx_reference = network_tx_reference

    @property
    def owner_name(self):
        """Gets the owner_name of this StoredPaymentMethodResource.

        The name of the bank account holder.

        :return: The owner_name of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this StoredPaymentMethodResource.

        The name of the bank account holder.

        :param owner_name: The owner_name of this StoredPaymentMethodResource.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def shopper_email(self):
        """Gets the shopper_email of this StoredPaymentMethodResource.

        The shopper’s email address.

        :return: The shopper_email of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this StoredPaymentMethodResource.

        The shopper’s email address.

        :param shopper_email: The shopper_email of this StoredPaymentMethodResource.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this StoredPaymentMethodResource.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this StoredPaymentMethodResource.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this StoredPaymentMethodResource.
        :type shopper_reference: str
        """
        if shopper_reference is not None and len(shopper_reference) > 256:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `256`")
        if shopper_reference is not None and len(shopper_reference) < 3:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `3`")

        self._shopper_reference = shopper_reference

    @property
    def supported_recurring_processing_models(self):
        """Gets the supported_recurring_processing_models of this StoredPaymentMethodResource.

        Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.

        :return: The supported_recurring_processing_models of this StoredPaymentMethodResource.
        :rtype: List[str]
        """
        return self._supported_recurring_processing_models

    @supported_recurring_processing_models.setter
    def supported_recurring_processing_models(self, supported_recurring_processing_models):
        """Sets the supported_recurring_processing_models of this StoredPaymentMethodResource.

        Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.

        :param supported_recurring_processing_models: The supported_recurring_processing_models of this StoredPaymentMethodResource.
        :type supported_recurring_processing_models: List[str]
        """

        self._supported_recurring_processing_models = supported_recurring_processing_models

    @property
    def type(self):
        """Gets the type of this StoredPaymentMethodResource.

        The type of payment method.

        :return: The type of this StoredPaymentMethodResource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoredPaymentMethodResource.

        The type of payment method.

        :param type: The type of this StoredPaymentMethodResource.
        :type type: str
        """

        self._type = type
