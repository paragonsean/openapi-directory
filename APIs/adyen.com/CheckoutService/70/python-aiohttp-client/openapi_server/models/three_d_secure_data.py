# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSecureData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_response: str=None, cavv: str=None, cavv_algorithm: str=None, challenge_cancel: str=None, directory_response: str=None, ds_trans_id: str=None, eci: str=None, risk_score: str=None, three_ds_version: str=None, token_authentication_verification_value: str=None, trans_status_reason: str=None, xid: str=None):
        """ThreeDSecureData - a model defined in OpenAPI

        :param authentication_response: The authentication_response of this ThreeDSecureData.
        :param cavv: The cavv of this ThreeDSecureData.
        :param cavv_algorithm: The cavv_algorithm of this ThreeDSecureData.
        :param challenge_cancel: The challenge_cancel of this ThreeDSecureData.
        :param directory_response: The directory_response of this ThreeDSecureData.
        :param ds_trans_id: The ds_trans_id of this ThreeDSecureData.
        :param eci: The eci of this ThreeDSecureData.
        :param risk_score: The risk_score of this ThreeDSecureData.
        :param three_ds_version: The three_ds_version of this ThreeDSecureData.
        :param token_authentication_verification_value: The token_authentication_verification_value of this ThreeDSecureData.
        :param trans_status_reason: The trans_status_reason of this ThreeDSecureData.
        :param xid: The xid of this ThreeDSecureData.
        """
        self.openapi_types = {
            'authentication_response': str,
            'cavv': str,
            'cavv_algorithm': str,
            'challenge_cancel': str,
            'directory_response': str,
            'ds_trans_id': str,
            'eci': str,
            'risk_score': str,
            'three_ds_version': str,
            'token_authentication_verification_value': str,
            'trans_status_reason': str,
            'xid': str
        }

        self.attribute_map = {
            'authentication_response': 'authenticationResponse',
            'cavv': 'cavv',
            'cavv_algorithm': 'cavvAlgorithm',
            'challenge_cancel': 'challengeCancel',
            'directory_response': 'directoryResponse',
            'ds_trans_id': 'dsTransID',
            'eci': 'eci',
            'risk_score': 'riskScore',
            'three_ds_version': 'threeDSVersion',
            'token_authentication_verification_value': 'tokenAuthenticationVerificationValue',
            'trans_status_reason': 'transStatusReason',
            'xid': 'xid'
        }

        self._authentication_response = authentication_response
        self._cavv = cavv
        self._cavv_algorithm = cavv_algorithm
        self._challenge_cancel = challenge_cancel
        self._directory_response = directory_response
        self._ds_trans_id = ds_trans_id
        self._eci = eci
        self._risk_score = risk_score
        self._three_ds_version = three_ds_version
        self._token_authentication_verification_value = token_authentication_verification_value
        self._trans_status_reason = trans_status_reason
        self._xid = xid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSecureData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSecureData of this ThreeDSecureData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_response(self):
        """Gets the authentication_response of this ThreeDSecureData.

        In 3D Secure 1, the authentication response if the shopper was redirected.  In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.

        :return: The authentication_response of this ThreeDSecureData.
        :rtype: str
        """
        return self._authentication_response

    @authentication_response.setter
    def authentication_response(self, authentication_response):
        """Sets the authentication_response of this ThreeDSecureData.

        In 3D Secure 1, the authentication response if the shopper was redirected.  In 3D Secure 2, this is the `transStatus` from the challenge result. If the transaction was frictionless, omit this parameter.

        :param authentication_response: The authentication_response of this ThreeDSecureData.
        :type authentication_response: str
        """
        allowed_values = ["Y", "N", "U", "A"]  # noqa: E501
        if authentication_response not in allowed_values:
            raise ValueError(
                "Invalid value for `authentication_response` ({0}), must be one of {1}"
                .format(authentication_response, allowed_values)
            )

        self._authentication_response = authentication_response

    @property
    def cavv(self):
        """Gets the cavv of this ThreeDSecureData.

        The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).

        :return: The cavv of this ThreeDSecureData.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this ThreeDSecureData.

        The cardholder authentication value (base64 encoded, 20 bytes in a decoded form).

        :param cavv: The cavv of this ThreeDSecureData.
        :type cavv: str
        """

        self._cavv = cavv

    @property
    def cavv_algorithm(self):
        """Gets the cavv_algorithm of this ThreeDSecureData.

        The CAVV algorithm used. Include this only for 3D Secure 1.

        :return: The cavv_algorithm of this ThreeDSecureData.
        :rtype: str
        """
        return self._cavv_algorithm

    @cavv_algorithm.setter
    def cavv_algorithm(self, cavv_algorithm):
        """Sets the cavv_algorithm of this ThreeDSecureData.

        The CAVV algorithm used. Include this only for 3D Secure 1.

        :param cavv_algorithm: The cavv_algorithm of this ThreeDSecureData.
        :type cavv_algorithm: str
        """

        self._cavv_algorithm = cavv_algorithm

    @property
    def challenge_cancel(self):
        """Gets the challenge_cancel of this ThreeDSecureData.

        Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).

        :return: The challenge_cancel of this ThreeDSecureData.
        :rtype: str
        """
        return self._challenge_cancel

    @challenge_cancel.setter
    def challenge_cancel(self, challenge_cancel):
        """Sets the challenge_cancel of this ThreeDSecureData.

        Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).

        :param challenge_cancel: The challenge_cancel of this ThreeDSecureData.
        :type challenge_cancel: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "06", "07"]  # noqa: E501
        if challenge_cancel not in allowed_values:
            raise ValueError(
                "Invalid value for `challenge_cancel` ({0}), must be one of {1}"
                .format(challenge_cancel, allowed_values)
            )

        self._challenge_cancel = challenge_cancel

    @property
    def directory_response(self):
        """Gets the directory_response of this ThreeDSecureData.

        In 3D Secure 1, this is the enrollment response from the 3D directory server.  In 3D Secure 2, this is the `transStatus` from the `ARes`.

        :return: The directory_response of this ThreeDSecureData.
        :rtype: str
        """
        return self._directory_response

    @directory_response.setter
    def directory_response(self, directory_response):
        """Sets the directory_response of this ThreeDSecureData.

        In 3D Secure 1, this is the enrollment response from the 3D directory server.  In 3D Secure 2, this is the `transStatus` from the `ARes`.

        :param directory_response: The directory_response of this ThreeDSecureData.
        :type directory_response: str
        """
        allowed_values = ["A", "C", "D", "I", "N", "R", "U", "Y"]  # noqa: E501
        if directory_response not in allowed_values:
            raise ValueError(
                "Invalid value for `directory_response` ({0}), must be one of {1}"
                .format(directory_response, allowed_values)
            )

        self._directory_response = directory_response

    @property
    def ds_trans_id(self):
        """Gets the ds_trans_id of this ThreeDSecureData.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.

        :return: The ds_trans_id of this ThreeDSecureData.
        :rtype: str
        """
        return self._ds_trans_id

    @ds_trans_id.setter
    def ds_trans_id(self, ds_trans_id):
        """Sets the ds_trans_id of this ThreeDSecureData.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the Directory Server (DS) to identify a single transaction.

        :param ds_trans_id: The ds_trans_id of this ThreeDSecureData.
        :type ds_trans_id: str
        """

        self._ds_trans_id = ds_trans_id

    @property
    def eci(self):
        """Gets the eci of this ThreeDSecureData.

        The electronic commerce indicator.

        :return: The eci of this ThreeDSecureData.
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this ThreeDSecureData.

        The electronic commerce indicator.

        :param eci: The eci of this ThreeDSecureData.
        :type eci: str
        """

        self._eci = eci

    @property
    def risk_score(self):
        """Gets the risk_score of this ThreeDSecureData.

        Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.

        :return: The risk_score of this ThreeDSecureData.
        :rtype: str
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this ThreeDSecureData.

        Risk score calculated by Directory Server (DS). Required for Cartes Bancaires integrations.

        :param risk_score: The risk_score of this ThreeDSecureData.
        :type risk_score: str
        """

        self._risk_score = risk_score

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this ThreeDSecureData.

        The version of the 3D Secure protocol.

        :return: The three_ds_version of this ThreeDSecureData.
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this ThreeDSecureData.

        The version of the 3D Secure protocol.

        :param three_ds_version: The three_ds_version of this ThreeDSecureData.
        :type three_ds_version: str
        """

        self._three_ds_version = three_ds_version

    @property
    def token_authentication_verification_value(self):
        """Gets the token_authentication_verification_value of this ThreeDSecureData.

        Network token authentication verification value (TAVV). The network token cryptogram.

        :return: The token_authentication_verification_value of this ThreeDSecureData.
        :rtype: str
        """
        return self._token_authentication_verification_value

    @token_authentication_verification_value.setter
    def token_authentication_verification_value(self, token_authentication_verification_value):
        """Sets the token_authentication_verification_value of this ThreeDSecureData.

        Network token authentication verification value (TAVV). The network token cryptogram.

        :param token_authentication_verification_value: The token_authentication_verification_value of this ThreeDSecureData.
        :type token_authentication_verification_value: str
        """

        self._token_authentication_verification_value = token_authentication_verification_value

    @property
    def trans_status_reason(self):
        """Gets the trans_status_reason of this ThreeDSecureData.

        Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).

        :return: The trans_status_reason of this ThreeDSecureData.
        :rtype: str
        """
        return self._trans_status_reason

    @trans_status_reason.setter
    def trans_status_reason(self, trans_status_reason):
        """Sets the trans_status_reason of this ThreeDSecureData.

        Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).

        :param trans_status_reason: The trans_status_reason of this ThreeDSecureData.
        :type trans_status_reason: str
        """

        self._trans_status_reason = trans_status_reason

    @property
    def xid(self):
        """Gets the xid of this ThreeDSecureData.

        Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).

        :return: The xid of this ThreeDSecureData.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this ThreeDSecureData.

        Supported for 3D Secure 1. The transaction identifier (Base64-encoded, 20 bytes in a decoded form).

        :param xid: The xid of this ThreeDSecureData.
        :type xid: str
        """

        self._xid = xid
