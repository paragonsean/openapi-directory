# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.balance_check_response_additional_data import BalanceCheckResponseAdditionalData
from openapi_server.models.fraud_result import FraudResult
from openapi_server import util


class CreateOrderResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: BalanceCheckResponseAdditionalData=None, amount: Amount=None, expires_at: str=None, fraud_result: FraudResult=None, order_data: str=None, psp_reference: str=None, reference: str=None, refusal_reason: str=None, remaining_amount: Amount=None, result_code: str=None):
        """CreateOrderResponse - a model defined in OpenAPI

        :param additional_data: The additional_data of this CreateOrderResponse.
        :param amount: The amount of this CreateOrderResponse.
        :param expires_at: The expires_at of this CreateOrderResponse.
        :param fraud_result: The fraud_result of this CreateOrderResponse.
        :param order_data: The order_data of this CreateOrderResponse.
        :param psp_reference: The psp_reference of this CreateOrderResponse.
        :param reference: The reference of this CreateOrderResponse.
        :param refusal_reason: The refusal_reason of this CreateOrderResponse.
        :param remaining_amount: The remaining_amount of this CreateOrderResponse.
        :param result_code: The result_code of this CreateOrderResponse.
        """
        self.openapi_types = {
            'additional_data': BalanceCheckResponseAdditionalData,
            'amount': Amount,
            'expires_at': str,
            'fraud_result': FraudResult,
            'order_data': str,
            'psp_reference': str,
            'reference': str,
            'refusal_reason': str,
            'remaining_amount': Amount,
            'result_code': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'amount': 'amount',
            'expires_at': 'expiresAt',
            'fraud_result': 'fraudResult',
            'order_data': 'orderData',
            'psp_reference': 'pspReference',
            'reference': 'reference',
            'refusal_reason': 'refusalReason',
            'remaining_amount': 'remainingAmount',
            'result_code': 'resultCode'
        }

        self._additional_data = additional_data
        self._amount = amount
        self._expires_at = expires_at
        self._fraud_result = fraud_result
        self._order_data = order_data
        self._psp_reference = psp_reference
        self._reference = reference
        self._refusal_reason = refusal_reason
        self._remaining_amount = remaining_amount
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateOrderResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateOrderResponse of this CreateOrderResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this CreateOrderResponse.


        :return: The additional_data of this CreateOrderResponse.
        :rtype: BalanceCheckResponseAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this CreateOrderResponse.


        :param additional_data: The additional_data of this CreateOrderResponse.
        :type additional_data: BalanceCheckResponseAdditionalData
        """

        self._additional_data = additional_data

    @property
    def amount(self):
        """Gets the amount of this CreateOrderResponse.

        The initial amount of the order.

        :return: The amount of this CreateOrderResponse.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOrderResponse.

        The initial amount of the order.

        :param amount: The amount of this CreateOrderResponse.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def expires_at(self):
        """Gets the expires_at of this CreateOrderResponse.

        The date that the order will expire.

        :return: The expires_at of this CreateOrderResponse.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CreateOrderResponse.

        The date that the order will expire.

        :param expires_at: The expires_at of this CreateOrderResponse.
        :type expires_at: str
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")

        self._expires_at = expires_at

    @property
    def fraud_result(self):
        """Gets the fraud_result of this CreateOrderResponse.

        The fraud result properties of the payment.

        :return: The fraud_result of this CreateOrderResponse.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this CreateOrderResponse.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this CreateOrderResponse.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def order_data(self):
        """Gets the order_data of this CreateOrderResponse.

        The encrypted data that will be used by merchant for adding payments to the order.

        :return: The order_data of this CreateOrderResponse.
        :rtype: str
        """
        return self._order_data

    @order_data.setter
    def order_data(self, order_data):
        """Sets the order_data of this CreateOrderResponse.

        The encrypted data that will be used by merchant for adding payments to the order.

        :param order_data: The order_data of this CreateOrderResponse.
        :type order_data: str
        """
        if order_data is None:
            raise ValueError("Invalid value for `order_data`, must not be `None`")

        self._order_data = order_data

    @property
    def psp_reference(self):
        """Gets the psp_reference of this CreateOrderResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this CreateOrderResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this CreateOrderResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this CreateOrderResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def reference(self):
        """Gets the reference of this CreateOrderResponse.

        The reference provided by merchant for creating the order.

        :return: The reference of this CreateOrderResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateOrderResponse.

        The reference provided by merchant for creating the order.

        :param reference: The reference of this CreateOrderResponse.
        :type reference: str
        """

        self._reference = reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this CreateOrderResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this CreateOrderResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this CreateOrderResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this CreateOrderResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def remaining_amount(self):
        """Gets the remaining_amount of this CreateOrderResponse.

        The remaining amount in the order.

        :return: The remaining_amount of this CreateOrderResponse.
        :rtype: Amount
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount):
        """Sets the remaining_amount of this CreateOrderResponse.

        The remaining amount in the order.

        :param remaining_amount: The remaining_amount of this CreateOrderResponse.
        :type remaining_amount: Amount
        """
        if remaining_amount is None:
            raise ValueError("Invalid value for `remaining_amount`, must not be `None`")

        self._remaining_amount = remaining_amount

    @property
    def result_code(self):
        """Gets the result_code of this CreateOrderResponse.

        The result of the order creation request.  The value is always **Success**.

        :return: The result_code of this CreateOrderResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this CreateOrderResponse.

        The result of the order creation request.  The value is always **Success**.

        :param result_code: The result_code of this CreateOrderResponse.
        :type result_code: str
        """
        allowed_values = ["Success"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code
