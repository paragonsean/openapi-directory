# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EcontextVoucherDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkout_attempt_id: str=None, first_name: str=None, last_name: str=None, shopper_email: str=None, telephone_number: str=None, type: str=None):
        """EcontextVoucherDetails - a model defined in OpenAPI

        :param checkout_attempt_id: The checkout_attempt_id of this EcontextVoucherDetails.
        :param first_name: The first_name of this EcontextVoucherDetails.
        :param last_name: The last_name of this EcontextVoucherDetails.
        :param shopper_email: The shopper_email of this EcontextVoucherDetails.
        :param telephone_number: The telephone_number of this EcontextVoucherDetails.
        :param type: The type of this EcontextVoucherDetails.
        """
        self.openapi_types = {
            'checkout_attempt_id': str,
            'first_name': str,
            'last_name': str,
            'shopper_email': str,
            'telephone_number': str,
            'type': str
        }

        self.attribute_map = {
            'checkout_attempt_id': 'checkoutAttemptId',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'shopper_email': 'shopperEmail',
            'telephone_number': 'telephoneNumber',
            'type': 'type'
        }

        self._checkout_attempt_id = checkout_attempt_id
        self._first_name = first_name
        self._last_name = last_name
        self._shopper_email = shopper_email
        self._telephone_number = telephone_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcontextVoucherDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EcontextVoucherDetails of this EcontextVoucherDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkout_attempt_id(self):
        """Gets the checkout_attempt_id of this EcontextVoucherDetails.

        The checkout attempt identifier.

        :return: The checkout_attempt_id of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._checkout_attempt_id

    @checkout_attempt_id.setter
    def checkout_attempt_id(self, checkout_attempt_id):
        """Sets the checkout_attempt_id of this EcontextVoucherDetails.

        The checkout attempt identifier.

        :param checkout_attempt_id: The checkout_attempt_id of this EcontextVoucherDetails.
        :type checkout_attempt_id: str
        """

        self._checkout_attempt_id = checkout_attempt_id

    @property
    def first_name(self):
        """Gets the first_name of this EcontextVoucherDetails.

        The shopper's first name.

        :return: The first_name of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this EcontextVoucherDetails.

        The shopper's first name.

        :param first_name: The first_name of this EcontextVoucherDetails.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this EcontextVoucherDetails.

        The shopper's last name.

        :return: The last_name of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this EcontextVoucherDetails.

        The shopper's last name.

        :param last_name: The last_name of this EcontextVoucherDetails.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def shopper_email(self):
        """Gets the shopper_email of this EcontextVoucherDetails.

        The shopper's email.

        :return: The shopper_email of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this EcontextVoucherDetails.

        The shopper's email.

        :param shopper_email: The shopper_email of this EcontextVoucherDetails.
        :type shopper_email: str
        """
        if shopper_email is None:
            raise ValueError("Invalid value for `shopper_email`, must not be `None`")

        self._shopper_email = shopper_email

    @property
    def telephone_number(self):
        """Gets the telephone_number of this EcontextVoucherDetails.

        The shopper's contact number. It must have an international number format, for example **+31 20 779 1846**. Formats like **+31 (0)20 779 1846** or **0031 20 779 1846** are not accepted.

        :return: The telephone_number of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this EcontextVoucherDetails.

        The shopper's contact number. It must have an international number format, for example **+31 20 779 1846**. Formats like **+31 (0)20 779 1846** or **0031 20 779 1846** are not accepted.

        :param telephone_number: The telephone_number of this EcontextVoucherDetails.
        :type telephone_number: str
        """
        if telephone_number is None:
            raise ValueError("Invalid value for `telephone_number`, must not be `None`")

        self._telephone_number = telephone_number

    @property
    def type(self):
        """Gets the type of this EcontextVoucherDetails.

        **econtextvoucher**

        :return: The type of this EcontextVoucherDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EcontextVoucherDetails.

        **econtextvoucher**

        :param type: The type of this EcontextVoucherDetails.
        :type type: str
        """
        allowed_values = ["econtext_seveneleven", "econtext_stores"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
