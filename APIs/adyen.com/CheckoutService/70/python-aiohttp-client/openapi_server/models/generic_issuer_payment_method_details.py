# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenericIssuerPaymentMethodDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkout_attempt_id: str=None, issuer: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str=None):
        """GenericIssuerPaymentMethodDetails - a model defined in OpenAPI

        :param checkout_attempt_id: The checkout_attempt_id of this GenericIssuerPaymentMethodDetails.
        :param issuer: The issuer of this GenericIssuerPaymentMethodDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this GenericIssuerPaymentMethodDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this GenericIssuerPaymentMethodDetails.
        :param type: The type of this GenericIssuerPaymentMethodDetails.
        """
        self.openapi_types = {
            'checkout_attempt_id': str,
            'issuer': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str
        }

        self.attribute_map = {
            'checkout_attempt_id': 'checkoutAttemptId',
            'issuer': 'issuer',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type'
        }

        self._checkout_attempt_id = checkout_attempt_id
        self._issuer = issuer
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenericIssuerPaymentMethodDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenericIssuerPaymentMethodDetails of this GenericIssuerPaymentMethodDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkout_attempt_id(self):
        """Gets the checkout_attempt_id of this GenericIssuerPaymentMethodDetails.

        The checkout attempt identifier.

        :return: The checkout_attempt_id of this GenericIssuerPaymentMethodDetails.
        :rtype: str
        """
        return self._checkout_attempt_id

    @checkout_attempt_id.setter
    def checkout_attempt_id(self, checkout_attempt_id):
        """Sets the checkout_attempt_id of this GenericIssuerPaymentMethodDetails.

        The checkout attempt identifier.

        :param checkout_attempt_id: The checkout_attempt_id of this GenericIssuerPaymentMethodDetails.
        :type checkout_attempt_id: str
        """

        self._checkout_attempt_id = checkout_attempt_id

    @property
    def issuer(self):
        """Gets the issuer of this GenericIssuerPaymentMethodDetails.

        The issuer id of the shopper's selected bank.

        :return: The issuer of this GenericIssuerPaymentMethodDetails.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this GenericIssuerPaymentMethodDetails.

        The issuer id of the shopper's selected bank.

        :param issuer: The issuer of this GenericIssuerPaymentMethodDetails.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this GenericIssuerPaymentMethodDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this GenericIssuerPaymentMethodDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this GenericIssuerPaymentMethodDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this GenericIssuerPaymentMethodDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this GenericIssuerPaymentMethodDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this GenericIssuerPaymentMethodDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this GenericIssuerPaymentMethodDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this GenericIssuerPaymentMethodDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this GenericIssuerPaymentMethodDetails.

        **genericissuer**

        :return: The type of this GenericIssuerPaymentMethodDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GenericIssuerPaymentMethodDetails.

        **genericissuer**

        :param type: The type of this GenericIssuerPaymentMethodDetails.
        :type type: str
        """
        allowed_values = ["onlineBanking_PL", "eps", "onlineBanking_SK", "onlineBanking_CZ"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
