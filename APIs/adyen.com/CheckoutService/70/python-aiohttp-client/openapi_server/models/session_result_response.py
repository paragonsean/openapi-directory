# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SessionResultResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, status: str=None):
        """SessionResultResponse - a model defined in OpenAPI

        :param id: The id of this SessionResultResponse.
        :param status: The status of this SessionResultResponse.
        """
        self.openapi_types = {
            'id': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'status': 'status'
        }

        self._id = id
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionResultResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionResultResponse of this SessionResultResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this SessionResultResponse.

        A unique identifier of the session.

        :return: The id of this SessionResultResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionResultResponse.

        A unique identifier of the session.

        :param id: The id of this SessionResultResponse.
        :type id: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this SessionResultResponse.

        The status of the session. The status included in the response doesn't get updated. Don't make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. 

        :return: The status of this SessionResultResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SessionResultResponse.

        The status of the session. The status included in the response doesn't get updated. Don't make the request again to check for payment status updates.  Possible values:           * **completed** – The shopper completed the payment. This means that the payment was authorized.          * **paymentPending** – The shopper is in the process of making the payment. This applies to payment methods with an asynchronous flow.          * **refused** – The session has been refused, due to too many refused payment attempts. Shoppers can no longer complete the payment with this session.          * **canceled** – The shopper canceled the payment.          * **active** – The session is still active and can be paid.          * **expired** – The session expired (default: 1 hour after session creation). Shoppers can no longer complete the payment with this session. 

        :param status: The status of this SessionResultResponse.
        :type status: str
        """
        allowed_values = ["active", "canceled", "completed", "expired", "paymentPending", "refused"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
