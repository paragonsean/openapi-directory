# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, challenge_window_size: str=None, data_only: str=None, native_three_ds: str=None, three_ds_version: str=None):
        """ThreeDSRequestData - a model defined in OpenAPI

        :param challenge_window_size: The challenge_window_size of this ThreeDSRequestData.
        :param data_only: The data_only of this ThreeDSRequestData.
        :param native_three_ds: The native_three_ds of this ThreeDSRequestData.
        :param three_ds_version: The three_ds_version of this ThreeDSRequestData.
        """
        self.openapi_types = {
            'challenge_window_size': str,
            'data_only': str,
            'native_three_ds': str,
            'three_ds_version': str
        }

        self.attribute_map = {
            'challenge_window_size': 'challengeWindowSize',
            'data_only': 'dataOnly',
            'native_three_ds': 'nativeThreeDS',
            'three_ds_version': 'threeDSVersion'
        }

        self._challenge_window_size = challenge_window_size
        self._data_only = data_only
        self._native_three_ds = native_three_ds
        self._three_ds_version = three_ds_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSRequestData of this ThreeDSRequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def challenge_window_size(self):
        """Gets the challenge_window_size of this ThreeDSRequestData.

        Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen

        :return: The challenge_window_size of this ThreeDSRequestData.
        :rtype: str
        """
        return self._challenge_window_size

    @challenge_window_size.setter
    def challenge_window_size(self, challenge_window_size):
        """Sets the challenge_window_size of this ThreeDSRequestData.

        Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen

        :param challenge_window_size: The challenge_window_size of this ThreeDSRequestData.
        :type challenge_window_size: str
        """
        allowed_values = ["01", "02", "03", "04", "05"]  # noqa: E501
        if challenge_window_size not in allowed_values:
            raise ValueError(
                "Invalid value for `challenge_window_size` ({0}), must be one of {1}"
                .format(challenge_window_size, allowed_values)
            )

        self._challenge_window_size = challenge_window_size

    @property
    def data_only(self):
        """Gets the data_only of this ThreeDSRequestData.

        Flag for data only flow.

        :return: The data_only of this ThreeDSRequestData.
        :rtype: str
        """
        return self._data_only

    @data_only.setter
    def data_only(self, data_only):
        """Sets the data_only of this ThreeDSRequestData.

        Flag for data only flow.

        :param data_only: The data_only of this ThreeDSRequestData.
        :type data_only: str
        """
        allowed_values = ["false", "true"]  # noqa: E501
        if data_only not in allowed_values:
            raise ValueError(
                "Invalid value for `data_only` ({0}), must be one of {1}"
                .format(data_only, allowed_values)
            )

        self._data_only = data_only

    @property
    def native_three_ds(self):
        """Gets the native_three_ds of this ThreeDSRequestData.

        Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available.

        :return: The native_three_ds of this ThreeDSRequestData.
        :rtype: str
        """
        return self._native_three_ds

    @native_three_ds.setter
    def native_three_ds(self, native_three_ds):
        """Sets the native_three_ds of this ThreeDSRequestData.

        Indicates if [native 3D Secure authentication](https://docs.adyen.com/online-payments/3d-secure/native-3ds2) should be used when available.  Possible values: * **preferred**: Use native 3D Secure authentication when available.

        :param native_three_ds: The native_three_ds of this ThreeDSRequestData.
        :type native_three_ds: str
        """
        allowed_values = ["preferred"]  # noqa: E501
        if native_three_ds not in allowed_values:
            raise ValueError(
                "Invalid value for `native_three_ds` ({0}), must be one of {1}"
                .format(native_three_ds, allowed_values)
            )

        self._native_three_ds = native_three_ds

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this ThreeDSRequestData.

        The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**

        :return: The three_ds_version of this ThreeDSRequestData.
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this ThreeDSRequestData.

        The version of 3D Secure to use.  Possible values:  * **2.1.0** * **2.2.0**

        :param three_ds_version: The three_ds_version of this ThreeDSRequestData.
        :type three_ds_version: str
        """
        allowed_values = ["2.1.0", "2.2.0"]  # noqa: E501
        if three_ds_version not in allowed_values:
            raise ValueError(
                "Invalid value for `three_ds_version` ({0}), must be one of {1}"
                .format(three_ds_version, allowed_values)
            )

        self._three_ds_version = three_ds_version
