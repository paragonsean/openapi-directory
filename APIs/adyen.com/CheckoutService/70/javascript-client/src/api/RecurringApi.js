/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ListStoredPaymentMethodsResponse from '../model/ListStoredPaymentMethodsResponse';

/**
* Recurring service.
* @module api/RecurringApi
* @version 70
*/
export default class RecurringApi {

    /**
    * Constructs a new RecurringApi. 
    * @alias module:api/RecurringApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteStoredPaymentMethodsStoredPaymentMethodId operation.
     * @callback module:api/RecurringApi~deleteStoredPaymentMethodsStoredPaymentMethodIdCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a token for stored payment details
     * Deletes the token identified in the path. The token can no longer be used with payment requests.
     * @param {String} storedPaymentMethodId The unique identifier of the token.
     * @param {String} shopperReference Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
     * @param {String} merchantAccount Your merchant account.
     * @param {module:api/RecurringApi~deleteStoredPaymentMethodsStoredPaymentMethodIdCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteStoredPaymentMethodsStoredPaymentMethodId(storedPaymentMethodId, shopperReference, merchantAccount, callback) {
      let postBody = null;
      // verify the required parameter 'storedPaymentMethodId' is set
      if (storedPaymentMethodId === undefined || storedPaymentMethodId === null) {
        throw new Error("Missing the required parameter 'storedPaymentMethodId' when calling deleteStoredPaymentMethodsStoredPaymentMethodId");
      }
      // verify the required parameter 'shopperReference' is set
      if (shopperReference === undefined || shopperReference === null) {
        throw new Error("Missing the required parameter 'shopperReference' when calling deleteStoredPaymentMethodsStoredPaymentMethodId");
      }
      // verify the required parameter 'merchantAccount' is set
      if (merchantAccount === undefined || merchantAccount === null) {
        throw new Error("Missing the required parameter 'merchantAccount' when calling deleteStoredPaymentMethodsStoredPaymentMethodId");
      }

      let pathParams = {
        'storedPaymentMethodId': storedPaymentMethodId
      };
      let queryParams = {
        'shopperReference': shopperReference,
        'merchantAccount': merchantAccount
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/storedPaymentMethods/{storedPaymentMethodId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStoredPaymentMethods operation.
     * @callback module:api/RecurringApi~getStoredPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListStoredPaymentMethodsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tokens for stored payment details
     * Lists the tokens for stored payment details for the shopper identified in the path, if there are any available. The token ID can be used with payment requests for the shopper's payment. A summary of the stored details is included.  
     * @param {Object} opts Optional parameters
     * @param {String} [shopperReference] Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
     * @param {String} [merchantAccount] Your merchant account.
     * @param {module:api/RecurringApi~getStoredPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListStoredPaymentMethodsResponse}
     */
    getStoredPaymentMethods(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'shopperReference': opts['shopperReference'],
        'merchantAccount': opts['merchantAccount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListStoredPaymentMethodsResponse;
      return this.apiClient.callApi(
        '/storedPaymentMethods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
