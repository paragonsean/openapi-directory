/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalDataSubMerchant model module.
 * @module model/AdditionalDataSubMerchant
 * @version 70
 */
class AdditionalDataSubMerchant {
    /**
     * Constructs a new <code>AdditionalDataSubMerchant</code>.
     * @alias module:model/AdditionalDataSubMerchant
     */
    constructor() { 
        
        AdditionalDataSubMerchant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalDataSubMerchant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalDataSubMerchant} obj Optional instance to populate.
     * @return {module:model/AdditionalDataSubMerchant} The populated <code>AdditionalDataSubMerchant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalDataSubMerchant();

            if (data.hasOwnProperty('subMerchant.numberOfSubSellers')) {
                obj['subMerchant.numberOfSubSellers'] = ApiClient.convertToType(data['subMerchant.numberOfSubSellers'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].city')) {
                obj['subMerchant.subSeller[subSellerNr].city'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].city'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].country')) {
                obj['subMerchant.subSeller[subSellerNr].country'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].country'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].id')) {
                obj['subMerchant.subSeller[subSellerNr].id'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].id'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].mcc')) {
                obj['subMerchant.subSeller[subSellerNr].mcc'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].mcc'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].name')) {
                obj['subMerchant.subSeller[subSellerNr].name'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].name'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].postalCode')) {
                obj['subMerchant.subSeller[subSellerNr].postalCode'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].postalCode'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].state')) {
                obj['subMerchant.subSeller[subSellerNr].state'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].state'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].street')) {
                obj['subMerchant.subSeller[subSellerNr].street'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].street'], 'String');
            }
            if (data.hasOwnProperty('subMerchant.subSeller[subSellerNr].taxId')) {
                obj['subMerchant.subSeller[subSellerNr].taxId'] = ApiClient.convertToType(data['subMerchant.subSeller[subSellerNr].taxId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalDataSubMerchant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalDataSubMerchant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['subMerchant.numberOfSubSellers'] && !(typeof data['subMerchant.numberOfSubSellers'] === 'string' || data['subMerchant.numberOfSubSellers'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.numberOfSubSellers` to be a primitive type in the JSON string but got " + data['subMerchant.numberOfSubSellers']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].city'] && !(typeof data['subMerchant.subSeller[subSellerNr].city'] === 'string' || data['subMerchant.subSeller[subSellerNr].city'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].city` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].city']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].country'] && !(typeof data['subMerchant.subSeller[subSellerNr].country'] === 'string' || data['subMerchant.subSeller[subSellerNr].country'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].country` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].country']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].id'] && !(typeof data['subMerchant.subSeller[subSellerNr].id'] === 'string' || data['subMerchant.subSeller[subSellerNr].id'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].id` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].id']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].mcc'] && !(typeof data['subMerchant.subSeller[subSellerNr].mcc'] === 'string' || data['subMerchant.subSeller[subSellerNr].mcc'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].mcc` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].mcc']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].name'] && !(typeof data['subMerchant.subSeller[subSellerNr].name'] === 'string' || data['subMerchant.subSeller[subSellerNr].name'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].name` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].name']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].postalCode'] && !(typeof data['subMerchant.subSeller[subSellerNr].postalCode'] === 'string' || data['subMerchant.subSeller[subSellerNr].postalCode'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].postalCode` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].postalCode']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].state'] && !(typeof data['subMerchant.subSeller[subSellerNr].state'] === 'string' || data['subMerchant.subSeller[subSellerNr].state'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].state` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].state']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].street'] && !(typeof data['subMerchant.subSeller[subSellerNr].street'] === 'string' || data['subMerchant.subSeller[subSellerNr].street'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].street` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].street']);
        }
        // ensure the json data is a string
        if (data['subMerchant.subSeller[subSellerNr].taxId'] && !(typeof data['subMerchant.subSeller[subSellerNr].taxId'] === 'string' || data['subMerchant.subSeller[subSellerNr].taxId'] instanceof String)) {
            throw new Error("Expected the field `subMerchant.subSeller[subSellerNr].taxId` to be a primitive type in the JSON string but got " + data['subMerchant.subSeller[subSellerNr].taxId']);
        }

        return true;
    }


}



/**
 * Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.
 * @member {String} subMerchant.numberOfSubSellers
 */
AdditionalDataSubMerchant.prototype['subMerchant.numberOfSubSellers'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters
 * @member {String} subMerchant.subSeller[subSellerNr].city
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].city'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters
 * @member {String} subMerchant.subSeller[subSellerNr].country
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].country'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters
 * @member {String} subMerchant.subSeller[subSellerNr].id
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].id'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits
 * @member {String} subMerchant.subSeller[subSellerNr].mcc
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].mcc'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters
 * @member {String} subMerchant.subSeller[subSellerNr].name
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].name'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes. * Format: Numeric * Fixed length: 8 digits
 * @member {String} subMerchant.subSeller[subSellerNr].postalCode
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].postalCode'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters
 * @member {String} subMerchant.subSeller[subSellerNr].state
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].state'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 60 characters
 * @member {String} subMerchant.subSeller[subSellerNr].street
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].street'] = undefined;

/**
 * Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ
 * @member {String} subMerchant.subSeller[subSellerNr].taxId
 */
AdditionalDataSubMerchant.prototype['subMerchant.subSeller[subSellerNr].taxId'] = undefined;






export default AdditionalDataSubMerchant;

