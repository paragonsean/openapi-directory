/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StoredPaymentMethodResource model module.
 * @module model/StoredPaymentMethodResource
 * @version 70
 */
class StoredPaymentMethodResource {
    /**
     * Constructs a new <code>StoredPaymentMethodResource</code>.
     * @alias module:model/StoredPaymentMethodResource
     */
    constructor() { 
        
        StoredPaymentMethodResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoredPaymentMethodResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredPaymentMethodResource} obj Optional instance to populate.
     * @return {module:model/StoredPaymentMethodResource} The populated <code>StoredPaymentMethodResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredPaymentMethodResource();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('expiryMonth')) {
                obj['expiryMonth'] = ApiClient.convertToType(data['expiryMonth'], 'String');
            }
            if (data.hasOwnProperty('expiryYear')) {
                obj['expiryYear'] = ApiClient.convertToType(data['expiryYear'], 'String');
            }
            if (data.hasOwnProperty('externalResponseCode')) {
                obj['externalResponseCode'] = ApiClient.convertToType(data['externalResponseCode'], 'String');
            }
            if (data.hasOwnProperty('externalTokenReference')) {
                obj['externalTokenReference'] = ApiClient.convertToType(data['externalTokenReference'], 'String');
            }
            if (data.hasOwnProperty('holderName')) {
                obj['holderName'] = ApiClient.convertToType(data['holderName'], 'String');
            }
            if (data.hasOwnProperty('iban')) {
                obj['iban'] = ApiClient.convertToType(data['iban'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('issuerName')) {
                obj['issuerName'] = ApiClient.convertToType(data['issuerName'], 'String');
            }
            if (data.hasOwnProperty('lastFour')) {
                obj['lastFour'] = ApiClient.convertToType(data['lastFour'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkTxReference')) {
                obj['networkTxReference'] = ApiClient.convertToType(data['networkTxReference'], 'String');
            }
            if (data.hasOwnProperty('ownerName')) {
                obj['ownerName'] = ApiClient.convertToType(data['ownerName'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('supportedRecurringProcessingModels')) {
                obj['supportedRecurringProcessingModels'] = ApiClient.convertToType(data['supportedRecurringProcessingModels'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredPaymentMethodResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredPaymentMethodResource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['expiryMonth'] && !(typeof data['expiryMonth'] === 'string' || data['expiryMonth'] instanceof String)) {
            throw new Error("Expected the field `expiryMonth` to be a primitive type in the JSON string but got " + data['expiryMonth']);
        }
        // ensure the json data is a string
        if (data['expiryYear'] && !(typeof data['expiryYear'] === 'string' || data['expiryYear'] instanceof String)) {
            throw new Error("Expected the field `expiryYear` to be a primitive type in the JSON string but got " + data['expiryYear']);
        }
        // ensure the json data is a string
        if (data['externalResponseCode'] && !(typeof data['externalResponseCode'] === 'string' || data['externalResponseCode'] instanceof String)) {
            throw new Error("Expected the field `externalResponseCode` to be a primitive type in the JSON string but got " + data['externalResponseCode']);
        }
        // ensure the json data is a string
        if (data['externalTokenReference'] && !(typeof data['externalTokenReference'] === 'string' || data['externalTokenReference'] instanceof String)) {
            throw new Error("Expected the field `externalTokenReference` to be a primitive type in the JSON string but got " + data['externalTokenReference']);
        }
        // ensure the json data is a string
        if (data['holderName'] && !(typeof data['holderName'] === 'string' || data['holderName'] instanceof String)) {
            throw new Error("Expected the field `holderName` to be a primitive type in the JSON string but got " + data['holderName']);
        }
        // ensure the json data is a string
        if (data['iban'] && !(typeof data['iban'] === 'string' || data['iban'] instanceof String)) {
            throw new Error("Expected the field `iban` to be a primitive type in the JSON string but got " + data['iban']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['issuerName'] && !(typeof data['issuerName'] === 'string' || data['issuerName'] instanceof String)) {
            throw new Error("Expected the field `issuerName` to be a primitive type in the JSON string but got " + data['issuerName']);
        }
        // ensure the json data is a string
        if (data['lastFour'] && !(typeof data['lastFour'] === 'string' || data['lastFour'] instanceof String)) {
            throw new Error("Expected the field `lastFour` to be a primitive type in the JSON string but got " + data['lastFour']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['networkTxReference'] && !(typeof data['networkTxReference'] === 'string' || data['networkTxReference'] instanceof String)) {
            throw new Error("Expected the field `networkTxReference` to be a primitive type in the JSON string but got " + data['networkTxReference']);
        }
        // ensure the json data is a string
        if (data['ownerName'] && !(typeof data['ownerName'] === 'string' || data['ownerName'] instanceof String)) {
            throw new Error("Expected the field `ownerName` to be a primitive type in the JSON string but got " + data['ownerName']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedRecurringProcessingModels'])) {
            throw new Error("Expected the field `supportedRecurringProcessingModels` to be an array in the JSON data but got " + data['supportedRecurringProcessingModels']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The brand of the card.
 * @member {String} brand
 */
StoredPaymentMethodResource.prototype['brand'] = undefined;

/**
 * The month the card expires.
 * @member {String} expiryMonth
 */
StoredPaymentMethodResource.prototype['expiryMonth'] = undefined;

/**
 * The last two digits of the year the card expires. For example, **22** for the year 2022.
 * @member {String} expiryYear
 */
StoredPaymentMethodResource.prototype['expiryYear'] = undefined;

/**
 * The response code returned by an external system (for example after a provisioning operation).
 * @member {String} externalResponseCode
 */
StoredPaymentMethodResource.prototype['externalResponseCode'] = undefined;

/**
 * The token reference of a linked token in an external system (for example a network token reference).
 * @member {String} externalTokenReference
 */
StoredPaymentMethodResource.prototype['externalTokenReference'] = undefined;

/**
 * The unique payment method code.
 * @member {String} holderName
 */
StoredPaymentMethodResource.prototype['holderName'] = undefined;

/**
 * The IBAN of the bank account.
 * @member {String} iban
 */
StoredPaymentMethodResource.prototype['iban'] = undefined;

/**
 * A unique identifier of this stored payment method.
 * @member {String} id
 */
StoredPaymentMethodResource.prototype['id'] = undefined;

/**
 * The name of the issuer of token or card.
 * @member {String} issuerName
 */
StoredPaymentMethodResource.prototype['issuerName'] = undefined;

/**
 * The last four digits of the PAN.
 * @member {String} lastFour
 */
StoredPaymentMethodResource.prototype['lastFour'] = undefined;

/**
 * The display name of the stored payment method.
 * @member {String} name
 */
StoredPaymentMethodResource.prototype['name'] = undefined;

/**
 * Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.
 * @member {String} networkTxReference
 */
StoredPaymentMethodResource.prototype['networkTxReference'] = undefined;

/**
 * The name of the bank account holder.
 * @member {String} ownerName
 */
StoredPaymentMethodResource.prototype['ownerName'] = undefined;

/**
 * The shopper’s email address.
 * @member {String} shopperEmail
 */
StoredPaymentMethodResource.prototype['shopperEmail'] = undefined;

/**
 * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
StoredPaymentMethodResource.prototype['shopperReference'] = undefined;

/**
 * Defines a recurring payment type. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount.
 * @member {Array.<String>} supportedRecurringProcessingModels
 */
StoredPaymentMethodResource.prototype['supportedRecurringProcessingModels'] = undefined;

/**
 * The type of payment method.
 * @member {String} type
 */
StoredPaymentMethodResource.prototype['type'] = undefined;






export default StoredPaymentMethodResource;

