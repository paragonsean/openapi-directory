/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModificationsApi_H
#define OAI_OAIModificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIPaymentAmountUpdateRequest.h"
#include "OAIPaymentAmountUpdateResponse.h"
#include "OAIPaymentCancelRequest.h"
#include "OAIPaymentCancelResponse.h"
#include "OAIPaymentCaptureRequest.h"
#include "OAIPaymentCaptureResponse.h"
#include "OAIPaymentRefundRequest.h"
#include "OAIPaymentRefundResponse.h"
#include "OAIPaymentReversalRequest.h"
#include "OAIPaymentReversalResponse.h"
#include "OAIServiceError.h"
#include "OAIStandalonePaymentCancelRequest.h"
#include "OAIStandalonePaymentCancelResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIModificationsApi : public QObject {
    Q_OBJECT

public:
    OAIModificationsApi(const int timeOut = 0);
    ~OAIModificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_standalone_payment_cancel_request OAIStandalonePaymentCancelRequest [optional]
    */
    virtual void postCancels(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIStandalonePaymentCancelRequest> &oai_standalone_payment_cancel_request = ::OpenAPI::OptionalParam<OAIStandalonePaymentCancelRequest>());

    /**
    * @param[in]  payment_psp_reference QString [required]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_amount_update_request OAIPaymentAmountUpdateRequest [optional]
    */
    virtual void postPaymentsPaymentPspReferenceAmountUpdates(const QString &payment_psp_reference, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentAmountUpdateRequest> &oai_payment_amount_update_request = ::OpenAPI::OptionalParam<OAIPaymentAmountUpdateRequest>());

    /**
    * @param[in]  payment_psp_reference QString [required]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_cancel_request OAIPaymentCancelRequest [optional]
    */
    virtual void postPaymentsPaymentPspReferenceCancels(const QString &payment_psp_reference, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentCancelRequest> &oai_payment_cancel_request = ::OpenAPI::OptionalParam<OAIPaymentCancelRequest>());

    /**
    * @param[in]  payment_psp_reference QString [required]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_capture_request OAIPaymentCaptureRequest [optional]
    */
    virtual void postPaymentsPaymentPspReferenceCaptures(const QString &payment_psp_reference, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentCaptureRequest> &oai_payment_capture_request = ::OpenAPI::OptionalParam<OAIPaymentCaptureRequest>());

    /**
    * @param[in]  payment_psp_reference QString [required]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_refund_request OAIPaymentRefundRequest [optional]
    */
    virtual void postPaymentsPaymentPspReferenceRefunds(const QString &payment_psp_reference, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentRefundRequest> &oai_payment_refund_request = ::OpenAPI::OptionalParam<OAIPaymentRefundRequest>());

    /**
    * @param[in]  payment_psp_reference QString [required]
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_payment_reversal_request OAIPaymentReversalRequest [optional]
    */
    virtual void postPaymentsPaymentPspReferenceReversals(const QString &payment_psp_reference, const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPaymentReversalRequest> &oai_payment_reversal_request = ::OpenAPI::OptionalParam<OAIPaymentReversalRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCancelsCallback(OAIHttpRequestWorker *worker);
    void postPaymentsPaymentPspReferenceAmountUpdatesCallback(OAIHttpRequestWorker *worker);
    void postPaymentsPaymentPspReferenceCancelsCallback(OAIHttpRequestWorker *worker);
    void postPaymentsPaymentPspReferenceCapturesCallback(OAIHttpRequestWorker *worker);
    void postPaymentsPaymentPspReferenceRefundsCallback(OAIHttpRequestWorker *worker);
    void postPaymentsPaymentPspReferenceReversalsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCancelsSignal(OAIStandalonePaymentCancelResponse summary);
    void postPaymentsPaymentPspReferenceAmountUpdatesSignal(OAIPaymentAmountUpdateResponse summary);
    void postPaymentsPaymentPspReferenceCancelsSignal(OAIPaymentCancelResponse summary);
    void postPaymentsPaymentPspReferenceCapturesSignal(OAIPaymentCaptureResponse summary);
    void postPaymentsPaymentPspReferenceRefundsSignal(OAIPaymentRefundResponse summary);
    void postPaymentsPaymentPspReferenceReversalsSignal(OAIPaymentReversalResponse summary);


    void postCancelsSignalFull(OAIHttpRequestWorker *worker, OAIStandalonePaymentCancelResponse summary);
    void postPaymentsPaymentPspReferenceAmountUpdatesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentAmountUpdateResponse summary);
    void postPaymentsPaymentPspReferenceCancelsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentCancelResponse summary);
    void postPaymentsPaymentPspReferenceCapturesSignalFull(OAIHttpRequestWorker *worker, OAIPaymentCaptureResponse summary);
    void postPaymentsPaymentPspReferenceRefundsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentRefundResponse summary);
    void postPaymentsPaymentPspReferenceReversalsSignalFull(OAIHttpRequestWorker *worker, OAIPaymentReversalResponse summary);

    Q_DECL_DEPRECATED_X("Use postCancelsSignalError() instead")
    void postCancelsSignalE(OAIStandalonePaymentCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelsSignalError(OAIStandalonePaymentCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceAmountUpdatesSignalError() instead")
    void postPaymentsPaymentPspReferenceAmountUpdatesSignalE(OAIPaymentAmountUpdateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceAmountUpdatesSignalError(OAIPaymentAmountUpdateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceCancelsSignalError() instead")
    void postPaymentsPaymentPspReferenceCancelsSignalE(OAIPaymentCancelResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceCancelsSignalError(OAIPaymentCancelResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceCapturesSignalError() instead")
    void postPaymentsPaymentPspReferenceCapturesSignalE(OAIPaymentCaptureResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceCapturesSignalError(OAIPaymentCaptureResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceRefundsSignalError() instead")
    void postPaymentsPaymentPspReferenceRefundsSignalE(OAIPaymentRefundResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceRefundsSignalError(OAIPaymentRefundResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceReversalsSignalError() instead")
    void postPaymentsPaymentPspReferenceReversalsSignalE(OAIPaymentReversalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceReversalsSignalError(OAIPaymentReversalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCancelsSignalErrorFull() instead")
    void postCancelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceAmountUpdatesSignalErrorFull() instead")
    void postPaymentsPaymentPspReferenceAmountUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceAmountUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceCancelsSignalErrorFull() instead")
    void postPaymentsPaymentPspReferenceCancelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceCancelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceCapturesSignalErrorFull() instead")
    void postPaymentsPaymentPspReferenceCapturesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceCapturesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceRefundsSignalErrorFull() instead")
    void postPaymentsPaymentPspReferenceRefundsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceRefundsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentsPaymentPspReferenceReversalsSignalErrorFull() instead")
    void postPaymentsPaymentPspReferenceReversalsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentsPaymentPspReferenceReversalsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
