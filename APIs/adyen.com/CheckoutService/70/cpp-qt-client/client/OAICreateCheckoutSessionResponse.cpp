/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateCheckoutSessionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateCheckoutSessionResponse::OAICreateCheckoutSessionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateCheckoutSessionResponse::OAICreateCheckoutSessionResponse() {
    this->initializeModel();
}

OAICreateCheckoutSessionResponse::~OAICreateCheckoutSessionResponse() {}

void OAICreateCheckoutSessionResponse::initializeModel() {

    m_account_info_isSet = false;
    m_account_info_isValid = false;

    m_additional_amount_isSet = false;
    m_additional_amount_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_allowed_payment_methods_isSet = false;
    m_allowed_payment_methods_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_application_info_isSet = false;
    m_application_info_isValid = false;

    m_authentication_data_isSet = false;
    m_authentication_data_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_blocked_payment_methods_isSet = false;
    m_blocked_payment_methods_isValid = false;

    m_capture_delay_hours_isSet = false;
    m_capture_delay_hours_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_deliver_at_isSet = false;
    m_deliver_at_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_enable_one_click_isSet = false;
    m_enable_one_click_isValid = false;

    m_enable_pay_out_isSet = false;
    m_enable_pay_out_isValid = false;

    m_enable_recurring_isSet = false;
    m_enable_recurring_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_fund_origin_isSet = false;
    m_fund_origin_isValid = false;

    m_fund_recipient_isSet = false;
    m_fund_recipient_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_installment_options_isSet = false;
    m_installment_options_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_mandate_isSet = false;
    m_mandate_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_order_reference_isSet = false;
    m_merchant_order_reference_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_mpi_data_isSet = false;
    m_mpi_data_isValid = false;

    m_platform_chargeback_logic_isSet = false;
    m_platform_chargeback_logic_isValid = false;

    m_recurring_expiry_isSet = false;
    m_recurring_expiry_isValid = false;

    m_recurring_frequency_isSet = false;
    m_recurring_frequency_isValid = false;

    m_recurring_processing_model_isSet = false;
    m_recurring_processing_model_isValid = false;

    m_redirect_from_issuer_method_isSet = false;
    m_redirect_from_issuer_method_isValid = false;

    m_redirect_to_issuer_method_isSet = false;
    m_redirect_to_issuer_method_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_risk_data_isSet = false;
    m_risk_data_isValid = false;

    m_session_data_isSet = false;
    m_session_data_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_ip_isSet = false;
    m_shopper_ip_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_shopper_statement_isSet = false;
    m_shopper_statement_isValid = false;

    m_show_installment_amount_isSet = false;
    m_show_installment_amount_isValid = false;

    m_show_remove_payment_method_button_isSet = false;
    m_show_remove_payment_method_button_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_split_card_funding_sources_isSet = false;
    m_split_card_funding_sources_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_store_payment_method_isSet = false;
    m_store_payment_method_isValid = false;

    m_store_payment_method_mode_isSet = false;
    m_store_payment_method_mode_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_theme_id_isSet = false;
    m_theme_id_isValid = false;

    m_three_ds_authentication_only_isSet = false;
    m_three_ds_authentication_only_isValid = false;

    m_trusted_shopper_isSet = false;
    m_trusted_shopper_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICreateCheckoutSessionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateCheckoutSessionResponse::fromJsonObject(QJsonObject json) {

    m_account_info_isValid = ::OpenAPI::fromJsonValue(m_account_info, json[QString("accountInfo")]);
    m_account_info_isSet = !json[QString("accountInfo")].isNull() && m_account_info_isValid;

    m_additional_amount_isValid = ::OpenAPI::fromJsonValue(m_additional_amount, json[QString("additionalAmount")]);
    m_additional_amount_isSet = !json[QString("additionalAmount")].isNull() && m_additional_amount_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_allowed_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_methods, json[QString("allowedPaymentMethods")]);
    m_allowed_payment_methods_isSet = !json[QString("allowedPaymentMethods")].isNull() && m_allowed_payment_methods_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_application_info_isValid = ::OpenAPI::fromJsonValue(m_application_info, json[QString("applicationInfo")]);
    m_application_info_isSet = !json[QString("applicationInfo")].isNull() && m_application_info_isValid;

    m_authentication_data_isValid = ::OpenAPI::fromJsonValue(m_authentication_data, json[QString("authenticationData")]);
    m_authentication_data_isSet = !json[QString("authenticationData")].isNull() && m_authentication_data_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_blocked_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_blocked_payment_methods, json[QString("blockedPaymentMethods")]);
    m_blocked_payment_methods_isSet = !json[QString("blockedPaymentMethods")].isNull() && m_blocked_payment_methods_isValid;

    m_capture_delay_hours_isValid = ::OpenAPI::fromJsonValue(m_capture_delay_hours, json[QString("captureDelayHours")]);
    m_capture_delay_hours_isSet = !json[QString("captureDelayHours")].isNull() && m_capture_delay_hours_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_deliver_at_isValid = ::OpenAPI::fromJsonValue(m_deliver_at, json[QString("deliverAt")]);
    m_deliver_at_isSet = !json[QString("deliverAt")].isNull() && m_deliver_at_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_enable_one_click_isValid = ::OpenAPI::fromJsonValue(m_enable_one_click, json[QString("enableOneClick")]);
    m_enable_one_click_isSet = !json[QString("enableOneClick")].isNull() && m_enable_one_click_isValid;

    m_enable_pay_out_isValid = ::OpenAPI::fromJsonValue(m_enable_pay_out, json[QString("enablePayOut")]);
    m_enable_pay_out_isSet = !json[QString("enablePayOut")].isNull() && m_enable_pay_out_isValid;

    m_enable_recurring_isValid = ::OpenAPI::fromJsonValue(m_enable_recurring, json[QString("enableRecurring")]);
    m_enable_recurring_isSet = !json[QString("enableRecurring")].isNull() && m_enable_recurring_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_fund_origin_isValid = ::OpenAPI::fromJsonValue(m_fund_origin, json[QString("fundOrigin")]);
    m_fund_origin_isSet = !json[QString("fundOrigin")].isNull() && m_fund_origin_isValid;

    m_fund_recipient_isValid = ::OpenAPI::fromJsonValue(m_fund_recipient, json[QString("fundRecipient")]);
    m_fund_recipient_isSet = !json[QString("fundRecipient")].isNull() && m_fund_recipient_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_installment_options_isValid = ::OpenAPI::fromJsonValue(m_installment_options, json[QString("installmentOptions")]);
    m_installment_options_isSet = !json[QString("installmentOptions")].isNull() && m_installment_options_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_mandate_isValid = ::OpenAPI::fromJsonValue(m_mandate, json[QString("mandate")]);
    m_mandate_isSet = !json[QString("mandate")].isNull() && m_mandate_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_order_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_reference, json[QString("merchantOrderReference")]);
    m_merchant_order_reference_isSet = !json[QString("merchantOrderReference")].isNull() && m_merchant_order_reference_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_mpi_data_isValid = ::OpenAPI::fromJsonValue(m_mpi_data, json[QString("mpiData")]);
    m_mpi_data_isSet = !json[QString("mpiData")].isNull() && m_mpi_data_isValid;

    m_platform_chargeback_logic_isValid = ::OpenAPI::fromJsonValue(m_platform_chargeback_logic, json[QString("platformChargebackLogic")]);
    m_platform_chargeback_logic_isSet = !json[QString("platformChargebackLogic")].isNull() && m_platform_chargeback_logic_isValid;

    m_recurring_expiry_isValid = ::OpenAPI::fromJsonValue(m_recurring_expiry, json[QString("recurringExpiry")]);
    m_recurring_expiry_isSet = !json[QString("recurringExpiry")].isNull() && m_recurring_expiry_isValid;

    m_recurring_frequency_isValid = ::OpenAPI::fromJsonValue(m_recurring_frequency, json[QString("recurringFrequency")]);
    m_recurring_frequency_isSet = !json[QString("recurringFrequency")].isNull() && m_recurring_frequency_isValid;

    m_recurring_processing_model_isValid = ::OpenAPI::fromJsonValue(m_recurring_processing_model, json[QString("recurringProcessingModel")]);
    m_recurring_processing_model_isSet = !json[QString("recurringProcessingModel")].isNull() && m_recurring_processing_model_isValid;

    m_redirect_from_issuer_method_isValid = ::OpenAPI::fromJsonValue(m_redirect_from_issuer_method, json[QString("redirectFromIssuerMethod")]);
    m_redirect_from_issuer_method_isSet = !json[QString("redirectFromIssuerMethod")].isNull() && m_redirect_from_issuer_method_isValid;

    m_redirect_to_issuer_method_isValid = ::OpenAPI::fromJsonValue(m_redirect_to_issuer_method, json[QString("redirectToIssuerMethod")]);
    m_redirect_to_issuer_method_isSet = !json[QString("redirectToIssuerMethod")].isNull() && m_redirect_to_issuer_method_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("returnUrl")]);
    m_return_url_isSet = !json[QString("returnUrl")].isNull() && m_return_url_isValid;

    m_risk_data_isValid = ::OpenAPI::fromJsonValue(m_risk_data, json[QString("riskData")]);
    m_risk_data_isSet = !json[QString("riskData")].isNull() && m_risk_data_isValid;

    m_session_data_isValid = ::OpenAPI::fromJsonValue(m_session_data, json[QString("sessionData")]);
    m_session_data_isSet = !json[QString("sessionData")].isNull() && m_session_data_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_ip_isValid = ::OpenAPI::fromJsonValue(m_shopper_ip, json[QString("shopperIP")]);
    m_shopper_ip_isSet = !json[QString("shopperIP")].isNull() && m_shopper_ip_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_shopper_statement_isValid = ::OpenAPI::fromJsonValue(m_shopper_statement, json[QString("shopperStatement")]);
    m_shopper_statement_isSet = !json[QString("shopperStatement")].isNull() && m_shopper_statement_isValid;

    m_show_installment_amount_isValid = ::OpenAPI::fromJsonValue(m_show_installment_amount, json[QString("showInstallmentAmount")]);
    m_show_installment_amount_isSet = !json[QString("showInstallmentAmount")].isNull() && m_show_installment_amount_isValid;

    m_show_remove_payment_method_button_isValid = ::OpenAPI::fromJsonValue(m_show_remove_payment_method_button, json[QString("showRemovePaymentMethodButton")]);
    m_show_remove_payment_method_button_isSet = !json[QString("showRemovePaymentMethodButton")].isNull() && m_show_remove_payment_method_button_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_split_card_funding_sources_isValid = ::OpenAPI::fromJsonValue(m_split_card_funding_sources, json[QString("splitCardFundingSources")]);
    m_split_card_funding_sources_isSet = !json[QString("splitCardFundingSources")].isNull() && m_split_card_funding_sources_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_store_payment_method_isValid = ::OpenAPI::fromJsonValue(m_store_payment_method, json[QString("storePaymentMethod")]);
    m_store_payment_method_isSet = !json[QString("storePaymentMethod")].isNull() && m_store_payment_method_isValid;

    m_store_payment_method_mode_isValid = ::OpenAPI::fromJsonValue(m_store_payment_method_mode, json[QString("storePaymentMethodMode")]);
    m_store_payment_method_mode_isSet = !json[QString("storePaymentMethodMode")].isNull() && m_store_payment_method_mode_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;

    m_theme_id_isValid = ::OpenAPI::fromJsonValue(m_theme_id, json[QString("themeId")]);
    m_theme_id_isSet = !json[QString("themeId")].isNull() && m_theme_id_isValid;

    m_three_ds_authentication_only_isValid = ::OpenAPI::fromJsonValue(m_three_ds_authentication_only, json[QString("threeDSAuthenticationOnly")]);
    m_three_ds_authentication_only_isSet = !json[QString("threeDSAuthenticationOnly")].isNull() && m_three_ds_authentication_only_isValid;

    m_trusted_shopper_isValid = ::OpenAPI::fromJsonValue(m_trusted_shopper, json[QString("trustedShopper")]);
    m_trusted_shopper_isSet = !json[QString("trustedShopper")].isNull() && m_trusted_shopper_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICreateCheckoutSessionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateCheckoutSessionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_info.isSet()) {
        obj.insert(QString("accountInfo"), ::OpenAPI::toJsonValue(m_account_info));
    }
    if (m_additional_amount.isSet()) {
        obj.insert(QString("additionalAmount"), ::OpenAPI::toJsonValue(m_additional_amount));
    }
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_allowed_payment_methods.size() > 0) {
        obj.insert(QString("allowedPaymentMethods"), ::OpenAPI::toJsonValue(m_allowed_payment_methods));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_application_info.isSet()) {
        obj.insert(QString("applicationInfo"), ::OpenAPI::toJsonValue(m_application_info));
    }
    if (m_authentication_data.isSet()) {
        obj.insert(QString("authenticationData"), ::OpenAPI::toJsonValue(m_authentication_data));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_blocked_payment_methods.size() > 0) {
        obj.insert(QString("blockedPaymentMethods"), ::OpenAPI::toJsonValue(m_blocked_payment_methods));
    }
    if (m_capture_delay_hours_isSet) {
        obj.insert(QString("captureDelayHours"), ::OpenAPI::toJsonValue(m_capture_delay_hours));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_deliver_at_isSet) {
        obj.insert(QString("deliverAt"), ::OpenAPI::toJsonValue(m_deliver_at));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_enable_one_click_isSet) {
        obj.insert(QString("enableOneClick"), ::OpenAPI::toJsonValue(m_enable_one_click));
    }
    if (m_enable_pay_out_isSet) {
        obj.insert(QString("enablePayOut"), ::OpenAPI::toJsonValue(m_enable_pay_out));
    }
    if (m_enable_recurring_isSet) {
        obj.insert(QString("enableRecurring"), ::OpenAPI::toJsonValue(m_enable_recurring));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_fund_origin.isSet()) {
        obj.insert(QString("fundOrigin"), ::OpenAPI::toJsonValue(m_fund_origin));
    }
    if (m_fund_recipient.isSet()) {
        obj.insert(QString("fundRecipient"), ::OpenAPI::toJsonValue(m_fund_recipient));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_installment_options.size() > 0) {
        obj.insert(QString("installmentOptions"), ::OpenAPI::toJsonValue(m_installment_options));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_mandate.isSet()) {
        obj.insert(QString("mandate"), ::OpenAPI::toJsonValue(m_mandate));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_order_reference_isSet) {
        obj.insert(QString("merchantOrderReference"), ::OpenAPI::toJsonValue(m_merchant_order_reference));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_mpi_data.isSet()) {
        obj.insert(QString("mpiData"), ::OpenAPI::toJsonValue(m_mpi_data));
    }
    if (m_platform_chargeback_logic.isSet()) {
        obj.insert(QString("platformChargebackLogic"), ::OpenAPI::toJsonValue(m_platform_chargeback_logic));
    }
    if (m_recurring_expiry_isSet) {
        obj.insert(QString("recurringExpiry"), ::OpenAPI::toJsonValue(m_recurring_expiry));
    }
    if (m_recurring_frequency_isSet) {
        obj.insert(QString("recurringFrequency"), ::OpenAPI::toJsonValue(m_recurring_frequency));
    }
    if (m_recurring_processing_model_isSet) {
        obj.insert(QString("recurringProcessingModel"), ::OpenAPI::toJsonValue(m_recurring_processing_model));
    }
    if (m_redirect_from_issuer_method_isSet) {
        obj.insert(QString("redirectFromIssuerMethod"), ::OpenAPI::toJsonValue(m_redirect_from_issuer_method));
    }
    if (m_redirect_to_issuer_method_isSet) {
        obj.insert(QString("redirectToIssuerMethod"), ::OpenAPI::toJsonValue(m_redirect_to_issuer_method));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("returnUrl"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_risk_data.isSet()) {
        obj.insert(QString("riskData"), ::OpenAPI::toJsonValue(m_risk_data));
    }
    if (m_session_data_isSet) {
        obj.insert(QString("sessionData"), ::OpenAPI::toJsonValue(m_session_data));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_ip_isSet) {
        obj.insert(QString("shopperIP"), ::OpenAPI::toJsonValue(m_shopper_ip));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_shopper_statement_isSet) {
        obj.insert(QString("shopperStatement"), ::OpenAPI::toJsonValue(m_shopper_statement));
    }
    if (m_show_installment_amount_isSet) {
        obj.insert(QString("showInstallmentAmount"), ::OpenAPI::toJsonValue(m_show_installment_amount));
    }
    if (m_show_remove_payment_method_button_isSet) {
        obj.insert(QString("showRemovePaymentMethodButton"), ::OpenAPI::toJsonValue(m_show_remove_payment_method_button));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_split_card_funding_sources_isSet) {
        obj.insert(QString("splitCardFundingSources"), ::OpenAPI::toJsonValue(m_split_card_funding_sources));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_store_payment_method_isSet) {
        obj.insert(QString("storePaymentMethod"), ::OpenAPI::toJsonValue(m_store_payment_method));
    }
    if (m_store_payment_method_mode_isSet) {
        obj.insert(QString("storePaymentMethodMode"), ::OpenAPI::toJsonValue(m_store_payment_method_mode));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_theme_id_isSet) {
        obj.insert(QString("themeId"), ::OpenAPI::toJsonValue(m_theme_id));
    }
    if (m_three_ds_authentication_only_isSet) {
        obj.insert(QString("threeDSAuthenticationOnly"), ::OpenAPI::toJsonValue(m_three_ds_authentication_only));
    }
    if (m_trusted_shopper_isSet) {
        obj.insert(QString("trustedShopper"), ::OpenAPI::toJsonValue(m_trusted_shopper));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIAccountInfo OAICreateCheckoutSessionResponse::getAccountInfo() const {
    return m_account_info;
}
void OAICreateCheckoutSessionResponse::setAccountInfo(const OAIAccountInfo &account_info) {
    m_account_info = account_info;
    m_account_info_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_account_info_Set() const{
    return m_account_info_isSet;
}

bool OAICreateCheckoutSessionResponse::is_account_info_Valid() const{
    return m_account_info_isValid;
}

OAIAmount OAICreateCheckoutSessionResponse::getAdditionalAmount() const {
    return m_additional_amount;
}
void OAICreateCheckoutSessionResponse::setAdditionalAmount(const OAIAmount &additional_amount) {
    m_additional_amount = additional_amount;
    m_additional_amount_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_additional_amount_Set() const{
    return m_additional_amount_isSet;
}

bool OAICreateCheckoutSessionResponse::is_additional_amount_Valid() const{
    return m_additional_amount_isValid;
}

OAIBalanceCheckRequest_additionalData OAICreateCheckoutSessionResponse::getAdditionalData() const {
    return m_additional_data;
}
void OAICreateCheckoutSessionResponse::setAdditionalData(const OAIBalanceCheckRequest_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAICreateCheckoutSessionResponse::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QList<QString> OAICreateCheckoutSessionResponse::getAllowedPaymentMethods() const {
    return m_allowed_payment_methods;
}
void OAICreateCheckoutSessionResponse::setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods) {
    m_allowed_payment_methods = allowed_payment_methods;
    m_allowed_payment_methods_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_allowed_payment_methods_Set() const{
    return m_allowed_payment_methods_isSet;
}

bool OAICreateCheckoutSessionResponse::is_allowed_payment_methods_Valid() const{
    return m_allowed_payment_methods_isValid;
}

OAIAmount OAICreateCheckoutSessionResponse::getAmount() const {
    return m_amount;
}
void OAICreateCheckoutSessionResponse::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICreateCheckoutSessionResponse::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIApplicationInfo OAICreateCheckoutSessionResponse::getApplicationInfo() const {
    return m_application_info;
}
void OAICreateCheckoutSessionResponse::setApplicationInfo(const OAIApplicationInfo &application_info) {
    m_application_info = application_info;
    m_application_info_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_application_info_Set() const{
    return m_application_info_isSet;
}

bool OAICreateCheckoutSessionResponse::is_application_info_Valid() const{
    return m_application_info_isValid;
}

OAIAuthenticationData OAICreateCheckoutSessionResponse::getAuthenticationData() const {
    return m_authentication_data;
}
void OAICreateCheckoutSessionResponse::setAuthenticationData(const OAIAuthenticationData &authentication_data) {
    m_authentication_data = authentication_data;
    m_authentication_data_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_authentication_data_Set() const{
    return m_authentication_data_isSet;
}

bool OAICreateCheckoutSessionResponse::is_authentication_data_Valid() const{
    return m_authentication_data_isValid;
}

OAIBillingAddress OAICreateCheckoutSessionResponse::getBillingAddress() const {
    return m_billing_address;
}
void OAICreateCheckoutSessionResponse::setBillingAddress(const OAIBillingAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAICreateCheckoutSessionResponse::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QList<QString> OAICreateCheckoutSessionResponse::getBlockedPaymentMethods() const {
    return m_blocked_payment_methods;
}
void OAICreateCheckoutSessionResponse::setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods) {
    m_blocked_payment_methods = blocked_payment_methods;
    m_blocked_payment_methods_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_blocked_payment_methods_Set() const{
    return m_blocked_payment_methods_isSet;
}

bool OAICreateCheckoutSessionResponse::is_blocked_payment_methods_Valid() const{
    return m_blocked_payment_methods_isValid;
}

qint32 OAICreateCheckoutSessionResponse::getCaptureDelayHours() const {
    return m_capture_delay_hours;
}
void OAICreateCheckoutSessionResponse::setCaptureDelayHours(const qint32 &capture_delay_hours) {
    m_capture_delay_hours = capture_delay_hours;
    m_capture_delay_hours_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_capture_delay_hours_Set() const{
    return m_capture_delay_hours_isSet;
}

bool OAICreateCheckoutSessionResponse::is_capture_delay_hours_Valid() const{
    return m_capture_delay_hours_isValid;
}

QString OAICreateCheckoutSessionResponse::getChannel() const {
    return m_channel;
}
void OAICreateCheckoutSessionResponse::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAICreateCheckoutSessionResponse::is_channel_Valid() const{
    return m_channel_isValid;
}

OAICompany OAICreateCheckoutSessionResponse::getCompany() const {
    return m_company;
}
void OAICreateCheckoutSessionResponse::setCompany(const OAICompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_company_Set() const{
    return m_company_isSet;
}

bool OAICreateCheckoutSessionResponse::is_company_Valid() const{
    return m_company_isValid;
}

QString OAICreateCheckoutSessionResponse::getCountryCode() const {
    return m_country_code;
}
void OAICreateCheckoutSessionResponse::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAICreateCheckoutSessionResponse::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QDateTime OAICreateCheckoutSessionResponse::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAICreateCheckoutSessionResponse::setDateOfBirth(const QDateTime &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAICreateCheckoutSessionResponse::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

QDateTime OAICreateCheckoutSessionResponse::getDeliverAt() const {
    return m_deliver_at;
}
void OAICreateCheckoutSessionResponse::setDeliverAt(const QDateTime &deliver_at) {
    m_deliver_at = deliver_at;
    m_deliver_at_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_deliver_at_Set() const{
    return m_deliver_at_isSet;
}

bool OAICreateCheckoutSessionResponse::is_deliver_at_Valid() const{
    return m_deliver_at_isValid;
}

OAIDeliveryAddress OAICreateCheckoutSessionResponse::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAICreateCheckoutSessionResponse::setDeliveryAddress(const OAIDeliveryAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAICreateCheckoutSessionResponse::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

bool OAICreateCheckoutSessionResponse::isEnableOneClick() const {
    return m_enable_one_click;
}
void OAICreateCheckoutSessionResponse::setEnableOneClick(const bool &enable_one_click) {
    m_enable_one_click = enable_one_click;
    m_enable_one_click_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_enable_one_click_Set() const{
    return m_enable_one_click_isSet;
}

bool OAICreateCheckoutSessionResponse::is_enable_one_click_Valid() const{
    return m_enable_one_click_isValid;
}

bool OAICreateCheckoutSessionResponse::isEnablePayOut() const {
    return m_enable_pay_out;
}
void OAICreateCheckoutSessionResponse::setEnablePayOut(const bool &enable_pay_out) {
    m_enable_pay_out = enable_pay_out;
    m_enable_pay_out_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_enable_pay_out_Set() const{
    return m_enable_pay_out_isSet;
}

bool OAICreateCheckoutSessionResponse::is_enable_pay_out_Valid() const{
    return m_enable_pay_out_isValid;
}

bool OAICreateCheckoutSessionResponse::isEnableRecurring() const {
    return m_enable_recurring;
}
void OAICreateCheckoutSessionResponse::setEnableRecurring(const bool &enable_recurring) {
    m_enable_recurring = enable_recurring;
    m_enable_recurring_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_enable_recurring_Set() const{
    return m_enable_recurring_isSet;
}

bool OAICreateCheckoutSessionResponse::is_enable_recurring_Valid() const{
    return m_enable_recurring_isValid;
}

QDateTime OAICreateCheckoutSessionResponse::getExpiresAt() const {
    return m_expires_at;
}
void OAICreateCheckoutSessionResponse::setExpiresAt(const QDateTime &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreateCheckoutSessionResponse::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

OAIFundOrigin OAICreateCheckoutSessionResponse::getFundOrigin() const {
    return m_fund_origin;
}
void OAICreateCheckoutSessionResponse::setFundOrigin(const OAIFundOrigin &fund_origin) {
    m_fund_origin = fund_origin;
    m_fund_origin_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_fund_origin_Set() const{
    return m_fund_origin_isSet;
}

bool OAICreateCheckoutSessionResponse::is_fund_origin_Valid() const{
    return m_fund_origin_isValid;
}

OAIFundRecipient OAICreateCheckoutSessionResponse::getFundRecipient() const {
    return m_fund_recipient;
}
void OAICreateCheckoutSessionResponse::setFundRecipient(const OAIFundRecipient &fund_recipient) {
    m_fund_recipient = fund_recipient;
    m_fund_recipient_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_fund_recipient_Set() const{
    return m_fund_recipient_isSet;
}

bool OAICreateCheckoutSessionResponse::is_fund_recipient_Valid() const{
    return m_fund_recipient_isValid;
}

QString OAICreateCheckoutSessionResponse::getId() const {
    return m_id;
}
void OAICreateCheckoutSessionResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICreateCheckoutSessionResponse::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, OAICheckoutSessionInstallmentOption> OAICreateCheckoutSessionResponse::getInstallmentOptions() const {
    return m_installment_options;
}
void OAICreateCheckoutSessionResponse::setInstallmentOptions(const QMap<QString, OAICheckoutSessionInstallmentOption> &installment_options) {
    m_installment_options = installment_options;
    m_installment_options_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_installment_options_Set() const{
    return m_installment_options_isSet;
}

bool OAICreateCheckoutSessionResponse::is_installment_options_Valid() const{
    return m_installment_options_isValid;
}

QList<OAILineItem> OAICreateCheckoutSessionResponse::getLineItems() const {
    return m_line_items;
}
void OAICreateCheckoutSessionResponse::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAICreateCheckoutSessionResponse::is_line_items_Valid() const{
    return m_line_items_isValid;
}

OAIMandate OAICreateCheckoutSessionResponse::getMandate() const {
    return m_mandate;
}
void OAICreateCheckoutSessionResponse::setMandate(const OAIMandate &mandate) {
    m_mandate = mandate;
    m_mandate_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_mandate_Set() const{
    return m_mandate_isSet;
}

bool OAICreateCheckoutSessionResponse::is_mandate_Valid() const{
    return m_mandate_isValid;
}

QString OAICreateCheckoutSessionResponse::getMcc() const {
    return m_mcc;
}
void OAICreateCheckoutSessionResponse::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAICreateCheckoutSessionResponse::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAICreateCheckoutSessionResponse::getMerchantAccount() const {
    return m_merchant_account;
}
void OAICreateCheckoutSessionResponse::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAICreateCheckoutSessionResponse::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAICreateCheckoutSessionResponse::getMerchantOrderReference() const {
    return m_merchant_order_reference;
}
void OAICreateCheckoutSessionResponse::setMerchantOrderReference(const QString &merchant_order_reference) {
    m_merchant_order_reference = merchant_order_reference;
    m_merchant_order_reference_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_merchant_order_reference_Set() const{
    return m_merchant_order_reference_isSet;
}

bool OAICreateCheckoutSessionResponse::is_merchant_order_reference_Valid() const{
    return m_merchant_order_reference_isValid;
}

QMap<QString, QString> OAICreateCheckoutSessionResponse::getMetadata() const {
    return m_metadata;
}
void OAICreateCheckoutSessionResponse::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateCheckoutSessionResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateCheckoutSessionResponse::getMode() const {
    return m_mode;
}
void OAICreateCheckoutSessionResponse::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAICreateCheckoutSessionResponse::is_mode_Valid() const{
    return m_mode_isValid;
}

OAIThreeDSecureData OAICreateCheckoutSessionResponse::getMpiData() const {
    return m_mpi_data;
}
void OAICreateCheckoutSessionResponse::setMpiData(const OAIThreeDSecureData &mpi_data) {
    m_mpi_data = mpi_data;
    m_mpi_data_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_mpi_data_Set() const{
    return m_mpi_data_isSet;
}

bool OAICreateCheckoutSessionResponse::is_mpi_data_Valid() const{
    return m_mpi_data_isValid;
}

OAIPlatformChargebackLogic OAICreateCheckoutSessionResponse::getPlatformChargebackLogic() const {
    return m_platform_chargeback_logic;
}
void OAICreateCheckoutSessionResponse::setPlatformChargebackLogic(const OAIPlatformChargebackLogic &platform_chargeback_logic) {
    m_platform_chargeback_logic = platform_chargeback_logic;
    m_platform_chargeback_logic_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_platform_chargeback_logic_Set() const{
    return m_platform_chargeback_logic_isSet;
}

bool OAICreateCheckoutSessionResponse::is_platform_chargeback_logic_Valid() const{
    return m_platform_chargeback_logic_isValid;
}

QString OAICreateCheckoutSessionResponse::getRecurringExpiry() const {
    return m_recurring_expiry;
}
void OAICreateCheckoutSessionResponse::setRecurringExpiry(const QString &recurring_expiry) {
    m_recurring_expiry = recurring_expiry;
    m_recurring_expiry_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_recurring_expiry_Set() const{
    return m_recurring_expiry_isSet;
}

bool OAICreateCheckoutSessionResponse::is_recurring_expiry_Valid() const{
    return m_recurring_expiry_isValid;
}

QString OAICreateCheckoutSessionResponse::getRecurringFrequency() const {
    return m_recurring_frequency;
}
void OAICreateCheckoutSessionResponse::setRecurringFrequency(const QString &recurring_frequency) {
    m_recurring_frequency = recurring_frequency;
    m_recurring_frequency_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_recurring_frequency_Set() const{
    return m_recurring_frequency_isSet;
}

bool OAICreateCheckoutSessionResponse::is_recurring_frequency_Valid() const{
    return m_recurring_frequency_isValid;
}

QString OAICreateCheckoutSessionResponse::getRecurringProcessingModel() const {
    return m_recurring_processing_model;
}
void OAICreateCheckoutSessionResponse::setRecurringProcessingModel(const QString &recurring_processing_model) {
    m_recurring_processing_model = recurring_processing_model;
    m_recurring_processing_model_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_recurring_processing_model_Set() const{
    return m_recurring_processing_model_isSet;
}

bool OAICreateCheckoutSessionResponse::is_recurring_processing_model_Valid() const{
    return m_recurring_processing_model_isValid;
}

QString OAICreateCheckoutSessionResponse::getRedirectFromIssuerMethod() const {
    return m_redirect_from_issuer_method;
}
void OAICreateCheckoutSessionResponse::setRedirectFromIssuerMethod(const QString &redirect_from_issuer_method) {
    m_redirect_from_issuer_method = redirect_from_issuer_method;
    m_redirect_from_issuer_method_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_redirect_from_issuer_method_Set() const{
    return m_redirect_from_issuer_method_isSet;
}

bool OAICreateCheckoutSessionResponse::is_redirect_from_issuer_method_Valid() const{
    return m_redirect_from_issuer_method_isValid;
}

QString OAICreateCheckoutSessionResponse::getRedirectToIssuerMethod() const {
    return m_redirect_to_issuer_method;
}
void OAICreateCheckoutSessionResponse::setRedirectToIssuerMethod(const QString &redirect_to_issuer_method) {
    m_redirect_to_issuer_method = redirect_to_issuer_method;
    m_redirect_to_issuer_method_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_redirect_to_issuer_method_Set() const{
    return m_redirect_to_issuer_method_isSet;
}

bool OAICreateCheckoutSessionResponse::is_redirect_to_issuer_method_Valid() const{
    return m_redirect_to_issuer_method_isValid;
}

QString OAICreateCheckoutSessionResponse::getReference() const {
    return m_reference;
}
void OAICreateCheckoutSessionResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICreateCheckoutSessionResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAICreateCheckoutSessionResponse::getReturnUrl() const {
    return m_return_url;
}
void OAICreateCheckoutSessionResponse::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAICreateCheckoutSessionResponse::is_return_url_Valid() const{
    return m_return_url_isValid;
}

OAIRiskData OAICreateCheckoutSessionResponse::getRiskData() const {
    return m_risk_data;
}
void OAICreateCheckoutSessionResponse::setRiskData(const OAIRiskData &risk_data) {
    m_risk_data = risk_data;
    m_risk_data_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_risk_data_Set() const{
    return m_risk_data_isSet;
}

bool OAICreateCheckoutSessionResponse::is_risk_data_Valid() const{
    return m_risk_data_isValid;
}

QString OAICreateCheckoutSessionResponse::getSessionData() const {
    return m_session_data;
}
void OAICreateCheckoutSessionResponse::setSessionData(const QString &session_data) {
    m_session_data = session_data;
    m_session_data_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_session_data_Set() const{
    return m_session_data_isSet;
}

bool OAICreateCheckoutSessionResponse::is_session_data_Valid() const{
    return m_session_data_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperEmail() const {
    return m_shopper_email;
}
void OAICreateCheckoutSessionResponse::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperIp() const {
    return m_shopper_ip;
}
void OAICreateCheckoutSessionResponse::setShopperIp(const QString &shopper_ip) {
    m_shopper_ip = shopper_ip;
    m_shopper_ip_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_ip_Set() const{
    return m_shopper_ip_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_ip_Valid() const{
    return m_shopper_ip_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAICreateCheckoutSessionResponse::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperLocale() const {
    return m_shopper_locale;
}
void OAICreateCheckoutSessionResponse::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

OAIName OAICreateCheckoutSessionResponse::getShopperName() const {
    return m_shopper_name;
}
void OAICreateCheckoutSessionResponse::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperReference() const {
    return m_shopper_reference;
}
void OAICreateCheckoutSessionResponse::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAICreateCheckoutSessionResponse::getShopperStatement() const {
    return m_shopper_statement;
}
void OAICreateCheckoutSessionResponse::setShopperStatement(const QString &shopper_statement) {
    m_shopper_statement = shopper_statement;
    m_shopper_statement_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_shopper_statement_Set() const{
    return m_shopper_statement_isSet;
}

bool OAICreateCheckoutSessionResponse::is_shopper_statement_Valid() const{
    return m_shopper_statement_isValid;
}

bool OAICreateCheckoutSessionResponse::isShowInstallmentAmount() const {
    return m_show_installment_amount;
}
void OAICreateCheckoutSessionResponse::setShowInstallmentAmount(const bool &show_installment_amount) {
    m_show_installment_amount = show_installment_amount;
    m_show_installment_amount_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_show_installment_amount_Set() const{
    return m_show_installment_amount_isSet;
}

bool OAICreateCheckoutSessionResponse::is_show_installment_amount_Valid() const{
    return m_show_installment_amount_isValid;
}

bool OAICreateCheckoutSessionResponse::isShowRemovePaymentMethodButton() const {
    return m_show_remove_payment_method_button;
}
void OAICreateCheckoutSessionResponse::setShowRemovePaymentMethodButton(const bool &show_remove_payment_method_button) {
    m_show_remove_payment_method_button = show_remove_payment_method_button;
    m_show_remove_payment_method_button_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_show_remove_payment_method_button_Set() const{
    return m_show_remove_payment_method_button_isSet;
}

bool OAICreateCheckoutSessionResponse::is_show_remove_payment_method_button_Valid() const{
    return m_show_remove_payment_method_button_isValid;
}

QString OAICreateCheckoutSessionResponse::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAICreateCheckoutSessionResponse::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAICreateCheckoutSessionResponse::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

bool OAICreateCheckoutSessionResponse::isSplitCardFundingSources() const {
    return m_split_card_funding_sources;
}
void OAICreateCheckoutSessionResponse::setSplitCardFundingSources(const bool &split_card_funding_sources) {
    m_split_card_funding_sources = split_card_funding_sources;
    m_split_card_funding_sources_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_split_card_funding_sources_Set() const{
    return m_split_card_funding_sources_isSet;
}

bool OAICreateCheckoutSessionResponse::is_split_card_funding_sources_Valid() const{
    return m_split_card_funding_sources_isValid;
}

QList<OAISplit> OAICreateCheckoutSessionResponse::getSplits() const {
    return m_splits;
}
void OAICreateCheckoutSessionResponse::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAICreateCheckoutSessionResponse::is_splits_Valid() const{
    return m_splits_isValid;
}

QString OAICreateCheckoutSessionResponse::getStore() const {
    return m_store;
}
void OAICreateCheckoutSessionResponse::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_store_Set() const{
    return m_store_isSet;
}

bool OAICreateCheckoutSessionResponse::is_store_Valid() const{
    return m_store_isValid;
}

bool OAICreateCheckoutSessionResponse::isStorePaymentMethod() const {
    return m_store_payment_method;
}
void OAICreateCheckoutSessionResponse::setStorePaymentMethod(const bool &store_payment_method) {
    m_store_payment_method = store_payment_method;
    m_store_payment_method_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_store_payment_method_Set() const{
    return m_store_payment_method_isSet;
}

bool OAICreateCheckoutSessionResponse::is_store_payment_method_Valid() const{
    return m_store_payment_method_isValid;
}

QString OAICreateCheckoutSessionResponse::getStorePaymentMethodMode() const {
    return m_store_payment_method_mode;
}
void OAICreateCheckoutSessionResponse::setStorePaymentMethodMode(const QString &store_payment_method_mode) {
    m_store_payment_method_mode = store_payment_method_mode;
    m_store_payment_method_mode_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_store_payment_method_mode_Set() const{
    return m_store_payment_method_mode_isSet;
}

bool OAICreateCheckoutSessionResponse::is_store_payment_method_mode_Valid() const{
    return m_store_payment_method_mode_isValid;
}

QString OAICreateCheckoutSessionResponse::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAICreateCheckoutSessionResponse::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAICreateCheckoutSessionResponse::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

QString OAICreateCheckoutSessionResponse::getThemeId() const {
    return m_theme_id;
}
void OAICreateCheckoutSessionResponse::setThemeId(const QString &theme_id) {
    m_theme_id = theme_id;
    m_theme_id_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_theme_id_Set() const{
    return m_theme_id_isSet;
}

bool OAICreateCheckoutSessionResponse::is_theme_id_Valid() const{
    return m_theme_id_isValid;
}

bool OAICreateCheckoutSessionResponse::isThreeDsAuthenticationOnly() const {
    return m_three_ds_authentication_only;
}
void OAICreateCheckoutSessionResponse::setThreeDsAuthenticationOnly(const bool &three_ds_authentication_only) {
    m_three_ds_authentication_only = three_ds_authentication_only;
    m_three_ds_authentication_only_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_three_ds_authentication_only_Set() const{
    return m_three_ds_authentication_only_isSet;
}

bool OAICreateCheckoutSessionResponse::is_three_ds_authentication_only_Valid() const{
    return m_three_ds_authentication_only_isValid;
}

bool OAICreateCheckoutSessionResponse::isTrustedShopper() const {
    return m_trusted_shopper;
}
void OAICreateCheckoutSessionResponse::setTrustedShopper(const bool &trusted_shopper) {
    m_trusted_shopper = trusted_shopper;
    m_trusted_shopper_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_trusted_shopper_Set() const{
    return m_trusted_shopper_isSet;
}

bool OAICreateCheckoutSessionResponse::is_trusted_shopper_Valid() const{
    return m_trusted_shopper_isValid;
}

QString OAICreateCheckoutSessionResponse::getUrl() const {
    return m_url;
}
void OAICreateCheckoutSessionResponse::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICreateCheckoutSessionResponse::is_url_Set() const{
    return m_url_isSet;
}

bool OAICreateCheckoutSessionResponse::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICreateCheckoutSessionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_delay_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliver_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_one_click_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pay_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_chargeback_logic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_processing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_from_issuer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_to_issuer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_installment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_remove_payment_method_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_card_funding_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_payment_method_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_theme_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_authentication_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_shopper_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateCheckoutSessionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_expires_at_isValid && m_id_isValid && m_merchant_account_isValid && m_reference_isValid && m_return_url_isValid && true;
}

} // namespace OpenAPI
