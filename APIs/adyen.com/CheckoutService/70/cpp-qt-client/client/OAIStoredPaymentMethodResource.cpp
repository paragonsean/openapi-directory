/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v70/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v70/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=70) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 70
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredPaymentMethodResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredPaymentMethodResource::OAIStoredPaymentMethodResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredPaymentMethodResource::OAIStoredPaymentMethodResource() {
    this->initializeModel();
}

OAIStoredPaymentMethodResource::~OAIStoredPaymentMethodResource() {}

void OAIStoredPaymentMethodResource::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_external_response_code_isSet = false;
    m_external_response_code_isValid = false;

    m_external_token_reference_isSet = false;
    m_external_token_reference_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_issuer_name_isSet = false;
    m_issuer_name_isValid = false;

    m_last_four_isSet = false;
    m_last_four_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_tx_reference_isSet = false;
    m_network_tx_reference_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_supported_recurring_processing_models_isSet = false;
    m_supported_recurring_processing_models_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIStoredPaymentMethodResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredPaymentMethodResource::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_external_response_code_isValid = ::OpenAPI::fromJsonValue(m_external_response_code, json[QString("externalResponseCode")]);
    m_external_response_code_isSet = !json[QString("externalResponseCode")].isNull() && m_external_response_code_isValid;

    m_external_token_reference_isValid = ::OpenAPI::fromJsonValue(m_external_token_reference, json[QString("externalTokenReference")]);
    m_external_token_reference_isSet = !json[QString("externalTokenReference")].isNull() && m_external_token_reference_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_issuer_name_isValid = ::OpenAPI::fromJsonValue(m_issuer_name, json[QString("issuerName")]);
    m_issuer_name_isSet = !json[QString("issuerName")].isNull() && m_issuer_name_isValid;

    m_last_four_isValid = ::OpenAPI::fromJsonValue(m_last_four, json[QString("lastFour")]);
    m_last_four_isSet = !json[QString("lastFour")].isNull() && m_last_four_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_tx_reference_isValid = ::OpenAPI::fromJsonValue(m_network_tx_reference, json[QString("networkTxReference")]);
    m_network_tx_reference_isSet = !json[QString("networkTxReference")].isNull() && m_network_tx_reference_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_supported_recurring_processing_models_isValid = ::OpenAPI::fromJsonValue(m_supported_recurring_processing_models, json[QString("supportedRecurringProcessingModels")]);
    m_supported_recurring_processing_models_isSet = !json[QString("supportedRecurringProcessingModels")].isNull() && m_supported_recurring_processing_models_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIStoredPaymentMethodResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredPaymentMethodResource::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_external_response_code_isSet) {
        obj.insert(QString("externalResponseCode"), ::OpenAPI::toJsonValue(m_external_response_code));
    }
    if (m_external_token_reference_isSet) {
        obj.insert(QString("externalTokenReference"), ::OpenAPI::toJsonValue(m_external_token_reference));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_issuer_name_isSet) {
        obj.insert(QString("issuerName"), ::OpenAPI::toJsonValue(m_issuer_name));
    }
    if (m_last_four_isSet) {
        obj.insert(QString("lastFour"), ::OpenAPI::toJsonValue(m_last_four));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_tx_reference_isSet) {
        obj.insert(QString("networkTxReference"), ::OpenAPI::toJsonValue(m_network_tx_reference));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_supported_recurring_processing_models.size() > 0) {
        obj.insert(QString("supportedRecurringProcessingModels"), ::OpenAPI::toJsonValue(m_supported_recurring_processing_models));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIStoredPaymentMethodResource::getBrand() const {
    return m_brand;
}
void OAIStoredPaymentMethodResource::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIStoredPaymentMethodResource::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIStoredPaymentMethodResource::getExpiryMonth() const {
    return m_expiry_month;
}
void OAIStoredPaymentMethodResource::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAIStoredPaymentMethodResource::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAIStoredPaymentMethodResource::getExpiryYear() const {
    return m_expiry_year;
}
void OAIStoredPaymentMethodResource::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAIStoredPaymentMethodResource::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAIStoredPaymentMethodResource::getExternalResponseCode() const {
    return m_external_response_code;
}
void OAIStoredPaymentMethodResource::setExternalResponseCode(const QString &external_response_code) {
    m_external_response_code = external_response_code;
    m_external_response_code_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_external_response_code_Set() const{
    return m_external_response_code_isSet;
}

bool OAIStoredPaymentMethodResource::is_external_response_code_Valid() const{
    return m_external_response_code_isValid;
}

QString OAIStoredPaymentMethodResource::getExternalTokenReference() const {
    return m_external_token_reference;
}
void OAIStoredPaymentMethodResource::setExternalTokenReference(const QString &external_token_reference) {
    m_external_token_reference = external_token_reference;
    m_external_token_reference_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_external_token_reference_Set() const{
    return m_external_token_reference_isSet;
}

bool OAIStoredPaymentMethodResource::is_external_token_reference_Valid() const{
    return m_external_token_reference_isValid;
}

QString OAIStoredPaymentMethodResource::getHolderName() const {
    return m_holder_name;
}
void OAIStoredPaymentMethodResource::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIStoredPaymentMethodResource::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIStoredPaymentMethodResource::getIban() const {
    return m_iban;
}
void OAIStoredPaymentMethodResource::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIStoredPaymentMethodResource::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIStoredPaymentMethodResource::getId() const {
    return m_id;
}
void OAIStoredPaymentMethodResource::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStoredPaymentMethodResource::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIStoredPaymentMethodResource::getIssuerName() const {
    return m_issuer_name;
}
void OAIStoredPaymentMethodResource::setIssuerName(const QString &issuer_name) {
    m_issuer_name = issuer_name;
    m_issuer_name_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_issuer_name_Set() const{
    return m_issuer_name_isSet;
}

bool OAIStoredPaymentMethodResource::is_issuer_name_Valid() const{
    return m_issuer_name_isValid;
}

QString OAIStoredPaymentMethodResource::getLastFour() const {
    return m_last_four;
}
void OAIStoredPaymentMethodResource::setLastFour(const QString &last_four) {
    m_last_four = last_four;
    m_last_four_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_last_four_Set() const{
    return m_last_four_isSet;
}

bool OAIStoredPaymentMethodResource::is_last_four_Valid() const{
    return m_last_four_isValid;
}

QString OAIStoredPaymentMethodResource::getName() const {
    return m_name;
}
void OAIStoredPaymentMethodResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStoredPaymentMethodResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStoredPaymentMethodResource::getNetworkTxReference() const {
    return m_network_tx_reference;
}
void OAIStoredPaymentMethodResource::setNetworkTxReference(const QString &network_tx_reference) {
    m_network_tx_reference = network_tx_reference;
    m_network_tx_reference_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_network_tx_reference_Set() const{
    return m_network_tx_reference_isSet;
}

bool OAIStoredPaymentMethodResource::is_network_tx_reference_Valid() const{
    return m_network_tx_reference_isValid;
}

QString OAIStoredPaymentMethodResource::getOwnerName() const {
    return m_owner_name;
}
void OAIStoredPaymentMethodResource::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIStoredPaymentMethodResource::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIStoredPaymentMethodResource::getShopperEmail() const {
    return m_shopper_email;
}
void OAIStoredPaymentMethodResource::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIStoredPaymentMethodResource::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIStoredPaymentMethodResource::getShopperReference() const {
    return m_shopper_reference;
}
void OAIStoredPaymentMethodResource::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIStoredPaymentMethodResource::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QList<QString> OAIStoredPaymentMethodResource::getSupportedRecurringProcessingModels() const {
    return m_supported_recurring_processing_models;
}
void OAIStoredPaymentMethodResource::setSupportedRecurringProcessingModels(const QList<QString> &supported_recurring_processing_models) {
    m_supported_recurring_processing_models = supported_recurring_processing_models;
    m_supported_recurring_processing_models_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_supported_recurring_processing_models_Set() const{
    return m_supported_recurring_processing_models_isSet;
}

bool OAIStoredPaymentMethodResource::is_supported_recurring_processing_models_Valid() const{
    return m_supported_recurring_processing_models_isValid;
}

QString OAIStoredPaymentMethodResource::getType() const {
    return m_type;
}
void OAIStoredPaymentMethodResource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIStoredPaymentMethodResource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIStoredPaymentMethodResource::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIStoredPaymentMethodResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_response_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_token_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_four_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tx_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_recurring_processing_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredPaymentMethodResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
