# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account_number: str=None, bank_account_type: str=None, bank_location_id: str=None, encrypted_bank_account_number: str=None, encrypted_bank_location_id: str=None, owner_name: str=None, recurring_detail_reference: str=None, type: str='ach'):
        """AchDetails - a model defined in OpenAPI

        :param bank_account_number: The bank_account_number of this AchDetails.
        :param bank_account_type: The bank_account_type of this AchDetails.
        :param bank_location_id: The bank_location_id of this AchDetails.
        :param encrypted_bank_account_number: The encrypted_bank_account_number of this AchDetails.
        :param encrypted_bank_location_id: The encrypted_bank_location_id of this AchDetails.
        :param owner_name: The owner_name of this AchDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this AchDetails.
        :param type: The type of this AchDetails.
        """
        self.openapi_types = {
            'bank_account_number': str,
            'bank_account_type': str,
            'bank_location_id': str,
            'encrypted_bank_account_number': str,
            'encrypted_bank_location_id': str,
            'owner_name': str,
            'recurring_detail_reference': str,
            'type': str
        }

        self.attribute_map = {
            'bank_account_number': 'bankAccountNumber',
            'bank_account_type': 'bankAccountType',
            'bank_location_id': 'bankLocationId',
            'encrypted_bank_account_number': 'encryptedBankAccountNumber',
            'encrypted_bank_location_id': 'encryptedBankLocationId',
            'owner_name': 'ownerName',
            'recurring_detail_reference': 'recurringDetailReference',
            'type': 'type'
        }

        self._bank_account_number = bank_account_number
        self._bank_account_type = bank_account_type
        self._bank_location_id = bank_location_id
        self._encrypted_bank_account_number = encrypted_bank_account_number
        self._encrypted_bank_location_id = encrypted_bank_location_id
        self._owner_name = owner_name
        self._recurring_detail_reference = recurring_detail_reference
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchDetails of this AchDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this AchDetails.

        The bank account number (without separators).

        :return: The bank_account_number of this AchDetails.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this AchDetails.

        The bank account number (without separators).

        :param bank_account_number: The bank_account_number of this AchDetails.
        :type bank_account_number: str
        """
        if bank_account_number is None:
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")

        self._bank_account_number = bank_account_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this AchDetails.

        The bank account type (checking, savings...).

        :return: The bank_account_type of this AchDetails.
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this AchDetails.

        The bank account type (checking, savings...).

        :param bank_account_type: The bank_account_type of this AchDetails.
        :type bank_account_type: str
        """
        allowed_values = ["balance", "checking", "deposit", "general", "other", "payment", "savings"]  # noqa: E501
        if bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_type` ({0}), must be one of {1}"
                .format(bank_account_type, allowed_values)
            )

        self._bank_account_type = bank_account_type

    @property
    def bank_location_id(self):
        """Gets the bank_location_id of this AchDetails.

        The bank routing number of the account. The field value is `nil` in most cases.

        :return: The bank_location_id of this AchDetails.
        :rtype: str
        """
        return self._bank_location_id

    @bank_location_id.setter
    def bank_location_id(self, bank_location_id):
        """Sets the bank_location_id of this AchDetails.

        The bank routing number of the account. The field value is `nil` in most cases.

        :param bank_location_id: The bank_location_id of this AchDetails.
        :type bank_location_id: str
        """

        self._bank_location_id = bank_location_id

    @property
    def encrypted_bank_account_number(self):
        """Gets the encrypted_bank_account_number of this AchDetails.

        Encrypted bank account number. The bank account number (without separators).

        :return: The encrypted_bank_account_number of this AchDetails.
        :rtype: str
        """
        return self._encrypted_bank_account_number

    @encrypted_bank_account_number.setter
    def encrypted_bank_account_number(self, encrypted_bank_account_number):
        """Sets the encrypted_bank_account_number of this AchDetails.

        Encrypted bank account number. The bank account number (without separators).

        :param encrypted_bank_account_number: The encrypted_bank_account_number of this AchDetails.
        :type encrypted_bank_account_number: str
        """

        self._encrypted_bank_account_number = encrypted_bank_account_number

    @property
    def encrypted_bank_location_id(self):
        """Gets the encrypted_bank_location_id of this AchDetails.

        Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.

        :return: The encrypted_bank_location_id of this AchDetails.
        :rtype: str
        """
        return self._encrypted_bank_location_id

    @encrypted_bank_location_id.setter
    def encrypted_bank_location_id(self, encrypted_bank_location_id):
        """Sets the encrypted_bank_location_id of this AchDetails.

        Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.

        :param encrypted_bank_location_id: The encrypted_bank_location_id of this AchDetails.
        :type encrypted_bank_location_id: str
        """

        self._encrypted_bank_location_id = encrypted_bank_location_id

    @property
    def owner_name(self):
        """Gets the owner_name of this AchDetails.

        The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.

        :return: The owner_name of this AchDetails.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this AchDetails.

        The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.

        :param owner_name: The owner_name of this AchDetails.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this AchDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this AchDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this AchDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this AchDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def type(self):
        """Gets the type of this AchDetails.

        **ach**

        :return: The type of this AchDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AchDetails.

        **ach**

        :param type: The type of this AchDetails.
        :type type: str
        """
        allowed_values = ["ach", "ach_plaid"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
