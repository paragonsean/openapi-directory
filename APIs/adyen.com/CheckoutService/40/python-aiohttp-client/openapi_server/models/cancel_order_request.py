# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.encrypted_order_data import EncryptedOrderData
from openapi_server import util


class CancelOrderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, order: EncryptedOrderData=None):
        """CancelOrderRequest - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this CancelOrderRequest.
        :param order: The order of this CancelOrderRequest.
        """
        self.openapi_types = {
            'merchant_account': str,
            'order': EncryptedOrderData
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'order': 'order'
        }

        self._merchant_account = merchant_account
        self._order = order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelOrderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelOrderRequest of this CancelOrderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CancelOrderRequest.

        The merchant account identifier that orderData belongs to.

        :return: The merchant_account of this CancelOrderRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CancelOrderRequest.

        The merchant account identifier that orderData belongs to.

        :param merchant_account: The merchant_account of this CancelOrderRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def order(self):
        """Gets the order of this CancelOrderRequest.

        The order request object that contains a pspReference that represents the order and the matching encrypted order data.

        :return: The order of this CancelOrderRequest.
        :rtype: EncryptedOrderData
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CancelOrderRequest.

        The order request object that contains a pspReference that represents the order and the matching encrypted order data.

        :param order: The order of this CancelOrderRequest.
        :type order: EncryptedOrderData
        """
        if order is None:
            raise ValueError("Invalid value for `order`, must not be `None`")

        self._order = order
