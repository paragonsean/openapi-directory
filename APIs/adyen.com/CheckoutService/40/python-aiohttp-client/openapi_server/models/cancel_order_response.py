# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CancelOrderResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, psp_reference: str=None, result_code: str=None):
        """CancelOrderResponse - a model defined in OpenAPI

        :param psp_reference: The psp_reference of this CancelOrderResponse.
        :param result_code: The result_code of this CancelOrderResponse.
        """
        self.openapi_types = {
            'psp_reference': str,
            'result_code': str
        }

        self.attribute_map = {
            'psp_reference': 'pspReference',
            'result_code': 'resultCode'
        }

        self._psp_reference = psp_reference
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CancelOrderResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CancelOrderResponse of this CancelOrderResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def psp_reference(self):
        """Gets the psp_reference of this CancelOrderResponse.

        A unique reference of the cancellation request.

        :return: The psp_reference of this CancelOrderResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this CancelOrderResponse.

        A unique reference of the cancellation request.

        :param psp_reference: The psp_reference of this CancelOrderResponse.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference

    @property
    def result_code(self):
        """Gets the result_code of this CancelOrderResponse.

        The result of the cancellation request.  Possible values:  * **Received** – Indicates the cancellation has successfully been received by Adyen, and will be processed.

        :return: The result_code of this CancelOrderResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this CancelOrderResponse.

        The result of the cancellation request.  Possible values:  * **Received** – Indicates the cancellation has successfully been received by Adyen, and will be processed.

        :param result_code: The result_code of this CancelOrderResponse.
        :type result_code: str
        """
        allowed_values = ["Received"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code
