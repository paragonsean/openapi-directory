# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AmazonPayDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amazon_pay_token: str=None, checkout_session_id: str=None, type: str='amazonpay'):
        """AmazonPayDetails - a model defined in OpenAPI

        :param amazon_pay_token: The amazon_pay_token of this AmazonPayDetails.
        :param checkout_session_id: The checkout_session_id of this AmazonPayDetails.
        :param type: The type of this AmazonPayDetails.
        """
        self.openapi_types = {
            'amazon_pay_token': str,
            'checkout_session_id': str,
            'type': str
        }

        self.attribute_map = {
            'amazon_pay_token': 'amazonPayToken',
            'checkout_session_id': 'checkoutSessionId',
            'type': 'type'
        }

        self._amazon_pay_token = amazon_pay_token
        self._checkout_session_id = checkout_session_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmazonPayDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmazonPayDetails of this AmazonPayDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amazon_pay_token(self):
        """Gets the amazon_pay_token of this AmazonPayDetails.

        This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.

        :return: The amazon_pay_token of this AmazonPayDetails.
        :rtype: str
        """
        return self._amazon_pay_token

    @amazon_pay_token.setter
    def amazon_pay_token(self, amazon_pay_token):
        """Sets the amazon_pay_token of this AmazonPayDetails.

        This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.

        :param amazon_pay_token: The amazon_pay_token of this AmazonPayDetails.
        :type amazon_pay_token: str
        """

        self._amazon_pay_token = amazon_pay_token

    @property
    def checkout_session_id(self):
        """Gets the checkout_session_id of this AmazonPayDetails.

        The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.

        :return: The checkout_session_id of this AmazonPayDetails.
        :rtype: str
        """
        return self._checkout_session_id

    @checkout_session_id.setter
    def checkout_session_id(self, checkout_session_id):
        """Sets the checkout_session_id of this AmazonPayDetails.

        The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.

        :param checkout_session_id: The checkout_session_id of this AmazonPayDetails.
        :type checkout_session_id: str
        """

        self._checkout_session_id = checkout_session_id

    @property
    def type(self):
        """Gets the type of this AmazonPayDetails.

        **amazonpay**

        :return: The type of this AmazonPayDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AmazonPayDetails.

        **amazonpay**

        :param type: The type of this AmazonPayDetails.
        :type type: str
        """
        allowed_values = ["amazonpay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
