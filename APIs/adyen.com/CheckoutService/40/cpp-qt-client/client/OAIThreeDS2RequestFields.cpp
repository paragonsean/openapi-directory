/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v40/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v40/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=40) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDS2RequestFields.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDS2RequestFields::OAIThreeDS2RequestFields(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDS2RequestFields::OAIThreeDS2RequestFields() {
    this->initializeModel();
}

OAIThreeDS2RequestFields::~OAIThreeDS2RequestFields() {}

void OAIThreeDS2RequestFields::initializeModel() {

    m_authentication_only_isSet = false;
    m_authentication_only_isValid = false;

    m_challenge_indicator_isSet = false;
    m_challenge_indicator_isValid = false;

    m_device_render_options_isSet = false;
    m_device_render_options_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_notification_url_isSet = false;
    m_notification_url_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_sdk_app_id_isSet = false;
    m_sdk_app_id_isValid = false;

    m_sdk_ephem_pub_key_isSet = false;
    m_sdk_ephem_pub_key_isValid = false;

    m_sdk_max_timeout_isSet = false;
    m_sdk_max_timeout_isValid = false;

    m_sdk_reference_number_isSet = false;
    m_sdk_reference_number_isValid = false;

    m_sdk_trans_id_isSet = false;
    m_sdk_trans_id_isValid = false;

    m_three_ds_comp_ind_isSet = false;
    m_three_ds_comp_ind_isValid = false;

    m_three_ds_requestor_id_isSet = false;
    m_three_ds_requestor_id_isValid = false;

    m_three_ds_requestor_name_isSet = false;
    m_three_ds_requestor_name_isValid = false;

    m_three_ds_requestor_url_isSet = false;
    m_three_ds_requestor_url_isValid = false;
}

void OAIThreeDS2RequestFields::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDS2RequestFields::fromJsonObject(QJsonObject json) {

    m_authentication_only_isValid = ::OpenAPI::fromJsonValue(m_authentication_only, json[QString("authenticationOnly")]);
    m_authentication_only_isSet = !json[QString("authenticationOnly")].isNull() && m_authentication_only_isValid;

    m_challenge_indicator_isValid = ::OpenAPI::fromJsonValue(m_challenge_indicator, json[QString("challengeIndicator")]);
    m_challenge_indicator_isSet = !json[QString("challengeIndicator")].isNull() && m_challenge_indicator_isValid;

    m_device_render_options_isValid = ::OpenAPI::fromJsonValue(m_device_render_options, json[QString("deviceRenderOptions")]);
    m_device_render_options_isSet = !json[QString("deviceRenderOptions")].isNull() && m_device_render_options_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_notification_url_isValid = ::OpenAPI::fromJsonValue(m_notification_url, json[QString("notificationURL")]);
    m_notification_url_isSet = !json[QString("notificationURL")].isNull() && m_notification_url_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_sdk_app_id_isValid = ::OpenAPI::fromJsonValue(m_sdk_app_id, json[QString("sdkAppID")]);
    m_sdk_app_id_isSet = !json[QString("sdkAppID")].isNull() && m_sdk_app_id_isValid;

    m_sdk_ephem_pub_key_isValid = ::OpenAPI::fromJsonValue(m_sdk_ephem_pub_key, json[QString("sdkEphemPubKey")]);
    m_sdk_ephem_pub_key_isSet = !json[QString("sdkEphemPubKey")].isNull() && m_sdk_ephem_pub_key_isValid;

    m_sdk_max_timeout_isValid = ::OpenAPI::fromJsonValue(m_sdk_max_timeout, json[QString("sdkMaxTimeout")]);
    m_sdk_max_timeout_isSet = !json[QString("sdkMaxTimeout")].isNull() && m_sdk_max_timeout_isValid;

    m_sdk_reference_number_isValid = ::OpenAPI::fromJsonValue(m_sdk_reference_number, json[QString("sdkReferenceNumber")]);
    m_sdk_reference_number_isSet = !json[QString("sdkReferenceNumber")].isNull() && m_sdk_reference_number_isValid;

    m_sdk_trans_id_isValid = ::OpenAPI::fromJsonValue(m_sdk_trans_id, json[QString("sdkTransID")]);
    m_sdk_trans_id_isSet = !json[QString("sdkTransID")].isNull() && m_sdk_trans_id_isValid;

    m_three_ds_comp_ind_isValid = ::OpenAPI::fromJsonValue(m_three_ds_comp_ind, json[QString("threeDSCompInd")]);
    m_three_ds_comp_ind_isSet = !json[QString("threeDSCompInd")].isNull() && m_three_ds_comp_ind_isValid;

    m_three_ds_requestor_id_isValid = ::OpenAPI::fromJsonValue(m_three_ds_requestor_id, json[QString("threeDSRequestorID")]);
    m_three_ds_requestor_id_isSet = !json[QString("threeDSRequestorID")].isNull() && m_three_ds_requestor_id_isValid;

    m_three_ds_requestor_name_isValid = ::OpenAPI::fromJsonValue(m_three_ds_requestor_name, json[QString("threeDSRequestorName")]);
    m_three_ds_requestor_name_isSet = !json[QString("threeDSRequestorName")].isNull() && m_three_ds_requestor_name_isValid;

    m_three_ds_requestor_url_isValid = ::OpenAPI::fromJsonValue(m_three_ds_requestor_url, json[QString("threeDSRequestorURL")]);
    m_three_ds_requestor_url_isSet = !json[QString("threeDSRequestorURL")].isNull() && m_three_ds_requestor_url_isValid;
}

QString OAIThreeDS2RequestFields::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDS2RequestFields::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_only_isSet) {
        obj.insert(QString("authenticationOnly"), ::OpenAPI::toJsonValue(m_authentication_only));
    }
    if (m_challenge_indicator_isSet) {
        obj.insert(QString("challengeIndicator"), ::OpenAPI::toJsonValue(m_challenge_indicator));
    }
    if (m_device_render_options.isSet()) {
        obj.insert(QString("deviceRenderOptions"), ::OpenAPI::toJsonValue(m_device_render_options));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_notification_url_isSet) {
        obj.insert(QString("notificationURL"), ::OpenAPI::toJsonValue(m_notification_url));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_sdk_app_id_isSet) {
        obj.insert(QString("sdkAppID"), ::OpenAPI::toJsonValue(m_sdk_app_id));
    }
    if (m_sdk_ephem_pub_key.isSet()) {
        obj.insert(QString("sdkEphemPubKey"), ::OpenAPI::toJsonValue(m_sdk_ephem_pub_key));
    }
    if (m_sdk_max_timeout_isSet) {
        obj.insert(QString("sdkMaxTimeout"), ::OpenAPI::toJsonValue(m_sdk_max_timeout));
    }
    if (m_sdk_reference_number_isSet) {
        obj.insert(QString("sdkReferenceNumber"), ::OpenAPI::toJsonValue(m_sdk_reference_number));
    }
    if (m_sdk_trans_id_isSet) {
        obj.insert(QString("sdkTransID"), ::OpenAPI::toJsonValue(m_sdk_trans_id));
    }
    if (m_three_ds_comp_ind_isSet) {
        obj.insert(QString("threeDSCompInd"), ::OpenAPI::toJsonValue(m_three_ds_comp_ind));
    }
    if (m_three_ds_requestor_id_isSet) {
        obj.insert(QString("threeDSRequestorID"), ::OpenAPI::toJsonValue(m_three_ds_requestor_id));
    }
    if (m_three_ds_requestor_name_isSet) {
        obj.insert(QString("threeDSRequestorName"), ::OpenAPI::toJsonValue(m_three_ds_requestor_name));
    }
    if (m_three_ds_requestor_url_isSet) {
        obj.insert(QString("threeDSRequestorURL"), ::OpenAPI::toJsonValue(m_three_ds_requestor_url));
    }
    return obj;
}

bool OAIThreeDS2RequestFields::isAuthenticationOnly() const {
    return m_authentication_only;
}
void OAIThreeDS2RequestFields::setAuthenticationOnly(const bool &authentication_only) {
    m_authentication_only = authentication_only;
    m_authentication_only_isSet = true;
}

bool OAIThreeDS2RequestFields::is_authentication_only_Set() const{
    return m_authentication_only_isSet;
}

bool OAIThreeDS2RequestFields::is_authentication_only_Valid() const{
    return m_authentication_only_isValid;
}

QString OAIThreeDS2RequestFields::getChallengeIndicator() const {
    return m_challenge_indicator;
}
void OAIThreeDS2RequestFields::setChallengeIndicator(const QString &challenge_indicator) {
    m_challenge_indicator = challenge_indicator;
    m_challenge_indicator_isSet = true;
}

bool OAIThreeDS2RequestFields::is_challenge_indicator_Set() const{
    return m_challenge_indicator_isSet;
}

bool OAIThreeDS2RequestFields::is_challenge_indicator_Valid() const{
    return m_challenge_indicator_isValid;
}

OAIDeviceRenderOptions OAIThreeDS2RequestFields::getDeviceRenderOptions() const {
    return m_device_render_options;
}
void OAIThreeDS2RequestFields::setDeviceRenderOptions(const OAIDeviceRenderOptions &device_render_options) {
    m_device_render_options = device_render_options;
    m_device_render_options_isSet = true;
}

bool OAIThreeDS2RequestFields::is_device_render_options_Set() const{
    return m_device_render_options_isSet;
}

bool OAIThreeDS2RequestFields::is_device_render_options_Valid() const{
    return m_device_render_options_isValid;
}

QString OAIThreeDS2RequestFields::getMessageVersion() const {
    return m_message_version;
}
void OAIThreeDS2RequestFields::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIThreeDS2RequestFields::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIThreeDS2RequestFields::is_message_version_Valid() const{
    return m_message_version_isValid;
}

QString OAIThreeDS2RequestFields::getNotificationUrl() const {
    return m_notification_url;
}
void OAIThreeDS2RequestFields::setNotificationUrl(const QString &notification_url) {
    m_notification_url = notification_url;
    m_notification_url_isSet = true;
}

bool OAIThreeDS2RequestFields::is_notification_url_Set() const{
    return m_notification_url_isSet;
}

bool OAIThreeDS2RequestFields::is_notification_url_Valid() const{
    return m_notification_url_isValid;
}

QString OAIThreeDS2RequestFields::getPlatform() const {
    return m_platform;
}
void OAIThreeDS2RequestFields::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIThreeDS2RequestFields::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIThreeDS2RequestFields::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIThreeDS2RequestFields::getSdkAppId() const {
    return m_sdk_app_id;
}
void OAIThreeDS2RequestFields::setSdkAppId(const QString &sdk_app_id) {
    m_sdk_app_id = sdk_app_id;
    m_sdk_app_id_isSet = true;
}

bool OAIThreeDS2RequestFields::is_sdk_app_id_Set() const{
    return m_sdk_app_id_isSet;
}

bool OAIThreeDS2RequestFields::is_sdk_app_id_Valid() const{
    return m_sdk_app_id_isValid;
}

OAISDKEphemPubKey OAIThreeDS2RequestFields::getSdkEphemPubKey() const {
    return m_sdk_ephem_pub_key;
}
void OAIThreeDS2RequestFields::setSdkEphemPubKey(const OAISDKEphemPubKey &sdk_ephem_pub_key) {
    m_sdk_ephem_pub_key = sdk_ephem_pub_key;
    m_sdk_ephem_pub_key_isSet = true;
}

bool OAIThreeDS2RequestFields::is_sdk_ephem_pub_key_Set() const{
    return m_sdk_ephem_pub_key_isSet;
}

bool OAIThreeDS2RequestFields::is_sdk_ephem_pub_key_Valid() const{
    return m_sdk_ephem_pub_key_isValid;
}

qint32 OAIThreeDS2RequestFields::getSdkMaxTimeout() const {
    return m_sdk_max_timeout;
}
void OAIThreeDS2RequestFields::setSdkMaxTimeout(const qint32 &sdk_max_timeout) {
    m_sdk_max_timeout = sdk_max_timeout;
    m_sdk_max_timeout_isSet = true;
}

bool OAIThreeDS2RequestFields::is_sdk_max_timeout_Set() const{
    return m_sdk_max_timeout_isSet;
}

bool OAIThreeDS2RequestFields::is_sdk_max_timeout_Valid() const{
    return m_sdk_max_timeout_isValid;
}

QString OAIThreeDS2RequestFields::getSdkReferenceNumber() const {
    return m_sdk_reference_number;
}
void OAIThreeDS2RequestFields::setSdkReferenceNumber(const QString &sdk_reference_number) {
    m_sdk_reference_number = sdk_reference_number;
    m_sdk_reference_number_isSet = true;
}

bool OAIThreeDS2RequestFields::is_sdk_reference_number_Set() const{
    return m_sdk_reference_number_isSet;
}

bool OAIThreeDS2RequestFields::is_sdk_reference_number_Valid() const{
    return m_sdk_reference_number_isValid;
}

QString OAIThreeDS2RequestFields::getSdkTransId() const {
    return m_sdk_trans_id;
}
void OAIThreeDS2RequestFields::setSdkTransId(const QString &sdk_trans_id) {
    m_sdk_trans_id = sdk_trans_id;
    m_sdk_trans_id_isSet = true;
}

bool OAIThreeDS2RequestFields::is_sdk_trans_id_Set() const{
    return m_sdk_trans_id_isSet;
}

bool OAIThreeDS2RequestFields::is_sdk_trans_id_Valid() const{
    return m_sdk_trans_id_isValid;
}

QString OAIThreeDS2RequestFields::getThreeDsCompInd() const {
    return m_three_ds_comp_ind;
}
void OAIThreeDS2RequestFields::setThreeDsCompInd(const QString &three_ds_comp_ind) {
    m_three_ds_comp_ind = three_ds_comp_ind;
    m_three_ds_comp_ind_isSet = true;
}

bool OAIThreeDS2RequestFields::is_three_ds_comp_ind_Set() const{
    return m_three_ds_comp_ind_isSet;
}

bool OAIThreeDS2RequestFields::is_three_ds_comp_ind_Valid() const{
    return m_three_ds_comp_ind_isValid;
}

QString OAIThreeDS2RequestFields::getThreeDsRequestorId() const {
    return m_three_ds_requestor_id;
}
void OAIThreeDS2RequestFields::setThreeDsRequestorId(const QString &three_ds_requestor_id) {
    m_three_ds_requestor_id = three_ds_requestor_id;
    m_three_ds_requestor_id_isSet = true;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_id_Set() const{
    return m_three_ds_requestor_id_isSet;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_id_Valid() const{
    return m_three_ds_requestor_id_isValid;
}

QString OAIThreeDS2RequestFields::getThreeDsRequestorName() const {
    return m_three_ds_requestor_name;
}
void OAIThreeDS2RequestFields::setThreeDsRequestorName(const QString &three_ds_requestor_name) {
    m_three_ds_requestor_name = three_ds_requestor_name;
    m_three_ds_requestor_name_isSet = true;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_name_Set() const{
    return m_three_ds_requestor_name_isSet;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_name_Valid() const{
    return m_three_ds_requestor_name_isValid;
}

QString OAIThreeDS2RequestFields::getThreeDsRequestorUrl() const {
    return m_three_ds_requestor_url;
}
void OAIThreeDS2RequestFields::setThreeDsRequestorUrl(const QString &three_ds_requestor_url) {
    m_three_ds_requestor_url = three_ds_requestor_url;
    m_three_ds_requestor_url_isSet = true;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_url_Set() const{
    return m_three_ds_requestor_url_isSet;
}

bool OAIThreeDS2RequestFields::is_three_ds_requestor_url_Valid() const{
    return m_three_ds_requestor_url_isValid;
}

bool OAIThreeDS2RequestFields::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_render_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_ephem_pub_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_max_timeout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_comp_ind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_requestor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_requestor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_requestor_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDS2RequestFields::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
