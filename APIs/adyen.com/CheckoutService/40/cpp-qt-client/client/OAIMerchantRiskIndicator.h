/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v40/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v40/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=40) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMerchantRiskIndicator.h
 *
 * 
 */

#ifndef OAIMerchantRiskIndicator_H
#define OAIMerchantRiskIndicator_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIMerchantRiskIndicator : public OAIObject {
public:
    OAIMerchantRiskIndicator();
    OAIMerchantRiskIndicator(QString json);
    ~OAIMerchantRiskIndicator() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAddressMatch() const;
    void setAddressMatch(const bool &address_match);
    bool is_address_match_Set() const;
    bool is_address_match_Valid() const;

    QString getDeliveryAddressIndicator() const;
    void setDeliveryAddressIndicator(const QString &delivery_address_indicator);
    bool is_delivery_address_indicator_Set() const;
    bool is_delivery_address_indicator_Valid() const;

    QString getDeliveryEmail() const;
    void setDeliveryEmail(const QString &delivery_email);
    bool is_delivery_email_Set() const;
    bool is_delivery_email_Valid() const;

    QString getDeliveryTimeframe() const;
    void setDeliveryTimeframe(const QString &delivery_timeframe);
    bool is_delivery_timeframe_Set() const;
    bool is_delivery_timeframe_Valid() const;

    OAIAmount getGiftCardAmount() const;
    void setGiftCardAmount(const OAIAmount &gift_card_amount);
    bool is_gift_card_amount_Set() const;
    bool is_gift_card_amount_Valid() const;

    qint32 getGiftCardCount() const;
    void setGiftCardCount(const qint32 &gift_card_count);
    bool is_gift_card_count_Set() const;
    bool is_gift_card_count_Valid() const;

    QDateTime getPreOrderDate() const;
    void setPreOrderDate(const QDateTime &pre_order_date);
    bool is_pre_order_date_Set() const;
    bool is_pre_order_date_Valid() const;

    bool isPreOrderPurchase() const;
    void setPreOrderPurchase(const bool &pre_order_purchase);
    bool is_pre_order_purchase_Set() const;
    bool is_pre_order_purchase_Valid() const;

    bool isReorderItems() const;
    void setReorderItems(const bool &reorder_items);
    bool is_reorder_items_Set() const;
    bool is_reorder_items_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_address_match;
    bool m_address_match_isSet;
    bool m_address_match_isValid;

    QString m_delivery_address_indicator;
    bool m_delivery_address_indicator_isSet;
    bool m_delivery_address_indicator_isValid;

    QString m_delivery_email;
    bool m_delivery_email_isSet;
    bool m_delivery_email_isValid;

    QString m_delivery_timeframe;
    bool m_delivery_timeframe_isSet;
    bool m_delivery_timeframe_isValid;

    OAIAmount m_gift_card_amount;
    bool m_gift_card_amount_isSet;
    bool m_gift_card_amount_isValid;

    qint32 m_gift_card_count;
    bool m_gift_card_count_isSet;
    bool m_gift_card_count_isValid;

    QDateTime m_pre_order_date;
    bool m_pre_order_date_isSet;
    bool m_pre_order_date_isValid;

    bool m_pre_order_purchase;
    bool m_pre_order_purchase_isSet;
    bool m_pre_order_purchase_isValid;

    bool m_reorder_items;
    bool m_reorder_items_isSet;
    bool m_reorder_items_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMerchantRiskIndicator)

#endif // OAIMerchantRiskIndicator_H
