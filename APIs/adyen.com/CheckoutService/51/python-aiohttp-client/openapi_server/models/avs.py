# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Avs(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_editable: bool=None, enabled: str=None):
        """Avs - a model defined in OpenAPI

        :param address_editable: The address_editable of this Avs.
        :param enabled: The enabled of this Avs.
        """
        self.openapi_types = {
            'address_editable': bool,
            'enabled': str
        }

        self.attribute_map = {
            'address_editable': 'addressEditable',
            'enabled': 'enabled'
        }

        self._address_editable = address_editable
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Avs':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Avs of this Avs.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_editable(self):
        """Gets the address_editable of this Avs.

        Indicates whether the shopper is allowed to modify the billing address for the current payment request.

        :return: The address_editable of this Avs.
        :rtype: bool
        """
        return self._address_editable

    @address_editable.setter
    def address_editable(self, address_editable):
        """Sets the address_editable of this Avs.

        Indicates whether the shopper is allowed to modify the billing address for the current payment request.

        :param address_editable: The address_editable of this Avs.
        :type address_editable: bool
        """

        self._address_editable = address_editable

    @property
    def enabled(self):
        """Gets the enabled of this Avs.

        Specifies whether the shopper should enter their billing address during checkout.  Allowed values: * yes — Perform AVS checks for every card payment. * automatic — Perform AVS checks only when required to optimize the conversion rate. * no — Do not perform AVS checks.

        :return: The enabled of this Avs.
        :rtype: str
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Avs.

        Specifies whether the shopper should enter their billing address during checkout.  Allowed values: * yes — Perform AVS checks for every card payment. * automatic — Perform AVS checks only when required to optimize the conversion rate. * no — Do not perform AVS checks.

        :param enabled: The enabled of this Avs.
        :type enabled: str
        """
        allowed_values = ["true", "false", "automatic"]  # noqa: E501
        if enabled not in allowed_values:
            raise ValueError(
                "Invalid value for `enabled` ({0}), must be one of {1}"
                .format(enabled, allowed_values)
            )

        self._enabled = enabled
