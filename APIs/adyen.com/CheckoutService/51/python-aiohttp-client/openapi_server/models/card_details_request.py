# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardDetailsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_number: str=None, country_code: str=None, encrypted_card_number: str=None, merchant_account: str=None, supported_brands: List[str]=None):
        """CardDetailsRequest - a model defined in OpenAPI

        :param card_number: The card_number of this CardDetailsRequest.
        :param country_code: The country_code of this CardDetailsRequest.
        :param encrypted_card_number: The encrypted_card_number of this CardDetailsRequest.
        :param merchant_account: The merchant_account of this CardDetailsRequest.
        :param supported_brands: The supported_brands of this CardDetailsRequest.
        """
        self.openapi_types = {
            'card_number': str,
            'country_code': str,
            'encrypted_card_number': str,
            'merchant_account': str,
            'supported_brands': List[str]
        }

        self.attribute_map = {
            'card_number': 'cardNumber',
            'country_code': 'countryCode',
            'encrypted_card_number': 'encryptedCardNumber',
            'merchant_account': 'merchantAccount',
            'supported_brands': 'supportedBrands'
        }

        self._card_number = card_number
        self._country_code = country_code
        self._encrypted_card_number = encrypted_card_number
        self._merchant_account = merchant_account
        self._supported_brands = supported_brands

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardDetailsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardDetailsRequest of this CardDetailsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_number(self):
        """Gets the card_number of this CardDetailsRequest.

        A minimum of the first 8 digits of the card number and a maximum of the full card number. 11 digits gives the best result.   You must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data.

        :return: The card_number of this CardDetailsRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CardDetailsRequest.

        A minimum of the first 8 digits of the card number and a maximum of the full card number. 11 digits gives the best result.   You must be [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide) to collect raw card data.

        :param card_number: The card_number of this CardDetailsRequest.
        :type card_number: str
        """
        if card_number is None:
            raise ValueError("Invalid value for `card_number`, must not be `None`")

        self._card_number = card_number

    @property
    def country_code(self):
        """Gets the country_code of this CardDetailsRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :return: The country_code of this CardDetailsRequest.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CardDetailsRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :param country_code: The country_code of this CardDetailsRequest.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def encrypted_card_number(self):
        """Gets the encrypted_card_number of this CardDetailsRequest.

        The encrypted card number.

        :return: The encrypted_card_number of this CardDetailsRequest.
        :rtype: str
        """
        return self._encrypted_card_number

    @encrypted_card_number.setter
    def encrypted_card_number(self, encrypted_card_number):
        """Sets the encrypted_card_number of this CardDetailsRequest.

        The encrypted card number.

        :param encrypted_card_number: The encrypted_card_number of this CardDetailsRequest.
        :type encrypted_card_number: str
        """

        self._encrypted_card_number = encrypted_card_number

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CardDetailsRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this CardDetailsRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CardDetailsRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this CardDetailsRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def supported_brands(self):
        """Gets the supported_brands of this CardDetailsRequest.

        The card brands you support. This is the [`brands`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.   If not included, our API uses the ones configured for your merchant account and, if provided, the country code.

        :return: The supported_brands of this CardDetailsRequest.
        :rtype: List[str]
        """
        return self._supported_brands

    @supported_brands.setter
    def supported_brands(self, supported_brands):
        """Sets the supported_brands of this CardDetailsRequest.

        The card brands you support. This is the [`brands`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods__resParam_paymentMethods-brands) array from your [`/paymentMethods`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/paymentMethods) response.   If not included, our API uses the ones configured for your merchant account and, if provided, the country code.

        :param supported_brands: The supported_brands of this CardDetailsRequest.
        :type supported_brands: List[str]
        """

        self._supported_brands = supported_brands
