# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ach_details import AchDetails
from openapi_server.models.afterpay_details import AfterpayDetails
from openapi_server.models.amazon_pay_details import AmazonPayDetails
from openapi_server.models.android_pay_details import AndroidPayDetails
from openapi_server.models.apple_pay_details import ApplePayDetails
from openapi_server.models.bacs_direct_debit_details import BacsDirectDebitDetails
from openapi_server.models.bill_desk_details import BillDeskDetails
from openapi_server.models.blik_details import BlikDetails
from openapi_server.models.card_details import CardDetails
from openapi_server.models.cellulant_details import CellulantDetails
from openapi_server.models.doku_details import DokuDetails
from openapi_server.models.dotpay_details import DotpayDetails
from openapi_server.models.dragonpay_details import DragonpayDetails
from openapi_server.models.econtext_voucher_details import EcontextVoucherDetails
from openapi_server.models.generic_issuer_payment_method_details import GenericIssuerPaymentMethodDetails
from openapi_server.models.giropay_details import GiropayDetails
from openapi_server.models.google_pay_details import GooglePayDetails
from openapi_server.models.ideal_details import IdealDetails
from openapi_server.models.klarna_details import KlarnaDetails
from openapi_server.models.masterpass_details import MasterpassDetails
from openapi_server.models.mbway_details import MbwayDetails
from openapi_server.models.mobile_pay_details import MobilePayDetails
from openapi_server.models.mol_pay_details import MolPayDetails
from openapi_server.models.open_invoice_details import OpenInvoiceDetails
from openapi_server.models.pay_pal_details import PayPalDetails
from openapi_server.models.pay_u_upi_details import PayUUpiDetails
from openapi_server.models.pay_with_google_details import PayWithGoogleDetails
from openapi_server.models.payment_details import PaymentDetails
from openapi_server.models.ratepay_details import RatepayDetails
from openapi_server.models.samsung_pay_details import SamsungPayDetails
from openapi_server.models.sepa_direct_debit_details import SepaDirectDebitDetails
from openapi_server.models.stored_payment_method_details import StoredPaymentMethodDetails
from openapi_server.models.upi_collect_details import UpiCollectDetails
from openapi_server.models.upi_intent_details import UpiIntentDetails
from openapi_server.models.vipps_details import VippsDetails
from openapi_server.models.visa_checkout_details import VisaCheckoutDetails
from openapi_server.models.we_chat_pay_details import WeChatPayDetails
from openapi_server.models.we_chat_pay_mini_program_details import WeChatPayMiniProgramDetails
from openapi_server.models.zip_details import ZipDetails
from openapi_server import util


class PaymentRequestPaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account_number: str=None, bank_account_type: str=None, bank_location_id: str=None, encrypted_bank_account_number: str=None, encrypted_bank_location_id: str=None, owner_name: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str='ach', billing_address: str=None, delivery_address: str=None, personal_details: str=None, amazon_pay_token: str=None, checkout_session_id: str=None, apple_pay_token: str=None, funding_source: str=None, issuer: str=None, blik_code: str=None, brand: str=None, cupsecureplus_smscode: str=None, cvc: str=None, encrypted_card_number: str=None, encrypted_expiry_month: str=None, encrypted_expiry_year: str=None, encrypted_security_code: str=None, expiry_month: str=None, expiry_year: str=None, holder_name: str=None, network_payment_reference: str=None, number: str=None, shopper_notification_reference: str=None, three_ds2_sdk_version: str=None, first_name: str=None, last_name: str=None, shopper_email: str=None, telephone_number: str=None, google_pay_card_network: str=None, google_pay_token: str=None, subtype: str=None, masterpass_transaction_id: str=None, order_id: str=None, payee_preferred: str=None, payer_id: str=None, payer_selected: str=None, virtual_payment_address: str=None, samsung_pay_token: str=None, iban: str=None, billing_sequence_number: str=None, visa_checkout_call_id: str=None, app_id: str=None, openid: str=None, click_and_collect: str=None):
        """PaymentRequestPaymentMethod - a model defined in OpenAPI

        :param bank_account_number: The bank_account_number of this PaymentRequestPaymentMethod.
        :param bank_account_type: The bank_account_type of this PaymentRequestPaymentMethod.
        :param bank_location_id: The bank_location_id of this PaymentRequestPaymentMethod.
        :param encrypted_bank_account_number: The encrypted_bank_account_number of this PaymentRequestPaymentMethod.
        :param encrypted_bank_location_id: The encrypted_bank_location_id of this PaymentRequestPaymentMethod.
        :param owner_name: The owner_name of this PaymentRequestPaymentMethod.
        :param recurring_detail_reference: The recurring_detail_reference of this PaymentRequestPaymentMethod.
        :param stored_payment_method_id: The stored_payment_method_id of this PaymentRequestPaymentMethod.
        :param type: The type of this PaymentRequestPaymentMethod.
        :param billing_address: The billing_address of this PaymentRequestPaymentMethod.
        :param delivery_address: The delivery_address of this PaymentRequestPaymentMethod.
        :param personal_details: The personal_details of this PaymentRequestPaymentMethod.
        :param amazon_pay_token: The amazon_pay_token of this PaymentRequestPaymentMethod.
        :param checkout_session_id: The checkout_session_id of this PaymentRequestPaymentMethod.
        :param apple_pay_token: The apple_pay_token of this PaymentRequestPaymentMethod.
        :param funding_source: The funding_source of this PaymentRequestPaymentMethod.
        :param issuer: The issuer of this PaymentRequestPaymentMethod.
        :param blik_code: The blik_code of this PaymentRequestPaymentMethod.
        :param brand: The brand of this PaymentRequestPaymentMethod.
        :param cupsecureplus_smscode: The cupsecureplus_smscode of this PaymentRequestPaymentMethod.
        :param cvc: The cvc of this PaymentRequestPaymentMethod.
        :param encrypted_card_number: The encrypted_card_number of this PaymentRequestPaymentMethod.
        :param encrypted_expiry_month: The encrypted_expiry_month of this PaymentRequestPaymentMethod.
        :param encrypted_expiry_year: The encrypted_expiry_year of this PaymentRequestPaymentMethod.
        :param encrypted_security_code: The encrypted_security_code of this PaymentRequestPaymentMethod.
        :param expiry_month: The expiry_month of this PaymentRequestPaymentMethod.
        :param expiry_year: The expiry_year of this PaymentRequestPaymentMethod.
        :param holder_name: The holder_name of this PaymentRequestPaymentMethod.
        :param network_payment_reference: The network_payment_reference of this PaymentRequestPaymentMethod.
        :param number: The number of this PaymentRequestPaymentMethod.
        :param shopper_notification_reference: The shopper_notification_reference of this PaymentRequestPaymentMethod.
        :param three_ds2_sdk_version: The three_ds2_sdk_version of this PaymentRequestPaymentMethod.
        :param first_name: The first_name of this PaymentRequestPaymentMethod.
        :param last_name: The last_name of this PaymentRequestPaymentMethod.
        :param shopper_email: The shopper_email of this PaymentRequestPaymentMethod.
        :param telephone_number: The telephone_number of this PaymentRequestPaymentMethod.
        :param google_pay_card_network: The google_pay_card_network of this PaymentRequestPaymentMethod.
        :param google_pay_token: The google_pay_token of this PaymentRequestPaymentMethod.
        :param subtype: The subtype of this PaymentRequestPaymentMethod.
        :param masterpass_transaction_id: The masterpass_transaction_id of this PaymentRequestPaymentMethod.
        :param order_id: The order_id of this PaymentRequestPaymentMethod.
        :param payee_preferred: The payee_preferred of this PaymentRequestPaymentMethod.
        :param payer_id: The payer_id of this PaymentRequestPaymentMethod.
        :param payer_selected: The payer_selected of this PaymentRequestPaymentMethod.
        :param virtual_payment_address: The virtual_payment_address of this PaymentRequestPaymentMethod.
        :param samsung_pay_token: The samsung_pay_token of this PaymentRequestPaymentMethod.
        :param iban: The iban of this PaymentRequestPaymentMethod.
        :param billing_sequence_number: The billing_sequence_number of this PaymentRequestPaymentMethod.
        :param visa_checkout_call_id: The visa_checkout_call_id of this PaymentRequestPaymentMethod.
        :param app_id: The app_id of this PaymentRequestPaymentMethod.
        :param openid: The openid of this PaymentRequestPaymentMethod.
        :param click_and_collect: The click_and_collect of this PaymentRequestPaymentMethod.
        """
        self.openapi_types = {
            'bank_account_number': str,
            'bank_account_type': str,
            'bank_location_id': str,
            'encrypted_bank_account_number': str,
            'encrypted_bank_location_id': str,
            'owner_name': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str,
            'billing_address': str,
            'delivery_address': str,
            'personal_details': str,
            'amazon_pay_token': str,
            'checkout_session_id': str,
            'apple_pay_token': str,
            'funding_source': str,
            'issuer': str,
            'blik_code': str,
            'brand': str,
            'cupsecureplus_smscode': str,
            'cvc': str,
            'encrypted_card_number': str,
            'encrypted_expiry_month': str,
            'encrypted_expiry_year': str,
            'encrypted_security_code': str,
            'expiry_month': str,
            'expiry_year': str,
            'holder_name': str,
            'network_payment_reference': str,
            'number': str,
            'shopper_notification_reference': str,
            'three_ds2_sdk_version': str,
            'first_name': str,
            'last_name': str,
            'shopper_email': str,
            'telephone_number': str,
            'google_pay_card_network': str,
            'google_pay_token': str,
            'subtype': str,
            'masterpass_transaction_id': str,
            'order_id': str,
            'payee_preferred': str,
            'payer_id': str,
            'payer_selected': str,
            'virtual_payment_address': str,
            'samsung_pay_token': str,
            'iban': str,
            'billing_sequence_number': str,
            'visa_checkout_call_id': str,
            'app_id': str,
            'openid': str,
            'click_and_collect': str
        }

        self.attribute_map = {
            'bank_account_number': 'bankAccountNumber',
            'bank_account_type': 'bankAccountType',
            'bank_location_id': 'bankLocationId',
            'encrypted_bank_account_number': 'encryptedBankAccountNumber',
            'encrypted_bank_location_id': 'encryptedBankLocationId',
            'owner_name': 'ownerName',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type',
            'billing_address': 'billingAddress',
            'delivery_address': 'deliveryAddress',
            'personal_details': 'personalDetails',
            'amazon_pay_token': 'amazonPayToken',
            'checkout_session_id': 'checkoutSessionId',
            'apple_pay_token': 'applePayToken',
            'funding_source': 'fundingSource',
            'issuer': 'issuer',
            'blik_code': 'blikCode',
            'brand': 'brand',
            'cupsecureplus_smscode': 'cupsecureplus.smscode',
            'cvc': 'cvc',
            'encrypted_card_number': 'encryptedCardNumber',
            'encrypted_expiry_month': 'encryptedExpiryMonth',
            'encrypted_expiry_year': 'encryptedExpiryYear',
            'encrypted_security_code': 'encryptedSecurityCode',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'holder_name': 'holderName',
            'network_payment_reference': 'networkPaymentReference',
            'number': 'number',
            'shopper_notification_reference': 'shopperNotificationReference',
            'three_ds2_sdk_version': 'threeDS2SdkVersion',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'shopper_email': 'shopperEmail',
            'telephone_number': 'telephoneNumber',
            'google_pay_card_network': 'googlePayCardNetwork',
            'google_pay_token': 'googlePayToken',
            'subtype': 'subtype',
            'masterpass_transaction_id': 'masterpassTransactionId',
            'order_id': 'orderID',
            'payee_preferred': 'payeePreferred',
            'payer_id': 'payerID',
            'payer_selected': 'payerSelected',
            'virtual_payment_address': 'virtualPaymentAddress',
            'samsung_pay_token': 'samsungPayToken',
            'iban': 'iban',
            'billing_sequence_number': 'billingSequenceNumber',
            'visa_checkout_call_id': 'visaCheckoutCallId',
            'app_id': 'appId',
            'openid': 'openid',
            'click_and_collect': 'clickAndCollect'
        }

        self._bank_account_number = bank_account_number
        self._bank_account_type = bank_account_type
        self._bank_location_id = bank_location_id
        self._encrypted_bank_account_number = encrypted_bank_account_number
        self._encrypted_bank_location_id = encrypted_bank_location_id
        self._owner_name = owner_name
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type
        self._billing_address = billing_address
        self._delivery_address = delivery_address
        self._personal_details = personal_details
        self._amazon_pay_token = amazon_pay_token
        self._checkout_session_id = checkout_session_id
        self._apple_pay_token = apple_pay_token
        self._funding_source = funding_source
        self._issuer = issuer
        self._blik_code = blik_code
        self._brand = brand
        self._cupsecureplus_smscode = cupsecureplus_smscode
        self._cvc = cvc
        self._encrypted_card_number = encrypted_card_number
        self._encrypted_expiry_month = encrypted_expiry_month
        self._encrypted_expiry_year = encrypted_expiry_year
        self._encrypted_security_code = encrypted_security_code
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._holder_name = holder_name
        self._network_payment_reference = network_payment_reference
        self._number = number
        self._shopper_notification_reference = shopper_notification_reference
        self._three_ds2_sdk_version = three_ds2_sdk_version
        self._first_name = first_name
        self._last_name = last_name
        self._shopper_email = shopper_email
        self._telephone_number = telephone_number
        self._google_pay_card_network = google_pay_card_network
        self._google_pay_token = google_pay_token
        self._subtype = subtype
        self._masterpass_transaction_id = masterpass_transaction_id
        self._order_id = order_id
        self._payee_preferred = payee_preferred
        self._payer_id = payer_id
        self._payer_selected = payer_selected
        self._virtual_payment_address = virtual_payment_address
        self._samsung_pay_token = samsung_pay_token
        self._iban = iban
        self._billing_sequence_number = billing_sequence_number
        self._visa_checkout_call_id = visa_checkout_call_id
        self._app_id = app_id
        self._openid = openid
        self._click_and_collect = click_and_collect

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequestPaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRequest_paymentMethod of this PaymentRequestPaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this PaymentRequestPaymentMethod.

        The bank account number (without separators).

        :return: The bank_account_number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this PaymentRequestPaymentMethod.

        The bank account number (without separators).

        :param bank_account_number: The bank_account_number of this PaymentRequestPaymentMethod.
        :type bank_account_number: str
        """
        if bank_account_number is None:
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")

        self._bank_account_number = bank_account_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this PaymentRequestPaymentMethod.

        The bank account type (checking, savings...).

        :return: The bank_account_type of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this PaymentRequestPaymentMethod.

        The bank account type (checking, savings...).

        :param bank_account_type: The bank_account_type of this PaymentRequestPaymentMethod.
        :type bank_account_type: str
        """
        allowed_values = ["balance", "checking", "deposit", "general", "other", "payment", "savings"]  # noqa: E501
        if bank_account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bank_account_type` ({0}), must be one of {1}"
                .format(bank_account_type, allowed_values)
            )

        self._bank_account_type = bank_account_type

    @property
    def bank_location_id(self):
        """Gets the bank_location_id of this PaymentRequestPaymentMethod.

        The bank routing number of the account. The field value is `nil` in most cases.

        :return: The bank_location_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._bank_location_id

    @bank_location_id.setter
    def bank_location_id(self, bank_location_id):
        """Sets the bank_location_id of this PaymentRequestPaymentMethod.

        The bank routing number of the account. The field value is `nil` in most cases.

        :param bank_location_id: The bank_location_id of this PaymentRequestPaymentMethod.
        :type bank_location_id: str
        """

        self._bank_location_id = bank_location_id

    @property
    def encrypted_bank_account_number(self):
        """Gets the encrypted_bank_account_number of this PaymentRequestPaymentMethod.

        Encrypted bank account number. The bank account number (without separators).

        :return: The encrypted_bank_account_number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_bank_account_number

    @encrypted_bank_account_number.setter
    def encrypted_bank_account_number(self, encrypted_bank_account_number):
        """Sets the encrypted_bank_account_number of this PaymentRequestPaymentMethod.

        Encrypted bank account number. The bank account number (without separators).

        :param encrypted_bank_account_number: The encrypted_bank_account_number of this PaymentRequestPaymentMethod.
        :type encrypted_bank_account_number: str
        """

        self._encrypted_bank_account_number = encrypted_bank_account_number

    @property
    def encrypted_bank_location_id(self):
        """Gets the encrypted_bank_location_id of this PaymentRequestPaymentMethod.

        Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.

        :return: The encrypted_bank_location_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_bank_location_id

    @encrypted_bank_location_id.setter
    def encrypted_bank_location_id(self, encrypted_bank_location_id):
        """Sets the encrypted_bank_location_id of this PaymentRequestPaymentMethod.

        Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.

        :param encrypted_bank_location_id: The encrypted_bank_location_id of this PaymentRequestPaymentMethod.
        :type encrypted_bank_location_id: str
        """

        self._encrypted_bank_location_id = encrypted_bank_location_id

    @property
    def owner_name(self):
        """Gets the owner_name of this PaymentRequestPaymentMethod.

        The name of the bank account holder.

        :return: The owner_name of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this PaymentRequestPaymentMethod.

        The name of the bank account holder.

        :param owner_name: The owner_name of this PaymentRequestPaymentMethod.
        :type owner_name: str
        """
        if owner_name is None:
            raise ValueError("Invalid value for `owner_name`, must not be `None`")

        self._owner_name = owner_name

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this PaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this PaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this PaymentRequestPaymentMethod.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this PaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this PaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this PaymentRequestPaymentMethod.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this PaymentRequestPaymentMethod.

        **ach**

        :return: The type of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentRequestPaymentMethod.

        **ach**

        :param type: The type of this PaymentRequestPaymentMethod.
        :type type: str
        """
        allowed_values = ["ach", "ach_plaid", "afterpay_default", "afterpaytouch", "afterpay_b2b", "clearpay", "amazonpay", "androidpay", "applepay", "directdebit_GB", "billdesk_online", "billdesk_wallet", "blik", "bcmc", "scheme", "networkToken", "giftcard", "card", "cellulant", "doku_mandiri_va", "doku_cimb_va", "doku_danamon_va", "doku_bni_va", "doku_permata_lite_atm", "doku_bri_va", "doku_bca_va", "doku_alfamart", "doku_indomaret", "doku_wallet", "doku_ovo", "dotpay", "dragonpay_ebanking", "dragonpay_otc_banking", "dragonpay_otc_non_banking", "dragonpay_otc_philippines", "econtext_seveneleven", "econtext_stores", "onlineBanking_PL", "eps", "onlineBanking_SK", "onlineBanking_CZ", "giropay", "googlepay", "ideal", "klarna", "klarnapayments", "klarnapayments_account", "klarnapayments_b2b", "klarna_paynow", "klarna_account", "klarna_b2b", "masterpass", "mbway", "mobilepay", "molpay_ebanking_fpx_MY", "molpay_ebanking_TH", "openinvoice", "afterpay_directdebit", "atome_pos", "paypal", "payu_IN_upi", "paywithgoogle", "alipay", "multibanco", "bankTransfer_IBAN", "paybright", "paynow", "affirm", "affirm_pos", "trustly", "trustlyvector", "oney", "facilypay", "facilypay_3x", "facilypay_4x", "facilypay_6x", "facilypay_10x", "facilypay_12x", "unionpay", "kcp_banktransfer", "kcp_payco", "kcp_creditcard", "wechatpaySDK", "wechatpayQR", "wechatpayWeb", "molpay_boost", "wallet_IN", "payu_IN_cashcard", "payu_IN_nb", "upi_qr", "paytm", "molpay_ebanking_VN", "paybybank", "ebanking_FI", "molpay_ebanking_MY", "molpay_ebanking_direct_MY", "swish", "pix", "walley", "walley_b2b", "alma", "paypo", "molpay_fpx", "konbini", "directEbanking", "boletobancario", "neteller", "paysafecard", "cashticket", "ikano", "karenmillen", "oasis", "warehouse", "primeiropay_boleto", "mada", "benefit", "knet", "omannet", "gopay_wallet", "kcp_naverpay", "onlinebanking_IN", "fawry", "atome", "moneybookers", "naps", "nordea", "boletobancario_bradesco", "boletobancario_itau", "boletobancario_santander", "boletobancario_bancodobrasil", "boletobancario_hsbc", "molpay_maybank2u", "molpay_cimb", "molpay_rhb", "molpay_amb", "molpay_hlb", "molpay_affin_epg", "molpay_bankislam", "molpay_publicbank", "fpx_agrobank", "touchngo", "maybank2u_mae", "duitnow", "promptpay", "twint_pos", "alipay_hk", "alipay_hk_web", "alipay_hk_wap", "alipay_wap", "balanceplatform", "ratepay", "ratepay_directdebit", "samsungpay", "sepadirectdebit", "sepadirectdebit_amazonpay", "bcmc_mobile", "bcmc_mobile_QR", "bcmc_mobile_app", "momo_wallet", "momo_wallet_app", "twint", "paymaya_wallet", "grabpay_SG", "grabpay_MY", "grabpay_TH", "grabpay_ID", "grabpay_VN", "grabpay_PH", "oxxo", "gcash", "dana", "kakaopay", "truemoney", "upi_collect", "upi_intent", "vipps", "visacheckout", "wechatpay", "wechatpay_pos", "wechatpayMiniProgram", "zip", "zip_pos"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentRequestPaymentMethod.

        The address where to send the invoice.

        :return: The billing_address of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentRequestPaymentMethod.

        The address where to send the invoice.

        :param billing_address: The billing_address of this PaymentRequestPaymentMethod.
        :type billing_address: str
        """

        self._billing_address = billing_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PaymentRequestPaymentMethod.

        The address where the goods should be delivered.

        :return: The delivery_address of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PaymentRequestPaymentMethod.

        The address where the goods should be delivered.

        :param delivery_address: The delivery_address of this PaymentRequestPaymentMethod.
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def personal_details(self):
        """Gets the personal_details of this PaymentRequestPaymentMethod.

        Shopper name, date of birth, phone number, and email address.

        :return: The personal_details of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._personal_details

    @personal_details.setter
    def personal_details(self, personal_details):
        """Sets the personal_details of this PaymentRequestPaymentMethod.

        Shopper name, date of birth, phone number, and email address.

        :param personal_details: The personal_details of this PaymentRequestPaymentMethod.
        :type personal_details: str
        """

        self._personal_details = personal_details

    @property
    def amazon_pay_token(self):
        """Gets the amazon_pay_token of this PaymentRequestPaymentMethod.

        This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.

        :return: The amazon_pay_token of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._amazon_pay_token

    @amazon_pay_token.setter
    def amazon_pay_token(self, amazon_pay_token):
        """Sets the amazon_pay_token of this PaymentRequestPaymentMethod.

        This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.

        :param amazon_pay_token: The amazon_pay_token of this PaymentRequestPaymentMethod.
        :type amazon_pay_token: str
        """

        self._amazon_pay_token = amazon_pay_token

    @property
    def checkout_session_id(self):
        """Gets the checkout_session_id of this PaymentRequestPaymentMethod.

        The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.

        :return: The checkout_session_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._checkout_session_id

    @checkout_session_id.setter
    def checkout_session_id(self, checkout_session_id):
        """Sets the checkout_session_id of this PaymentRequestPaymentMethod.

        The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.

        :param checkout_session_id: The checkout_session_id of this PaymentRequestPaymentMethod.
        :type checkout_session_id: str
        """

        self._checkout_session_id = checkout_session_id

    @property
    def apple_pay_token(self):
        """Gets the apple_pay_token of this PaymentRequestPaymentMethod.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :return: The apple_pay_token of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._apple_pay_token

    @apple_pay_token.setter
    def apple_pay_token(self, apple_pay_token):
        """Sets the apple_pay_token of this PaymentRequestPaymentMethod.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :param apple_pay_token: The apple_pay_token of this PaymentRequestPaymentMethod.
        :type apple_pay_token: str
        """
        if apple_pay_token is None:
            raise ValueError("Invalid value for `apple_pay_token`, must not be `None`")
        if apple_pay_token is not None and len(apple_pay_token) > 10000:
            raise ValueError("Invalid value for `apple_pay_token`, length must be less than or equal to `10000`")

        self._apple_pay_token = apple_pay_token

    @property
    def funding_source(self):
        """Gets the funding_source of this PaymentRequestPaymentMethod.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this PaymentRequestPaymentMethod.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this PaymentRequestPaymentMethod.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def issuer(self):
        """Gets the issuer of this PaymentRequestPaymentMethod.

        The shopper's bank. Specify this with the issuer value that corresponds to this bank.

        :return: The issuer of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this PaymentRequestPaymentMethod.

        The shopper's bank. Specify this with the issuer value that corresponds to this bank.

        :param issuer: The issuer of this PaymentRequestPaymentMethod.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def blik_code(self):
        """Gets the blik_code of this PaymentRequestPaymentMethod.

        BLIK code consisting of 6 digits.

        :return: The blik_code of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._blik_code

    @blik_code.setter
    def blik_code(self, blik_code):
        """Sets the blik_code of this PaymentRequestPaymentMethod.

        BLIK code consisting of 6 digits.

        :param blik_code: The blik_code of this PaymentRequestPaymentMethod.
        :type blik_code: str
        """

        self._blik_code = blik_code

    @property
    def brand(self):
        """Gets the brand of this PaymentRequestPaymentMethod.

        Secondary brand of the card. For example: **plastix**, **hmclub**.

        :return: The brand of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentRequestPaymentMethod.

        Secondary brand of the card. For example: **plastix**, **hmclub**.

        :param brand: The brand of this PaymentRequestPaymentMethod.
        :type brand: str
        """

        self._brand = brand

    @property
    def cupsecureplus_smscode(self):
        """Gets the cupsecureplus_smscode of this PaymentRequestPaymentMethod.


        :return: The cupsecureplus_smscode of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._cupsecureplus_smscode

    @cupsecureplus_smscode.setter
    def cupsecureplus_smscode(self, cupsecureplus_smscode):
        """Sets the cupsecureplus_smscode of this PaymentRequestPaymentMethod.


        :param cupsecureplus_smscode: The cupsecureplus_smscode of this PaymentRequestPaymentMethod.
        :type cupsecureplus_smscode: str
        """

        self._cupsecureplus_smscode = cupsecureplus_smscode

    @property
    def cvc(self):
        """Gets the cvc of this PaymentRequestPaymentMethod.

        The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The cvc of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this PaymentRequestPaymentMethod.

        The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param cvc: The cvc of this PaymentRequestPaymentMethod.
        :type cvc: str
        """

        self._cvc = cvc

    @property
    def encrypted_card_number(self):
        """Gets the encrypted_card_number of this PaymentRequestPaymentMethod.

        The encrypted card number.

        :return: The encrypted_card_number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_card_number

    @encrypted_card_number.setter
    def encrypted_card_number(self, encrypted_card_number):
        """Sets the encrypted_card_number of this PaymentRequestPaymentMethod.

        The encrypted card number.

        :param encrypted_card_number: The encrypted_card_number of this PaymentRequestPaymentMethod.
        :type encrypted_card_number: str
        """
        if encrypted_card_number is not None and len(encrypted_card_number) > 15000:
            raise ValueError("Invalid value for `encrypted_card_number`, length must be less than or equal to `15000`")

        self._encrypted_card_number = encrypted_card_number

    @property
    def encrypted_expiry_month(self):
        """Gets the encrypted_expiry_month of this PaymentRequestPaymentMethod.

        The encrypted card expiry month.

        :return: The encrypted_expiry_month of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_expiry_month

    @encrypted_expiry_month.setter
    def encrypted_expiry_month(self, encrypted_expiry_month):
        """Sets the encrypted_expiry_month of this PaymentRequestPaymentMethod.

        The encrypted card expiry month.

        :param encrypted_expiry_month: The encrypted_expiry_month of this PaymentRequestPaymentMethod.
        :type encrypted_expiry_month: str
        """
        if encrypted_expiry_month is not None and len(encrypted_expiry_month) > 15000:
            raise ValueError("Invalid value for `encrypted_expiry_month`, length must be less than or equal to `15000`")

        self._encrypted_expiry_month = encrypted_expiry_month

    @property
    def encrypted_expiry_year(self):
        """Gets the encrypted_expiry_year of this PaymentRequestPaymentMethod.

        The encrypted card expiry year.

        :return: The encrypted_expiry_year of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_expiry_year

    @encrypted_expiry_year.setter
    def encrypted_expiry_year(self, encrypted_expiry_year):
        """Sets the encrypted_expiry_year of this PaymentRequestPaymentMethod.

        The encrypted card expiry year.

        :param encrypted_expiry_year: The encrypted_expiry_year of this PaymentRequestPaymentMethod.
        :type encrypted_expiry_year: str
        """
        if encrypted_expiry_year is not None and len(encrypted_expiry_year) > 15000:
            raise ValueError("Invalid value for `encrypted_expiry_year`, length must be less than or equal to `15000`")

        self._encrypted_expiry_year = encrypted_expiry_year

    @property
    def encrypted_security_code(self):
        """Gets the encrypted_security_code of this PaymentRequestPaymentMethod.

        The encrypted card verification code.

        :return: The encrypted_security_code of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_security_code

    @encrypted_security_code.setter
    def encrypted_security_code(self, encrypted_security_code):
        """Sets the encrypted_security_code of this PaymentRequestPaymentMethod.

        The encrypted card verification code.

        :param encrypted_security_code: The encrypted_security_code of this PaymentRequestPaymentMethod.
        :type encrypted_security_code: str
        """
        if encrypted_security_code is not None and len(encrypted_security_code) > 15000:
            raise ValueError("Invalid value for `encrypted_security_code`, length must be less than or equal to `15000`")

        self._encrypted_security_code = encrypted_security_code

    @property
    def expiry_month(self):
        """Gets the expiry_month of this PaymentRequestPaymentMethod.

        The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The expiry_month of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this PaymentRequestPaymentMethod.

        The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param expiry_month: The expiry_month of this PaymentRequestPaymentMethod.
        :type expiry_month: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this PaymentRequestPaymentMethod.

        The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The expiry_year of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this PaymentRequestPaymentMethod.

        The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param expiry_year: The expiry_year of this PaymentRequestPaymentMethod.
        :type expiry_year: str
        """

        self._expiry_year = expiry_year

    @property
    def holder_name(self):
        """Gets the holder_name of this PaymentRequestPaymentMethod.

        The name of the card holder.

        :return: The holder_name of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this PaymentRequestPaymentMethod.

        The name of the card holder.

        :param holder_name: The holder_name of this PaymentRequestPaymentMethod.
        :type holder_name: str
        """

        self._holder_name = holder_name

    @property
    def network_payment_reference(self):
        """Gets the network_payment_reference of this PaymentRequestPaymentMethod.

        The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.

        :return: The network_payment_reference of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._network_payment_reference

    @network_payment_reference.setter
    def network_payment_reference(self, network_payment_reference):
        """Sets the network_payment_reference of this PaymentRequestPaymentMethod.

        The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.

        :param network_payment_reference: The network_payment_reference of this PaymentRequestPaymentMethod.
        :type network_payment_reference: str
        """

        self._network_payment_reference = network_payment_reference

    @property
    def number(self):
        """Gets the number of this PaymentRequestPaymentMethod.

        The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PaymentRequestPaymentMethod.

        The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param number: The number of this PaymentRequestPaymentMethod.
        :type number: str
        """

        self._number = number

    @property
    def shopper_notification_reference(self):
        """Gets the shopper_notification_reference of this PaymentRequestPaymentMethod.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.

        :return: The shopper_notification_reference of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._shopper_notification_reference

    @shopper_notification_reference.setter
    def shopper_notification_reference(self, shopper_notification_reference):
        """Sets the shopper_notification_reference of this PaymentRequestPaymentMethod.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.

        :param shopper_notification_reference: The shopper_notification_reference of this PaymentRequestPaymentMethod.
        :type shopper_notification_reference: str
        """

        self._shopper_notification_reference = shopper_notification_reference

    @property
    def three_ds2_sdk_version(self):
        """Gets the three_ds2_sdk_version of this PaymentRequestPaymentMethod.

        Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.

        :return: The three_ds2_sdk_version of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._three_ds2_sdk_version

    @three_ds2_sdk_version.setter
    def three_ds2_sdk_version(self, three_ds2_sdk_version):
        """Sets the three_ds2_sdk_version of this PaymentRequestPaymentMethod.

        Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.

        :param three_ds2_sdk_version: The three_ds2_sdk_version of this PaymentRequestPaymentMethod.
        :type three_ds2_sdk_version: str
        """
        if three_ds2_sdk_version is not None and len(three_ds2_sdk_version) > 12:
            raise ValueError("Invalid value for `three_ds2_sdk_version`, length must be less than or equal to `12`")

        self._three_ds2_sdk_version = three_ds2_sdk_version

    @property
    def first_name(self):
        """Gets the first_name of this PaymentRequestPaymentMethod.

        The shopper's first name.

        :return: The first_name of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PaymentRequestPaymentMethod.

        The shopper's first name.

        :param first_name: The first_name of this PaymentRequestPaymentMethod.
        :type first_name: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PaymentRequestPaymentMethod.

        The shopper's last name.

        :return: The last_name of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PaymentRequestPaymentMethod.

        The shopper's last name.

        :param last_name: The last_name of this PaymentRequestPaymentMethod.
        :type last_name: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")

        self._last_name = last_name

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PaymentRequestPaymentMethod.

        

        :return: The shopper_email of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PaymentRequestPaymentMethod.

        

        :param shopper_email: The shopper_email of this PaymentRequestPaymentMethod.
        :type shopper_email: str
        """
        if shopper_email is None:
            raise ValueError("Invalid value for `shopper_email`, must not be `None`")

        self._shopper_email = shopper_email

    @property
    def telephone_number(self):
        """Gets the telephone_number of this PaymentRequestPaymentMethod.

        

        :return: The telephone_number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this PaymentRequestPaymentMethod.

        

        :param telephone_number: The telephone_number of this PaymentRequestPaymentMethod.
        :type telephone_number: str
        """
        if telephone_number is None:
            raise ValueError("Invalid value for `telephone_number`, must not be `None`")

        self._telephone_number = telephone_number

    @property
    def google_pay_card_network(self):
        """Gets the google_pay_card_network of this PaymentRequestPaymentMethod.

        The selected payment card network. 

        :return: The google_pay_card_network of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._google_pay_card_network

    @google_pay_card_network.setter
    def google_pay_card_network(self, google_pay_card_network):
        """Sets the google_pay_card_network of this PaymentRequestPaymentMethod.

        The selected payment card network. 

        :param google_pay_card_network: The google_pay_card_network of this PaymentRequestPaymentMethod.
        :type google_pay_card_network: str
        """

        self._google_pay_card_network = google_pay_card_network

    @property
    def google_pay_token(self):
        """Gets the google_pay_token of this PaymentRequestPaymentMethod.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :return: The google_pay_token of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._google_pay_token

    @google_pay_token.setter
    def google_pay_token(self, google_pay_token):
        """Sets the google_pay_token of this PaymentRequestPaymentMethod.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :param google_pay_token: The google_pay_token of this PaymentRequestPaymentMethod.
        :type google_pay_token: str
        """
        if google_pay_token is None:
            raise ValueError("Invalid value for `google_pay_token`, must not be `None`")

        self._google_pay_token = google_pay_token

    @property
    def subtype(self):
        """Gets the subtype of this PaymentRequestPaymentMethod.

        The type of flow to initiate.

        :return: The subtype of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this PaymentRequestPaymentMethod.

        The type of flow to initiate.

        :param subtype: The subtype of this PaymentRequestPaymentMethod.
        :type subtype: str
        """
        allowed_values = ["redirect", "sdk"]  # noqa: E501
        if subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `subtype` ({0}), must be one of {1}"
                .format(subtype, allowed_values)
            )

        self._subtype = subtype

    @property
    def masterpass_transaction_id(self):
        """Gets the masterpass_transaction_id of this PaymentRequestPaymentMethod.

        The Masterpass transaction ID.

        :return: The masterpass_transaction_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._masterpass_transaction_id

    @masterpass_transaction_id.setter
    def masterpass_transaction_id(self, masterpass_transaction_id):
        """Sets the masterpass_transaction_id of this PaymentRequestPaymentMethod.

        The Masterpass transaction ID.

        :param masterpass_transaction_id: The masterpass_transaction_id of this PaymentRequestPaymentMethod.
        :type masterpass_transaction_id: str
        """
        if masterpass_transaction_id is None:
            raise ValueError("Invalid value for `masterpass_transaction_id`, must not be `None`")

        self._masterpass_transaction_id = masterpass_transaction_id

    @property
    def order_id(self):
        """Gets the order_id of this PaymentRequestPaymentMethod.

        The unique ID associated with the order.

        :return: The order_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentRequestPaymentMethod.

        The unique ID associated with the order.

        :param order_id: The order_id of this PaymentRequestPaymentMethod.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payee_preferred(self):
        """Gets the payee_preferred of this PaymentRequestPaymentMethod.

        IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED

        :return: The payee_preferred of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._payee_preferred

    @payee_preferred.setter
    def payee_preferred(self, payee_preferred):
        """Sets the payee_preferred of this PaymentRequestPaymentMethod.

        IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED

        :param payee_preferred: The payee_preferred of this PaymentRequestPaymentMethod.
        :type payee_preferred: str
        """

        self._payee_preferred = payee_preferred

    @property
    def payer_id(self):
        """Gets the payer_id of this PaymentRequestPaymentMethod.

        The unique ID associated with the payer.

        :return: The payer_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this PaymentRequestPaymentMethod.

        The unique ID associated with the payer.

        :param payer_id: The payer_id of this PaymentRequestPaymentMethod.
        :type payer_id: str
        """

        self._payer_id = payer_id

    @property
    def payer_selected(self):
        """Gets the payer_selected of this PaymentRequestPaymentMethod.

        PAYPAL or PAYPAL_CREDIT

        :return: The payer_selected of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._payer_selected

    @payer_selected.setter
    def payer_selected(self, payer_selected):
        """Sets the payer_selected of this PaymentRequestPaymentMethod.

        PAYPAL or PAYPAL_CREDIT

        :param payer_selected: The payer_selected of this PaymentRequestPaymentMethod.
        :type payer_selected: str
        """

        self._payer_selected = payer_selected

    @property
    def virtual_payment_address(self):
        """Gets the virtual_payment_address of this PaymentRequestPaymentMethod.

        The virtual payment address for UPI.

        :return: The virtual_payment_address of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._virtual_payment_address

    @virtual_payment_address.setter
    def virtual_payment_address(self, virtual_payment_address):
        """Sets the virtual_payment_address of this PaymentRequestPaymentMethod.

        The virtual payment address for UPI.

        :param virtual_payment_address: The virtual_payment_address of this PaymentRequestPaymentMethod.
        :type virtual_payment_address: str
        """

        self._virtual_payment_address = virtual_payment_address

    @property
    def samsung_pay_token(self):
        """Gets the samsung_pay_token of this PaymentRequestPaymentMethod.

        The payload you received from the Samsung Pay SDK response.

        :return: The samsung_pay_token of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._samsung_pay_token

    @samsung_pay_token.setter
    def samsung_pay_token(self, samsung_pay_token):
        """Sets the samsung_pay_token of this PaymentRequestPaymentMethod.

        The payload you received from the Samsung Pay SDK response.

        :param samsung_pay_token: The samsung_pay_token of this PaymentRequestPaymentMethod.
        :type samsung_pay_token: str
        """
        if samsung_pay_token is None:
            raise ValueError("Invalid value for `samsung_pay_token`, must not be `None`")

        self._samsung_pay_token = samsung_pay_token

    @property
    def iban(self):
        """Gets the iban of this PaymentRequestPaymentMethod.

        The International Bank Account Number (IBAN).

        :return: The iban of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PaymentRequestPaymentMethod.

        The International Bank Account Number (IBAN).

        :param iban: The iban of this PaymentRequestPaymentMethod.
        :type iban: str
        """
        if iban is None:
            raise ValueError("Invalid value for `iban`, must not be `None`")

        self._iban = iban

    @property
    def billing_sequence_number(self):
        """Gets the billing_sequence_number of this PaymentRequestPaymentMethod.

        The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.

        :return: The billing_sequence_number of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._billing_sequence_number

    @billing_sequence_number.setter
    def billing_sequence_number(self, billing_sequence_number):
        """Sets the billing_sequence_number of this PaymentRequestPaymentMethod.

        The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.

        :param billing_sequence_number: The billing_sequence_number of this PaymentRequestPaymentMethod.
        :type billing_sequence_number: str
        """
        if billing_sequence_number is None:
            raise ValueError("Invalid value for `billing_sequence_number`, must not be `None`")

        self._billing_sequence_number = billing_sequence_number

    @property
    def visa_checkout_call_id(self):
        """Gets the visa_checkout_call_id of this PaymentRequestPaymentMethod.

        The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.

        :return: The visa_checkout_call_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._visa_checkout_call_id

    @visa_checkout_call_id.setter
    def visa_checkout_call_id(self, visa_checkout_call_id):
        """Sets the visa_checkout_call_id of this PaymentRequestPaymentMethod.

        The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.

        :param visa_checkout_call_id: The visa_checkout_call_id of this PaymentRequestPaymentMethod.
        :type visa_checkout_call_id: str
        """
        if visa_checkout_call_id is None:
            raise ValueError("Invalid value for `visa_checkout_call_id`, must not be `None`")

        self._visa_checkout_call_id = visa_checkout_call_id

    @property
    def app_id(self):
        """Gets the app_id of this PaymentRequestPaymentMethod.


        :return: The app_id of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PaymentRequestPaymentMethod.


        :param app_id: The app_id of this PaymentRequestPaymentMethod.
        :type app_id: str
        """

        self._app_id = app_id

    @property
    def openid(self):
        """Gets the openid of this PaymentRequestPaymentMethod.


        :return: The openid of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._openid

    @openid.setter
    def openid(self, openid):
        """Sets the openid of this PaymentRequestPaymentMethod.


        :param openid: The openid of this PaymentRequestPaymentMethod.
        :type openid: str
        """

        self._openid = openid

    @property
    def click_and_collect(self):
        """Gets the click_and_collect of this PaymentRequestPaymentMethod.

        Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.

        :return: The click_and_collect of this PaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._click_and_collect

    @click_and_collect.setter
    def click_and_collect(self, click_and_collect):
        """Sets the click_and_collect of this PaymentRequestPaymentMethod.

        Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.

        :param click_and_collect: The click_and_collect of this PaymentRequestPaymentMethod.
        :type click_and_collect: str
        """

        self._click_and_collect = click_and_collect
