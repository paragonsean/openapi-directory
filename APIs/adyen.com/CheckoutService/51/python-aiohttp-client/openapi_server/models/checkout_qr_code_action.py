# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckoutQrCodeAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expires_at: str=None, payment_data: str=None, payment_method_type: str=None, qr_code_data: str=None, type: str=None, url: str=None):
        """CheckoutQrCodeAction - a model defined in OpenAPI

        :param expires_at: The expires_at of this CheckoutQrCodeAction.
        :param payment_data: The payment_data of this CheckoutQrCodeAction.
        :param payment_method_type: The payment_method_type of this CheckoutQrCodeAction.
        :param qr_code_data: The qr_code_data of this CheckoutQrCodeAction.
        :param type: The type of this CheckoutQrCodeAction.
        :param url: The url of this CheckoutQrCodeAction.
        """
        self.openapi_types = {
            'expires_at': str,
            'payment_data': str,
            'payment_method_type': str,
            'qr_code_data': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'expires_at': 'expiresAt',
            'payment_data': 'paymentData',
            'payment_method_type': 'paymentMethodType',
            'qr_code_data': 'qrCodeData',
            'type': 'type',
            'url': 'url'
        }

        self._expires_at = expires_at
        self._payment_data = payment_data
        self._payment_method_type = payment_method_type
        self._qr_code_data = qr_code_data
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutQrCodeAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutQrCodeAction of this CheckoutQrCodeAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expires_at(self):
        """Gets the expires_at of this CheckoutQrCodeAction.

        Expiry time of the QR code.

        :return: The expires_at of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CheckoutQrCodeAction.

        Expiry time of the QR code.

        :param expires_at: The expires_at of this CheckoutQrCodeAction.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def payment_data(self):
        """Gets the payment_data of this CheckoutQrCodeAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :return: The payment_data of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this CheckoutQrCodeAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :param payment_data: The payment_data of this CheckoutQrCodeAction.
        :type payment_data: str
        """

        self._payment_data = payment_data

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this CheckoutQrCodeAction.

        Specifies the payment method.

        :return: The payment_method_type of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this CheckoutQrCodeAction.

        Specifies the payment method.

        :param payment_method_type: The payment_method_type of this CheckoutQrCodeAction.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def qr_code_data(self):
        """Gets the qr_code_data of this CheckoutQrCodeAction.

        The contents of the QR code as a UTF8 string.

        :return: The qr_code_data of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._qr_code_data

    @qr_code_data.setter
    def qr_code_data(self, qr_code_data):
        """Sets the qr_code_data of this CheckoutQrCodeAction.

        The contents of the QR code as a UTF8 string.

        :param qr_code_data: The qr_code_data of this CheckoutQrCodeAction.
        :type qr_code_data: str
        """

        self._qr_code_data = qr_code_data

    @property
    def type(self):
        """Gets the type of this CheckoutQrCodeAction.

        **qrCode**

        :return: The type of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CheckoutQrCodeAction.

        **qrCode**

        :param type: The type of this CheckoutQrCodeAction.
        :type type: str
        """
        allowed_values = ["qrCode"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this CheckoutQrCodeAction.

        Specifies the URL to redirect to.

        :return: The url of this CheckoutQrCodeAction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this CheckoutQrCodeAction.

        Specifies the URL to redirect to.

        :param url: The url of this CheckoutQrCodeAction.
        :type url: str
        """

        self._url = url
