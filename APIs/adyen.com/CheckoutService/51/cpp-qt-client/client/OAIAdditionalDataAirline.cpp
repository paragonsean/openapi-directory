/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataAirline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataAirline::OAIAdditionalDataAirline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataAirline::OAIAdditionalDataAirline() {
    this->initializeModel();
}

OAIAdditionalDataAirline::~OAIAdditionalDataAirline() {}

void OAIAdditionalDataAirline::initializeModel() {

    m_airline_agency_invoice_number_isSet = false;
    m_airline_agency_invoice_number_isValid = false;

    m_airline_agency_plan_name_isSet = false;
    m_airline_agency_plan_name_isValid = false;

    m_airline_airline_code_isSet = false;
    m_airline_airline_code_isValid = false;

    m_airline_airline_designator_code_isSet = false;
    m_airline_airline_designator_code_isValid = false;

    m_airline_boarding_fee_isSet = false;
    m_airline_boarding_fee_isValid = false;

    m_airline_computerized_reservation_system_isSet = false;
    m_airline_computerized_reservation_system_isValid = false;

    m_airline_customer_reference_number_isSet = false;
    m_airline_customer_reference_number_isValid = false;

    m_airline_document_type_isSet = false;
    m_airline_document_type_isValid = false;

    m_airline_flight_date_isSet = false;
    m_airline_flight_date_isValid = false;

    m_airline_leg_carrier_code_isSet = false;
    m_airline_leg_carrier_code_isValid = false;

    m_airline_leg_class_of_travel_isSet = false;
    m_airline_leg_class_of_travel_isValid = false;

    m_airline_leg_date_of_travel_isSet = false;
    m_airline_leg_date_of_travel_isValid = false;

    m_airline_leg_depart_airport_isSet = false;
    m_airline_leg_depart_airport_isValid = false;

    m_airline_leg_depart_tax_isSet = false;
    m_airline_leg_depart_tax_isValid = false;

    m_airline_leg_destination_code_isSet = false;
    m_airline_leg_destination_code_isValid = false;

    m_airline_leg_fare_base_code_isSet = false;
    m_airline_leg_fare_base_code_isValid = false;

    m_airline_leg_flight_number_isSet = false;
    m_airline_leg_flight_number_isValid = false;

    m_airline_leg_stop_over_code_isSet = false;
    m_airline_leg_stop_over_code_isValid = false;

    m_airline_passenger_date_of_birth_isSet = false;
    m_airline_passenger_date_of_birth_isValid = false;

    m_airline_passenger_first_name_isSet = false;
    m_airline_passenger_first_name_isValid = false;

    m_airline_passenger_last_name_isSet = false;
    m_airline_passenger_last_name_isValid = false;

    m_airline_passenger_telephone_number_isSet = false;
    m_airline_passenger_telephone_number_isValid = false;

    m_airline_passenger_traveller_type_isSet = false;
    m_airline_passenger_traveller_type_isValid = false;

    m_airline_passenger_name_isSet = false;
    m_airline_passenger_name_isValid = false;

    m_airline_ticket_issue_address_isSet = false;
    m_airline_ticket_issue_address_isValid = false;

    m_airline_ticket_number_isSet = false;
    m_airline_ticket_number_isValid = false;

    m_airline_travel_agency_code_isSet = false;
    m_airline_travel_agency_code_isValid = false;

    m_airline_travel_agency_name_isSet = false;
    m_airline_travel_agency_name_isValid = false;
}

void OAIAdditionalDataAirline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataAirline::fromJsonObject(QJsonObject json) {

    m_airline_agency_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_airline_agency_invoice_number, json[QString("airline.agency_invoice_number")]);
    m_airline_agency_invoice_number_isSet = !json[QString("airline.agency_invoice_number")].isNull() && m_airline_agency_invoice_number_isValid;

    m_airline_agency_plan_name_isValid = ::OpenAPI::fromJsonValue(m_airline_agency_plan_name, json[QString("airline.agency_plan_name")]);
    m_airline_agency_plan_name_isSet = !json[QString("airline.agency_plan_name")].isNull() && m_airline_agency_plan_name_isValid;

    m_airline_airline_code_isValid = ::OpenAPI::fromJsonValue(m_airline_airline_code, json[QString("airline.airline_code")]);
    m_airline_airline_code_isSet = !json[QString("airline.airline_code")].isNull() && m_airline_airline_code_isValid;

    m_airline_airline_designator_code_isValid = ::OpenAPI::fromJsonValue(m_airline_airline_designator_code, json[QString("airline.airline_designator_code")]);
    m_airline_airline_designator_code_isSet = !json[QString("airline.airline_designator_code")].isNull() && m_airline_airline_designator_code_isValid;

    m_airline_boarding_fee_isValid = ::OpenAPI::fromJsonValue(m_airline_boarding_fee, json[QString("airline.boarding_fee")]);
    m_airline_boarding_fee_isSet = !json[QString("airline.boarding_fee")].isNull() && m_airline_boarding_fee_isValid;

    m_airline_computerized_reservation_system_isValid = ::OpenAPI::fromJsonValue(m_airline_computerized_reservation_system, json[QString("airline.computerized_reservation_system")]);
    m_airline_computerized_reservation_system_isSet = !json[QString("airline.computerized_reservation_system")].isNull() && m_airline_computerized_reservation_system_isValid;

    m_airline_customer_reference_number_isValid = ::OpenAPI::fromJsonValue(m_airline_customer_reference_number, json[QString("airline.customer_reference_number")]);
    m_airline_customer_reference_number_isSet = !json[QString("airline.customer_reference_number")].isNull() && m_airline_customer_reference_number_isValid;

    m_airline_document_type_isValid = ::OpenAPI::fromJsonValue(m_airline_document_type, json[QString("airline.document_type")]);
    m_airline_document_type_isSet = !json[QString("airline.document_type")].isNull() && m_airline_document_type_isValid;

    m_airline_flight_date_isValid = ::OpenAPI::fromJsonValue(m_airline_flight_date, json[QString("airline.flight_date")]);
    m_airline_flight_date_isSet = !json[QString("airline.flight_date")].isNull() && m_airline_flight_date_isValid;

    m_airline_leg_carrier_code_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_carrier_code, json[QString("airline.leg.carrier_code")]);
    m_airline_leg_carrier_code_isSet = !json[QString("airline.leg.carrier_code")].isNull() && m_airline_leg_carrier_code_isValid;

    m_airline_leg_class_of_travel_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_class_of_travel, json[QString("airline.leg.class_of_travel")]);
    m_airline_leg_class_of_travel_isSet = !json[QString("airline.leg.class_of_travel")].isNull() && m_airline_leg_class_of_travel_isValid;

    m_airline_leg_date_of_travel_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_date_of_travel, json[QString("airline.leg.date_of_travel")]);
    m_airline_leg_date_of_travel_isSet = !json[QString("airline.leg.date_of_travel")].isNull() && m_airline_leg_date_of_travel_isValid;

    m_airline_leg_depart_airport_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_depart_airport, json[QString("airline.leg.depart_airport")]);
    m_airline_leg_depart_airport_isSet = !json[QString("airline.leg.depart_airport")].isNull() && m_airline_leg_depart_airport_isValid;

    m_airline_leg_depart_tax_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_depart_tax, json[QString("airline.leg.depart_tax")]);
    m_airline_leg_depart_tax_isSet = !json[QString("airline.leg.depart_tax")].isNull() && m_airline_leg_depart_tax_isValid;

    m_airline_leg_destination_code_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_destination_code, json[QString("airline.leg.destination_code")]);
    m_airline_leg_destination_code_isSet = !json[QString("airline.leg.destination_code")].isNull() && m_airline_leg_destination_code_isValid;

    m_airline_leg_fare_base_code_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_fare_base_code, json[QString("airline.leg.fare_base_code")]);
    m_airline_leg_fare_base_code_isSet = !json[QString("airline.leg.fare_base_code")].isNull() && m_airline_leg_fare_base_code_isValid;

    m_airline_leg_flight_number_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_flight_number, json[QString("airline.leg.flight_number")]);
    m_airline_leg_flight_number_isSet = !json[QString("airline.leg.flight_number")].isNull() && m_airline_leg_flight_number_isValid;

    m_airline_leg_stop_over_code_isValid = ::OpenAPI::fromJsonValue(m_airline_leg_stop_over_code, json[QString("airline.leg.stop_over_code")]);
    m_airline_leg_stop_over_code_isSet = !json[QString("airline.leg.stop_over_code")].isNull() && m_airline_leg_stop_over_code_isValid;

    m_airline_passenger_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_date_of_birth, json[QString("airline.passenger.date_of_birth")]);
    m_airline_passenger_date_of_birth_isSet = !json[QString("airline.passenger.date_of_birth")].isNull() && m_airline_passenger_date_of_birth_isValid;

    m_airline_passenger_first_name_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_first_name, json[QString("airline.passenger.first_name")]);
    m_airline_passenger_first_name_isSet = !json[QString("airline.passenger.first_name")].isNull() && m_airline_passenger_first_name_isValid;

    m_airline_passenger_last_name_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_last_name, json[QString("airline.passenger.last_name")]);
    m_airline_passenger_last_name_isSet = !json[QString("airline.passenger.last_name")].isNull() && m_airline_passenger_last_name_isValid;

    m_airline_passenger_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_telephone_number, json[QString("airline.passenger.telephone_number")]);
    m_airline_passenger_telephone_number_isSet = !json[QString("airline.passenger.telephone_number")].isNull() && m_airline_passenger_telephone_number_isValid;

    m_airline_passenger_traveller_type_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_traveller_type, json[QString("airline.passenger.traveller_type")]);
    m_airline_passenger_traveller_type_isSet = !json[QString("airline.passenger.traveller_type")].isNull() && m_airline_passenger_traveller_type_isValid;

    m_airline_passenger_name_isValid = ::OpenAPI::fromJsonValue(m_airline_passenger_name, json[QString("airline.passenger_name")]);
    m_airline_passenger_name_isSet = !json[QString("airline.passenger_name")].isNull() && m_airline_passenger_name_isValid;

    m_airline_ticket_issue_address_isValid = ::OpenAPI::fromJsonValue(m_airline_ticket_issue_address, json[QString("airline.ticket_issue_address")]);
    m_airline_ticket_issue_address_isSet = !json[QString("airline.ticket_issue_address")].isNull() && m_airline_ticket_issue_address_isValid;

    m_airline_ticket_number_isValid = ::OpenAPI::fromJsonValue(m_airline_ticket_number, json[QString("airline.ticket_number")]);
    m_airline_ticket_number_isSet = !json[QString("airline.ticket_number")].isNull() && m_airline_ticket_number_isValid;

    m_airline_travel_agency_code_isValid = ::OpenAPI::fromJsonValue(m_airline_travel_agency_code, json[QString("airline.travel_agency_code")]);
    m_airline_travel_agency_code_isSet = !json[QString("airline.travel_agency_code")].isNull() && m_airline_travel_agency_code_isValid;

    m_airline_travel_agency_name_isValid = ::OpenAPI::fromJsonValue(m_airline_travel_agency_name, json[QString("airline.travel_agency_name")]);
    m_airline_travel_agency_name_isSet = !json[QString("airline.travel_agency_name")].isNull() && m_airline_travel_agency_name_isValid;
}

QString OAIAdditionalDataAirline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataAirline::asJsonObject() const {
    QJsonObject obj;
    if (m_airline_agency_invoice_number_isSet) {
        obj.insert(QString("airline.agency_invoice_number"), ::OpenAPI::toJsonValue(m_airline_agency_invoice_number));
    }
    if (m_airline_agency_plan_name_isSet) {
        obj.insert(QString("airline.agency_plan_name"), ::OpenAPI::toJsonValue(m_airline_agency_plan_name));
    }
    if (m_airline_airline_code_isSet) {
        obj.insert(QString("airline.airline_code"), ::OpenAPI::toJsonValue(m_airline_airline_code));
    }
    if (m_airline_airline_designator_code_isSet) {
        obj.insert(QString("airline.airline_designator_code"), ::OpenAPI::toJsonValue(m_airline_airline_designator_code));
    }
    if (m_airline_boarding_fee_isSet) {
        obj.insert(QString("airline.boarding_fee"), ::OpenAPI::toJsonValue(m_airline_boarding_fee));
    }
    if (m_airline_computerized_reservation_system_isSet) {
        obj.insert(QString("airline.computerized_reservation_system"), ::OpenAPI::toJsonValue(m_airline_computerized_reservation_system));
    }
    if (m_airline_customer_reference_number_isSet) {
        obj.insert(QString("airline.customer_reference_number"), ::OpenAPI::toJsonValue(m_airline_customer_reference_number));
    }
    if (m_airline_document_type_isSet) {
        obj.insert(QString("airline.document_type"), ::OpenAPI::toJsonValue(m_airline_document_type));
    }
    if (m_airline_flight_date_isSet) {
        obj.insert(QString("airline.flight_date"), ::OpenAPI::toJsonValue(m_airline_flight_date));
    }
    if (m_airline_leg_carrier_code_isSet) {
        obj.insert(QString("airline.leg.carrier_code"), ::OpenAPI::toJsonValue(m_airline_leg_carrier_code));
    }
    if (m_airline_leg_class_of_travel_isSet) {
        obj.insert(QString("airline.leg.class_of_travel"), ::OpenAPI::toJsonValue(m_airline_leg_class_of_travel));
    }
    if (m_airline_leg_date_of_travel_isSet) {
        obj.insert(QString("airline.leg.date_of_travel"), ::OpenAPI::toJsonValue(m_airline_leg_date_of_travel));
    }
    if (m_airline_leg_depart_airport_isSet) {
        obj.insert(QString("airline.leg.depart_airport"), ::OpenAPI::toJsonValue(m_airline_leg_depart_airport));
    }
    if (m_airline_leg_depart_tax_isSet) {
        obj.insert(QString("airline.leg.depart_tax"), ::OpenAPI::toJsonValue(m_airline_leg_depart_tax));
    }
    if (m_airline_leg_destination_code_isSet) {
        obj.insert(QString("airline.leg.destination_code"), ::OpenAPI::toJsonValue(m_airline_leg_destination_code));
    }
    if (m_airline_leg_fare_base_code_isSet) {
        obj.insert(QString("airline.leg.fare_base_code"), ::OpenAPI::toJsonValue(m_airline_leg_fare_base_code));
    }
    if (m_airline_leg_flight_number_isSet) {
        obj.insert(QString("airline.leg.flight_number"), ::OpenAPI::toJsonValue(m_airline_leg_flight_number));
    }
    if (m_airline_leg_stop_over_code_isSet) {
        obj.insert(QString("airline.leg.stop_over_code"), ::OpenAPI::toJsonValue(m_airline_leg_stop_over_code));
    }
    if (m_airline_passenger_date_of_birth_isSet) {
        obj.insert(QString("airline.passenger.date_of_birth"), ::OpenAPI::toJsonValue(m_airline_passenger_date_of_birth));
    }
    if (m_airline_passenger_first_name_isSet) {
        obj.insert(QString("airline.passenger.first_name"), ::OpenAPI::toJsonValue(m_airline_passenger_first_name));
    }
    if (m_airline_passenger_last_name_isSet) {
        obj.insert(QString("airline.passenger.last_name"), ::OpenAPI::toJsonValue(m_airline_passenger_last_name));
    }
    if (m_airline_passenger_telephone_number_isSet) {
        obj.insert(QString("airline.passenger.telephone_number"), ::OpenAPI::toJsonValue(m_airline_passenger_telephone_number));
    }
    if (m_airline_passenger_traveller_type_isSet) {
        obj.insert(QString("airline.passenger.traveller_type"), ::OpenAPI::toJsonValue(m_airline_passenger_traveller_type));
    }
    if (m_airline_passenger_name_isSet) {
        obj.insert(QString("airline.passenger_name"), ::OpenAPI::toJsonValue(m_airline_passenger_name));
    }
    if (m_airline_ticket_issue_address_isSet) {
        obj.insert(QString("airline.ticket_issue_address"), ::OpenAPI::toJsonValue(m_airline_ticket_issue_address));
    }
    if (m_airline_ticket_number_isSet) {
        obj.insert(QString("airline.ticket_number"), ::OpenAPI::toJsonValue(m_airline_ticket_number));
    }
    if (m_airline_travel_agency_code_isSet) {
        obj.insert(QString("airline.travel_agency_code"), ::OpenAPI::toJsonValue(m_airline_travel_agency_code));
    }
    if (m_airline_travel_agency_name_isSet) {
        obj.insert(QString("airline.travel_agency_name"), ::OpenAPI::toJsonValue(m_airline_travel_agency_name));
    }
    return obj;
}

QString OAIAdditionalDataAirline::getAirlineAgencyInvoiceNumber() const {
    return m_airline_agency_invoice_number;
}
void OAIAdditionalDataAirline::setAirlineAgencyInvoiceNumber(const QString &airline_agency_invoice_number) {
    m_airline_agency_invoice_number = airline_agency_invoice_number;
    m_airline_agency_invoice_number_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_agency_invoice_number_Set() const{
    return m_airline_agency_invoice_number_isSet;
}

bool OAIAdditionalDataAirline::is_airline_agency_invoice_number_Valid() const{
    return m_airline_agency_invoice_number_isValid;
}

QString OAIAdditionalDataAirline::getAirlineAgencyPlanName() const {
    return m_airline_agency_plan_name;
}
void OAIAdditionalDataAirline::setAirlineAgencyPlanName(const QString &airline_agency_plan_name) {
    m_airline_agency_plan_name = airline_agency_plan_name;
    m_airline_agency_plan_name_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_agency_plan_name_Set() const{
    return m_airline_agency_plan_name_isSet;
}

bool OAIAdditionalDataAirline::is_airline_agency_plan_name_Valid() const{
    return m_airline_agency_plan_name_isValid;
}

QString OAIAdditionalDataAirline::getAirlineAirlineCode() const {
    return m_airline_airline_code;
}
void OAIAdditionalDataAirline::setAirlineAirlineCode(const QString &airline_airline_code) {
    m_airline_airline_code = airline_airline_code;
    m_airline_airline_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_airline_code_Set() const{
    return m_airline_airline_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_airline_code_Valid() const{
    return m_airline_airline_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineAirlineDesignatorCode() const {
    return m_airline_airline_designator_code;
}
void OAIAdditionalDataAirline::setAirlineAirlineDesignatorCode(const QString &airline_airline_designator_code) {
    m_airline_airline_designator_code = airline_airline_designator_code;
    m_airline_airline_designator_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_airline_designator_code_Set() const{
    return m_airline_airline_designator_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_airline_designator_code_Valid() const{
    return m_airline_airline_designator_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineBoardingFee() const {
    return m_airline_boarding_fee;
}
void OAIAdditionalDataAirline::setAirlineBoardingFee(const QString &airline_boarding_fee) {
    m_airline_boarding_fee = airline_boarding_fee;
    m_airline_boarding_fee_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_boarding_fee_Set() const{
    return m_airline_boarding_fee_isSet;
}

bool OAIAdditionalDataAirline::is_airline_boarding_fee_Valid() const{
    return m_airline_boarding_fee_isValid;
}

QString OAIAdditionalDataAirline::getAirlineComputerizedReservationSystem() const {
    return m_airline_computerized_reservation_system;
}
void OAIAdditionalDataAirline::setAirlineComputerizedReservationSystem(const QString &airline_computerized_reservation_system) {
    m_airline_computerized_reservation_system = airline_computerized_reservation_system;
    m_airline_computerized_reservation_system_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_computerized_reservation_system_Set() const{
    return m_airline_computerized_reservation_system_isSet;
}

bool OAIAdditionalDataAirline::is_airline_computerized_reservation_system_Valid() const{
    return m_airline_computerized_reservation_system_isValid;
}

QString OAIAdditionalDataAirline::getAirlineCustomerReferenceNumber() const {
    return m_airline_customer_reference_number;
}
void OAIAdditionalDataAirline::setAirlineCustomerReferenceNumber(const QString &airline_customer_reference_number) {
    m_airline_customer_reference_number = airline_customer_reference_number;
    m_airline_customer_reference_number_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_customer_reference_number_Set() const{
    return m_airline_customer_reference_number_isSet;
}

bool OAIAdditionalDataAirline::is_airline_customer_reference_number_Valid() const{
    return m_airline_customer_reference_number_isValid;
}

QString OAIAdditionalDataAirline::getAirlineDocumentType() const {
    return m_airline_document_type;
}
void OAIAdditionalDataAirline::setAirlineDocumentType(const QString &airline_document_type) {
    m_airline_document_type = airline_document_type;
    m_airline_document_type_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_document_type_Set() const{
    return m_airline_document_type_isSet;
}

bool OAIAdditionalDataAirline::is_airline_document_type_Valid() const{
    return m_airline_document_type_isValid;
}

QString OAIAdditionalDataAirline::getAirlineFlightDate() const {
    return m_airline_flight_date;
}
void OAIAdditionalDataAirline::setAirlineFlightDate(const QString &airline_flight_date) {
    m_airline_flight_date = airline_flight_date;
    m_airline_flight_date_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_flight_date_Set() const{
    return m_airline_flight_date_isSet;
}

bool OAIAdditionalDataAirline::is_airline_flight_date_Valid() const{
    return m_airline_flight_date_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegCarrierCode() const {
    return m_airline_leg_carrier_code;
}
void OAIAdditionalDataAirline::setAirlineLegCarrierCode(const QString &airline_leg_carrier_code) {
    m_airline_leg_carrier_code = airline_leg_carrier_code;
    m_airline_leg_carrier_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_carrier_code_Set() const{
    return m_airline_leg_carrier_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_carrier_code_Valid() const{
    return m_airline_leg_carrier_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegClassOfTravel() const {
    return m_airline_leg_class_of_travel;
}
void OAIAdditionalDataAirline::setAirlineLegClassOfTravel(const QString &airline_leg_class_of_travel) {
    m_airline_leg_class_of_travel = airline_leg_class_of_travel;
    m_airline_leg_class_of_travel_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_class_of_travel_Set() const{
    return m_airline_leg_class_of_travel_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_class_of_travel_Valid() const{
    return m_airline_leg_class_of_travel_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegDateOfTravel() const {
    return m_airline_leg_date_of_travel;
}
void OAIAdditionalDataAirline::setAirlineLegDateOfTravel(const QString &airline_leg_date_of_travel) {
    m_airline_leg_date_of_travel = airline_leg_date_of_travel;
    m_airline_leg_date_of_travel_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_date_of_travel_Set() const{
    return m_airline_leg_date_of_travel_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_date_of_travel_Valid() const{
    return m_airline_leg_date_of_travel_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegDepartAirport() const {
    return m_airline_leg_depart_airport;
}
void OAIAdditionalDataAirline::setAirlineLegDepartAirport(const QString &airline_leg_depart_airport) {
    m_airline_leg_depart_airport = airline_leg_depart_airport;
    m_airline_leg_depart_airport_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_depart_airport_Set() const{
    return m_airline_leg_depart_airport_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_depart_airport_Valid() const{
    return m_airline_leg_depart_airport_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegDepartTax() const {
    return m_airline_leg_depart_tax;
}
void OAIAdditionalDataAirline::setAirlineLegDepartTax(const QString &airline_leg_depart_tax) {
    m_airline_leg_depart_tax = airline_leg_depart_tax;
    m_airline_leg_depart_tax_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_depart_tax_Set() const{
    return m_airline_leg_depart_tax_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_depart_tax_Valid() const{
    return m_airline_leg_depart_tax_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegDestinationCode() const {
    return m_airline_leg_destination_code;
}
void OAIAdditionalDataAirline::setAirlineLegDestinationCode(const QString &airline_leg_destination_code) {
    m_airline_leg_destination_code = airline_leg_destination_code;
    m_airline_leg_destination_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_destination_code_Set() const{
    return m_airline_leg_destination_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_destination_code_Valid() const{
    return m_airline_leg_destination_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegFareBaseCode() const {
    return m_airline_leg_fare_base_code;
}
void OAIAdditionalDataAirline::setAirlineLegFareBaseCode(const QString &airline_leg_fare_base_code) {
    m_airline_leg_fare_base_code = airline_leg_fare_base_code;
    m_airline_leg_fare_base_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_fare_base_code_Set() const{
    return m_airline_leg_fare_base_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_fare_base_code_Valid() const{
    return m_airline_leg_fare_base_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegFlightNumber() const {
    return m_airline_leg_flight_number;
}
void OAIAdditionalDataAirline::setAirlineLegFlightNumber(const QString &airline_leg_flight_number) {
    m_airline_leg_flight_number = airline_leg_flight_number;
    m_airline_leg_flight_number_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_flight_number_Set() const{
    return m_airline_leg_flight_number_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_flight_number_Valid() const{
    return m_airline_leg_flight_number_isValid;
}

QString OAIAdditionalDataAirline::getAirlineLegStopOverCode() const {
    return m_airline_leg_stop_over_code;
}
void OAIAdditionalDataAirline::setAirlineLegStopOverCode(const QString &airline_leg_stop_over_code) {
    m_airline_leg_stop_over_code = airline_leg_stop_over_code;
    m_airline_leg_stop_over_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_leg_stop_over_code_Set() const{
    return m_airline_leg_stop_over_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_leg_stop_over_code_Valid() const{
    return m_airline_leg_stop_over_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerDateOfBirth() const {
    return m_airline_passenger_date_of_birth;
}
void OAIAdditionalDataAirline::setAirlinePassengerDateOfBirth(const QString &airline_passenger_date_of_birth) {
    m_airline_passenger_date_of_birth = airline_passenger_date_of_birth;
    m_airline_passenger_date_of_birth_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_date_of_birth_Set() const{
    return m_airline_passenger_date_of_birth_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_date_of_birth_Valid() const{
    return m_airline_passenger_date_of_birth_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerFirstName() const {
    return m_airline_passenger_first_name;
}
void OAIAdditionalDataAirline::setAirlinePassengerFirstName(const QString &airline_passenger_first_name) {
    m_airline_passenger_first_name = airline_passenger_first_name;
    m_airline_passenger_first_name_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_first_name_Set() const{
    return m_airline_passenger_first_name_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_first_name_Valid() const{
    return m_airline_passenger_first_name_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerLastName() const {
    return m_airline_passenger_last_name;
}
void OAIAdditionalDataAirline::setAirlinePassengerLastName(const QString &airline_passenger_last_name) {
    m_airline_passenger_last_name = airline_passenger_last_name;
    m_airline_passenger_last_name_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_last_name_Set() const{
    return m_airline_passenger_last_name_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_last_name_Valid() const{
    return m_airline_passenger_last_name_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerTelephoneNumber() const {
    return m_airline_passenger_telephone_number;
}
void OAIAdditionalDataAirline::setAirlinePassengerTelephoneNumber(const QString &airline_passenger_telephone_number) {
    m_airline_passenger_telephone_number = airline_passenger_telephone_number;
    m_airline_passenger_telephone_number_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_telephone_number_Set() const{
    return m_airline_passenger_telephone_number_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_telephone_number_Valid() const{
    return m_airline_passenger_telephone_number_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerTravellerType() const {
    return m_airline_passenger_traveller_type;
}
void OAIAdditionalDataAirline::setAirlinePassengerTravellerType(const QString &airline_passenger_traveller_type) {
    m_airline_passenger_traveller_type = airline_passenger_traveller_type;
    m_airline_passenger_traveller_type_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_traveller_type_Set() const{
    return m_airline_passenger_traveller_type_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_traveller_type_Valid() const{
    return m_airline_passenger_traveller_type_isValid;
}

QString OAIAdditionalDataAirline::getAirlinePassengerName() const {
    return m_airline_passenger_name;
}
void OAIAdditionalDataAirline::setAirlinePassengerName(const QString &airline_passenger_name) {
    m_airline_passenger_name = airline_passenger_name;
    m_airline_passenger_name_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_passenger_name_Set() const{
    return m_airline_passenger_name_isSet;
}

bool OAIAdditionalDataAirline::is_airline_passenger_name_Valid() const{
    return m_airline_passenger_name_isValid;
}

QString OAIAdditionalDataAirline::getAirlineTicketIssueAddress() const {
    return m_airline_ticket_issue_address;
}
void OAIAdditionalDataAirline::setAirlineTicketIssueAddress(const QString &airline_ticket_issue_address) {
    m_airline_ticket_issue_address = airline_ticket_issue_address;
    m_airline_ticket_issue_address_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_ticket_issue_address_Set() const{
    return m_airline_ticket_issue_address_isSet;
}

bool OAIAdditionalDataAirline::is_airline_ticket_issue_address_Valid() const{
    return m_airline_ticket_issue_address_isValid;
}

QString OAIAdditionalDataAirline::getAirlineTicketNumber() const {
    return m_airline_ticket_number;
}
void OAIAdditionalDataAirline::setAirlineTicketNumber(const QString &airline_ticket_number) {
    m_airline_ticket_number = airline_ticket_number;
    m_airline_ticket_number_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_ticket_number_Set() const{
    return m_airline_ticket_number_isSet;
}

bool OAIAdditionalDataAirline::is_airline_ticket_number_Valid() const{
    return m_airline_ticket_number_isValid;
}

QString OAIAdditionalDataAirline::getAirlineTravelAgencyCode() const {
    return m_airline_travel_agency_code;
}
void OAIAdditionalDataAirline::setAirlineTravelAgencyCode(const QString &airline_travel_agency_code) {
    m_airline_travel_agency_code = airline_travel_agency_code;
    m_airline_travel_agency_code_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_travel_agency_code_Set() const{
    return m_airline_travel_agency_code_isSet;
}

bool OAIAdditionalDataAirline::is_airline_travel_agency_code_Valid() const{
    return m_airline_travel_agency_code_isValid;
}

QString OAIAdditionalDataAirline::getAirlineTravelAgencyName() const {
    return m_airline_travel_agency_name;
}
void OAIAdditionalDataAirline::setAirlineTravelAgencyName(const QString &airline_travel_agency_name) {
    m_airline_travel_agency_name = airline_travel_agency_name;
    m_airline_travel_agency_name_isSet = true;
}

bool OAIAdditionalDataAirline::is_airline_travel_agency_name_Set() const{
    return m_airline_travel_agency_name_isSet;
}

bool OAIAdditionalDataAirline::is_airline_travel_agency_name_Valid() const{
    return m_airline_travel_agency_name_isValid;
}

bool OAIAdditionalDataAirline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airline_agency_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_agency_plan_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_airline_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_airline_designator_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_boarding_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_computerized_reservation_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_customer_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_flight_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_carrier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_class_of_travel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_date_of_travel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_depart_airport_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_depart_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_destination_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_fare_base_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_flight_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_leg_stop_over_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_traveller_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_passenger_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_ticket_issue_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_ticket_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_travel_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airline_travel_agency_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataAirline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_airline_passenger_name_isValid && true;
}

} // namespace OpenAPI
