/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFundRecipient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFundRecipient::OAIFundRecipient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFundRecipient::OAIFundRecipient() {
    this->initializeModel();
}

OAIFundRecipient::~OAIFundRecipient() {}

void OAIFundRecipient::initializeModel() {

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;

    m_sub_merchant_isSet = false;
    m_sub_merchant_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_wallet_identifier_isSet = false;
    m_wallet_identifier_isValid = false;

    m_wallet_owner_tax_id_isSet = false;
    m_wallet_owner_tax_id_isValid = false;
}

void OAIFundRecipient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFundRecipient::fromJsonObject(QJsonObject json) {

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;

    m_sub_merchant_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant, json[QString("subMerchant")]);
    m_sub_merchant_isSet = !json[QString("subMerchant")].isNull() && m_sub_merchant_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;

    m_wallet_identifier_isValid = ::OpenAPI::fromJsonValue(m_wallet_identifier, json[QString("walletIdentifier")]);
    m_wallet_identifier_isSet = !json[QString("walletIdentifier")].isNull() && m_wallet_identifier_isValid;

    m_wallet_owner_tax_id_isValid = ::OpenAPI::fromJsonValue(m_wallet_owner_tax_id, json[QString("walletOwnerTaxId")]);
    m_wallet_owner_tax_id_isSet = !json[QString("walletOwnerTaxId")].isNull() && m_wallet_owner_tax_id_isValid;
}

QString OAIFundRecipient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFundRecipient::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    if (m_sub_merchant.isSet()) {
        obj.insert(QString("subMerchant"), ::OpenAPI::toJsonValue(m_sub_merchant));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_wallet_identifier_isSet) {
        obj.insert(QString("walletIdentifier"), ::OpenAPI::toJsonValue(m_wallet_identifier));
    }
    if (m_wallet_owner_tax_id_isSet) {
        obj.insert(QString("walletOwnerTaxId"), ::OpenAPI::toJsonValue(m_wallet_owner_tax_id));
    }
    return obj;
}

OAIAddress OAIFundRecipient::getBillingAddress() const {
    return m_billing_address;
}
void OAIFundRecipient::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIFundRecipient::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIFundRecipient::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICardDetails OAIFundRecipient::getPaymentMethod() const {
    return m_payment_method;
}
void OAIFundRecipient::setPaymentMethod(const OAICardDetails &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIFundRecipient::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIFundRecipient::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIFundRecipient::getShopperEmail() const {
    return m_shopper_email;
}
void OAIFundRecipient::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIFundRecipient::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIFundRecipient::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

OAIName OAIFundRecipient::getShopperName() const {
    return m_shopper_name;
}
void OAIFundRecipient::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIFundRecipient::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIFundRecipient::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIFundRecipient::getShopperReference() const {
    return m_shopper_reference;
}
void OAIFundRecipient::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIFundRecipient::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIFundRecipient::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIFundRecipient::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAIFundRecipient::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAIFundRecipient::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAIFundRecipient::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

OAISubMerchant OAIFundRecipient::getSubMerchant() const {
    return m_sub_merchant;
}
void OAIFundRecipient::setSubMerchant(const OAISubMerchant &sub_merchant) {
    m_sub_merchant = sub_merchant;
    m_sub_merchant_isSet = true;
}

bool OAIFundRecipient::is_sub_merchant_Set() const{
    return m_sub_merchant_isSet;
}

bool OAIFundRecipient::is_sub_merchant_Valid() const{
    return m_sub_merchant_isValid;
}

QString OAIFundRecipient::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIFundRecipient::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIFundRecipient::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIFundRecipient::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

QString OAIFundRecipient::getWalletIdentifier() const {
    return m_wallet_identifier;
}
void OAIFundRecipient::setWalletIdentifier(const QString &wallet_identifier) {
    m_wallet_identifier = wallet_identifier;
    m_wallet_identifier_isSet = true;
}

bool OAIFundRecipient::is_wallet_identifier_Set() const{
    return m_wallet_identifier_isSet;
}

bool OAIFundRecipient::is_wallet_identifier_Valid() const{
    return m_wallet_identifier_isValid;
}

QString OAIFundRecipient::getWalletOwnerTaxId() const {
    return m_wallet_owner_tax_id;
}
void OAIFundRecipient::setWalletOwnerTaxId(const QString &wallet_owner_tax_id) {
    m_wallet_owner_tax_id = wallet_owner_tax_id;
    m_wallet_owner_tax_id_isSet = true;
}

bool OAIFundRecipient::is_wallet_owner_tax_id_Set() const{
    return m_wallet_owner_tax_id_isSet;
}

bool OAIFundRecipient::is_wallet_owner_tax_id_Valid() const{
    return m_wallet_owner_tax_id_isValid;
}

bool OAIFundRecipient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wallet_owner_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFundRecipient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
