/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDS2Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDS2Result::OAIThreeDS2Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDS2Result::OAIThreeDS2Result() {
    this->initializeModel();
}

OAIThreeDS2Result::~OAIThreeDS2Result() {}

void OAIThreeDS2Result::initializeModel() {

    m_authentication_value_isSet = false;
    m_authentication_value_isValid = false;

    m_cavv_algorithm_isSet = false;
    m_cavv_algorithm_isValid = false;

    m_ds_trans_id_isSet = false;
    m_ds_trans_id_isValid = false;

    m_eci_isSet = false;
    m_eci_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_three_ds_server_trans_id_isSet = false;
    m_three_ds_server_trans_id_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_trans_status_isSet = false;
    m_trans_status_isValid = false;

    m_trans_status_reason_isSet = false;
    m_trans_status_reason_isValid = false;

    m_white_list_status_isSet = false;
    m_white_list_status_isValid = false;
}

void OAIThreeDS2Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDS2Result::fromJsonObject(QJsonObject json) {

    m_authentication_value_isValid = ::OpenAPI::fromJsonValue(m_authentication_value, json[QString("authenticationValue")]);
    m_authentication_value_isSet = !json[QString("authenticationValue")].isNull() && m_authentication_value_isValid;

    m_cavv_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cavv_algorithm, json[QString("cavvAlgorithm")]);
    m_cavv_algorithm_isSet = !json[QString("cavvAlgorithm")].isNull() && m_cavv_algorithm_isValid;

    m_ds_trans_id_isValid = ::OpenAPI::fromJsonValue(m_ds_trans_id, json[QString("dsTransID")]);
    m_ds_trans_id_isSet = !json[QString("dsTransID")].isNull() && m_ds_trans_id_isValid;

    m_eci_isValid = ::OpenAPI::fromJsonValue(m_eci, json[QString("eci")]);
    m_eci_isSet = !json[QString("eci")].isNull() && m_eci_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_three_ds_server_trans_id_isValid = ::OpenAPI::fromJsonValue(m_three_ds_server_trans_id, json[QString("threeDSServerTransID")]);
    m_three_ds_server_trans_id_isSet = !json[QString("threeDSServerTransID")].isNull() && m_three_ds_server_trans_id_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_trans_status_isValid = ::OpenAPI::fromJsonValue(m_trans_status, json[QString("transStatus")]);
    m_trans_status_isSet = !json[QString("transStatus")].isNull() && m_trans_status_isValid;

    m_trans_status_reason_isValid = ::OpenAPI::fromJsonValue(m_trans_status_reason, json[QString("transStatusReason")]);
    m_trans_status_reason_isSet = !json[QString("transStatusReason")].isNull() && m_trans_status_reason_isValid;

    m_white_list_status_isValid = ::OpenAPI::fromJsonValue(m_white_list_status, json[QString("whiteListStatus")]);
    m_white_list_status_isSet = !json[QString("whiteListStatus")].isNull() && m_white_list_status_isValid;
}

QString OAIThreeDS2Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDS2Result::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_value_isSet) {
        obj.insert(QString("authenticationValue"), ::OpenAPI::toJsonValue(m_authentication_value));
    }
    if (m_cavv_algorithm_isSet) {
        obj.insert(QString("cavvAlgorithm"), ::OpenAPI::toJsonValue(m_cavv_algorithm));
    }
    if (m_ds_trans_id_isSet) {
        obj.insert(QString("dsTransID"), ::OpenAPI::toJsonValue(m_ds_trans_id));
    }
    if (m_eci_isSet) {
        obj.insert(QString("eci"), ::OpenAPI::toJsonValue(m_eci));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_three_ds_server_trans_id_isSet) {
        obj.insert(QString("threeDSServerTransID"), ::OpenAPI::toJsonValue(m_three_ds_server_trans_id));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_trans_status_isSet) {
        obj.insert(QString("transStatus"), ::OpenAPI::toJsonValue(m_trans_status));
    }
    if (m_trans_status_reason_isSet) {
        obj.insert(QString("transStatusReason"), ::OpenAPI::toJsonValue(m_trans_status_reason));
    }
    if (m_white_list_status_isSet) {
        obj.insert(QString("whiteListStatus"), ::OpenAPI::toJsonValue(m_white_list_status));
    }
    return obj;
}

QString OAIThreeDS2Result::getAuthenticationValue() const {
    return m_authentication_value;
}
void OAIThreeDS2Result::setAuthenticationValue(const QString &authentication_value) {
    m_authentication_value = authentication_value;
    m_authentication_value_isSet = true;
}

bool OAIThreeDS2Result::is_authentication_value_Set() const{
    return m_authentication_value_isSet;
}

bool OAIThreeDS2Result::is_authentication_value_Valid() const{
    return m_authentication_value_isValid;
}

QString OAIThreeDS2Result::getCavvAlgorithm() const {
    return m_cavv_algorithm;
}
void OAIThreeDS2Result::setCavvAlgorithm(const QString &cavv_algorithm) {
    m_cavv_algorithm = cavv_algorithm;
    m_cavv_algorithm_isSet = true;
}

bool OAIThreeDS2Result::is_cavv_algorithm_Set() const{
    return m_cavv_algorithm_isSet;
}

bool OAIThreeDS2Result::is_cavv_algorithm_Valid() const{
    return m_cavv_algorithm_isValid;
}

QString OAIThreeDS2Result::getDsTransId() const {
    return m_ds_trans_id;
}
void OAIThreeDS2Result::setDsTransId(const QString &ds_trans_id) {
    m_ds_trans_id = ds_trans_id;
    m_ds_trans_id_isSet = true;
}

bool OAIThreeDS2Result::is_ds_trans_id_Set() const{
    return m_ds_trans_id_isSet;
}

bool OAIThreeDS2Result::is_ds_trans_id_Valid() const{
    return m_ds_trans_id_isValid;
}

QString OAIThreeDS2Result::getEci() const {
    return m_eci;
}
void OAIThreeDS2Result::setEci(const QString &eci) {
    m_eci = eci;
    m_eci_isSet = true;
}

bool OAIThreeDS2Result::is_eci_Set() const{
    return m_eci_isSet;
}

bool OAIThreeDS2Result::is_eci_Valid() const{
    return m_eci_isValid;
}

QString OAIThreeDS2Result::getMessageVersion() const {
    return m_message_version;
}
void OAIThreeDS2Result::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIThreeDS2Result::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIThreeDS2Result::is_message_version_Valid() const{
    return m_message_version_isValid;
}

QString OAIThreeDS2Result::getThreeDsServerTransId() const {
    return m_three_ds_server_trans_id;
}
void OAIThreeDS2Result::setThreeDsServerTransId(const QString &three_ds_server_trans_id) {
    m_three_ds_server_trans_id = three_ds_server_trans_id;
    m_three_ds_server_trans_id_isSet = true;
}

bool OAIThreeDS2Result::is_three_ds_server_trans_id_Set() const{
    return m_three_ds_server_trans_id_isSet;
}

bool OAIThreeDS2Result::is_three_ds_server_trans_id_Valid() const{
    return m_three_ds_server_trans_id_isValid;
}

QString OAIThreeDS2Result::getTimestamp() const {
    return m_timestamp;
}
void OAIThreeDS2Result::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIThreeDS2Result::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIThreeDS2Result::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIThreeDS2Result::getTransStatus() const {
    return m_trans_status;
}
void OAIThreeDS2Result::setTransStatus(const QString &trans_status) {
    m_trans_status = trans_status;
    m_trans_status_isSet = true;
}

bool OAIThreeDS2Result::is_trans_status_Set() const{
    return m_trans_status_isSet;
}

bool OAIThreeDS2Result::is_trans_status_Valid() const{
    return m_trans_status_isValid;
}

QString OAIThreeDS2Result::getTransStatusReason() const {
    return m_trans_status_reason;
}
void OAIThreeDS2Result::setTransStatusReason(const QString &trans_status_reason) {
    m_trans_status_reason = trans_status_reason;
    m_trans_status_reason_isSet = true;
}

bool OAIThreeDS2Result::is_trans_status_reason_Set() const{
    return m_trans_status_reason_isSet;
}

bool OAIThreeDS2Result::is_trans_status_reason_Valid() const{
    return m_trans_status_reason_isValid;
}

QString OAIThreeDS2Result::getWhiteListStatus() const {
    return m_white_list_status;
}
void OAIThreeDS2Result::setWhiteListStatus(const QString &white_list_status) {
    m_white_list_status = white_list_status;
    m_white_list_status_isSet = true;
}

bool OAIThreeDS2Result::is_white_list_status_Set() const{
    return m_white_list_status_isSet;
}

bool OAIThreeDS2Result::is_white_list_status_Valid() const{
    return m_white_list_status_isValid;
}

bool OAIThreeDS2Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_server_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_white_list_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDS2Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
