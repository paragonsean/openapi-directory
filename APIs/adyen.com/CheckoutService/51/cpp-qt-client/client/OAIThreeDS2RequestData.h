/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIThreeDS2RequestData.h
 *
 * 
 */

#ifndef OAIThreeDS2RequestData_H
#define OAIThreeDS2RequestData_H

#include <QJsonObject>

#include "OAIDeviceRenderOptions.h"
#include "OAISDKEphemPubKey.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDeviceRenderOptions;
class OAISDKEphemPubKey;

class OAIThreeDS2RequestData : public OAIObject {
public:
    OAIThreeDS2RequestData();
    OAIThreeDS2RequestData(QString json);
    ~OAIThreeDS2RequestData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcquirerBin() const;
    void setAcquirerBin(const QString &acquirer_bin);
    bool is_acquirer_bin_Set() const;
    bool is_acquirer_bin_Valid() const;

    QString getAcquirerMerchantId() const;
    void setAcquirerMerchantId(const QString &acquirer_merchant_id);
    bool is_acquirer_merchant_id_Set() const;
    bool is_acquirer_merchant_id_Valid() const;

    Q_DECL_DEPRECATED bool isAuthenticationOnly() const;
    Q_DECL_DEPRECATED void setAuthenticationOnly(const bool &authentication_only);
    Q_DECL_DEPRECATED bool is_authentication_only_Set() const;
    Q_DECL_DEPRECATED bool is_authentication_only_Valid() const;

    QString getChallengeIndicator() const;
    void setChallengeIndicator(const QString &challenge_indicator);
    bool is_challenge_indicator_Set() const;
    bool is_challenge_indicator_Valid() const;

    QString getDeviceChannel() const;
    void setDeviceChannel(const QString &device_channel);
    bool is_device_channel_Set() const;
    bool is_device_channel_Valid() const;

    OAIDeviceRenderOptions getDeviceRenderOptions() const;
    void setDeviceRenderOptions(const OAIDeviceRenderOptions &device_render_options);
    bool is_device_render_options_Set() const;
    bool is_device_render_options_Valid() const;

    QString getMcc() const;
    void setMcc(const QString &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    QString getMerchantName() const;
    void setMerchantName(const QString &merchant_name);
    bool is_merchant_name_Set() const;
    bool is_merchant_name_Valid() const;

    QString getMessageVersion() const;
    void setMessageVersion(const QString &message_version);
    bool is_message_version_Set() const;
    bool is_message_version_Valid() const;

    QString getNotificationUrl() const;
    void setNotificationUrl(const QString &notification_url);
    bool is_notification_url_Set() const;
    bool is_notification_url_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getSdkAppId() const;
    void setSdkAppId(const QString &sdk_app_id);
    bool is_sdk_app_id_Set() const;
    bool is_sdk_app_id_Valid() const;

    QString getSdkEncData() const;
    void setSdkEncData(const QString &sdk_enc_data);
    bool is_sdk_enc_data_Set() const;
    bool is_sdk_enc_data_Valid() const;

    OAISDKEphemPubKey getSdkEphemPubKey() const;
    void setSdkEphemPubKey(const OAISDKEphemPubKey &sdk_ephem_pub_key);
    bool is_sdk_ephem_pub_key_Set() const;
    bool is_sdk_ephem_pub_key_Valid() const;

    qint32 getSdkMaxTimeout() const;
    void setSdkMaxTimeout(const qint32 &sdk_max_timeout);
    bool is_sdk_max_timeout_Set() const;
    bool is_sdk_max_timeout_Valid() const;

    QString getSdkReferenceNumber() const;
    void setSdkReferenceNumber(const QString &sdk_reference_number);
    bool is_sdk_reference_number_Set() const;
    bool is_sdk_reference_number_Valid() const;

    QString getSdkTransId() const;
    void setSdkTransId(const QString &sdk_trans_id);
    bool is_sdk_trans_id_Set() const;
    bool is_sdk_trans_id_Valid() const;

    QString getSdkVersion() const;
    void setSdkVersion(const QString &sdk_version);
    bool is_sdk_version_Set() const;
    bool is_sdk_version_Valid() const;

    QString getThreeDsCompInd() const;
    void setThreeDsCompInd(const QString &three_ds_comp_ind);
    bool is_three_ds_comp_ind_Set() const;
    bool is_three_ds_comp_ind_Valid() const;

    QString getThreeDsRequestorId() const;
    void setThreeDsRequestorId(const QString &three_ds_requestor_id);
    bool is_three_ds_requestor_id_Set() const;
    bool is_three_ds_requestor_id_Valid() const;

    QString getThreeDsRequestorName() const;
    void setThreeDsRequestorName(const QString &three_ds_requestor_name);
    bool is_three_ds_requestor_name_Set() const;
    bool is_three_ds_requestor_name_Valid() const;

    QString getThreeDsRequestorUrl() const;
    void setThreeDsRequestorUrl(const QString &three_ds_requestor_url);
    bool is_three_ds_requestor_url_Set() const;
    bool is_three_ds_requestor_url_Valid() const;

    QString getTransactionType() const;
    void setTransactionType(const QString &transaction_type);
    bool is_transaction_type_Set() const;
    bool is_transaction_type_Valid() const;

    QString getWhiteListStatus() const;
    void setWhiteListStatus(const QString &white_list_status);
    bool is_white_list_status_Set() const;
    bool is_white_list_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acquirer_bin;
    bool m_acquirer_bin_isSet;
    bool m_acquirer_bin_isValid;

    QString m_acquirer_merchant_id;
    bool m_acquirer_merchant_id_isSet;
    bool m_acquirer_merchant_id_isValid;

    bool m_authentication_only;
    bool m_authentication_only_isSet;
    bool m_authentication_only_isValid;

    QString m_challenge_indicator;
    bool m_challenge_indicator_isSet;
    bool m_challenge_indicator_isValid;

    QString m_device_channel;
    bool m_device_channel_isSet;
    bool m_device_channel_isValid;

    OAIDeviceRenderOptions m_device_render_options;
    bool m_device_render_options_isSet;
    bool m_device_render_options_isValid;

    QString m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    QString m_merchant_name;
    bool m_merchant_name_isSet;
    bool m_merchant_name_isValid;

    QString m_message_version;
    bool m_message_version_isSet;
    bool m_message_version_isValid;

    QString m_notification_url;
    bool m_notification_url_isSet;
    bool m_notification_url_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_sdk_app_id;
    bool m_sdk_app_id_isSet;
    bool m_sdk_app_id_isValid;

    QString m_sdk_enc_data;
    bool m_sdk_enc_data_isSet;
    bool m_sdk_enc_data_isValid;

    OAISDKEphemPubKey m_sdk_ephem_pub_key;
    bool m_sdk_ephem_pub_key_isSet;
    bool m_sdk_ephem_pub_key_isValid;

    qint32 m_sdk_max_timeout;
    bool m_sdk_max_timeout_isSet;
    bool m_sdk_max_timeout_isValid;

    QString m_sdk_reference_number;
    bool m_sdk_reference_number_isSet;
    bool m_sdk_reference_number_isValid;

    QString m_sdk_trans_id;
    bool m_sdk_trans_id_isSet;
    bool m_sdk_trans_id_isValid;

    QString m_sdk_version;
    bool m_sdk_version_isSet;
    bool m_sdk_version_isValid;

    QString m_three_ds_comp_ind;
    bool m_three_ds_comp_ind_isSet;
    bool m_three_ds_comp_ind_isValid;

    QString m_three_ds_requestor_id;
    bool m_three_ds_requestor_id_isSet;
    bool m_three_ds_requestor_id_isValid;

    QString m_three_ds_requestor_name;
    bool m_three_ds_requestor_name_isSet;
    bool m_three_ds_requestor_name_isValid;

    QString m_three_ds_requestor_url;
    bool m_three_ds_requestor_url_isSet;
    bool m_three_ds_requestor_url_isValid;

    QString m_transaction_type;
    bool m_transaction_type_isSet;
    bool m_transaction_type_isValid;

    QString m_white_list_status;
    bool m_white_list_status_isSet;
    bool m_white_list_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIThreeDS2RequestData)

#endif // OAIThreeDS2RequestData_H
