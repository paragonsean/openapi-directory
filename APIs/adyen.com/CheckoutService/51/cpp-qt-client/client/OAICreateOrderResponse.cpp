/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateOrderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateOrderResponse::OAICreateOrderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateOrderResponse::OAICreateOrderResponse() {
    this->initializeModel();
}

OAICreateOrderResponse::~OAICreateOrderResponse() {}

void OAICreateOrderResponse::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_fraud_result_isSet = false;
    m_fraud_result_isValid = false;

    m_order_data_isSet = false;
    m_order_data_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_remaining_amount_isSet = false;
    m_remaining_amount_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;
}

void OAICreateOrderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateOrderResponse::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_fraud_result_isValid = ::OpenAPI::fromJsonValue(m_fraud_result, json[QString("fraudResult")]);
    m_fraud_result_isSet = !json[QString("fraudResult")].isNull() && m_fraud_result_isValid;

    m_order_data_isValid = ::OpenAPI::fromJsonValue(m_order_data, json[QString("orderData")]);
    m_order_data_isSet = !json[QString("orderData")].isNull() && m_order_data_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_remaining_amount_isValid = ::OpenAPI::fromJsonValue(m_remaining_amount, json[QString("remainingAmount")]);
    m_remaining_amount_isSet = !json[QString("remainingAmount")].isNull() && m_remaining_amount_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;
}

QString OAICreateOrderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateOrderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_fraud_result.isSet()) {
        obj.insert(QString("fraudResult"), ::OpenAPI::toJsonValue(m_fraud_result));
    }
    if (m_order_data_isSet) {
        obj.insert(QString("orderData"), ::OpenAPI::toJsonValue(m_order_data));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_remaining_amount.isSet()) {
        obj.insert(QString("remainingAmount"), ::OpenAPI::toJsonValue(m_remaining_amount));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    return obj;
}

OAIBalanceCheckResponse_additionalData OAICreateOrderResponse::getAdditionalData() const {
    return m_additional_data;
}
void OAICreateOrderResponse::setAdditionalData(const OAIBalanceCheckResponse_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAICreateOrderResponse::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAICreateOrderResponse::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QString OAICreateOrderResponse::getExpiresAt() const {
    return m_expires_at;
}
void OAICreateOrderResponse::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAICreateOrderResponse::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAICreateOrderResponse::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

OAIFraudResult OAICreateOrderResponse::getFraudResult() const {
    return m_fraud_result;
}
void OAICreateOrderResponse::setFraudResult(const OAIFraudResult &fraud_result) {
    m_fraud_result = fraud_result;
    m_fraud_result_isSet = true;
}

bool OAICreateOrderResponse::is_fraud_result_Set() const{
    return m_fraud_result_isSet;
}

bool OAICreateOrderResponse::is_fraud_result_Valid() const{
    return m_fraud_result_isValid;
}

QString OAICreateOrderResponse::getOrderData() const {
    return m_order_data;
}
void OAICreateOrderResponse::setOrderData(const QString &order_data) {
    m_order_data = order_data;
    m_order_data_isSet = true;
}

bool OAICreateOrderResponse::is_order_data_Set() const{
    return m_order_data_isSet;
}

bool OAICreateOrderResponse::is_order_data_Valid() const{
    return m_order_data_isValid;
}

QString OAICreateOrderResponse::getPspReference() const {
    return m_psp_reference;
}
void OAICreateOrderResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAICreateOrderResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAICreateOrderResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAICreateOrderResponse::getReference() const {
    return m_reference;
}
void OAICreateOrderResponse::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICreateOrderResponse::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICreateOrderResponse::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAICreateOrderResponse::getRefusalReason() const {
    return m_refusal_reason;
}
void OAICreateOrderResponse::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAICreateOrderResponse::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAICreateOrderResponse::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

OAIAmount OAICreateOrderResponse::getRemainingAmount() const {
    return m_remaining_amount;
}
void OAICreateOrderResponse::setRemainingAmount(const OAIAmount &remaining_amount) {
    m_remaining_amount = remaining_amount;
    m_remaining_amount_isSet = true;
}

bool OAICreateOrderResponse::is_remaining_amount_Set() const{
    return m_remaining_amount_isSet;
}

bool OAICreateOrderResponse::is_remaining_amount_Valid() const{
    return m_remaining_amount_isValid;
}

QString OAICreateOrderResponse::getResultCode() const {
    return m_result_code;
}
void OAICreateOrderResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAICreateOrderResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAICreateOrderResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

bool OAICreateOrderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remaining_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateOrderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expires_at_isValid && m_order_data_isValid && m_remaining_amount_isValid && m_result_code_isValid && true;
}

} // namespace OpenAPI
