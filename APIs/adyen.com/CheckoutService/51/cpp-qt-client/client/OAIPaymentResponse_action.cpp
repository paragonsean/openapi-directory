/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v51/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v51/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=51) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResponse_action.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResponse_action::OAIPaymentResponse_action(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResponse_action::OAIPaymentResponse_action() {
    this->initializeModel();
}

OAIPaymentResponse_action::~OAIPaymentResponse_action() {}

void OAIPaymentResponse_action::initializeModel() {

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_native_redirect_data_isSet = false;
    m_native_redirect_data_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_qr_code_data_isSet = false;
    m_qr_code_data_isValid = false;

    m_sdk_data_isSet = false;
    m_sdk_data_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_alternative_reference_isSet = false;
    m_alternative_reference_isValid = false;

    m_collection_institution_number_isSet = false;
    m_collection_institution_number_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_initial_amount_isSet = false;
    m_initial_amount_isValid = false;

    m_instructions_url_isSet = false;
    m_instructions_url_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_masked_telephone_number_isSet = false;
    m_masked_telephone_number_isValid = false;

    m_merchant_name_isSet = false;
    m_merchant_name_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_surcharge_isSet = false;
    m_surcharge_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIPaymentResponse_action::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResponse_action::fromJsonObject(QJsonObject json) {

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("paymentData")]);
    m_payment_data_isSet = !json[QString("paymentData")].isNull() && m_payment_data_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_native_redirect_data_isValid = ::OpenAPI::fromJsonValue(m_native_redirect_data, json[QString("nativeRedirectData")]);
    m_native_redirect_data_isSet = !json[QString("nativeRedirectData")].isNull() && m_native_redirect_data_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_qr_code_data_isValid = ::OpenAPI::fromJsonValue(m_qr_code_data, json[QString("qrCodeData")]);
    m_qr_code_data_isSet = !json[QString("qrCodeData")].isNull() && m_qr_code_data_isValid;

    m_sdk_data_isValid = ::OpenAPI::fromJsonValue(m_sdk_data, json[QString("sdkData")]);
    m_sdk_data_isSet = !json[QString("sdkData")].isNull() && m_sdk_data_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_alternative_reference_isValid = ::OpenAPI::fromJsonValue(m_alternative_reference, json[QString("alternativeReference")]);
    m_alternative_reference_isSet = !json[QString("alternativeReference")].isNull() && m_alternative_reference_isValid;

    m_collection_institution_number_isValid = ::OpenAPI::fromJsonValue(m_collection_institution_number, json[QString("collectionInstitutionNumber")]);
    m_collection_institution_number_isSet = !json[QString("collectionInstitutionNumber")].isNull() && m_collection_institution_number_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_initial_amount_isValid = ::OpenAPI::fromJsonValue(m_initial_amount, json[QString("initialAmount")]);
    m_initial_amount_isSet = !json[QString("initialAmount")].isNull() && m_initial_amount_isValid;

    m_instructions_url_isValid = ::OpenAPI::fromJsonValue(m_instructions_url, json[QString("instructionsUrl")]);
    m_instructions_url_isSet = !json[QString("instructionsUrl")].isNull() && m_instructions_url_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_masked_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_masked_telephone_number, json[QString("maskedTelephoneNumber")]);
    m_masked_telephone_number_isSet = !json[QString("maskedTelephoneNumber")].isNull() && m_masked_telephone_number_isValid;

    m_merchant_name_isValid = ::OpenAPI::fromJsonValue(m_merchant_name, json[QString("merchantName")]);
    m_merchant_name_isSet = !json[QString("merchantName")].isNull() && m_merchant_name_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_surcharge_isValid = ::OpenAPI::fromJsonValue(m_surcharge, json[QString("surcharge")]);
    m_surcharge_isSet = !json[QString("surcharge")].isNull() && m_surcharge_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("totalAmount")]);
    m_total_amount_isSet = !json[QString("totalAmount")].isNull() && m_total_amount_isValid;
}

QString OAIPaymentResponse_action::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResponse_action::asJsonObject() const {
    QJsonObject obj;
    if (m_payment_data_isSet) {
        obj.insert(QString("paymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_native_redirect_data_isSet) {
        obj.insert(QString("nativeRedirectData"), ::OpenAPI::toJsonValue(m_native_redirect_data));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_qr_code_data_isSet) {
        obj.insert(QString("qrCodeData"), ::OpenAPI::toJsonValue(m_qr_code_data));
    }
    if (m_sdk_data.size() > 0) {
        obj.insert(QString("sdkData"), ::OpenAPI::toJsonValue(m_sdk_data));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_alternative_reference_isSet) {
        obj.insert(QString("alternativeReference"), ::OpenAPI::toJsonValue(m_alternative_reference));
    }
    if (m_collection_institution_number_isSet) {
        obj.insert(QString("collectionInstitutionNumber"), ::OpenAPI::toJsonValue(m_collection_institution_number));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_initial_amount.isSet()) {
        obj.insert(QString("initialAmount"), ::OpenAPI::toJsonValue(m_initial_amount));
    }
    if (m_instructions_url_isSet) {
        obj.insert(QString("instructionsUrl"), ::OpenAPI::toJsonValue(m_instructions_url));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_masked_telephone_number_isSet) {
        obj.insert(QString("maskedTelephoneNumber"), ::OpenAPI::toJsonValue(m_masked_telephone_number));
    }
    if (m_merchant_name_isSet) {
        obj.insert(QString("merchantName"), ::OpenAPI::toJsonValue(m_merchant_name));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_name_isSet) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_surcharge.isSet()) {
        obj.insert(QString("surcharge"), ::OpenAPI::toJsonValue(m_surcharge));
    }
    if (m_total_amount.isSet()) {
        obj.insert(QString("totalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QString OAIPaymentResponse_action::getPaymentData() const {
    return m_payment_data;
}
void OAIPaymentResponse_action::setPaymentData(const QString &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAIPaymentResponse_action::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAIPaymentResponse_action::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

QString OAIPaymentResponse_action::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAIPaymentResponse_action::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAIPaymentResponse_action::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAIPaymentResponse_action::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

QString OAIPaymentResponse_action::getType() const {
    return m_type;
}
void OAIPaymentResponse_action::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPaymentResponse_action::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPaymentResponse_action::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPaymentResponse_action::getUrl() const {
    return m_url;
}
void OAIPaymentResponse_action::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPaymentResponse_action::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPaymentResponse_action::is_url_Valid() const{
    return m_url_isValid;
}

QMap<QString, QString> OAIPaymentResponse_action::getData() const {
    return m_data;
}
void OAIPaymentResponse_action::setData(const QMap<QString, QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIPaymentResponse_action::is_data_Set() const{
    return m_data_isSet;
}

bool OAIPaymentResponse_action::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIPaymentResponse_action::getMethod() const {
    return m_method;
}
void OAIPaymentResponse_action::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIPaymentResponse_action::is_method_Set() const{
    return m_method_isSet;
}

bool OAIPaymentResponse_action::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIPaymentResponse_action::getNativeRedirectData() const {
    return m_native_redirect_data;
}
void OAIPaymentResponse_action::setNativeRedirectData(const QString &native_redirect_data) {
    m_native_redirect_data = native_redirect_data;
    m_native_redirect_data_isSet = true;
}

bool OAIPaymentResponse_action::is_native_redirect_data_Set() const{
    return m_native_redirect_data_isSet;
}

bool OAIPaymentResponse_action::is_native_redirect_data_Valid() const{
    return m_native_redirect_data_isValid;
}

QString OAIPaymentResponse_action::getExpiresAt() const {
    return m_expires_at;
}
void OAIPaymentResponse_action::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIPaymentResponse_action::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIPaymentResponse_action::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QString OAIPaymentResponse_action::getQrCodeData() const {
    return m_qr_code_data;
}
void OAIPaymentResponse_action::setQrCodeData(const QString &qr_code_data) {
    m_qr_code_data = qr_code_data;
    m_qr_code_data_isSet = true;
}

bool OAIPaymentResponse_action::is_qr_code_data_Set() const{
    return m_qr_code_data_isSet;
}

bool OAIPaymentResponse_action::is_qr_code_data_Valid() const{
    return m_qr_code_data_isValid;
}

QMap<QString, QString> OAIPaymentResponse_action::getSdkData() const {
    return m_sdk_data;
}
void OAIPaymentResponse_action::setSdkData(const QMap<QString, QString> &sdk_data) {
    m_sdk_data = sdk_data;
    m_sdk_data_isSet = true;
}

bool OAIPaymentResponse_action::is_sdk_data_Set() const{
    return m_sdk_data_isSet;
}

bool OAIPaymentResponse_action::is_sdk_data_Valid() const{
    return m_sdk_data_isValid;
}

QString OAIPaymentResponse_action::getToken() const {
    return m_token;
}
void OAIPaymentResponse_action::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIPaymentResponse_action::is_token_Set() const{
    return m_token_isSet;
}

bool OAIPaymentResponse_action::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIPaymentResponse_action::getAlternativeReference() const {
    return m_alternative_reference;
}
void OAIPaymentResponse_action::setAlternativeReference(const QString &alternative_reference) {
    m_alternative_reference = alternative_reference;
    m_alternative_reference_isSet = true;
}

bool OAIPaymentResponse_action::is_alternative_reference_Set() const{
    return m_alternative_reference_isSet;
}

bool OAIPaymentResponse_action::is_alternative_reference_Valid() const{
    return m_alternative_reference_isValid;
}

QString OAIPaymentResponse_action::getCollectionInstitutionNumber() const {
    return m_collection_institution_number;
}
void OAIPaymentResponse_action::setCollectionInstitutionNumber(const QString &collection_institution_number) {
    m_collection_institution_number = collection_institution_number;
    m_collection_institution_number_isSet = true;
}

bool OAIPaymentResponse_action::is_collection_institution_number_Set() const{
    return m_collection_institution_number_isSet;
}

bool OAIPaymentResponse_action::is_collection_institution_number_Valid() const{
    return m_collection_institution_number_isValid;
}

QString OAIPaymentResponse_action::getDownloadUrl() const {
    return m_download_url;
}
void OAIPaymentResponse_action::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIPaymentResponse_action::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIPaymentResponse_action::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIPaymentResponse_action::getEntity() const {
    return m_entity;
}
void OAIPaymentResponse_action::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIPaymentResponse_action::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIPaymentResponse_action::is_entity_Valid() const{
    return m_entity_isValid;
}

OAIAmount OAIPaymentResponse_action::getInitialAmount() const {
    return m_initial_amount;
}
void OAIPaymentResponse_action::setInitialAmount(const OAIAmount &initial_amount) {
    m_initial_amount = initial_amount;
    m_initial_amount_isSet = true;
}

bool OAIPaymentResponse_action::is_initial_amount_Set() const{
    return m_initial_amount_isSet;
}

bool OAIPaymentResponse_action::is_initial_amount_Valid() const{
    return m_initial_amount_isValid;
}

QString OAIPaymentResponse_action::getInstructionsUrl() const {
    return m_instructions_url;
}
void OAIPaymentResponse_action::setInstructionsUrl(const QString &instructions_url) {
    m_instructions_url = instructions_url;
    m_instructions_url_isSet = true;
}

bool OAIPaymentResponse_action::is_instructions_url_Set() const{
    return m_instructions_url_isSet;
}

bool OAIPaymentResponse_action::is_instructions_url_Valid() const{
    return m_instructions_url_isValid;
}

QString OAIPaymentResponse_action::getIssuer() const {
    return m_issuer;
}
void OAIPaymentResponse_action::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIPaymentResponse_action::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIPaymentResponse_action::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QString OAIPaymentResponse_action::getMaskedTelephoneNumber() const {
    return m_masked_telephone_number;
}
void OAIPaymentResponse_action::setMaskedTelephoneNumber(const QString &masked_telephone_number) {
    m_masked_telephone_number = masked_telephone_number;
    m_masked_telephone_number_isSet = true;
}

bool OAIPaymentResponse_action::is_masked_telephone_number_Set() const{
    return m_masked_telephone_number_isSet;
}

bool OAIPaymentResponse_action::is_masked_telephone_number_Valid() const{
    return m_masked_telephone_number_isValid;
}

QString OAIPaymentResponse_action::getMerchantName() const {
    return m_merchant_name;
}
void OAIPaymentResponse_action::setMerchantName(const QString &merchant_name) {
    m_merchant_name = merchant_name;
    m_merchant_name_isSet = true;
}

bool OAIPaymentResponse_action::is_merchant_name_Set() const{
    return m_merchant_name_isSet;
}

bool OAIPaymentResponse_action::is_merchant_name_Valid() const{
    return m_merchant_name_isValid;
}

QString OAIPaymentResponse_action::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIPaymentResponse_action::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIPaymentResponse_action::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIPaymentResponse_action::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIPaymentResponse_action::getReference() const {
    return m_reference;
}
void OAIPaymentResponse_action::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentResponse_action::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentResponse_action::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentResponse_action::getShopperEmail() const {
    return m_shopper_email;
}
void OAIPaymentResponse_action::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIPaymentResponse_action::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIPaymentResponse_action::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIPaymentResponse_action::getShopperName() const {
    return m_shopper_name;
}
void OAIPaymentResponse_action::setShopperName(const QString &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIPaymentResponse_action::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIPaymentResponse_action::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

OAIAmount OAIPaymentResponse_action::getSurcharge() const {
    return m_surcharge;
}
void OAIPaymentResponse_action::setSurcharge(const OAIAmount &surcharge) {
    m_surcharge = surcharge;
    m_surcharge_isSet = true;
}

bool OAIPaymentResponse_action::is_surcharge_Set() const{
    return m_surcharge_isSet;
}

bool OAIPaymentResponse_action::is_surcharge_Valid() const{
    return m_surcharge_isValid;
}

OAIAmount OAIPaymentResponse_action::getTotalAmount() const {
    return m_total_amount;
}
void OAIPaymentResponse_action::setTotalAmount(const OAIAmount &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIPaymentResponse_action::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIPaymentResponse_action::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIPaymentResponse_action::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payment_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native_redirect_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qr_code_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alternative_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_institution_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_initial_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructions_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masked_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResponse_action::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
