/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AdditionalDataCommon
 */
public class AdditionalDataCommonTest {
    private final AdditionalDataCommon model = new AdditionalDataCommon();

    /**
     * Model tests for AdditionalDataCommon
     */
    @Test
    public void testAdditionalDataCommon() {
        // TODO: test AdditionalDataCommon
    }

    /**
     * Test the property 'requestedTestErrorResponseCode'
     */
    @Test
    public void requestedTestErrorResponseCodeTest() {
        // TODO: test requestedTestErrorResponseCode
    }

    /**
     * Test the property 'allowPartialAuth'
     */
    @Test
    public void allowPartialAuthTest() {
        // TODO: test allowPartialAuth
    }

    /**
     * Test the property 'authorisationType'
     */
    @Test
    public void authorisationTypeTest() {
        // TODO: test authorisationType
    }

    /**
     * Test the property 'customRoutingFlag'
     */
    @Test
    public void customRoutingFlagTest() {
        // TODO: test customRoutingFlag
    }

    /**
     * Test the property 'industryUsage'
     */
    @Test
    public void industryUsageTest() {
        // TODO: test industryUsage
    }

    /**
     * Test the property 'manualCapture'
     */
    @Test
    public void manualCaptureTest() {
        // TODO: test manualCapture
    }

    /**
     * Test the property 'networkTxReference'
     */
    @Test
    public void networkTxReferenceTest() {
        // TODO: test networkTxReference
    }

    /**
     * Test the property 'overwriteBrand'
     */
    @Test
    public void overwriteBrandTest() {
        // TODO: test overwriteBrand
    }

    /**
     * Test the property 'subMerchantCity'
     */
    @Test
    public void subMerchantCityTest() {
        // TODO: test subMerchantCity
    }

    /**
     * Test the property 'subMerchantCountry'
     */
    @Test
    public void subMerchantCountryTest() {
        // TODO: test subMerchantCountry
    }

    /**
     * Test the property 'subMerchantID'
     */
    @Test
    public void subMerchantIDTest() {
        // TODO: test subMerchantID
    }

    /**
     * Test the property 'subMerchantName'
     */
    @Test
    public void subMerchantNameTest() {
        // TODO: test subMerchantName
    }

    /**
     * Test the property 'subMerchantPostalCode'
     */
    @Test
    public void subMerchantPostalCodeTest() {
        // TODO: test subMerchantPostalCode
    }

    /**
     * Test the property 'subMerchantState'
     */
    @Test
    public void subMerchantStateTest() {
        // TODO: test subMerchantState
    }

    /**
     * Test the property 'subMerchantStreet'
     */
    @Test
    public void subMerchantStreetTest() {
        // TODO: test subMerchantStreet
    }

    /**
     * Test the property 'subMerchantTaxId'
     */
    @Test
    public void subMerchantTaxIdTest() {
        // TODO: test subMerchantTaxId
    }

}
