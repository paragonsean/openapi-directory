# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DragonpayDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issuer: str=None, shopper_email: str=None, type: str=None):
        """DragonpayDetails - a model defined in OpenAPI

        :param issuer: The issuer of this DragonpayDetails.
        :param shopper_email: The shopper_email of this DragonpayDetails.
        :param type: The type of this DragonpayDetails.
        """
        self.openapi_types = {
            'issuer': str,
            'shopper_email': str,
            'type': str
        }

        self.attribute_map = {
            'issuer': 'issuer',
            'shopper_email': 'shopperEmail',
            'type': 'type'
        }

        self._issuer = issuer
        self._shopper_email = shopper_email
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DragonpayDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DragonpayDetails of this DragonpayDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issuer(self):
        """Gets the issuer of this DragonpayDetails.

        The Dragonpay issuer value of the shopper's selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.

        :return: The issuer of this DragonpayDetails.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this DragonpayDetails.

        The Dragonpay issuer value of the shopper's selected bank. Set this to an **id** of a Dragonpay issuer to preselect it.

        :param issuer: The issuer of this DragonpayDetails.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer

    @property
    def shopper_email(self):
        """Gets the shopper_email of this DragonpayDetails.

        The shopper’s email address.

        :return: The shopper_email of this DragonpayDetails.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this DragonpayDetails.

        The shopper’s email address.

        :param shopper_email: The shopper_email of this DragonpayDetails.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def type(self):
        """Gets the type of this DragonpayDetails.

        **dragonpay**

        :return: The type of this DragonpayDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DragonpayDetails.

        **dragonpay**

        :param type: The type of this DragonpayDetails.
        :type type: str
        """
        allowed_values = ["dragonpay_ebanking", "dragonpay_otc_banking", "dragonpay_otc_non_banking", "dragonpay_otc_philippines"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
