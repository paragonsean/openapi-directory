# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AfterpayDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: str=None, delivery_address: str=None, personal_details: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str='afterpay_default'):
        """AfterpayDetails - a model defined in OpenAPI

        :param billing_address: The billing_address of this AfterpayDetails.
        :param delivery_address: The delivery_address of this AfterpayDetails.
        :param personal_details: The personal_details of this AfterpayDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this AfterpayDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this AfterpayDetails.
        :param type: The type of this AfterpayDetails.
        """
        self.openapi_types = {
            'billing_address': str,
            'delivery_address': str,
            'personal_details': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'delivery_address': 'deliveryAddress',
            'personal_details': 'personalDetails',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type'
        }

        self._billing_address = billing_address
        self._delivery_address = delivery_address
        self._personal_details = personal_details
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AfterpayDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AfterpayDetails of this AfterpayDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this AfterpayDetails.

        The address where to send the invoice.

        :return: The billing_address of this AfterpayDetails.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this AfterpayDetails.

        The address where to send the invoice.

        :param billing_address: The billing_address of this AfterpayDetails.
        :type billing_address: str
        """

        self._billing_address = billing_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this AfterpayDetails.

        The address where the goods should be delivered.

        :return: The delivery_address of this AfterpayDetails.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this AfterpayDetails.

        The address where the goods should be delivered.

        :param delivery_address: The delivery_address of this AfterpayDetails.
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def personal_details(self):
        """Gets the personal_details of this AfterpayDetails.

        Shopper name, date of birth, phone number, and email address.

        :return: The personal_details of this AfterpayDetails.
        :rtype: str
        """
        return self._personal_details

    @personal_details.setter
    def personal_details(self, personal_details):
        """Sets the personal_details of this AfterpayDetails.

        Shopper name, date of birth, phone number, and email address.

        :param personal_details: The personal_details of this AfterpayDetails.
        :type personal_details: str
        """

        self._personal_details = personal_details

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this AfterpayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this AfterpayDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this AfterpayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this AfterpayDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this AfterpayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this AfterpayDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this AfterpayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this AfterpayDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this AfterpayDetails.

        **afterpay_default**

        :return: The type of this AfterpayDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AfterpayDetails.

        **afterpay_default**

        :param type: The type of this AfterpayDetails.
        :type type: str
        """
        allowed_values = ["afterpay_default", "afterpaytouch", "afterpay_b2b", "clearpay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
