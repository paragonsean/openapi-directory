# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplePayDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apple_pay_token: str=None, funding_source: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str='applepay'):
        """ApplePayDetails - a model defined in OpenAPI

        :param apple_pay_token: The apple_pay_token of this ApplePayDetails.
        :param funding_source: The funding_source of this ApplePayDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this ApplePayDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this ApplePayDetails.
        :param type: The type of this ApplePayDetails.
        """
        self.openapi_types = {
            'apple_pay_token': str,
            'funding_source': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str
        }

        self.attribute_map = {
            'apple_pay_token': 'applePayToken',
            'funding_source': 'fundingSource',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type'
        }

        self._apple_pay_token = apple_pay_token
        self._funding_source = funding_source
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApplePayDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApplePayDetails of this ApplePayDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apple_pay_token(self):
        """Gets the apple_pay_token of this ApplePayDetails.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :return: The apple_pay_token of this ApplePayDetails.
        :rtype: str
        """
        return self._apple_pay_token

    @apple_pay_token.setter
    def apple_pay_token(self, apple_pay_token):
        """Sets the apple_pay_token of this ApplePayDetails.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :param apple_pay_token: The apple_pay_token of this ApplePayDetails.
        :type apple_pay_token: str
        """
        if apple_pay_token is None:
            raise ValueError("Invalid value for `apple_pay_token`, must not be `None`")
        if apple_pay_token is not None and len(apple_pay_token) > 10000:
            raise ValueError("Invalid value for `apple_pay_token`, length must be less than or equal to `10000`")

        self._apple_pay_token = apple_pay_token

    @property
    def funding_source(self):
        """Gets the funding_source of this ApplePayDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this ApplePayDetails.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this ApplePayDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this ApplePayDetails.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this ApplePayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this ApplePayDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this ApplePayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this ApplePayDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this ApplePayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this ApplePayDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this ApplePayDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this ApplePayDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this ApplePayDetails.

        **applepay**

        :return: The type of this ApplePayDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ApplePayDetails.

        **applepay**

        :param type: The type of this ApplePayDetails.
        :type type: str
        """
        allowed_values = ["applepay"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
