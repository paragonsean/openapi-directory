# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_info import AccountInfo
from openapi_server.models.amount import Amount
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.balance_check_request_additional_data import BalanceCheckRequestAdditionalData
from openapi_server.models.billing_address import BillingAddress
from openapi_server.models.browser_info import BrowserInfo
from openapi_server.models.company import Company
from openapi_server.models.delivery_address import DeliveryAddress
from openapi_server.models.donation_payment_request_payment_method import DonationPaymentRequestPaymentMethod
from openapi_server.models.encrypted_order_data import EncryptedOrderData
from openapi_server.models.forex_quote import ForexQuote
from openapi_server.models.fund_origin import FundOrigin
from openapi_server.models.fund_recipient import FundRecipient
from openapi_server.models.installments import Installments
from openapi_server.models.line_item import LineItem
from openapi_server.models.mandate import Mandate
from openapi_server.models.merchant_risk_indicator import MerchantRiskIndicator
from openapi_server.models.name import Name
from openapi_server.models.risk_data import RiskData
from openapi_server.models.split import Split
from openapi_server.models.three_ds2_request_fields import ThreeDS2RequestFields
from openapi_server.models.three_d_secure_data import ThreeDSecureData
from openapi_server import util


class DonationPaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_info: AccountInfo=None, additional_amount: Amount=None, additional_data: BalanceCheckRequestAdditionalData=None, allowed_payment_methods: List[str]=None, amount: Amount=None, application_info: ApplicationInfo=None, billing_address: BillingAddress=None, blocked_payment_methods: List[str]=None, browser_info: BrowserInfo=None, capture_delay_hours: int=None, channel: str=None, company: Company=None, conversion_id: str=None, country_code: str=None, date_of_birth: datetime=None, dcc_quote: ForexQuote=None, delivery_address: DeliveryAddress=None, delivery_date: datetime=None, device_fingerprint: str=None, donation_account: str=None, donation_original_psp_reference: str=None, donation_token: str=None, enable_one_click: bool=None, enable_pay_out: bool=None, enable_real_time_update: bool=None, enable_recurring: bool=None, entity_type: str=None, fraud_offset: int=None, fund_origin: FundOrigin=None, fund_recipient: FundRecipient=None, funding_source: str=None, installments: Installments=None, line_items: List[LineItem]=None, mandate: Mandate=None, mcc: str=None, merchant_account: str=None, merchant_order_reference: str=None, merchant_risk_indicator: MerchantRiskIndicator=None, metadata: Dict[str, str]=None, mpi_data: ThreeDSecureData=None, order: EncryptedOrderData=None, order_reference: str=None, origin: str=None, payment_method: DonationPaymentRequestPaymentMethod=None, recurring_expiry: str=None, recurring_frequency: str=None, recurring_processing_model: str=None, redirect_from_issuer_method: str=None, redirect_to_issuer_method: str=None, reference: str=None, return_url: str=None, risk_data: RiskData=None, selected_recurring_detail_reference: str=None, session_validity: str=None, shopper_email: str=None, shopper_ip: str=None, shopper_interaction: str=None, shopper_locale: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, social_security_number: str=None, splits: List[Split]=None, store: str=None, store_payment_method: bool=None, telephone_number: str=None, three_ds2_request_data: ThreeDS2RequestFields=None, three_ds_authentication_only: bool=False, trusted_shopper: bool=None):
        """DonationPaymentRequest - a model defined in OpenAPI

        :param account_info: The account_info of this DonationPaymentRequest.
        :param additional_amount: The additional_amount of this DonationPaymentRequest.
        :param additional_data: The additional_data of this DonationPaymentRequest.
        :param allowed_payment_methods: The allowed_payment_methods of this DonationPaymentRequest.
        :param amount: The amount of this DonationPaymentRequest.
        :param application_info: The application_info of this DonationPaymentRequest.
        :param billing_address: The billing_address of this DonationPaymentRequest.
        :param blocked_payment_methods: The blocked_payment_methods of this DonationPaymentRequest.
        :param browser_info: The browser_info of this DonationPaymentRequest.
        :param capture_delay_hours: The capture_delay_hours of this DonationPaymentRequest.
        :param channel: The channel of this DonationPaymentRequest.
        :param company: The company of this DonationPaymentRequest.
        :param conversion_id: The conversion_id of this DonationPaymentRequest.
        :param country_code: The country_code of this DonationPaymentRequest.
        :param date_of_birth: The date_of_birth of this DonationPaymentRequest.
        :param dcc_quote: The dcc_quote of this DonationPaymentRequest.
        :param delivery_address: The delivery_address of this DonationPaymentRequest.
        :param delivery_date: The delivery_date of this DonationPaymentRequest.
        :param device_fingerprint: The device_fingerprint of this DonationPaymentRequest.
        :param donation_account: The donation_account of this DonationPaymentRequest.
        :param donation_original_psp_reference: The donation_original_psp_reference of this DonationPaymentRequest.
        :param donation_token: The donation_token of this DonationPaymentRequest.
        :param enable_one_click: The enable_one_click of this DonationPaymentRequest.
        :param enable_pay_out: The enable_pay_out of this DonationPaymentRequest.
        :param enable_real_time_update: The enable_real_time_update of this DonationPaymentRequest.
        :param enable_recurring: The enable_recurring of this DonationPaymentRequest.
        :param entity_type: The entity_type of this DonationPaymentRequest.
        :param fraud_offset: The fraud_offset of this DonationPaymentRequest.
        :param fund_origin: The fund_origin of this DonationPaymentRequest.
        :param fund_recipient: The fund_recipient of this DonationPaymentRequest.
        :param funding_source: The funding_source of this DonationPaymentRequest.
        :param installments: The installments of this DonationPaymentRequest.
        :param line_items: The line_items of this DonationPaymentRequest.
        :param mandate: The mandate of this DonationPaymentRequest.
        :param mcc: The mcc of this DonationPaymentRequest.
        :param merchant_account: The merchant_account of this DonationPaymentRequest.
        :param merchant_order_reference: The merchant_order_reference of this DonationPaymentRequest.
        :param merchant_risk_indicator: The merchant_risk_indicator of this DonationPaymentRequest.
        :param metadata: The metadata of this DonationPaymentRequest.
        :param mpi_data: The mpi_data of this DonationPaymentRequest.
        :param order: The order of this DonationPaymentRequest.
        :param order_reference: The order_reference of this DonationPaymentRequest.
        :param origin: The origin of this DonationPaymentRequest.
        :param payment_method: The payment_method of this DonationPaymentRequest.
        :param recurring_expiry: The recurring_expiry of this DonationPaymentRequest.
        :param recurring_frequency: The recurring_frequency of this DonationPaymentRequest.
        :param recurring_processing_model: The recurring_processing_model of this DonationPaymentRequest.
        :param redirect_from_issuer_method: The redirect_from_issuer_method of this DonationPaymentRequest.
        :param redirect_to_issuer_method: The redirect_to_issuer_method of this DonationPaymentRequest.
        :param reference: The reference of this DonationPaymentRequest.
        :param return_url: The return_url of this DonationPaymentRequest.
        :param risk_data: The risk_data of this DonationPaymentRequest.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this DonationPaymentRequest.
        :param session_validity: The session_validity of this DonationPaymentRequest.
        :param shopper_email: The shopper_email of this DonationPaymentRequest.
        :param shopper_ip: The shopper_ip of this DonationPaymentRequest.
        :param shopper_interaction: The shopper_interaction of this DonationPaymentRequest.
        :param shopper_locale: The shopper_locale of this DonationPaymentRequest.
        :param shopper_name: The shopper_name of this DonationPaymentRequest.
        :param shopper_reference: The shopper_reference of this DonationPaymentRequest.
        :param shopper_statement: The shopper_statement of this DonationPaymentRequest.
        :param social_security_number: The social_security_number of this DonationPaymentRequest.
        :param splits: The splits of this DonationPaymentRequest.
        :param store: The store of this DonationPaymentRequest.
        :param store_payment_method: The store_payment_method of this DonationPaymentRequest.
        :param telephone_number: The telephone_number of this DonationPaymentRequest.
        :param three_ds2_request_data: The three_ds2_request_data of this DonationPaymentRequest.
        :param three_ds_authentication_only: The three_ds_authentication_only of this DonationPaymentRequest.
        :param trusted_shopper: The trusted_shopper of this DonationPaymentRequest.
        """
        self.openapi_types = {
            'account_info': AccountInfo,
            'additional_amount': Amount,
            'additional_data': BalanceCheckRequestAdditionalData,
            'allowed_payment_methods': List[str],
            'amount': Amount,
            'application_info': ApplicationInfo,
            'billing_address': BillingAddress,
            'blocked_payment_methods': List[str],
            'browser_info': BrowserInfo,
            'capture_delay_hours': int,
            'channel': str,
            'company': Company,
            'conversion_id': str,
            'country_code': str,
            'date_of_birth': datetime,
            'dcc_quote': ForexQuote,
            'delivery_address': DeliveryAddress,
            'delivery_date': datetime,
            'device_fingerprint': str,
            'donation_account': str,
            'donation_original_psp_reference': str,
            'donation_token': str,
            'enable_one_click': bool,
            'enable_pay_out': bool,
            'enable_real_time_update': bool,
            'enable_recurring': bool,
            'entity_type': str,
            'fraud_offset': int,
            'fund_origin': FundOrigin,
            'fund_recipient': FundRecipient,
            'funding_source': str,
            'installments': Installments,
            'line_items': List[LineItem],
            'mandate': Mandate,
            'mcc': str,
            'merchant_account': str,
            'merchant_order_reference': str,
            'merchant_risk_indicator': MerchantRiskIndicator,
            'metadata': Dict[str, str],
            'mpi_data': ThreeDSecureData,
            'order': EncryptedOrderData,
            'order_reference': str,
            'origin': str,
            'payment_method': DonationPaymentRequestPaymentMethod,
            'recurring_expiry': str,
            'recurring_frequency': str,
            'recurring_processing_model': str,
            'redirect_from_issuer_method': str,
            'redirect_to_issuer_method': str,
            'reference': str,
            'return_url': str,
            'risk_data': RiskData,
            'selected_recurring_detail_reference': str,
            'session_validity': str,
            'shopper_email': str,
            'shopper_ip': str,
            'shopper_interaction': str,
            'shopper_locale': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'social_security_number': str,
            'splits': List[Split],
            'store': str,
            'store_payment_method': bool,
            'telephone_number': str,
            'three_ds2_request_data': ThreeDS2RequestFields,
            'three_ds_authentication_only': bool,
            'trusted_shopper': bool
        }

        self.attribute_map = {
            'account_info': 'accountInfo',
            'additional_amount': 'additionalAmount',
            'additional_data': 'additionalData',
            'allowed_payment_methods': 'allowedPaymentMethods',
            'amount': 'amount',
            'application_info': 'applicationInfo',
            'billing_address': 'billingAddress',
            'blocked_payment_methods': 'blockedPaymentMethods',
            'browser_info': 'browserInfo',
            'capture_delay_hours': 'captureDelayHours',
            'channel': 'channel',
            'company': 'company',
            'conversion_id': 'conversionId',
            'country_code': 'countryCode',
            'date_of_birth': 'dateOfBirth',
            'dcc_quote': 'dccQuote',
            'delivery_address': 'deliveryAddress',
            'delivery_date': 'deliveryDate',
            'device_fingerprint': 'deviceFingerprint',
            'donation_account': 'donationAccount',
            'donation_original_psp_reference': 'donationOriginalPspReference',
            'donation_token': 'donationToken',
            'enable_one_click': 'enableOneClick',
            'enable_pay_out': 'enablePayOut',
            'enable_real_time_update': 'enableRealTimeUpdate',
            'enable_recurring': 'enableRecurring',
            'entity_type': 'entityType',
            'fraud_offset': 'fraudOffset',
            'fund_origin': 'fundOrigin',
            'fund_recipient': 'fundRecipient',
            'funding_source': 'fundingSource',
            'installments': 'installments',
            'line_items': 'lineItems',
            'mandate': 'mandate',
            'mcc': 'mcc',
            'merchant_account': 'merchantAccount',
            'merchant_order_reference': 'merchantOrderReference',
            'merchant_risk_indicator': 'merchantRiskIndicator',
            'metadata': 'metadata',
            'mpi_data': 'mpiData',
            'order': 'order',
            'order_reference': 'orderReference',
            'origin': 'origin',
            'payment_method': 'paymentMethod',
            'recurring_expiry': 'recurringExpiry',
            'recurring_frequency': 'recurringFrequency',
            'recurring_processing_model': 'recurringProcessingModel',
            'redirect_from_issuer_method': 'redirectFromIssuerMethod',
            'redirect_to_issuer_method': 'redirectToIssuerMethod',
            'reference': 'reference',
            'return_url': 'returnUrl',
            'risk_data': 'riskData',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'session_validity': 'sessionValidity',
            'shopper_email': 'shopperEmail',
            'shopper_ip': 'shopperIP',
            'shopper_interaction': 'shopperInteraction',
            'shopper_locale': 'shopperLocale',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'social_security_number': 'socialSecurityNumber',
            'splits': 'splits',
            'store': 'store',
            'store_payment_method': 'storePaymentMethod',
            'telephone_number': 'telephoneNumber',
            'three_ds2_request_data': 'threeDS2RequestData',
            'three_ds_authentication_only': 'threeDSAuthenticationOnly',
            'trusted_shopper': 'trustedShopper'
        }

        self._account_info = account_info
        self._additional_amount = additional_amount
        self._additional_data = additional_data
        self._allowed_payment_methods = allowed_payment_methods
        self._amount = amount
        self._application_info = application_info
        self._billing_address = billing_address
        self._blocked_payment_methods = blocked_payment_methods
        self._browser_info = browser_info
        self._capture_delay_hours = capture_delay_hours
        self._channel = channel
        self._company = company
        self._conversion_id = conversion_id
        self._country_code = country_code
        self._date_of_birth = date_of_birth
        self._dcc_quote = dcc_quote
        self._delivery_address = delivery_address
        self._delivery_date = delivery_date
        self._device_fingerprint = device_fingerprint
        self._donation_account = donation_account
        self._donation_original_psp_reference = donation_original_psp_reference
        self._donation_token = donation_token
        self._enable_one_click = enable_one_click
        self._enable_pay_out = enable_pay_out
        self._enable_real_time_update = enable_real_time_update
        self._enable_recurring = enable_recurring
        self._entity_type = entity_type
        self._fraud_offset = fraud_offset
        self._fund_origin = fund_origin
        self._fund_recipient = fund_recipient
        self._funding_source = funding_source
        self._installments = installments
        self._line_items = line_items
        self._mandate = mandate
        self._mcc = mcc
        self._merchant_account = merchant_account
        self._merchant_order_reference = merchant_order_reference
        self._merchant_risk_indicator = merchant_risk_indicator
        self._metadata = metadata
        self._mpi_data = mpi_data
        self._order = order
        self._order_reference = order_reference
        self._origin = origin
        self._payment_method = payment_method
        self._recurring_expiry = recurring_expiry
        self._recurring_frequency = recurring_frequency
        self._recurring_processing_model = recurring_processing_model
        self._redirect_from_issuer_method = redirect_from_issuer_method
        self._redirect_to_issuer_method = redirect_to_issuer_method
        self._reference = reference
        self._return_url = return_url
        self._risk_data = risk_data
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._session_validity = session_validity
        self._shopper_email = shopper_email
        self._shopper_ip = shopper_ip
        self._shopper_interaction = shopper_interaction
        self._shopper_locale = shopper_locale
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._social_security_number = social_security_number
        self._splits = splits
        self._store = store
        self._store_payment_method = store_payment_method
        self._telephone_number = telephone_number
        self._three_ds2_request_data = three_ds2_request_data
        self._three_ds_authentication_only = three_ds_authentication_only
        self._trusted_shopper = trusted_shopper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DonationPaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DonationPaymentRequest of this DonationPaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_info(self):
        """Gets the account_info of this DonationPaymentRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :return: The account_info of this DonationPaymentRequest.
        :rtype: AccountInfo
        """
        return self._account_info

    @account_info.setter
    def account_info(self, account_info):
        """Sets the account_info of this DonationPaymentRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :param account_info: The account_info of this DonationPaymentRequest.
        :type account_info: AccountInfo
        """

        self._account_info = account_info

    @property
    def additional_amount(self):
        """Gets the additional_amount of this DonationPaymentRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :return: The additional_amount of this DonationPaymentRequest.
        :rtype: Amount
        """
        return self._additional_amount

    @additional_amount.setter
    def additional_amount(self, additional_amount):
        """Sets the additional_amount of this DonationPaymentRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :param additional_amount: The additional_amount of this DonationPaymentRequest.
        :type additional_amount: Amount
        """

        self._additional_amount = additional_amount

    @property
    def additional_data(self):
        """Gets the additional_data of this DonationPaymentRequest.


        :return: The additional_data of this DonationPaymentRequest.
        :rtype: BalanceCheckRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this DonationPaymentRequest.


        :param additional_data: The additional_data of this DonationPaymentRequest.
        :type additional_data: BalanceCheckRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def allowed_payment_methods(self):
        """Gets the allowed_payment_methods of this DonationPaymentRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The allowed_payment_methods of this DonationPaymentRequest.
        :rtype: List[str]
        """
        return self._allowed_payment_methods

    @allowed_payment_methods.setter
    def allowed_payment_methods(self, allowed_payment_methods):
        """Sets the allowed_payment_methods of this DonationPaymentRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param allowed_payment_methods: The allowed_payment_methods of this DonationPaymentRequest.
        :type allowed_payment_methods: List[str]
        """

        self._allowed_payment_methods = allowed_payment_methods

    @property
    def amount(self):
        """Gets the amount of this DonationPaymentRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :return: The amount of this DonationPaymentRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DonationPaymentRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :param amount: The amount of this DonationPaymentRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def application_info(self):
        """Gets the application_info of this DonationPaymentRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :return: The application_info of this DonationPaymentRequest.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this DonationPaymentRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :param application_info: The application_info of this DonationPaymentRequest.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def billing_address(self):
        """Gets the billing_address of this DonationPaymentRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :return: The billing_address of this DonationPaymentRequest.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this DonationPaymentRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :param billing_address: The billing_address of this DonationPaymentRequest.
        :type billing_address: BillingAddress
        """

        self._billing_address = billing_address

    @property
    def blocked_payment_methods(self):
        """Gets the blocked_payment_methods of this DonationPaymentRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The blocked_payment_methods of this DonationPaymentRequest.
        :rtype: List[str]
        """
        return self._blocked_payment_methods

    @blocked_payment_methods.setter
    def blocked_payment_methods(self, blocked_payment_methods):
        """Sets the blocked_payment_methods of this DonationPaymentRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param blocked_payment_methods: The blocked_payment_methods of this DonationPaymentRequest.
        :type blocked_payment_methods: List[str]
        """

        self._blocked_payment_methods = blocked_payment_methods

    @property
    def browser_info(self):
        """Gets the browser_info of this DonationPaymentRequest.

        The shopper's browser information. > For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.

        :return: The browser_info of this DonationPaymentRequest.
        :rtype: BrowserInfo
        """
        return self._browser_info

    @browser_info.setter
    def browser_info(self, browser_info):
        """Sets the browser_info of this DonationPaymentRequest.

        The shopper's browser information. > For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.

        :param browser_info: The browser_info of this DonationPaymentRequest.
        :type browser_info: BrowserInfo
        """

        self._browser_info = browser_info

    @property
    def capture_delay_hours(self):
        """Gets the capture_delay_hours of this DonationPaymentRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :return: The capture_delay_hours of this DonationPaymentRequest.
        :rtype: int
        """
        return self._capture_delay_hours

    @capture_delay_hours.setter
    def capture_delay_hours(self, capture_delay_hours):
        """Sets the capture_delay_hours of this DonationPaymentRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :param capture_delay_hours: The capture_delay_hours of this DonationPaymentRequest.
        :type capture_delay_hours: int
        """

        self._capture_delay_hours = capture_delay_hours

    @property
    def channel(self):
        """Gets the channel of this DonationPaymentRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web

        :return: The channel of this DonationPaymentRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this DonationPaymentRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web

        :param channel: The channel of this DonationPaymentRequest.
        :type channel: str
        """
        allowed_values = ["iOS", "Android", "Web"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def company(self):
        """Gets the company of this DonationPaymentRequest.

        Information regarding the company.

        :return: The company of this DonationPaymentRequest.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this DonationPaymentRequest.

        Information regarding the company.

        :param company: The company of this DonationPaymentRequest.
        :type company: Company
        """

        self._company = company

    @property
    def conversion_id(self):
        """Gets the conversion_id of this DonationPaymentRequest.

        Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.

        :return: The conversion_id of this DonationPaymentRequest.
        :rtype: str
        """
        return self._conversion_id

    @conversion_id.setter
    def conversion_id(self, conversion_id):
        """Sets the conversion_id of this DonationPaymentRequest.

        Conversion ID that corresponds to the Id generated by the client SDK for tracking user payment journey.

        :param conversion_id: The conversion_id of this DonationPaymentRequest.
        :type conversion_id: str
        """

        self._conversion_id = conversion_id

    @property
    def country_code(self):
        """Gets the country_code of this DonationPaymentRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :return: The country_code of this DonationPaymentRequest.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this DonationPaymentRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :param country_code: The country_code of this DonationPaymentRequest.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this DonationPaymentRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :return: The date_of_birth of this DonationPaymentRequest.
        :rtype: datetime
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this DonationPaymentRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :param date_of_birth: The date_of_birth of this DonationPaymentRequest.
        :type date_of_birth: datetime
        """

        self._date_of_birth = date_of_birth

    @property
    def dcc_quote(self):
        """Gets the dcc_quote of this DonationPaymentRequest.

        The forex quote as returned in the response of the forex service.

        :return: The dcc_quote of this DonationPaymentRequest.
        :rtype: ForexQuote
        """
        return self._dcc_quote

    @dcc_quote.setter
    def dcc_quote(self, dcc_quote):
        """Sets the dcc_quote of this DonationPaymentRequest.

        The forex quote as returned in the response of the forex service.

        :param dcc_quote: The dcc_quote of this DonationPaymentRequest.
        :type dcc_quote: ForexQuote
        """

        self._dcc_quote = dcc_quote

    @property
    def delivery_address(self):
        """Gets the delivery_address of this DonationPaymentRequest.

        The address where the purchased goods should be delivered.

        :return: The delivery_address of this DonationPaymentRequest.
        :rtype: DeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this DonationPaymentRequest.

        The address where the purchased goods should be delivered.

        :param delivery_address: The delivery_address of this DonationPaymentRequest.
        :type delivery_address: DeliveryAddress
        """

        self._delivery_address = delivery_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this DonationPaymentRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :return: The delivery_date of this DonationPaymentRequest.
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this DonationPaymentRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :param delivery_date: The delivery_date of this DonationPaymentRequest.
        :type delivery_date: datetime
        """

        self._delivery_date = delivery_date

    @property
    def device_fingerprint(self):
        """Gets the device_fingerprint of this DonationPaymentRequest.

        A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).

        :return: The device_fingerprint of this DonationPaymentRequest.
        :rtype: str
        """
        return self._device_fingerprint

    @device_fingerprint.setter
    def device_fingerprint(self, device_fingerprint):
        """Sets the device_fingerprint of this DonationPaymentRequest.

        A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).

        :param device_fingerprint: The device_fingerprint of this DonationPaymentRequest.
        :type device_fingerprint: str
        """
        if device_fingerprint is not None and len(device_fingerprint) > 5000:
            raise ValueError("Invalid value for `device_fingerprint`, length must be less than or equal to `5000`")

        self._device_fingerprint = device_fingerprint

    @property
    def donation_account(self):
        """Gets the donation_account of this DonationPaymentRequest.

        Donation account to which the transaction is credited.

        :return: The donation_account of this DonationPaymentRequest.
        :rtype: str
        """
        return self._donation_account

    @donation_account.setter
    def donation_account(self, donation_account):
        """Sets the donation_account of this DonationPaymentRequest.

        Donation account to which the transaction is credited.

        :param donation_account: The donation_account of this DonationPaymentRequest.
        :type donation_account: str
        """

        self._donation_account = donation_account

    @property
    def donation_original_psp_reference(self):
        """Gets the donation_original_psp_reference of this DonationPaymentRequest.

        PSP reference of the transaction from which the donation token is generated. Required when `donationToken` is provided.

        :return: The donation_original_psp_reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._donation_original_psp_reference

    @donation_original_psp_reference.setter
    def donation_original_psp_reference(self, donation_original_psp_reference):
        """Sets the donation_original_psp_reference of this DonationPaymentRequest.

        PSP reference of the transaction from which the donation token is generated. Required when `donationToken` is provided.

        :param donation_original_psp_reference: The donation_original_psp_reference of this DonationPaymentRequest.
        :type donation_original_psp_reference: str
        """

        self._donation_original_psp_reference = donation_original_psp_reference

    @property
    def donation_token(self):
        """Gets the donation_token of this DonationPaymentRequest.

        Donation token received in the `/payments` call.

        :return: The donation_token of this DonationPaymentRequest.
        :rtype: str
        """
        return self._donation_token

    @donation_token.setter
    def donation_token(self, donation_token):
        """Sets the donation_token of this DonationPaymentRequest.

        Donation token received in the `/payments` call.

        :param donation_token: The donation_token of this DonationPaymentRequest.
        :type donation_token: str
        """

        self._donation_token = donation_token

    @property
    def enable_one_click(self):
        """Gets the enable_one_click of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :return: The enable_one_click of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._enable_one_click

    @enable_one_click.setter
    def enable_one_click(self, enable_one_click):
        """Sets the enable_one_click of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :param enable_one_click: The enable_one_click of this DonationPaymentRequest.
        :type enable_one_click: bool
        """

        self._enable_one_click = enable_one_click

    @property
    def enable_pay_out(self):
        """Gets the enable_pay_out of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :return: The enable_pay_out of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._enable_pay_out

    @enable_pay_out.setter
    def enable_pay_out(self, enable_pay_out):
        """Sets the enable_pay_out of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :param enable_pay_out: The enable_pay_out of this DonationPaymentRequest.
        :type enable_pay_out: bool
        """

        self._enable_pay_out = enable_pay_out

    @property
    def enable_real_time_update(self):
        """Gets the enable_real_time_update of this DonationPaymentRequest.

        Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.

        :return: The enable_real_time_update of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._enable_real_time_update

    @enable_real_time_update.setter
    def enable_real_time_update(self, enable_real_time_update):
        """Sets the enable_real_time_update of this DonationPaymentRequest.

        Choose if a specific transaction should use the Real-time Account Updater, regardless of other settings.

        :param enable_real_time_update: The enable_real_time_update of this DonationPaymentRequest.
        :type enable_real_time_update: bool
        """

        self._enable_real_time_update = enable_real_time_update

    @property
    def enable_recurring(self):
        """Gets the enable_recurring of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :return: The enable_recurring of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._enable_recurring

    @enable_recurring.setter
    def enable_recurring(self, enable_recurring):
        """Sets the enable_recurring of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :param enable_recurring: The enable_recurring of this DonationPaymentRequest.
        :type enable_recurring: bool
        """

        self._enable_recurring = enable_recurring

    @property
    def entity_type(self):
        """Gets the entity_type of this DonationPaymentRequest.

        The type of the entity the payment is processed for.

        :return: The entity_type of this DonationPaymentRequest.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this DonationPaymentRequest.

        The type of the entity the payment is processed for.

        :param entity_type: The entity_type of this DonationPaymentRequest.
        :type entity_type: str
        """
        allowed_values = ["NaturalPerson", "CompanyName"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this DonationPaymentRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this DonationPaymentRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this DonationPaymentRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this DonationPaymentRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def fund_origin(self):
        """Gets the fund_origin of this DonationPaymentRequest.

        The person or entity funding the money.

        :return: The fund_origin of this DonationPaymentRequest.
        :rtype: FundOrigin
        """
        return self._fund_origin

    @fund_origin.setter
    def fund_origin(self, fund_origin):
        """Sets the fund_origin of this DonationPaymentRequest.

        The person or entity funding the money.

        :param fund_origin: The fund_origin of this DonationPaymentRequest.
        :type fund_origin: FundOrigin
        """

        self._fund_origin = fund_origin

    @property
    def fund_recipient(self):
        """Gets the fund_recipient of this DonationPaymentRequest.

        the person or entity receiving the money

        :return: The fund_recipient of this DonationPaymentRequest.
        :rtype: FundRecipient
        """
        return self._fund_recipient

    @fund_recipient.setter
    def fund_recipient(self, fund_recipient):
        """Sets the fund_recipient of this DonationPaymentRequest.

        the person or entity receiving the money

        :param fund_recipient: The fund_recipient of this DonationPaymentRequest.
        :type fund_recipient: FundRecipient
        """

        self._fund_recipient = fund_recipient

    @property
    def funding_source(self):
        """Gets the funding_source of this DonationPaymentRequest.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this DonationPaymentRequest.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this DonationPaymentRequest.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this DonationPaymentRequest.
        :type funding_source: str
        """
        allowed_values = ["debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def installments(self):
        """Gets the installments of this DonationPaymentRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :return: The installments of this DonationPaymentRequest.
        :rtype: Installments
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this DonationPaymentRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :param installments: The installments of this DonationPaymentRequest.
        :type installments: Installments
        """

        self._installments = installments

    @property
    def line_items(self):
        """Gets the line_items of this DonationPaymentRequest.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.

        :return: The line_items of this DonationPaymentRequest.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this DonationPaymentRequest.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.

        :param line_items: The line_items of this DonationPaymentRequest.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def mandate(self):
        """Gets the mandate of this DonationPaymentRequest.

        The mandate details to initiate recurring transaction.

        :return: The mandate of this DonationPaymentRequest.
        :rtype: Mandate
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """Sets the mandate of this DonationPaymentRequest.

        The mandate details to initiate recurring transaction.

        :param mandate: The mandate of this DonationPaymentRequest.
        :type mandate: Mandate
        """

        self._mandate = mandate

    @property
    def mcc(self):
        """Gets the mcc of this DonationPaymentRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :return: The mcc of this DonationPaymentRequest.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this DonationPaymentRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :param mcc: The mcc of this DonationPaymentRequest.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DonationPaymentRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this DonationPaymentRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DonationPaymentRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this DonationPaymentRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_order_reference(self):
        """Gets the merchant_order_reference of this DonationPaymentRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :return: The merchant_order_reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._merchant_order_reference

    @merchant_order_reference.setter
    def merchant_order_reference(self, merchant_order_reference):
        """Sets the merchant_order_reference of this DonationPaymentRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :param merchant_order_reference: The merchant_order_reference of this DonationPaymentRequest.
        :type merchant_order_reference: str
        """

        self._merchant_order_reference = merchant_order_reference

    @property
    def merchant_risk_indicator(self):
        """Gets the merchant_risk_indicator of this DonationPaymentRequest.

        Additional risk fields for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :return: The merchant_risk_indicator of this DonationPaymentRequest.
        :rtype: MerchantRiskIndicator
        """
        return self._merchant_risk_indicator

    @merchant_risk_indicator.setter
    def merchant_risk_indicator(self, merchant_risk_indicator):
        """Sets the merchant_risk_indicator of this DonationPaymentRequest.

        Additional risk fields for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :param merchant_risk_indicator: The merchant_risk_indicator of this DonationPaymentRequest.
        :type merchant_risk_indicator: MerchantRiskIndicator
        """

        self._merchant_risk_indicator = merchant_risk_indicator

    @property
    def metadata(self):
        """Gets the metadata of this DonationPaymentRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :return: The metadata of this DonationPaymentRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DonationPaymentRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :param metadata: The metadata of this DonationPaymentRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def mpi_data(self):
        """Gets the mpi_data of this DonationPaymentRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :return: The mpi_data of this DonationPaymentRequest.
        :rtype: ThreeDSecureData
        """
        return self._mpi_data

    @mpi_data.setter
    def mpi_data(self, mpi_data):
        """Sets the mpi_data of this DonationPaymentRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :param mpi_data: The mpi_data of this DonationPaymentRequest.
        :type mpi_data: ThreeDSecureData
        """

        self._mpi_data = mpi_data

    @property
    def order(self):
        """Gets the order of this DonationPaymentRequest.

        The order information required for partial payments.

        :return: The order of this DonationPaymentRequest.
        :rtype: EncryptedOrderData
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this DonationPaymentRequest.

        The order information required for partial payments.

        :param order: The order of this DonationPaymentRequest.
        :type order: EncryptedOrderData
        """

        self._order = order

    @property
    def order_reference(self):
        """Gets the order_reference of this DonationPaymentRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :return: The order_reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this DonationPaymentRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :param order_reference: The order_reference of this DonationPaymentRequest.
        :type order_reference: str
        """

        self._order_reference = order_reference

    @property
    def origin(self):
        """Gets the origin of this DonationPaymentRequest.

        Required for the 3D Secure 2 `channel` **Web** integration.  Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.

        :return: The origin of this DonationPaymentRequest.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this DonationPaymentRequest.

        Required for the 3D Secure 2 `channel` **Web** integration.  Set this parameter to the origin URL of the page that you are loading the 3D Secure Component from.

        :param origin: The origin of this DonationPaymentRequest.
        :type origin: str
        """
        if origin is not None and len(origin) > 80:
            raise ValueError("Invalid value for `origin`, length must be less than or equal to `80`")

        self._origin = origin

    @property
    def payment_method(self):
        """Gets the payment_method of this DonationPaymentRequest.


        :return: The payment_method of this DonationPaymentRequest.
        :rtype: DonationPaymentRequestPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this DonationPaymentRequest.


        :param payment_method: The payment_method of this DonationPaymentRequest.
        :type payment_method: DonationPaymentRequestPaymentMethod
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def recurring_expiry(self):
        """Gets the recurring_expiry of this DonationPaymentRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :return: The recurring_expiry of this DonationPaymentRequest.
        :rtype: str
        """
        return self._recurring_expiry

    @recurring_expiry.setter
    def recurring_expiry(self, recurring_expiry):
        """Sets the recurring_expiry of this DonationPaymentRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :param recurring_expiry: The recurring_expiry of this DonationPaymentRequest.
        :type recurring_expiry: str
        """

        self._recurring_expiry = recurring_expiry

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this DonationPaymentRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :return: The recurring_frequency of this DonationPaymentRequest.
        :rtype: str
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this DonationPaymentRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :param recurring_frequency: The recurring_frequency of this DonationPaymentRequest.
        :type recurring_frequency: str
        """

        self._recurring_frequency = recurring_frequency

    @property
    def recurring_processing_model(self):
        """Gets the recurring_processing_model of this DonationPaymentRequest.

        Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :return: The recurring_processing_model of this DonationPaymentRequest.
        :rtype: str
        """
        return self._recurring_processing_model

    @recurring_processing_model.setter
    def recurring_processing_model(self, recurring_processing_model):
        """Sets the recurring_processing_model of this DonationPaymentRequest.

        Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :param recurring_processing_model: The recurring_processing_model of this DonationPaymentRequest.
        :type recurring_processing_model: str
        """
        allowed_values = ["CardOnFile", "Subscription", "UnscheduledCardOnFile"]  # noqa: E501
        if recurring_processing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recurring_processing_model` ({0}), must be one of {1}"
                .format(recurring_processing_model, allowed_values)
            )

        self._recurring_processing_model = recurring_processing_model

    @property
    def redirect_from_issuer_method(self):
        """Gets the redirect_from_issuer_method of this DonationPaymentRequest.

        Specifies the redirect method (GET or POST) when redirecting back from the issuer.

        :return: The redirect_from_issuer_method of this DonationPaymentRequest.
        :rtype: str
        """
        return self._redirect_from_issuer_method

    @redirect_from_issuer_method.setter
    def redirect_from_issuer_method(self, redirect_from_issuer_method):
        """Sets the redirect_from_issuer_method of this DonationPaymentRequest.

        Specifies the redirect method (GET or POST) when redirecting back from the issuer.

        :param redirect_from_issuer_method: The redirect_from_issuer_method of this DonationPaymentRequest.
        :type redirect_from_issuer_method: str
        """

        self._redirect_from_issuer_method = redirect_from_issuer_method

    @property
    def redirect_to_issuer_method(self):
        """Gets the redirect_to_issuer_method of this DonationPaymentRequest.

        Specifies the redirect method (GET or POST) when redirecting to the issuer.

        :return: The redirect_to_issuer_method of this DonationPaymentRequest.
        :rtype: str
        """
        return self._redirect_to_issuer_method

    @redirect_to_issuer_method.setter
    def redirect_to_issuer_method(self, redirect_to_issuer_method):
        """Sets the redirect_to_issuer_method of this DonationPaymentRequest.

        Specifies the redirect method (GET or POST) when redirecting to the issuer.

        :param redirect_to_issuer_method: The redirect_to_issuer_method of this DonationPaymentRequest.
        :type redirect_to_issuer_method: str
        """

        self._redirect_to_issuer_method = redirect_to_issuer_method

    @property
    def reference(self):
        """Gets the reference of this DonationPaymentRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this DonationPaymentRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this DonationPaymentRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def return_url(self):
        """Gets the return_url of this DonationPaymentRequest.

        The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`

        :return: The return_url of this DonationPaymentRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this DonationPaymentRequest.

        The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`

        :param return_url: The return_url of this DonationPaymentRequest.
        :type return_url: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")
        if return_url is not None and len(return_url) > 8000:
            raise ValueError("Invalid value for `return_url`, length must be less than or equal to `8000`")

        self._return_url = return_url

    @property
    def risk_data(self):
        """Gets the risk_data of this DonationPaymentRequest.

        Contains risk data, such as client-side data, used to identify risk for a transaction.

        :return: The risk_data of this DonationPaymentRequest.
        :rtype: RiskData
        """
        return self._risk_data

    @risk_data.setter
    def risk_data(self, risk_data):
        """Sets the risk_data of this DonationPaymentRequest.

        Contains risk data, such as client-side data, used to identify risk for a transaction.

        :param risk_data: The risk_data of this DonationPaymentRequest.
        :type risk_data: RiskData
        """

        self._risk_data = risk_data

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this DonationPaymentRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :return: The selected_recurring_detail_reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this DonationPaymentRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this DonationPaymentRequest.
        :type selected_recurring_detail_reference: str
        """

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def session_validity(self):
        """Gets the session_validity of this DonationPaymentRequest.

        The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00

        :return: The session_validity of this DonationPaymentRequest.
        :rtype: str
        """
        return self._session_validity

    @session_validity.setter
    def session_validity(self, session_validity):
        """Sets the session_validity of this DonationPaymentRequest.

        The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00

        :param session_validity: The session_validity of this DonationPaymentRequest.
        :type session_validity: str
        """

        self._session_validity = session_validity

    @property
    def shopper_email(self):
        """Gets the shopper_email of this DonationPaymentRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :return: The shopper_email of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this DonationPaymentRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :param shopper_email: The shopper_email of this DonationPaymentRequest.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_ip(self):
        """Gets the shopper_ip of this DonationPaymentRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The shopper_ip of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_ip

    @shopper_ip.setter
    def shopper_ip(self, shopper_ip):
        """Sets the shopper_ip of this DonationPaymentRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param shopper_ip: The shopper_ip of this DonationPaymentRequest.
        :type shopper_ip: str
        """

        self._shopper_ip = shopper_ip

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this DonationPaymentRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this DonationPaymentRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this DonationPaymentRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this DonationPaymentRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :return: The shopper_locale of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this DonationPaymentRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :param shopper_locale: The shopper_locale of this DonationPaymentRequest.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_name(self):
        """Gets the shopper_name of this DonationPaymentRequest.

        The shopper's full name.

        :return: The shopper_name of this DonationPaymentRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this DonationPaymentRequest.

        The shopper's full name.

        :param shopper_name: The shopper_name of this DonationPaymentRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this DonationPaymentRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this DonationPaymentRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this DonationPaymentRequest.
        :type shopper_reference: str
        """
        if shopper_reference is not None and len(shopper_reference) > 256:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `256`")
        if shopper_reference is not None and len(shopper_reference) < 3:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `3`")

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this DonationPaymentRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :return: The shopper_statement of this DonationPaymentRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this DonationPaymentRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :param shopper_statement: The shopper_statement of this DonationPaymentRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def social_security_number(self):
        """Gets the social_security_number of this DonationPaymentRequest.

        The shopper's social security number.

        :return: The social_security_number of this DonationPaymentRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this DonationPaymentRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this DonationPaymentRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def splits(self):
        """Gets the splits of this DonationPaymentRequest.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :return: The splits of this DonationPaymentRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this DonationPaymentRequest.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :param splits: The splits of this DonationPaymentRequest.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def store(self):
        """Gets the store of this DonationPaymentRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :return: The store of this DonationPaymentRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this DonationPaymentRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :param store: The store of this DonationPaymentRequest.
        :type store: str
        """
        if store is not None and len(store) > 16:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `16`")
        if store is not None and len(store) < 1:
            raise ValueError("Invalid value for `store`, length must be greater than or equal to `1`")

        self._store = store

    @property
    def store_payment_method(self):
        """Gets the store_payment_method of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be stored.

        :return: The store_payment_method of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._store_payment_method

    @store_payment_method.setter
    def store_payment_method(self, store_payment_method):
        """Sets the store_payment_method of this DonationPaymentRequest.

        When true and `shopperReference` is provided, the payment details will be stored.

        :param store_payment_method: The store_payment_method of this DonationPaymentRequest.
        :type store_payment_method: bool
        """

        self._store_payment_method = store_payment_method

    @property
    def telephone_number(self):
        """Gets the telephone_number of this DonationPaymentRequest.

        The shopper's telephone number.

        :return: The telephone_number of this DonationPaymentRequest.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this DonationPaymentRequest.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this DonationPaymentRequest.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def three_ds2_request_data(self):
        """Gets the three_ds2_request_data of this DonationPaymentRequest.

        Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.

        :return: The three_ds2_request_data of this DonationPaymentRequest.
        :rtype: ThreeDS2RequestFields
        """
        return self._three_ds2_request_data

    @three_ds2_request_data.setter
    def three_ds2_request_data(self, three_ds2_request_data):
        """Sets the three_ds2_request_data of this DonationPaymentRequest.

        Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.

        :param three_ds2_request_data: The three_ds2_request_data of this DonationPaymentRequest.
        :type three_ds2_request_data: ThreeDS2RequestFields
        """

        self._three_ds2_request_data = three_ds2_request_data

    @property
    def three_ds_authentication_only(self):
        """Gets the three_ds_authentication_only of this DonationPaymentRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :return: The three_ds_authentication_only of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._three_ds_authentication_only

    @three_ds_authentication_only.setter
    def three_ds_authentication_only(self, three_ds_authentication_only):
        """Sets the three_ds_authentication_only of this DonationPaymentRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :param three_ds_authentication_only: The three_ds_authentication_only of this DonationPaymentRequest.
        :type three_ds_authentication_only: bool
        """

        self._three_ds_authentication_only = three_ds_authentication_only

    @property
    def trusted_shopper(self):
        """Gets the trusted_shopper of this DonationPaymentRequest.

        Set to true if the payment should be routed to a trusted MID.

        :return: The trusted_shopper of this DonationPaymentRequest.
        :rtype: bool
        """
        return self._trusted_shopper

    @trusted_shopper.setter
    def trusted_shopper(self, trusted_shopper):
        """Sets the trusted_shopper of this DonationPaymentRequest.

        Set to true if the payment should be routed to a trusted MID.

        :param trusted_shopper: The trusted_shopper of this DonationPaymentRequest.
        :type trusted_shopper: bool
        """

        self._trusted_shopper = trusted_shopper
