/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentMethod.h
 *
 * 
 */

#ifndef OAIPaymentMethod_H
#define OAIPaymentMethod_H

#include <QJsonObject>

#include "OAIInputDetail.h"
#include "OAIPaymentMethodGroup.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInputDetail;
class OAIPaymentMethodGroup;

class OAIPaymentMethod : public OAIObject {
public:
    OAIPaymentMethod();
    OAIPaymentMethod(QString json);
    ~OAIPaymentMethod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getBrands() const;
    void setBrands(const QList<QString> &brands);
    bool is_brands_Set() const;
    bool is_brands_Valid() const;

    QMap<QString, QString> getConfiguration() const;
    void setConfiguration(const QMap<QString, QString> &configuration);
    bool is_configuration_Set() const;
    bool is_configuration_Valid() const;

    QList<OAIInputDetail> getDetails() const;
    void setDetails(const QList<OAIInputDetail> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getFundingSource() const;
    void setFundingSource(const QString &funding_source);
    bool is_funding_source_Set() const;
    bool is_funding_source_Valid() const;

    OAIPaymentMethodGroup getGroup() const;
    void setGroup(const OAIPaymentMethodGroup &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QList<OAIInputDetail> getInputDetails() const;
    void setInputDetails(const QList<OAIInputDetail> &input_details);
    bool is_input_details_Set() const;
    bool is_input_details_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isSupportsRecurring() const;
    void setSupportsRecurring(const bool &supports_recurring);
    bool is_supports_recurring_Set() const;
    bool is_supports_recurring_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_brands;
    bool m_brands_isSet;
    bool m_brands_isValid;

    QMap<QString, QString> m_configuration;
    bool m_configuration_isSet;
    bool m_configuration_isValid;

    QList<OAIInputDetail> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_funding_source;
    bool m_funding_source_isSet;
    bool m_funding_source_isValid;

    OAIPaymentMethodGroup m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QList<OAIInputDetail> m_input_details;
    bool m_input_details_isSet;
    bool m_input_details_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_supports_recurring;
    bool m_supports_recurring_isSet;
    bool m_supports_recurring_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentMethod)

#endif // OAIPaymentMethod_H
