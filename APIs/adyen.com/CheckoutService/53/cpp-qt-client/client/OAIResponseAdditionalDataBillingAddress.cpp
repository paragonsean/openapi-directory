/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAdditionalDataBillingAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAdditionalDataBillingAddress::OAIResponseAdditionalDataBillingAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAdditionalDataBillingAddress::OAIResponseAdditionalDataBillingAddress() {
    this->initializeModel();
}

OAIResponseAdditionalDataBillingAddress::~OAIResponseAdditionalDataBillingAddress() {}

void OAIResponseAdditionalDataBillingAddress::initializeModel() {

    m_billing_address_city_isSet = false;
    m_billing_address_city_isValid = false;

    m_billing_address_country_isSet = false;
    m_billing_address_country_isValid = false;

    m_billing_address_house_number_or_name_isSet = false;
    m_billing_address_house_number_or_name_isValid = false;

    m_billing_address_postal_code_isSet = false;
    m_billing_address_postal_code_isValid = false;

    m_billing_address_state_or_province_isSet = false;
    m_billing_address_state_or_province_isValid = false;

    m_billing_address_street_isSet = false;
    m_billing_address_street_isValid = false;
}

void OAIResponseAdditionalDataBillingAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAdditionalDataBillingAddress::fromJsonObject(QJsonObject json) {

    m_billing_address_city_isValid = ::OpenAPI::fromJsonValue(m_billing_address_city, json[QString("billingAddress.city")]);
    m_billing_address_city_isSet = !json[QString("billingAddress.city")].isNull() && m_billing_address_city_isValid;

    m_billing_address_country_isValid = ::OpenAPI::fromJsonValue(m_billing_address_country, json[QString("billingAddress.country")]);
    m_billing_address_country_isSet = !json[QString("billingAddress.country")].isNull() && m_billing_address_country_isValid;

    m_billing_address_house_number_or_name_isValid = ::OpenAPI::fromJsonValue(m_billing_address_house_number_or_name, json[QString("billingAddress.houseNumberOrName")]);
    m_billing_address_house_number_or_name_isSet = !json[QString("billingAddress.houseNumberOrName")].isNull() && m_billing_address_house_number_or_name_isValid;

    m_billing_address_postal_code_isValid = ::OpenAPI::fromJsonValue(m_billing_address_postal_code, json[QString("billingAddress.postalCode")]);
    m_billing_address_postal_code_isSet = !json[QString("billingAddress.postalCode")].isNull() && m_billing_address_postal_code_isValid;

    m_billing_address_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_billing_address_state_or_province, json[QString("billingAddress.stateOrProvince")]);
    m_billing_address_state_or_province_isSet = !json[QString("billingAddress.stateOrProvince")].isNull() && m_billing_address_state_or_province_isValid;

    m_billing_address_street_isValid = ::OpenAPI::fromJsonValue(m_billing_address_street, json[QString("billingAddress.street")]);
    m_billing_address_street_isSet = !json[QString("billingAddress.street")].isNull() && m_billing_address_street_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAdditionalDataBillingAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_address_city_isSet) {
        obj.insert(QString("billingAddress.city"), ::OpenAPI::toJsonValue(m_billing_address_city));
    }
    if (m_billing_address_country_isSet) {
        obj.insert(QString("billingAddress.country"), ::OpenAPI::toJsonValue(m_billing_address_country));
    }
    if (m_billing_address_house_number_or_name_isSet) {
        obj.insert(QString("billingAddress.houseNumberOrName"), ::OpenAPI::toJsonValue(m_billing_address_house_number_or_name));
    }
    if (m_billing_address_postal_code_isSet) {
        obj.insert(QString("billingAddress.postalCode"), ::OpenAPI::toJsonValue(m_billing_address_postal_code));
    }
    if (m_billing_address_state_or_province_isSet) {
        obj.insert(QString("billingAddress.stateOrProvince"), ::OpenAPI::toJsonValue(m_billing_address_state_or_province));
    }
    if (m_billing_address_street_isSet) {
        obj.insert(QString("billingAddress.street"), ::OpenAPI::toJsonValue(m_billing_address_street));
    }
    return obj;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressCity() const {
    return m_billing_address_city;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressCity(const QString &billing_address_city) {
    m_billing_address_city = billing_address_city;
    m_billing_address_city_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_city_Set() const{
    return m_billing_address_city_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_city_Valid() const{
    return m_billing_address_city_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressCountry() const {
    return m_billing_address_country;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressCountry(const QString &billing_address_country) {
    m_billing_address_country = billing_address_country;
    m_billing_address_country_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_country_Set() const{
    return m_billing_address_country_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_country_Valid() const{
    return m_billing_address_country_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressHouseNumberOrName() const {
    return m_billing_address_house_number_or_name;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressHouseNumberOrName(const QString &billing_address_house_number_or_name) {
    m_billing_address_house_number_or_name = billing_address_house_number_or_name;
    m_billing_address_house_number_or_name_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_house_number_or_name_Set() const{
    return m_billing_address_house_number_or_name_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_house_number_or_name_Valid() const{
    return m_billing_address_house_number_or_name_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressPostalCode() const {
    return m_billing_address_postal_code;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressPostalCode(const QString &billing_address_postal_code) {
    m_billing_address_postal_code = billing_address_postal_code;
    m_billing_address_postal_code_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_postal_code_Set() const{
    return m_billing_address_postal_code_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_postal_code_Valid() const{
    return m_billing_address_postal_code_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressStateOrProvince() const {
    return m_billing_address_state_or_province;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressStateOrProvince(const QString &billing_address_state_or_province) {
    m_billing_address_state_or_province = billing_address_state_or_province;
    m_billing_address_state_or_province_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_state_or_province_Set() const{
    return m_billing_address_state_or_province_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_state_or_province_Valid() const{
    return m_billing_address_state_or_province_isValid;
}

QString OAIResponseAdditionalDataBillingAddress::getBillingAddressStreet() const {
    return m_billing_address_street;
}
void OAIResponseAdditionalDataBillingAddress::setBillingAddressStreet(const QString &billing_address_street) {
    m_billing_address_street = billing_address_street;
    m_billing_address_street_isSet = true;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_street_Set() const{
    return m_billing_address_street_isSet;
}

bool OAIResponseAdditionalDataBillingAddress::is_billing_address_street_Valid() const{
    return m_billing_address_street_isValid;
}

bool OAIResponseAdditionalDataBillingAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_house_number_or_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAdditionalDataBillingAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
