/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentCompletionDetails.h
 *
 * 
 */

#ifndef OAIPaymentCompletionDetails_H
#define OAIPaymentCompletionDetails_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPaymentCompletionDetails : public OAIObject {
public:
    OAIPaymentCompletionDetails();
    OAIPaymentCompletionDetails(QString json);
    ~OAIPaymentCompletionDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getMd() const;
    void setMd(const QString &md);
    bool is_md_Set() const;
    bool is_md_Valid() const;

    QString getPaReq() const;
    void setPaReq(const QString &pa_req);
    bool is_pa_req_Set() const;
    bool is_pa_req_Valid() const;

    QString getPaRes() const;
    void setPaRes(const QString &pa_res);
    bool is_pa_res_Set() const;
    bool is_pa_res_Valid() const;

    QString getAuthorizationToken() const;
    void setAuthorizationToken(const QString &authorization_token);
    bool is_authorization_token_Set() const;
    bool is_authorization_token_Valid() const;

    QString getBillingToken() const;
    void setBillingToken(const QString &billing_token);
    bool is_billing_token_Set() const;
    bool is_billing_token_Valid() const;

    QString getCupsecureplusSmscode() const;
    void setCupsecureplusSmscode(const QString &cupsecureplus_smscode);
    bool is_cupsecureplus_smscode_Set() const;
    bool is_cupsecureplus_smscode_Valid() const;

    QString getFacilitatorAccessToken() const;
    void setFacilitatorAccessToken(const QString &facilitator_access_token);
    bool is_facilitator_access_token_Set() const;
    bool is_facilitator_access_token_Valid() const;

    QString getOneTimePasscode() const;
    void setOneTimePasscode(const QString &one_time_passcode);
    bool is_one_time_passcode_Set() const;
    bool is_one_time_passcode_Valid() const;

    QString getOrderId() const;
    void setOrderId(const QString &order_id);
    bool is_order_id_Set() const;
    bool is_order_id_Valid() const;

    QString getPayerId() const;
    void setPayerId(const QString &payer_id);
    bool is_payer_id_Set() const;
    bool is_payer_id_Valid() const;

    QString getPayload() const;
    void setPayload(const QString &payload);
    bool is_payload_Set() const;
    bool is_payload_Valid() const;

    QString getPaymentId() const;
    void setPaymentId(const QString &payment_id);
    bool is_payment_id_Set() const;
    bool is_payment_id_Valid() const;

    QString getPaymentStatus() const;
    void setPaymentStatus(const QString &payment_status);
    bool is_payment_status_Set() const;
    bool is_payment_status_Valid() const;

    QString getRedirectResult() const;
    void setRedirectResult(const QString &redirect_result);
    bool is_redirect_result_Set() const;
    bool is_redirect_result_Valid() const;

    QString getResultCode() const;
    void setResultCode(const QString &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    QString getThreeDsResult() const;
    void setThreeDsResult(const QString &three_ds_result);
    bool is_three_ds_result_Set() const;
    bool is_three_ds_result_Valid() const;

    QString getThreeds2ChallengeResult() const;
    void setThreeds2ChallengeResult(const QString &threeds2_challenge_result);
    bool is_threeds2_challenge_result_Set() const;
    bool is_threeds2_challenge_result_Valid() const;

    QString getThreeds2Fingerprint() const;
    void setThreeds2Fingerprint(const QString &threeds2_fingerprint);
    bool is_threeds2_fingerprint_Set() const;
    bool is_threeds2_fingerprint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_md;
    bool m_md_isSet;
    bool m_md_isValid;

    QString m_pa_req;
    bool m_pa_req_isSet;
    bool m_pa_req_isValid;

    QString m_pa_res;
    bool m_pa_res_isSet;
    bool m_pa_res_isValid;

    QString m_authorization_token;
    bool m_authorization_token_isSet;
    bool m_authorization_token_isValid;

    QString m_billing_token;
    bool m_billing_token_isSet;
    bool m_billing_token_isValid;

    QString m_cupsecureplus_smscode;
    bool m_cupsecureplus_smscode_isSet;
    bool m_cupsecureplus_smscode_isValid;

    QString m_facilitator_access_token;
    bool m_facilitator_access_token_isSet;
    bool m_facilitator_access_token_isValid;

    QString m_one_time_passcode;
    bool m_one_time_passcode_isSet;
    bool m_one_time_passcode_isValid;

    QString m_order_id;
    bool m_order_id_isSet;
    bool m_order_id_isValid;

    QString m_payer_id;
    bool m_payer_id_isSet;
    bool m_payer_id_isValid;

    QString m_payload;
    bool m_payload_isSet;
    bool m_payload_isValid;

    QString m_payment_id;
    bool m_payment_id_isSet;
    bool m_payment_id_isValid;

    QString m_payment_status;
    bool m_payment_status_isSet;
    bool m_payment_status_isValid;

    QString m_redirect_result;
    bool m_redirect_result_isSet;
    bool m_redirect_result_isValid;

    QString m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;

    QString m_three_ds_result;
    bool m_three_ds_result_isSet;
    bool m_three_ds_result_isValid;

    QString m_threeds2_challenge_result;
    bool m_threeds2_challenge_result_isSet;
    bool m_threeds2_challenge_result_isValid;

    QString m_threeds2_fingerprint;
    bool m_threeds2_fingerprint_isSet;
    bool m_threeds2_fingerprint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentCompletionDetails)

#endif // OAIPaymentCompletionDetails_H
