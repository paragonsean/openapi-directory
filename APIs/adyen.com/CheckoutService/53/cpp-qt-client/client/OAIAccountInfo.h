/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAccountInfo.h
 *
 * 
 */

#ifndef OAIAccountInfo_H
#define OAIAccountInfo_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAccountInfo : public OAIObject {
public:
    OAIAccountInfo();
    OAIAccountInfo(QString json);
    ~OAIAccountInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountAgeIndicator() const;
    void setAccountAgeIndicator(const QString &account_age_indicator);
    bool is_account_age_indicator_Set() const;
    bool is_account_age_indicator_Valid() const;

    QDateTime getAccountChangeDate() const;
    void setAccountChangeDate(const QDateTime &account_change_date);
    bool is_account_change_date_Set() const;
    bool is_account_change_date_Valid() const;

    QString getAccountChangeIndicator() const;
    void setAccountChangeIndicator(const QString &account_change_indicator);
    bool is_account_change_indicator_Set() const;
    bool is_account_change_indicator_Valid() const;

    QDateTime getAccountCreationDate() const;
    void setAccountCreationDate(const QDateTime &account_creation_date);
    bool is_account_creation_date_Set() const;
    bool is_account_creation_date_Valid() const;

    QString getAccountType() const;
    void setAccountType(const QString &account_type);
    bool is_account_type_Set() const;
    bool is_account_type_Valid() const;

    qint32 getAddCardAttemptsDay() const;
    void setAddCardAttemptsDay(const qint32 &add_card_attempts_day);
    bool is_add_card_attempts_day_Set() const;
    bool is_add_card_attempts_day_Valid() const;

    QDateTime getDeliveryAddressUsageDate() const;
    void setDeliveryAddressUsageDate(const QDateTime &delivery_address_usage_date);
    bool is_delivery_address_usage_date_Set() const;
    bool is_delivery_address_usage_date_Valid() const;

    QString getDeliveryAddressUsageIndicator() const;
    void setDeliveryAddressUsageIndicator(const QString &delivery_address_usage_indicator);
    bool is_delivery_address_usage_indicator_Set() const;
    bool is_delivery_address_usage_indicator_Valid() const;

    QString getHomePhone() const;
    void setHomePhone(const QString &home_phone);
    bool is_home_phone_Set() const;
    bool is_home_phone_Valid() const;

    QString getMobilePhone() const;
    void setMobilePhone(const QString &mobile_phone);
    bool is_mobile_phone_Set() const;
    bool is_mobile_phone_Valid() const;

    QDateTime getPasswordChangeDate() const;
    void setPasswordChangeDate(const QDateTime &password_change_date);
    bool is_password_change_date_Set() const;
    bool is_password_change_date_Valid() const;

    QString getPasswordChangeIndicator() const;
    void setPasswordChangeIndicator(const QString &password_change_indicator);
    bool is_password_change_indicator_Set() const;
    bool is_password_change_indicator_Valid() const;

    qint32 getPastTransactionsDay() const;
    void setPastTransactionsDay(const qint32 &past_transactions_day);
    bool is_past_transactions_day_Set() const;
    bool is_past_transactions_day_Valid() const;

    qint32 getPastTransactionsYear() const;
    void setPastTransactionsYear(const qint32 &past_transactions_year);
    bool is_past_transactions_year_Set() const;
    bool is_past_transactions_year_Valid() const;

    QDateTime getPaymentAccountAge() const;
    void setPaymentAccountAge(const QDateTime &payment_account_age);
    bool is_payment_account_age_Set() const;
    bool is_payment_account_age_Valid() const;

    QString getPaymentAccountIndicator() const;
    void setPaymentAccountIndicator(const QString &payment_account_indicator);
    bool is_payment_account_indicator_Set() const;
    bool is_payment_account_indicator_Valid() const;

    qint32 getPurchasesLast6Months() const;
    void setPurchasesLast6Months(const qint32 &purchases_last6_months);
    bool is_purchases_last6_months_Set() const;
    bool is_purchases_last6_months_Valid() const;

    bool isSuspiciousActivity() const;
    void setSuspiciousActivity(const bool &suspicious_activity);
    bool is_suspicious_activity_Set() const;
    bool is_suspicious_activity_Valid() const;

    QString getWorkPhone() const;
    void setWorkPhone(const QString &work_phone);
    bool is_work_phone_Set() const;
    bool is_work_phone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_age_indicator;
    bool m_account_age_indicator_isSet;
    bool m_account_age_indicator_isValid;

    QDateTime m_account_change_date;
    bool m_account_change_date_isSet;
    bool m_account_change_date_isValid;

    QString m_account_change_indicator;
    bool m_account_change_indicator_isSet;
    bool m_account_change_indicator_isValid;

    QDateTime m_account_creation_date;
    bool m_account_creation_date_isSet;
    bool m_account_creation_date_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    qint32 m_add_card_attempts_day;
    bool m_add_card_attempts_day_isSet;
    bool m_add_card_attempts_day_isValid;

    QDateTime m_delivery_address_usage_date;
    bool m_delivery_address_usage_date_isSet;
    bool m_delivery_address_usage_date_isValid;

    QString m_delivery_address_usage_indicator;
    bool m_delivery_address_usage_indicator_isSet;
    bool m_delivery_address_usage_indicator_isValid;

    QString m_home_phone;
    bool m_home_phone_isSet;
    bool m_home_phone_isValid;

    QString m_mobile_phone;
    bool m_mobile_phone_isSet;
    bool m_mobile_phone_isValid;

    QDateTime m_password_change_date;
    bool m_password_change_date_isSet;
    bool m_password_change_date_isValid;

    QString m_password_change_indicator;
    bool m_password_change_indicator_isSet;
    bool m_password_change_indicator_isValid;

    qint32 m_past_transactions_day;
    bool m_past_transactions_day_isSet;
    bool m_past_transactions_day_isValid;

    qint32 m_past_transactions_year;
    bool m_past_transactions_year_isSet;
    bool m_past_transactions_year_isValid;

    QDateTime m_payment_account_age;
    bool m_payment_account_age_isSet;
    bool m_payment_account_age_isValid;

    QString m_payment_account_indicator;
    bool m_payment_account_indicator_isSet;
    bool m_payment_account_indicator_isValid;

    qint32 m_purchases_last6_months;
    bool m_purchases_last6_months_isSet;
    bool m_purchases_last6_months_isValid;

    bool m_suspicious_activity;
    bool m_suspicious_activity_isSet;
    bool m_suspicious_activity_isValid;

    QString m_work_phone;
    bool m_work_phone_isSet;
    bool m_work_phone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAccountInfo)

#endif // OAIAccountInfo_H
