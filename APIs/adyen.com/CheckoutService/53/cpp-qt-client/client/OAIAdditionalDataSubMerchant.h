/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v53/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v53/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=53) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDataSubMerchant.h
 *
 * 
 */

#ifndef OAIAdditionalDataSubMerchant_H
#define OAIAdditionalDataSubMerchant_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDataSubMerchant : public OAIObject {
public:
    OAIAdditionalDataSubMerchant();
    OAIAdditionalDataSubMerchant(QString json);
    ~OAIAdditionalDataSubMerchant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSubMerchantNumberOfSubSellers() const;
    void setSubMerchantNumberOfSubSellers(const QString &sub_merchant_number_of_sub_sellers);
    bool is_sub_merchant_number_of_sub_sellers_Set() const;
    bool is_sub_merchant_number_of_sub_sellers_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrCity() const;
    void setSubMerchantSubSellerSubSellerNrCity(const QString &sub_merchant_sub_seller_sub_seller_nr_city);
    bool is_sub_merchant_sub_seller_sub_seller_nr_city_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_city_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrCountry() const;
    void setSubMerchantSubSellerSubSellerNrCountry(const QString &sub_merchant_sub_seller_sub_seller_nr_country);
    bool is_sub_merchant_sub_seller_sub_seller_nr_country_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_country_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrId() const;
    void setSubMerchantSubSellerSubSellerNrId(const QString &sub_merchant_sub_seller_sub_seller_nr_id);
    bool is_sub_merchant_sub_seller_sub_seller_nr_id_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_id_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrMcc() const;
    void setSubMerchantSubSellerSubSellerNrMcc(const QString &sub_merchant_sub_seller_sub_seller_nr_mcc);
    bool is_sub_merchant_sub_seller_sub_seller_nr_mcc_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_mcc_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrName() const;
    void setSubMerchantSubSellerSubSellerNrName(const QString &sub_merchant_sub_seller_sub_seller_nr_name);
    bool is_sub_merchant_sub_seller_sub_seller_nr_name_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_name_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrPostalCode() const;
    void setSubMerchantSubSellerSubSellerNrPostalCode(const QString &sub_merchant_sub_seller_sub_seller_nr_postal_code);
    bool is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrState() const;
    void setSubMerchantSubSellerSubSellerNrState(const QString &sub_merchant_sub_seller_sub_seller_nr_state);
    bool is_sub_merchant_sub_seller_sub_seller_nr_state_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_state_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrStreet() const;
    void setSubMerchantSubSellerSubSellerNrStreet(const QString &sub_merchant_sub_seller_sub_seller_nr_street);
    bool is_sub_merchant_sub_seller_sub_seller_nr_street_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_street_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrTaxId() const;
    void setSubMerchantSubSellerSubSellerNrTaxId(const QString &sub_merchant_sub_seller_sub_seller_nr_tax_id);
    bool is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_sub_merchant_number_of_sub_sellers;
    bool m_sub_merchant_number_of_sub_sellers_isSet;
    bool m_sub_merchant_number_of_sub_sellers_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_city;
    bool m_sub_merchant_sub_seller_sub_seller_nr_city_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_city_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_country;
    bool m_sub_merchant_sub_seller_sub_seller_nr_country_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_country_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_id;
    bool m_sub_merchant_sub_seller_sub_seller_nr_id_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_id_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_mcc;
    bool m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_name;
    bool m_sub_merchant_sub_seller_sub_seller_nr_name_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_name_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_postal_code;
    bool m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_state;
    bool m_sub_merchant_sub_seller_sub_seller_nr_state_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_state_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_street;
    bool m_sub_merchant_sub_seller_sub_seller_nr_street_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_street_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_tax_id;
    bool m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDataSubMerchant)

#endif // OAIAdditionalDataSubMerchant_H
