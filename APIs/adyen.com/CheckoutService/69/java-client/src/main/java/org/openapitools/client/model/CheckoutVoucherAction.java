/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CheckoutVoucherAction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:49.793130-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckoutVoucherAction {
  public static final String SERIALIZED_NAME_ALTERNATIVE_REFERENCE = "alternativeReference";
  @SerializedName(SERIALIZED_NAME_ALTERNATIVE_REFERENCE)
  private String alternativeReference;

  public static final String SERIALIZED_NAME_COLLECTION_INSTITUTION_NUMBER = "collectionInstitutionNumber";
  @SerializedName(SERIALIZED_NAME_COLLECTION_INSTITUTION_NUMBER)
  private String collectionInstitutionNumber;

  public static final String SERIALIZED_NAME_DOWNLOAD_URL = "downloadUrl";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_URL)
  private String downloadUrl;

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_INITIAL_AMOUNT = "initialAmount";
  @SerializedName(SERIALIZED_NAME_INITIAL_AMOUNT)
  private Amount initialAmount;

  public static final String SERIALIZED_NAME_INSTRUCTIONS_URL = "instructionsUrl";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS_URL)
  private String instructionsUrl;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_MASKED_TELEPHONE_NUMBER = "maskedTelephoneNumber";
  @SerializedName(SERIALIZED_NAME_MASKED_TELEPHONE_NUMBER)
  private String maskedTelephoneNumber;

  public static final String SERIALIZED_NAME_MERCHANT_NAME = "merchantName";
  @SerializedName(SERIALIZED_NAME_MERCHANT_NAME)
  private String merchantName;

  public static final String SERIALIZED_NAME_MERCHANT_REFERENCE = "merchantReference";
  @SerializedName(SERIALIZED_NAME_MERCHANT_REFERENCE)
  private String merchantReference;

  public static final String SERIALIZED_NAME_PASS_CREATION_TOKEN = "passCreationToken";
  @SerializedName(SERIALIZED_NAME_PASS_CREATION_TOKEN)
  private String passCreationToken;

  public static final String SERIALIZED_NAME_PAYMENT_DATA = "paymentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_DATA)
  private String paymentData;

  public static final String SERIALIZED_NAME_PAYMENT_METHOD_TYPE = "paymentMethodType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_METHOD_TYPE)
  private String paymentMethodType;

  public static final String SERIALIZED_NAME_REFERENCE = "reference";
  @SerializedName(SERIALIZED_NAME_REFERENCE)
  private String reference;

  public static final String SERIALIZED_NAME_SHOPPER_EMAIL = "shopperEmail";
  @SerializedName(SERIALIZED_NAME_SHOPPER_EMAIL)
  private String shopperEmail;

  public static final String SERIALIZED_NAME_SHOPPER_NAME = "shopperName";
  @SerializedName(SERIALIZED_NAME_SHOPPER_NAME)
  private String shopperName;

  public static final String SERIALIZED_NAME_SURCHARGE = "surcharge";
  @SerializedName(SERIALIZED_NAME_SURCHARGE)
  private Amount surcharge;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "totalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private Amount totalAmount;

  /**
   * **voucher**
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    VOUCHER("voucher");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public CheckoutVoucherAction() {
  }

  public CheckoutVoucherAction alternativeReference(String alternativeReference) {
    this.alternativeReference = alternativeReference;
    return this;
  }

  /**
   * The voucher alternative reference code.
   * @return alternativeReference
   */
  @javax.annotation.Nullable
  public String getAlternativeReference() {
    return alternativeReference;
  }

  public void setAlternativeReference(String alternativeReference) {
    this.alternativeReference = alternativeReference;
  }


  public CheckoutVoucherAction collectionInstitutionNumber(String collectionInstitutionNumber) {
    this.collectionInstitutionNumber = collectionInstitutionNumber;
    return this;
  }

  /**
   * A collection institution number (store number) for Econtext Pay-Easy ATM.
   * @return collectionInstitutionNumber
   */
  @javax.annotation.Nullable
  public String getCollectionInstitutionNumber() {
    return collectionInstitutionNumber;
  }

  public void setCollectionInstitutionNumber(String collectionInstitutionNumber) {
    this.collectionInstitutionNumber = collectionInstitutionNumber;
  }


  public CheckoutVoucherAction downloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
    return this;
  }

  /**
   * The URL to download the voucher.
   * @return downloadUrl
   */
  @javax.annotation.Nullable
  public String getDownloadUrl() {
    return downloadUrl;
  }

  public void setDownloadUrl(String downloadUrl) {
    this.downloadUrl = downloadUrl;
  }


  public CheckoutVoucherAction entity(String entity) {
    this.entity = entity;
    return this;
  }

  /**
   * An entity number of Multibanco.
   * @return entity
   */
  @javax.annotation.Nullable
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }


  public CheckoutVoucherAction expiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The date time of the voucher expiry.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(String expiresAt) {
    this.expiresAt = expiresAt;
  }


  public CheckoutVoucherAction initialAmount(Amount initialAmount) {
    this.initialAmount = initialAmount;
    return this;
  }

  /**
   * The initial amount.
   * @return initialAmount
   */
  @javax.annotation.Nullable
  public Amount getInitialAmount() {
    return initialAmount;
  }

  public void setInitialAmount(Amount initialAmount) {
    this.initialAmount = initialAmount;
  }


  public CheckoutVoucherAction instructionsUrl(String instructionsUrl) {
    this.instructionsUrl = instructionsUrl;
    return this;
  }

  /**
   * The URL to the detailed instructions to make payment using the voucher.
   * @return instructionsUrl
   */
  @javax.annotation.Nullable
  public String getInstructionsUrl() {
    return instructionsUrl;
  }

  public void setInstructionsUrl(String instructionsUrl) {
    this.instructionsUrl = instructionsUrl;
  }


  public CheckoutVoucherAction issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * The issuer of the voucher.
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public CheckoutVoucherAction maskedTelephoneNumber(String maskedTelephoneNumber) {
    this.maskedTelephoneNumber = maskedTelephoneNumber;
    return this;
  }

  /**
   * The shopper telephone number (partially masked).
   * @return maskedTelephoneNumber
   */
  @javax.annotation.Nullable
  public String getMaskedTelephoneNumber() {
    return maskedTelephoneNumber;
  }

  public void setMaskedTelephoneNumber(String maskedTelephoneNumber) {
    this.maskedTelephoneNumber = maskedTelephoneNumber;
  }


  public CheckoutVoucherAction merchantName(String merchantName) {
    this.merchantName = merchantName;
    return this;
  }

  /**
   * The merchant name.
   * @return merchantName
   */
  @javax.annotation.Nullable
  public String getMerchantName() {
    return merchantName;
  }

  public void setMerchantName(String merchantName) {
    this.merchantName = merchantName;
  }


  public CheckoutVoucherAction merchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
    return this;
  }

  /**
   * The merchant reference.
   * @return merchantReference
   */
  @javax.annotation.Nullable
  public String getMerchantReference() {
    return merchantReference;
  }

  public void setMerchantReference(String merchantReference) {
    this.merchantReference = merchantReference;
  }


  public CheckoutVoucherAction passCreationToken(String passCreationToken) {
    this.passCreationToken = passCreationToken;
    return this;
  }

  /**
   * A base64 encoded signature of all properties
   * @return passCreationToken
   */
  @javax.annotation.Nullable
  public String getPassCreationToken() {
    return passCreationToken;
  }

  public void setPassCreationToken(String passCreationToken) {
    this.passCreationToken = passCreationToken;
  }


  public CheckoutVoucherAction paymentData(String paymentData) {
    this.paymentData = paymentData;
    return this;
  }

  /**
   * Encoded payment data.
   * @return paymentData
   */
  @javax.annotation.Nullable
  public String getPaymentData() {
    return paymentData;
  }

  public void setPaymentData(String paymentData) {
    this.paymentData = paymentData;
  }


  public CheckoutVoucherAction paymentMethodType(String paymentMethodType) {
    this.paymentMethodType = paymentMethodType;
    return this;
  }

  /**
   * Specifies the payment method.
   * @return paymentMethodType
   */
  @javax.annotation.Nullable
  public String getPaymentMethodType() {
    return paymentMethodType;
  }

  public void setPaymentMethodType(String paymentMethodType) {
    this.paymentMethodType = paymentMethodType;
  }


  public CheckoutVoucherAction reference(String reference) {
    this.reference = reference;
    return this;
  }

  /**
   * The voucher reference code.
   * @return reference
   */
  @javax.annotation.Nullable
  public String getReference() {
    return reference;
  }

  public void setReference(String reference) {
    this.reference = reference;
  }


  public CheckoutVoucherAction shopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
    return this;
  }

  /**
   * The shopper email.
   * @return shopperEmail
   */
  @javax.annotation.Nullable
  public String getShopperEmail() {
    return shopperEmail;
  }

  public void setShopperEmail(String shopperEmail) {
    this.shopperEmail = shopperEmail;
  }


  public CheckoutVoucherAction shopperName(String shopperName) {
    this.shopperName = shopperName;
    return this;
  }

  /**
   * The shopper name.
   * @return shopperName
   */
  @javax.annotation.Nullable
  public String getShopperName() {
    return shopperName;
  }

  public void setShopperName(String shopperName) {
    this.shopperName = shopperName;
  }


  public CheckoutVoucherAction surcharge(Amount surcharge) {
    this.surcharge = surcharge;
    return this;
  }

  /**
   * The surcharge amount.
   * @return surcharge
   */
  @javax.annotation.Nullable
  public Amount getSurcharge() {
    return surcharge;
  }

  public void setSurcharge(Amount surcharge) {
    this.surcharge = surcharge;
  }


  public CheckoutVoucherAction totalAmount(Amount totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * The total amount (initial plus surcharge amount).
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public Amount getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(Amount totalAmount) {
    this.totalAmount = totalAmount;
  }


  public CheckoutVoucherAction type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * **voucher**
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CheckoutVoucherAction url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Specifies the URL to redirect to.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckoutVoucherAction checkoutVoucherAction = (CheckoutVoucherAction) o;
    return Objects.equals(this.alternativeReference, checkoutVoucherAction.alternativeReference) &&
        Objects.equals(this.collectionInstitutionNumber, checkoutVoucherAction.collectionInstitutionNumber) &&
        Objects.equals(this.downloadUrl, checkoutVoucherAction.downloadUrl) &&
        Objects.equals(this.entity, checkoutVoucherAction.entity) &&
        Objects.equals(this.expiresAt, checkoutVoucherAction.expiresAt) &&
        Objects.equals(this.initialAmount, checkoutVoucherAction.initialAmount) &&
        Objects.equals(this.instructionsUrl, checkoutVoucherAction.instructionsUrl) &&
        Objects.equals(this.issuer, checkoutVoucherAction.issuer) &&
        Objects.equals(this.maskedTelephoneNumber, checkoutVoucherAction.maskedTelephoneNumber) &&
        Objects.equals(this.merchantName, checkoutVoucherAction.merchantName) &&
        Objects.equals(this.merchantReference, checkoutVoucherAction.merchantReference) &&
        Objects.equals(this.passCreationToken, checkoutVoucherAction.passCreationToken) &&
        Objects.equals(this.paymentData, checkoutVoucherAction.paymentData) &&
        Objects.equals(this.paymentMethodType, checkoutVoucherAction.paymentMethodType) &&
        Objects.equals(this.reference, checkoutVoucherAction.reference) &&
        Objects.equals(this.shopperEmail, checkoutVoucherAction.shopperEmail) &&
        Objects.equals(this.shopperName, checkoutVoucherAction.shopperName) &&
        Objects.equals(this.surcharge, checkoutVoucherAction.surcharge) &&
        Objects.equals(this.totalAmount, checkoutVoucherAction.totalAmount) &&
        Objects.equals(this.type, checkoutVoucherAction.type) &&
        Objects.equals(this.url, checkoutVoucherAction.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternativeReference, collectionInstitutionNumber, downloadUrl, entity, expiresAt, initialAmount, instructionsUrl, issuer, maskedTelephoneNumber, merchantName, merchantReference, passCreationToken, paymentData, paymentMethodType, reference, shopperEmail, shopperName, surcharge, totalAmount, type, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckoutVoucherAction {\n");
    sb.append("    alternativeReference: ").append(toIndentedString(alternativeReference)).append("\n");
    sb.append("    collectionInstitutionNumber: ").append(toIndentedString(collectionInstitutionNumber)).append("\n");
    sb.append("    downloadUrl: ").append(toIndentedString(downloadUrl)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    initialAmount: ").append(toIndentedString(initialAmount)).append("\n");
    sb.append("    instructionsUrl: ").append(toIndentedString(instructionsUrl)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    maskedTelephoneNumber: ").append(toIndentedString(maskedTelephoneNumber)).append("\n");
    sb.append("    merchantName: ").append(toIndentedString(merchantName)).append("\n");
    sb.append("    merchantReference: ").append(toIndentedString(merchantReference)).append("\n");
    sb.append("    passCreationToken: ").append(toIndentedString(passCreationToken)).append("\n");
    sb.append("    paymentData: ").append(toIndentedString(paymentData)).append("\n");
    sb.append("    paymentMethodType: ").append(toIndentedString(paymentMethodType)).append("\n");
    sb.append("    reference: ").append(toIndentedString(reference)).append("\n");
    sb.append("    shopperEmail: ").append(toIndentedString(shopperEmail)).append("\n");
    sb.append("    shopperName: ").append(toIndentedString(shopperName)).append("\n");
    sb.append("    surcharge: ").append(toIndentedString(surcharge)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternativeReference");
    openapiFields.add("collectionInstitutionNumber");
    openapiFields.add("downloadUrl");
    openapiFields.add("entity");
    openapiFields.add("expiresAt");
    openapiFields.add("initialAmount");
    openapiFields.add("instructionsUrl");
    openapiFields.add("issuer");
    openapiFields.add("maskedTelephoneNumber");
    openapiFields.add("merchantName");
    openapiFields.add("merchantReference");
    openapiFields.add("passCreationToken");
    openapiFields.add("paymentData");
    openapiFields.add("paymentMethodType");
    openapiFields.add("reference");
    openapiFields.add("shopperEmail");
    openapiFields.add("shopperName");
    openapiFields.add("surcharge");
    openapiFields.add("totalAmount");
    openapiFields.add("type");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckoutVoucherAction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckoutVoucherAction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckoutVoucherAction is not found in the empty JSON string", CheckoutVoucherAction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckoutVoucherAction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckoutVoucherAction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckoutVoucherAction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternativeReference") != null && !jsonObj.get("alternativeReference").isJsonNull()) && !jsonObj.get("alternativeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternativeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternativeReference").toString()));
      }
      if ((jsonObj.get("collectionInstitutionNumber") != null && !jsonObj.get("collectionInstitutionNumber").isJsonNull()) && !jsonObj.get("collectionInstitutionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collectionInstitutionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collectionInstitutionNumber").toString()));
      }
      if ((jsonObj.get("downloadUrl") != null && !jsonObj.get("downloadUrl").isJsonNull()) && !jsonObj.get("downloadUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadUrl").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      if ((jsonObj.get("expiresAt") != null && !jsonObj.get("expiresAt").isJsonNull()) && !jsonObj.get("expiresAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiresAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiresAt").toString()));
      }
      // validate the optional field `initialAmount`
      if (jsonObj.get("initialAmount") != null && !jsonObj.get("initialAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("initialAmount"));
      }
      if ((jsonObj.get("instructionsUrl") != null && !jsonObj.get("instructionsUrl").isJsonNull()) && !jsonObj.get("instructionsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructionsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructionsUrl").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("maskedTelephoneNumber") != null && !jsonObj.get("maskedTelephoneNumber").isJsonNull()) && !jsonObj.get("maskedTelephoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedTelephoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedTelephoneNumber").toString()));
      }
      if ((jsonObj.get("merchantName") != null && !jsonObj.get("merchantName").isJsonNull()) && !jsonObj.get("merchantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantName").toString()));
      }
      if ((jsonObj.get("merchantReference") != null && !jsonObj.get("merchantReference").isJsonNull()) && !jsonObj.get("merchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantReference").toString()));
      }
      if ((jsonObj.get("passCreationToken") != null && !jsonObj.get("passCreationToken").isJsonNull()) && !jsonObj.get("passCreationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passCreationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passCreationToken").toString()));
      }
      if ((jsonObj.get("paymentData") != null && !jsonObj.get("paymentData").isJsonNull()) && !jsonObj.get("paymentData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentData").toString()));
      }
      if ((jsonObj.get("paymentMethodType") != null && !jsonObj.get("paymentMethodType").isJsonNull()) && !jsonObj.get("paymentMethodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMethodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMethodType").toString()));
      }
      if ((jsonObj.get("reference") != null && !jsonObj.get("reference").isJsonNull()) && !jsonObj.get("reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reference").toString()));
      }
      if ((jsonObj.get("shopperEmail") != null && !jsonObj.get("shopperEmail").isJsonNull()) && !jsonObj.get("shopperEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperEmail").toString()));
      }
      if ((jsonObj.get("shopperName") != null && !jsonObj.get("shopperName").isJsonNull()) && !jsonObj.get("shopperName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperName").toString()));
      }
      // validate the optional field `surcharge`
      if (jsonObj.get("surcharge") != null && !jsonObj.get("surcharge").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("surcharge"));
      }
      // validate the optional field `totalAmount`
      if (jsonObj.get("totalAmount") != null && !jsonObj.get("totalAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("totalAmount"));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckoutVoucherAction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckoutVoucherAction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckoutVoucherAction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckoutVoucherAction.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckoutVoucherAction>() {
           @Override
           public void write(JsonWriter out, CheckoutVoucherAction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckoutVoucherAction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckoutVoucherAction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckoutVoucherAction
   * @throws IOException if the JSON string is invalid with respect to CheckoutVoucherAction
   */
  public static CheckoutVoucherAction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckoutVoucherAction.class);
  }

  /**
   * Convert an instance of CheckoutVoucherAction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

