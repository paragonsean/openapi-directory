# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_detail import InputDetail
from openapi_server.models.payment_method_group import PaymentMethodGroup
from openapi_server.models.payment_method_issuer import PaymentMethodIssuer
from openapi_server import util


class PaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brand: str=None, brands: List[str]=None, configuration: Dict[str, str]=None, funding_source: str=None, group: PaymentMethodGroup=None, input_details: List[InputDetail]=None, issuers: List[PaymentMethodIssuer]=None, name: str=None, type: str=None):
        """PaymentMethod - a model defined in OpenAPI

        :param brand: The brand of this PaymentMethod.
        :param brands: The brands of this PaymentMethod.
        :param configuration: The configuration of this PaymentMethod.
        :param funding_source: The funding_source of this PaymentMethod.
        :param group: The group of this PaymentMethod.
        :param input_details: The input_details of this PaymentMethod.
        :param issuers: The issuers of this PaymentMethod.
        :param name: The name of this PaymentMethod.
        :param type: The type of this PaymentMethod.
        """
        self.openapi_types = {
            'brand': str,
            'brands': List[str],
            'configuration': Dict[str, str],
            'funding_source': str,
            'group': PaymentMethodGroup,
            'input_details': List[InputDetail],
            'issuers': List[PaymentMethodIssuer],
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'brand': 'brand',
            'brands': 'brands',
            'configuration': 'configuration',
            'funding_source': 'fundingSource',
            'group': 'group',
            'input_details': 'inputDetails',
            'issuers': 'issuers',
            'name': 'name',
            'type': 'type'
        }

        self._brand = brand
        self._brands = brands
        self._configuration = configuration
        self._funding_source = funding_source
        self._group = group
        self._input_details = input_details
        self._issuers = issuers
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentMethod of this PaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brand(self):
        """Gets the brand of this PaymentMethod.

        Brand for the selected gift card. For example: plastix, hmclub.

        :return: The brand of this PaymentMethod.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentMethod.

        Brand for the selected gift card. For example: plastix, hmclub.

        :param brand: The brand of this PaymentMethod.
        :type brand: str
        """

        self._brand = brand

    @property
    def brands(self):
        """Gets the brands of this PaymentMethod.

        List of possible brands. For example: visa, mc.

        :return: The brands of this PaymentMethod.
        :rtype: List[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this PaymentMethod.

        List of possible brands. For example: visa, mc.

        :param brands: The brands of this PaymentMethod.
        :type brands: List[str]
        """

        self._brands = brands

    @property
    def configuration(self):
        """Gets the configuration of this PaymentMethod.

        The configuration of the payment method.

        :return: The configuration of this PaymentMethod.
        :rtype: Dict[str, str]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this PaymentMethod.

        The configuration of the payment method.

        :param configuration: The configuration of this PaymentMethod.
        :type configuration: Dict[str, str]
        """

        self._configuration = configuration

    @property
    def funding_source(self):
        """Gets the funding_source of this PaymentMethod.

        The funding source of the payment method.

        :return: The funding_source of this PaymentMethod.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this PaymentMethod.

        The funding source of the payment method.

        :param funding_source: The funding_source of this PaymentMethod.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def group(self):
        """Gets the group of this PaymentMethod.

        The group where this payment method belongs to.

        :return: The group of this PaymentMethod.
        :rtype: PaymentMethodGroup
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this PaymentMethod.

        The group where this payment method belongs to.

        :param group: The group of this PaymentMethod.
        :type group: PaymentMethodGroup
        """

        self._group = group

    @property
    def input_details(self):
        """Gets the input_details of this PaymentMethod.

        All input details to be provided to complete the payment with this payment method.

        :return: The input_details of this PaymentMethod.
        :rtype: List[InputDetail]
        """
        return self._input_details

    @input_details.setter
    def input_details(self, input_details):
        """Sets the input_details of this PaymentMethod.

        All input details to be provided to complete the payment with this payment method.

        :param input_details: The input_details of this PaymentMethod.
        :type input_details: List[InputDetail]
        """

        self._input_details = input_details

    @property
    def issuers(self):
        """Gets the issuers of this PaymentMethod.

        A list of issuers for this payment method.

        :return: The issuers of this PaymentMethod.
        :rtype: List[PaymentMethodIssuer]
        """
        return self._issuers

    @issuers.setter
    def issuers(self, issuers):
        """Sets the issuers of this PaymentMethod.

        A list of issuers for this payment method.

        :param issuers: The issuers of this PaymentMethod.
        :type issuers: List[PaymentMethodIssuer]
        """

        self._issuers = issuers

    @property
    def name(self):
        """Gets the name of this PaymentMethod.

        The displayable name of this payment method.

        :return: The name of this PaymentMethod.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethod.

        The displayable name of this payment method.

        :param name: The name of this PaymentMethod.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this PaymentMethod.

        The unique payment method code.

        :return: The type of this PaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethod.

        The unique payment method code.

        :param type: The type of this PaymentMethod.
        :type type: str
        """

        self._type = type
