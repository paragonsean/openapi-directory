# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.three_ds_request_data import ThreeDSRequestData
from openapi_server import util


class AuthenticationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attempt_authentication: str=None, authentication_only: bool=False, three_ds_request_data: ThreeDSRequestData=None):
        """AuthenticationData - a model defined in OpenAPI

        :param attempt_authentication: The attempt_authentication of this AuthenticationData.
        :param authentication_only: The authentication_only of this AuthenticationData.
        :param three_ds_request_data: The three_ds_request_data of this AuthenticationData.
        """
        self.openapi_types = {
            'attempt_authentication': str,
            'authentication_only': bool,
            'three_ds_request_data': ThreeDSRequestData
        }

        self.attribute_map = {
            'attempt_authentication': 'attemptAuthentication',
            'authentication_only': 'authenticationOnly',
            'three_ds_request_data': 'threeDSRequestData'
        }

        self._attempt_authentication = attempt_authentication
        self._authentication_only = authentication_only
        self._three_ds_request_data = three_ds_request_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationData of this AuthenticationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attempt_authentication(self):
        """Gets the attempt_authentication of this AuthenticationData.

        Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don't perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.

        :return: The attempt_authentication of this AuthenticationData.
        :rtype: str
        """
        return self._attempt_authentication

    @attempt_authentication.setter
    def attempt_authentication(self, attempt_authentication):
        """Sets the attempt_authentication of this AuthenticationData.

        Indicates when 3D Secure authentication should be attempted. This overrides all other rules, including [Dynamic 3D Secure settings](https://docs.adyen.com/risk-management/dynamic-3d-secure).  Possible values:  * **always**: Perform 3D Secure authentication. * **never**: Don't perform 3D Secure authentication. If PSD2 SCA or other national regulations require authentication, the transaction gets declined.

        :param attempt_authentication: The attempt_authentication of this AuthenticationData.
        :type attempt_authentication: str
        """
        allowed_values = ["always", "never"]  # noqa: E501
        if attempt_authentication not in allowed_values:
            raise ValueError(
                "Invalid value for `attempt_authentication` ({0}), must be one of {1}"
                .format(attempt_authentication, allowed_values)
            )

        self._attempt_authentication = attempt_authentication

    @property
    def authentication_only(self):
        """Gets the authentication_only of this AuthenticationData.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. Default: **false**.

        :return: The authentication_only of this AuthenticationData.
        :rtype: bool
        """
        return self._authentication_only

    @authentication_only.setter
    def authentication_only(self, authentication_only):
        """Sets the authentication_only of this AuthenticationData.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation. Default: **false**.

        :param authentication_only: The authentication_only of this AuthenticationData.
        :type authentication_only: bool
        """

        self._authentication_only = authentication_only

    @property
    def three_ds_request_data(self):
        """Gets the three_ds_request_data of this AuthenticationData.

        Object with additional parameters for the 3D Secure authentication flow.

        :return: The three_ds_request_data of this AuthenticationData.
        :rtype: ThreeDSRequestData
        """
        return self._three_ds_request_data

    @three_ds_request_data.setter
    def three_ds_request_data(self, three_ds_request_data):
        """Sets the three_ds_request_data of this AuthenticationData.

        Object with additional parameters for the 3D Secure authentication flow.

        :param three_ds_request_data: The three_ds_request_data of this AuthenticationData.
        :type three_ds_request_data: ThreeDSRequestData
        """

        self._three_ds_request_data = three_ds_request_data
