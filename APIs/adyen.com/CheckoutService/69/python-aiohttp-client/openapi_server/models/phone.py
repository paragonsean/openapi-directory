# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Phone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cc: str=None, subscriber: str=None):
        """Phone - a model defined in OpenAPI

        :param cc: The cc of this Phone.
        :param subscriber: The subscriber of this Phone.
        """
        self.openapi_types = {
            'cc': str,
            'subscriber': str
        }

        self.attribute_map = {
            'cc': 'cc',
            'subscriber': 'subscriber'
        }

        self._cc = cc
        self._subscriber = subscriber

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Phone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Phone of this Phone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cc(self):
        """Gets the cc of this Phone.

        Country code. Length: 1–3 characters.

        :return: The cc of this Phone.
        :rtype: str
        """
        return self._cc

    @cc.setter
    def cc(self, cc):
        """Sets the cc of this Phone.

        Country code. Length: 1–3 characters.

        :param cc: The cc of this Phone.
        :type cc: str
        """
        if cc is not None and len(cc) > 3:
            raise ValueError("Invalid value for `cc`, length must be less than or equal to `3`")
        if cc is not None and len(cc) < 1:
            raise ValueError("Invalid value for `cc`, length must be greater than or equal to `1`")

        self._cc = cc

    @property
    def subscriber(self):
        """Gets the subscriber of this Phone.

        Subscriber number. Maximum length: 15 characters.

        :return: The subscriber of this Phone.
        :rtype: str
        """
        return self._subscriber

    @subscriber.setter
    def subscriber(self, subscriber):
        """Sets the subscriber of this Phone.

        Subscriber number. Maximum length: 15 characters.

        :param subscriber: The subscriber of this Phone.
        :type subscriber: str
        """
        if subscriber is not None and len(subscriber) > 15:
            raise ValueError("Invalid value for `subscriber`, length must be less than or equal to `15`")

        self._subscriber = subscriber
