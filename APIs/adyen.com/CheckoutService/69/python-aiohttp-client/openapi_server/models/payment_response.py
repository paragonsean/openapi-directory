# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.balance_check_response_additional_data import BalanceCheckResponseAdditionalData
from openapi_server.models.checkout_order_response import CheckoutOrderResponse
from openapi_server.models.fraud_result import FraudResult
from openapi_server.models.payment_response_action import PaymentResponseAction
from openapi_server.models.response_payment_method import ResponsePaymentMethod
from openapi_server.models.three_ds2_response_data import ThreeDS2ResponseData
from openapi_server.models.three_ds2_result import ThreeDS2Result
from openapi_server import util


class PaymentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: PaymentResponseAction=None, additional_data: BalanceCheckResponseAdditionalData=None, amount: Amount=None, donation_token: str=None, fraud_result: FraudResult=None, merchant_reference: str=None, order: CheckoutOrderResponse=None, payment_method: ResponsePaymentMethod=None, psp_reference: str=None, refusal_reason: str=None, refusal_reason_code: str=None, result_code: str=None, three_ds2_response_data: ThreeDS2ResponseData=None, three_ds2_result: ThreeDS2Result=None, three_ds_payment_data: str=None):
        """PaymentResponse - a model defined in OpenAPI

        :param action: The action of this PaymentResponse.
        :param additional_data: The additional_data of this PaymentResponse.
        :param amount: The amount of this PaymentResponse.
        :param donation_token: The donation_token of this PaymentResponse.
        :param fraud_result: The fraud_result of this PaymentResponse.
        :param merchant_reference: The merchant_reference of this PaymentResponse.
        :param order: The order of this PaymentResponse.
        :param payment_method: The payment_method of this PaymentResponse.
        :param psp_reference: The psp_reference of this PaymentResponse.
        :param refusal_reason: The refusal_reason of this PaymentResponse.
        :param refusal_reason_code: The refusal_reason_code of this PaymentResponse.
        :param result_code: The result_code of this PaymentResponse.
        :param three_ds2_response_data: The three_ds2_response_data of this PaymentResponse.
        :param three_ds2_result: The three_ds2_result of this PaymentResponse.
        :param three_ds_payment_data: The three_ds_payment_data of this PaymentResponse.
        """
        self.openapi_types = {
            'action': PaymentResponseAction,
            'additional_data': BalanceCheckResponseAdditionalData,
            'amount': Amount,
            'donation_token': str,
            'fraud_result': FraudResult,
            'merchant_reference': str,
            'order': CheckoutOrderResponse,
            'payment_method': ResponsePaymentMethod,
            'psp_reference': str,
            'refusal_reason': str,
            'refusal_reason_code': str,
            'result_code': str,
            'three_ds2_response_data': ThreeDS2ResponseData,
            'three_ds2_result': ThreeDS2Result,
            'three_ds_payment_data': str
        }

        self.attribute_map = {
            'action': 'action',
            'additional_data': 'additionalData',
            'amount': 'amount',
            'donation_token': 'donationToken',
            'fraud_result': 'fraudResult',
            'merchant_reference': 'merchantReference',
            'order': 'order',
            'payment_method': 'paymentMethod',
            'psp_reference': 'pspReference',
            'refusal_reason': 'refusalReason',
            'refusal_reason_code': 'refusalReasonCode',
            'result_code': 'resultCode',
            'three_ds2_response_data': 'threeDS2ResponseData',
            'three_ds2_result': 'threeDS2Result',
            'three_ds_payment_data': 'threeDSPaymentData'
        }

        self._action = action
        self._additional_data = additional_data
        self._amount = amount
        self._donation_token = donation_token
        self._fraud_result = fraud_result
        self._merchant_reference = merchant_reference
        self._order = order
        self._payment_method = payment_method
        self._psp_reference = psp_reference
        self._refusal_reason = refusal_reason
        self._refusal_reason_code = refusal_reason_code
        self._result_code = result_code
        self._three_ds2_response_data = three_ds2_response_data
        self._three_ds2_result = three_ds2_result
        self._three_ds_payment_data = three_ds_payment_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResponse of this PaymentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this PaymentResponse.


        :return: The action of this PaymentResponse.
        :rtype: PaymentResponseAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PaymentResponse.


        :param action: The action of this PaymentResponse.
        :type action: PaymentResponseAction
        """

        self._action = action

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentResponse.


        :return: The additional_data of this PaymentResponse.
        :rtype: BalanceCheckResponseAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentResponse.


        :param additional_data: The additional_data of this PaymentResponse.
        :type additional_data: BalanceCheckResponseAdditionalData
        """

        self._additional_data = additional_data

    @property
    def amount(self):
        """Gets the amount of this PaymentResponse.

        Authorised amount in the transaction.

        :return: The amount of this PaymentResponse.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentResponse.

        Authorised amount in the transaction.

        :param amount: The amount of this PaymentResponse.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def donation_token(self):
        """Gets the donation_token of this PaymentResponse.

        Donation Token containing payment details for Adyen Giving.

        :return: The donation_token of this PaymentResponse.
        :rtype: str
        """
        return self._donation_token

    @donation_token.setter
    def donation_token(self, donation_token):
        """Sets the donation_token of this PaymentResponse.

        Donation Token containing payment details for Adyen Giving.

        :param donation_token: The donation_token of this PaymentResponse.
        :type donation_token: str
        """

        self._donation_token = donation_token

    @property
    def fraud_result(self):
        """Gets the fraud_result of this PaymentResponse.

        The fraud result properties of the payment.

        :return: The fraud_result of this PaymentResponse.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this PaymentResponse.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this PaymentResponse.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PaymentResponse.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The merchant_reference of this PaymentResponse.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PaymentResponse.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param merchant_reference: The merchant_reference of this PaymentResponse.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def order(self):
        """Gets the order of this PaymentResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :return: The order of this PaymentResponse.
        :rtype: CheckoutOrderResponse
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PaymentResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :param order: The order of this PaymentResponse.
        :type order: CheckoutOrderResponse
        """

        self._order = order

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentResponse.

        Details about the payment method used in the transaction.  Only returned if `resultCode` is **Authorised**.

        :return: The payment_method of this PaymentResponse.
        :rtype: ResponsePaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentResponse.

        Details about the payment method used in the transaction.  Only returned if `resultCode` is **Authorised**.

        :param payment_method: The payment_method of this PaymentResponse.
        :type payment_method: ResponsePaymentMethod
        """

        self._payment_method = payment_method

    @property
    def psp_reference(self):
        """Gets the psp_reference of this PaymentResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.  > For payment methods that require a redirect or additional action, you will get this value in the `/payments/details` response.

        :return: The psp_reference of this PaymentResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this PaymentResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.  > For payment methods that require a redirect or additional action, you will get this value in the `/payments/details` response.

        :param psp_reference: The psp_reference of this PaymentResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this PaymentResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this PaymentResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this PaymentResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this PaymentResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def refusal_reason_code(self):
        """Gets the refusal_reason_code of this PaymentResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason_code of this PaymentResponse.
        :rtype: str
        """
        return self._refusal_reason_code

    @refusal_reason_code.setter
    def refusal_reason_code(self, refusal_reason_code):
        """Sets the refusal_reason_code of this PaymentResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason_code: The refusal_reason_code of this PaymentResponse.
        :type refusal_reason_code: str
        """

        self._refusal_reason_code = refusal_reason_code

    @property
    def result_code(self):
        """Gets the result_code of this PaymentResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :return: The result_code of this PaymentResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this PaymentResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :param result_code: The result_code of this PaymentResponse.
        :type result_code: str
        """
        allowed_values = ["AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code

    @property
    def three_ds2_response_data(self):
        """Gets the three_ds2_response_data of this PaymentResponse.

        Response of the 3D Secure 2 authentication.

        :return: The three_ds2_response_data of this PaymentResponse.
        :rtype: ThreeDS2ResponseData
        """
        return self._three_ds2_response_data

    @three_ds2_response_data.setter
    def three_ds2_response_data(self, three_ds2_response_data):
        """Sets the three_ds2_response_data of this PaymentResponse.

        Response of the 3D Secure 2 authentication.

        :param three_ds2_response_data: The three_ds2_response_data of this PaymentResponse.
        :type three_ds2_response_data: ThreeDS2ResponseData
        """

        self._three_ds2_response_data = three_ds2_response_data

    @property
    def three_ds2_result(self):
        """Gets the three_ds2_result of this PaymentResponse.

        Result of the 3D Secure 2 authentication.

        :return: The three_ds2_result of this PaymentResponse.
        :rtype: ThreeDS2Result
        """
        return self._three_ds2_result

    @three_ds2_result.setter
    def three_ds2_result(self, three_ds2_result):
        """Sets the three_ds2_result of this PaymentResponse.

        Result of the 3D Secure 2 authentication.

        :param three_ds2_result: The three_ds2_result of this PaymentResponse.
        :type three_ds2_result: ThreeDS2Result
        """

        self._three_ds2_result = three_ds2_result

    @property
    def three_ds_payment_data(self):
        """Gets the three_ds_payment_data of this PaymentResponse.

        When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.

        :return: The three_ds_payment_data of this PaymentResponse.
        :rtype: str
        """
        return self._three_ds_payment_data

    @three_ds_payment_data.setter
    def three_ds_payment_data(self, three_ds_payment_data):
        """Sets the three_ds_payment_data of this PaymentResponse.

        When non-empty, contains a value that you must submit to the `/payments/details` endpoint as `paymentData`.

        :param three_ds_payment_data: The three_ds_payment_data of this PaymentResponse.
        :type three_ds_payment_data: str
        """

        self._three_ds_payment_data = three_ds_payment_data
