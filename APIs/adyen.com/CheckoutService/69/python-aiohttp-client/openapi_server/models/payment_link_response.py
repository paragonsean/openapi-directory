# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.installment_option import InstallmentOption
from openapi_server.models.line_item import LineItem
from openapi_server.models.name import Name
from openapi_server.models.risk_data import RiskData
from openapi_server.models.split import Split
from openapi_server import util


class PaymentLinkResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_payment_methods: List[str]=None, amount: Amount=None, application_info: ApplicationInfo=None, billing_address: Address=None, blocked_payment_methods: List[str]=None, capture_delay_hours: int=None, country_code: str=None, date_of_birth: date=None, deliver_at: datetime=None, delivery_address: Address=None, description: str=None, expires_at: str=None, id: str=None, installment_options: Dict[str, InstallmentOption]=None, line_items: List[LineItem]=None, manual_capture: bool=None, mcc: str=None, merchant_account: str=None, merchant_order_reference: str=None, metadata: Dict[str, str]=None, recurring_processing_model: str=None, reference: str=None, required_shopper_fields: List[str]=None, return_url: str=None, reusable: bool=None, risk_data: RiskData=None, shopper_email: str=None, shopper_locale: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, show_remove_payment_method_button: bool=True, social_security_number: str=None, split_card_funding_sources: bool=False, splits: List[Split]=None, status: str=None, store: str=None, store_payment_method_mode: str=None, telephone_number: str=None, theme_id: str=None, updated_at: datetime=None, url: str=None):
        """PaymentLinkResponse - a model defined in OpenAPI

        :param allowed_payment_methods: The allowed_payment_methods of this PaymentLinkResponse.
        :param amount: The amount of this PaymentLinkResponse.
        :param application_info: The application_info of this PaymentLinkResponse.
        :param billing_address: The billing_address of this PaymentLinkResponse.
        :param blocked_payment_methods: The blocked_payment_methods of this PaymentLinkResponse.
        :param capture_delay_hours: The capture_delay_hours of this PaymentLinkResponse.
        :param country_code: The country_code of this PaymentLinkResponse.
        :param date_of_birth: The date_of_birth of this PaymentLinkResponse.
        :param deliver_at: The deliver_at of this PaymentLinkResponse.
        :param delivery_address: The delivery_address of this PaymentLinkResponse.
        :param description: The description of this PaymentLinkResponse.
        :param expires_at: The expires_at of this PaymentLinkResponse.
        :param id: The id of this PaymentLinkResponse.
        :param installment_options: The installment_options of this PaymentLinkResponse.
        :param line_items: The line_items of this PaymentLinkResponse.
        :param manual_capture: The manual_capture of this PaymentLinkResponse.
        :param mcc: The mcc of this PaymentLinkResponse.
        :param merchant_account: The merchant_account of this PaymentLinkResponse.
        :param merchant_order_reference: The merchant_order_reference of this PaymentLinkResponse.
        :param metadata: The metadata of this PaymentLinkResponse.
        :param recurring_processing_model: The recurring_processing_model of this PaymentLinkResponse.
        :param reference: The reference of this PaymentLinkResponse.
        :param required_shopper_fields: The required_shopper_fields of this PaymentLinkResponse.
        :param return_url: The return_url of this PaymentLinkResponse.
        :param reusable: The reusable of this PaymentLinkResponse.
        :param risk_data: The risk_data of this PaymentLinkResponse.
        :param shopper_email: The shopper_email of this PaymentLinkResponse.
        :param shopper_locale: The shopper_locale of this PaymentLinkResponse.
        :param shopper_name: The shopper_name of this PaymentLinkResponse.
        :param shopper_reference: The shopper_reference of this PaymentLinkResponse.
        :param shopper_statement: The shopper_statement of this PaymentLinkResponse.
        :param show_remove_payment_method_button: The show_remove_payment_method_button of this PaymentLinkResponse.
        :param social_security_number: The social_security_number of this PaymentLinkResponse.
        :param split_card_funding_sources: The split_card_funding_sources of this PaymentLinkResponse.
        :param splits: The splits of this PaymentLinkResponse.
        :param status: The status of this PaymentLinkResponse.
        :param store: The store of this PaymentLinkResponse.
        :param store_payment_method_mode: The store_payment_method_mode of this PaymentLinkResponse.
        :param telephone_number: The telephone_number of this PaymentLinkResponse.
        :param theme_id: The theme_id of this PaymentLinkResponse.
        :param updated_at: The updated_at of this PaymentLinkResponse.
        :param url: The url of this PaymentLinkResponse.
        """
        self.openapi_types = {
            'allowed_payment_methods': List[str],
            'amount': Amount,
            'application_info': ApplicationInfo,
            'billing_address': Address,
            'blocked_payment_methods': List[str],
            'capture_delay_hours': int,
            'country_code': str,
            'date_of_birth': date,
            'deliver_at': datetime,
            'delivery_address': Address,
            'description': str,
            'expires_at': str,
            'id': str,
            'installment_options': Dict[str, InstallmentOption],
            'line_items': List[LineItem],
            'manual_capture': bool,
            'mcc': str,
            'merchant_account': str,
            'merchant_order_reference': str,
            'metadata': Dict[str, str],
            'recurring_processing_model': str,
            'reference': str,
            'required_shopper_fields': List[str],
            'return_url': str,
            'reusable': bool,
            'risk_data': RiskData,
            'shopper_email': str,
            'shopper_locale': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'show_remove_payment_method_button': bool,
            'social_security_number': str,
            'split_card_funding_sources': bool,
            'splits': List[Split],
            'status': str,
            'store': str,
            'store_payment_method_mode': str,
            'telephone_number': str,
            'theme_id': str,
            'updated_at': datetime,
            'url': str
        }

        self.attribute_map = {
            'allowed_payment_methods': 'allowedPaymentMethods',
            'amount': 'amount',
            'application_info': 'applicationInfo',
            'billing_address': 'billingAddress',
            'blocked_payment_methods': 'blockedPaymentMethods',
            'capture_delay_hours': 'captureDelayHours',
            'country_code': 'countryCode',
            'date_of_birth': 'dateOfBirth',
            'deliver_at': 'deliverAt',
            'delivery_address': 'deliveryAddress',
            'description': 'description',
            'expires_at': 'expiresAt',
            'id': 'id',
            'installment_options': 'installmentOptions',
            'line_items': 'lineItems',
            'manual_capture': 'manualCapture',
            'mcc': 'mcc',
            'merchant_account': 'merchantAccount',
            'merchant_order_reference': 'merchantOrderReference',
            'metadata': 'metadata',
            'recurring_processing_model': 'recurringProcessingModel',
            'reference': 'reference',
            'required_shopper_fields': 'requiredShopperFields',
            'return_url': 'returnUrl',
            'reusable': 'reusable',
            'risk_data': 'riskData',
            'shopper_email': 'shopperEmail',
            'shopper_locale': 'shopperLocale',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'show_remove_payment_method_button': 'showRemovePaymentMethodButton',
            'social_security_number': 'socialSecurityNumber',
            'split_card_funding_sources': 'splitCardFundingSources',
            'splits': 'splits',
            'status': 'status',
            'store': 'store',
            'store_payment_method_mode': 'storePaymentMethodMode',
            'telephone_number': 'telephoneNumber',
            'theme_id': 'themeId',
            'updated_at': 'updatedAt',
            'url': 'url'
        }

        self._allowed_payment_methods = allowed_payment_methods
        self._amount = amount
        self._application_info = application_info
        self._billing_address = billing_address
        self._blocked_payment_methods = blocked_payment_methods
        self._capture_delay_hours = capture_delay_hours
        self._country_code = country_code
        self._date_of_birth = date_of_birth
        self._deliver_at = deliver_at
        self._delivery_address = delivery_address
        self._description = description
        self._expires_at = expires_at
        self._id = id
        self._installment_options = installment_options
        self._line_items = line_items
        self._manual_capture = manual_capture
        self._mcc = mcc
        self._merchant_account = merchant_account
        self._merchant_order_reference = merchant_order_reference
        self._metadata = metadata
        self._recurring_processing_model = recurring_processing_model
        self._reference = reference
        self._required_shopper_fields = required_shopper_fields
        self._return_url = return_url
        self._reusable = reusable
        self._risk_data = risk_data
        self._shopper_email = shopper_email
        self._shopper_locale = shopper_locale
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._show_remove_payment_method_button = show_remove_payment_method_button
        self._social_security_number = social_security_number
        self._split_card_funding_sources = split_card_funding_sources
        self._splits = splits
        self._status = status
        self._store = store
        self._store_payment_method_mode = store_payment_method_mode
        self._telephone_number = telephone_number
        self._theme_id = theme_id
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentLinkResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentLinkResponse of this PaymentLinkResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_payment_methods(self):
        """Gets the allowed_payment_methods of this PaymentLinkResponse.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The allowed_payment_methods of this PaymentLinkResponse.
        :rtype: List[str]
        """
        return self._allowed_payment_methods

    @allowed_payment_methods.setter
    def allowed_payment_methods(self, allowed_payment_methods):
        """Sets the allowed_payment_methods of this PaymentLinkResponse.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param allowed_payment_methods: The allowed_payment_methods of this PaymentLinkResponse.
        :type allowed_payment_methods: List[str]
        """

        self._allowed_payment_methods = allowed_payment_methods

    @property
    def amount(self):
        """Gets the amount of this PaymentLinkResponse.

        The payment amount and currency.

        :return: The amount of this PaymentLinkResponse.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentLinkResponse.

        The payment amount and currency.

        :param amount: The amount of this PaymentLinkResponse.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def application_info(self):
        """Gets the application_info of this PaymentLinkResponse.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :return: The application_info of this PaymentLinkResponse.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this PaymentLinkResponse.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :param application_info: The application_info of this PaymentLinkResponse.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentLinkResponse.

        The address where to send the invoice.

        :return: The billing_address of this PaymentLinkResponse.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentLinkResponse.

        The address where to send the invoice.

        :param billing_address: The billing_address of this PaymentLinkResponse.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def blocked_payment_methods(self):
        """Gets the blocked_payment_methods of this PaymentLinkResponse.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The blocked_payment_methods of this PaymentLinkResponse.
        :rtype: List[str]
        """
        return self._blocked_payment_methods

    @blocked_payment_methods.setter
    def blocked_payment_methods(self, blocked_payment_methods):
        """Sets the blocked_payment_methods of this PaymentLinkResponse.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param blocked_payment_methods: The blocked_payment_methods of this PaymentLinkResponse.
        :type blocked_payment_methods: List[str]
        """

        self._blocked_payment_methods = blocked_payment_methods

    @property
    def capture_delay_hours(self):
        """Gets the capture_delay_hours of this PaymentLinkResponse.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :return: The capture_delay_hours of this PaymentLinkResponse.
        :rtype: int
        """
        return self._capture_delay_hours

    @capture_delay_hours.setter
    def capture_delay_hours(self, capture_delay_hours):
        """Sets the capture_delay_hours of this PaymentLinkResponse.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :param capture_delay_hours: The capture_delay_hours of this PaymentLinkResponse.
        :type capture_delay_hours: int
        """

        self._capture_delay_hours = capture_delay_hours

    @property
    def country_code(self):
        """Gets the country_code of this PaymentLinkResponse.

        The shopper's two-letter country code.

        :return: The country_code of this PaymentLinkResponse.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PaymentLinkResponse.

        The shopper's two-letter country code.

        :param country_code: The country_code of this PaymentLinkResponse.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PaymentLinkResponse.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :return: The date_of_birth of this PaymentLinkResponse.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PaymentLinkResponse.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :param date_of_birth: The date_of_birth of this PaymentLinkResponse.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def deliver_at(self):
        """Gets the deliver_at of this PaymentLinkResponse.

        The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :return: The deliver_at of this PaymentLinkResponse.
        :rtype: datetime
        """
        return self._deliver_at

    @deliver_at.setter
    def deliver_at(self, deliver_at):
        """Sets the deliver_at of this PaymentLinkResponse.

        The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :param deliver_at: The deliver_at of this PaymentLinkResponse.
        :type deliver_at: datetime
        """

        self._deliver_at = deliver_at

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PaymentLinkResponse.

        The address where the purchased goods should be delivered.

        :return: The delivery_address of this PaymentLinkResponse.
        :rtype: Address
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PaymentLinkResponse.

        The address where the purchased goods should be delivered.

        :param delivery_address: The delivery_address of this PaymentLinkResponse.
        :type delivery_address: Address
        """

        self._delivery_address = delivery_address

    @property
    def description(self):
        """Gets the description of this PaymentLinkResponse.

        A short description visible on the payment page. Maximum length: 280 characters.

        :return: The description of this PaymentLinkResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PaymentLinkResponse.

        A short description visible on the payment page. Maximum length: 280 characters.

        :param description: The description of this PaymentLinkResponse.
        :type description: str
        """

        self._description = description

    @property
    def expires_at(self):
        """Gets the expires_at of this PaymentLinkResponse.

        The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone designator **Z**: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30Z**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.

        :return: The expires_at of this PaymentLinkResponse.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PaymentLinkResponse.

        The date when the payment link expires.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format with time zone designator **Z**: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30Z**.  The maximum expiry date is 70 days after the payment link is created.  If not provided, the payment link expires 24 hours after it was created.

        :param expires_at: The expires_at of this PaymentLinkResponse.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def id(self):
        """Gets the id of this PaymentLinkResponse.

        A unique identifier of the payment link.

        :return: The id of this PaymentLinkResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentLinkResponse.

        A unique identifier of the payment link.

        :param id: The id of this PaymentLinkResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def installment_options(self):
        """Gets the installment_options of this PaymentLinkResponse.

        A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.

        :return: The installment_options of this PaymentLinkResponse.
        :rtype: Dict[str, InstallmentOption]
        """
        return self._installment_options

    @installment_options.setter
    def installment_options(self, installment_options):
        """Sets the installment_options of this PaymentLinkResponse.

        A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.

        :param installment_options: The installment_options of this PaymentLinkResponse.
        :type installment_options: Dict[str, InstallmentOption]
        """

        self._installment_options = installment_options

    @property
    def line_items(self):
        """Gets the line_items of this PaymentLinkResponse.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.

        :return: The line_items of this PaymentLinkResponse.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PaymentLinkResponse.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. This parameter is required for open invoice (_buy now, pay later_) payment methods such Afterpay, Clearpay, Klarna, RatePay, and Zip.

        :param line_items: The line_items of this PaymentLinkResponse.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def manual_capture(self):
        """Gets the manual_capture of this PaymentLinkResponse.

        Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).

        :return: The manual_capture of this PaymentLinkResponse.
        :rtype: bool
        """
        return self._manual_capture

    @manual_capture.setter
    def manual_capture(self, manual_capture):
        """Sets the manual_capture of this PaymentLinkResponse.

        Indicates if the payment must be [captured manually](https://docs.adyen.com/online-payments/capture).

        :param manual_capture: The manual_capture of this PaymentLinkResponse.
        :type manual_capture: bool
        """

        self._manual_capture = manual_capture

    @property
    def mcc(self):
        """Gets the mcc of this PaymentLinkResponse.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :return: The mcc of this PaymentLinkResponse.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this PaymentLinkResponse.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :param mcc: The mcc of this PaymentLinkResponse.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentLinkResponse.

        The merchant account identifier for which the payment link is created.

        :return: The merchant_account of this PaymentLinkResponse.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentLinkResponse.

        The merchant account identifier for which the payment link is created.

        :param merchant_account: The merchant_account of this PaymentLinkResponse.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_order_reference(self):
        """Gets the merchant_order_reference of this PaymentLinkResponse.

        This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.

        :return: The merchant_order_reference of this PaymentLinkResponse.
        :rtype: str
        """
        return self._merchant_order_reference

    @merchant_order_reference.setter
    def merchant_order_reference(self, merchant_order_reference):
        """Sets the merchant_order_reference of this PaymentLinkResponse.

        This reference allows linking multiple transactions to each other for reporting purposes (for example, order auth-rate). The reference should be unique per billing cycle.

        :param merchant_order_reference: The merchant_order_reference of this PaymentLinkResponse.
        :type merchant_order_reference: str
        """

        self._merchant_order_reference = merchant_order_reference

    @property
    def metadata(self):
        """Gets the metadata of this PaymentLinkResponse.

        Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\" * Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\" * A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.

        :return: The metadata of this PaymentLinkResponse.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentLinkResponse.

        Metadata consists of entries, each of which includes a key and a value. Limitations: * Maximum 20 key-value pairs per request. Otherwise, error \"177\" occurs: \"Metadata size exceeds limit\" * Maximum 20 characters per key. Otherwise, error \"178\" occurs: \"Metadata key size exceeds limit\" * A key cannot have the name `checkout.linkId`. Any value that you provide with this key is going to be replaced by the real payment link ID.

        :param metadata: The metadata of this PaymentLinkResponse.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def recurring_processing_model(self):
        """Gets the recurring_processing_model of this PaymentLinkResponse.

        Defines a recurring payment type. Required when `storePaymentMethodMode` is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :return: The recurring_processing_model of this PaymentLinkResponse.
        :rtype: str
        """
        return self._recurring_processing_model

    @recurring_processing_model.setter
    def recurring_processing_model(self, recurring_processing_model):
        """Sets the recurring_processing_model of this PaymentLinkResponse.

        Defines a recurring payment type. Required when `storePaymentMethodMode` is set to **askForConsent** or **enabled**. Possible values: * **Subscription** – A transaction for a fixed or variable amount, which follows a fixed schedule. * **CardOnFile** – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * **UnscheduledCardOnFile** – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or has variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :param recurring_processing_model: The recurring_processing_model of this PaymentLinkResponse.
        :type recurring_processing_model: str
        """
        allowed_values = ["CardOnFile", "Subscription", "UnscheduledCardOnFile"]  # noqa: E501
        if recurring_processing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recurring_processing_model` ({0}), must be one of {1}"
                .format(recurring_processing_model, allowed_values)
            )

        self._recurring_processing_model = recurring_processing_model

    @property
    def reference(self):
        """Gets the reference of this PaymentLinkResponse.

        A reference that is used to uniquely identify the payment in future communications about the payment status.

        :return: The reference of this PaymentLinkResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentLinkResponse.

        A reference that is used to uniquely identify the payment in future communications about the payment status.

        :param reference: The reference of this PaymentLinkResponse.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def required_shopper_fields(self):
        """Gets the required_shopper_fields of this PaymentLinkResponse.

        List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper's email address. * **shopperName** – The shopper's full name. * **telephoneNumber** – The shopper's phone number. 

        :return: The required_shopper_fields of this PaymentLinkResponse.
        :rtype: List[str]
        """
        return self._required_shopper_fields

    @required_shopper_fields.setter
    def required_shopper_fields(self, required_shopper_fields):
        """Sets the required_shopper_fields of this PaymentLinkResponse.

        List of fields that the shopper has to provide on the payment page before completing the payment. For more information, refer to [Provide shopper information](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#shopper-information).  Possible values: * **billingAddress** – The address where to send the invoice. * **deliveryAddress** – The address where the purchased goods should be delivered. * **shopperEmail** – The shopper's email address. * **shopperName** – The shopper's full name. * **telephoneNumber** – The shopper's phone number. 

        :param required_shopper_fields: The required_shopper_fields of this PaymentLinkResponse.
        :type required_shopper_fields: List[str]
        """
        allowed_values = ["billingAddress", "deliveryAddress", "shopperEmail", "shopperName", "telephoneNumber"]  # noqa: E501
        if not set(required_shopper_fields).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `required_shopper_fields` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(required_shopper_fields) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._required_shopper_fields = required_shopper_fields

    @property
    def return_url(self):
        """Gets the return_url of this PaymentLinkResponse.

        Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.

        :return: The return_url of this PaymentLinkResponse.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PaymentLinkResponse.

        Website URL used for redirection after payment is completed. If provided, a **Continue** button will be shown on the payment page. If shoppers select the button, they are redirected to the specified URL.

        :param return_url: The return_url of this PaymentLinkResponse.
        :type return_url: str
        """

        self._return_url = return_url

    @property
    def reusable(self):
        """Gets the reusable of this PaymentLinkResponse.

        Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.

        :return: The reusable of this PaymentLinkResponse.
        :rtype: bool
        """
        return self._reusable

    @reusable.setter
    def reusable(self, reusable):
        """Sets the reusable of this PaymentLinkResponse.

        Indicates whether the payment link can be reused for multiple payments. If not provided, this defaults to **false** which means the link can be used for one successful payment only.

        :param reusable: The reusable of this PaymentLinkResponse.
        :type reusable: bool
        """

        self._reusable = reusable

    @property
    def risk_data(self):
        """Gets the risk_data of this PaymentLinkResponse.

        Any risk-related settings to apply to the payment.

        :return: The risk_data of this PaymentLinkResponse.
        :rtype: RiskData
        """
        return self._risk_data

    @risk_data.setter
    def risk_data(self, risk_data):
        """Sets the risk_data of this PaymentLinkResponse.

        Any risk-related settings to apply to the payment.

        :param risk_data: The risk_data of this PaymentLinkResponse.
        :type risk_data: RiskData
        """

        self._risk_data = risk_data

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PaymentLinkResponse.

        The shopper's email address.

        :return: The shopper_email of this PaymentLinkResponse.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PaymentLinkResponse.

        The shopper's email address.

        :param shopper_email: The shopper_email of this PaymentLinkResponse.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentLinkResponse.

        The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).

        :return: The shopper_locale of this PaymentLinkResponse.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentLinkResponse.

        The language to be used in the payment page, specified by a combination of a language and country code. For example, `en-US`.  For a list of shopper locales that Pay by Link supports, refer to [Language and localization](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#language).

        :param shopper_locale: The shopper_locale of this PaymentLinkResponse.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_name(self):
        """Gets the shopper_name of this PaymentLinkResponse.

        The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.

        :return: The shopper_name of this PaymentLinkResponse.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this PaymentLinkResponse.

        The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.

        :param shopper_name: The shopper_name of this PaymentLinkResponse.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PaymentLinkResponse.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this PaymentLinkResponse.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PaymentLinkResponse.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this PaymentLinkResponse.
        :type shopper_reference: str
        """
        if shopper_reference is not None and len(shopper_reference) > 256:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `256`")
        if shopper_reference is not None and len(shopper_reference) < 3:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `3`")

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this PaymentLinkResponse.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :return: The shopper_statement of this PaymentLinkResponse.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this PaymentLinkResponse.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :param shopper_statement: The shopper_statement of this PaymentLinkResponse.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def show_remove_payment_method_button(self):
        """Gets the show_remove_payment_method_button of this PaymentLinkResponse.

        Set to **false** to hide the button that lets the shopper remove a stored payment method.

        :return: The show_remove_payment_method_button of this PaymentLinkResponse.
        :rtype: bool
        """
        return self._show_remove_payment_method_button

    @show_remove_payment_method_button.setter
    def show_remove_payment_method_button(self, show_remove_payment_method_button):
        """Sets the show_remove_payment_method_button of this PaymentLinkResponse.

        Set to **false** to hide the button that lets the shopper remove a stored payment method.

        :param show_remove_payment_method_button: The show_remove_payment_method_button of this PaymentLinkResponse.
        :type show_remove_payment_method_button: bool
        """

        self._show_remove_payment_method_button = show_remove_payment_method_button

    @property
    def social_security_number(self):
        """Gets the social_security_number of this PaymentLinkResponse.

        The shopper's social security number.

        :return: The social_security_number of this PaymentLinkResponse.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this PaymentLinkResponse.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this PaymentLinkResponse.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def split_card_funding_sources(self):
        """Gets the split_card_funding_sources of this PaymentLinkResponse.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :return: The split_card_funding_sources of this PaymentLinkResponse.
        :rtype: bool
        """
        return self._split_card_funding_sources

    @split_card_funding_sources.setter
    def split_card_funding_sources(self, split_card_funding_sources):
        """Sets the split_card_funding_sources of this PaymentLinkResponse.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :param split_card_funding_sources: The split_card_funding_sources of this PaymentLinkResponse.
        :type split_card_funding_sources: bool
        """

        self._split_card_funding_sources = split_card_funding_sources

    @property
    def splits(self):
        """Gets the splits of this PaymentLinkResponse.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :return: The splits of this PaymentLinkResponse.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this PaymentLinkResponse.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :param splits: The splits of this PaymentLinkResponse.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def status(self):
        """Gets the status of this PaymentLinkResponse.

        Status of the payment link. Possible values: * **active**: The link can be used to make payments. * **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments. * **completed**: The shopper completed the payment. * **paymentPending**: The shopper is in the process of making the payment. Applies to payment methods with an asynchronous flow.

        :return: The status of this PaymentLinkResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentLinkResponse.

        Status of the payment link. Possible values: * **active**: The link can be used to make payments. * **expired**: The expiry date for the payment link has passed. Shoppers can no longer use the link to make payments. * **completed**: The shopper completed the payment. * **paymentPending**: The shopper is in the process of making the payment. Applies to payment methods with an asynchronous flow.

        :param status: The status of this PaymentLinkResponse.
        :type status: str
        """
        allowed_values = ["active", "completed", "expired", "paid", "paymentPending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def store(self):
        """Gets the store of this PaymentLinkResponse.

        The physical store, for which this payment is processed.

        :return: The store of this PaymentLinkResponse.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PaymentLinkResponse.

        The physical store, for which this payment is processed.

        :param store: The store of this PaymentLinkResponse.
        :type store: str
        """

        self._store = store

    @property
    def store_payment_method_mode(self):
        """Gets the store_payment_method_mode of this PaymentLinkResponse.

        Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the `recurringProcessingModel` parameter.

        :return: The store_payment_method_mode of this PaymentLinkResponse.
        :rtype: str
        """
        return self._store_payment_method_mode

    @store_payment_method_mode.setter
    def store_payment_method_mode(self, store_payment_method_mode):
        """Sets the store_payment_method_mode of this PaymentLinkResponse.

        Indicates if the details of the payment method will be stored for the shopper. Possible values: * **disabled** – No details will be stored (default). * **askForConsent** – If the `shopperReference` is provided, the UI lets the shopper choose if they want their payment details to be stored. * **enabled** – If the `shopperReference` is provided, the details will be stored without asking the shopper for consent.   When set to **askForConsent** or **enabled**, you must also include the `recurringProcessingModel` parameter.

        :param store_payment_method_mode: The store_payment_method_mode of this PaymentLinkResponse.
        :type store_payment_method_mode: str
        """
        allowed_values = ["askForConsent", "disabled", "enabled"]  # noqa: E501
        if store_payment_method_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `store_payment_method_mode` ({0}), must be one of {1}"
                .format(store_payment_method_mode, allowed_values)
            )

        self._store_payment_method_mode = store_payment_method_mode

    @property
    def telephone_number(self):
        """Gets the telephone_number of this PaymentLinkResponse.

        The shopper's telephone number.

        :return: The telephone_number of this PaymentLinkResponse.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this PaymentLinkResponse.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this PaymentLinkResponse.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def theme_id(self):
        """Gets the theme_id of this PaymentLinkResponse.

        A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.

        :return: The theme_id of this PaymentLinkResponse.
        :rtype: str
        """
        return self._theme_id

    @theme_id.setter
    def theme_id(self, theme_id):
        """Sets the theme_id of this PaymentLinkResponse.

        A [theme](https://docs.adyen.com/unified-commerce/pay-by-link/payment-links/api#themes) to customize the appearance of the payment page. If not specified, the payment page is rendered according to the theme set as default in your Customer Area.

        :param theme_id: The theme_id of this PaymentLinkResponse.
        :type theme_id: str
        """

        self._theme_id = theme_id

    @property
    def updated_at(self):
        """Gets the updated_at of this PaymentLinkResponse.

        The date when the payment link status was updated.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :return: The updated_at of this PaymentLinkResponse.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this PaymentLinkResponse.

        The date when the payment link status was updated.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :param updated_at: The updated_at of this PaymentLinkResponse.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def url(self):
        """Gets the url of this PaymentLinkResponse.

        The URL at which the shopper can complete the payment.

        :return: The url of this PaymentLinkResponse.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PaymentLinkResponse.

        The URL at which the shopper can complete the payment.

        :param url: The url of this PaymentLinkResponse.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url
