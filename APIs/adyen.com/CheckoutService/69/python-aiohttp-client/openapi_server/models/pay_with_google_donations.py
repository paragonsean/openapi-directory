# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayWithGoogleDonations(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checkout_attempt_id: str=None, funding_source: str=None, google_pay_token: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str='paywithgoogle'):
        """PayWithGoogleDonations - a model defined in OpenAPI

        :param checkout_attempt_id: The checkout_attempt_id of this PayWithGoogleDonations.
        :param funding_source: The funding_source of this PayWithGoogleDonations.
        :param google_pay_token: The google_pay_token of this PayWithGoogleDonations.
        :param recurring_detail_reference: The recurring_detail_reference of this PayWithGoogleDonations.
        :param stored_payment_method_id: The stored_payment_method_id of this PayWithGoogleDonations.
        :param type: The type of this PayWithGoogleDonations.
        """
        self.openapi_types = {
            'checkout_attempt_id': str,
            'funding_source': str,
            'google_pay_token': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str
        }

        self.attribute_map = {
            'checkout_attempt_id': 'checkoutAttemptId',
            'funding_source': 'fundingSource',
            'google_pay_token': 'googlePayToken',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type'
        }

        self._checkout_attempt_id = checkout_attempt_id
        self._funding_source = funding_source
        self._google_pay_token = google_pay_token
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayWithGoogleDonations':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayWithGoogleDonations of this PayWithGoogleDonations.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checkout_attempt_id(self):
        """Gets the checkout_attempt_id of this PayWithGoogleDonations.

        The checkout attempt identifier.

        :return: The checkout_attempt_id of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._checkout_attempt_id

    @checkout_attempt_id.setter
    def checkout_attempt_id(self, checkout_attempt_id):
        """Sets the checkout_attempt_id of this PayWithGoogleDonations.

        The checkout attempt identifier.

        :param checkout_attempt_id: The checkout_attempt_id of this PayWithGoogleDonations.
        :type checkout_attempt_id: str
        """

        self._checkout_attempt_id = checkout_attempt_id

    @property
    def funding_source(self):
        """Gets the funding_source of this PayWithGoogleDonations.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this PayWithGoogleDonations.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this PayWithGoogleDonations.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def google_pay_token(self):
        """Gets the google_pay_token of this PayWithGoogleDonations.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :return: The google_pay_token of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._google_pay_token

    @google_pay_token.setter
    def google_pay_token(self, google_pay_token):
        """Sets the google_pay_token of this PayWithGoogleDonations.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :param google_pay_token: The google_pay_token of this PayWithGoogleDonations.
        :type google_pay_token: str
        """
        if google_pay_token is None:
            raise ValueError("Invalid value for `google_pay_token`, must not be `None`")

        self._google_pay_token = google_pay_token

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this PayWithGoogleDonations.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this PayWithGoogleDonations.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this PayWithGoogleDonations.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this PayWithGoogleDonations.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this PayWithGoogleDonations.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this PayWithGoogleDonations.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this PayWithGoogleDonations.

        **paywithgoogle**

        :return: The type of this PayWithGoogleDonations.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PayWithGoogleDonations.

        **paywithgoogle**

        :param type: The type of this PayWithGoogleDonations.
        :type type: str
        """
        allowed_values = ["paywithgoogle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
