/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRiskData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRiskData::OAIRiskData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRiskData::OAIRiskData() {
    this->initializeModel();
}

OAIRiskData::~OAIRiskData() {}

void OAIRiskData::initializeModel() {

    m_client_data_isSet = false;
    m_client_data_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_fraud_offset_isSet = false;
    m_fraud_offset_isValid = false;

    m_profile_reference_isSet = false;
    m_profile_reference_isValid = false;
}

void OAIRiskData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRiskData::fromJsonObject(QJsonObject json) {

    m_client_data_isValid = ::OpenAPI::fromJsonValue(m_client_data, json[QString("clientData")]);
    m_client_data_isSet = !json[QString("clientData")].isNull() && m_client_data_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("customFields")]);
    m_custom_fields_isSet = !json[QString("customFields")].isNull() && m_custom_fields_isValid;

    m_fraud_offset_isValid = ::OpenAPI::fromJsonValue(m_fraud_offset, json[QString("fraudOffset")]);
    m_fraud_offset_isSet = !json[QString("fraudOffset")].isNull() && m_fraud_offset_isValid;

    m_profile_reference_isValid = ::OpenAPI::fromJsonValue(m_profile_reference, json[QString("profileReference")]);
    m_profile_reference_isSet = !json[QString("profileReference")].isNull() && m_profile_reference_isValid;
}

QString OAIRiskData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRiskData::asJsonObject() const {
    QJsonObject obj;
    if (m_client_data_isSet) {
        obj.insert(QString("clientData"), ::OpenAPI::toJsonValue(m_client_data));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("customFields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_fraud_offset_isSet) {
        obj.insert(QString("fraudOffset"), ::OpenAPI::toJsonValue(m_fraud_offset));
    }
    if (m_profile_reference_isSet) {
        obj.insert(QString("profileReference"), ::OpenAPI::toJsonValue(m_profile_reference));
    }
    return obj;
}

QString OAIRiskData::getClientData() const {
    return m_client_data;
}
void OAIRiskData::setClientData(const QString &client_data) {
    m_client_data = client_data;
    m_client_data_isSet = true;
}

bool OAIRiskData::is_client_data_Set() const{
    return m_client_data_isSet;
}

bool OAIRiskData::is_client_data_Valid() const{
    return m_client_data_isValid;
}

QMap<QString, QString> OAIRiskData::getCustomFields() const {
    return m_custom_fields;
}
void OAIRiskData::setCustomFields(const QMap<QString, QString> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIRiskData::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIRiskData::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint32 OAIRiskData::getFraudOffset() const {
    return m_fraud_offset;
}
void OAIRiskData::setFraudOffset(const qint32 &fraud_offset) {
    m_fraud_offset = fraud_offset;
    m_fraud_offset_isSet = true;
}

bool OAIRiskData::is_fraud_offset_Set() const{
    return m_fraud_offset_isSet;
}

bool OAIRiskData::is_fraud_offset_Valid() const{
    return m_fraud_offset_isValid;
}

QString OAIRiskData::getProfileReference() const {
    return m_profile_reference;
}
void OAIRiskData::setProfileReference(const QString &profile_reference) {
    m_profile_reference = profile_reference;
    m_profile_reference_isSet = true;
}

bool OAIRiskData::is_profile_reference_Set() const{
    return m_profile_reference_isSet;
}

bool OAIRiskData::is_profile_reference_Valid() const{
    return m_profile_reference_isValid;
}

bool OAIRiskData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRiskData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
