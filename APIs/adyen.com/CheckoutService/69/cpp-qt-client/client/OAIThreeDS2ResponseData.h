/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIThreeDS2ResponseData.h
 *
 * 
 */

#ifndef OAIThreeDS2ResponseData_H
#define OAIThreeDS2ResponseData_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIThreeDS2ResponseData : public OAIObject {
public:
    OAIThreeDS2ResponseData();
    OAIThreeDS2ResponseData(QString json);
    ~OAIThreeDS2ResponseData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcsChallengeMandated() const;
    void setAcsChallengeMandated(const QString &acs_challenge_mandated);
    bool is_acs_challenge_mandated_Set() const;
    bool is_acs_challenge_mandated_Valid() const;

    QString getAcsOperatorId() const;
    void setAcsOperatorId(const QString &acs_operator_id);
    bool is_acs_operator_id_Set() const;
    bool is_acs_operator_id_Valid() const;

    QString getAcsReferenceNumber() const;
    void setAcsReferenceNumber(const QString &acs_reference_number);
    bool is_acs_reference_number_Set() const;
    bool is_acs_reference_number_Valid() const;

    QString getAcsSignedContent() const;
    void setAcsSignedContent(const QString &acs_signed_content);
    bool is_acs_signed_content_Set() const;
    bool is_acs_signed_content_Valid() const;

    QString getAcsTransId() const;
    void setAcsTransId(const QString &acs_trans_id);
    bool is_acs_trans_id_Set() const;
    bool is_acs_trans_id_Valid() const;

    QString getAcsUrl() const;
    void setAcsUrl(const QString &acs_url);
    bool is_acs_url_Set() const;
    bool is_acs_url_Valid() const;

    QString getAuthenticationType() const;
    void setAuthenticationType(const QString &authentication_type);
    bool is_authentication_type_Set() const;
    bool is_authentication_type_Valid() const;

    QString getCardHolderInfo() const;
    void setCardHolderInfo(const QString &card_holder_info);
    bool is_card_holder_info_Set() const;
    bool is_card_holder_info_Valid() const;

    QString getCavvAlgorithm() const;
    void setCavvAlgorithm(const QString &cavv_algorithm);
    bool is_cavv_algorithm_Set() const;
    bool is_cavv_algorithm_Valid() const;

    QString getChallengeIndicator() const;
    void setChallengeIndicator(const QString &challenge_indicator);
    bool is_challenge_indicator_Set() const;
    bool is_challenge_indicator_Valid() const;

    QString getDsReferenceNumber() const;
    void setDsReferenceNumber(const QString &ds_reference_number);
    bool is_ds_reference_number_Set() const;
    bool is_ds_reference_number_Valid() const;

    QString getDsTransId() const;
    void setDsTransId(const QString &ds_trans_id);
    bool is_ds_trans_id_Set() const;
    bool is_ds_trans_id_Valid() const;

    QString getExemptionIndicator() const;
    void setExemptionIndicator(const QString &exemption_indicator);
    bool is_exemption_indicator_Set() const;
    bool is_exemption_indicator_Valid() const;

    QString getMessageVersion() const;
    void setMessageVersion(const QString &message_version);
    bool is_message_version_Set() const;
    bool is_message_version_Valid() const;

    QString getRiskScore() const;
    void setRiskScore(const QString &risk_score);
    bool is_risk_score_Set() const;
    bool is_risk_score_Valid() const;

    QString getSdkEphemPubKey() const;
    void setSdkEphemPubKey(const QString &sdk_ephem_pub_key);
    bool is_sdk_ephem_pub_key_Set() const;
    bool is_sdk_ephem_pub_key_Valid() const;

    QString getThreeDsServerTransId() const;
    void setThreeDsServerTransId(const QString &three_ds_server_trans_id);
    bool is_three_ds_server_trans_id_Set() const;
    bool is_three_ds_server_trans_id_Valid() const;

    QString getTransStatus() const;
    void setTransStatus(const QString &trans_status);
    bool is_trans_status_Set() const;
    bool is_trans_status_Valid() const;

    QString getTransStatusReason() const;
    void setTransStatusReason(const QString &trans_status_reason);
    bool is_trans_status_reason_Set() const;
    bool is_trans_status_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_acs_challenge_mandated;
    bool m_acs_challenge_mandated_isSet;
    bool m_acs_challenge_mandated_isValid;

    QString m_acs_operator_id;
    bool m_acs_operator_id_isSet;
    bool m_acs_operator_id_isValid;

    QString m_acs_reference_number;
    bool m_acs_reference_number_isSet;
    bool m_acs_reference_number_isValid;

    QString m_acs_signed_content;
    bool m_acs_signed_content_isSet;
    bool m_acs_signed_content_isValid;

    QString m_acs_trans_id;
    bool m_acs_trans_id_isSet;
    bool m_acs_trans_id_isValid;

    QString m_acs_url;
    bool m_acs_url_isSet;
    bool m_acs_url_isValid;

    QString m_authentication_type;
    bool m_authentication_type_isSet;
    bool m_authentication_type_isValid;

    QString m_card_holder_info;
    bool m_card_holder_info_isSet;
    bool m_card_holder_info_isValid;

    QString m_cavv_algorithm;
    bool m_cavv_algorithm_isSet;
    bool m_cavv_algorithm_isValid;

    QString m_challenge_indicator;
    bool m_challenge_indicator_isSet;
    bool m_challenge_indicator_isValid;

    QString m_ds_reference_number;
    bool m_ds_reference_number_isSet;
    bool m_ds_reference_number_isValid;

    QString m_ds_trans_id;
    bool m_ds_trans_id_isSet;
    bool m_ds_trans_id_isValid;

    QString m_exemption_indicator;
    bool m_exemption_indicator_isSet;
    bool m_exemption_indicator_isValid;

    QString m_message_version;
    bool m_message_version_isSet;
    bool m_message_version_isValid;

    QString m_risk_score;
    bool m_risk_score_isSet;
    bool m_risk_score_isValid;

    QString m_sdk_ephem_pub_key;
    bool m_sdk_ephem_pub_key_isSet;
    bool m_sdk_ephem_pub_key_isValid;

    QString m_three_ds_server_trans_id;
    bool m_three_ds_server_trans_id_isSet;
    bool m_three_ds_server_trans_id_isValid;

    QString m_trans_status;
    bool m_trans_status_isSet;
    bool m_trans_status_isValid;

    QString m_trans_status_reason;
    bool m_trans_status_reason_isSet;
    bool m_trans_status_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIThreeDS2ResponseData)

#endif // OAIThreeDS2ResponseData_H
