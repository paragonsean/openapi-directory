/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AcctInfo from './AcctInfo';
import DeviceRenderOptions from './DeviceRenderOptions';
import Phone from './Phone';
import SDKEphemPubKey from './SDKEphemPubKey';
import ThreeDSRequestorAuthenticationInfo from './ThreeDSRequestorAuthenticationInfo';
import ThreeDSRequestorPriorAuthenticationInfo from './ThreeDSRequestorPriorAuthenticationInfo';

/**
 * The ThreeDS2RequestFields model module.
 * @module model/ThreeDS2RequestFields
 * @version 69
 */
class ThreeDS2RequestFields {
    /**
     * Constructs a new <code>ThreeDS2RequestFields</code>.
     * @alias module:model/ThreeDS2RequestFields
     */
    constructor() { 
        
        ThreeDS2RequestFields.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['authenticationOnly'] = false;
        obj['sdkMaxTimeout'] = 60;
    }

    /**
     * Constructs a <code>ThreeDS2RequestFields</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThreeDS2RequestFields} obj Optional instance to populate.
     * @return {module:model/ThreeDS2RequestFields} The populated <code>ThreeDS2RequestFields</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThreeDS2RequestFields();

            if (data.hasOwnProperty('acctInfo')) {
                obj['acctInfo'] = AcctInfo.constructFromObject(data['acctInfo']);
            }
            if (data.hasOwnProperty('acctType')) {
                obj['acctType'] = ApiClient.convertToType(data['acctType'], 'String');
            }
            if (data.hasOwnProperty('acquirerBIN')) {
                obj['acquirerBIN'] = ApiClient.convertToType(data['acquirerBIN'], 'String');
            }
            if (data.hasOwnProperty('acquirerMerchantID')) {
                obj['acquirerMerchantID'] = ApiClient.convertToType(data['acquirerMerchantID'], 'String');
            }
            if (data.hasOwnProperty('addrMatch')) {
                obj['addrMatch'] = ApiClient.convertToType(data['addrMatch'], 'String');
            }
            if (data.hasOwnProperty('authenticationOnly')) {
                obj['authenticationOnly'] = ApiClient.convertToType(data['authenticationOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('challengeIndicator')) {
                obj['challengeIndicator'] = ApiClient.convertToType(data['challengeIndicator'], 'String');
            }
            if (data.hasOwnProperty('deviceRenderOptions')) {
                obj['deviceRenderOptions'] = DeviceRenderOptions.constructFromObject(data['deviceRenderOptions']);
            }
            if (data.hasOwnProperty('homePhone')) {
                obj['homePhone'] = Phone.constructFromObject(data['homePhone']);
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('merchantName')) {
                obj['merchantName'] = ApiClient.convertToType(data['merchantName'], 'String');
            }
            if (data.hasOwnProperty('messageVersion')) {
                obj['messageVersion'] = ApiClient.convertToType(data['messageVersion'], 'String');
            }
            if (data.hasOwnProperty('mobilePhone')) {
                obj['mobilePhone'] = Phone.constructFromObject(data['mobilePhone']);
            }
            if (data.hasOwnProperty('notificationURL')) {
                obj['notificationURL'] = ApiClient.convertToType(data['notificationURL'], 'String');
            }
            if (data.hasOwnProperty('payTokenInd')) {
                obj['payTokenInd'] = ApiClient.convertToType(data['payTokenInd'], 'Boolean');
            }
            if (data.hasOwnProperty('paymentAuthenticationUseCase')) {
                obj['paymentAuthenticationUseCase'] = ApiClient.convertToType(data['paymentAuthenticationUseCase'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('purchaseInstalData')) {
                obj['purchaseInstalData'] = ApiClient.convertToType(data['purchaseInstalData'], 'String');
            }
            if (data.hasOwnProperty('recurringExpiry')) {
                obj['recurringExpiry'] = ApiClient.convertToType(data['recurringExpiry'], 'String');
            }
            if (data.hasOwnProperty('recurringFrequency')) {
                obj['recurringFrequency'] = ApiClient.convertToType(data['recurringFrequency'], 'String');
            }
            if (data.hasOwnProperty('sdkAppID')) {
                obj['sdkAppID'] = ApiClient.convertToType(data['sdkAppID'], 'String');
            }
            if (data.hasOwnProperty('sdkEphemPubKey')) {
                obj['sdkEphemPubKey'] = SDKEphemPubKey.constructFromObject(data['sdkEphemPubKey']);
            }
            if (data.hasOwnProperty('sdkMaxTimeout')) {
                obj['sdkMaxTimeout'] = ApiClient.convertToType(data['sdkMaxTimeout'], 'Number');
            }
            if (data.hasOwnProperty('sdkReferenceNumber')) {
                obj['sdkReferenceNumber'] = ApiClient.convertToType(data['sdkReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('sdkTransID')) {
                obj['sdkTransID'] = ApiClient.convertToType(data['sdkTransID'], 'String');
            }
            if (data.hasOwnProperty('threeDSCompInd')) {
                obj['threeDSCompInd'] = ApiClient.convertToType(data['threeDSCompInd'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorAuthenticationInd')) {
                obj['threeDSRequestorAuthenticationInd'] = ApiClient.convertToType(data['threeDSRequestorAuthenticationInd'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorAuthenticationInfo')) {
                obj['threeDSRequestorAuthenticationInfo'] = ThreeDSRequestorAuthenticationInfo.constructFromObject(data['threeDSRequestorAuthenticationInfo']);
            }
            if (data.hasOwnProperty('threeDSRequestorChallengeInd')) {
                obj['threeDSRequestorChallengeInd'] = ApiClient.convertToType(data['threeDSRequestorChallengeInd'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorID')) {
                obj['threeDSRequestorID'] = ApiClient.convertToType(data['threeDSRequestorID'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorName')) {
                obj['threeDSRequestorName'] = ApiClient.convertToType(data['threeDSRequestorName'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorPriorAuthenticationInfo')) {
                obj['threeDSRequestorPriorAuthenticationInfo'] = ThreeDSRequestorPriorAuthenticationInfo.constructFromObject(data['threeDSRequestorPriorAuthenticationInfo']);
            }
            if (data.hasOwnProperty('threeDSRequestorURL')) {
                obj['threeDSRequestorURL'] = ApiClient.convertToType(data['threeDSRequestorURL'], 'String');
            }
            if (data.hasOwnProperty('transType')) {
                obj['transType'] = ApiClient.convertToType(data['transType'], 'String');
            }
            if (data.hasOwnProperty('transactionType')) {
                obj['transactionType'] = ApiClient.convertToType(data['transactionType'], 'String');
            }
            if (data.hasOwnProperty('whiteListStatus')) {
                obj['whiteListStatus'] = ApiClient.convertToType(data['whiteListStatus'], 'String');
            }
            if (data.hasOwnProperty('workPhone')) {
                obj['workPhone'] = Phone.constructFromObject(data['workPhone']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThreeDS2RequestFields</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThreeDS2RequestFields</code>.
     */
    static validateJSON(data) {
        // validate the optional field `acctInfo`
        if (data['acctInfo']) { // data not null
          AcctInfo.validateJSON(data['acctInfo']);
        }
        // ensure the json data is a string
        if (data['acctType'] && !(typeof data['acctType'] === 'string' || data['acctType'] instanceof String)) {
            throw new Error("Expected the field `acctType` to be a primitive type in the JSON string but got " + data['acctType']);
        }
        // ensure the json data is a string
        if (data['acquirerBIN'] && !(typeof data['acquirerBIN'] === 'string' || data['acquirerBIN'] instanceof String)) {
            throw new Error("Expected the field `acquirerBIN` to be a primitive type in the JSON string but got " + data['acquirerBIN']);
        }
        // ensure the json data is a string
        if (data['acquirerMerchantID'] && !(typeof data['acquirerMerchantID'] === 'string' || data['acquirerMerchantID'] instanceof String)) {
            throw new Error("Expected the field `acquirerMerchantID` to be a primitive type in the JSON string but got " + data['acquirerMerchantID']);
        }
        // ensure the json data is a string
        if (data['addrMatch'] && !(typeof data['addrMatch'] === 'string' || data['addrMatch'] instanceof String)) {
            throw new Error("Expected the field `addrMatch` to be a primitive type in the JSON string but got " + data['addrMatch']);
        }
        // ensure the json data is a string
        if (data['challengeIndicator'] && !(typeof data['challengeIndicator'] === 'string' || data['challengeIndicator'] instanceof String)) {
            throw new Error("Expected the field `challengeIndicator` to be a primitive type in the JSON string but got " + data['challengeIndicator']);
        }
        // validate the optional field `deviceRenderOptions`
        if (data['deviceRenderOptions']) { // data not null
          DeviceRenderOptions.validateJSON(data['deviceRenderOptions']);
        }
        // validate the optional field `homePhone`
        if (data['homePhone']) { // data not null
          Phone.validateJSON(data['homePhone']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['merchantName'] && !(typeof data['merchantName'] === 'string' || data['merchantName'] instanceof String)) {
            throw new Error("Expected the field `merchantName` to be a primitive type in the JSON string but got " + data['merchantName']);
        }
        // ensure the json data is a string
        if (data['messageVersion'] && !(typeof data['messageVersion'] === 'string' || data['messageVersion'] instanceof String)) {
            throw new Error("Expected the field `messageVersion` to be a primitive type in the JSON string but got " + data['messageVersion']);
        }
        // validate the optional field `mobilePhone`
        if (data['mobilePhone']) { // data not null
          Phone.validateJSON(data['mobilePhone']);
        }
        // ensure the json data is a string
        if (data['notificationURL'] && !(typeof data['notificationURL'] === 'string' || data['notificationURL'] instanceof String)) {
            throw new Error("Expected the field `notificationURL` to be a primitive type in the JSON string but got " + data['notificationURL']);
        }
        // ensure the json data is a string
        if (data['paymentAuthenticationUseCase'] && !(typeof data['paymentAuthenticationUseCase'] === 'string' || data['paymentAuthenticationUseCase'] instanceof String)) {
            throw new Error("Expected the field `paymentAuthenticationUseCase` to be a primitive type in the JSON string but got " + data['paymentAuthenticationUseCase']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is a string
        if (data['purchaseInstalData'] && !(typeof data['purchaseInstalData'] === 'string' || data['purchaseInstalData'] instanceof String)) {
            throw new Error("Expected the field `purchaseInstalData` to be a primitive type in the JSON string but got " + data['purchaseInstalData']);
        }
        // ensure the json data is a string
        if (data['recurringExpiry'] && !(typeof data['recurringExpiry'] === 'string' || data['recurringExpiry'] instanceof String)) {
            throw new Error("Expected the field `recurringExpiry` to be a primitive type in the JSON string but got " + data['recurringExpiry']);
        }
        // ensure the json data is a string
        if (data['recurringFrequency'] && !(typeof data['recurringFrequency'] === 'string' || data['recurringFrequency'] instanceof String)) {
            throw new Error("Expected the field `recurringFrequency` to be a primitive type in the JSON string but got " + data['recurringFrequency']);
        }
        // ensure the json data is a string
        if (data['sdkAppID'] && !(typeof data['sdkAppID'] === 'string' || data['sdkAppID'] instanceof String)) {
            throw new Error("Expected the field `sdkAppID` to be a primitive type in the JSON string but got " + data['sdkAppID']);
        }
        // validate the optional field `sdkEphemPubKey`
        if (data['sdkEphemPubKey']) { // data not null
          SDKEphemPubKey.validateJSON(data['sdkEphemPubKey']);
        }
        // ensure the json data is a string
        if (data['sdkReferenceNumber'] && !(typeof data['sdkReferenceNumber'] === 'string' || data['sdkReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `sdkReferenceNumber` to be a primitive type in the JSON string but got " + data['sdkReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['sdkTransID'] && !(typeof data['sdkTransID'] === 'string' || data['sdkTransID'] instanceof String)) {
            throw new Error("Expected the field `sdkTransID` to be a primitive type in the JSON string but got " + data['sdkTransID']);
        }
        // ensure the json data is a string
        if (data['threeDSCompInd'] && !(typeof data['threeDSCompInd'] === 'string' || data['threeDSCompInd'] instanceof String)) {
            throw new Error("Expected the field `threeDSCompInd` to be a primitive type in the JSON string but got " + data['threeDSCompInd']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorAuthenticationInd'] && !(typeof data['threeDSRequestorAuthenticationInd'] === 'string' || data['threeDSRequestorAuthenticationInd'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorAuthenticationInd` to be a primitive type in the JSON string but got " + data['threeDSRequestorAuthenticationInd']);
        }
        // validate the optional field `threeDSRequestorAuthenticationInfo`
        if (data['threeDSRequestorAuthenticationInfo']) { // data not null
          ThreeDSRequestorAuthenticationInfo.validateJSON(data['threeDSRequestorAuthenticationInfo']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorChallengeInd'] && !(typeof data['threeDSRequestorChallengeInd'] === 'string' || data['threeDSRequestorChallengeInd'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorChallengeInd` to be a primitive type in the JSON string but got " + data['threeDSRequestorChallengeInd']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorID'] && !(typeof data['threeDSRequestorID'] === 'string' || data['threeDSRequestorID'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorID` to be a primitive type in the JSON string but got " + data['threeDSRequestorID']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorName'] && !(typeof data['threeDSRequestorName'] === 'string' || data['threeDSRequestorName'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorName` to be a primitive type in the JSON string but got " + data['threeDSRequestorName']);
        }
        // validate the optional field `threeDSRequestorPriorAuthenticationInfo`
        if (data['threeDSRequestorPriorAuthenticationInfo']) { // data not null
          ThreeDSRequestorPriorAuthenticationInfo.validateJSON(data['threeDSRequestorPriorAuthenticationInfo']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorURL'] && !(typeof data['threeDSRequestorURL'] === 'string' || data['threeDSRequestorURL'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorURL` to be a primitive type in the JSON string but got " + data['threeDSRequestorURL']);
        }
        // ensure the json data is a string
        if (data['transType'] && !(typeof data['transType'] === 'string' || data['transType'] instanceof String)) {
            throw new Error("Expected the field `transType` to be a primitive type in the JSON string but got " + data['transType']);
        }
        // ensure the json data is a string
        if (data['transactionType'] && !(typeof data['transactionType'] === 'string' || data['transactionType'] instanceof String)) {
            throw new Error("Expected the field `transactionType` to be a primitive type in the JSON string but got " + data['transactionType']);
        }
        // ensure the json data is a string
        if (data['whiteListStatus'] && !(typeof data['whiteListStatus'] === 'string' || data['whiteListStatus'] instanceof String)) {
            throw new Error("Expected the field `whiteListStatus` to be a primitive type in the JSON string but got " + data['whiteListStatus']);
        }
        // validate the optional field `workPhone`
        if (data['workPhone']) { // data not null
          Phone.validateJSON(data['workPhone']);
        }

        return true;
    }


}



/**
 * Additional information about the Cardholder’s account provided by the 3DS Requestor.
 * @member {module:model/AcctInfo} acctInfo
 */
ThreeDS2RequestFields.prototype['acctInfo'] = undefined;

/**
 * Indicates the type of account. For example, for a multi-account card product. Length: 2 characters. Allowed values: * **01** — Not applicable * **02** — Credit * **03** — Debit
 * @member {module:model/ThreeDS2RequestFields.AcctTypeEnum} acctType
 */
ThreeDS2RequestFields.prototype['acctType'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
 * @member {String} acquirerBIN
 */
ThreeDS2RequestFields.prototype['acquirerBIN'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.
 * @member {String} acquirerMerchantID
 */
ThreeDS2RequestFields.prototype['acquirerMerchantID'] = undefined;

/**
 * Indicates whether the Cardholder Shipping Address and Cardholder Billing Address are the same. Allowed values: * **Y** — Shipping Address matches Billing Address. * **N** — Shipping Address does not match Billing Address.
 * @member {module:model/ThreeDS2RequestFields.AddrMatchEnum} addrMatch
 */
ThreeDS2RequestFields.prototype['addrMatch'] = undefined;

/**
 * If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
 * @member {Boolean} authenticationOnly
 * @default false
 */
ThreeDS2RequestFields.prototype['authenticationOnly'] = false;

/**
 * Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * `noPreference` * `requestNoChallenge` * `requestChallenge` * `requestChallengeAsMandate` 
 * @member {module:model/ThreeDS2RequestFields.ChallengeIndicatorEnum} challengeIndicator
 */
ThreeDS2RequestFields.prototype['challengeIndicator'] = undefined;

/**
 * Display options for the 3D Secure 2 SDK. Optional and only for `deviceChannel` **app**.
 * @member {module:model/DeviceRenderOptions} deviceRenderOptions
 */
ThreeDS2RequestFields.prototype['deviceRenderOptions'] = undefined;

/**
 * The home phone number provided by the Cardholder.
 * @member {module:model/Phone} homePhone
 */
ThreeDS2RequestFields.prototype['homePhone'] = undefined;

/**
 * Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.
 * @member {String} mcc
 */
ThreeDS2RequestFields.prototype['mcc'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. > Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.
 * @member {String} merchantName
 */
ThreeDS2RequestFields.prototype['merchantName'] = undefined;

/**
 * The `messageVersion` value indicating the 3D Secure 2 protocol version.
 * @member {String} messageVersion
 */
ThreeDS2RequestFields.prototype['messageVersion'] = undefined;

/**
 * The mobile phone number provided by the Cardholder.
 * @member {module:model/Phone} mobilePhone
 */
ThreeDS2RequestFields.prototype['mobilePhone'] = undefined;

/**
 * URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
 * @member {String} notificationURL
 */
ThreeDS2RequestFields.prototype['notificationURL'] = undefined;

/**
 * Value **true** indicates that the transaction was de-tokenised prior to being received by the ACS.
 * @member {Boolean} payTokenInd
 */
ThreeDS2RequestFields.prototype['payTokenInd'] = undefined;

/**
 * Indicates the type of payment for which an authentication is requested (message extension)
 * @member {String} paymentAuthenticationUseCase
 */
ThreeDS2RequestFields.prototype['paymentAuthenticationUseCase'] = undefined;

/**
 * The platform of the shopper. Allowed values: * `iOS` * `android` * `browser`
 * @member {module:model/ThreeDS2RequestFields.PlatformEnum} platform
 */
ThreeDS2RequestFields.prototype['platform'] = undefined;

/**
 * Indicates the maximum number of authorisations permitted for instalment payments. Length: 1–3 characters.
 * @member {String} purchaseInstalData
 */
ThreeDS2RequestFields.prototype['purchaseInstalData'] = undefined;

/**
 * Date after which no further authorisations shall be performed. Format: YYYYMMDD
 * @member {String} recurringExpiry
 */
ThreeDS2RequestFields.prototype['recurringExpiry'] = undefined;

/**
 * Indicates the minimum number of days between authorisations. Maximum length: 4 characters.
 * @member {String} recurringFrequency
 */
ThreeDS2RequestFields.prototype['recurringFrequency'] = undefined;

/**
 * The `sdkAppID` value as received from the 3D Secure 2 SDK.
 * @member {String} sdkAppID
 */
ThreeDS2RequestFields.prototype['sdkAppID'] = undefined;

/**
 * The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK.
 * @member {module:model/SDKEphemPubKey} sdkEphemPubKey
 */
ThreeDS2RequestFields.prototype['sdkEphemPubKey'] = undefined;

/**
 * The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
 * @member {Number} sdkMaxTimeout
 * @default 60
 */
ThreeDS2RequestFields.prototype['sdkMaxTimeout'] = 60;

/**
 * The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK.
 * @member {String} sdkReferenceNumber
 */
ThreeDS2RequestFields.prototype['sdkReferenceNumber'] = undefined;

/**
 * The `sdkTransID` value as received from the 3D Secure 2 SDK.
 * @member {String} sdkTransID
 */
ThreeDS2RequestFields.prototype['sdkTransID'] = undefined;

/**
 * Completion indicator for the device fingerprinting.
 * @member {String} threeDSCompInd
 */
ThreeDS2RequestFields.prototype['threeDSCompInd'] = undefined;

/**
 * Indicates the type of Authentication request.
 * @member {String} threeDSRequestorAuthenticationInd
 */
ThreeDS2RequestFields.prototype['threeDSRequestorAuthenticationInd'] = undefined;

/**
 * Information about how the 3DS Requestor authenticated the cardholder before or during the transaction
 * @member {module:model/ThreeDSRequestorAuthenticationInfo} threeDSRequestorAuthenticationInfo
 */
ThreeDS2RequestFields.prototype['threeDSRequestorAuthenticationInfo'] = undefined;

/**
 * Indicates whether a challenge is requested for this transaction. Possible values: * **01** — No preference * **02** — No challenge requested * **03** — Challenge requested (3DS Requestor preference) * **04** — Challenge requested (Mandate) * **05** — No challenge (transactional risk analysis is already performed) * **06** — Data Only
 * @member {module:model/ThreeDS2RequestFields.ThreeDSRequestorChallengeIndEnum} threeDSRequestorChallengeInd
 */
ThreeDS2RequestFields.prototype['threeDSRequestorChallengeInd'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
 * @member {String} threeDSRequestorID
 */
ThreeDS2RequestFields.prototype['threeDSRequestorID'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
 * @member {String} threeDSRequestorName
 */
ThreeDS2RequestFields.prototype['threeDSRequestorName'] = undefined;

/**
 * Information about how the 3DS Requestor authenticated the cardholder as part of a previous 3DS transaction.
 * @member {module:model/ThreeDSRequestorPriorAuthenticationInfo} threeDSRequestorPriorAuthenticationInfo
 */
ThreeDS2RequestFields.prototype['threeDSRequestorPriorAuthenticationInfo'] = undefined;

/**
 * URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
 * @member {String} threeDSRequestorURL
 */
ThreeDS2RequestFields.prototype['threeDSRequestorURL'] = undefined;

/**
 * Identifies the type of transaction being authenticated. Length: 2 characters. Allowed values: * **01** — Goods/Service Purchase * **03** — Check Acceptance * **10** — Account Funding * **11** — Quasi-Cash Transaction * **28** — Prepaid Activation and Load
 * @member {module:model/ThreeDS2RequestFields.TransTypeEnum} transType
 */
ThreeDS2RequestFields.prototype['transType'] = undefined;

/**
 * Identify the type of the transaction being authenticated.
 * @member {module:model/ThreeDS2RequestFields.TransactionTypeEnum} transactionType
 */
ThreeDS2RequestFields.prototype['transactionType'] = undefined;

/**
 * The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.
 * @member {String} whiteListStatus
 */
ThreeDS2RequestFields.prototype['whiteListStatus'] = undefined;

/**
 * The work phone number provided by the Cardholder.
 * @member {module:model/Phone} workPhone
 */
ThreeDS2RequestFields.prototype['workPhone'] = undefined;





/**
 * Allowed values for the <code>acctType</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['AcctTypeEnum'] = {

    /**
     * value: "01"
     * @const
     */
    "01": "01",

    /**
     * value: "02"
     * @const
     */
    "02": "02",

    /**
     * value: "03"
     * @const
     */
    "03": "03"
};


/**
 * Allowed values for the <code>addrMatch</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['AddrMatchEnum'] = {

    /**
     * value: "Y"
     * @const
     */
    "Y": "Y",

    /**
     * value: "N"
     * @const
     */
    "N": "N"
};


/**
 * Allowed values for the <code>challengeIndicator</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['ChallengeIndicatorEnum'] = {

    /**
     * value: "noPreference"
     * @const
     */
    "noPreference": "noPreference",

    /**
     * value: "requestNoChallenge"
     * @const
     */
    "requestNoChallenge": "requestNoChallenge",

    /**
     * value: "requestChallenge"
     * @const
     */
    "requestChallenge": "requestChallenge",

    /**
     * value: "requestChallengeAsMandate"
     * @const
     */
    "requestChallengeAsMandate": "requestChallengeAsMandate"
};


/**
 * Allowed values for the <code>platform</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['PlatformEnum'] = {

    /**
     * value: "iOS"
     * @const
     */
    "iOS": "iOS",

    /**
     * value: "android"
     * @const
     */
    "android": "android",

    /**
     * value: "browser"
     * @const
     */
    "browser": "browser"
};


/**
 * Allowed values for the <code>threeDSRequestorChallengeInd</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['ThreeDSRequestorChallengeIndEnum'] = {

    /**
     * value: "01"
     * @const
     */
    "01": "01",

    /**
     * value: "02"
     * @const
     */
    "02": "02",

    /**
     * value: "03"
     * @const
     */
    "03": "03",

    /**
     * value: "04"
     * @const
     */
    "04": "04",

    /**
     * value: "05"
     * @const
     */
    "05": "05",

    /**
     * value: "06"
     * @const
     */
    "06": "06"
};


/**
 * Allowed values for the <code>transType</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['TransTypeEnum'] = {

    /**
     * value: "01"
     * @const
     */
    "01": "01",

    /**
     * value: "03"
     * @const
     */
    "03": "03",

    /**
     * value: "10"
     * @const
     */
    "10": "10",

    /**
     * value: "11"
     * @const
     */
    "11": "11",

    /**
     * value: "28"
     * @const
     */
    "28": "28"
};


/**
 * Allowed values for the <code>transactionType</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestFields['TransactionTypeEnum'] = {

    /**
     * value: "goodsOrServicePurchase"
     * @const
     */
    "goodsOrServicePurchase": "goodsOrServicePurchase",

    /**
     * value: "checkAcceptance"
     * @const
     */
    "checkAcceptance": "checkAcceptance",

    /**
     * value: "accountFunding"
     * @const
     */
    "accountFunding": "accountFunding",

    /**
     * value: "quasiCashTransaction"
     * @const
     */
    "quasiCashTransaction": "quasiCashTransaction",

    /**
     * value: "prepaidActivationAndLoad"
     * @const
     */
    "prepaidActivationAndLoad": "prepaidActivationAndLoad"
};



export default ThreeDS2RequestFields;

