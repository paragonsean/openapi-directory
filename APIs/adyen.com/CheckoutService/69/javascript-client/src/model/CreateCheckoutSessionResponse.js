/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountInfo from './AccountInfo';
import Amount from './Amount';
import ApplicationInfo from './ApplicationInfo';
import AuthenticationData from './AuthenticationData';
import BalanceCheckRequestAdditionalData from './BalanceCheckRequestAdditionalData';
import BillingAddress from './BillingAddress';
import CheckoutSessionInstallmentOption from './CheckoutSessionInstallmentOption';
import Company from './Company';
import DeliveryAddress from './DeliveryAddress';
import FundOrigin from './FundOrigin';
import FundRecipient from './FundRecipient';
import LineItem from './LineItem';
import Mandate from './Mandate';
import Name from './Name';
import RiskData from './RiskData';
import Split from './Split';
import ThreeDSecureData from './ThreeDSecureData';

/**
 * The CreateCheckoutSessionResponse model module.
 * @module model/CreateCheckoutSessionResponse
 * @version 69
 */
class CreateCheckoutSessionResponse {
    /**
     * Constructs a new <code>CreateCheckoutSessionResponse</code>.
     * @alias module:model/CreateCheckoutSessionResponse
     * @param amount {module:model/Amount} The amount of the payment.
     * @param expiresAt {Date} The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.
     * @param id {String} A unique identifier of the session.
     * @param merchantAccount {String} The merchant account identifier, with which you want to process the transaction.
     * @param reference {String} The reference to uniquely identify a payment.
     * @param returnUrl {String} The URL to return to when a redirect payment is completed.
     */
    constructor(amount, expiresAt, id, merchantAccount, reference, returnUrl) { 
        
        CreateCheckoutSessionResponse.initialize(this, amount, expiresAt, id, merchantAccount, reference, returnUrl);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, expiresAt, id, merchantAccount, reference, returnUrl) { 
        obj['amount'] = amount;
        obj['expiresAt'] = expiresAt;
        obj['id'] = id;
        obj['merchantAccount'] = merchantAccount;
        obj['reference'] = reference;
        obj['returnUrl'] = returnUrl;
        obj['splitCardFundingSources'] = false;
        obj['threeDSAuthenticationOnly'] = false;
    }

    /**
     * Constructs a <code>CreateCheckoutSessionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateCheckoutSessionResponse} obj Optional instance to populate.
     * @return {module:model/CreateCheckoutSessionResponse} The populated <code>CreateCheckoutSessionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateCheckoutSessionResponse();

            if (data.hasOwnProperty('accountInfo')) {
                obj['accountInfo'] = AccountInfo.constructFromObject(data['accountInfo']);
            }
            if (data.hasOwnProperty('additionalAmount')) {
                obj['additionalAmount'] = Amount.constructFromObject(data['additionalAmount']);
            }
            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = BalanceCheckRequestAdditionalData.constructFromObject(data['additionalData']);
            }
            if (data.hasOwnProperty('allowedPaymentMethods')) {
                obj['allowedPaymentMethods'] = ApiClient.convertToType(data['allowedPaymentMethods'], ['String']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('applicationInfo')) {
                obj['applicationInfo'] = ApplicationInfo.constructFromObject(data['applicationInfo']);
            }
            if (data.hasOwnProperty('authenticationData')) {
                obj['authenticationData'] = AuthenticationData.constructFromObject(data['authenticationData']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = BillingAddress.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('blockedPaymentMethods')) {
                obj['blockedPaymentMethods'] = ApiClient.convertToType(data['blockedPaymentMethods'], ['String']);
            }
            if (data.hasOwnProperty('captureDelayHours')) {
                obj['captureDelayHours'] = ApiClient.convertToType(data['captureDelayHours'], 'Number');
            }
            if (data.hasOwnProperty('channel')) {
                obj['channel'] = ApiClient.convertToType(data['channel'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = Company.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('countryCode')) {
                obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('deliverAt')) {
                obj['deliverAt'] = ApiClient.convertToType(data['deliverAt'], 'Date');
            }
            if (data.hasOwnProperty('deliveryAddress')) {
                obj['deliveryAddress'] = DeliveryAddress.constructFromObject(data['deliveryAddress']);
            }
            if (data.hasOwnProperty('enableOneClick')) {
                obj['enableOneClick'] = ApiClient.convertToType(data['enableOneClick'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePayOut')) {
                obj['enablePayOut'] = ApiClient.convertToType(data['enablePayOut'], 'Boolean');
            }
            if (data.hasOwnProperty('enableRecurring')) {
                obj['enableRecurring'] = ApiClient.convertToType(data['enableRecurring'], 'Boolean');
            }
            if (data.hasOwnProperty('expiresAt')) {
                obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
            }
            if (data.hasOwnProperty('fundOrigin')) {
                obj['fundOrigin'] = FundOrigin.constructFromObject(data['fundOrigin']);
            }
            if (data.hasOwnProperty('fundRecipient')) {
                obj['fundRecipient'] = FundRecipient.constructFromObject(data['fundRecipient']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('installmentOptions')) {
                obj['installmentOptions'] = ApiClient.convertToType(data['installmentOptions'], {'String': CheckoutSessionInstallmentOption});
            }
            if (data.hasOwnProperty('lineItems')) {
                obj['lineItems'] = ApiClient.convertToType(data['lineItems'], [LineItem]);
            }
            if (data.hasOwnProperty('mandate')) {
                obj['mandate'] = Mandate.constructFromObject(data['mandate']);
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderReference')) {
                obj['merchantOrderReference'] = ApiClient.convertToType(data['merchantOrderReference'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('mpiData')) {
                obj['mpiData'] = ThreeDSecureData.constructFromObject(data['mpiData']);
            }
            if (data.hasOwnProperty('recurringExpiry')) {
                obj['recurringExpiry'] = ApiClient.convertToType(data['recurringExpiry'], 'String');
            }
            if (data.hasOwnProperty('recurringFrequency')) {
                obj['recurringFrequency'] = ApiClient.convertToType(data['recurringFrequency'], 'String');
            }
            if (data.hasOwnProperty('recurringProcessingModel')) {
                obj['recurringProcessingModel'] = ApiClient.convertToType(data['recurringProcessingModel'], 'String');
            }
            if (data.hasOwnProperty('redirectFromIssuerMethod')) {
                obj['redirectFromIssuerMethod'] = ApiClient.convertToType(data['redirectFromIssuerMethod'], 'String');
            }
            if (data.hasOwnProperty('redirectToIssuerMethod')) {
                obj['redirectToIssuerMethod'] = ApiClient.convertToType(data['redirectToIssuerMethod'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('riskData')) {
                obj['riskData'] = RiskData.constructFromObject(data['riskData']);
            }
            if (data.hasOwnProperty('sessionData')) {
                obj['sessionData'] = ApiClient.convertToType(data['sessionData'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperIP')) {
                obj['shopperIP'] = ApiClient.convertToType(data['shopperIP'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('shopperLocale')) {
                obj['shopperLocale'] = ApiClient.convertToType(data['shopperLocale'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('shopperStatement')) {
                obj['shopperStatement'] = ApiClient.convertToType(data['shopperStatement'], 'String');
            }
            if (data.hasOwnProperty('showInstallmentAmount')) {
                obj['showInstallmentAmount'] = ApiClient.convertToType(data['showInstallmentAmount'], 'Boolean');
            }
            if (data.hasOwnProperty('showRemovePaymentMethodButton')) {
                obj['showRemovePaymentMethodButton'] = ApiClient.convertToType(data['showRemovePaymentMethodButton'], 'Boolean');
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
            if (data.hasOwnProperty('splitCardFundingSources')) {
                obj['splitCardFundingSources'] = ApiClient.convertToType(data['splitCardFundingSources'], 'Boolean');
            }
            if (data.hasOwnProperty('splits')) {
                obj['splits'] = ApiClient.convertToType(data['splits'], [Split]);
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('storePaymentMethod')) {
                obj['storePaymentMethod'] = ApiClient.convertToType(data['storePaymentMethod'], 'Boolean');
            }
            if (data.hasOwnProperty('telephoneNumber')) {
                obj['telephoneNumber'] = ApiClient.convertToType(data['telephoneNumber'], 'String');
            }
            if (data.hasOwnProperty('themeId')) {
                obj['themeId'] = ApiClient.convertToType(data['themeId'], 'String');
            }
            if (data.hasOwnProperty('threeDSAuthenticationOnly')) {
                obj['threeDSAuthenticationOnly'] = ApiClient.convertToType(data['threeDSAuthenticationOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('trustedShopper')) {
                obj['trustedShopper'] = ApiClient.convertToType(data['trustedShopper'], 'Boolean');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateCheckoutSessionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateCheckoutSessionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateCheckoutSessionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountInfo`
        if (data['accountInfo']) { // data not null
          AccountInfo.validateJSON(data['accountInfo']);
        }
        // validate the optional field `additionalAmount`
        if (data['additionalAmount']) { // data not null
          Amount.validateJSON(data['additionalAmount']);
        }
        // validate the optional field `additionalData`
        if (data['additionalData']) { // data not null
          BalanceCheckRequestAdditionalData.validateJSON(data['additionalData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedPaymentMethods'])) {
            throw new Error("Expected the field `allowedPaymentMethods` to be an array in the JSON data but got " + data['allowedPaymentMethods']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `applicationInfo`
        if (data['applicationInfo']) { // data not null
          ApplicationInfo.validateJSON(data['applicationInfo']);
        }
        // validate the optional field `authenticationData`
        if (data['authenticationData']) { // data not null
          AuthenticationData.validateJSON(data['authenticationData']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          BillingAddress.validateJSON(data['billingAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['blockedPaymentMethods'])) {
            throw new Error("Expected the field `blockedPaymentMethods` to be an array in the JSON data but got " + data['blockedPaymentMethods']);
        }
        // ensure the json data is a string
        if (data['channel'] && !(typeof data['channel'] === 'string' || data['channel'] instanceof String)) {
            throw new Error("Expected the field `channel` to be a primitive type in the JSON string but got " + data['channel']);
        }
        // validate the optional field `company`
        if (data['company']) { // data not null
          Company.validateJSON(data['company']);
        }
        // ensure the json data is a string
        if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
            throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
        }
        // validate the optional field `deliveryAddress`
        if (data['deliveryAddress']) { // data not null
          DeliveryAddress.validateJSON(data['deliveryAddress']);
        }
        // validate the optional field `fundOrigin`
        if (data['fundOrigin']) { // data not null
          FundOrigin.validateJSON(data['fundOrigin']);
        }
        // validate the optional field `fundRecipient`
        if (data['fundRecipient']) { // data not null
          FundRecipient.validateJSON(data['fundRecipient']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['lineItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lineItems'])) {
                throw new Error("Expected the field `lineItems` to be an array in the JSON data but got " + data['lineItems']);
            }
            // validate the optional field `lineItems` (array)
            for (const item of data['lineItems']) {
                LineItem.validateJSON(item);
            };
        }
        // validate the optional field `mandate`
        if (data['mandate']) { // data not null
          Mandate.validateJSON(data['mandate']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['merchantOrderReference'] && !(typeof data['merchantOrderReference'] === 'string' || data['merchantOrderReference'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderReference` to be a primitive type in the JSON string but got " + data['merchantOrderReference']);
        }
        // validate the optional field `mpiData`
        if (data['mpiData']) { // data not null
          ThreeDSecureData.validateJSON(data['mpiData']);
        }
        // ensure the json data is a string
        if (data['recurringExpiry'] && !(typeof data['recurringExpiry'] === 'string' || data['recurringExpiry'] instanceof String)) {
            throw new Error("Expected the field `recurringExpiry` to be a primitive type in the JSON string but got " + data['recurringExpiry']);
        }
        // ensure the json data is a string
        if (data['recurringFrequency'] && !(typeof data['recurringFrequency'] === 'string' || data['recurringFrequency'] instanceof String)) {
            throw new Error("Expected the field `recurringFrequency` to be a primitive type in the JSON string but got " + data['recurringFrequency']);
        }
        // ensure the json data is a string
        if (data['recurringProcessingModel'] && !(typeof data['recurringProcessingModel'] === 'string' || data['recurringProcessingModel'] instanceof String)) {
            throw new Error("Expected the field `recurringProcessingModel` to be a primitive type in the JSON string but got " + data['recurringProcessingModel']);
        }
        // ensure the json data is a string
        if (data['redirectFromIssuerMethod'] && !(typeof data['redirectFromIssuerMethod'] === 'string' || data['redirectFromIssuerMethod'] instanceof String)) {
            throw new Error("Expected the field `redirectFromIssuerMethod` to be a primitive type in the JSON string but got " + data['redirectFromIssuerMethod']);
        }
        // ensure the json data is a string
        if (data['redirectToIssuerMethod'] && !(typeof data['redirectToIssuerMethod'] === 'string' || data['redirectToIssuerMethod'] instanceof String)) {
            throw new Error("Expected the field `redirectToIssuerMethod` to be a primitive type in the JSON string but got " + data['redirectToIssuerMethod']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        // validate the optional field `riskData`
        if (data['riskData']) { // data not null
          RiskData.validateJSON(data['riskData']);
        }
        // ensure the json data is a string
        if (data['sessionData'] && !(typeof data['sessionData'] === 'string' || data['sessionData'] instanceof String)) {
            throw new Error("Expected the field `sessionData` to be a primitive type in the JSON string but got " + data['sessionData']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // ensure the json data is a string
        if (data['shopperIP'] && !(typeof data['shopperIP'] === 'string' || data['shopperIP'] instanceof String)) {
            throw new Error("Expected the field `shopperIP` to be a primitive type in the JSON string but got " + data['shopperIP']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // ensure the json data is a string
        if (data['shopperLocale'] && !(typeof data['shopperLocale'] === 'string' || data['shopperLocale'] instanceof String)) {
            throw new Error("Expected the field `shopperLocale` to be a primitive type in the JSON string but got " + data['shopperLocale']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['shopperStatement'] && !(typeof data['shopperStatement'] === 'string' || data['shopperStatement'] instanceof String)) {
            throw new Error("Expected the field `shopperStatement` to be a primitive type in the JSON string but got " + data['shopperStatement']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }
        if (data['splits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['splits'])) {
                throw new Error("Expected the field `splits` to be an array in the JSON data but got " + data['splits']);
            }
            // validate the optional field `splits` (array)
            for (const item of data['splits']) {
                Split.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['telephoneNumber'] && !(typeof data['telephoneNumber'] === 'string' || data['telephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got " + data['telephoneNumber']);
        }
        // ensure the json data is a string
        if (data['themeId'] && !(typeof data['themeId'] === 'string' || data['themeId'] instanceof String)) {
            throw new Error("Expected the field `themeId` to be a primitive type in the JSON string but got " + data['themeId']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

CreateCheckoutSessionResponse.RequiredProperties = ["amount", "expiresAt", "id", "merchantAccount", "reference", "returnUrl"];

/**
 * Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
 * @member {module:model/AccountInfo} accountInfo
 */
CreateCheckoutSessionResponse.prototype['accountInfo'] = undefined;

/**
 * If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 
 * @member {module:model/Amount} additionalAmount
 */
CreateCheckoutSessionResponse.prototype['additionalAmount'] = undefined;

/**
 * @member {module:model/BalanceCheckRequestAdditionalData} additionalData
 */
CreateCheckoutSessionResponse.prototype['additionalData'] = undefined;

/**
 * List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @member {Array.<String>} allowedPaymentMethods
 */
CreateCheckoutSessionResponse.prototype['allowedPaymentMethods'] = undefined;

/**
 * The amount of the payment.
 * @member {module:model/Amount} amount
 */
CreateCheckoutSessionResponse.prototype['amount'] = undefined;

/**
 * Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).
 * @member {module:model/ApplicationInfo} applicationInfo
 */
CreateCheckoutSessionResponse.prototype['applicationInfo'] = undefined;

/**
 * Configuration data for 3DS payments.
 * @member {module:model/AuthenticationData} authenticationData
 */
CreateCheckoutSessionResponse.prototype['authenticationData'] = undefined;

/**
 * The address where to send the invoice.
 * @member {module:model/BillingAddress} billingAddress
 */
CreateCheckoutSessionResponse.prototype['billingAddress'] = undefined;

/**
 * List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`
 * @member {Array.<String>} blockedPaymentMethods
 */
CreateCheckoutSessionResponse.prototype['blockedPaymentMethods'] = undefined;

/**
 * The delay between the authorisation and scheduled auto-capture, specified in hours.
 * @member {Number} captureDelayHours
 */
CreateCheckoutSessionResponse.prototype['captureDelayHours'] = undefined;

/**
 * The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**
 * @member {module:model/CreateCheckoutSessionResponse.ChannelEnum} channel
 */
CreateCheckoutSessionResponse.prototype['channel'] = undefined;

/**
 * Information regarding the company.
 * @member {module:model/Company} company
 */
CreateCheckoutSessionResponse.prototype['company'] = undefined;

/**
 * The shopper's two-letter country code.
 * @member {String} countryCode
 */
CreateCheckoutSessionResponse.prototype['countryCode'] = undefined;

/**
 * The shopper's date of birth in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format.
 * @member {Date} dateOfBirth
 */
CreateCheckoutSessionResponse.prototype['dateOfBirth'] = undefined;

/**
 * The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} deliverAt
 */
CreateCheckoutSessionResponse.prototype['deliverAt'] = undefined;

/**
 * The address where the purchased goods should be delivered.
 * @member {module:model/DeliveryAddress} deliveryAddress
 */
CreateCheckoutSessionResponse.prototype['deliveryAddress'] = undefined;

/**
 * When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.
 * @member {Boolean} enableOneClick
 */
CreateCheckoutSessionResponse.prototype['enableOneClick'] = undefined;

/**
 * When true and `shopperReference` is provided, the payment details will be tokenized for payouts.
 * @member {Boolean} enablePayOut
 */
CreateCheckoutSessionResponse.prototype['enablePayOut'] = undefined;

/**
 * When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.
 * @member {Boolean} enableRecurring
 */
CreateCheckoutSessionResponse.prototype['enableRecurring'] = undefined;

/**
 * The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.
 * @member {Date} expiresAt
 */
CreateCheckoutSessionResponse.prototype['expiresAt'] = undefined;

/**
 * The person or entity funding the money.
 * @member {module:model/FundOrigin} fundOrigin
 */
CreateCheckoutSessionResponse.prototype['fundOrigin'] = undefined;

/**
 * the person or entity receiving the money
 * @member {module:model/FundRecipient} fundRecipient
 */
CreateCheckoutSessionResponse.prototype['fundRecipient'] = undefined;

/**
 * A unique identifier of the session.
 * @member {String} id
 */
CreateCheckoutSessionResponse.prototype['id'] = undefined;

/**
 * A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.
 * @member {Object.<String, module:model/CheckoutSessionInstallmentOption>} installmentOptions
 */
CreateCheckoutSessionResponse.prototype['installmentOptions'] = undefined;

/**
 * Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.
 * @member {Array.<module:model/LineItem>} lineItems
 */
CreateCheckoutSessionResponse.prototype['lineItems'] = undefined;

/**
 * The mandate details to initiate recurring transaction.
 * @member {module:model/Mandate} mandate
 */
CreateCheckoutSessionResponse.prototype['mandate'] = undefined;

/**
 * The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
 * @member {String} mcc
 */
CreateCheckoutSessionResponse.prototype['mcc'] = undefined;

/**
 * The merchant account identifier, with which you want to process the transaction.
 * @member {String} merchantAccount
 */
CreateCheckoutSessionResponse.prototype['merchantAccount'] = undefined;

/**
 * This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
 * @member {String} merchantOrderReference
 */
CreateCheckoutSessionResponse.prototype['merchantOrderReference'] = undefined;

/**
 * Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. 
 * @member {Object.<String, String>} metadata
 */
CreateCheckoutSessionResponse.prototype['metadata'] = undefined;

/**
 * Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).
 * @member {module:model/ThreeDSecureData} mpiData
 */
CreateCheckoutSessionResponse.prototype['mpiData'] = undefined;

/**
 * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
 * @member {String} recurringExpiry
 */
CreateCheckoutSessionResponse.prototype['recurringExpiry'] = undefined;

/**
 * Minimum number of days between authorisations. Only for 3D Secure 2.
 * @member {String} recurringFrequency
 */
CreateCheckoutSessionResponse.prototype['recurringFrequency'] = undefined;

/**
 * Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 
 * @member {module:model/CreateCheckoutSessionResponse.RecurringProcessingModelEnum} recurringProcessingModel
 */
CreateCheckoutSessionResponse.prototype['recurringProcessingModel'] = undefined;

/**
 * Specifies the redirect method (GET or POST) when redirecting back from the issuer.
 * @member {String} redirectFromIssuerMethod
 */
CreateCheckoutSessionResponse.prototype['redirectFromIssuerMethod'] = undefined;

/**
 * Specifies the redirect method (GET or POST) when redirecting to the issuer.
 * @member {String} redirectToIssuerMethod
 */
CreateCheckoutSessionResponse.prototype['redirectToIssuerMethod'] = undefined;

/**
 * The reference to uniquely identify a payment.
 * @member {String} reference
 */
CreateCheckoutSessionResponse.prototype['reference'] = undefined;

/**
 * The URL to return to when a redirect payment is completed.
 * @member {String} returnUrl
 */
CreateCheckoutSessionResponse.prototype['returnUrl'] = undefined;

/**
 * Any risk-related settings to apply to the payment.
 * @member {module:model/RiskData} riskData
 */
CreateCheckoutSessionResponse.prototype['riskData'] = undefined;

/**
 * The payment session data you need to pass to your front end.
 * @member {String} sessionData
 */
CreateCheckoutSessionResponse.prototype['sessionData'] = undefined;

/**
 * The shopper's email address.
 * @member {String} shopperEmail
 */
CreateCheckoutSessionResponse.prototype['shopperEmail'] = undefined;

/**
 * The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @member {String} shopperIP
 */
CreateCheckoutSessionResponse.prototype['shopperIP'] = undefined;

/**
 * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @member {module:model/CreateCheckoutSessionResponse.ShopperInteractionEnum} shopperInteraction
 */
CreateCheckoutSessionResponse.prototype['shopperInteraction'] = undefined;

/**
 * The combination of a language code and a country code to specify the language to be used in the payment.
 * @member {String} shopperLocale
 */
CreateCheckoutSessionResponse.prototype['shopperLocale'] = undefined;

/**
 * The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.
 * @member {module:model/Name} shopperName
 */
CreateCheckoutSessionResponse.prototype['shopperName'] = undefined;

/**
 * Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
CreateCheckoutSessionResponse.prototype['shopperReference'] = undefined;

/**
 * The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
 * @member {String} shopperStatement
 */
CreateCheckoutSessionResponse.prototype['shopperStatement'] = undefined;

/**
 * Set to true to show the payment amount per installment.
 * @member {Boolean} showInstallmentAmount
 */
CreateCheckoutSessionResponse.prototype['showInstallmentAmount'] = undefined;

/**
 * Set to **true** to show a button that lets the shopper remove a stored payment method.
 * @member {Boolean} showRemovePaymentMethodButton
 */
CreateCheckoutSessionResponse.prototype['showRemovePaymentMethodButton'] = undefined;

/**
 * The shopper's social security number.
 * @member {String} socialSecurityNumber
 */
CreateCheckoutSessionResponse.prototype['socialSecurityNumber'] = undefined;

/**
 * Boolean value indicating whether the card payment method should be split into separate debit and credit options.
 * @member {Boolean} splitCardFundingSources
 * @default false
 */
CreateCheckoutSessionResponse.prototype['splitCardFundingSources'] = false;

/**
 * An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).
 * @member {Array.<module:model/Split>} splits
 */
CreateCheckoutSessionResponse.prototype['splits'] = undefined;

/**
 * Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
 * @member {String} store
 */
CreateCheckoutSessionResponse.prototype['store'] = undefined;

/**
 * When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.
 * @member {Boolean} storePaymentMethod
 */
CreateCheckoutSessionResponse.prototype['storePaymentMethod'] = undefined;

/**
 * The shopper's telephone number.
 * @member {String} telephoneNumber
 */
CreateCheckoutSessionResponse.prototype['telephoneNumber'] = undefined;

/**
 * Sets a custom theme for [Hosted Checkout](https://docs.adyen.com/online-payments/build-your-integration/?platform=Web&integration=Hosted+Checkout). The value can be any of the **Theme ID** values from your Customer Area.
 * @member {String} themeId
 */
CreateCheckoutSessionResponse.prototype['themeId'] = undefined;

/**
 * If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
 * @member {Boolean} threeDSAuthenticationOnly
 * @default false
 */
CreateCheckoutSessionResponse.prototype['threeDSAuthenticationOnly'] = false;

/**
 * Set to true if the payment should be routed to a trusted MID.
 * @member {Boolean} trustedShopper
 */
CreateCheckoutSessionResponse.prototype['trustedShopper'] = undefined;

/**
 * The URL for the Hosted Checkout page. Redirect the shopper to this URL so they can make the payment.
 * @member {String} url
 */
CreateCheckoutSessionResponse.prototype['url'] = undefined;





/**
 * Allowed values for the <code>channel</code> property.
 * @enum {String}
 * @readonly
 */
CreateCheckoutSessionResponse['ChannelEnum'] = {

    /**
     * value: "iOS"
     * @const
     */
    "iOS": "iOS",

    /**
     * value: "Android"
     * @const
     */
    "Android": "Android",

    /**
     * value: "Web"
     * @const
     */
    "Web": "Web"
};


/**
 * Allowed values for the <code>recurringProcessingModel</code> property.
 * @enum {String}
 * @readonly
 */
CreateCheckoutSessionResponse['RecurringProcessingModelEnum'] = {

    /**
     * value: "CardOnFile"
     * @const
     */
    "CardOnFile": "CardOnFile",

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription",

    /**
     * value: "UnscheduledCardOnFile"
     * @const
     */
    "UnscheduledCardOnFile": "UnscheduledCardOnFile"
};


/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
CreateCheckoutSessionResponse['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};



export default CreateCheckoutSessionResponse;

