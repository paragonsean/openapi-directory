/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v69/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v69/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=69) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 69
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CardDetailsRequest from '../model/CardDetailsRequest';
import CardDetailsResponse from '../model/CardDetailsResponse';
import CreateCheckoutSessionRequest from '../model/CreateCheckoutSessionRequest';
import CreateCheckoutSessionResponse from '../model/CreateCheckoutSessionResponse';
import PaymentDetailsRequest from '../model/PaymentDetailsRequest';
import PaymentDetailsResponse from '../model/PaymentDetailsResponse';
import PaymentMethodsRequest from '../model/PaymentMethodsRequest';
import PaymentMethodsResponse from '../model/PaymentMethodsResponse';
import PaymentRequest from '../model/PaymentRequest';
import PaymentResponse from '../model/PaymentResponse';
import ServiceError from '../model/ServiceError';
import SessionResultResponse from '../model/SessionResultResponse';

/**
* Payments service.
* @module api/PaymentsApi
* @version 69
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getSessionsSessionId operation.
     * @callback module:api/PaymentsApi~getSessionsSessionIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SessionResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the result of a payment session
     * Returns the status of the payment session with the `sessionId` and `sessionResult` specified in the path.
     * @param {String} sessionId A unique identifier of the session.
     * @param {String} sessionResult The `sessionResult` value from the Drop-in or Component.
     * @param {module:api/PaymentsApi~getSessionsSessionIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SessionResultResponse}
     */
    getSessionsSessionId(sessionId, sessionResult, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getSessionsSessionId");
      }
      // verify the required parameter 'sessionResult' is set
      if (sessionResult === undefined || sessionResult === null) {
        throw new Error("Missing the required parameter 'sessionResult' when calling getSessionsSessionId");
      }

      let pathParams = {
        'sessionId': sessionId
      };
      let queryParams = {
        'sessionResult': sessionResult
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionResultResponse;
      return this.apiClient.callApi(
        '/sessions/{sessionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCardDetails operation.
     * @callback module:api/PaymentsApi~postCardDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of brands on the card
     * Send a request with at least the first 6 digits of the card number to get a response with an array of brands on the card. If you include [your supported brands](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cardDetails__reqParam_supportedBrands) in the request, the response also tells you if you support each [brand that was identified](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/cardDetails__resParam_details).  If you have an API-only integration and collect card data, use this endpoint to find out if the shopper's card is co-branded. For co-branded cards, you must let the shopper choose the brand to pay with  if you support both brands.  
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
     * @param {module:model/CardDetailsRequest} [cardDetailsRequest] 
     * @param {module:api/PaymentsApi~postCardDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardDetailsResponse}
     */
    postCardDetails(opts, callback) {
      opts = opts || {};
      let postBody = opts['cardDetailsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardDetailsResponse;
      return this.apiClient.callApi(
        '/cardDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPaymentMethods operation.
     * @callback module:api/PaymentsApi~postPaymentMethodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentMethodsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of available payment methods
     * Queries the available payment methods for a transaction based on the transaction context (like amount, country, and currency). Besides giving back a list of the available payment methods, the response also returns which input details you need to collect from the shopper (to be submitted to `/payments`).  Although we highly recommend using this endpoint to ensure you are always offering the most up-to-date list of payment methods, its usage is optional. You can, for example, also cache the `/paymentMethods` response and update it once a week.
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
     * @param {module:model/PaymentMethodsRequest} [paymentMethodsRequest] 
     * @param {module:api/PaymentsApi~postPaymentMethodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentMethodsResponse}
     */
    postPaymentMethods(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentMethodsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentMethodsResponse;
      return this.apiClient.callApi(
        '/paymentMethods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPayments operation.
     * @callback module:api/PaymentsApi~postPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a transaction
     * Sends payment parameters (like amount, country, and currency) together with other required input details collected from the shopper. To know more about required parameters for specific payment methods, refer to our [payment method guides](https://docs.adyen.com/payment-methods).  The response depends on the [payment flow](https://docs.adyen.com/payment-methods#payment-flow): * For a direct flow, the response includes a `pspReference` and a `resultCode` with the payment result, for example **Authorised** or **Refused**.  * For a redirect or additional action, the response contains an `action` object. 
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
     * @param {module:model/PaymentRequest} [paymentRequest] 
     * @param {module:api/PaymentsApi~postPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    postPayments(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postPaymentsDetails operation.
     * @callback module:api/PaymentsApi~postPaymentsDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentDetailsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Submit details for a payment
     * Submits details for a payment created using `/payments`. This step is only needed when no final state has been reached on the `/payments` request, for example when the shopper was redirected to another page to complete the payment.  
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
     * @param {module:model/PaymentDetailsRequest} [paymentDetailsRequest] 
     * @param {module:api/PaymentsApi~postPaymentsDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentDetailsResponse}
     */
    postPaymentsDetails(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentDetailsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentDetailsResponse;
      return this.apiClient.callApi(
        '/payments/details', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSessions operation.
     * @callback module:api/PaymentsApi~postSessionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateCheckoutSessionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a payment session
     * Creates a payment session for [Web Drop-in](https://docs.adyen.com/online-payments/web-drop-in) and [Web Components](https://docs.adyen.com/online-payments/web-components) integrations.  The response contains encrypted payment session data. The front end then uses the session data to make any required server-side calls for the payment flow.  You get the payment outcome asynchronously, in an [AUTHORISATION](https://docs.adyen.com/api-explorer/#/Webhooks/latest/post/AUTHORISATION) webhook.
     * @param {Object} opts Optional parameters
     * @param {String} [idempotencyKey] A unique identifier for the message with a maximum of 64 characters (we recommend a UUID).
     * @param {module:model/CreateCheckoutSessionRequest} [createCheckoutSessionRequest] 
     * @param {module:api/PaymentsApi~postSessionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateCheckoutSessionResponse}
     */
    postSessions(opts, callback) {
      opts = opts || {};
      let postBody = opts['createCheckoutSessionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Idempotency-Key': opts['idempotencyKey']
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateCheckoutSessionResponse;
      return this.apiClient.callApi(
        '/sessions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
