# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.balance_check_response_additional_data import BalanceCheckResponseAdditionalData
from openapi_server.models.fraud_result import FraudResult
from openapi_server import util


class BalanceCheckResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: BalanceCheckResponseAdditionalData=None, balance: Amount=None, fraud_result: FraudResult=None, psp_reference: str=None, refusal_reason: str=None, result_code: str=None):
        """BalanceCheckResponse - a model defined in OpenAPI

        :param additional_data: The additional_data of this BalanceCheckResponse.
        :param balance: The balance of this BalanceCheckResponse.
        :param fraud_result: The fraud_result of this BalanceCheckResponse.
        :param psp_reference: The psp_reference of this BalanceCheckResponse.
        :param refusal_reason: The refusal_reason of this BalanceCheckResponse.
        :param result_code: The result_code of this BalanceCheckResponse.
        """
        self.openapi_types = {
            'additional_data': BalanceCheckResponseAdditionalData,
            'balance': Amount,
            'fraud_result': FraudResult,
            'psp_reference': str,
            'refusal_reason': str,
            'result_code': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'balance': 'balance',
            'fraud_result': 'fraudResult',
            'psp_reference': 'pspReference',
            'refusal_reason': 'refusalReason',
            'result_code': 'resultCode'
        }

        self._additional_data = additional_data
        self._balance = balance
        self._fraud_result = fraud_result
        self._psp_reference = psp_reference
        self._refusal_reason = refusal_reason
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BalanceCheckResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BalanceCheckResponse of this BalanceCheckResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this BalanceCheckResponse.


        :return: The additional_data of this BalanceCheckResponse.
        :rtype: BalanceCheckResponseAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this BalanceCheckResponse.


        :param additional_data: The additional_data of this BalanceCheckResponse.
        :type additional_data: BalanceCheckResponseAdditionalData
        """

        self._additional_data = additional_data

    @property
    def balance(self):
        """Gets the balance of this BalanceCheckResponse.

        The balance for the payment method.

        :return: The balance of this BalanceCheckResponse.
        :rtype: Amount
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this BalanceCheckResponse.

        The balance for the payment method.

        :param balance: The balance of this BalanceCheckResponse.
        :type balance: Amount
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")

        self._balance = balance

    @property
    def fraud_result(self):
        """Gets the fraud_result of this BalanceCheckResponse.

        The fraud result properties of the payment.

        :return: The fraud_result of this BalanceCheckResponse.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this BalanceCheckResponse.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this BalanceCheckResponse.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def psp_reference(self):
        """Gets the psp_reference of this BalanceCheckResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this BalanceCheckResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this BalanceCheckResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this BalanceCheckResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this BalanceCheckResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this BalanceCheckResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this BalanceCheckResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this BalanceCheckResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def result_code(self):
        """Gets the result_code of this BalanceCheckResponse.

        The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.

        :return: The result_code of this BalanceCheckResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this BalanceCheckResponse.

        The result of the cancellation request.  Possible values:  * **Success** – Indicates that the balance check was successful. * **NotEnoughBalance** – Commonly indicates that the card did not have enough balance to pay the amount in the request, or that the currency of the balance on the card did not match the currency of the requested amount. * **Failed** – Indicates that the balance check failed.

        :param result_code: The result_code of this BalanceCheckResponse.
        :type result_code: str
        """
        allowed_values = ["Success", "NotEnoughBalance", "Failed"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code
