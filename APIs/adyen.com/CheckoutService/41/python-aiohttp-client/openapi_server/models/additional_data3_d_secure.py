# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalData3DSecure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow3_ds2: str=None, challenge_window_size: str=None, execute_three_d: str=None, mpi_implementation_type: str=None, sca_exemption: str=None, three_ds_version: str=None):
        """AdditionalData3DSecure - a model defined in OpenAPI

        :param allow3_ds2: The allow3_ds2 of this AdditionalData3DSecure.
        :param challenge_window_size: The challenge_window_size of this AdditionalData3DSecure.
        :param execute_three_d: The execute_three_d of this AdditionalData3DSecure.
        :param mpi_implementation_type: The mpi_implementation_type of this AdditionalData3DSecure.
        :param sca_exemption: The sca_exemption of this AdditionalData3DSecure.
        :param three_ds_version: The three_ds_version of this AdditionalData3DSecure.
        """
        self.openapi_types = {
            'allow3_ds2': str,
            'challenge_window_size': str,
            'execute_three_d': str,
            'mpi_implementation_type': str,
            'sca_exemption': str,
            'three_ds_version': str
        }

        self.attribute_map = {
            'allow3_ds2': 'allow3DS2',
            'challenge_window_size': 'challengeWindowSize',
            'execute_three_d': 'executeThreeD',
            'mpi_implementation_type': 'mpiImplementationType',
            'sca_exemption': 'scaExemption',
            'three_ds_version': 'threeDSVersion'
        }

        self._allow3_ds2 = allow3_ds2
        self._challenge_window_size = challenge_window_size
        self._execute_three_d = execute_three_d
        self._mpi_implementation_type = mpi_implementation_type
        self._sca_exemption = sca_exemption
        self._three_ds_version = three_ds_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalData3DSecure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalData3DSecure of this AdditionalData3DSecure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow3_ds2(self):
        """Gets the allow3_ds2 of this AdditionalData3DSecure.

        Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   > This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the `executeThreeD` parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration. 

        :return: The allow3_ds2 of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._allow3_ds2

    @allow3_ds2.setter
    def allow3_ds2(self, allow3_ds2):
        """Sets the allow3_ds2 of this AdditionalData3DSecure.

        Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   > This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the `executeThreeD` parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration. 

        :param allow3_ds2: The allow3_ds2 of this AdditionalData3DSecure.
        :type allow3_ds2: str
        """

        self._allow3_ds2 = allow3_ds2

    @property
    def challenge_window_size(self):
        """Gets the challenge_window_size of this AdditionalData3DSecure.

        Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen

        :return: The challenge_window_size of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._challenge_window_size

    @challenge_window_size.setter
    def challenge_window_size(self, challenge_window_size):
        """Sets the challenge_window_size of this AdditionalData3DSecure.

        Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen

        :param challenge_window_size: The challenge_window_size of this AdditionalData3DSecure.
        :type challenge_window_size: str
        """
        allowed_values = ["01", "02", "03", "04", "05"]  # noqa: E501
        if challenge_window_size not in allowed_values:
            raise ValueError(
                "Invalid value for `challenge_window_size` ({0}), must be one of {1}"
                .format(challenge_window_size, allowed_values)
            )

        self._challenge_window_size = challenge_window_size

    @property
    def execute_three_d(self):
        """Gets the execute_three_d of this AdditionalData3DSecure.

        Indicates if you want to perform 3D Secure authentication on a transaction.   > Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don't perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  

        :return: The execute_three_d of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._execute_three_d

    @execute_three_d.setter
    def execute_three_d(self, execute_three_d):
        """Sets the execute_three_d of this AdditionalData3DSecure.

        Indicates if you want to perform 3D Secure authentication on a transaction.   > Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don't perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  

        :param execute_three_d: The execute_three_d of this AdditionalData3DSecure.
        :type execute_three_d: str
        """

        self._execute_three_d = execute_three_d

    @property
    def mpi_implementation_type(self):
        """Gets the mpi_implementation_type of this AdditionalData3DSecure.

        In case of Secure+, this field must be set to **CUPSecurePlus**.

        :return: The mpi_implementation_type of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._mpi_implementation_type

    @mpi_implementation_type.setter
    def mpi_implementation_type(self, mpi_implementation_type):
        """Sets the mpi_implementation_type of this AdditionalData3DSecure.

        In case of Secure+, this field must be set to **CUPSecurePlus**.

        :param mpi_implementation_type: The mpi_implementation_type of this AdditionalData3DSecure.
        :type mpi_implementation_type: str
        """

        self._mpi_implementation_type = mpi_implementation_type

    @property
    def sca_exemption(self):
        """Gets the sca_exemption of this AdditionalData3DSecure.

        Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :return: The sca_exemption of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._sca_exemption

    @sca_exemption.setter
    def sca_exemption(self, sca_exemption):
        """Sets the sca_exemption of this AdditionalData3DSecure.

        Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :param sca_exemption: The sca_exemption of this AdditionalData3DSecure.
        :type sca_exemption: str
        """

        self._sca_exemption = sca_exemption

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this AdditionalData3DSecure.

        Indicates your preference for the 3D Secure version.  > If you use this parameter, you override the checks from Adyen's Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **1.0.2**: Apply 3D Secure version 1.0.2.  * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative `transStatus` in the `ARes`, we will apply the fallback policy configured in your account. For example, if the configuration is to fall back to 3D Secure 1, we will apply version 1.0.2. * If you prefer 2.1.0 or 2.2.0 but the BIN is not enrolled, you will receive an error.  

        :return: The three_ds_version of this AdditionalData3DSecure.
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this AdditionalData3DSecure.

        Indicates your preference for the 3D Secure version.  > If you use this parameter, you override the checks from Adyen's Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **1.0.2**: Apply 3D Secure version 1.0.2.  * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative `transStatus` in the `ARes`, we will apply the fallback policy configured in your account. For example, if the configuration is to fall back to 3D Secure 1, we will apply version 1.0.2. * If you prefer 2.1.0 or 2.2.0 but the BIN is not enrolled, you will receive an error.  

        :param three_ds_version: The three_ds_version of this AdditionalData3DSecure.
        :type three_ds_version: str
        """

        self._three_ds_version = three_ds_version
