# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LineItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_excluding_tax: int=None, amount_including_tax: int=None, description: str=None, id: str=None, image_url: str=None, item_category: str=None, product_url: str=None, quantity: int=None, tax_amount: int=None, tax_percentage: int=None):
        """LineItem - a model defined in OpenAPI

        :param amount_excluding_tax: The amount_excluding_tax of this LineItem.
        :param amount_including_tax: The amount_including_tax of this LineItem.
        :param description: The description of this LineItem.
        :param id: The id of this LineItem.
        :param image_url: The image_url of this LineItem.
        :param item_category: The item_category of this LineItem.
        :param product_url: The product_url of this LineItem.
        :param quantity: The quantity of this LineItem.
        :param tax_amount: The tax_amount of this LineItem.
        :param tax_percentage: The tax_percentage of this LineItem.
        """
        self.openapi_types = {
            'amount_excluding_tax': int,
            'amount_including_tax': int,
            'description': str,
            'id': str,
            'image_url': str,
            'item_category': str,
            'product_url': str,
            'quantity': int,
            'tax_amount': int,
            'tax_percentage': int
        }

        self.attribute_map = {
            'amount_excluding_tax': 'amountExcludingTax',
            'amount_including_tax': 'amountIncludingTax',
            'description': 'description',
            'id': 'id',
            'image_url': 'imageUrl',
            'item_category': 'itemCategory',
            'product_url': 'productUrl',
            'quantity': 'quantity',
            'tax_amount': 'taxAmount',
            'tax_percentage': 'taxPercentage'
        }

        self._amount_excluding_tax = amount_excluding_tax
        self._amount_including_tax = amount_including_tax
        self._description = description
        self._id = id
        self._image_url = image_url
        self._item_category = item_category
        self._product_url = product_url
        self._quantity = quantity
        self._tax_amount = tax_amount
        self._tax_percentage = tax_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LineItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LineItem of this LineItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_excluding_tax(self):
        """Gets the amount_excluding_tax of this LineItem.

        Item amount excluding the tax, in minor units.

        :return: The amount_excluding_tax of this LineItem.
        :rtype: int
        """
        return self._amount_excluding_tax

    @amount_excluding_tax.setter
    def amount_excluding_tax(self, amount_excluding_tax):
        """Sets the amount_excluding_tax of this LineItem.

        Item amount excluding the tax, in minor units.

        :param amount_excluding_tax: The amount_excluding_tax of this LineItem.
        :type amount_excluding_tax: int
        """

        self._amount_excluding_tax = amount_excluding_tax

    @property
    def amount_including_tax(self):
        """Gets the amount_including_tax of this LineItem.

        Item amount including the tax, in minor units.

        :return: The amount_including_tax of this LineItem.
        :rtype: int
        """
        return self._amount_including_tax

    @amount_including_tax.setter
    def amount_including_tax(self, amount_including_tax):
        """Sets the amount_including_tax of this LineItem.

        Item amount including the tax, in minor units.

        :param amount_including_tax: The amount_including_tax of this LineItem.
        :type amount_including_tax: int
        """

        self._amount_including_tax = amount_including_tax

    @property
    def description(self):
        """Gets the description of this LineItem.

        Description of the line item.

        :return: The description of this LineItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LineItem.

        Description of the line item.

        :param description: The description of this LineItem.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this LineItem.

        ID of the line item.

        :return: The id of this LineItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LineItem.

        ID of the line item.

        :param id: The id of this LineItem.
        :type id: str
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this LineItem.

        Link to the picture of the purchased item.

        :return: The image_url of this LineItem.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this LineItem.

        Link to the picture of the purchased item.

        :param image_url: The image_url of this LineItem.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def item_category(self):
        """Gets the item_category of this LineItem.

        Item category, used by the payment methods PayPal and Ratepay.

        :return: The item_category of this LineItem.
        :rtype: str
        """
        return self._item_category

    @item_category.setter
    def item_category(self, item_category):
        """Sets the item_category of this LineItem.

        Item category, used by the payment methods PayPal and Ratepay.

        :param item_category: The item_category of this LineItem.
        :type item_category: str
        """

        self._item_category = item_category

    @property
    def product_url(self):
        """Gets the product_url of this LineItem.

        Link to the purchased item.

        :return: The product_url of this LineItem.
        :rtype: str
        """
        return self._product_url

    @product_url.setter
    def product_url(self, product_url):
        """Sets the product_url of this LineItem.

        Link to the purchased item.

        :param product_url: The product_url of this LineItem.
        :type product_url: str
        """

        self._product_url = product_url

    @property
    def quantity(self):
        """Gets the quantity of this LineItem.

        Number of items.

        :return: The quantity of this LineItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this LineItem.

        Number of items.

        :param quantity: The quantity of this LineItem.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def tax_amount(self):
        """Gets the tax_amount of this LineItem.

        Tax amount, in minor units.

        :return: The tax_amount of this LineItem.
        :rtype: int
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this LineItem.

        Tax amount, in minor units.

        :param tax_amount: The tax_amount of this LineItem.
        :type tax_amount: int
        """

        self._tax_amount = tax_amount

    @property
    def tax_percentage(self):
        """Gets the tax_percentage of this LineItem.

        Tax percentage, in minor units.

        :return: The tax_percentage of this LineItem.
        :rtype: int
        """
        return self._tax_percentage

    @tax_percentage.setter
    def tax_percentage(self, tax_percentage):
        """Sets the tax_percentage of this LineItem.

        Tax percentage, in minor units.

        :param tax_percentage: The tax_percentage of this LineItem.
        :type tax_percentage: int
        """

        self._tax_percentage = tax_percentage
