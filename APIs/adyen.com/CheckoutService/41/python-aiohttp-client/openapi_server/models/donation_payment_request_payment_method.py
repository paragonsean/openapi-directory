# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.apple_pay_donations import ApplePayDonations
from openapi_server.models.card_donations import CardDonations
from openapi_server.models.google_pay_donations import GooglePayDonations
from openapi_server.models.ideal_donations import IdealDonations
from openapi_server.models.pay_with_google_donations import PayWithGoogleDonations
from openapi_server import util


class DonationPaymentRequestPaymentMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apple_pay_token: str=None, funding_source: str=None, recurring_detail_reference: str=None, type: str='applepay', brand: str=None, cupsecureplus_smscode: str=None, cvc: str=None, encrypted_card_number: str=None, encrypted_expiry_month: str=None, encrypted_expiry_year: str=None, encrypted_security_code: str=None, expiry_month: str=None, expiry_year: str=None, holder_name: str=None, network_payment_reference: str=None, number: str=None, shopper_notification_reference: str=None, three_ds2_sdk_version: str=None, google_pay_card_network: str=None, google_pay_token: str=None, issuer: str=None):
        """DonationPaymentRequestPaymentMethod - a model defined in OpenAPI

        :param apple_pay_token: The apple_pay_token of this DonationPaymentRequestPaymentMethod.
        :param funding_source: The funding_source of this DonationPaymentRequestPaymentMethod.
        :param recurring_detail_reference: The recurring_detail_reference of this DonationPaymentRequestPaymentMethod.
        :param type: The type of this DonationPaymentRequestPaymentMethod.
        :param brand: The brand of this DonationPaymentRequestPaymentMethod.
        :param cupsecureplus_smscode: The cupsecureplus_smscode of this DonationPaymentRequestPaymentMethod.
        :param cvc: The cvc of this DonationPaymentRequestPaymentMethod.
        :param encrypted_card_number: The encrypted_card_number of this DonationPaymentRequestPaymentMethod.
        :param encrypted_expiry_month: The encrypted_expiry_month of this DonationPaymentRequestPaymentMethod.
        :param encrypted_expiry_year: The encrypted_expiry_year of this DonationPaymentRequestPaymentMethod.
        :param encrypted_security_code: The encrypted_security_code of this DonationPaymentRequestPaymentMethod.
        :param expiry_month: The expiry_month of this DonationPaymentRequestPaymentMethod.
        :param expiry_year: The expiry_year of this DonationPaymentRequestPaymentMethod.
        :param holder_name: The holder_name of this DonationPaymentRequestPaymentMethod.
        :param network_payment_reference: The network_payment_reference of this DonationPaymentRequestPaymentMethod.
        :param number: The number of this DonationPaymentRequestPaymentMethod.
        :param shopper_notification_reference: The shopper_notification_reference of this DonationPaymentRequestPaymentMethod.
        :param three_ds2_sdk_version: The three_ds2_sdk_version of this DonationPaymentRequestPaymentMethod.
        :param google_pay_card_network: The google_pay_card_network of this DonationPaymentRequestPaymentMethod.
        :param google_pay_token: The google_pay_token of this DonationPaymentRequestPaymentMethod.
        :param issuer: The issuer of this DonationPaymentRequestPaymentMethod.
        """
        self.openapi_types = {
            'apple_pay_token': str,
            'funding_source': str,
            'recurring_detail_reference': str,
            'type': str,
            'brand': str,
            'cupsecureplus_smscode': str,
            'cvc': str,
            'encrypted_card_number': str,
            'encrypted_expiry_month': str,
            'encrypted_expiry_year': str,
            'encrypted_security_code': str,
            'expiry_month': str,
            'expiry_year': str,
            'holder_name': str,
            'network_payment_reference': str,
            'number': str,
            'shopper_notification_reference': str,
            'three_ds2_sdk_version': str,
            'google_pay_card_network': str,
            'google_pay_token': str,
            'issuer': str
        }

        self.attribute_map = {
            'apple_pay_token': 'applePayToken',
            'funding_source': 'fundingSource',
            'recurring_detail_reference': 'recurringDetailReference',
            'type': 'type',
            'brand': 'brand',
            'cupsecureplus_smscode': 'cupsecureplus.smscode',
            'cvc': 'cvc',
            'encrypted_card_number': 'encryptedCardNumber',
            'encrypted_expiry_month': 'encryptedExpiryMonth',
            'encrypted_expiry_year': 'encryptedExpiryYear',
            'encrypted_security_code': 'encryptedSecurityCode',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'holder_name': 'holderName',
            'network_payment_reference': 'networkPaymentReference',
            'number': 'number',
            'shopper_notification_reference': 'shopperNotificationReference',
            'three_ds2_sdk_version': 'threeDS2SdkVersion',
            'google_pay_card_network': 'googlePayCardNetwork',
            'google_pay_token': 'googlePayToken',
            'issuer': 'issuer'
        }

        self._apple_pay_token = apple_pay_token
        self._funding_source = funding_source
        self._recurring_detail_reference = recurring_detail_reference
        self._type = type
        self._brand = brand
        self._cupsecureplus_smscode = cupsecureplus_smscode
        self._cvc = cvc
        self._encrypted_card_number = encrypted_card_number
        self._encrypted_expiry_month = encrypted_expiry_month
        self._encrypted_expiry_year = encrypted_expiry_year
        self._encrypted_security_code = encrypted_security_code
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._holder_name = holder_name
        self._network_payment_reference = network_payment_reference
        self._number = number
        self._shopper_notification_reference = shopper_notification_reference
        self._three_ds2_sdk_version = three_ds2_sdk_version
        self._google_pay_card_network = google_pay_card_network
        self._google_pay_token = google_pay_token
        self._issuer = issuer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DonationPaymentRequestPaymentMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DonationPaymentRequest_paymentMethod of this DonationPaymentRequestPaymentMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apple_pay_token(self):
        """Gets the apple_pay_token of this DonationPaymentRequestPaymentMethod.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :return: The apple_pay_token of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._apple_pay_token

    @apple_pay_token.setter
    def apple_pay_token(self, apple_pay_token):
        """Sets the apple_pay_token of this DonationPaymentRequestPaymentMethod.

        The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.

        :param apple_pay_token: The apple_pay_token of this DonationPaymentRequestPaymentMethod.
        :type apple_pay_token: str
        """
        if apple_pay_token is None:
            raise ValueError("Invalid value for `apple_pay_token`, must not be `None`")
        if apple_pay_token is not None and len(apple_pay_token) > 10000:
            raise ValueError("Invalid value for `apple_pay_token`, length must be less than or equal to `10000`")

        self._apple_pay_token = apple_pay_token

    @property
    def funding_source(self):
        """Gets the funding_source of this DonationPaymentRequestPaymentMethod.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this DonationPaymentRequestPaymentMethod.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this DonationPaymentRequestPaymentMethod.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this DonationPaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this DonationPaymentRequestPaymentMethod.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this DonationPaymentRequestPaymentMethod.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def type(self):
        """Gets the type of this DonationPaymentRequestPaymentMethod.

        **applepay**

        :return: The type of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DonationPaymentRequestPaymentMethod.

        **applepay**

        :param type: The type of this DonationPaymentRequestPaymentMethod.
        :type type: str
        """
        allowed_values = ["applepay", "bcmc", "scheme", "networkToken", "giftcard", "card", "googlepay", "ideal", "paywithgoogle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def brand(self):
        """Gets the brand of this DonationPaymentRequestPaymentMethod.

        Secondary brand of the card. For example: **plastix**, **hmclub**.

        :return: The brand of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this DonationPaymentRequestPaymentMethod.

        Secondary brand of the card. For example: **plastix**, **hmclub**.

        :param brand: The brand of this DonationPaymentRequestPaymentMethod.
        :type brand: str
        """

        self._brand = brand

    @property
    def cupsecureplus_smscode(self):
        """Gets the cupsecureplus_smscode of this DonationPaymentRequestPaymentMethod.


        :return: The cupsecureplus_smscode of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._cupsecureplus_smscode

    @cupsecureplus_smscode.setter
    def cupsecureplus_smscode(self, cupsecureplus_smscode):
        """Sets the cupsecureplus_smscode of this DonationPaymentRequestPaymentMethod.


        :param cupsecureplus_smscode: The cupsecureplus_smscode of this DonationPaymentRequestPaymentMethod.
        :type cupsecureplus_smscode: str
        """

        self._cupsecureplus_smscode = cupsecureplus_smscode

    @property
    def cvc(self):
        """Gets the cvc of this DonationPaymentRequestPaymentMethod.

        The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The cvc of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this DonationPaymentRequestPaymentMethod.

        The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param cvc: The cvc of this DonationPaymentRequestPaymentMethod.
        :type cvc: str
        """

        self._cvc = cvc

    @property
    def encrypted_card_number(self):
        """Gets the encrypted_card_number of this DonationPaymentRequestPaymentMethod.

        The encrypted card number.

        :return: The encrypted_card_number of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_card_number

    @encrypted_card_number.setter
    def encrypted_card_number(self, encrypted_card_number):
        """Sets the encrypted_card_number of this DonationPaymentRequestPaymentMethod.

        The encrypted card number.

        :param encrypted_card_number: The encrypted_card_number of this DonationPaymentRequestPaymentMethod.
        :type encrypted_card_number: str
        """
        if encrypted_card_number is not None and len(encrypted_card_number) > 15000:
            raise ValueError("Invalid value for `encrypted_card_number`, length must be less than or equal to `15000`")

        self._encrypted_card_number = encrypted_card_number

    @property
    def encrypted_expiry_month(self):
        """Gets the encrypted_expiry_month of this DonationPaymentRequestPaymentMethod.

        The encrypted card expiry month.

        :return: The encrypted_expiry_month of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_expiry_month

    @encrypted_expiry_month.setter
    def encrypted_expiry_month(self, encrypted_expiry_month):
        """Sets the encrypted_expiry_month of this DonationPaymentRequestPaymentMethod.

        The encrypted card expiry month.

        :param encrypted_expiry_month: The encrypted_expiry_month of this DonationPaymentRequestPaymentMethod.
        :type encrypted_expiry_month: str
        """
        if encrypted_expiry_month is not None and len(encrypted_expiry_month) > 15000:
            raise ValueError("Invalid value for `encrypted_expiry_month`, length must be less than or equal to `15000`")

        self._encrypted_expiry_month = encrypted_expiry_month

    @property
    def encrypted_expiry_year(self):
        """Gets the encrypted_expiry_year of this DonationPaymentRequestPaymentMethod.

        The encrypted card expiry year.

        :return: The encrypted_expiry_year of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_expiry_year

    @encrypted_expiry_year.setter
    def encrypted_expiry_year(self, encrypted_expiry_year):
        """Sets the encrypted_expiry_year of this DonationPaymentRequestPaymentMethod.

        The encrypted card expiry year.

        :param encrypted_expiry_year: The encrypted_expiry_year of this DonationPaymentRequestPaymentMethod.
        :type encrypted_expiry_year: str
        """
        if encrypted_expiry_year is not None and len(encrypted_expiry_year) > 15000:
            raise ValueError("Invalid value for `encrypted_expiry_year`, length must be less than or equal to `15000`")

        self._encrypted_expiry_year = encrypted_expiry_year

    @property
    def encrypted_security_code(self):
        """Gets the encrypted_security_code of this DonationPaymentRequestPaymentMethod.

        The encrypted card verification code.

        :return: The encrypted_security_code of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._encrypted_security_code

    @encrypted_security_code.setter
    def encrypted_security_code(self, encrypted_security_code):
        """Sets the encrypted_security_code of this DonationPaymentRequestPaymentMethod.

        The encrypted card verification code.

        :param encrypted_security_code: The encrypted_security_code of this DonationPaymentRequestPaymentMethod.
        :type encrypted_security_code: str
        """
        if encrypted_security_code is not None and len(encrypted_security_code) > 15000:
            raise ValueError("Invalid value for `encrypted_security_code`, length must be less than or equal to `15000`")

        self._encrypted_security_code = encrypted_security_code

    @property
    def expiry_month(self):
        """Gets the expiry_month of this DonationPaymentRequestPaymentMethod.

        The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The expiry_month of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this DonationPaymentRequestPaymentMethod.

        The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param expiry_month: The expiry_month of this DonationPaymentRequestPaymentMethod.
        :type expiry_month: str
        """

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this DonationPaymentRequestPaymentMethod.

        The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The expiry_year of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this DonationPaymentRequestPaymentMethod.

        The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param expiry_year: The expiry_year of this DonationPaymentRequestPaymentMethod.
        :type expiry_year: str
        """

        self._expiry_year = expiry_year

    @property
    def holder_name(self):
        """Gets the holder_name of this DonationPaymentRequestPaymentMethod.

        The name of the card holder.

        :return: The holder_name of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this DonationPaymentRequestPaymentMethod.

        The name of the card holder.

        :param holder_name: The holder_name of this DonationPaymentRequestPaymentMethod.
        :type holder_name: str
        """

        self._holder_name = holder_name

    @property
    def network_payment_reference(self):
        """Gets the network_payment_reference of this DonationPaymentRequestPaymentMethod.

        The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.

        :return: The network_payment_reference of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._network_payment_reference

    @network_payment_reference.setter
    def network_payment_reference(self, network_payment_reference):
        """Sets the network_payment_reference of this DonationPaymentRequestPaymentMethod.

        The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.

        :param network_payment_reference: The network_payment_reference of this DonationPaymentRequestPaymentMethod.
        :type network_payment_reference: str
        """

        self._network_payment_reference = network_payment_reference

    @property
    def number(self):
        """Gets the number of this DonationPaymentRequestPaymentMethod.

        The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :return: The number of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DonationPaymentRequestPaymentMethod.

        The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).

        :param number: The number of this DonationPaymentRequestPaymentMethod.
        :type number: str
        """

        self._number = number

    @property
    def shopper_notification_reference(self):
        """Gets the shopper_notification_reference of this DonationPaymentRequestPaymentMethod.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.

        :return: The shopper_notification_reference of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._shopper_notification_reference

    @shopper_notification_reference.setter
    def shopper_notification_reference(self, shopper_notification_reference):
        """Sets the shopper_notification_reference of this DonationPaymentRequestPaymentMethod.

        The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used only for recurring payments in India.

        :param shopper_notification_reference: The shopper_notification_reference of this DonationPaymentRequestPaymentMethod.
        :type shopper_notification_reference: str
        """

        self._shopper_notification_reference = shopper_notification_reference

    @property
    def three_ds2_sdk_version(self):
        """Gets the three_ds2_sdk_version of this DonationPaymentRequestPaymentMethod.

        Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.

        :return: The three_ds2_sdk_version of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._three_ds2_sdk_version

    @three_ds2_sdk_version.setter
    def three_ds2_sdk_version(self, three_ds2_sdk_version):
        """Sets the three_ds2_sdk_version of this DonationPaymentRequestPaymentMethod.

        Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.

        :param three_ds2_sdk_version: The three_ds2_sdk_version of this DonationPaymentRequestPaymentMethod.
        :type three_ds2_sdk_version: str
        """
        if three_ds2_sdk_version is not None and len(three_ds2_sdk_version) > 12:
            raise ValueError("Invalid value for `three_ds2_sdk_version`, length must be less than or equal to `12`")

        self._three_ds2_sdk_version = three_ds2_sdk_version

    @property
    def google_pay_card_network(self):
        """Gets the google_pay_card_network of this DonationPaymentRequestPaymentMethod.

        The selected payment card network. 

        :return: The google_pay_card_network of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._google_pay_card_network

    @google_pay_card_network.setter
    def google_pay_card_network(self, google_pay_card_network):
        """Sets the google_pay_card_network of this DonationPaymentRequestPaymentMethod.

        The selected payment card network. 

        :param google_pay_card_network: The google_pay_card_network of this DonationPaymentRequestPaymentMethod.
        :type google_pay_card_network: str
        """

        self._google_pay_card_network = google_pay_card_network

    @property
    def google_pay_token(self):
        """Gets the google_pay_token of this DonationPaymentRequestPaymentMethod.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :return: The google_pay_token of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._google_pay_token

    @google_pay_token.setter
    def google_pay_token(self, google_pay_token):
        """Sets the google_pay_token of this DonationPaymentRequestPaymentMethod.

        The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.

        :param google_pay_token: The google_pay_token of this DonationPaymentRequestPaymentMethod.
        :type google_pay_token: str
        """
        if google_pay_token is None:
            raise ValueError("Invalid value for `google_pay_token`, must not be `None`")

        self._google_pay_token = google_pay_token

    @property
    def issuer(self):
        """Gets the issuer of this DonationPaymentRequestPaymentMethod.

        The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it.

        :return: The issuer of this DonationPaymentRequestPaymentMethod.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this DonationPaymentRequestPaymentMethod.

        The iDEAL issuer value of the shopper's selected bank. Set this to an **id** of an iDEAL issuer to preselect it.

        :param issuer: The issuer of this DonationPaymentRequestPaymentMethod.
        :type issuer: str
        """
        if issuer is None:
            raise ValueError("Invalid value for `issuer`, must not be `None`")

        self._issuer = issuer
