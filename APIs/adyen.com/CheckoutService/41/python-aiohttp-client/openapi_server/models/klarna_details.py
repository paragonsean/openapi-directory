# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KlarnaDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: str=None, delivery_address: str=None, personal_details: str=None, recurring_detail_reference: str=None, subtype: str=None, type: str='klarna'):
        """KlarnaDetails - a model defined in OpenAPI

        :param billing_address: The billing_address of this KlarnaDetails.
        :param delivery_address: The delivery_address of this KlarnaDetails.
        :param personal_details: The personal_details of this KlarnaDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this KlarnaDetails.
        :param subtype: The subtype of this KlarnaDetails.
        :param type: The type of this KlarnaDetails.
        """
        self.openapi_types = {
            'billing_address': str,
            'delivery_address': str,
            'personal_details': str,
            'recurring_detail_reference': str,
            'subtype': str,
            'type': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'delivery_address': 'deliveryAddress',
            'personal_details': 'personalDetails',
            'recurring_detail_reference': 'recurringDetailReference',
            'subtype': 'subtype',
            'type': 'type'
        }

        self._billing_address = billing_address
        self._delivery_address = delivery_address
        self._personal_details = personal_details
        self._recurring_detail_reference = recurring_detail_reference
        self._subtype = subtype
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KlarnaDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KlarnaDetails of this KlarnaDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this KlarnaDetails.

        The address where to send the invoice.

        :return: The billing_address of this KlarnaDetails.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this KlarnaDetails.

        The address where to send the invoice.

        :param billing_address: The billing_address of this KlarnaDetails.
        :type billing_address: str
        """

        self._billing_address = billing_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this KlarnaDetails.

        The address where the goods should be delivered.

        :return: The delivery_address of this KlarnaDetails.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this KlarnaDetails.

        The address where the goods should be delivered.

        :param delivery_address: The delivery_address of this KlarnaDetails.
        :type delivery_address: str
        """

        self._delivery_address = delivery_address

    @property
    def personal_details(self):
        """Gets the personal_details of this KlarnaDetails.

        Shopper name, date of birth, phone number, and email address.

        :return: The personal_details of this KlarnaDetails.
        :rtype: str
        """
        return self._personal_details

    @personal_details.setter
    def personal_details(self, personal_details):
        """Sets the personal_details of this KlarnaDetails.

        Shopper name, date of birth, phone number, and email address.

        :param personal_details: The personal_details of this KlarnaDetails.
        :type personal_details: str
        """

        self._personal_details = personal_details

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this KlarnaDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this KlarnaDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this KlarnaDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this KlarnaDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def subtype(self):
        """Gets the subtype of this KlarnaDetails.

        The type of flow to initiate.

        :return: The subtype of this KlarnaDetails.
        :rtype: str
        """
        return self._subtype

    @subtype.setter
    def subtype(self, subtype):
        """Sets the subtype of this KlarnaDetails.

        The type of flow to initiate.

        :param subtype: The subtype of this KlarnaDetails.
        :type subtype: str
        """

        self._subtype = subtype

    @property
    def type(self):
        """Gets the type of this KlarnaDetails.

        **klarna**

        :return: The type of this KlarnaDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KlarnaDetails.

        **klarna**

        :param type: The type of this KlarnaDetails.
        :type type: str
        """
        allowed_values = ["klarna", "klarnapayments", "klarnapayments_account", "klarnapayments_b2b", "klarna_paynow", "klarna_account", "klarna_b2b"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
