/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentLinkResponse.h
 *
 * 
 */

#ifndef OAIPaymentLinkResponse_H
#define OAIPaymentLinkResponse_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIAmount.h"
#include "OAIApplicationInfo.h"
#include "OAIInstallmentOption.h"
#include "OAILineItem.h"
#include "OAIName.h"
#include "OAISplit.h"
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAIApplicationInfo;
class OAIAddress;
class OAIInstallmentOption;
class OAILineItem;
class OAIName;
class OAISplit;

class OAIPaymentLinkResponse : public OAIObject {
public:
    OAIPaymentLinkResponse();
    OAIPaymentLinkResponse(QString json);
    ~OAIPaymentLinkResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedPaymentMethods() const;
    void setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods);
    bool is_allowed_payment_methods_Set() const;
    bool is_allowed_payment_methods_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    OAIApplicationInfo getApplicationInfo() const;
    void setApplicationInfo(const OAIApplicationInfo &application_info);
    bool is_application_info_Set() const;
    bool is_application_info_Valid() const;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    QList<QString> getBlockedPaymentMethods() const;
    void setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods);
    bool is_blocked_payment_methods_Set() const;
    bool is_blocked_payment_methods_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    QDateTime getDeliverAt() const;
    void setDeliverAt(const QDateTime &deliver_at);
    bool is_deliver_at_Set() const;
    bool is_deliver_at_Valid() const;

    OAIAddress getDeliveryAddress() const;
    void setDeliveryAddress(const OAIAddress &delivery_address);
    bool is_delivery_address_Set() const;
    bool is_delivery_address_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getExpiresAt() const;
    void setExpiresAt(const QString &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    QMap<QString, OAIInstallmentOption> getInstallmentOptions() const;
    void setInstallmentOptions(const QMap<QString, OAIInstallmentOption> &installment_options);
    bool is_installment_options_Set() const;
    bool is_installment_options_Valid() const;

    QList<OAILineItem> getLineItems() const;
    void setLineItems(const QList<OAILineItem> &line_items);
    bool is_line_items_Set() const;
    bool is_line_items_Valid() const;

    bool isManualCapture() const;
    void setManualCapture(const bool &manual_capture);
    bool is_manual_capture_Set() const;
    bool is_manual_capture_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    QString getMerchantOrderReference() const;
    void setMerchantOrderReference(const QString &merchant_order_reference);
    bool is_merchant_order_reference_Set() const;
    bool is_merchant_order_reference_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getRecurringProcessingModel() const;
    void setRecurringProcessingModel(const QString &recurring_processing_model);
    bool is_recurring_processing_model_Set() const;
    bool is_recurring_processing_model_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getReturnUrl() const;
    void setReturnUrl(const QString &return_url);
    bool is_return_url_Set() const;
    bool is_return_url_Valid() const;

    bool isReusable() const;
    void setReusable(const bool &reusable);
    bool is_reusable_Set() const;
    bool is_reusable_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    QString getShopperLocale() const;
    void setShopperLocale(const QString &shopper_locale);
    bool is_shopper_locale_Set() const;
    bool is_shopper_locale_Valid() const;

    OAIName getShopperName() const;
    void setShopperName(const OAIName &shopper_name);
    bool is_shopper_name_Set() const;
    bool is_shopper_name_Valid() const;

    QString getShopperReference() const;
    void setShopperReference(const QString &shopper_reference);
    bool is_shopper_reference_Set() const;
    bool is_shopper_reference_Valid() const;

    bool isShowRemovePaymentMethodButton() const;
    void setShowRemovePaymentMethodButton(const bool &show_remove_payment_method_button);
    bool is_show_remove_payment_method_button_Set() const;
    bool is_show_remove_payment_method_button_Valid() const;

    QList<OAISplit> getSplits() const;
    void setSplits(const QList<OAISplit> &splits);
    bool is_splits_Set() const;
    bool is_splits_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStore() const;
    void setStore(const QString &store);
    bool is_store_Set() const;
    bool is_store_Valid() const;

    QDateTime getUpdatedAt() const;
    void setUpdatedAt(const QDateTime &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_payment_methods;
    bool m_allowed_payment_methods_isSet;
    bool m_allowed_payment_methods_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    OAIApplicationInfo m_application_info;
    bool m_application_info_isSet;
    bool m_application_info_isValid;

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    QList<QString> m_blocked_payment_methods;
    bool m_blocked_payment_methods_isSet;
    bool m_blocked_payment_methods_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    QDateTime m_deliver_at;
    bool m_deliver_at_isSet;
    bool m_deliver_at_isValid;

    OAIAddress m_delivery_address;
    bool m_delivery_address_isSet;
    bool m_delivery_address_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    QMap<QString, OAIInstallmentOption> m_installment_options;
    bool m_installment_options_isSet;
    bool m_installment_options_isValid;

    QList<OAILineItem> m_line_items;
    bool m_line_items_isSet;
    bool m_line_items_isValid;

    bool m_manual_capture;
    bool m_manual_capture_isSet;
    bool m_manual_capture_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    QString m_merchant_order_reference;
    bool m_merchant_order_reference_isSet;
    bool m_merchant_order_reference_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_recurring_processing_model;
    bool m_recurring_processing_model_isSet;
    bool m_recurring_processing_model_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_return_url;
    bool m_return_url_isSet;
    bool m_return_url_isValid;

    bool m_reusable;
    bool m_reusable_isSet;
    bool m_reusable_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    QString m_shopper_locale;
    bool m_shopper_locale_isSet;
    bool m_shopper_locale_isValid;

    OAIName m_shopper_name;
    bool m_shopper_name_isSet;
    bool m_shopper_name_isValid;

    QString m_shopper_reference;
    bool m_shopper_reference_isSet;
    bool m_shopper_reference_isValid;

    bool m_show_remove_payment_method_button;
    bool m_show_remove_payment_method_button_isSet;
    bool m_show_remove_payment_method_button_isValid;

    QList<OAISplit> m_splits;
    bool m_splits_isSet;
    bool m_splits_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_store;
    bool m_store_isSet;
    bool m_store_isValid;

    QDateTime m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentLinkResponse)

#endif // OAIPaymentLinkResponse_H
