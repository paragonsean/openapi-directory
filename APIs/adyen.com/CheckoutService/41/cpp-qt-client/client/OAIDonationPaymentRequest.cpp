/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDonationPaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDonationPaymentRequest::OAIDonationPaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDonationPaymentRequest::OAIDonationPaymentRequest() {
    this->initializeModel();
}

OAIDonationPaymentRequest::~OAIDonationPaymentRequest() {}

void OAIDonationPaymentRequest::initializeModel() {

    m_account_info_isSet = false;
    m_account_info_isValid = false;

    m_additional_amount_isSet = false;
    m_additional_amount_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_allowed_payment_methods_isSet = false;
    m_allowed_payment_methods_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_application_info_isSet = false;
    m_application_info_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_blocked_payment_methods_isSet = false;
    m_blocked_payment_methods_isValid = false;

    m_browser_info_isSet = false;
    m_browser_info_isValid = false;

    m_capture_delay_hours_isSet = false;
    m_capture_delay_hours_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_dcc_quote_isSet = false;
    m_dcc_quote_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_delivery_date_isSet = false;
    m_delivery_date_isValid = false;

    m_device_fingerprint_isSet = false;
    m_device_fingerprint_isValid = false;

    m_donation_account_isSet = false;
    m_donation_account_isValid = false;

    m_donation_original_psp_reference_isSet = false;
    m_donation_original_psp_reference_isValid = false;

    m_donation_token_isSet = false;
    m_donation_token_isValid = false;

    m_enable_one_click_isSet = false;
    m_enable_one_click_isValid = false;

    m_enable_pay_out_isSet = false;
    m_enable_pay_out_isValid = false;

    m_enable_recurring_isSet = false;
    m_enable_recurring_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fraud_offset_isSet = false;
    m_fraud_offset_isValid = false;

    m_fund_origin_isSet = false;
    m_fund_origin_isValid = false;

    m_fund_recipient_isSet = false;
    m_fund_recipient_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_mandate_isSet = false;
    m_mandate_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_order_reference_isSet = false;
    m_merchant_order_reference_isValid = false;

    m_merchant_risk_indicator_isSet = false;
    m_merchant_risk_indicator_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mpi_data_isSet = false;
    m_mpi_data_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_order_reference_isSet = false;
    m_order_reference_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_recurring_expiry_isSet = false;
    m_recurring_expiry_isValid = false;

    m_recurring_frequency_isSet = false;
    m_recurring_frequency_isValid = false;

    m_recurring_processing_model_isSet = false;
    m_recurring_processing_model_isValid = false;

    m_redirect_from_issuer_method_isSet = false;
    m_redirect_from_issuer_method_isValid = false;

    m_redirect_to_issuer_method_isSet = false;
    m_redirect_to_issuer_method_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_risk_data_isSet = false;
    m_risk_data_isValid = false;

    m_selected_recurring_detail_reference_isSet = false;
    m_selected_recurring_detail_reference_isValid = false;

    m_session_validity_isSet = false;
    m_session_validity_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_ip_isSet = false;
    m_shopper_ip_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_shopper_statement_isSet = false;
    m_shopper_statement_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_three_ds2_request_data_isSet = false;
    m_three_ds2_request_data_isValid = false;

    m_trusted_shopper_isSet = false;
    m_trusted_shopper_isValid = false;
}

void OAIDonationPaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDonationPaymentRequest::fromJsonObject(QJsonObject json) {

    m_account_info_isValid = ::OpenAPI::fromJsonValue(m_account_info, json[QString("accountInfo")]);
    m_account_info_isSet = !json[QString("accountInfo")].isNull() && m_account_info_isValid;

    m_additional_amount_isValid = ::OpenAPI::fromJsonValue(m_additional_amount, json[QString("additionalAmount")]);
    m_additional_amount_isSet = !json[QString("additionalAmount")].isNull() && m_additional_amount_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_allowed_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_methods, json[QString("allowedPaymentMethods")]);
    m_allowed_payment_methods_isSet = !json[QString("allowedPaymentMethods")].isNull() && m_allowed_payment_methods_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_application_info_isValid = ::OpenAPI::fromJsonValue(m_application_info, json[QString("applicationInfo")]);
    m_application_info_isSet = !json[QString("applicationInfo")].isNull() && m_application_info_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_blocked_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_blocked_payment_methods, json[QString("blockedPaymentMethods")]);
    m_blocked_payment_methods_isSet = !json[QString("blockedPaymentMethods")].isNull() && m_blocked_payment_methods_isValid;

    m_browser_info_isValid = ::OpenAPI::fromJsonValue(m_browser_info, json[QString("browserInfo")]);
    m_browser_info_isSet = !json[QString("browserInfo")].isNull() && m_browser_info_isValid;

    m_capture_delay_hours_isValid = ::OpenAPI::fromJsonValue(m_capture_delay_hours, json[QString("captureDelayHours")]);
    m_capture_delay_hours_isSet = !json[QString("captureDelayHours")].isNull() && m_capture_delay_hours_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_dcc_quote_isValid = ::OpenAPI::fromJsonValue(m_dcc_quote, json[QString("dccQuote")]);
    m_dcc_quote_isSet = !json[QString("dccQuote")].isNull() && m_dcc_quote_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_delivery_date, json[QString("deliveryDate")]);
    m_delivery_date_isSet = !json[QString("deliveryDate")].isNull() && m_delivery_date_isValid;

    m_device_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_device_fingerprint, json[QString("deviceFingerprint")]);
    m_device_fingerprint_isSet = !json[QString("deviceFingerprint")].isNull() && m_device_fingerprint_isValid;

    m_donation_account_isValid = ::OpenAPI::fromJsonValue(m_donation_account, json[QString("donationAccount")]);
    m_donation_account_isSet = !json[QString("donationAccount")].isNull() && m_donation_account_isValid;

    m_donation_original_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_donation_original_psp_reference, json[QString("donationOriginalPspReference")]);
    m_donation_original_psp_reference_isSet = !json[QString("donationOriginalPspReference")].isNull() && m_donation_original_psp_reference_isValid;

    m_donation_token_isValid = ::OpenAPI::fromJsonValue(m_donation_token, json[QString("donationToken")]);
    m_donation_token_isSet = !json[QString("donationToken")].isNull() && m_donation_token_isValid;

    m_enable_one_click_isValid = ::OpenAPI::fromJsonValue(m_enable_one_click, json[QString("enableOneClick")]);
    m_enable_one_click_isSet = !json[QString("enableOneClick")].isNull() && m_enable_one_click_isValid;

    m_enable_pay_out_isValid = ::OpenAPI::fromJsonValue(m_enable_pay_out, json[QString("enablePayOut")]);
    m_enable_pay_out_isSet = !json[QString("enablePayOut")].isNull() && m_enable_pay_out_isValid;

    m_enable_recurring_isValid = ::OpenAPI::fromJsonValue(m_enable_recurring, json[QString("enableRecurring")]);
    m_enable_recurring_isSet = !json[QString("enableRecurring")].isNull() && m_enable_recurring_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_fraud_offset_isValid = ::OpenAPI::fromJsonValue(m_fraud_offset, json[QString("fraudOffset")]);
    m_fraud_offset_isSet = !json[QString("fraudOffset")].isNull() && m_fraud_offset_isValid;

    m_fund_origin_isValid = ::OpenAPI::fromJsonValue(m_fund_origin, json[QString("fundOrigin")]);
    m_fund_origin_isSet = !json[QString("fundOrigin")].isNull() && m_fund_origin_isValid;

    m_fund_recipient_isValid = ::OpenAPI::fromJsonValue(m_fund_recipient, json[QString("fundRecipient")]);
    m_fund_recipient_isSet = !json[QString("fundRecipient")].isNull() && m_fund_recipient_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_mandate_isValid = ::OpenAPI::fromJsonValue(m_mandate, json[QString("mandate")]);
    m_mandate_isSet = !json[QString("mandate")].isNull() && m_mandate_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_order_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_reference, json[QString("merchantOrderReference")]);
    m_merchant_order_reference_isSet = !json[QString("merchantOrderReference")].isNull() && m_merchant_order_reference_isValid;

    m_merchant_risk_indicator_isValid = ::OpenAPI::fromJsonValue(m_merchant_risk_indicator, json[QString("merchantRiskIndicator")]);
    m_merchant_risk_indicator_isSet = !json[QString("merchantRiskIndicator")].isNull() && m_merchant_risk_indicator_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mpi_data_isValid = ::OpenAPI::fromJsonValue(m_mpi_data, json[QString("mpiData")]);
    m_mpi_data_isSet = !json[QString("mpiData")].isNull() && m_mpi_data_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_order_reference_isValid = ::OpenAPI::fromJsonValue(m_order_reference, json[QString("orderReference")]);
    m_order_reference_isSet = !json[QString("orderReference")].isNull() && m_order_reference_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_recurring_expiry_isValid = ::OpenAPI::fromJsonValue(m_recurring_expiry, json[QString("recurringExpiry")]);
    m_recurring_expiry_isSet = !json[QString("recurringExpiry")].isNull() && m_recurring_expiry_isValid;

    m_recurring_frequency_isValid = ::OpenAPI::fromJsonValue(m_recurring_frequency, json[QString("recurringFrequency")]);
    m_recurring_frequency_isSet = !json[QString("recurringFrequency")].isNull() && m_recurring_frequency_isValid;

    m_recurring_processing_model_isValid = ::OpenAPI::fromJsonValue(m_recurring_processing_model, json[QString("recurringProcessingModel")]);
    m_recurring_processing_model_isSet = !json[QString("recurringProcessingModel")].isNull() && m_recurring_processing_model_isValid;

    m_redirect_from_issuer_method_isValid = ::OpenAPI::fromJsonValue(m_redirect_from_issuer_method, json[QString("redirectFromIssuerMethod")]);
    m_redirect_from_issuer_method_isSet = !json[QString("redirectFromIssuerMethod")].isNull() && m_redirect_from_issuer_method_isValid;

    m_redirect_to_issuer_method_isValid = ::OpenAPI::fromJsonValue(m_redirect_to_issuer_method, json[QString("redirectToIssuerMethod")]);
    m_redirect_to_issuer_method_isSet = !json[QString("redirectToIssuerMethod")].isNull() && m_redirect_to_issuer_method_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("returnUrl")]);
    m_return_url_isSet = !json[QString("returnUrl")].isNull() && m_return_url_isValid;

    m_risk_data_isValid = ::OpenAPI::fromJsonValue(m_risk_data, json[QString("riskData")]);
    m_risk_data_isSet = !json[QString("riskData")].isNull() && m_risk_data_isValid;

    m_selected_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_selected_recurring_detail_reference, json[QString("selectedRecurringDetailReference")]);
    m_selected_recurring_detail_reference_isSet = !json[QString("selectedRecurringDetailReference")].isNull() && m_selected_recurring_detail_reference_isValid;

    m_session_validity_isValid = ::OpenAPI::fromJsonValue(m_session_validity, json[QString("sessionValidity")]);
    m_session_validity_isSet = !json[QString("sessionValidity")].isNull() && m_session_validity_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_ip_isValid = ::OpenAPI::fromJsonValue(m_shopper_ip, json[QString("shopperIP")]);
    m_shopper_ip_isSet = !json[QString("shopperIP")].isNull() && m_shopper_ip_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_shopper_statement_isValid = ::OpenAPI::fromJsonValue(m_shopper_statement, json[QString("shopperStatement")]);
    m_shopper_statement_isSet = !json[QString("shopperStatement")].isNull() && m_shopper_statement_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;

    m_three_ds2_request_data_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_request_data, json[QString("threeDS2RequestData")]);
    m_three_ds2_request_data_isSet = !json[QString("threeDS2RequestData")].isNull() && m_three_ds2_request_data_isValid;

    m_trusted_shopper_isValid = ::OpenAPI::fromJsonValue(m_trusted_shopper, json[QString("trustedShopper")]);
    m_trusted_shopper_isSet = !json[QString("trustedShopper")].isNull() && m_trusted_shopper_isValid;
}

QString OAIDonationPaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDonationPaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_info.isSet()) {
        obj.insert(QString("accountInfo"), ::OpenAPI::toJsonValue(m_account_info));
    }
    if (m_additional_amount.isSet()) {
        obj.insert(QString("additionalAmount"), ::OpenAPI::toJsonValue(m_additional_amount));
    }
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_allowed_payment_methods.size() > 0) {
        obj.insert(QString("allowedPaymentMethods"), ::OpenAPI::toJsonValue(m_allowed_payment_methods));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_application_info.isSet()) {
        obj.insert(QString("applicationInfo"), ::OpenAPI::toJsonValue(m_application_info));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_blocked_payment_methods.size() > 0) {
        obj.insert(QString("blockedPaymentMethods"), ::OpenAPI::toJsonValue(m_blocked_payment_methods));
    }
    if (m_browser_info.isSet()) {
        obj.insert(QString("browserInfo"), ::OpenAPI::toJsonValue(m_browser_info));
    }
    if (m_capture_delay_hours_isSet) {
        obj.insert(QString("captureDelayHours"), ::OpenAPI::toJsonValue(m_capture_delay_hours));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_company.isSet()) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_dcc_quote.isSet()) {
        obj.insert(QString("dccQuote"), ::OpenAPI::toJsonValue(m_dcc_quote));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_delivery_date_isSet) {
        obj.insert(QString("deliveryDate"), ::OpenAPI::toJsonValue(m_delivery_date));
    }
    if (m_device_fingerprint_isSet) {
        obj.insert(QString("deviceFingerprint"), ::OpenAPI::toJsonValue(m_device_fingerprint));
    }
    if (m_donation_account_isSet) {
        obj.insert(QString("donationAccount"), ::OpenAPI::toJsonValue(m_donation_account));
    }
    if (m_donation_original_psp_reference_isSet) {
        obj.insert(QString("donationOriginalPspReference"), ::OpenAPI::toJsonValue(m_donation_original_psp_reference));
    }
    if (m_donation_token_isSet) {
        obj.insert(QString("donationToken"), ::OpenAPI::toJsonValue(m_donation_token));
    }
    if (m_enable_one_click_isSet) {
        obj.insert(QString("enableOneClick"), ::OpenAPI::toJsonValue(m_enable_one_click));
    }
    if (m_enable_pay_out_isSet) {
        obj.insert(QString("enablePayOut"), ::OpenAPI::toJsonValue(m_enable_pay_out));
    }
    if (m_enable_recurring_isSet) {
        obj.insert(QString("enableRecurring"), ::OpenAPI::toJsonValue(m_enable_recurring));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fraud_offset_isSet) {
        obj.insert(QString("fraudOffset"), ::OpenAPI::toJsonValue(m_fraud_offset));
    }
    if (m_fund_origin.isSet()) {
        obj.insert(QString("fundOrigin"), ::OpenAPI::toJsonValue(m_fund_origin));
    }
    if (m_fund_recipient.isSet()) {
        obj.insert(QString("fundRecipient"), ::OpenAPI::toJsonValue(m_fund_recipient));
    }
    if (m_installments.isSet()) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_mandate.isSet()) {
        obj.insert(QString("mandate"), ::OpenAPI::toJsonValue(m_mandate));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_order_reference_isSet) {
        obj.insert(QString("merchantOrderReference"), ::OpenAPI::toJsonValue(m_merchant_order_reference));
    }
    if (m_merchant_risk_indicator.isSet()) {
        obj.insert(QString("merchantRiskIndicator"), ::OpenAPI::toJsonValue(m_merchant_risk_indicator));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mpi_data.isSet()) {
        obj.insert(QString("mpiData"), ::OpenAPI::toJsonValue(m_mpi_data));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_order_reference_isSet) {
        obj.insert(QString("orderReference"), ::OpenAPI::toJsonValue(m_order_reference));
    }
    if (m_origin_isSet) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_payment_method.isSet()) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_recurring_expiry_isSet) {
        obj.insert(QString("recurringExpiry"), ::OpenAPI::toJsonValue(m_recurring_expiry));
    }
    if (m_recurring_frequency_isSet) {
        obj.insert(QString("recurringFrequency"), ::OpenAPI::toJsonValue(m_recurring_frequency));
    }
    if (m_recurring_processing_model_isSet) {
        obj.insert(QString("recurringProcessingModel"), ::OpenAPI::toJsonValue(m_recurring_processing_model));
    }
    if (m_redirect_from_issuer_method_isSet) {
        obj.insert(QString("redirectFromIssuerMethod"), ::OpenAPI::toJsonValue(m_redirect_from_issuer_method));
    }
    if (m_redirect_to_issuer_method_isSet) {
        obj.insert(QString("redirectToIssuerMethod"), ::OpenAPI::toJsonValue(m_redirect_to_issuer_method));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("returnUrl"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_risk_data.isSet()) {
        obj.insert(QString("riskData"), ::OpenAPI::toJsonValue(m_risk_data));
    }
    if (m_selected_recurring_detail_reference_isSet) {
        obj.insert(QString("selectedRecurringDetailReference"), ::OpenAPI::toJsonValue(m_selected_recurring_detail_reference));
    }
    if (m_session_validity_isSet) {
        obj.insert(QString("sessionValidity"), ::OpenAPI::toJsonValue(m_session_validity));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_ip_isSet) {
        obj.insert(QString("shopperIP"), ::OpenAPI::toJsonValue(m_shopper_ip));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_shopper_statement_isSet) {
        obj.insert(QString("shopperStatement"), ::OpenAPI::toJsonValue(m_shopper_statement));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_three_ds2_request_data.isSet()) {
        obj.insert(QString("threeDS2RequestData"), ::OpenAPI::toJsonValue(m_three_ds2_request_data));
    }
    if (m_trusted_shopper_isSet) {
        obj.insert(QString("trustedShopper"), ::OpenAPI::toJsonValue(m_trusted_shopper));
    }
    return obj;
}

OAIAccountInfo OAIDonationPaymentRequest::getAccountInfo() const {
    return m_account_info;
}
void OAIDonationPaymentRequest::setAccountInfo(const OAIAccountInfo &account_info) {
    m_account_info = account_info;
    m_account_info_isSet = true;
}

bool OAIDonationPaymentRequest::is_account_info_Set() const{
    return m_account_info_isSet;
}

bool OAIDonationPaymentRequest::is_account_info_Valid() const{
    return m_account_info_isValid;
}

OAIAmount OAIDonationPaymentRequest::getAdditionalAmount() const {
    return m_additional_amount;
}
void OAIDonationPaymentRequest::setAdditionalAmount(const OAIAmount &additional_amount) {
    m_additional_amount = additional_amount;
    m_additional_amount_isSet = true;
}

bool OAIDonationPaymentRequest::is_additional_amount_Set() const{
    return m_additional_amount_isSet;
}

bool OAIDonationPaymentRequest::is_additional_amount_Valid() const{
    return m_additional_amount_isValid;
}

OAIBalanceCheckRequest_additionalData OAIDonationPaymentRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAIDonationPaymentRequest::setAdditionalData(const OAIBalanceCheckRequest_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIDonationPaymentRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIDonationPaymentRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QList<QString> OAIDonationPaymentRequest::getAllowedPaymentMethods() const {
    return m_allowed_payment_methods;
}
void OAIDonationPaymentRequest::setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods) {
    m_allowed_payment_methods = allowed_payment_methods;
    m_allowed_payment_methods_isSet = true;
}

bool OAIDonationPaymentRequest::is_allowed_payment_methods_Set() const{
    return m_allowed_payment_methods_isSet;
}

bool OAIDonationPaymentRequest::is_allowed_payment_methods_Valid() const{
    return m_allowed_payment_methods_isValid;
}

OAIAmount OAIDonationPaymentRequest::getAmount() const {
    return m_amount;
}
void OAIDonationPaymentRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIDonationPaymentRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIDonationPaymentRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIApplicationInfo OAIDonationPaymentRequest::getApplicationInfo() const {
    return m_application_info;
}
void OAIDonationPaymentRequest::setApplicationInfo(const OAIApplicationInfo &application_info) {
    m_application_info = application_info;
    m_application_info_isSet = true;
}

bool OAIDonationPaymentRequest::is_application_info_Set() const{
    return m_application_info_isSet;
}

bool OAIDonationPaymentRequest::is_application_info_Valid() const{
    return m_application_info_isValid;
}

OAIBillingAddress OAIDonationPaymentRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIDonationPaymentRequest::setBillingAddress(const OAIBillingAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIDonationPaymentRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIDonationPaymentRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QList<QString> OAIDonationPaymentRequest::getBlockedPaymentMethods() const {
    return m_blocked_payment_methods;
}
void OAIDonationPaymentRequest::setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods) {
    m_blocked_payment_methods = blocked_payment_methods;
    m_blocked_payment_methods_isSet = true;
}

bool OAIDonationPaymentRequest::is_blocked_payment_methods_Set() const{
    return m_blocked_payment_methods_isSet;
}

bool OAIDonationPaymentRequest::is_blocked_payment_methods_Valid() const{
    return m_blocked_payment_methods_isValid;
}

OAIBrowserInfo OAIDonationPaymentRequest::getBrowserInfo() const {
    return m_browser_info;
}
void OAIDonationPaymentRequest::setBrowserInfo(const OAIBrowserInfo &browser_info) {
    m_browser_info = browser_info;
    m_browser_info_isSet = true;
}

bool OAIDonationPaymentRequest::is_browser_info_Set() const{
    return m_browser_info_isSet;
}

bool OAIDonationPaymentRequest::is_browser_info_Valid() const{
    return m_browser_info_isValid;
}

qint32 OAIDonationPaymentRequest::getCaptureDelayHours() const {
    return m_capture_delay_hours;
}
void OAIDonationPaymentRequest::setCaptureDelayHours(const qint32 &capture_delay_hours) {
    m_capture_delay_hours = capture_delay_hours;
    m_capture_delay_hours_isSet = true;
}

bool OAIDonationPaymentRequest::is_capture_delay_hours_Set() const{
    return m_capture_delay_hours_isSet;
}

bool OAIDonationPaymentRequest::is_capture_delay_hours_Valid() const{
    return m_capture_delay_hours_isValid;
}

QString OAIDonationPaymentRequest::getChannel() const {
    return m_channel;
}
void OAIDonationPaymentRequest::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIDonationPaymentRequest::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIDonationPaymentRequest::is_channel_Valid() const{
    return m_channel_isValid;
}

OAICompany OAIDonationPaymentRequest::getCompany() const {
    return m_company;
}
void OAIDonationPaymentRequest::setCompany(const OAICompany &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIDonationPaymentRequest::is_company_Set() const{
    return m_company_isSet;
}

bool OAIDonationPaymentRequest::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIDonationPaymentRequest::getCountryCode() const {
    return m_country_code;
}
void OAIDonationPaymentRequest::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIDonationPaymentRequest::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIDonationPaymentRequest::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QDateTime OAIDonationPaymentRequest::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIDonationPaymentRequest::setDateOfBirth(const QDateTime &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIDonationPaymentRequest::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIDonationPaymentRequest::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

OAIForexQuote OAIDonationPaymentRequest::getDccQuote() const {
    return m_dcc_quote;
}
void OAIDonationPaymentRequest::setDccQuote(const OAIForexQuote &dcc_quote) {
    m_dcc_quote = dcc_quote;
    m_dcc_quote_isSet = true;
}

bool OAIDonationPaymentRequest::is_dcc_quote_Set() const{
    return m_dcc_quote_isSet;
}

bool OAIDonationPaymentRequest::is_dcc_quote_Valid() const{
    return m_dcc_quote_isValid;
}

OAIDeliveryAddress OAIDonationPaymentRequest::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIDonationPaymentRequest::setDeliveryAddress(const OAIDeliveryAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIDonationPaymentRequest::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIDonationPaymentRequest::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

QDateTime OAIDonationPaymentRequest::getDeliveryDate() const {
    return m_delivery_date;
}
void OAIDonationPaymentRequest::setDeliveryDate(const QDateTime &delivery_date) {
    m_delivery_date = delivery_date;
    m_delivery_date_isSet = true;
}

bool OAIDonationPaymentRequest::is_delivery_date_Set() const{
    return m_delivery_date_isSet;
}

bool OAIDonationPaymentRequest::is_delivery_date_Valid() const{
    return m_delivery_date_isValid;
}

QString OAIDonationPaymentRequest::getDeviceFingerprint() const {
    return m_device_fingerprint;
}
void OAIDonationPaymentRequest::setDeviceFingerprint(const QString &device_fingerprint) {
    m_device_fingerprint = device_fingerprint;
    m_device_fingerprint_isSet = true;
}

bool OAIDonationPaymentRequest::is_device_fingerprint_Set() const{
    return m_device_fingerprint_isSet;
}

bool OAIDonationPaymentRequest::is_device_fingerprint_Valid() const{
    return m_device_fingerprint_isValid;
}

QString OAIDonationPaymentRequest::getDonationAccount() const {
    return m_donation_account;
}
void OAIDonationPaymentRequest::setDonationAccount(const QString &donation_account) {
    m_donation_account = donation_account;
    m_donation_account_isSet = true;
}

bool OAIDonationPaymentRequest::is_donation_account_Set() const{
    return m_donation_account_isSet;
}

bool OAIDonationPaymentRequest::is_donation_account_Valid() const{
    return m_donation_account_isValid;
}

QString OAIDonationPaymentRequest::getDonationOriginalPspReference() const {
    return m_donation_original_psp_reference;
}
void OAIDonationPaymentRequest::setDonationOriginalPspReference(const QString &donation_original_psp_reference) {
    m_donation_original_psp_reference = donation_original_psp_reference;
    m_donation_original_psp_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_donation_original_psp_reference_Set() const{
    return m_donation_original_psp_reference_isSet;
}

bool OAIDonationPaymentRequest::is_donation_original_psp_reference_Valid() const{
    return m_donation_original_psp_reference_isValid;
}

QString OAIDonationPaymentRequest::getDonationToken() const {
    return m_donation_token;
}
void OAIDonationPaymentRequest::setDonationToken(const QString &donation_token) {
    m_donation_token = donation_token;
    m_donation_token_isSet = true;
}

bool OAIDonationPaymentRequest::is_donation_token_Set() const{
    return m_donation_token_isSet;
}

bool OAIDonationPaymentRequest::is_donation_token_Valid() const{
    return m_donation_token_isValid;
}

bool OAIDonationPaymentRequest::isEnableOneClick() const {
    return m_enable_one_click;
}
void OAIDonationPaymentRequest::setEnableOneClick(const bool &enable_one_click) {
    m_enable_one_click = enable_one_click;
    m_enable_one_click_isSet = true;
}

bool OAIDonationPaymentRequest::is_enable_one_click_Set() const{
    return m_enable_one_click_isSet;
}

bool OAIDonationPaymentRequest::is_enable_one_click_Valid() const{
    return m_enable_one_click_isValid;
}

bool OAIDonationPaymentRequest::isEnablePayOut() const {
    return m_enable_pay_out;
}
void OAIDonationPaymentRequest::setEnablePayOut(const bool &enable_pay_out) {
    m_enable_pay_out = enable_pay_out;
    m_enable_pay_out_isSet = true;
}

bool OAIDonationPaymentRequest::is_enable_pay_out_Set() const{
    return m_enable_pay_out_isSet;
}

bool OAIDonationPaymentRequest::is_enable_pay_out_Valid() const{
    return m_enable_pay_out_isValid;
}

bool OAIDonationPaymentRequest::isEnableRecurring() const {
    return m_enable_recurring;
}
void OAIDonationPaymentRequest::setEnableRecurring(const bool &enable_recurring) {
    m_enable_recurring = enable_recurring;
    m_enable_recurring_isSet = true;
}

bool OAIDonationPaymentRequest::is_enable_recurring_Set() const{
    return m_enable_recurring_isSet;
}

bool OAIDonationPaymentRequest::is_enable_recurring_Valid() const{
    return m_enable_recurring_isValid;
}

QString OAIDonationPaymentRequest::getEntityType() const {
    return m_entity_type;
}
void OAIDonationPaymentRequest::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIDonationPaymentRequest::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIDonationPaymentRequest::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

qint32 OAIDonationPaymentRequest::getFraudOffset() const {
    return m_fraud_offset;
}
void OAIDonationPaymentRequest::setFraudOffset(const qint32 &fraud_offset) {
    m_fraud_offset = fraud_offset;
    m_fraud_offset_isSet = true;
}

bool OAIDonationPaymentRequest::is_fraud_offset_Set() const{
    return m_fraud_offset_isSet;
}

bool OAIDonationPaymentRequest::is_fraud_offset_Valid() const{
    return m_fraud_offset_isValid;
}

OAIFundOrigin OAIDonationPaymentRequest::getFundOrigin() const {
    return m_fund_origin;
}
void OAIDonationPaymentRequest::setFundOrigin(const OAIFundOrigin &fund_origin) {
    m_fund_origin = fund_origin;
    m_fund_origin_isSet = true;
}

bool OAIDonationPaymentRequest::is_fund_origin_Set() const{
    return m_fund_origin_isSet;
}

bool OAIDonationPaymentRequest::is_fund_origin_Valid() const{
    return m_fund_origin_isValid;
}

OAIFundRecipient OAIDonationPaymentRequest::getFundRecipient() const {
    return m_fund_recipient;
}
void OAIDonationPaymentRequest::setFundRecipient(const OAIFundRecipient &fund_recipient) {
    m_fund_recipient = fund_recipient;
    m_fund_recipient_isSet = true;
}

bool OAIDonationPaymentRequest::is_fund_recipient_Set() const{
    return m_fund_recipient_isSet;
}

bool OAIDonationPaymentRequest::is_fund_recipient_Valid() const{
    return m_fund_recipient_isValid;
}

OAIInstallments OAIDonationPaymentRequest::getInstallments() const {
    return m_installments;
}
void OAIDonationPaymentRequest::setInstallments(const OAIInstallments &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIDonationPaymentRequest::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIDonationPaymentRequest::is_installments_Valid() const{
    return m_installments_isValid;
}

QList<OAILineItem> OAIDonationPaymentRequest::getLineItems() const {
    return m_line_items;
}
void OAIDonationPaymentRequest::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIDonationPaymentRequest::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIDonationPaymentRequest::is_line_items_Valid() const{
    return m_line_items_isValid;
}

OAIMandate OAIDonationPaymentRequest::getMandate() const {
    return m_mandate;
}
void OAIDonationPaymentRequest::setMandate(const OAIMandate &mandate) {
    m_mandate = mandate;
    m_mandate_isSet = true;
}

bool OAIDonationPaymentRequest::is_mandate_Set() const{
    return m_mandate_isSet;
}

bool OAIDonationPaymentRequest::is_mandate_Valid() const{
    return m_mandate_isValid;
}

QString OAIDonationPaymentRequest::getMcc() const {
    return m_mcc;
}
void OAIDonationPaymentRequest::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIDonationPaymentRequest::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIDonationPaymentRequest::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAIDonationPaymentRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIDonationPaymentRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIDonationPaymentRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIDonationPaymentRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIDonationPaymentRequest::getMerchantOrderReference() const {
    return m_merchant_order_reference;
}
void OAIDonationPaymentRequest::setMerchantOrderReference(const QString &merchant_order_reference) {
    m_merchant_order_reference = merchant_order_reference;
    m_merchant_order_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_merchant_order_reference_Set() const{
    return m_merchant_order_reference_isSet;
}

bool OAIDonationPaymentRequest::is_merchant_order_reference_Valid() const{
    return m_merchant_order_reference_isValid;
}

OAIMerchantRiskIndicator OAIDonationPaymentRequest::getMerchantRiskIndicator() const {
    return m_merchant_risk_indicator;
}
void OAIDonationPaymentRequest::setMerchantRiskIndicator(const OAIMerchantRiskIndicator &merchant_risk_indicator) {
    m_merchant_risk_indicator = merchant_risk_indicator;
    m_merchant_risk_indicator_isSet = true;
}

bool OAIDonationPaymentRequest::is_merchant_risk_indicator_Set() const{
    return m_merchant_risk_indicator_isSet;
}

bool OAIDonationPaymentRequest::is_merchant_risk_indicator_Valid() const{
    return m_merchant_risk_indicator_isValid;
}

QMap<QString, QString> OAIDonationPaymentRequest::getMetadata() const {
    return m_metadata;
}
void OAIDonationPaymentRequest::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDonationPaymentRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDonationPaymentRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIThreeDSecureData OAIDonationPaymentRequest::getMpiData() const {
    return m_mpi_data;
}
void OAIDonationPaymentRequest::setMpiData(const OAIThreeDSecureData &mpi_data) {
    m_mpi_data = mpi_data;
    m_mpi_data_isSet = true;
}

bool OAIDonationPaymentRequest::is_mpi_data_Set() const{
    return m_mpi_data_isSet;
}

bool OAIDonationPaymentRequest::is_mpi_data_Valid() const{
    return m_mpi_data_isValid;
}

OAIEncryptedOrderData OAIDonationPaymentRequest::getOrder() const {
    return m_order;
}
void OAIDonationPaymentRequest::setOrder(const OAIEncryptedOrderData &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIDonationPaymentRequest::is_order_Set() const{
    return m_order_isSet;
}

bool OAIDonationPaymentRequest::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIDonationPaymentRequest::getOrderReference() const {
    return m_order_reference;
}
void OAIDonationPaymentRequest::setOrderReference(const QString &order_reference) {
    m_order_reference = order_reference;
    m_order_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_order_reference_Set() const{
    return m_order_reference_isSet;
}

bool OAIDonationPaymentRequest::is_order_reference_Valid() const{
    return m_order_reference_isValid;
}

QString OAIDonationPaymentRequest::getOrigin() const {
    return m_origin;
}
void OAIDonationPaymentRequest::setOrigin(const QString &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIDonationPaymentRequest::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIDonationPaymentRequest::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIDonationPaymentRequest_paymentMethod OAIDonationPaymentRequest::getPaymentMethod() const {
    return m_payment_method;
}
void OAIDonationPaymentRequest::setPaymentMethod(const OAIDonationPaymentRequest_paymentMethod &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIDonationPaymentRequest::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIDonationPaymentRequest::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIDonationPaymentRequest::getRecurringExpiry() const {
    return m_recurring_expiry;
}
void OAIDonationPaymentRequest::setRecurringExpiry(const QString &recurring_expiry) {
    m_recurring_expiry = recurring_expiry;
    m_recurring_expiry_isSet = true;
}

bool OAIDonationPaymentRequest::is_recurring_expiry_Set() const{
    return m_recurring_expiry_isSet;
}

bool OAIDonationPaymentRequest::is_recurring_expiry_Valid() const{
    return m_recurring_expiry_isValid;
}

QString OAIDonationPaymentRequest::getRecurringFrequency() const {
    return m_recurring_frequency;
}
void OAIDonationPaymentRequest::setRecurringFrequency(const QString &recurring_frequency) {
    m_recurring_frequency = recurring_frequency;
    m_recurring_frequency_isSet = true;
}

bool OAIDonationPaymentRequest::is_recurring_frequency_Set() const{
    return m_recurring_frequency_isSet;
}

bool OAIDonationPaymentRequest::is_recurring_frequency_Valid() const{
    return m_recurring_frequency_isValid;
}

QString OAIDonationPaymentRequest::getRecurringProcessingModel() const {
    return m_recurring_processing_model;
}
void OAIDonationPaymentRequest::setRecurringProcessingModel(const QString &recurring_processing_model) {
    m_recurring_processing_model = recurring_processing_model;
    m_recurring_processing_model_isSet = true;
}

bool OAIDonationPaymentRequest::is_recurring_processing_model_Set() const{
    return m_recurring_processing_model_isSet;
}

bool OAIDonationPaymentRequest::is_recurring_processing_model_Valid() const{
    return m_recurring_processing_model_isValid;
}

QString OAIDonationPaymentRequest::getRedirectFromIssuerMethod() const {
    return m_redirect_from_issuer_method;
}
void OAIDonationPaymentRequest::setRedirectFromIssuerMethod(const QString &redirect_from_issuer_method) {
    m_redirect_from_issuer_method = redirect_from_issuer_method;
    m_redirect_from_issuer_method_isSet = true;
}

bool OAIDonationPaymentRequest::is_redirect_from_issuer_method_Set() const{
    return m_redirect_from_issuer_method_isSet;
}

bool OAIDonationPaymentRequest::is_redirect_from_issuer_method_Valid() const{
    return m_redirect_from_issuer_method_isValid;
}

QString OAIDonationPaymentRequest::getRedirectToIssuerMethod() const {
    return m_redirect_to_issuer_method;
}
void OAIDonationPaymentRequest::setRedirectToIssuerMethod(const QString &redirect_to_issuer_method) {
    m_redirect_to_issuer_method = redirect_to_issuer_method;
    m_redirect_to_issuer_method_isSet = true;
}

bool OAIDonationPaymentRequest::is_redirect_to_issuer_method_Set() const{
    return m_redirect_to_issuer_method_isSet;
}

bool OAIDonationPaymentRequest::is_redirect_to_issuer_method_Valid() const{
    return m_redirect_to_issuer_method_isValid;
}

QString OAIDonationPaymentRequest::getReference() const {
    return m_reference;
}
void OAIDonationPaymentRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIDonationPaymentRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIDonationPaymentRequest::getReturnUrl() const {
    return m_return_url;
}
void OAIDonationPaymentRequest::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAIDonationPaymentRequest::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAIDonationPaymentRequest::is_return_url_Valid() const{
    return m_return_url_isValid;
}

OAIRiskData OAIDonationPaymentRequest::getRiskData() const {
    return m_risk_data;
}
void OAIDonationPaymentRequest::setRiskData(const OAIRiskData &risk_data) {
    m_risk_data = risk_data;
    m_risk_data_isSet = true;
}

bool OAIDonationPaymentRequest::is_risk_data_Set() const{
    return m_risk_data_isSet;
}

bool OAIDonationPaymentRequest::is_risk_data_Valid() const{
    return m_risk_data_isValid;
}

QString OAIDonationPaymentRequest::getSelectedRecurringDetailReference() const {
    return m_selected_recurring_detail_reference;
}
void OAIDonationPaymentRequest::setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference) {
    m_selected_recurring_detail_reference = selected_recurring_detail_reference;
    m_selected_recurring_detail_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_selected_recurring_detail_reference_Set() const{
    return m_selected_recurring_detail_reference_isSet;
}

bool OAIDonationPaymentRequest::is_selected_recurring_detail_reference_Valid() const{
    return m_selected_recurring_detail_reference_isValid;
}

QString OAIDonationPaymentRequest::getSessionValidity() const {
    return m_session_validity;
}
void OAIDonationPaymentRequest::setSessionValidity(const QString &session_validity) {
    m_session_validity = session_validity;
    m_session_validity_isSet = true;
}

bool OAIDonationPaymentRequest::is_session_validity_Set() const{
    return m_session_validity_isSet;
}

bool OAIDonationPaymentRequest::is_session_validity_Valid() const{
    return m_session_validity_isValid;
}

QString OAIDonationPaymentRequest::getShopperEmail() const {
    return m_shopper_email;
}
void OAIDonationPaymentRequest::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIDonationPaymentRequest::getShopperIp() const {
    return m_shopper_ip;
}
void OAIDonationPaymentRequest::setShopperIp(const QString &shopper_ip) {
    m_shopper_ip = shopper_ip;
    m_shopper_ip_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_ip_Set() const{
    return m_shopper_ip_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_ip_Valid() const{
    return m_shopper_ip_isValid;
}

QString OAIDonationPaymentRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIDonationPaymentRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIDonationPaymentRequest::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIDonationPaymentRequest::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

OAIName OAIDonationPaymentRequest::getShopperName() const {
    return m_shopper_name;
}
void OAIDonationPaymentRequest::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIDonationPaymentRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIDonationPaymentRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIDonationPaymentRequest::getShopperStatement() const {
    return m_shopper_statement;
}
void OAIDonationPaymentRequest::setShopperStatement(const QString &shopper_statement) {
    m_shopper_statement = shopper_statement;
    m_shopper_statement_isSet = true;
}

bool OAIDonationPaymentRequest::is_shopper_statement_Set() const{
    return m_shopper_statement_isSet;
}

bool OAIDonationPaymentRequest::is_shopper_statement_Valid() const{
    return m_shopper_statement_isValid;
}

QString OAIDonationPaymentRequest::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAIDonationPaymentRequest::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAIDonationPaymentRequest::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAIDonationPaymentRequest::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

QList<OAISplit> OAIDonationPaymentRequest::getSplits() const {
    return m_splits;
}
void OAIDonationPaymentRequest::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAIDonationPaymentRequest::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAIDonationPaymentRequest::is_splits_Valid() const{
    return m_splits_isValid;
}

QString OAIDonationPaymentRequest::getStore() const {
    return m_store;
}
void OAIDonationPaymentRequest::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIDonationPaymentRequest::is_store_Set() const{
    return m_store_isSet;
}

bool OAIDonationPaymentRequest::is_store_Valid() const{
    return m_store_isValid;
}

QString OAIDonationPaymentRequest::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIDonationPaymentRequest::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIDonationPaymentRequest::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIDonationPaymentRequest::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

OAIThreeDS2RequestFields OAIDonationPaymentRequest::getThreeDs2RequestData() const {
    return m_three_ds2_request_data;
}
void OAIDonationPaymentRequest::setThreeDs2RequestData(const OAIThreeDS2RequestFields &three_ds2_request_data) {
    m_three_ds2_request_data = three_ds2_request_data;
    m_three_ds2_request_data_isSet = true;
}

bool OAIDonationPaymentRequest::is_three_ds2_request_data_Set() const{
    return m_three_ds2_request_data_isSet;
}

bool OAIDonationPaymentRequest::is_three_ds2_request_data_Valid() const{
    return m_three_ds2_request_data_isValid;
}

bool OAIDonationPaymentRequest::isTrustedShopper() const {
    return m_trusted_shopper;
}
void OAIDonationPaymentRequest::setTrustedShopper(const bool &trusted_shopper) {
    m_trusted_shopper = trusted_shopper;
    m_trusted_shopper_isSet = true;
}

bool OAIDonationPaymentRequest::is_trusted_shopper_Set() const{
    return m_trusted_shopper_isSet;
}

bool OAIDonationPaymentRequest::is_trusted_shopper_Valid() const{
    return m_trusted_shopper_isValid;
}

bool OAIDonationPaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_delay_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcc_quote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_original_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_one_click_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pay_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_recurring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fund_recipient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_risk_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_expiry_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_processing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_from_issuer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_to_issuer_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_validity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_request_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_shopper_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDonationPaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_merchant_account_isValid && m_payment_method_isValid && m_reference_isValid && m_return_url_isValid && true;
}

} // namespace OpenAPI
