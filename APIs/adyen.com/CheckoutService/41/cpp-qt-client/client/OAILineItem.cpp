/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineItem::OAILineItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineItem::OAILineItem() {
    this->initializeModel();
}

OAILineItem::~OAILineItem() {}

void OAILineItem::initializeModel() {

    m_amount_excluding_tax_isSet = false;
    m_amount_excluding_tax_isValid = false;

    m_amount_including_tax_isSet = false;
    m_amount_including_tax_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_url_isSet = false;
    m_image_url_isValid = false;

    m_item_category_isSet = false;
    m_item_category_isValid = false;

    m_product_url_isSet = false;
    m_product_url_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_percentage_isSet = false;
    m_tax_percentage_isValid = false;
}

void OAILineItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineItem::fromJsonObject(QJsonObject json) {

    m_amount_excluding_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_excluding_tax, json[QString("amountExcludingTax")]);
    m_amount_excluding_tax_isSet = !json[QString("amountExcludingTax")].isNull() && m_amount_excluding_tax_isValid;

    m_amount_including_tax_isValid = ::OpenAPI::fromJsonValue(m_amount_including_tax, json[QString("amountIncludingTax")]);
    m_amount_including_tax_isSet = !json[QString("amountIncludingTax")].isNull() && m_amount_including_tax_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_url_isValid = ::OpenAPI::fromJsonValue(m_image_url, json[QString("imageUrl")]);
    m_image_url_isSet = !json[QString("imageUrl")].isNull() && m_image_url_isValid;

    m_item_category_isValid = ::OpenAPI::fromJsonValue(m_item_category, json[QString("itemCategory")]);
    m_item_category_isSet = !json[QString("itemCategory")].isNull() && m_item_category_isValid;

    m_product_url_isValid = ::OpenAPI::fromJsonValue(m_product_url, json[QString("productUrl")]);
    m_product_url_isSet = !json[QString("productUrl")].isNull() && m_product_url_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("taxAmount")]);
    m_tax_amount_isSet = !json[QString("taxAmount")].isNull() && m_tax_amount_isValid;

    m_tax_percentage_isValid = ::OpenAPI::fromJsonValue(m_tax_percentage, json[QString("taxPercentage")]);
    m_tax_percentage_isSet = !json[QString("taxPercentage")].isNull() && m_tax_percentage_isValid;
}

QString OAILineItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineItem::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_excluding_tax_isSet) {
        obj.insert(QString("amountExcludingTax"), ::OpenAPI::toJsonValue(m_amount_excluding_tax));
    }
    if (m_amount_including_tax_isSet) {
        obj.insert(QString("amountIncludingTax"), ::OpenAPI::toJsonValue(m_amount_including_tax));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_url_isSet) {
        obj.insert(QString("imageUrl"), ::OpenAPI::toJsonValue(m_image_url));
    }
    if (m_item_category_isSet) {
        obj.insert(QString("itemCategory"), ::OpenAPI::toJsonValue(m_item_category));
    }
    if (m_product_url_isSet) {
        obj.insert(QString("productUrl"), ::OpenAPI::toJsonValue(m_product_url));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("taxAmount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_percentage_isSet) {
        obj.insert(QString("taxPercentage"), ::OpenAPI::toJsonValue(m_tax_percentage));
    }
    return obj;
}

qint64 OAILineItem::getAmountExcludingTax() const {
    return m_amount_excluding_tax;
}
void OAILineItem::setAmountExcludingTax(const qint64 &amount_excluding_tax) {
    m_amount_excluding_tax = amount_excluding_tax;
    m_amount_excluding_tax_isSet = true;
}

bool OAILineItem::is_amount_excluding_tax_Set() const{
    return m_amount_excluding_tax_isSet;
}

bool OAILineItem::is_amount_excluding_tax_Valid() const{
    return m_amount_excluding_tax_isValid;
}

qint64 OAILineItem::getAmountIncludingTax() const {
    return m_amount_including_tax;
}
void OAILineItem::setAmountIncludingTax(const qint64 &amount_including_tax) {
    m_amount_including_tax = amount_including_tax;
    m_amount_including_tax_isSet = true;
}

bool OAILineItem::is_amount_including_tax_Set() const{
    return m_amount_including_tax_isSet;
}

bool OAILineItem::is_amount_including_tax_Valid() const{
    return m_amount_including_tax_isValid;
}

QString OAILineItem::getDescription() const {
    return m_description;
}
void OAILineItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILineItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAILineItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILineItem::getId() const {
    return m_id;
}
void OAILineItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILineItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAILineItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILineItem::getImageUrl() const {
    return m_image_url;
}
void OAILineItem::setImageUrl(const QString &image_url) {
    m_image_url = image_url;
    m_image_url_isSet = true;
}

bool OAILineItem::is_image_url_Set() const{
    return m_image_url_isSet;
}

bool OAILineItem::is_image_url_Valid() const{
    return m_image_url_isValid;
}

QString OAILineItem::getItemCategory() const {
    return m_item_category;
}
void OAILineItem::setItemCategory(const QString &item_category) {
    m_item_category = item_category;
    m_item_category_isSet = true;
}

bool OAILineItem::is_item_category_Set() const{
    return m_item_category_isSet;
}

bool OAILineItem::is_item_category_Valid() const{
    return m_item_category_isValid;
}

QString OAILineItem::getProductUrl() const {
    return m_product_url;
}
void OAILineItem::setProductUrl(const QString &product_url) {
    m_product_url = product_url;
    m_product_url_isSet = true;
}

bool OAILineItem::is_product_url_Set() const{
    return m_product_url_isSet;
}

bool OAILineItem::is_product_url_Valid() const{
    return m_product_url_isValid;
}

qint64 OAILineItem::getQuantity() const {
    return m_quantity;
}
void OAILineItem::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAILineItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAILineItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint64 OAILineItem::getTaxAmount() const {
    return m_tax_amount;
}
void OAILineItem::setTaxAmount(const qint64 &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAILineItem::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAILineItem::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

qint64 OAILineItem::getTaxPercentage() const {
    return m_tax_percentage;
}
void OAILineItem::setTaxPercentage(const qint64 &tax_percentage) {
    m_tax_percentage = tax_percentage;
    m_tax_percentage_isSet = true;
}

bool OAILineItem::is_tax_percentage_Set() const{
    return m_tax_percentage_isSet;
}

bool OAILineItem::is_tax_percentage_Valid() const{
    return m_tax_percentage_isValid;
}

bool OAILineItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_excluding_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_including_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_percentage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
