/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentLinkRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentLinkRequest::OAIPaymentLinkRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentLinkRequest::OAIPaymentLinkRequest() {
    this->initializeModel();
}

OAIPaymentLinkRequest::~OAIPaymentLinkRequest() {}

void OAIPaymentLinkRequest::initializeModel() {

    m_allowed_payment_methods_isSet = false;
    m_allowed_payment_methods_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_application_info_isSet = false;
    m_application_info_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_blocked_payment_methods_isSet = false;
    m_blocked_payment_methods_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_deliver_at_isSet = false;
    m_deliver_at_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expires_at_isSet = false;
    m_expires_at_isValid = false;

    m_installment_options_isSet = false;
    m_installment_options_isValid = false;

    m_line_items_isSet = false;
    m_line_items_isValid = false;

    m_manual_capture_isSet = false;
    m_manual_capture_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_order_reference_isSet = false;
    m_merchant_order_reference_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_recurring_processing_model_isSet = false;
    m_recurring_processing_model_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_return_url_isSet = false;
    m_return_url_isValid = false;

    m_reusable_isSet = false;
    m_reusable_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_show_remove_payment_method_button_isSet = false;
    m_show_remove_payment_method_button_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;
}

void OAIPaymentLinkRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentLinkRequest::fromJsonObject(QJsonObject json) {

    m_allowed_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_methods, json[QString("allowedPaymentMethods")]);
    m_allowed_payment_methods_isSet = !json[QString("allowedPaymentMethods")].isNull() && m_allowed_payment_methods_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_application_info_isValid = ::OpenAPI::fromJsonValue(m_application_info, json[QString("applicationInfo")]);
    m_application_info_isSet = !json[QString("applicationInfo")].isNull() && m_application_info_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_blocked_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_blocked_payment_methods, json[QString("blockedPaymentMethods")]);
    m_blocked_payment_methods_isSet = !json[QString("blockedPaymentMethods")].isNull() && m_blocked_payment_methods_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_deliver_at_isValid = ::OpenAPI::fromJsonValue(m_deliver_at, json[QString("deliverAt")]);
    m_deliver_at_isSet = !json[QString("deliverAt")].isNull() && m_deliver_at_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expires_at_isValid = ::OpenAPI::fromJsonValue(m_expires_at, json[QString("expiresAt")]);
    m_expires_at_isSet = !json[QString("expiresAt")].isNull() && m_expires_at_isValid;

    m_installment_options_isValid = ::OpenAPI::fromJsonValue(m_installment_options, json[QString("installmentOptions")]);
    m_installment_options_isSet = !json[QString("installmentOptions")].isNull() && m_installment_options_isValid;

    m_line_items_isValid = ::OpenAPI::fromJsonValue(m_line_items, json[QString("lineItems")]);
    m_line_items_isSet = !json[QString("lineItems")].isNull() && m_line_items_isValid;

    m_manual_capture_isValid = ::OpenAPI::fromJsonValue(m_manual_capture, json[QString("manualCapture")]);
    m_manual_capture_isSet = !json[QString("manualCapture")].isNull() && m_manual_capture_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_order_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_reference, json[QString("merchantOrderReference")]);
    m_merchant_order_reference_isSet = !json[QString("merchantOrderReference")].isNull() && m_merchant_order_reference_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_recurring_processing_model_isValid = ::OpenAPI::fromJsonValue(m_recurring_processing_model, json[QString("recurringProcessingModel")]);
    m_recurring_processing_model_isSet = !json[QString("recurringProcessingModel")].isNull() && m_recurring_processing_model_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_return_url_isValid = ::OpenAPI::fromJsonValue(m_return_url, json[QString("returnUrl")]);
    m_return_url_isSet = !json[QString("returnUrl")].isNull() && m_return_url_isValid;

    m_reusable_isValid = ::OpenAPI::fromJsonValue(m_reusable, json[QString("reusable")]);
    m_reusable_isSet = !json[QString("reusable")].isNull() && m_reusable_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_show_remove_payment_method_button_isValid = ::OpenAPI::fromJsonValue(m_show_remove_payment_method_button, json[QString("showRemovePaymentMethodButton")]);
    m_show_remove_payment_method_button_isSet = !json[QString("showRemovePaymentMethodButton")].isNull() && m_show_remove_payment_method_button_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;
}

QString OAIPaymentLinkRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentLinkRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_payment_methods.size() > 0) {
        obj.insert(QString("allowedPaymentMethods"), ::OpenAPI::toJsonValue(m_allowed_payment_methods));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_application_info.isSet()) {
        obj.insert(QString("applicationInfo"), ::OpenAPI::toJsonValue(m_application_info));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_blocked_payment_methods.size() > 0) {
        obj.insert(QString("blockedPaymentMethods"), ::OpenAPI::toJsonValue(m_blocked_payment_methods));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_deliver_at_isSet) {
        obj.insert(QString("deliverAt"), ::OpenAPI::toJsonValue(m_deliver_at));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expires_at_isSet) {
        obj.insert(QString("expiresAt"), ::OpenAPI::toJsonValue(m_expires_at));
    }
    if (m_installment_options.size() > 0) {
        obj.insert(QString("installmentOptions"), ::OpenAPI::toJsonValue(m_installment_options));
    }
    if (m_line_items.size() > 0) {
        obj.insert(QString("lineItems"), ::OpenAPI::toJsonValue(m_line_items));
    }
    if (m_manual_capture_isSet) {
        obj.insert(QString("manualCapture"), ::OpenAPI::toJsonValue(m_manual_capture));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_order_reference_isSet) {
        obj.insert(QString("merchantOrderReference"), ::OpenAPI::toJsonValue(m_merchant_order_reference));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_recurring_processing_model_isSet) {
        obj.insert(QString("recurringProcessingModel"), ::OpenAPI::toJsonValue(m_recurring_processing_model));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_return_url_isSet) {
        obj.insert(QString("returnUrl"), ::OpenAPI::toJsonValue(m_return_url));
    }
    if (m_reusable_isSet) {
        obj.insert(QString("reusable"), ::OpenAPI::toJsonValue(m_reusable));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_show_remove_payment_method_button_isSet) {
        obj.insert(QString("showRemovePaymentMethodButton"), ::OpenAPI::toJsonValue(m_show_remove_payment_method_button));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    return obj;
}

QList<QString> OAIPaymentLinkRequest::getAllowedPaymentMethods() const {
    return m_allowed_payment_methods;
}
void OAIPaymentLinkRequest::setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods) {
    m_allowed_payment_methods = allowed_payment_methods;
    m_allowed_payment_methods_isSet = true;
}

bool OAIPaymentLinkRequest::is_allowed_payment_methods_Set() const{
    return m_allowed_payment_methods_isSet;
}

bool OAIPaymentLinkRequest::is_allowed_payment_methods_Valid() const{
    return m_allowed_payment_methods_isValid;
}

OAIAmount OAIPaymentLinkRequest::getAmount() const {
    return m_amount;
}
void OAIPaymentLinkRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentLinkRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentLinkRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIApplicationInfo OAIPaymentLinkRequest::getApplicationInfo() const {
    return m_application_info;
}
void OAIPaymentLinkRequest::setApplicationInfo(const OAIApplicationInfo &application_info) {
    m_application_info = application_info;
    m_application_info_isSet = true;
}

bool OAIPaymentLinkRequest::is_application_info_Set() const{
    return m_application_info_isSet;
}

bool OAIPaymentLinkRequest::is_application_info_Valid() const{
    return m_application_info_isValid;
}

OAIAddress OAIPaymentLinkRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIPaymentLinkRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIPaymentLinkRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIPaymentLinkRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

QList<QString> OAIPaymentLinkRequest::getBlockedPaymentMethods() const {
    return m_blocked_payment_methods;
}
void OAIPaymentLinkRequest::setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods) {
    m_blocked_payment_methods = blocked_payment_methods;
    m_blocked_payment_methods_isSet = true;
}

bool OAIPaymentLinkRequest::is_blocked_payment_methods_Set() const{
    return m_blocked_payment_methods_isSet;
}

bool OAIPaymentLinkRequest::is_blocked_payment_methods_Valid() const{
    return m_blocked_payment_methods_isValid;
}

QString OAIPaymentLinkRequest::getCountryCode() const {
    return m_country_code;
}
void OAIPaymentLinkRequest::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPaymentLinkRequest::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPaymentLinkRequest::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QDateTime OAIPaymentLinkRequest::getDeliverAt() const {
    return m_deliver_at;
}
void OAIPaymentLinkRequest::setDeliverAt(const QDateTime &deliver_at) {
    m_deliver_at = deliver_at;
    m_deliver_at_isSet = true;
}

bool OAIPaymentLinkRequest::is_deliver_at_Set() const{
    return m_deliver_at_isSet;
}

bool OAIPaymentLinkRequest::is_deliver_at_Valid() const{
    return m_deliver_at_isValid;
}

OAIAddress OAIPaymentLinkRequest::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIPaymentLinkRequest::setDeliveryAddress(const OAIAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIPaymentLinkRequest::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIPaymentLinkRequest::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

QString OAIPaymentLinkRequest::getDescription() const {
    return m_description;
}
void OAIPaymentLinkRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPaymentLinkRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPaymentLinkRequest::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIPaymentLinkRequest::getExpiresAt() const {
    return m_expires_at;
}
void OAIPaymentLinkRequest::setExpiresAt(const QString &expires_at) {
    m_expires_at = expires_at;
    m_expires_at_isSet = true;
}

bool OAIPaymentLinkRequest::is_expires_at_Set() const{
    return m_expires_at_isSet;
}

bool OAIPaymentLinkRequest::is_expires_at_Valid() const{
    return m_expires_at_isValid;
}

QMap<QString, OAIInstallmentOption> OAIPaymentLinkRequest::getInstallmentOptions() const {
    return m_installment_options;
}
void OAIPaymentLinkRequest::setInstallmentOptions(const QMap<QString, OAIInstallmentOption> &installment_options) {
    m_installment_options = installment_options;
    m_installment_options_isSet = true;
}

bool OAIPaymentLinkRequest::is_installment_options_Set() const{
    return m_installment_options_isSet;
}

bool OAIPaymentLinkRequest::is_installment_options_Valid() const{
    return m_installment_options_isValid;
}

QList<OAILineItem> OAIPaymentLinkRequest::getLineItems() const {
    return m_line_items;
}
void OAIPaymentLinkRequest::setLineItems(const QList<OAILineItem> &line_items) {
    m_line_items = line_items;
    m_line_items_isSet = true;
}

bool OAIPaymentLinkRequest::is_line_items_Set() const{
    return m_line_items_isSet;
}

bool OAIPaymentLinkRequest::is_line_items_Valid() const{
    return m_line_items_isValid;
}

bool OAIPaymentLinkRequest::isManualCapture() const {
    return m_manual_capture;
}
void OAIPaymentLinkRequest::setManualCapture(const bool &manual_capture) {
    m_manual_capture = manual_capture;
    m_manual_capture_isSet = true;
}

bool OAIPaymentLinkRequest::is_manual_capture_Set() const{
    return m_manual_capture_isSet;
}

bool OAIPaymentLinkRequest::is_manual_capture_Valid() const{
    return m_manual_capture_isValid;
}

QString OAIPaymentLinkRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIPaymentLinkRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIPaymentLinkRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIPaymentLinkRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIPaymentLinkRequest::getMerchantOrderReference() const {
    return m_merchant_order_reference;
}
void OAIPaymentLinkRequest::setMerchantOrderReference(const QString &merchant_order_reference) {
    m_merchant_order_reference = merchant_order_reference;
    m_merchant_order_reference_isSet = true;
}

bool OAIPaymentLinkRequest::is_merchant_order_reference_Set() const{
    return m_merchant_order_reference_isSet;
}

bool OAIPaymentLinkRequest::is_merchant_order_reference_Valid() const{
    return m_merchant_order_reference_isValid;
}

QMap<QString, QString> OAIPaymentLinkRequest::getMetadata() const {
    return m_metadata;
}
void OAIPaymentLinkRequest::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPaymentLinkRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPaymentLinkRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIPaymentLinkRequest::getRecurringProcessingModel() const {
    return m_recurring_processing_model;
}
void OAIPaymentLinkRequest::setRecurringProcessingModel(const QString &recurring_processing_model) {
    m_recurring_processing_model = recurring_processing_model;
    m_recurring_processing_model_isSet = true;
}

bool OAIPaymentLinkRequest::is_recurring_processing_model_Set() const{
    return m_recurring_processing_model_isSet;
}

bool OAIPaymentLinkRequest::is_recurring_processing_model_Valid() const{
    return m_recurring_processing_model_isValid;
}

QString OAIPaymentLinkRequest::getReference() const {
    return m_reference;
}
void OAIPaymentLinkRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentLinkRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentLinkRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentLinkRequest::getReturnUrl() const {
    return m_return_url;
}
void OAIPaymentLinkRequest::setReturnUrl(const QString &return_url) {
    m_return_url = return_url;
    m_return_url_isSet = true;
}

bool OAIPaymentLinkRequest::is_return_url_Set() const{
    return m_return_url_isSet;
}

bool OAIPaymentLinkRequest::is_return_url_Valid() const{
    return m_return_url_isValid;
}

bool OAIPaymentLinkRequest::isReusable() const {
    return m_reusable;
}
void OAIPaymentLinkRequest::setReusable(const bool &reusable) {
    m_reusable = reusable;
    m_reusable_isSet = true;
}

bool OAIPaymentLinkRequest::is_reusable_Set() const{
    return m_reusable_isSet;
}

bool OAIPaymentLinkRequest::is_reusable_Valid() const{
    return m_reusable_isValid;
}

QString OAIPaymentLinkRequest::getShopperEmail() const {
    return m_shopper_email;
}
void OAIPaymentLinkRequest::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIPaymentLinkRequest::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIPaymentLinkRequest::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIPaymentLinkRequest::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIPaymentLinkRequest::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIPaymentLinkRequest::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIPaymentLinkRequest::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

OAIName OAIPaymentLinkRequest::getShopperName() const {
    return m_shopper_name;
}
void OAIPaymentLinkRequest::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIPaymentLinkRequest::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIPaymentLinkRequest::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIPaymentLinkRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPaymentLinkRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPaymentLinkRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPaymentLinkRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAIPaymentLinkRequest::isShowRemovePaymentMethodButton() const {
    return m_show_remove_payment_method_button;
}
void OAIPaymentLinkRequest::setShowRemovePaymentMethodButton(const bool &show_remove_payment_method_button) {
    m_show_remove_payment_method_button = show_remove_payment_method_button;
    m_show_remove_payment_method_button_isSet = true;
}

bool OAIPaymentLinkRequest::is_show_remove_payment_method_button_Set() const{
    return m_show_remove_payment_method_button_isSet;
}

bool OAIPaymentLinkRequest::is_show_remove_payment_method_button_Valid() const{
    return m_show_remove_payment_method_button_isValid;
}

QList<OAISplit> OAIPaymentLinkRequest::getSplits() const {
    return m_splits;
}
void OAIPaymentLinkRequest::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAIPaymentLinkRequest::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAIPaymentLinkRequest::is_splits_Valid() const{
    return m_splits_isValid;
}

QString OAIPaymentLinkRequest::getStore() const {
    return m_store;
}
void OAIPaymentLinkRequest::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIPaymentLinkRequest::is_store_Set() const{
    return m_store_isSet;
}

bool OAIPaymentLinkRequest::is_store_Valid() const{
    return m_store_isValid;
}

bool OAIPaymentLinkRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deliver_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installment_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_manual_capture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_processing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_return_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reusable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_remove_payment_method_button_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentLinkRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_merchant_account_isValid && m_reference_isValid && true;
}

} // namespace OpenAPI
