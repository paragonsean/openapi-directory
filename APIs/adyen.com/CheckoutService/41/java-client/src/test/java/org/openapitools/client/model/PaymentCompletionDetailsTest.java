/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentCompletionDetails
 */
public class PaymentCompletionDetailsTest {
    private final PaymentCompletionDetails model = new PaymentCompletionDetails();

    /**
     * Model tests for PaymentCompletionDetails
     */
    @Test
    public void testPaymentCompletionDetails() {
        // TODO: test PaymentCompletionDetails
    }

    /**
     * Test the property 'MD'
     */
    @Test
    public void MDTest() {
        // TODO: test MD
    }

    /**
     * Test the property 'paReq'
     */
    @Test
    public void paReqTest() {
        // TODO: test paReq
    }

    /**
     * Test the property 'paRes'
     */
    @Test
    public void paResTest() {
        // TODO: test paRes
    }

    /**
     * Test the property 'authorizationToken'
     */
    @Test
    public void authorizationTokenTest() {
        // TODO: test authorizationToken
    }

    /**
     * Test the property 'billingToken'
     */
    @Test
    public void billingTokenTest() {
        // TODO: test billingToken
    }

    /**
     * Test the property 'cupsecureplusSmscode'
     */
    @Test
    public void cupsecureplusSmscodeTest() {
        // TODO: test cupsecureplusSmscode
    }

    /**
     * Test the property 'facilitatorAccessToken'
     */
    @Test
    public void facilitatorAccessTokenTest() {
        // TODO: test facilitatorAccessToken
    }

    /**
     * Test the property 'oneTimePasscode'
     */
    @Test
    public void oneTimePasscodeTest() {
        // TODO: test oneTimePasscode
    }

    /**
     * Test the property 'orderID'
     */
    @Test
    public void orderIDTest() {
        // TODO: test orderID
    }

    /**
     * Test the property 'payerID'
     */
    @Test
    public void payerIDTest() {
        // TODO: test payerID
    }

    /**
     * Test the property 'payload'
     */
    @Test
    public void payloadTest() {
        // TODO: test payload
    }

    /**
     * Test the property 'paymentID'
     */
    @Test
    public void paymentIDTest() {
        // TODO: test paymentID
    }

    /**
     * Test the property 'paymentStatus'
     */
    @Test
    public void paymentStatusTest() {
        // TODO: test paymentStatus
    }

    /**
     * Test the property 'redirectResult'
     */
    @Test
    public void redirectResultTest() {
        // TODO: test redirectResult
    }

    /**
     * Test the property 'resultCode'
     */
    @Test
    public void resultCodeTest() {
        // TODO: test resultCode
    }

    /**
     * Test the property 'threeDSResult'
     */
    @Test
    public void threeDSResultTest() {
        // TODO: test threeDSResult
    }

    /**
     * Test the property 'threeds2ChallengeResult'
     */
    @Test
    public void threeds2ChallengeResultTest() {
        // TODO: test threeds2ChallengeResult
    }

    /**
     * Test the property 'threeds2Fingerprint'
     */
    @Test
    public void threeds2FingerprintTest() {
        // TODO: test threeds2Fingerprint
    }

}
