/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v41/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v41/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=41) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 41
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AdditionalDataRiskStandalone
 */
public class AdditionalDataRiskStandaloneTest {
    private final AdditionalDataRiskStandalone model = new AdditionalDataRiskStandalone();

    /**
     * Model tests for AdditionalDataRiskStandalone
     */
    @Test
    public void testAdditionalDataRiskStandalone() {
        // TODO: test AdditionalDataRiskStandalone
    }

    /**
     * Test the property 'payPalCountryCode'
     */
    @Test
    public void payPalCountryCodeTest() {
        // TODO: test payPalCountryCode
    }

    /**
     * Test the property 'payPalEmailId'
     */
    @Test
    public void payPalEmailIdTest() {
        // TODO: test payPalEmailId
    }

    /**
     * Test the property 'payPalFirstName'
     */
    @Test
    public void payPalFirstNameTest() {
        // TODO: test payPalFirstName
    }

    /**
     * Test the property 'payPalLastName'
     */
    @Test
    public void payPalLastNameTest() {
        // TODO: test payPalLastName
    }

    /**
     * Test the property 'payPalPayerId'
     */
    @Test
    public void payPalPayerIdTest() {
        // TODO: test payPalPayerId
    }

    /**
     * Test the property 'payPalPhone'
     */
    @Test
    public void payPalPhoneTest() {
        // TODO: test payPalPhone
    }

    /**
     * Test the property 'payPalProtectionEligibility'
     */
    @Test
    public void payPalProtectionEligibilityTest() {
        // TODO: test payPalProtectionEligibility
    }

    /**
     * Test the property 'payPalTransactionId'
     */
    @Test
    public void payPalTransactionIdTest() {
        // TODO: test payPalTransactionId
    }

    /**
     * Test the property 'avsResultRaw'
     */
    @Test
    public void avsResultRawTest() {
        // TODO: test avsResultRaw
    }

    /**
     * Test the property 'bin'
     */
    @Test
    public void binTest() {
        // TODO: test bin
    }

    /**
     * Test the property 'cvcResultRaw'
     */
    @Test
    public void cvcResultRawTest() {
        // TODO: test cvcResultRaw
    }

    /**
     * Test the property 'riskToken'
     */
    @Test
    public void riskTokenTest() {
        // TODO: test riskToken
    }

    /**
     * Test the property 'threeDAuthenticated'
     */
    @Test
    public void threeDAuthenticatedTest() {
        // TODO: test threeDAuthenticated
    }

    /**
     * Test the property 'threeDOffered'
     */
    @Test
    public void threeDOfferedTest() {
        // TODO: test threeDOffered
    }

    /**
     * Test the property 'tokenDataType'
     */
    @Test
    public void tokenDataTypeTest() {
        // TODO: test tokenDataType
    }

}
