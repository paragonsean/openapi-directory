/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDS2ResponseData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDS2ResponseData::OAIThreeDS2ResponseData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDS2ResponseData::OAIThreeDS2ResponseData() {
    this->initializeModel();
}

OAIThreeDS2ResponseData::~OAIThreeDS2ResponseData() {}

void OAIThreeDS2ResponseData::initializeModel() {

    m_acs_challenge_mandated_isSet = false;
    m_acs_challenge_mandated_isValid = false;

    m_acs_operator_id_isSet = false;
    m_acs_operator_id_isValid = false;

    m_acs_reference_number_isSet = false;
    m_acs_reference_number_isValid = false;

    m_acs_signed_content_isSet = false;
    m_acs_signed_content_isValid = false;

    m_acs_trans_id_isSet = false;
    m_acs_trans_id_isValid = false;

    m_acs_url_isSet = false;
    m_acs_url_isValid = false;

    m_authentication_type_isSet = false;
    m_authentication_type_isValid = false;

    m_card_holder_info_isSet = false;
    m_card_holder_info_isValid = false;

    m_cavv_algorithm_isSet = false;
    m_cavv_algorithm_isValid = false;

    m_challenge_indicator_isSet = false;
    m_challenge_indicator_isValid = false;

    m_ds_reference_number_isSet = false;
    m_ds_reference_number_isValid = false;

    m_ds_trans_id_isSet = false;
    m_ds_trans_id_isValid = false;

    m_exemption_indicator_isSet = false;
    m_exemption_indicator_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_risk_score_isSet = false;
    m_risk_score_isValid = false;

    m_sdk_ephem_pub_key_isSet = false;
    m_sdk_ephem_pub_key_isValid = false;

    m_three_ds_server_trans_id_isSet = false;
    m_three_ds_server_trans_id_isValid = false;

    m_trans_status_isSet = false;
    m_trans_status_isValid = false;

    m_trans_status_reason_isSet = false;
    m_trans_status_reason_isValid = false;
}

void OAIThreeDS2ResponseData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDS2ResponseData::fromJsonObject(QJsonObject json) {

    m_acs_challenge_mandated_isValid = ::OpenAPI::fromJsonValue(m_acs_challenge_mandated, json[QString("acsChallengeMandated")]);
    m_acs_challenge_mandated_isSet = !json[QString("acsChallengeMandated")].isNull() && m_acs_challenge_mandated_isValid;

    m_acs_operator_id_isValid = ::OpenAPI::fromJsonValue(m_acs_operator_id, json[QString("acsOperatorID")]);
    m_acs_operator_id_isSet = !json[QString("acsOperatorID")].isNull() && m_acs_operator_id_isValid;

    m_acs_reference_number_isValid = ::OpenAPI::fromJsonValue(m_acs_reference_number, json[QString("acsReferenceNumber")]);
    m_acs_reference_number_isSet = !json[QString("acsReferenceNumber")].isNull() && m_acs_reference_number_isValid;

    m_acs_signed_content_isValid = ::OpenAPI::fromJsonValue(m_acs_signed_content, json[QString("acsSignedContent")]);
    m_acs_signed_content_isSet = !json[QString("acsSignedContent")].isNull() && m_acs_signed_content_isValid;

    m_acs_trans_id_isValid = ::OpenAPI::fromJsonValue(m_acs_trans_id, json[QString("acsTransID")]);
    m_acs_trans_id_isSet = !json[QString("acsTransID")].isNull() && m_acs_trans_id_isValid;

    m_acs_url_isValid = ::OpenAPI::fromJsonValue(m_acs_url, json[QString("acsURL")]);
    m_acs_url_isSet = !json[QString("acsURL")].isNull() && m_acs_url_isValid;

    m_authentication_type_isValid = ::OpenAPI::fromJsonValue(m_authentication_type, json[QString("authenticationType")]);
    m_authentication_type_isSet = !json[QString("authenticationType")].isNull() && m_authentication_type_isValid;

    m_card_holder_info_isValid = ::OpenAPI::fromJsonValue(m_card_holder_info, json[QString("cardHolderInfo")]);
    m_card_holder_info_isSet = !json[QString("cardHolderInfo")].isNull() && m_card_holder_info_isValid;

    m_cavv_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cavv_algorithm, json[QString("cavvAlgorithm")]);
    m_cavv_algorithm_isSet = !json[QString("cavvAlgorithm")].isNull() && m_cavv_algorithm_isValid;

    m_challenge_indicator_isValid = ::OpenAPI::fromJsonValue(m_challenge_indicator, json[QString("challengeIndicator")]);
    m_challenge_indicator_isSet = !json[QString("challengeIndicator")].isNull() && m_challenge_indicator_isValid;

    m_ds_reference_number_isValid = ::OpenAPI::fromJsonValue(m_ds_reference_number, json[QString("dsReferenceNumber")]);
    m_ds_reference_number_isSet = !json[QString("dsReferenceNumber")].isNull() && m_ds_reference_number_isValid;

    m_ds_trans_id_isValid = ::OpenAPI::fromJsonValue(m_ds_trans_id, json[QString("dsTransID")]);
    m_ds_trans_id_isSet = !json[QString("dsTransID")].isNull() && m_ds_trans_id_isValid;

    m_exemption_indicator_isValid = ::OpenAPI::fromJsonValue(m_exemption_indicator, json[QString("exemptionIndicator")]);
    m_exemption_indicator_isSet = !json[QString("exemptionIndicator")].isNull() && m_exemption_indicator_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_risk_score_isValid = ::OpenAPI::fromJsonValue(m_risk_score, json[QString("riskScore")]);
    m_risk_score_isSet = !json[QString("riskScore")].isNull() && m_risk_score_isValid;

    m_sdk_ephem_pub_key_isValid = ::OpenAPI::fromJsonValue(m_sdk_ephem_pub_key, json[QString("sdkEphemPubKey")]);
    m_sdk_ephem_pub_key_isSet = !json[QString("sdkEphemPubKey")].isNull() && m_sdk_ephem_pub_key_isValid;

    m_three_ds_server_trans_id_isValid = ::OpenAPI::fromJsonValue(m_three_ds_server_trans_id, json[QString("threeDSServerTransID")]);
    m_three_ds_server_trans_id_isSet = !json[QString("threeDSServerTransID")].isNull() && m_three_ds_server_trans_id_isValid;

    m_trans_status_isValid = ::OpenAPI::fromJsonValue(m_trans_status, json[QString("transStatus")]);
    m_trans_status_isSet = !json[QString("transStatus")].isNull() && m_trans_status_isValid;

    m_trans_status_reason_isValid = ::OpenAPI::fromJsonValue(m_trans_status_reason, json[QString("transStatusReason")]);
    m_trans_status_reason_isSet = !json[QString("transStatusReason")].isNull() && m_trans_status_reason_isValid;
}

QString OAIThreeDS2ResponseData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDS2ResponseData::asJsonObject() const {
    QJsonObject obj;
    if (m_acs_challenge_mandated_isSet) {
        obj.insert(QString("acsChallengeMandated"), ::OpenAPI::toJsonValue(m_acs_challenge_mandated));
    }
    if (m_acs_operator_id_isSet) {
        obj.insert(QString("acsOperatorID"), ::OpenAPI::toJsonValue(m_acs_operator_id));
    }
    if (m_acs_reference_number_isSet) {
        obj.insert(QString("acsReferenceNumber"), ::OpenAPI::toJsonValue(m_acs_reference_number));
    }
    if (m_acs_signed_content_isSet) {
        obj.insert(QString("acsSignedContent"), ::OpenAPI::toJsonValue(m_acs_signed_content));
    }
    if (m_acs_trans_id_isSet) {
        obj.insert(QString("acsTransID"), ::OpenAPI::toJsonValue(m_acs_trans_id));
    }
    if (m_acs_url_isSet) {
        obj.insert(QString("acsURL"), ::OpenAPI::toJsonValue(m_acs_url));
    }
    if (m_authentication_type_isSet) {
        obj.insert(QString("authenticationType"), ::OpenAPI::toJsonValue(m_authentication_type));
    }
    if (m_card_holder_info_isSet) {
        obj.insert(QString("cardHolderInfo"), ::OpenAPI::toJsonValue(m_card_holder_info));
    }
    if (m_cavv_algorithm_isSet) {
        obj.insert(QString("cavvAlgorithm"), ::OpenAPI::toJsonValue(m_cavv_algorithm));
    }
    if (m_challenge_indicator_isSet) {
        obj.insert(QString("challengeIndicator"), ::OpenAPI::toJsonValue(m_challenge_indicator));
    }
    if (m_ds_reference_number_isSet) {
        obj.insert(QString("dsReferenceNumber"), ::OpenAPI::toJsonValue(m_ds_reference_number));
    }
    if (m_ds_trans_id_isSet) {
        obj.insert(QString("dsTransID"), ::OpenAPI::toJsonValue(m_ds_trans_id));
    }
    if (m_exemption_indicator_isSet) {
        obj.insert(QString("exemptionIndicator"), ::OpenAPI::toJsonValue(m_exemption_indicator));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_risk_score_isSet) {
        obj.insert(QString("riskScore"), ::OpenAPI::toJsonValue(m_risk_score));
    }
    if (m_sdk_ephem_pub_key_isSet) {
        obj.insert(QString("sdkEphemPubKey"), ::OpenAPI::toJsonValue(m_sdk_ephem_pub_key));
    }
    if (m_three_ds_server_trans_id_isSet) {
        obj.insert(QString("threeDSServerTransID"), ::OpenAPI::toJsonValue(m_three_ds_server_trans_id));
    }
    if (m_trans_status_isSet) {
        obj.insert(QString("transStatus"), ::OpenAPI::toJsonValue(m_trans_status));
    }
    if (m_trans_status_reason_isSet) {
        obj.insert(QString("transStatusReason"), ::OpenAPI::toJsonValue(m_trans_status_reason));
    }
    return obj;
}

QString OAIThreeDS2ResponseData::getAcsChallengeMandated() const {
    return m_acs_challenge_mandated;
}
void OAIThreeDS2ResponseData::setAcsChallengeMandated(const QString &acs_challenge_mandated) {
    m_acs_challenge_mandated = acs_challenge_mandated;
    m_acs_challenge_mandated_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_challenge_mandated_Set() const{
    return m_acs_challenge_mandated_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_challenge_mandated_Valid() const{
    return m_acs_challenge_mandated_isValid;
}

QString OAIThreeDS2ResponseData::getAcsOperatorId() const {
    return m_acs_operator_id;
}
void OAIThreeDS2ResponseData::setAcsOperatorId(const QString &acs_operator_id) {
    m_acs_operator_id = acs_operator_id;
    m_acs_operator_id_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_operator_id_Set() const{
    return m_acs_operator_id_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_operator_id_Valid() const{
    return m_acs_operator_id_isValid;
}

QString OAIThreeDS2ResponseData::getAcsReferenceNumber() const {
    return m_acs_reference_number;
}
void OAIThreeDS2ResponseData::setAcsReferenceNumber(const QString &acs_reference_number) {
    m_acs_reference_number = acs_reference_number;
    m_acs_reference_number_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_reference_number_Set() const{
    return m_acs_reference_number_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_reference_number_Valid() const{
    return m_acs_reference_number_isValid;
}

QString OAIThreeDS2ResponseData::getAcsSignedContent() const {
    return m_acs_signed_content;
}
void OAIThreeDS2ResponseData::setAcsSignedContent(const QString &acs_signed_content) {
    m_acs_signed_content = acs_signed_content;
    m_acs_signed_content_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_signed_content_Set() const{
    return m_acs_signed_content_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_signed_content_Valid() const{
    return m_acs_signed_content_isValid;
}

QString OAIThreeDS2ResponseData::getAcsTransId() const {
    return m_acs_trans_id;
}
void OAIThreeDS2ResponseData::setAcsTransId(const QString &acs_trans_id) {
    m_acs_trans_id = acs_trans_id;
    m_acs_trans_id_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_trans_id_Set() const{
    return m_acs_trans_id_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_trans_id_Valid() const{
    return m_acs_trans_id_isValid;
}

QString OAIThreeDS2ResponseData::getAcsUrl() const {
    return m_acs_url;
}
void OAIThreeDS2ResponseData::setAcsUrl(const QString &acs_url) {
    m_acs_url = acs_url;
    m_acs_url_isSet = true;
}

bool OAIThreeDS2ResponseData::is_acs_url_Set() const{
    return m_acs_url_isSet;
}

bool OAIThreeDS2ResponseData::is_acs_url_Valid() const{
    return m_acs_url_isValid;
}

QString OAIThreeDS2ResponseData::getAuthenticationType() const {
    return m_authentication_type;
}
void OAIThreeDS2ResponseData::setAuthenticationType(const QString &authentication_type) {
    m_authentication_type = authentication_type;
    m_authentication_type_isSet = true;
}

bool OAIThreeDS2ResponseData::is_authentication_type_Set() const{
    return m_authentication_type_isSet;
}

bool OAIThreeDS2ResponseData::is_authentication_type_Valid() const{
    return m_authentication_type_isValid;
}

QString OAIThreeDS2ResponseData::getCardHolderInfo() const {
    return m_card_holder_info;
}
void OAIThreeDS2ResponseData::setCardHolderInfo(const QString &card_holder_info) {
    m_card_holder_info = card_holder_info;
    m_card_holder_info_isSet = true;
}

bool OAIThreeDS2ResponseData::is_card_holder_info_Set() const{
    return m_card_holder_info_isSet;
}

bool OAIThreeDS2ResponseData::is_card_holder_info_Valid() const{
    return m_card_holder_info_isValid;
}

QString OAIThreeDS2ResponseData::getCavvAlgorithm() const {
    return m_cavv_algorithm;
}
void OAIThreeDS2ResponseData::setCavvAlgorithm(const QString &cavv_algorithm) {
    m_cavv_algorithm = cavv_algorithm;
    m_cavv_algorithm_isSet = true;
}

bool OAIThreeDS2ResponseData::is_cavv_algorithm_Set() const{
    return m_cavv_algorithm_isSet;
}

bool OAIThreeDS2ResponseData::is_cavv_algorithm_Valid() const{
    return m_cavv_algorithm_isValid;
}

QString OAIThreeDS2ResponseData::getChallengeIndicator() const {
    return m_challenge_indicator;
}
void OAIThreeDS2ResponseData::setChallengeIndicator(const QString &challenge_indicator) {
    m_challenge_indicator = challenge_indicator;
    m_challenge_indicator_isSet = true;
}

bool OAIThreeDS2ResponseData::is_challenge_indicator_Set() const{
    return m_challenge_indicator_isSet;
}

bool OAIThreeDS2ResponseData::is_challenge_indicator_Valid() const{
    return m_challenge_indicator_isValid;
}

QString OAIThreeDS2ResponseData::getDsReferenceNumber() const {
    return m_ds_reference_number;
}
void OAIThreeDS2ResponseData::setDsReferenceNumber(const QString &ds_reference_number) {
    m_ds_reference_number = ds_reference_number;
    m_ds_reference_number_isSet = true;
}

bool OAIThreeDS2ResponseData::is_ds_reference_number_Set() const{
    return m_ds_reference_number_isSet;
}

bool OAIThreeDS2ResponseData::is_ds_reference_number_Valid() const{
    return m_ds_reference_number_isValid;
}

QString OAIThreeDS2ResponseData::getDsTransId() const {
    return m_ds_trans_id;
}
void OAIThreeDS2ResponseData::setDsTransId(const QString &ds_trans_id) {
    m_ds_trans_id = ds_trans_id;
    m_ds_trans_id_isSet = true;
}

bool OAIThreeDS2ResponseData::is_ds_trans_id_Set() const{
    return m_ds_trans_id_isSet;
}

bool OAIThreeDS2ResponseData::is_ds_trans_id_Valid() const{
    return m_ds_trans_id_isValid;
}

QString OAIThreeDS2ResponseData::getExemptionIndicator() const {
    return m_exemption_indicator;
}
void OAIThreeDS2ResponseData::setExemptionIndicator(const QString &exemption_indicator) {
    m_exemption_indicator = exemption_indicator;
    m_exemption_indicator_isSet = true;
}

bool OAIThreeDS2ResponseData::is_exemption_indicator_Set() const{
    return m_exemption_indicator_isSet;
}

bool OAIThreeDS2ResponseData::is_exemption_indicator_Valid() const{
    return m_exemption_indicator_isValid;
}

QString OAIThreeDS2ResponseData::getMessageVersion() const {
    return m_message_version;
}
void OAIThreeDS2ResponseData::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIThreeDS2ResponseData::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIThreeDS2ResponseData::is_message_version_Valid() const{
    return m_message_version_isValid;
}

QString OAIThreeDS2ResponseData::getRiskScore() const {
    return m_risk_score;
}
void OAIThreeDS2ResponseData::setRiskScore(const QString &risk_score) {
    m_risk_score = risk_score;
    m_risk_score_isSet = true;
}

bool OAIThreeDS2ResponseData::is_risk_score_Set() const{
    return m_risk_score_isSet;
}

bool OAIThreeDS2ResponseData::is_risk_score_Valid() const{
    return m_risk_score_isValid;
}

QString OAIThreeDS2ResponseData::getSdkEphemPubKey() const {
    return m_sdk_ephem_pub_key;
}
void OAIThreeDS2ResponseData::setSdkEphemPubKey(const QString &sdk_ephem_pub_key) {
    m_sdk_ephem_pub_key = sdk_ephem_pub_key;
    m_sdk_ephem_pub_key_isSet = true;
}

bool OAIThreeDS2ResponseData::is_sdk_ephem_pub_key_Set() const{
    return m_sdk_ephem_pub_key_isSet;
}

bool OAIThreeDS2ResponseData::is_sdk_ephem_pub_key_Valid() const{
    return m_sdk_ephem_pub_key_isValid;
}

QString OAIThreeDS2ResponseData::getThreeDsServerTransId() const {
    return m_three_ds_server_trans_id;
}
void OAIThreeDS2ResponseData::setThreeDsServerTransId(const QString &three_ds_server_trans_id) {
    m_three_ds_server_trans_id = three_ds_server_trans_id;
    m_three_ds_server_trans_id_isSet = true;
}

bool OAIThreeDS2ResponseData::is_three_ds_server_trans_id_Set() const{
    return m_three_ds_server_trans_id_isSet;
}

bool OAIThreeDS2ResponseData::is_three_ds_server_trans_id_Valid() const{
    return m_three_ds_server_trans_id_isValid;
}

QString OAIThreeDS2ResponseData::getTransStatus() const {
    return m_trans_status;
}
void OAIThreeDS2ResponseData::setTransStatus(const QString &trans_status) {
    m_trans_status = trans_status;
    m_trans_status_isSet = true;
}

bool OAIThreeDS2ResponseData::is_trans_status_Set() const{
    return m_trans_status_isSet;
}

bool OAIThreeDS2ResponseData::is_trans_status_Valid() const{
    return m_trans_status_isValid;
}

QString OAIThreeDS2ResponseData::getTransStatusReason() const {
    return m_trans_status_reason;
}
void OAIThreeDS2ResponseData::setTransStatusReason(const QString &trans_status_reason) {
    m_trans_status_reason = trans_status_reason;
    m_trans_status_reason_isSet = true;
}

bool OAIThreeDS2ResponseData::is_trans_status_reason_Set() const{
    return m_trans_status_reason_isSet;
}

bool OAIThreeDS2ResponseData::is_trans_status_reason_Valid() const{
    return m_trans_status_reason_isValid;
}

bool OAIThreeDS2ResponseData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acs_challenge_mandated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acs_operator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acs_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acs_signed_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acs_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acs_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_holder_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exemption_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sdk_ephem_pub_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_server_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trans_status_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDS2ResponseData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
