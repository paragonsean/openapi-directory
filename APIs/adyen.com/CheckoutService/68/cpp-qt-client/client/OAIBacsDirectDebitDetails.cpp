/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBacsDirectDebitDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBacsDirectDebitDetails::OAIBacsDirectDebitDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBacsDirectDebitDetails::OAIBacsDirectDebitDetails() {
    this->initializeModel();
}

OAIBacsDirectDebitDetails::~OAIBacsDirectDebitDetails() {}

void OAIBacsDirectDebitDetails::initializeModel() {

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_location_id_isSet = false;
    m_bank_location_id_isValid = false;

    m_checkout_attempt_id_isSet = false;
    m_checkout_attempt_id_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBacsDirectDebitDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBacsDirectDebitDetails::fromJsonObject(QJsonObject json) {

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_bank_location_id, json[QString("bankLocationId")]);
    m_bank_location_id_isSet = !json[QString("bankLocationId")].isNull() && m_bank_location_id_isValid;

    m_checkout_attempt_id_isValid = ::OpenAPI::fromJsonValue(m_checkout_attempt_id, json[QString("checkoutAttemptId")]);
    m_checkout_attempt_id_isSet = !json[QString("checkoutAttemptId")].isNull() && m_checkout_attempt_id_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBacsDirectDebitDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBacsDirectDebitDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_location_id_isSet) {
        obj.insert(QString("bankLocationId"), ::OpenAPI::toJsonValue(m_bank_location_id));
    }
    if (m_checkout_attempt_id_isSet) {
        obj.insert(QString("checkoutAttemptId"), ::OpenAPI::toJsonValue(m_checkout_attempt_id));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBacsDirectDebitDetails::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIBacsDirectDebitDetails::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIBacsDirectDebitDetails::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIBacsDirectDebitDetails::getBankLocationId() const {
    return m_bank_location_id;
}
void OAIBacsDirectDebitDetails::setBankLocationId(const QString &bank_location_id) {
    m_bank_location_id = bank_location_id;
    m_bank_location_id_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_bank_location_id_Set() const{
    return m_bank_location_id_isSet;
}

bool OAIBacsDirectDebitDetails::is_bank_location_id_Valid() const{
    return m_bank_location_id_isValid;
}

QString OAIBacsDirectDebitDetails::getCheckoutAttemptId() const {
    return m_checkout_attempt_id;
}
void OAIBacsDirectDebitDetails::setCheckoutAttemptId(const QString &checkout_attempt_id) {
    m_checkout_attempt_id = checkout_attempt_id;
    m_checkout_attempt_id_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_checkout_attempt_id_Set() const{
    return m_checkout_attempt_id_isSet;
}

bool OAIBacsDirectDebitDetails::is_checkout_attempt_id_Valid() const{
    return m_checkout_attempt_id_isValid;
}

QString OAIBacsDirectDebitDetails::getHolderName() const {
    return m_holder_name;
}
void OAIBacsDirectDebitDetails::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAIBacsDirectDebitDetails::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAIBacsDirectDebitDetails::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIBacsDirectDebitDetails::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIBacsDirectDebitDetails::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIBacsDirectDebitDetails::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAIBacsDirectDebitDetails::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAIBacsDirectDebitDetails::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

QString OAIBacsDirectDebitDetails::getType() const {
    return m_type;
}
void OAIBacsDirectDebitDetails::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBacsDirectDebitDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBacsDirectDebitDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBacsDirectDebitDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_checkout_attempt_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBacsDirectDebitDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
