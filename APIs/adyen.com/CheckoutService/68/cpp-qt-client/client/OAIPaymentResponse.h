/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentResponse.h
 *
 * 
 */

#ifndef OAIPaymentResponse_H
#define OAIPaymentResponse_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAIBalanceCheckResponse_additionalData.h"
#include "OAICheckoutOrderResponse.h"
#include "OAIFraudResult.h"
#include "OAIPaymentResponse_action.h"
#include "OAIThreeDS2ResponseData.h"
#include "OAIThreeDS2Result.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPaymentResponse_action;
class OAIBalanceCheckResponse_additionalData;
class OAIAmount;
class OAIFraudResult;
class OAICheckoutOrderResponse;
class OAIThreeDS2ResponseData;
class OAIThreeDS2Result;

class OAIPaymentResponse : public OAIObject {
public:
    OAIPaymentResponse();
    OAIPaymentResponse(QString json);
    ~OAIPaymentResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPaymentResponse_action getAction() const;
    void setAction(const OAIPaymentResponse_action &action);
    bool is_action_Set() const;
    bool is_action_Valid() const;

    OAIBalanceCheckResponse_additionalData getAdditionalData() const;
    void setAdditionalData(const OAIBalanceCheckResponse_additionalData &additional_data);
    bool is_additional_data_Set() const;
    bool is_additional_data_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getDonationToken() const;
    void setDonationToken(const QString &donation_token);
    bool is_donation_token_Set() const;
    bool is_donation_token_Valid() const;

    OAIFraudResult getFraudResult() const;
    void setFraudResult(const OAIFraudResult &fraud_result);
    bool is_fraud_result_Set() const;
    bool is_fraud_result_Valid() const;

    QString getMerchantReference() const;
    void setMerchantReference(const QString &merchant_reference);
    bool is_merchant_reference_Set() const;
    bool is_merchant_reference_Valid() const;

    OAICheckoutOrderResponse getOrder() const;
    void setOrder(const OAICheckoutOrderResponse &order);
    bool is_order_Set() const;
    bool is_order_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    QString getRefusalReason() const;
    void setRefusalReason(const QString &refusal_reason);
    bool is_refusal_reason_Set() const;
    bool is_refusal_reason_Valid() const;

    QString getRefusalReasonCode() const;
    void setRefusalReasonCode(const QString &refusal_reason_code);
    bool is_refusal_reason_code_Set() const;
    bool is_refusal_reason_code_Valid() const;

    QString getResultCode() const;
    void setResultCode(const QString &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    OAIThreeDS2ResponseData getThreeDs2ResponseData() const;
    void setThreeDs2ResponseData(const OAIThreeDS2ResponseData &three_ds2_response_data);
    bool is_three_ds2_response_data_Set() const;
    bool is_three_ds2_response_data_Valid() const;

    OAIThreeDS2Result getThreeDs2Result() const;
    void setThreeDs2Result(const OAIThreeDS2Result &three_ds2_result);
    bool is_three_ds2_result_Set() const;
    bool is_three_ds2_result_Valid() const;

    QString getThreeDsPaymentData() const;
    void setThreeDsPaymentData(const QString &three_ds_payment_data);
    bool is_three_ds_payment_data_Set() const;
    bool is_three_ds_payment_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPaymentResponse_action m_action;
    bool m_action_isSet;
    bool m_action_isValid;

    OAIBalanceCheckResponse_additionalData m_additional_data;
    bool m_additional_data_isSet;
    bool m_additional_data_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_donation_token;
    bool m_donation_token_isSet;
    bool m_donation_token_isValid;

    OAIFraudResult m_fraud_result;
    bool m_fraud_result_isSet;
    bool m_fraud_result_isValid;

    QString m_merchant_reference;
    bool m_merchant_reference_isSet;
    bool m_merchant_reference_isValid;

    OAICheckoutOrderResponse m_order;
    bool m_order_isSet;
    bool m_order_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;

    QString m_refusal_reason;
    bool m_refusal_reason_isSet;
    bool m_refusal_reason_isValid;

    QString m_refusal_reason_code;
    bool m_refusal_reason_code_isSet;
    bool m_refusal_reason_code_isValid;

    QString m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;

    OAIThreeDS2ResponseData m_three_ds2_response_data;
    bool m_three_ds2_response_data_isSet;
    bool m_three_ds2_response_data_isValid;

    OAIThreeDS2Result m_three_ds2_result;
    bool m_three_ds2_result_isSet;
    bool m_three_ds2_result_isValid;

    QString m_three_ds_payment_data;
    bool m_three_ds_payment_data_isSet;
    bool m_three_ds_payment_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentResponse)

#endif // OAIPaymentResponse_H
