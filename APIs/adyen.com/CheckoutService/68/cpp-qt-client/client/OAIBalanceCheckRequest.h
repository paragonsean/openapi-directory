/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBalanceCheckRequest.h
 *
 * 
 */

#ifndef OAIBalanceCheckRequest_H
#define OAIBalanceCheckRequest_H

#include <QJsonObject>

#include "OAIAccountInfo.h"
#include "OAIAddress.h"
#include "OAIAmount.h"
#include "OAIApplicationInfo.h"
#include "OAIBalanceCheckRequest_additionalData.h"
#include "OAIBrowserInfo.h"
#include "OAIForexQuote.h"
#include "OAIInstallments.h"
#include "OAIMerchantRiskIndicator.h"
#include "OAIName.h"
#include "OAIRecurring.h"
#include "OAISplit.h"
#include "OAIThreeDS2RequestData.h"
#include <QDate>
#include <QDateTime>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountInfo;
class OAIAmount;
class OAIBalanceCheckRequest_additionalData;
class OAIApplicationInfo;
class OAIAddress;
class OAIBrowserInfo;
class OAIForexQuote;
class OAIInstallments;
class OAIMerchantRiskIndicator;
class OAIRecurring;
class OAIName;
class OAISplit;
class OAIThreeDS2RequestData;

class OAIBalanceCheckRequest : public OAIObject {
public:
    OAIBalanceCheckRequest();
    OAIBalanceCheckRequest(QString json);
    ~OAIBalanceCheckRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAccountInfo getAccountInfo() const;
    void setAccountInfo(const OAIAccountInfo &account_info);
    bool is_account_info_Set() const;
    bool is_account_info_Valid() const;

    OAIAmount getAdditionalAmount() const;
    void setAdditionalAmount(const OAIAmount &additional_amount);
    bool is_additional_amount_Set() const;
    bool is_additional_amount_Valid() const;

    OAIBalanceCheckRequest_additionalData getAdditionalData() const;
    void setAdditionalData(const OAIBalanceCheckRequest_additionalData &additional_data);
    bool is_additional_data_Set() const;
    bool is_additional_data_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    OAIApplicationInfo getApplicationInfo() const;
    void setApplicationInfo(const OAIApplicationInfo &application_info);
    bool is_application_info_Set() const;
    bool is_application_info_Valid() const;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    OAIBrowserInfo getBrowserInfo() const;
    void setBrowserInfo(const OAIBrowserInfo &browser_info);
    bool is_browser_info_Set() const;
    bool is_browser_info_Valid() const;

    qint32 getCaptureDelayHours() const;
    void setCaptureDelayHours(const qint32 &capture_delay_hours);
    bool is_capture_delay_hours_Set() const;
    bool is_capture_delay_hours_Valid() const;

    QDate getDateOfBirth() const;
    void setDateOfBirth(const QDate &date_of_birth);
    bool is_date_of_birth_Set() const;
    bool is_date_of_birth_Valid() const;

    OAIForexQuote getDccQuote() const;
    void setDccQuote(const OAIForexQuote &dcc_quote);
    bool is_dcc_quote_Set() const;
    bool is_dcc_quote_Valid() const;

    OAIAddress getDeliveryAddress() const;
    void setDeliveryAddress(const OAIAddress &delivery_address);
    bool is_delivery_address_Set() const;
    bool is_delivery_address_Valid() const;

    QDateTime getDeliveryDate() const;
    void setDeliveryDate(const QDateTime &delivery_date);
    bool is_delivery_date_Set() const;
    bool is_delivery_date_Valid() const;

    QString getDeviceFingerprint() const;
    void setDeviceFingerprint(const QString &device_fingerprint);
    bool is_device_fingerprint_Set() const;
    bool is_device_fingerprint_Valid() const;

    qint32 getFraudOffset() const;
    void setFraudOffset(const qint32 &fraud_offset);
    bool is_fraud_offset_Set() const;
    bool is_fraud_offset_Valid() const;

    OAIInstallments getInstallments() const;
    void setInstallments(const OAIInstallments &installments);
    bool is_installments_Set() const;
    bool is_installments_Valid() const;

    QMap<QString, QString> getLocalizedShopperStatement() const;
    void setLocalizedShopperStatement(const QMap<QString, QString> &localized_shopper_statement);
    bool is_localized_shopper_statement_Set() const;
    bool is_localized_shopper_statement_Valid() const;

    QString getMcc() const;
    void setMcc(const QString &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    QString getMerchantOrderReference() const;
    void setMerchantOrderReference(const QString &merchant_order_reference);
    bool is_merchant_order_reference_Set() const;
    bool is_merchant_order_reference_Valid() const;

    OAIMerchantRiskIndicator getMerchantRiskIndicator() const;
    void setMerchantRiskIndicator(const OAIMerchantRiskIndicator &merchant_risk_indicator);
    bool is_merchant_risk_indicator_Set() const;
    bool is_merchant_risk_indicator_Valid() const;

    QMap<QString, QString> getMetadata() const;
    void setMetadata(const QMap<QString, QString> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getOrderReference() const;
    void setOrderReference(const QString &order_reference);
    bool is_order_reference_Set() const;
    bool is_order_reference_Valid() const;

    QMap<QString, QString> getPaymentMethod() const;
    void setPaymentMethod(const QMap<QString, QString> &payment_method);
    bool is_payment_method_Set() const;
    bool is_payment_method_Valid() const;

    OAIRecurring getRecurring() const;
    void setRecurring(const OAIRecurring &recurring);
    bool is_recurring_Set() const;
    bool is_recurring_Valid() const;

    QString getRecurringProcessingModel() const;
    void setRecurringProcessingModel(const QString &recurring_processing_model);
    bool is_recurring_processing_model_Set() const;
    bool is_recurring_processing_model_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getSelectedBrand() const;
    void setSelectedBrand(const QString &selected_brand);
    bool is_selected_brand_Set() const;
    bool is_selected_brand_Valid() const;

    QString getSelectedRecurringDetailReference() const;
    void setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference);
    bool is_selected_recurring_detail_reference_Set() const;
    bool is_selected_recurring_detail_reference_Valid() const;

    QString getSessionId() const;
    void setSessionId(const QString &session_id);
    bool is_session_id_Set() const;
    bool is_session_id_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    QString getShopperIp() const;
    void setShopperIp(const QString &shopper_ip);
    bool is_shopper_ip_Set() const;
    bool is_shopper_ip_Valid() const;

    QString getShopperInteraction() const;
    void setShopperInteraction(const QString &shopper_interaction);
    bool is_shopper_interaction_Set() const;
    bool is_shopper_interaction_Valid() const;

    QString getShopperLocale() const;
    void setShopperLocale(const QString &shopper_locale);
    bool is_shopper_locale_Set() const;
    bool is_shopper_locale_Valid() const;

    OAIName getShopperName() const;
    void setShopperName(const OAIName &shopper_name);
    bool is_shopper_name_Set() const;
    bool is_shopper_name_Valid() const;

    QString getShopperReference() const;
    void setShopperReference(const QString &shopper_reference);
    bool is_shopper_reference_Set() const;
    bool is_shopper_reference_Valid() const;

    QString getShopperStatement() const;
    void setShopperStatement(const QString &shopper_statement);
    bool is_shopper_statement_Set() const;
    bool is_shopper_statement_Valid() const;

    QString getSocialSecurityNumber() const;
    void setSocialSecurityNumber(const QString &social_security_number);
    bool is_social_security_number_Set() const;
    bool is_social_security_number_Valid() const;

    QList<OAISplit> getSplits() const;
    void setSplits(const QList<OAISplit> &splits);
    bool is_splits_Set() const;
    bool is_splits_Valid() const;

    QString getStore() const;
    void setStore(const QString &store);
    bool is_store_Set() const;
    bool is_store_Valid() const;

    QString getTelephoneNumber() const;
    void setTelephoneNumber(const QString &telephone_number);
    bool is_telephone_number_Set() const;
    bool is_telephone_number_Valid() const;

    OAIThreeDS2RequestData getThreeDs2RequestData() const;
    void setThreeDs2RequestData(const OAIThreeDS2RequestData &three_ds2_request_data);
    bool is_three_ds2_request_data_Set() const;
    bool is_three_ds2_request_data_Valid() const;

    bool isThreeDsAuthenticationOnly() const;
    void setThreeDsAuthenticationOnly(const bool &three_ds_authentication_only);
    bool is_three_ds_authentication_only_Set() const;
    bool is_three_ds_authentication_only_Valid() const;

    QString getTotalsGroup() const;
    void setTotalsGroup(const QString &totals_group);
    bool is_totals_group_Set() const;
    bool is_totals_group_Valid() const;

    bool isTrustedShopper() const;
    void setTrustedShopper(const bool &trusted_shopper);
    bool is_trusted_shopper_Set() const;
    bool is_trusted_shopper_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAccountInfo m_account_info;
    bool m_account_info_isSet;
    bool m_account_info_isValid;

    OAIAmount m_additional_amount;
    bool m_additional_amount_isSet;
    bool m_additional_amount_isValid;

    OAIBalanceCheckRequest_additionalData m_additional_data;
    bool m_additional_data_isSet;
    bool m_additional_data_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    OAIApplicationInfo m_application_info;
    bool m_application_info_isSet;
    bool m_application_info_isValid;

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    OAIBrowserInfo m_browser_info;
    bool m_browser_info_isSet;
    bool m_browser_info_isValid;

    qint32 m_capture_delay_hours;
    bool m_capture_delay_hours_isSet;
    bool m_capture_delay_hours_isValid;

    QDate m_date_of_birth;
    bool m_date_of_birth_isSet;
    bool m_date_of_birth_isValid;

    OAIForexQuote m_dcc_quote;
    bool m_dcc_quote_isSet;
    bool m_dcc_quote_isValid;

    OAIAddress m_delivery_address;
    bool m_delivery_address_isSet;
    bool m_delivery_address_isValid;

    QDateTime m_delivery_date;
    bool m_delivery_date_isSet;
    bool m_delivery_date_isValid;

    QString m_device_fingerprint;
    bool m_device_fingerprint_isSet;
    bool m_device_fingerprint_isValid;

    qint32 m_fraud_offset;
    bool m_fraud_offset_isSet;
    bool m_fraud_offset_isValid;

    OAIInstallments m_installments;
    bool m_installments_isSet;
    bool m_installments_isValid;

    QMap<QString, QString> m_localized_shopper_statement;
    bool m_localized_shopper_statement_isSet;
    bool m_localized_shopper_statement_isValid;

    QString m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    QString m_merchant_order_reference;
    bool m_merchant_order_reference_isSet;
    bool m_merchant_order_reference_isValid;

    OAIMerchantRiskIndicator m_merchant_risk_indicator;
    bool m_merchant_risk_indicator_isSet;
    bool m_merchant_risk_indicator_isValid;

    QMap<QString, QString> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_order_reference;
    bool m_order_reference_isSet;
    bool m_order_reference_isValid;

    QMap<QString, QString> m_payment_method;
    bool m_payment_method_isSet;
    bool m_payment_method_isValid;

    OAIRecurring m_recurring;
    bool m_recurring_isSet;
    bool m_recurring_isValid;

    QString m_recurring_processing_model;
    bool m_recurring_processing_model_isSet;
    bool m_recurring_processing_model_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_selected_brand;
    bool m_selected_brand_isSet;
    bool m_selected_brand_isValid;

    QString m_selected_recurring_detail_reference;
    bool m_selected_recurring_detail_reference_isSet;
    bool m_selected_recurring_detail_reference_isValid;

    QString m_session_id;
    bool m_session_id_isSet;
    bool m_session_id_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    QString m_shopper_ip;
    bool m_shopper_ip_isSet;
    bool m_shopper_ip_isValid;

    QString m_shopper_interaction;
    bool m_shopper_interaction_isSet;
    bool m_shopper_interaction_isValid;

    QString m_shopper_locale;
    bool m_shopper_locale_isSet;
    bool m_shopper_locale_isValid;

    OAIName m_shopper_name;
    bool m_shopper_name_isSet;
    bool m_shopper_name_isValid;

    QString m_shopper_reference;
    bool m_shopper_reference_isSet;
    bool m_shopper_reference_isValid;

    QString m_shopper_statement;
    bool m_shopper_statement_isSet;
    bool m_shopper_statement_isValid;

    QString m_social_security_number;
    bool m_social_security_number_isSet;
    bool m_social_security_number_isValid;

    QList<OAISplit> m_splits;
    bool m_splits_isSet;
    bool m_splits_isValid;

    QString m_store;
    bool m_store_isSet;
    bool m_store_isValid;

    QString m_telephone_number;
    bool m_telephone_number_isSet;
    bool m_telephone_number_isValid;

    OAIThreeDS2RequestData m_three_ds2_request_data;
    bool m_three_ds2_request_data_isSet;
    bool m_three_ds2_request_data_isValid;

    bool m_three_ds_authentication_only;
    bool m_three_ds_authentication_only_isSet;
    bool m_three_ds_authentication_only_isValid;

    QString m_totals_group;
    bool m_totals_group_isSet;
    bool m_totals_group_isValid;

    bool m_trusted_shopper;
    bool m_trusted_shopper_isSet;
    bool m_trusted_shopper_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBalanceCheckRequest)

#endif // OAIBalanceCheckRequest_H
