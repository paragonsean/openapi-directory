/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDataCommon.h
 *
 * 
 */

#ifndef OAIAdditionalDataCommon_H
#define OAIAdditionalDataCommon_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDataCommon : public OAIObject {
public:
    OAIAdditionalDataCommon();
    OAIAdditionalDataCommon(QString json);
    ~OAIAdditionalDataCommon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRequestedTestErrorResponseCode() const;
    void setRequestedTestErrorResponseCode(const QString &requested_test_error_response_code);
    bool is_requested_test_error_response_code_Set() const;
    bool is_requested_test_error_response_code_Valid() const;

    QString getAllowPartialAuth() const;
    void setAllowPartialAuth(const QString &allow_partial_auth);
    bool is_allow_partial_auth_Set() const;
    bool is_allow_partial_auth_Valid() const;

    QString getAuthorisationType() const;
    void setAuthorisationType(const QString &authorisation_type);
    bool is_authorisation_type_Set() const;
    bool is_authorisation_type_Valid() const;

    QString getCustomRoutingFlag() const;
    void setCustomRoutingFlag(const QString &custom_routing_flag);
    bool is_custom_routing_flag_Set() const;
    bool is_custom_routing_flag_Valid() const;

    QString getIndustryUsage() const;
    void setIndustryUsage(const QString &industry_usage);
    bool is_industry_usage_Set() const;
    bool is_industry_usage_Valid() const;

    QString getManualCapture() const;
    void setManualCapture(const QString &manual_capture);
    bool is_manual_capture_Set() const;
    bool is_manual_capture_Valid() const;

    QString getNetworkTxReference() const;
    void setNetworkTxReference(const QString &network_tx_reference);
    bool is_network_tx_reference_Set() const;
    bool is_network_tx_reference_Valid() const;

    QString getOverwriteBrand() const;
    void setOverwriteBrand(const QString &overwrite_brand);
    bool is_overwrite_brand_Set() const;
    bool is_overwrite_brand_Valid() const;

    QString getSubMerchantCity() const;
    void setSubMerchantCity(const QString &sub_merchant_city);
    bool is_sub_merchant_city_Set() const;
    bool is_sub_merchant_city_Valid() const;

    QString getSubMerchantCountry() const;
    void setSubMerchantCountry(const QString &sub_merchant_country);
    bool is_sub_merchant_country_Set() const;
    bool is_sub_merchant_country_Valid() const;

    QString getSubMerchantId() const;
    void setSubMerchantId(const QString &sub_merchant_id);
    bool is_sub_merchant_id_Set() const;
    bool is_sub_merchant_id_Valid() const;

    QString getSubMerchantName() const;
    void setSubMerchantName(const QString &sub_merchant_name);
    bool is_sub_merchant_name_Set() const;
    bool is_sub_merchant_name_Valid() const;

    QString getSubMerchantPostalCode() const;
    void setSubMerchantPostalCode(const QString &sub_merchant_postal_code);
    bool is_sub_merchant_postal_code_Set() const;
    bool is_sub_merchant_postal_code_Valid() const;

    QString getSubMerchantState() const;
    void setSubMerchantState(const QString &sub_merchant_state);
    bool is_sub_merchant_state_Set() const;
    bool is_sub_merchant_state_Valid() const;

    QString getSubMerchantStreet() const;
    void setSubMerchantStreet(const QString &sub_merchant_street);
    bool is_sub_merchant_street_Set() const;
    bool is_sub_merchant_street_Valid() const;

    QString getSubMerchantTaxId() const;
    void setSubMerchantTaxId(const QString &sub_merchant_tax_id);
    bool is_sub_merchant_tax_id_Set() const;
    bool is_sub_merchant_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_requested_test_error_response_code;
    bool m_requested_test_error_response_code_isSet;
    bool m_requested_test_error_response_code_isValid;

    QString m_allow_partial_auth;
    bool m_allow_partial_auth_isSet;
    bool m_allow_partial_auth_isValid;

    QString m_authorisation_type;
    bool m_authorisation_type_isSet;
    bool m_authorisation_type_isValid;

    QString m_custom_routing_flag;
    bool m_custom_routing_flag_isSet;
    bool m_custom_routing_flag_isValid;

    QString m_industry_usage;
    bool m_industry_usage_isSet;
    bool m_industry_usage_isValid;

    QString m_manual_capture;
    bool m_manual_capture_isSet;
    bool m_manual_capture_isValid;

    QString m_network_tx_reference;
    bool m_network_tx_reference_isSet;
    bool m_network_tx_reference_isValid;

    QString m_overwrite_brand;
    bool m_overwrite_brand_isSet;
    bool m_overwrite_brand_isValid;

    QString m_sub_merchant_city;
    bool m_sub_merchant_city_isSet;
    bool m_sub_merchant_city_isValid;

    QString m_sub_merchant_country;
    bool m_sub_merchant_country_isSet;
    bool m_sub_merchant_country_isValid;

    QString m_sub_merchant_id;
    bool m_sub_merchant_id_isSet;
    bool m_sub_merchant_id_isValid;

    QString m_sub_merchant_name;
    bool m_sub_merchant_name_isSet;
    bool m_sub_merchant_name_isValid;

    QString m_sub_merchant_postal_code;
    bool m_sub_merchant_postal_code_isSet;
    bool m_sub_merchant_postal_code_isValid;

    QString m_sub_merchant_state;
    bool m_sub_merchant_state_isSet;
    bool m_sub_merchant_state_isValid;

    QString m_sub_merchant_street;
    bool m_sub_merchant_street_isSet;
    bool m_sub_merchant_street_isValid;

    QString m_sub_merchant_tax_id;
    bool m_sub_merchant_tax_id_isSet;
    bool m_sub_merchant_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDataCommon)

#endif // OAIAdditionalDataCommon_H
