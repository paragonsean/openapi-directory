# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformChargebackLogic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, behavior: str=None, cost_allocation_account: str=None, target_account: str=None):
        """PlatformChargebackLogic - a model defined in OpenAPI

        :param behavior: The behavior of this PlatformChargebackLogic.
        :param cost_allocation_account: The cost_allocation_account of this PlatformChargebackLogic.
        :param target_account: The target_account of this PlatformChargebackLogic.
        """
        self.openapi_types = {
            'behavior': str,
            'cost_allocation_account': str,
            'target_account': str
        }

        self.attribute_map = {
            'behavior': 'behavior',
            'cost_allocation_account': 'costAllocationAccount',
            'target_account': 'targetAccount'
        }

        self._behavior = behavior
        self._cost_allocation_account = cost_allocation_account
        self._target_account = target_account

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformChargebackLogic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformChargebackLogic of this PlatformChargebackLogic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def behavior(self):
        """Gets the behavior of this PlatformChargebackLogic.

        The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.

        :return: The behavior of this PlatformChargebackLogic.
        :rtype: str
        """
        return self._behavior

    @behavior.setter
    def behavior(self, behavior):
        """Sets the behavior of this PlatformChargebackLogic.

        The method of handling the chargeback.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.

        :param behavior: The behavior of this PlatformChargebackLogic.
        :type behavior: str
        """
        allowed_values = ["deductAccordingToSplitRatio", "deductFromLiableAccount", "deductFromOneBalanceAccount"]  # noqa: E501
        if behavior not in allowed_values:
            raise ValueError(
                "Invalid value for `behavior` ({0}), must be one of {1}"
                .format(behavior, allowed_values)
            )

        self._behavior = behavior

    @property
    def cost_allocation_account(self):
        """Gets the cost_allocation_account of this PlatformChargebackLogic.

        The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account.

        :return: The cost_allocation_account of this PlatformChargebackLogic.
        :rtype: str
        """
        return self._cost_allocation_account

    @cost_allocation_account.setter
    def cost_allocation_account(self, cost_allocation_account):
        """Sets the cost_allocation_account of this PlatformChargebackLogic.

        The unique identifier of the balance account to which the chargeback fees are booked. By default, the chargeback fees are booked to your liable balance account.

        :param cost_allocation_account: The cost_allocation_account of this PlatformChargebackLogic.
        :type cost_allocation_account: str
        """

        self._cost_allocation_account = cost_allocation_account

    @property
    def target_account(self):
        """Gets the target_account of this PlatformChargebackLogic.

        The unique identifier of the balance account against which the disputed amount is booked.  Required if `behavior` is **deductFromOneBalanceAccount**.

        :return: The target_account of this PlatformChargebackLogic.
        :rtype: str
        """
        return self._target_account

    @target_account.setter
    def target_account(self, target_account):
        """Sets the target_account of this PlatformChargebackLogic.

        The unique identifier of the balance account against which the disputed amount is booked.  Required if `behavior` is **deductFromOneBalanceAccount**.

        :param target_account: The target_account of this PlatformChargebackLogic.
        :type target_account: str
        """

        self._target_account = target_account
