# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSRequestorPriorAuthenticationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, three_ds_req_prior_auth_data: str=None, three_ds_req_prior_auth_method: str=None, three_ds_req_prior_auth_timestamp: str=None, three_ds_req_prior_ref: str=None):
        """ThreeDSRequestorPriorAuthenticationInfo - a model defined in OpenAPI

        :param three_ds_req_prior_auth_data: The three_ds_req_prior_auth_data of this ThreeDSRequestorPriorAuthenticationInfo.
        :param three_ds_req_prior_auth_method: The three_ds_req_prior_auth_method of this ThreeDSRequestorPriorAuthenticationInfo.
        :param three_ds_req_prior_auth_timestamp: The three_ds_req_prior_auth_timestamp of this ThreeDSRequestorPriorAuthenticationInfo.
        :param three_ds_req_prior_ref: The three_ds_req_prior_ref of this ThreeDSRequestorPriorAuthenticationInfo.
        """
        self.openapi_types = {
            'three_ds_req_prior_auth_data': str,
            'three_ds_req_prior_auth_method': str,
            'three_ds_req_prior_auth_timestamp': str,
            'three_ds_req_prior_ref': str
        }

        self.attribute_map = {
            'three_ds_req_prior_auth_data': 'threeDSReqPriorAuthData',
            'three_ds_req_prior_auth_method': 'threeDSReqPriorAuthMethod',
            'three_ds_req_prior_auth_timestamp': 'threeDSReqPriorAuthTimestamp',
            'three_ds_req_prior_ref': 'threeDSReqPriorRef'
        }

        self._three_ds_req_prior_auth_data = three_ds_req_prior_auth_data
        self._three_ds_req_prior_auth_method = three_ds_req_prior_auth_method
        self._three_ds_req_prior_auth_timestamp = three_ds_req_prior_auth_timestamp
        self._three_ds_req_prior_ref = three_ds_req_prior_ref

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSRequestorPriorAuthenticationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSRequestorPriorAuthenticationInfo of this ThreeDSRequestorPriorAuthenticationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def three_ds_req_prior_auth_data(self):
        """Gets the three_ds_req_prior_auth_data of this ThreeDSRequestorPriorAuthenticationInfo.

        Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.

        :return: The three_ds_req_prior_auth_data of this ThreeDSRequestorPriorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_prior_auth_data

    @three_ds_req_prior_auth_data.setter
    def three_ds_req_prior_auth_data(self, three_ds_req_prior_auth_data):
        """Sets the three_ds_req_prior_auth_data of this ThreeDSRequestorPriorAuthenticationInfo.

        Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.

        :param three_ds_req_prior_auth_data: The three_ds_req_prior_auth_data of this ThreeDSRequestorPriorAuthenticationInfo.
        :type three_ds_req_prior_auth_data: str
        """

        self._three_ds_req_prior_auth_data = three_ds_req_prior_auth_data

    @property
    def three_ds_req_prior_auth_method(self):
        """Gets the three_ds_req_prior_auth_method of this ThreeDSRequestorPriorAuthenticationInfo.

        Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor. Allowed values: * **01** — Frictionless authentication occurred by ACS. * **02** — Cardholder challenge occurred by ACS. * **03** — AVS verified. * **04** — Other issuer methods.

        :return: The three_ds_req_prior_auth_method of this ThreeDSRequestorPriorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_prior_auth_method

    @three_ds_req_prior_auth_method.setter
    def three_ds_req_prior_auth_method(self, three_ds_req_prior_auth_method):
        """Sets the three_ds_req_prior_auth_method of this ThreeDSRequestorPriorAuthenticationInfo.

        Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor. Allowed values: * **01** — Frictionless authentication occurred by ACS. * **02** — Cardholder challenge occurred by ACS. * **03** — AVS verified. * **04** — Other issuer methods.

        :param three_ds_req_prior_auth_method: The three_ds_req_prior_auth_method of this ThreeDSRequestorPriorAuthenticationInfo.
        :type three_ds_req_prior_auth_method: str
        """
        allowed_values = ["01", "02", "03", "04"]  # noqa: E501
        if three_ds_req_prior_auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `three_ds_req_prior_auth_method` ({0}), must be one of {1}"
                .format(three_ds_req_prior_auth_method, allowed_values)
            )

        self._three_ds_req_prior_auth_method = three_ds_req_prior_auth_method

    @property
    def three_ds_req_prior_auth_timestamp(self):
        """Gets the three_ds_req_prior_auth_timestamp of this ThreeDSRequestorPriorAuthenticationInfo.

        Date and time in UTC of the prior cardholder authentication. Format: YYYYMMDDHHMM

        :return: The three_ds_req_prior_auth_timestamp of this ThreeDSRequestorPriorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_prior_auth_timestamp

    @three_ds_req_prior_auth_timestamp.setter
    def three_ds_req_prior_auth_timestamp(self, three_ds_req_prior_auth_timestamp):
        """Sets the three_ds_req_prior_auth_timestamp of this ThreeDSRequestorPriorAuthenticationInfo.

        Date and time in UTC of the prior cardholder authentication. Format: YYYYMMDDHHMM

        :param three_ds_req_prior_auth_timestamp: The three_ds_req_prior_auth_timestamp of this ThreeDSRequestorPriorAuthenticationInfo.
        :type three_ds_req_prior_auth_timestamp: str
        """
        if three_ds_req_prior_auth_timestamp is not None and len(three_ds_req_prior_auth_timestamp) > 12:
            raise ValueError("Invalid value for `three_ds_req_prior_auth_timestamp`, length must be less than or equal to `12`")
        if three_ds_req_prior_auth_timestamp is not None and len(three_ds_req_prior_auth_timestamp) < 12:
            raise ValueError("Invalid value for `three_ds_req_prior_auth_timestamp`, length must be greater than or equal to `12`")

        self._three_ds_req_prior_auth_timestamp = three_ds_req_prior_auth_timestamp

    @property
    def three_ds_req_prior_ref(self):
        """Gets the three_ds_req_prior_ref of this ThreeDSRequestorPriorAuthenticationInfo.

        This data element provides additional information to the ACS to determine the best approach for handing a request. This data element contains an ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder. Length: 30 characters.

        :return: The three_ds_req_prior_ref of this ThreeDSRequestorPriorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_prior_ref

    @three_ds_req_prior_ref.setter
    def three_ds_req_prior_ref(self, three_ds_req_prior_ref):
        """Sets the three_ds_req_prior_ref of this ThreeDSRequestorPriorAuthenticationInfo.

        This data element provides additional information to the ACS to determine the best approach for handing a request. This data element contains an ACS Transaction ID for a prior authenticated transaction. For example, the first recurring transaction that was authenticated with the cardholder. Length: 30 characters.

        :param three_ds_req_prior_ref: The three_ds_req_prior_ref of this ThreeDSRequestorPriorAuthenticationInfo.
        :type three_ds_req_prior_ref: str
        """
        if three_ds_req_prior_ref is not None and len(three_ds_req_prior_ref) > 36:
            raise ValueError("Invalid value for `three_ds_req_prior_ref`, length must be less than or equal to `36`")
        if three_ds_req_prior_ref is not None and len(three_ds_req_prior_ref) < 36:
            raise ValueError("Invalid value for `three_ds_req_prior_ref`, length must be greater than or equal to `36`")

        self._three_ds_req_prior_ref = three_ds_req_prior_ref
