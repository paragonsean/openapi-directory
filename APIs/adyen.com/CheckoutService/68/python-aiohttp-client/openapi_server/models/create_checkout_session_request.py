# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_info import AccountInfo
from openapi_server.models.amount import Amount
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.balance_check_request_additional_data import BalanceCheckRequestAdditionalData
from openapi_server.models.billing_address import BillingAddress
from openapi_server.models.checkout_session_installment_option import CheckoutSessionInstallmentOption
from openapi_server.models.company import Company
from openapi_server.models.delivery_address import DeliveryAddress
from openapi_server.models.fund_origin import FundOrigin
from openapi_server.models.fund_recipient import FundRecipient
from openapi_server.models.line_item import LineItem
from openapi_server.models.mandate import Mandate
from openapi_server.models.name import Name
from openapi_server.models.risk_data import RiskData
from openapi_server.models.split import Split
from openapi_server.models.three_d_secure_data import ThreeDSecureData
from openapi_server import util


class CreateCheckoutSessionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_info: AccountInfo=None, additional_amount: Amount=None, additional_data: BalanceCheckRequestAdditionalData=None, allowed_payment_methods: List[str]=None, amount: Amount=None, application_info: ApplicationInfo=None, billing_address: BillingAddress=None, blocked_payment_methods: List[str]=None, capture_delay_hours: int=None, channel: str=None, company: Company=None, country_code: str=None, date_of_birth: date=None, deliver_at: datetime=None, delivery_address: DeliveryAddress=None, enable_one_click: bool=None, enable_pay_out: bool=None, enable_recurring: bool=None, expires_at: datetime=None, fund_origin: FundOrigin=None, fund_recipient: FundRecipient=None, installment_options: Dict[str, CheckoutSessionInstallmentOption]=None, line_items: List[LineItem]=None, mandate: Mandate=None, mcc: str=None, merchant_account: str=None, merchant_order_reference: str=None, metadata: Dict[str, str]=None, mpi_data: ThreeDSecureData=None, recurring_expiry: str=None, recurring_frequency: str=None, recurring_processing_model: str=None, redirect_from_issuer_method: str=None, redirect_to_issuer_method: str=None, reference: str=None, return_url: str=None, risk_data: RiskData=None, shopper_email: str=None, shopper_ip: str=None, shopper_interaction: str=None, shopper_locale: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, show_installment_amount: bool=None, show_remove_payment_method_button: bool=None, social_security_number: str=None, split_card_funding_sources: bool=False, splits: List[Split]=None, store: str=None, store_payment_method: bool=None, telephone_number: str=None, three_ds_authentication_only: bool=False, trusted_shopper: bool=None):
        """CreateCheckoutSessionRequest - a model defined in OpenAPI

        :param account_info: The account_info of this CreateCheckoutSessionRequest.
        :param additional_amount: The additional_amount of this CreateCheckoutSessionRequest.
        :param additional_data: The additional_data of this CreateCheckoutSessionRequest.
        :param allowed_payment_methods: The allowed_payment_methods of this CreateCheckoutSessionRequest.
        :param amount: The amount of this CreateCheckoutSessionRequest.
        :param application_info: The application_info of this CreateCheckoutSessionRequest.
        :param billing_address: The billing_address of this CreateCheckoutSessionRequest.
        :param blocked_payment_methods: The blocked_payment_methods of this CreateCheckoutSessionRequest.
        :param capture_delay_hours: The capture_delay_hours of this CreateCheckoutSessionRequest.
        :param channel: The channel of this CreateCheckoutSessionRequest.
        :param company: The company of this CreateCheckoutSessionRequest.
        :param country_code: The country_code of this CreateCheckoutSessionRequest.
        :param date_of_birth: The date_of_birth of this CreateCheckoutSessionRequest.
        :param deliver_at: The deliver_at of this CreateCheckoutSessionRequest.
        :param delivery_address: The delivery_address of this CreateCheckoutSessionRequest.
        :param enable_one_click: The enable_one_click of this CreateCheckoutSessionRequest.
        :param enable_pay_out: The enable_pay_out of this CreateCheckoutSessionRequest.
        :param enable_recurring: The enable_recurring of this CreateCheckoutSessionRequest.
        :param expires_at: The expires_at of this CreateCheckoutSessionRequest.
        :param fund_origin: The fund_origin of this CreateCheckoutSessionRequest.
        :param fund_recipient: The fund_recipient of this CreateCheckoutSessionRequest.
        :param installment_options: The installment_options of this CreateCheckoutSessionRequest.
        :param line_items: The line_items of this CreateCheckoutSessionRequest.
        :param mandate: The mandate of this CreateCheckoutSessionRequest.
        :param mcc: The mcc of this CreateCheckoutSessionRequest.
        :param merchant_account: The merchant_account of this CreateCheckoutSessionRequest.
        :param merchant_order_reference: The merchant_order_reference of this CreateCheckoutSessionRequest.
        :param metadata: The metadata of this CreateCheckoutSessionRequest.
        :param mpi_data: The mpi_data of this CreateCheckoutSessionRequest.
        :param recurring_expiry: The recurring_expiry of this CreateCheckoutSessionRequest.
        :param recurring_frequency: The recurring_frequency of this CreateCheckoutSessionRequest.
        :param recurring_processing_model: The recurring_processing_model of this CreateCheckoutSessionRequest.
        :param redirect_from_issuer_method: The redirect_from_issuer_method of this CreateCheckoutSessionRequest.
        :param redirect_to_issuer_method: The redirect_to_issuer_method of this CreateCheckoutSessionRequest.
        :param reference: The reference of this CreateCheckoutSessionRequest.
        :param return_url: The return_url of this CreateCheckoutSessionRequest.
        :param risk_data: The risk_data of this CreateCheckoutSessionRequest.
        :param shopper_email: The shopper_email of this CreateCheckoutSessionRequest.
        :param shopper_ip: The shopper_ip of this CreateCheckoutSessionRequest.
        :param shopper_interaction: The shopper_interaction of this CreateCheckoutSessionRequest.
        :param shopper_locale: The shopper_locale of this CreateCheckoutSessionRequest.
        :param shopper_name: The shopper_name of this CreateCheckoutSessionRequest.
        :param shopper_reference: The shopper_reference of this CreateCheckoutSessionRequest.
        :param shopper_statement: The shopper_statement of this CreateCheckoutSessionRequest.
        :param show_installment_amount: The show_installment_amount of this CreateCheckoutSessionRequest.
        :param show_remove_payment_method_button: The show_remove_payment_method_button of this CreateCheckoutSessionRequest.
        :param social_security_number: The social_security_number of this CreateCheckoutSessionRequest.
        :param split_card_funding_sources: The split_card_funding_sources of this CreateCheckoutSessionRequest.
        :param splits: The splits of this CreateCheckoutSessionRequest.
        :param store: The store of this CreateCheckoutSessionRequest.
        :param store_payment_method: The store_payment_method of this CreateCheckoutSessionRequest.
        :param telephone_number: The telephone_number of this CreateCheckoutSessionRequest.
        :param three_ds_authentication_only: The three_ds_authentication_only of this CreateCheckoutSessionRequest.
        :param trusted_shopper: The trusted_shopper of this CreateCheckoutSessionRequest.
        """
        self.openapi_types = {
            'account_info': AccountInfo,
            'additional_amount': Amount,
            'additional_data': BalanceCheckRequestAdditionalData,
            'allowed_payment_methods': List[str],
            'amount': Amount,
            'application_info': ApplicationInfo,
            'billing_address': BillingAddress,
            'blocked_payment_methods': List[str],
            'capture_delay_hours': int,
            'channel': str,
            'company': Company,
            'country_code': str,
            'date_of_birth': date,
            'deliver_at': datetime,
            'delivery_address': DeliveryAddress,
            'enable_one_click': bool,
            'enable_pay_out': bool,
            'enable_recurring': bool,
            'expires_at': datetime,
            'fund_origin': FundOrigin,
            'fund_recipient': FundRecipient,
            'installment_options': Dict[str, CheckoutSessionInstallmentOption],
            'line_items': List[LineItem],
            'mandate': Mandate,
            'mcc': str,
            'merchant_account': str,
            'merchant_order_reference': str,
            'metadata': Dict[str, str],
            'mpi_data': ThreeDSecureData,
            'recurring_expiry': str,
            'recurring_frequency': str,
            'recurring_processing_model': str,
            'redirect_from_issuer_method': str,
            'redirect_to_issuer_method': str,
            'reference': str,
            'return_url': str,
            'risk_data': RiskData,
            'shopper_email': str,
            'shopper_ip': str,
            'shopper_interaction': str,
            'shopper_locale': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'show_installment_amount': bool,
            'show_remove_payment_method_button': bool,
            'social_security_number': str,
            'split_card_funding_sources': bool,
            'splits': List[Split],
            'store': str,
            'store_payment_method': bool,
            'telephone_number': str,
            'three_ds_authentication_only': bool,
            'trusted_shopper': bool
        }

        self.attribute_map = {
            'account_info': 'accountInfo',
            'additional_amount': 'additionalAmount',
            'additional_data': 'additionalData',
            'allowed_payment_methods': 'allowedPaymentMethods',
            'amount': 'amount',
            'application_info': 'applicationInfo',
            'billing_address': 'billingAddress',
            'blocked_payment_methods': 'blockedPaymentMethods',
            'capture_delay_hours': 'captureDelayHours',
            'channel': 'channel',
            'company': 'company',
            'country_code': 'countryCode',
            'date_of_birth': 'dateOfBirth',
            'deliver_at': 'deliverAt',
            'delivery_address': 'deliveryAddress',
            'enable_one_click': 'enableOneClick',
            'enable_pay_out': 'enablePayOut',
            'enable_recurring': 'enableRecurring',
            'expires_at': 'expiresAt',
            'fund_origin': 'fundOrigin',
            'fund_recipient': 'fundRecipient',
            'installment_options': 'installmentOptions',
            'line_items': 'lineItems',
            'mandate': 'mandate',
            'mcc': 'mcc',
            'merchant_account': 'merchantAccount',
            'merchant_order_reference': 'merchantOrderReference',
            'metadata': 'metadata',
            'mpi_data': 'mpiData',
            'recurring_expiry': 'recurringExpiry',
            'recurring_frequency': 'recurringFrequency',
            'recurring_processing_model': 'recurringProcessingModel',
            'redirect_from_issuer_method': 'redirectFromIssuerMethod',
            'redirect_to_issuer_method': 'redirectToIssuerMethod',
            'reference': 'reference',
            'return_url': 'returnUrl',
            'risk_data': 'riskData',
            'shopper_email': 'shopperEmail',
            'shopper_ip': 'shopperIP',
            'shopper_interaction': 'shopperInteraction',
            'shopper_locale': 'shopperLocale',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'show_installment_amount': 'showInstallmentAmount',
            'show_remove_payment_method_button': 'showRemovePaymentMethodButton',
            'social_security_number': 'socialSecurityNumber',
            'split_card_funding_sources': 'splitCardFundingSources',
            'splits': 'splits',
            'store': 'store',
            'store_payment_method': 'storePaymentMethod',
            'telephone_number': 'telephoneNumber',
            'three_ds_authentication_only': 'threeDSAuthenticationOnly',
            'trusted_shopper': 'trustedShopper'
        }

        self._account_info = account_info
        self._additional_amount = additional_amount
        self._additional_data = additional_data
        self._allowed_payment_methods = allowed_payment_methods
        self._amount = amount
        self._application_info = application_info
        self._billing_address = billing_address
        self._blocked_payment_methods = blocked_payment_methods
        self._capture_delay_hours = capture_delay_hours
        self._channel = channel
        self._company = company
        self._country_code = country_code
        self._date_of_birth = date_of_birth
        self._deliver_at = deliver_at
        self._delivery_address = delivery_address
        self._enable_one_click = enable_one_click
        self._enable_pay_out = enable_pay_out
        self._enable_recurring = enable_recurring
        self._expires_at = expires_at
        self._fund_origin = fund_origin
        self._fund_recipient = fund_recipient
        self._installment_options = installment_options
        self._line_items = line_items
        self._mandate = mandate
        self._mcc = mcc
        self._merchant_account = merchant_account
        self._merchant_order_reference = merchant_order_reference
        self._metadata = metadata
        self._mpi_data = mpi_data
        self._recurring_expiry = recurring_expiry
        self._recurring_frequency = recurring_frequency
        self._recurring_processing_model = recurring_processing_model
        self._redirect_from_issuer_method = redirect_from_issuer_method
        self._redirect_to_issuer_method = redirect_to_issuer_method
        self._reference = reference
        self._return_url = return_url
        self._risk_data = risk_data
        self._shopper_email = shopper_email
        self._shopper_ip = shopper_ip
        self._shopper_interaction = shopper_interaction
        self._shopper_locale = shopper_locale
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._show_installment_amount = show_installment_amount
        self._show_remove_payment_method_button = show_remove_payment_method_button
        self._social_security_number = social_security_number
        self._split_card_funding_sources = split_card_funding_sources
        self._splits = splits
        self._store = store
        self._store_payment_method = store_payment_method
        self._telephone_number = telephone_number
        self._three_ds_authentication_only = three_ds_authentication_only
        self._trusted_shopper = trusted_shopper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateCheckoutSessionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateCheckoutSessionRequest of this CreateCheckoutSessionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_info(self):
        """Gets the account_info of this CreateCheckoutSessionRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :return: The account_info of this CreateCheckoutSessionRequest.
        :rtype: AccountInfo
        """
        return self._account_info

    @account_info.setter
    def account_info(self, account_info):
        """Sets the account_info of this CreateCheckoutSessionRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :param account_info: The account_info of this CreateCheckoutSessionRequest.
        :type account_info: AccountInfo
        """

        self._account_info = account_info

    @property
    def additional_amount(self):
        """Gets the additional_amount of this CreateCheckoutSessionRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :return: The additional_amount of this CreateCheckoutSessionRequest.
        :rtype: Amount
        """
        return self._additional_amount

    @additional_amount.setter
    def additional_amount(self, additional_amount):
        """Sets the additional_amount of this CreateCheckoutSessionRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :param additional_amount: The additional_amount of this CreateCheckoutSessionRequest.
        :type additional_amount: Amount
        """

        self._additional_amount = additional_amount

    @property
    def additional_data(self):
        """Gets the additional_data of this CreateCheckoutSessionRequest.


        :return: The additional_data of this CreateCheckoutSessionRequest.
        :rtype: BalanceCheckRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this CreateCheckoutSessionRequest.


        :param additional_data: The additional_data of this CreateCheckoutSessionRequest.
        :type additional_data: BalanceCheckRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def allowed_payment_methods(self):
        """Gets the allowed_payment_methods of this CreateCheckoutSessionRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The allowed_payment_methods of this CreateCheckoutSessionRequest.
        :rtype: List[str]
        """
        return self._allowed_payment_methods

    @allowed_payment_methods.setter
    def allowed_payment_methods(self, allowed_payment_methods):
        """Sets the allowed_payment_methods of this CreateCheckoutSessionRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param allowed_payment_methods: The allowed_payment_methods of this CreateCheckoutSessionRequest.
        :type allowed_payment_methods: List[str]
        """

        self._allowed_payment_methods = allowed_payment_methods

    @property
    def amount(self):
        """Gets the amount of this CreateCheckoutSessionRequest.

        The amount of the payment.

        :return: The amount of this CreateCheckoutSessionRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateCheckoutSessionRequest.

        The amount of the payment.

        :param amount: The amount of this CreateCheckoutSessionRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def application_info(self):
        """Gets the application_info of this CreateCheckoutSessionRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :return: The application_info of this CreateCheckoutSessionRequest.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this CreateCheckoutSessionRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :param application_info: The application_info of this CreateCheckoutSessionRequest.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def billing_address(self):
        """Gets the billing_address of this CreateCheckoutSessionRequest.

        The address where to send the invoice.

        :return: The billing_address of this CreateCheckoutSessionRequest.
        :rtype: BillingAddress
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreateCheckoutSessionRequest.

        The address where to send the invoice.

        :param billing_address: The billing_address of this CreateCheckoutSessionRequest.
        :type billing_address: BillingAddress
        """

        self._billing_address = billing_address

    @property
    def blocked_payment_methods(self):
        """Gets the blocked_payment_methods of this CreateCheckoutSessionRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The blocked_payment_methods of this CreateCheckoutSessionRequest.
        :rtype: List[str]
        """
        return self._blocked_payment_methods

    @blocked_payment_methods.setter
    def blocked_payment_methods(self, blocked_payment_methods):
        """Sets the blocked_payment_methods of this CreateCheckoutSessionRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param blocked_payment_methods: The blocked_payment_methods of this CreateCheckoutSessionRequest.
        :type blocked_payment_methods: List[str]
        """

        self._blocked_payment_methods = blocked_payment_methods

    @property
    def capture_delay_hours(self):
        """Gets the capture_delay_hours of this CreateCheckoutSessionRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :return: The capture_delay_hours of this CreateCheckoutSessionRequest.
        :rtype: int
        """
        return self._capture_delay_hours

    @capture_delay_hours.setter
    def capture_delay_hours(self, capture_delay_hours):
        """Sets the capture_delay_hours of this CreateCheckoutSessionRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :param capture_delay_hours: The capture_delay_hours of this CreateCheckoutSessionRequest.
        :type capture_delay_hours: int
        """

        self._capture_delay_hours = capture_delay_hours

    @property
    def channel(self):
        """Gets the channel of this CreateCheckoutSessionRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**

        :return: The channel of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this CreateCheckoutSessionRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * **iOS** * **Android** * **Web**

        :param channel: The channel of this CreateCheckoutSessionRequest.
        :type channel: str
        """
        allowed_values = ["iOS", "Android", "Web"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def company(self):
        """Gets the company of this CreateCheckoutSessionRequest.

        Information regarding the company.

        :return: The company of this CreateCheckoutSessionRequest.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this CreateCheckoutSessionRequest.

        Information regarding the company.

        :param company: The company of this CreateCheckoutSessionRequest.
        :type company: Company
        """

        self._company = company

    @property
    def country_code(self):
        """Gets the country_code of this CreateCheckoutSessionRequest.

        The shopper's two-letter country code.

        :return: The country_code of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CreateCheckoutSessionRequest.

        The shopper's two-letter country code.

        :param country_code: The country_code of this CreateCheckoutSessionRequest.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this CreateCheckoutSessionRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :return: The date_of_birth of this CreateCheckoutSessionRequest.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this CreateCheckoutSessionRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :param date_of_birth: The date_of_birth of this CreateCheckoutSessionRequest.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def deliver_at(self):
        """Gets the deliver_at of this CreateCheckoutSessionRequest.

        The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :return: The deliver_at of this CreateCheckoutSessionRequest.
        :rtype: datetime
        """
        return self._deliver_at

    @deliver_at.setter
    def deliver_at(self, deliver_at):
        """Sets the deliver_at of this CreateCheckoutSessionRequest.

        The date and time when the purchased goods should be delivered.  [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format: YYYY-MM-DDThh:mm:ss+TZD, for example, **2020-12-18T10:15:30+01:00**.

        :param deliver_at: The deliver_at of this CreateCheckoutSessionRequest.
        :type deliver_at: datetime
        """

        self._deliver_at = deliver_at

    @property
    def delivery_address(self):
        """Gets the delivery_address of this CreateCheckoutSessionRequest.

        The address where the purchased goods should be delivered.

        :return: The delivery_address of this CreateCheckoutSessionRequest.
        :rtype: DeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this CreateCheckoutSessionRequest.

        The address where the purchased goods should be delivered.

        :param delivery_address: The delivery_address of this CreateCheckoutSessionRequest.
        :type delivery_address: DeliveryAddress
        """

        self._delivery_address = delivery_address

    @property
    def enable_one_click(self):
        """Gets the enable_one_click of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :return: The enable_one_click of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._enable_one_click

    @enable_one_click.setter
    def enable_one_click(self, enable_one_click):
        """Sets the enable_one_click of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :param enable_one_click: The enable_one_click of this CreateCheckoutSessionRequest.
        :type enable_one_click: bool
        """

        self._enable_one_click = enable_one_click

    @property
    def enable_pay_out(self):
        """Gets the enable_pay_out of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :return: The enable_pay_out of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._enable_pay_out

    @enable_pay_out.setter
    def enable_pay_out(self, enable_pay_out):
        """Sets the enable_pay_out of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :param enable_pay_out: The enable_pay_out of this CreateCheckoutSessionRequest.
        :type enable_pay_out: bool
        """

        self._enable_pay_out = enable_pay_out

    @property
    def enable_recurring(self):
        """Gets the enable_recurring of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :return: The enable_recurring of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._enable_recurring

    @enable_recurring.setter
    def enable_recurring(self, enable_recurring):
        """Sets the enable_recurring of this CreateCheckoutSessionRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :param enable_recurring: The enable_recurring of this CreateCheckoutSessionRequest.
        :type enable_recurring: bool
        """

        self._enable_recurring = enable_recurring

    @property
    def expires_at(self):
        """Gets the expires_at of this CreateCheckoutSessionRequest.

        The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.

        :return: The expires_at of this CreateCheckoutSessionRequest.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CreateCheckoutSessionRequest.

        The date the session expires in [ISO8601](https://www.iso.org/iso-8601-date-and-time-format.html) format. When not specified, the expiry date is set to 1 hour after session creation. You cannot set the session expiry to more than 24 hours after session creation.

        :param expires_at: The expires_at of this CreateCheckoutSessionRequest.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def fund_origin(self):
        """Gets the fund_origin of this CreateCheckoutSessionRequest.

        The person or entity funding the money.

        :return: The fund_origin of this CreateCheckoutSessionRequest.
        :rtype: FundOrigin
        """
        return self._fund_origin

    @fund_origin.setter
    def fund_origin(self, fund_origin):
        """Sets the fund_origin of this CreateCheckoutSessionRequest.

        The person or entity funding the money.

        :param fund_origin: The fund_origin of this CreateCheckoutSessionRequest.
        :type fund_origin: FundOrigin
        """

        self._fund_origin = fund_origin

    @property
    def fund_recipient(self):
        """Gets the fund_recipient of this CreateCheckoutSessionRequest.

        the person or entity receiving the money

        :return: The fund_recipient of this CreateCheckoutSessionRequest.
        :rtype: FundRecipient
        """
        return self._fund_recipient

    @fund_recipient.setter
    def fund_recipient(self, fund_recipient):
        """Sets the fund_recipient of this CreateCheckoutSessionRequest.

        the person or entity receiving the money

        :param fund_recipient: The fund_recipient of this CreateCheckoutSessionRequest.
        :type fund_recipient: FundRecipient
        """

        self._fund_recipient = fund_recipient

    @property
    def installment_options(self):
        """Gets the installment_options of this CreateCheckoutSessionRequest.

        A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.

        :return: The installment_options of this CreateCheckoutSessionRequest.
        :rtype: Dict[str, CheckoutSessionInstallmentOption]
        """
        return self._installment_options

    @installment_options.setter
    def installment_options(self, installment_options):
        """Sets the installment_options of this CreateCheckoutSessionRequest.

        A set of key-value pairs that specifies the installment options available per payment method. The key must be a payment method name in lowercase. For example, **card** to specify installment options for all cards, or **visa** or **mc**. The value must be an object containing the installment options.

        :param installment_options: The installment_options of this CreateCheckoutSessionRequest.
        :type installment_options: Dict[str, CheckoutSessionInstallmentOption]
        """

        self._installment_options = installment_options

    @property
    def line_items(self):
        """Gets the line_items of this CreateCheckoutSessionRequest.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.

        :return: The line_items of this CreateCheckoutSessionRequest.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this CreateCheckoutSessionRequest.

        Price and product information about the purchased items, to be included on the invoice sent to the shopper. > This field is required for 3x 4x Oney, Affirm, Afterpay, Clearpay, Klarna, Ratepay, and Zip.

        :param line_items: The line_items of this CreateCheckoutSessionRequest.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def mandate(self):
        """Gets the mandate of this CreateCheckoutSessionRequest.

        The mandate details to initiate recurring transaction.

        :return: The mandate of this CreateCheckoutSessionRequest.
        :rtype: Mandate
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """Sets the mandate of this CreateCheckoutSessionRequest.

        The mandate details to initiate recurring transaction.

        :param mandate: The mandate of this CreateCheckoutSessionRequest.
        :type mandate: Mandate
        """

        self._mandate = mandate

    @property
    def mcc(self):
        """Gets the mcc of this CreateCheckoutSessionRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :return: The mcc of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this CreateCheckoutSessionRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :param mcc: The mcc of this CreateCheckoutSessionRequest.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CreateCheckoutSessionRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CreateCheckoutSessionRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this CreateCheckoutSessionRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_order_reference(self):
        """Gets the merchant_order_reference of this CreateCheckoutSessionRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :return: The merchant_order_reference of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._merchant_order_reference

    @merchant_order_reference.setter
    def merchant_order_reference(self, merchant_order_reference):
        """Sets the merchant_order_reference of this CreateCheckoutSessionRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :param merchant_order_reference: The merchant_order_reference of this CreateCheckoutSessionRequest.
        :type merchant_order_reference: str
        """

        self._merchant_order_reference = merchant_order_reference

    @property
    def metadata(self):
        """Gets the metadata of this CreateCheckoutSessionRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :return: The metadata of this CreateCheckoutSessionRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this CreateCheckoutSessionRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :param metadata: The metadata of this CreateCheckoutSessionRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def mpi_data(self):
        """Gets the mpi_data of this CreateCheckoutSessionRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :return: The mpi_data of this CreateCheckoutSessionRequest.
        :rtype: ThreeDSecureData
        """
        return self._mpi_data

    @mpi_data.setter
    def mpi_data(self, mpi_data):
        """Sets the mpi_data of this CreateCheckoutSessionRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :param mpi_data: The mpi_data of this CreateCheckoutSessionRequest.
        :type mpi_data: ThreeDSecureData
        """

        self._mpi_data = mpi_data

    @property
    def recurring_expiry(self):
        """Gets the recurring_expiry of this CreateCheckoutSessionRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :return: The recurring_expiry of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._recurring_expiry

    @recurring_expiry.setter
    def recurring_expiry(self, recurring_expiry):
        """Sets the recurring_expiry of this CreateCheckoutSessionRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :param recurring_expiry: The recurring_expiry of this CreateCheckoutSessionRequest.
        :type recurring_expiry: str
        """

        self._recurring_expiry = recurring_expiry

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this CreateCheckoutSessionRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :return: The recurring_frequency of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this CreateCheckoutSessionRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :param recurring_frequency: The recurring_frequency of this CreateCheckoutSessionRequest.
        :type recurring_frequency: str
        """

        self._recurring_frequency = recurring_frequency

    @property
    def recurring_processing_model(self):
        """Gets the recurring_processing_model of this CreateCheckoutSessionRequest.

        Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :return: The recurring_processing_model of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._recurring_processing_model

    @recurring_processing_model.setter
    def recurring_processing_model(self, recurring_processing_model):
        """Sets the recurring_processing_model of this CreateCheckoutSessionRequest.

        Defines a recurring payment type. Required when creating a token to store payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :param recurring_processing_model: The recurring_processing_model of this CreateCheckoutSessionRequest.
        :type recurring_processing_model: str
        """
        allowed_values = ["CardOnFile", "Subscription", "UnscheduledCardOnFile"]  # noqa: E501
        if recurring_processing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recurring_processing_model` ({0}), must be one of {1}"
                .format(recurring_processing_model, allowed_values)
            )

        self._recurring_processing_model = recurring_processing_model

    @property
    def redirect_from_issuer_method(self):
        """Gets the redirect_from_issuer_method of this CreateCheckoutSessionRequest.

        Specifies the redirect method (GET or POST) when redirecting back from the issuer.

        :return: The redirect_from_issuer_method of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._redirect_from_issuer_method

    @redirect_from_issuer_method.setter
    def redirect_from_issuer_method(self, redirect_from_issuer_method):
        """Sets the redirect_from_issuer_method of this CreateCheckoutSessionRequest.

        Specifies the redirect method (GET or POST) when redirecting back from the issuer.

        :param redirect_from_issuer_method: The redirect_from_issuer_method of this CreateCheckoutSessionRequest.
        :type redirect_from_issuer_method: str
        """

        self._redirect_from_issuer_method = redirect_from_issuer_method

    @property
    def redirect_to_issuer_method(self):
        """Gets the redirect_to_issuer_method of this CreateCheckoutSessionRequest.

        Specifies the redirect method (GET or POST) when redirecting to the issuer.

        :return: The redirect_to_issuer_method of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._redirect_to_issuer_method

    @redirect_to_issuer_method.setter
    def redirect_to_issuer_method(self, redirect_to_issuer_method):
        """Sets the redirect_to_issuer_method of this CreateCheckoutSessionRequest.

        Specifies the redirect method (GET or POST) when redirecting to the issuer.

        :param redirect_to_issuer_method: The redirect_to_issuer_method of this CreateCheckoutSessionRequest.
        :type redirect_to_issuer_method: str
        """

        self._redirect_to_issuer_method = redirect_to_issuer_method

    @property
    def reference(self):
        """Gets the reference of this CreateCheckoutSessionRequest.

        The reference to uniquely identify a payment.

        :return: The reference of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CreateCheckoutSessionRequest.

        The reference to uniquely identify a payment.

        :param reference: The reference of this CreateCheckoutSessionRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def return_url(self):
        """Gets the return_url of this CreateCheckoutSessionRequest.

        The URL to return to when a redirect payment is completed.

        :return: The return_url of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this CreateCheckoutSessionRequest.

        The URL to return to when a redirect payment is completed.

        :param return_url: The return_url of this CreateCheckoutSessionRequest.
        :type return_url: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")

        self._return_url = return_url

    @property
    def risk_data(self):
        """Gets the risk_data of this CreateCheckoutSessionRequest.

        Any risk-related settings to apply to the payment.

        :return: The risk_data of this CreateCheckoutSessionRequest.
        :rtype: RiskData
        """
        return self._risk_data

    @risk_data.setter
    def risk_data(self, risk_data):
        """Sets the risk_data of this CreateCheckoutSessionRequest.

        Any risk-related settings to apply to the payment.

        :param risk_data: The risk_data of this CreateCheckoutSessionRequest.
        :type risk_data: RiskData
        """

        self._risk_data = risk_data

    @property
    def shopper_email(self):
        """Gets the shopper_email of this CreateCheckoutSessionRequest.

        The shopper's email address.

        :return: The shopper_email of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this CreateCheckoutSessionRequest.

        The shopper's email address.

        :param shopper_email: The shopper_email of this CreateCheckoutSessionRequest.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_ip(self):
        """Gets the shopper_ip of this CreateCheckoutSessionRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The shopper_ip of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_ip

    @shopper_ip.setter
    def shopper_ip(self, shopper_ip):
        """Sets the shopper_ip of this CreateCheckoutSessionRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param shopper_ip: The shopper_ip of this CreateCheckoutSessionRequest.
        :type shopper_ip: str
        """

        self._shopper_ip = shopper_ip

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this CreateCheckoutSessionRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this CreateCheckoutSessionRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this CreateCheckoutSessionRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this CreateCheckoutSessionRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :return: The shopper_locale of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this CreateCheckoutSessionRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :param shopper_locale: The shopper_locale of this CreateCheckoutSessionRequest.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_name(self):
        """Gets the shopper_name of this CreateCheckoutSessionRequest.

        The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.

        :return: The shopper_name of this CreateCheckoutSessionRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this CreateCheckoutSessionRequest.

        The shopper's full name. This object is required for some payment methods such as AfterPay, Klarna, or if you're enrolled in the PayPal Seller Protection program.

        :param shopper_name: The shopper_name of this CreateCheckoutSessionRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this CreateCheckoutSessionRequest.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this CreateCheckoutSessionRequest.

        Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this CreateCheckoutSessionRequest.
        :type shopper_reference: str
        """
        if shopper_reference is not None and len(shopper_reference) > 256:
            raise ValueError("Invalid value for `shopper_reference`, length must be less than or equal to `256`")
        if shopper_reference is not None and len(shopper_reference) < 3:
            raise ValueError("Invalid value for `shopper_reference`, length must be greater than or equal to `3`")

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this CreateCheckoutSessionRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :return: The shopper_statement of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this CreateCheckoutSessionRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :param shopper_statement: The shopper_statement of this CreateCheckoutSessionRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def show_installment_amount(self):
        """Gets the show_installment_amount of this CreateCheckoutSessionRequest.

        Set to true to show the payment amount per installment.

        :return: The show_installment_amount of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._show_installment_amount

    @show_installment_amount.setter
    def show_installment_amount(self, show_installment_amount):
        """Sets the show_installment_amount of this CreateCheckoutSessionRequest.

        Set to true to show the payment amount per installment.

        :param show_installment_amount: The show_installment_amount of this CreateCheckoutSessionRequest.
        :type show_installment_amount: bool
        """

        self._show_installment_amount = show_installment_amount

    @property
    def show_remove_payment_method_button(self):
        """Gets the show_remove_payment_method_button of this CreateCheckoutSessionRequest.

        Set to **true** to show a button that lets the shopper remove a stored payment method.

        :return: The show_remove_payment_method_button of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._show_remove_payment_method_button

    @show_remove_payment_method_button.setter
    def show_remove_payment_method_button(self, show_remove_payment_method_button):
        """Sets the show_remove_payment_method_button of this CreateCheckoutSessionRequest.

        Set to **true** to show a button that lets the shopper remove a stored payment method.

        :param show_remove_payment_method_button: The show_remove_payment_method_button of this CreateCheckoutSessionRequest.
        :type show_remove_payment_method_button: bool
        """

        self._show_remove_payment_method_button = show_remove_payment_method_button

    @property
    def social_security_number(self):
        """Gets the social_security_number of this CreateCheckoutSessionRequest.

        The shopper's social security number.

        :return: The social_security_number of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this CreateCheckoutSessionRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this CreateCheckoutSessionRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def split_card_funding_sources(self):
        """Gets the split_card_funding_sources of this CreateCheckoutSessionRequest.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :return: The split_card_funding_sources of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._split_card_funding_sources

    @split_card_funding_sources.setter
    def split_card_funding_sources(self, split_card_funding_sources):
        """Sets the split_card_funding_sources of this CreateCheckoutSessionRequest.

        Boolean value indicating whether the card payment method should be split into separate debit and credit options.

        :param split_card_funding_sources: The split_card_funding_sources of this CreateCheckoutSessionRequest.
        :type split_card_funding_sources: bool
        """

        self._split_card_funding_sources = split_card_funding_sources

    @property
    def splits(self):
        """Gets the splits of this CreateCheckoutSessionRequest.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :return: The splits of this CreateCheckoutSessionRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this CreateCheckoutSessionRequest.

        An array of objects specifying how to split a payment when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information), [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic/processing-payments#providing-split-information), or [Issuing](https://docs.adyen.com/issuing/manage-funds#split).

        :param splits: The splits of this CreateCheckoutSessionRequest.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def store(self):
        """Gets the store of this CreateCheckoutSessionRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :return: The store of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this CreateCheckoutSessionRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :param store: The store of this CreateCheckoutSessionRequest.
        :type store: str
        """

        self._store = store

    @property
    def store_payment_method(self):
        """Gets the store_payment_method of this CreateCheckoutSessionRequest.

        When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.

        :return: The store_payment_method of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._store_payment_method

    @store_payment_method.setter
    def store_payment_method(self, store_payment_method):
        """Sets the store_payment_method of this CreateCheckoutSessionRequest.

        When this is set to **true** and the `shopperReference` is provided, the payment details will be stored.

        :param store_payment_method: The store_payment_method of this CreateCheckoutSessionRequest.
        :type store_payment_method: bool
        """

        self._store_payment_method = store_payment_method

    @property
    def telephone_number(self):
        """Gets the telephone_number of this CreateCheckoutSessionRequest.

        The shopper's telephone number.

        :return: The telephone_number of this CreateCheckoutSessionRequest.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this CreateCheckoutSessionRequest.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this CreateCheckoutSessionRequest.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def three_ds_authentication_only(self):
        """Gets the three_ds_authentication_only of this CreateCheckoutSessionRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :return: The three_ds_authentication_only of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._three_ds_authentication_only

    @three_ds_authentication_only.setter
    def three_ds_authentication_only(self, three_ds_authentication_only):
        """Sets the three_ds_authentication_only of this CreateCheckoutSessionRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :param three_ds_authentication_only: The three_ds_authentication_only of this CreateCheckoutSessionRequest.
        :type three_ds_authentication_only: bool
        """

        self._three_ds_authentication_only = three_ds_authentication_only

    @property
    def trusted_shopper(self):
        """Gets the trusted_shopper of this CreateCheckoutSessionRequest.

        Set to true if the payment should be routed to a trusted MID.

        :return: The trusted_shopper of this CreateCheckoutSessionRequest.
        :rtype: bool
        """
        return self._trusted_shopper

    @trusted_shopper.setter
    def trusted_shopper(self, trusted_shopper):
        """Sets the trusted_shopper of this CreateCheckoutSessionRequest.

        Set to true if the payment should be routed to a trusted MID.

        :param trusted_shopper: The trusted_shopper of this CreateCheckoutSessionRequest.
        :type trusted_shopper: bool
        """

        self._trusted_shopper = trusted_shopper
