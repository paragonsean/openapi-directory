/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v68/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v68/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=68) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentCompletionDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:13.071795-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentCompletionDetails {
  public static final String SERIALIZED_NAME_M_D = "MD";
  @SerializedName(SERIALIZED_NAME_M_D)
  private String MD;

  public static final String SERIALIZED_NAME_PA_REQ = "PaReq";
  @SerializedName(SERIALIZED_NAME_PA_REQ)
  private String paReq;

  public static final String SERIALIZED_NAME_PA_RES = "PaRes";
  @SerializedName(SERIALIZED_NAME_PA_RES)
  private String paRes;

  public static final String SERIALIZED_NAME_AUTHORIZATION_TOKEN = "authorization_token";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_TOKEN)
  private String authorizationToken;

  public static final String SERIALIZED_NAME_BILLING_TOKEN = "billingToken";
  @SerializedName(SERIALIZED_NAME_BILLING_TOKEN)
  private String billingToken;

  public static final String SERIALIZED_NAME_CUPSECUREPLUS_SMSCODE = "cupsecureplus.smscode";
  @SerializedName(SERIALIZED_NAME_CUPSECUREPLUS_SMSCODE)
  private String cupsecureplusSmscode;

  public static final String SERIALIZED_NAME_FACILITATOR_ACCESS_TOKEN = "facilitatorAccessToken";
  @SerializedName(SERIALIZED_NAME_FACILITATOR_ACCESS_TOKEN)
  private String facilitatorAccessToken;

  public static final String SERIALIZED_NAME_ONE_TIME_PASSCODE = "oneTimePasscode";
  @SerializedName(SERIALIZED_NAME_ONE_TIME_PASSCODE)
  private String oneTimePasscode;

  public static final String SERIALIZED_NAME_ORDER_I_D = "orderID";
  @SerializedName(SERIALIZED_NAME_ORDER_I_D)
  private String orderID;

  public static final String SERIALIZED_NAME_PAYER_I_D = "payerID";
  @SerializedName(SERIALIZED_NAME_PAYER_I_D)
  private String payerID;

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private String payload;

  public static final String SERIALIZED_NAME_PAYMENT_I_D = "paymentID";
  @SerializedName(SERIALIZED_NAME_PAYMENT_I_D)
  private String paymentID;

  public static final String SERIALIZED_NAME_PAYMENT_STATUS = "paymentStatus";
  @SerializedName(SERIALIZED_NAME_PAYMENT_STATUS)
  private String paymentStatus;

  public static final String SERIALIZED_NAME_REDIRECT_RESULT = "redirectResult";
  @SerializedName(SERIALIZED_NAME_REDIRECT_RESULT)
  private String redirectResult;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode;

  public static final String SERIALIZED_NAME_THREE_D_S_RESULT = "threeDSResult";
  @SerializedName(SERIALIZED_NAME_THREE_D_S_RESULT)
  private String threeDSResult;

  public static final String SERIALIZED_NAME_THREEDS2_CHALLENGE_RESULT = "threeds2.challengeResult";
  @SerializedName(SERIALIZED_NAME_THREEDS2_CHALLENGE_RESULT)
  private String threeds2ChallengeResult;

  public static final String SERIALIZED_NAME_THREEDS2_FINGERPRINT = "threeds2.fingerprint";
  @SerializedName(SERIALIZED_NAME_THREEDS2_FINGERPRINT)
  private String threeds2Fingerprint;

  public PaymentCompletionDetails() {
  }

  public PaymentCompletionDetails MD(String MD) {
    this.MD = MD;
    return this;
  }

  /**
   * A payment session identifier returned by the card issuer.
   * @return MD
   */
  @javax.annotation.Nullable
  public String getMD() {
    return MD;
  }

  public void setMD(String MD) {
    this.MD = MD;
  }


  public PaymentCompletionDetails paReq(String paReq) {
    this.paReq = paReq;
    return this;
  }

  /**
   * (3D) Payment Authentication Request data for the card issuer.
   * @return paReq
   */
  @javax.annotation.Nullable
  public String getPaReq() {
    return paReq;
  }

  public void setPaReq(String paReq) {
    this.paReq = paReq;
  }


  public PaymentCompletionDetails paRes(String paRes) {
    this.paRes = paRes;
    return this;
  }

  /**
   * (3D) Payment Authentication Response data by the card issuer.
   * @return paRes
   */
  @javax.annotation.Nullable
  public String getPaRes() {
    return paRes;
  }

  public void setPaRes(String paRes) {
    this.paRes = paRes;
  }


  public PaymentCompletionDetails authorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
    return this;
  }

  /**
   * Get authorizationToken
   * @return authorizationToken
   */
  @javax.annotation.Nullable
  public String getAuthorizationToken() {
    return authorizationToken;
  }

  public void setAuthorizationToken(String authorizationToken) {
    this.authorizationToken = authorizationToken;
  }


  public PaymentCompletionDetails billingToken(String billingToken) {
    this.billingToken = billingToken;
    return this;
  }

  /**
   * PayPal-generated token for recurring payments.
   * @return billingToken
   */
  @javax.annotation.Nullable
  public String getBillingToken() {
    return billingToken;
  }

  public void setBillingToken(String billingToken) {
    this.billingToken = billingToken;
  }


  public PaymentCompletionDetails cupsecureplusSmscode(String cupsecureplusSmscode) {
    this.cupsecureplusSmscode = cupsecureplusSmscode;
    return this;
  }

  /**
   * The SMS verification code collected from the shopper.
   * @return cupsecureplusSmscode
   */
  @javax.annotation.Nullable
  public String getCupsecureplusSmscode() {
    return cupsecureplusSmscode;
  }

  public void setCupsecureplusSmscode(String cupsecureplusSmscode) {
    this.cupsecureplusSmscode = cupsecureplusSmscode;
  }


  public PaymentCompletionDetails facilitatorAccessToken(String facilitatorAccessToken) {
    this.facilitatorAccessToken = facilitatorAccessToken;
    return this;
  }

  /**
   * PayPal-generated third party access token.
   * @return facilitatorAccessToken
   */
  @javax.annotation.Nullable
  public String getFacilitatorAccessToken() {
    return facilitatorAccessToken;
  }

  public void setFacilitatorAccessToken(String facilitatorAccessToken) {
    this.facilitatorAccessToken = facilitatorAccessToken;
  }


  public PaymentCompletionDetails oneTimePasscode(String oneTimePasscode) {
    this.oneTimePasscode = oneTimePasscode;
    return this;
  }

  /**
   * A random number sent to the mobile phone number of the shopper to verify the payment.
   * @return oneTimePasscode
   */
  @javax.annotation.Nullable
  public String getOneTimePasscode() {
    return oneTimePasscode;
  }

  public void setOneTimePasscode(String oneTimePasscode) {
    this.oneTimePasscode = oneTimePasscode;
  }


  public PaymentCompletionDetails orderID(String orderID) {
    this.orderID = orderID;
    return this;
  }

  /**
   * PayPal-assigned ID for the order.
   * @return orderID
   */
  @javax.annotation.Nullable
  public String getOrderID() {
    return orderID;
  }

  public void setOrderID(String orderID) {
    this.orderID = orderID;
  }


  public PaymentCompletionDetails payerID(String payerID) {
    this.payerID = payerID;
    return this;
  }

  /**
   * PayPal-assigned ID for the payer (shopper).
   * @return payerID
   */
  @javax.annotation.Nullable
  public String getPayerID() {
    return payerID;
  }

  public void setPayerID(String payerID) {
    this.payerID = payerID;
  }


  public PaymentCompletionDetails payload(String payload) {
    this.payload = payload;
    return this;
  }

  /**
   * Payload appended to the &#x60;returnURL&#x60; as a result of the redirect.
   * @return payload
   */
  @javax.annotation.Nullable
  public String getPayload() {
    return payload;
  }

  public void setPayload(String payload) {
    this.payload = payload;
  }


  public PaymentCompletionDetails paymentID(String paymentID) {
    this.paymentID = paymentID;
    return this;
  }

  /**
   * PayPal-generated ID for the payment.
   * @return paymentID
   */
  @javax.annotation.Nullable
  public String getPaymentID() {
    return paymentID;
  }

  public void setPaymentID(String paymentID) {
    this.paymentID = paymentID;
  }


  public PaymentCompletionDetails paymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
    return this;
  }

  /**
   * Value passed from the WeChat MiniProgram &#x60;wx.requestPayment&#x60; **complete** callback. Possible values: any value starting with &#x60;requestPayment:&#x60;.
   * @return paymentStatus
   */
  @javax.annotation.Nullable
  public String getPaymentStatus() {
    return paymentStatus;
  }

  public void setPaymentStatus(String paymentStatus) {
    this.paymentStatus = paymentStatus;
  }


  public PaymentCompletionDetails redirectResult(String redirectResult) {
    this.redirectResult = redirectResult;
    return this;
  }

  /**
   * The result of the redirect as appended to the &#x60;returnURL&#x60;.
   * @return redirectResult
   */
  @javax.annotation.Nullable
  public String getRedirectResult() {
    return redirectResult;
  }

  public void setRedirectResult(String redirectResult) {
    this.redirectResult = redirectResult;
  }


  public PaymentCompletionDetails resultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * Value you received from the WeChat Pay SDK.
   * @return resultCode
   */
  @javax.annotation.Nullable
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(String resultCode) {
    this.resultCode = resultCode;
  }


  public PaymentCompletionDetails threeDSResult(String threeDSResult) {
    this.threeDSResult = threeDSResult;
    return this;
  }

  /**
   * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: &#x60;transStatus&#x60;, &#x60;authorisationToken&#x60;.
   * @return threeDSResult
   */
  @javax.annotation.Nullable
  public String getThreeDSResult() {
    return threeDSResult;
  }

  public void setThreeDSResult(String threeDSResult) {
    this.threeDSResult = threeDSResult;
  }


  public PaymentCompletionDetails threeds2ChallengeResult(String threeds2ChallengeResult) {
    this.threeds2ChallengeResult = threeds2ChallengeResult;
    return this;
  }

  /**
   * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;transStatus&#x60;.
   * @return threeds2ChallengeResult
   */
  @javax.annotation.Nullable
  public String getThreeds2ChallengeResult() {
    return threeds2ChallengeResult;
  }

  public void setThreeds2ChallengeResult(String threeds2ChallengeResult) {
    this.threeds2ChallengeResult = threeds2ChallengeResult;
  }


  public PaymentCompletionDetails threeds2Fingerprint(String threeds2Fingerprint) {
    this.threeds2Fingerprint = threeds2Fingerprint;
    return this;
  }

  /**
   * Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: &#x60;threeDSCompInd&#x60;.
   * @return threeds2Fingerprint
   */
  @javax.annotation.Nullable
  public String getThreeds2Fingerprint() {
    return threeds2Fingerprint;
  }

  public void setThreeds2Fingerprint(String threeds2Fingerprint) {
    this.threeds2Fingerprint = threeds2Fingerprint;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentCompletionDetails paymentCompletionDetails = (PaymentCompletionDetails) o;
    return Objects.equals(this.MD, paymentCompletionDetails.MD) &&
        Objects.equals(this.paReq, paymentCompletionDetails.paReq) &&
        Objects.equals(this.paRes, paymentCompletionDetails.paRes) &&
        Objects.equals(this.authorizationToken, paymentCompletionDetails.authorizationToken) &&
        Objects.equals(this.billingToken, paymentCompletionDetails.billingToken) &&
        Objects.equals(this.cupsecureplusSmscode, paymentCompletionDetails.cupsecureplusSmscode) &&
        Objects.equals(this.facilitatorAccessToken, paymentCompletionDetails.facilitatorAccessToken) &&
        Objects.equals(this.oneTimePasscode, paymentCompletionDetails.oneTimePasscode) &&
        Objects.equals(this.orderID, paymentCompletionDetails.orderID) &&
        Objects.equals(this.payerID, paymentCompletionDetails.payerID) &&
        Objects.equals(this.payload, paymentCompletionDetails.payload) &&
        Objects.equals(this.paymentID, paymentCompletionDetails.paymentID) &&
        Objects.equals(this.paymentStatus, paymentCompletionDetails.paymentStatus) &&
        Objects.equals(this.redirectResult, paymentCompletionDetails.redirectResult) &&
        Objects.equals(this.resultCode, paymentCompletionDetails.resultCode) &&
        Objects.equals(this.threeDSResult, paymentCompletionDetails.threeDSResult) &&
        Objects.equals(this.threeds2ChallengeResult, paymentCompletionDetails.threeds2ChallengeResult) &&
        Objects.equals(this.threeds2Fingerprint, paymentCompletionDetails.threeds2Fingerprint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(MD, paReq, paRes, authorizationToken, billingToken, cupsecureplusSmscode, facilitatorAccessToken, oneTimePasscode, orderID, payerID, payload, paymentID, paymentStatus, redirectResult, resultCode, threeDSResult, threeds2ChallengeResult, threeds2Fingerprint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentCompletionDetails {\n");
    sb.append("    MD: ").append(toIndentedString(MD)).append("\n");
    sb.append("    paReq: ").append(toIndentedString(paReq)).append("\n");
    sb.append("    paRes: ").append(toIndentedString(paRes)).append("\n");
    sb.append("    authorizationToken: ").append(toIndentedString(authorizationToken)).append("\n");
    sb.append("    billingToken: ").append(toIndentedString(billingToken)).append("\n");
    sb.append("    cupsecureplusSmscode: ").append(toIndentedString(cupsecureplusSmscode)).append("\n");
    sb.append("    facilitatorAccessToken: ").append(toIndentedString(facilitatorAccessToken)).append("\n");
    sb.append("    oneTimePasscode: ").append(toIndentedString(oneTimePasscode)).append("\n");
    sb.append("    orderID: ").append(toIndentedString(orderID)).append("\n");
    sb.append("    payerID: ").append(toIndentedString(payerID)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    paymentID: ").append(toIndentedString(paymentID)).append("\n");
    sb.append("    paymentStatus: ").append(toIndentedString(paymentStatus)).append("\n");
    sb.append("    redirectResult: ").append(toIndentedString(redirectResult)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    threeDSResult: ").append(toIndentedString(threeDSResult)).append("\n");
    sb.append("    threeds2ChallengeResult: ").append(toIndentedString(threeds2ChallengeResult)).append("\n");
    sb.append("    threeds2Fingerprint: ").append(toIndentedString(threeds2Fingerprint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MD");
    openapiFields.add("PaReq");
    openapiFields.add("PaRes");
    openapiFields.add("authorization_token");
    openapiFields.add("billingToken");
    openapiFields.add("cupsecureplus.smscode");
    openapiFields.add("facilitatorAccessToken");
    openapiFields.add("oneTimePasscode");
    openapiFields.add("orderID");
    openapiFields.add("payerID");
    openapiFields.add("payload");
    openapiFields.add("paymentID");
    openapiFields.add("paymentStatus");
    openapiFields.add("redirectResult");
    openapiFields.add("resultCode");
    openapiFields.add("threeDSResult");
    openapiFields.add("threeds2.challengeResult");
    openapiFields.add("threeds2.fingerprint");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentCompletionDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentCompletionDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentCompletionDetails is not found in the empty JSON string", PaymentCompletionDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentCompletionDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentCompletionDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("MD") != null && !jsonObj.get("MD").isJsonNull()) && !jsonObj.get("MD").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MD` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MD").toString()));
      }
      if ((jsonObj.get("PaReq") != null && !jsonObj.get("PaReq").isJsonNull()) && !jsonObj.get("PaReq").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaReq` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaReq").toString()));
      }
      if ((jsonObj.get("PaRes") != null && !jsonObj.get("PaRes").isJsonNull()) && !jsonObj.get("PaRes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaRes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaRes").toString()));
      }
      if ((jsonObj.get("authorization_token") != null && !jsonObj.get("authorization_token").isJsonNull()) && !jsonObj.get("authorization_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorization_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorization_token").toString()));
      }
      if ((jsonObj.get("billingToken") != null && !jsonObj.get("billingToken").isJsonNull()) && !jsonObj.get("billingToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingToken").toString()));
      }
      if ((jsonObj.get("cupsecureplus.smscode") != null && !jsonObj.get("cupsecureplus.smscode").isJsonNull()) && !jsonObj.get("cupsecureplus.smscode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cupsecureplus.smscode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cupsecureplus.smscode").toString()));
      }
      if ((jsonObj.get("facilitatorAccessToken") != null && !jsonObj.get("facilitatorAccessToken").isJsonNull()) && !jsonObj.get("facilitatorAccessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `facilitatorAccessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("facilitatorAccessToken").toString()));
      }
      if ((jsonObj.get("oneTimePasscode") != null && !jsonObj.get("oneTimePasscode").isJsonNull()) && !jsonObj.get("oneTimePasscode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oneTimePasscode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oneTimePasscode").toString()));
      }
      if ((jsonObj.get("orderID") != null && !jsonObj.get("orderID").isJsonNull()) && !jsonObj.get("orderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderID").toString()));
      }
      if ((jsonObj.get("payerID") != null && !jsonObj.get("payerID").isJsonNull()) && !jsonObj.get("payerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payerID").toString()));
      }
      if ((jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) && !jsonObj.get("payload").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload").toString()));
      }
      if ((jsonObj.get("paymentID") != null && !jsonObj.get("paymentID").isJsonNull()) && !jsonObj.get("paymentID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentID").toString()));
      }
      if ((jsonObj.get("paymentStatus") != null && !jsonObj.get("paymentStatus").isJsonNull()) && !jsonObj.get("paymentStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentStatus").toString()));
      }
      if ((jsonObj.get("redirectResult") != null && !jsonObj.get("redirectResult").isJsonNull()) && !jsonObj.get("redirectResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectResult").toString()));
      }
      if ((jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) && !jsonObj.get("resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCode").toString()));
      }
      if ((jsonObj.get("threeDSResult") != null && !jsonObj.get("threeDSResult").isJsonNull()) && !jsonObj.get("threeDSResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeDSResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeDSResult").toString()));
      }
      if ((jsonObj.get("threeds2.challengeResult") != null && !jsonObj.get("threeds2.challengeResult").isJsonNull()) && !jsonObj.get("threeds2.challengeResult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeds2.challengeResult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeds2.challengeResult").toString()));
      }
      if ((jsonObj.get("threeds2.fingerprint") != null && !jsonObj.get("threeds2.fingerprint").isJsonNull()) && !jsonObj.get("threeds2.fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threeds2.fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threeds2.fingerprint").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentCompletionDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentCompletionDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentCompletionDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentCompletionDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentCompletionDetails>() {
           @Override
           public void write(JsonWriter out, PaymentCompletionDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentCompletionDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentCompletionDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentCompletionDetails
   * @throws IOException if the JSON string is invalid with respect to PaymentCompletionDetails
   */
  public static PaymentCompletionDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentCompletionDetails.class);
  }

  /**
   * Convert an instance of PaymentCompletionDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

