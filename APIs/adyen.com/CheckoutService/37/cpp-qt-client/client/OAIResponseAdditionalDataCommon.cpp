/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v37/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v37/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=37) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 37
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAdditionalDataCommon.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAdditionalDataCommon::OAIResponseAdditionalDataCommon(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAdditionalDataCommon::OAIResponseAdditionalDataCommon() {
    this->initializeModel();
}

OAIResponseAdditionalDataCommon::~OAIResponseAdditionalDataCommon() {}

void OAIResponseAdditionalDataCommon::initializeModel() {

    m_acquirer_account_code_isSet = false;
    m_acquirer_account_code_isValid = false;

    m_acquirer_code_isSet = false;
    m_acquirer_code_isValid = false;

    m_acquirer_reference_isSet = false;
    m_acquirer_reference_isValid = false;

    m_alias_isSet = false;
    m_alias_isValid = false;

    m_alias_type_isSet = false;
    m_alias_type_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_authorisation_mid_isSet = false;
    m_authorisation_mid_isValid = false;

    m_authorised_amount_currency_isSet = false;
    m_authorised_amount_currency_isValid = false;

    m_authorised_amount_value_isSet = false;
    m_authorised_amount_value_isValid = false;

    m_avs_result_isSet = false;
    m_avs_result_isValid = false;

    m_avs_result_raw_isSet = false;
    m_avs_result_raw_isValid = false;

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_co_branded_with_isSet = false;
    m_co_branded_with_isValid = false;

    m_cvc_result_isSet = false;
    m_cvc_result_isValid = false;

    m_cvc_result_raw_isSet = false;
    m_cvc_result_raw_isValid = false;

    m_ds_trans_id_isSet = false;
    m_ds_trans_id_isValid = false;

    m_eci_isSet = false;
    m_eci_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_extra_costs_currency_isSet = false;
    m_extra_costs_currency_isValid = false;

    m_extra_costs_value_isSet = false;
    m_extra_costs_value_isValid = false;

    m_fraud_check__item_nr__fraud_checkname_isSet = false;
    m_fraud_check__item_nr__fraud_checkname_isValid = false;

    m_fraud_manual_review_isSet = false;
    m_fraud_manual_review_isValid = false;

    m_fraud_result_type_isSet = false;
    m_fraud_result_type_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_funds_availability_isSet = false;
    m_funds_availability_isValid = false;

    m_inferred_refusal_reason_isSet = false;
    m_inferred_refusal_reason_isValid = false;

    m_is_card_commercial_isSet = false;
    m_is_card_commercial_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_liability_shift_isSet = false;
    m_liability_shift_isValid = false;

    m_mc_bank_net_reference_number_isSet = false;
    m_mc_bank_net_reference_number_isValid = false;

    m_merchant_advice_code_isSet = false;
    m_merchant_advice_code_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_network_tx_reference_isSet = false;
    m_network_tx_reference_isValid = false;

    m_non_scheme_transaction_limit_isSet = false;
    m_non_scheme_transaction_limit_isValid = false;

    m_non_scheme_transaction_limit_ccy_isSet = false;
    m_non_scheme_transaction_limit_ccy_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_payment_account_reference_isSet = false;
    m_payment_account_reference_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payment_method_variant_isSet = false;
    m_payment_method_variant_isValid = false;

    m_payout_eligible_isSet = false;
    m_payout_eligible_isValid = false;

    m_realtime_account_updater_status_isSet = false;
    m_realtime_account_updater_status_isValid = false;

    m_receipt_free_text_isSet = false;
    m_receipt_free_text_isValid = false;

    m_recurring_first_psp_reference_isSet = false;
    m_recurring_first_psp_reference_isValid = false;

    m_recurring_recurring_detail_reference_isSet = false;
    m_recurring_recurring_detail_reference_isValid = false;

    m_referred_isSet = false;
    m_referred_isValid = false;

    m_refusal_reason_raw_isSet = false;
    m_refusal_reason_raw_isValid = false;

    m_request_amount_isSet = false;
    m_request_amount_isValid = false;

    m_request_currency_code_isSet = false;
    m_request_currency_code_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_terminal_id_isSet = false;
    m_terminal_id_isValid = false;

    m_three_d_authenticated_isSet = false;
    m_three_d_authenticated_isValid = false;

    m_three_d_authenticated_response_isSet = false;
    m_three_d_authenticated_response_isValid = false;

    m_three_d_offered_isSet = false;
    m_three_d_offered_isValid = false;

    m_three_d_offered_response_isSet = false;
    m_three_d_offered_response_isValid = false;

    m_three_ds_version_isSet = false;
    m_three_ds_version_isValid = false;

    m_visa_transaction_id_isSet = false;
    m_visa_transaction_id_isValid = false;

    m_xid_isSet = false;
    m_xid_isValid = false;
}

void OAIResponseAdditionalDataCommon::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAdditionalDataCommon::fromJsonObject(QJsonObject json) {

    m_acquirer_account_code_isValid = ::OpenAPI::fromJsonValue(m_acquirer_account_code, json[QString("acquirerAccountCode")]);
    m_acquirer_account_code_isSet = !json[QString("acquirerAccountCode")].isNull() && m_acquirer_account_code_isValid;

    m_acquirer_code_isValid = ::OpenAPI::fromJsonValue(m_acquirer_code, json[QString("acquirerCode")]);
    m_acquirer_code_isSet = !json[QString("acquirerCode")].isNull() && m_acquirer_code_isValid;

    m_acquirer_reference_isValid = ::OpenAPI::fromJsonValue(m_acquirer_reference, json[QString("acquirerReference")]);
    m_acquirer_reference_isSet = !json[QString("acquirerReference")].isNull() && m_acquirer_reference_isValid;

    m_alias_isValid = ::OpenAPI::fromJsonValue(m_alias, json[QString("alias")]);
    m_alias_isSet = !json[QString("alias")].isNull() && m_alias_isValid;

    m_alias_type_isValid = ::OpenAPI::fromJsonValue(m_alias_type, json[QString("aliasType")]);
    m_alias_type_isSet = !json[QString("aliasType")].isNull() && m_alias_type_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_authorisation_mid_isValid = ::OpenAPI::fromJsonValue(m_authorisation_mid, json[QString("authorisationMid")]);
    m_authorisation_mid_isSet = !json[QString("authorisationMid")].isNull() && m_authorisation_mid_isValid;

    m_authorised_amount_currency_isValid = ::OpenAPI::fromJsonValue(m_authorised_amount_currency, json[QString("authorisedAmountCurrency")]);
    m_authorised_amount_currency_isSet = !json[QString("authorisedAmountCurrency")].isNull() && m_authorised_amount_currency_isValid;

    m_authorised_amount_value_isValid = ::OpenAPI::fromJsonValue(m_authorised_amount_value, json[QString("authorisedAmountValue")]);
    m_authorised_amount_value_isSet = !json[QString("authorisedAmountValue")].isNull() && m_authorised_amount_value_isValid;

    m_avs_result_isValid = ::OpenAPI::fromJsonValue(m_avs_result, json[QString("avsResult")]);
    m_avs_result_isSet = !json[QString("avsResult")].isNull() && m_avs_result_isValid;

    m_avs_result_raw_isValid = ::OpenAPI::fromJsonValue(m_avs_result_raw, json[QString("avsResultRaw")]);
    m_avs_result_raw_isSet = !json[QString("avsResultRaw")].isNull() && m_avs_result_raw_isValid;

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_co_branded_with_isValid = ::OpenAPI::fromJsonValue(m_co_branded_with, json[QString("coBrandedWith")]);
    m_co_branded_with_isSet = !json[QString("coBrandedWith")].isNull() && m_co_branded_with_isValid;

    m_cvc_result_isValid = ::OpenAPI::fromJsonValue(m_cvc_result, json[QString("cvcResult")]);
    m_cvc_result_isSet = !json[QString("cvcResult")].isNull() && m_cvc_result_isValid;

    m_cvc_result_raw_isValid = ::OpenAPI::fromJsonValue(m_cvc_result_raw, json[QString("cvcResultRaw")]);
    m_cvc_result_raw_isSet = !json[QString("cvcResultRaw")].isNull() && m_cvc_result_raw_isValid;

    m_ds_trans_id_isValid = ::OpenAPI::fromJsonValue(m_ds_trans_id, json[QString("dsTransID")]);
    m_ds_trans_id_isSet = !json[QString("dsTransID")].isNull() && m_ds_trans_id_isValid;

    m_eci_isValid = ::OpenAPI::fromJsonValue(m_eci, json[QString("eci")]);
    m_eci_isSet = !json[QString("eci")].isNull() && m_eci_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("expiryDate")]);
    m_expiry_date_isSet = !json[QString("expiryDate")].isNull() && m_expiry_date_isValid;

    m_extra_costs_currency_isValid = ::OpenAPI::fromJsonValue(m_extra_costs_currency, json[QString("extraCostsCurrency")]);
    m_extra_costs_currency_isSet = !json[QString("extraCostsCurrency")].isNull() && m_extra_costs_currency_isValid;

    m_extra_costs_value_isValid = ::OpenAPI::fromJsonValue(m_extra_costs_value, json[QString("extraCostsValue")]);
    m_extra_costs_value_isSet = !json[QString("extraCostsValue")].isNull() && m_extra_costs_value_isValid;

    m_fraud_check__item_nr__fraud_checkname_isValid = ::OpenAPI::fromJsonValue(m_fraud_check__item_nr__fraud_checkname, json[QString("fraudCheck-[itemNr]-[FraudCheckname]")]);
    m_fraud_check__item_nr__fraud_checkname_isSet = !json[QString("fraudCheck-[itemNr]-[FraudCheckname]")].isNull() && m_fraud_check__item_nr__fraud_checkname_isValid;

    m_fraud_manual_review_isValid = ::OpenAPI::fromJsonValue(m_fraud_manual_review, json[QString("fraudManualReview")]);
    m_fraud_manual_review_isSet = !json[QString("fraudManualReview")].isNull() && m_fraud_manual_review_isValid;

    m_fraud_result_type_isValid = ::OpenAPI::fromJsonValue(m_fraud_result_type, json[QString("fraudResultType")]);
    m_fraud_result_type_isSet = !json[QString("fraudResultType")].isNull() && m_fraud_result_type_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_funds_availability_isValid = ::OpenAPI::fromJsonValue(m_funds_availability, json[QString("fundsAvailability")]);
    m_funds_availability_isSet = !json[QString("fundsAvailability")].isNull() && m_funds_availability_isValid;

    m_inferred_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_inferred_refusal_reason, json[QString("inferredRefusalReason")]);
    m_inferred_refusal_reason_isSet = !json[QString("inferredRefusalReason")].isNull() && m_inferred_refusal_reason_isValid;

    m_is_card_commercial_isValid = ::OpenAPI::fromJsonValue(m_is_card_commercial, json[QString("isCardCommercial")]);
    m_is_card_commercial_isSet = !json[QString("isCardCommercial")].isNull() && m_is_card_commercial_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuerCountry")]);
    m_issuer_country_isSet = !json[QString("issuerCountry")].isNull() && m_issuer_country_isValid;

    m_liability_shift_isValid = ::OpenAPI::fromJsonValue(m_liability_shift, json[QString("liabilityShift")]);
    m_liability_shift_isSet = !json[QString("liabilityShift")].isNull() && m_liability_shift_isValid;

    m_mc_bank_net_reference_number_isValid = ::OpenAPI::fromJsonValue(m_mc_bank_net_reference_number, json[QString("mcBankNetReferenceNumber")]);
    m_mc_bank_net_reference_number_isSet = !json[QString("mcBankNetReferenceNumber")].isNull() && m_mc_bank_net_reference_number_isValid;

    m_merchant_advice_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_advice_code, json[QString("merchantAdviceCode")]);
    m_merchant_advice_code_isSet = !json[QString("merchantAdviceCode")].isNull() && m_merchant_advice_code_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_network_tx_reference_isValid = ::OpenAPI::fromJsonValue(m_network_tx_reference, json[QString("networkTxReference")]);
    m_network_tx_reference_isSet = !json[QString("networkTxReference")].isNull() && m_network_tx_reference_isValid;

    m_non_scheme_transaction_limit_isValid = ::OpenAPI::fromJsonValue(m_non_scheme_transaction_limit, json[QString("nonScheme.transactionLimit")]);
    m_non_scheme_transaction_limit_isSet = !json[QString("nonScheme.transactionLimit")].isNull() && m_non_scheme_transaction_limit_isValid;

    m_non_scheme_transaction_limit_ccy_isValid = ::OpenAPI::fromJsonValue(m_non_scheme_transaction_limit_ccy, json[QString("nonScheme.transactionLimitCcy")]);
    m_non_scheme_transaction_limit_ccy_isSet = !json[QString("nonScheme.transactionLimitCcy")].isNull() && m_non_scheme_transaction_limit_ccy_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_payment_account_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_account_reference, json[QString("paymentAccountReference")]);
    m_payment_account_reference_isSet = !json[QString("paymentAccountReference")].isNull() && m_payment_account_reference_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payment_method_variant_isValid = ::OpenAPI::fromJsonValue(m_payment_method_variant, json[QString("paymentMethodVariant")]);
    m_payment_method_variant_isSet = !json[QString("paymentMethodVariant")].isNull() && m_payment_method_variant_isValid;

    m_payout_eligible_isValid = ::OpenAPI::fromJsonValue(m_payout_eligible, json[QString("payoutEligible")]);
    m_payout_eligible_isSet = !json[QString("payoutEligible")].isNull() && m_payout_eligible_isValid;

    m_realtime_account_updater_status_isValid = ::OpenAPI::fromJsonValue(m_realtime_account_updater_status, json[QString("realtimeAccountUpdaterStatus")]);
    m_realtime_account_updater_status_isSet = !json[QString("realtimeAccountUpdaterStatus")].isNull() && m_realtime_account_updater_status_isValid;

    m_receipt_free_text_isValid = ::OpenAPI::fromJsonValue(m_receipt_free_text, json[QString("receiptFreeText")]);
    m_receipt_free_text_isSet = !json[QString("receiptFreeText")].isNull() && m_receipt_free_text_isValid;

    m_recurring_first_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_first_psp_reference, json[QString("recurring.firstPspReference")]);
    m_recurring_first_psp_reference_isSet = !json[QString("recurring.firstPspReference")].isNull() && m_recurring_first_psp_reference_isValid;

    m_recurring_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_recurring_detail_reference, json[QString("recurring.recurringDetailReference")]);
    m_recurring_recurring_detail_reference_isSet = !json[QString("recurring.recurringDetailReference")].isNull() && m_recurring_recurring_detail_reference_isValid;

    m_referred_isValid = ::OpenAPI::fromJsonValue(m_referred, json[QString("referred")]);
    m_referred_isSet = !json[QString("referred")].isNull() && m_referred_isValid;

    m_refusal_reason_raw_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason_raw, json[QString("refusalReasonRaw")]);
    m_refusal_reason_raw_isSet = !json[QString("refusalReasonRaw")].isNull() && m_refusal_reason_raw_isValid;

    m_request_amount_isValid = ::OpenAPI::fromJsonValue(m_request_amount, json[QString("requestAmount")]);
    m_request_amount_isSet = !json[QString("requestAmount")].isNull() && m_request_amount_isValid;

    m_request_currency_code_isValid = ::OpenAPI::fromJsonValue(m_request_currency_code, json[QString("requestCurrencyCode")]);
    m_request_currency_code_isSet = !json[QString("requestCurrencyCode")].isNull() && m_request_currency_code_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_terminal_id, json[QString("terminalId")]);
    m_terminal_id_isSet = !json[QString("terminalId")].isNull() && m_terminal_id_isValid;

    m_three_d_authenticated_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated, json[QString("threeDAuthenticated")]);
    m_three_d_authenticated_isSet = !json[QString("threeDAuthenticated")].isNull() && m_three_d_authenticated_isValid;

    m_three_d_authenticated_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated_response, json[QString("threeDAuthenticatedResponse")]);
    m_three_d_authenticated_response_isSet = !json[QString("threeDAuthenticatedResponse")].isNull() && m_three_d_authenticated_response_isValid;

    m_three_d_offered_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered, json[QString("threeDOffered")]);
    m_three_d_offered_isSet = !json[QString("threeDOffered")].isNull() && m_three_d_offered_isValid;

    m_three_d_offered_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered_response, json[QString("threeDOfferedResponse")]);
    m_three_d_offered_response_isSet = !json[QString("threeDOfferedResponse")].isNull() && m_three_d_offered_response_isValid;

    m_three_ds_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds_version, json[QString("threeDSVersion")]);
    m_three_ds_version_isSet = !json[QString("threeDSVersion")].isNull() && m_three_ds_version_isValid;

    m_visa_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_visa_transaction_id, json[QString("visaTransactionId")]);
    m_visa_transaction_id_isSet = !json[QString("visaTransactionId")].isNull() && m_visa_transaction_id_isValid;

    m_xid_isValid = ::OpenAPI::fromJsonValue(m_xid, json[QString("xid")]);
    m_xid_isSet = !json[QString("xid")].isNull() && m_xid_isValid;
}

QString OAIResponseAdditionalDataCommon::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAdditionalDataCommon::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_account_code_isSet) {
        obj.insert(QString("acquirerAccountCode"), ::OpenAPI::toJsonValue(m_acquirer_account_code));
    }
    if (m_acquirer_code_isSet) {
        obj.insert(QString("acquirerCode"), ::OpenAPI::toJsonValue(m_acquirer_code));
    }
    if (m_acquirer_reference_isSet) {
        obj.insert(QString("acquirerReference"), ::OpenAPI::toJsonValue(m_acquirer_reference));
    }
    if (m_alias_isSet) {
        obj.insert(QString("alias"), ::OpenAPI::toJsonValue(m_alias));
    }
    if (m_alias_type_isSet) {
        obj.insert(QString("aliasType"), ::OpenAPI::toJsonValue(m_alias_type));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_authorisation_mid_isSet) {
        obj.insert(QString("authorisationMid"), ::OpenAPI::toJsonValue(m_authorisation_mid));
    }
    if (m_authorised_amount_currency_isSet) {
        obj.insert(QString("authorisedAmountCurrency"), ::OpenAPI::toJsonValue(m_authorised_amount_currency));
    }
    if (m_authorised_amount_value_isSet) {
        obj.insert(QString("authorisedAmountValue"), ::OpenAPI::toJsonValue(m_authorised_amount_value));
    }
    if (m_avs_result_isSet) {
        obj.insert(QString("avsResult"), ::OpenAPI::toJsonValue(m_avs_result));
    }
    if (m_avs_result_raw_isSet) {
        obj.insert(QString("avsResultRaw"), ::OpenAPI::toJsonValue(m_avs_result_raw));
    }
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_co_branded_with_isSet) {
        obj.insert(QString("coBrandedWith"), ::OpenAPI::toJsonValue(m_co_branded_with));
    }
    if (m_cvc_result_isSet) {
        obj.insert(QString("cvcResult"), ::OpenAPI::toJsonValue(m_cvc_result));
    }
    if (m_cvc_result_raw_isSet) {
        obj.insert(QString("cvcResultRaw"), ::OpenAPI::toJsonValue(m_cvc_result_raw));
    }
    if (m_ds_trans_id_isSet) {
        obj.insert(QString("dsTransID"), ::OpenAPI::toJsonValue(m_ds_trans_id));
    }
    if (m_eci_isSet) {
        obj.insert(QString("eci"), ::OpenAPI::toJsonValue(m_eci));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("expiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_extra_costs_currency_isSet) {
        obj.insert(QString("extraCostsCurrency"), ::OpenAPI::toJsonValue(m_extra_costs_currency));
    }
    if (m_extra_costs_value_isSet) {
        obj.insert(QString("extraCostsValue"), ::OpenAPI::toJsonValue(m_extra_costs_value));
    }
    if (m_fraud_check__item_nr__fraud_checkname_isSet) {
        obj.insert(QString("fraudCheck-[itemNr]-[FraudCheckname]"), ::OpenAPI::toJsonValue(m_fraud_check__item_nr__fraud_checkname));
    }
    if (m_fraud_manual_review_isSet) {
        obj.insert(QString("fraudManualReview"), ::OpenAPI::toJsonValue(m_fraud_manual_review));
    }
    if (m_fraud_result_type_isSet) {
        obj.insert(QString("fraudResultType"), ::OpenAPI::toJsonValue(m_fraud_result_type));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_funds_availability_isSet) {
        obj.insert(QString("fundsAvailability"), ::OpenAPI::toJsonValue(m_funds_availability));
    }
    if (m_inferred_refusal_reason_isSet) {
        obj.insert(QString("inferredRefusalReason"), ::OpenAPI::toJsonValue(m_inferred_refusal_reason));
    }
    if (m_is_card_commercial_isSet) {
        obj.insert(QString("isCardCommercial"), ::OpenAPI::toJsonValue(m_is_card_commercial));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuerCountry"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_liability_shift_isSet) {
        obj.insert(QString("liabilityShift"), ::OpenAPI::toJsonValue(m_liability_shift));
    }
    if (m_mc_bank_net_reference_number_isSet) {
        obj.insert(QString("mcBankNetReferenceNumber"), ::OpenAPI::toJsonValue(m_mc_bank_net_reference_number));
    }
    if (m_merchant_advice_code_isSet) {
        obj.insert(QString("merchantAdviceCode"), ::OpenAPI::toJsonValue(m_merchant_advice_code));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_network_tx_reference_isSet) {
        obj.insert(QString("networkTxReference"), ::OpenAPI::toJsonValue(m_network_tx_reference));
    }
    if (m_non_scheme_transaction_limit_isSet) {
        obj.insert(QString("nonScheme.transactionLimit"), ::OpenAPI::toJsonValue(m_non_scheme_transaction_limit));
    }
    if (m_non_scheme_transaction_limit_ccy_isSet) {
        obj.insert(QString("nonScheme.transactionLimitCcy"), ::OpenAPI::toJsonValue(m_non_scheme_transaction_limit_ccy));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_payment_account_reference_isSet) {
        obj.insert(QString("paymentAccountReference"), ::OpenAPI::toJsonValue(m_payment_account_reference));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payment_method_variant_isSet) {
        obj.insert(QString("paymentMethodVariant"), ::OpenAPI::toJsonValue(m_payment_method_variant));
    }
    if (m_payout_eligible_isSet) {
        obj.insert(QString("payoutEligible"), ::OpenAPI::toJsonValue(m_payout_eligible));
    }
    if (m_realtime_account_updater_status_isSet) {
        obj.insert(QString("realtimeAccountUpdaterStatus"), ::OpenAPI::toJsonValue(m_realtime_account_updater_status));
    }
    if (m_receipt_free_text_isSet) {
        obj.insert(QString("receiptFreeText"), ::OpenAPI::toJsonValue(m_receipt_free_text));
    }
    if (m_recurring_first_psp_reference_isSet) {
        obj.insert(QString("recurring.firstPspReference"), ::OpenAPI::toJsonValue(m_recurring_first_psp_reference));
    }
    if (m_recurring_recurring_detail_reference_isSet) {
        obj.insert(QString("recurring.recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_recurring_detail_reference));
    }
    if (m_referred_isSet) {
        obj.insert(QString("referred"), ::OpenAPI::toJsonValue(m_referred));
    }
    if (m_refusal_reason_raw_isSet) {
        obj.insert(QString("refusalReasonRaw"), ::OpenAPI::toJsonValue(m_refusal_reason_raw));
    }
    if (m_request_amount_isSet) {
        obj.insert(QString("requestAmount"), ::OpenAPI::toJsonValue(m_request_amount));
    }
    if (m_request_currency_code_isSet) {
        obj.insert(QString("requestCurrencyCode"), ::OpenAPI::toJsonValue(m_request_currency_code));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_terminal_id_isSet) {
        obj.insert(QString("terminalId"), ::OpenAPI::toJsonValue(m_terminal_id));
    }
    if (m_three_d_authenticated_isSet) {
        obj.insert(QString("threeDAuthenticated"), ::OpenAPI::toJsonValue(m_three_d_authenticated));
    }
    if (m_three_d_authenticated_response_isSet) {
        obj.insert(QString("threeDAuthenticatedResponse"), ::OpenAPI::toJsonValue(m_three_d_authenticated_response));
    }
    if (m_three_d_offered_isSet) {
        obj.insert(QString("threeDOffered"), ::OpenAPI::toJsonValue(m_three_d_offered));
    }
    if (m_three_d_offered_response_isSet) {
        obj.insert(QString("threeDOfferedResponse"), ::OpenAPI::toJsonValue(m_three_d_offered_response));
    }
    if (m_three_ds_version_isSet) {
        obj.insert(QString("threeDSVersion"), ::OpenAPI::toJsonValue(m_three_ds_version));
    }
    if (m_visa_transaction_id_isSet) {
        obj.insert(QString("visaTransactionId"), ::OpenAPI::toJsonValue(m_visa_transaction_id));
    }
    if (m_xid_isSet) {
        obj.insert(QString("xid"), ::OpenAPI::toJsonValue(m_xid));
    }
    return obj;
}

QString OAIResponseAdditionalDataCommon::getAcquirerAccountCode() const {
    return m_acquirer_account_code;
}
void OAIResponseAdditionalDataCommon::setAcquirerAccountCode(const QString &acquirer_account_code) {
    m_acquirer_account_code = acquirer_account_code;
    m_acquirer_account_code_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_account_code_Set() const{
    return m_acquirer_account_code_isSet;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_account_code_Valid() const{
    return m_acquirer_account_code_isValid;
}

QString OAIResponseAdditionalDataCommon::getAcquirerCode() const {
    return m_acquirer_code;
}
void OAIResponseAdditionalDataCommon::setAcquirerCode(const QString &acquirer_code) {
    m_acquirer_code = acquirer_code;
    m_acquirer_code_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_code_Set() const{
    return m_acquirer_code_isSet;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_code_Valid() const{
    return m_acquirer_code_isValid;
}

QString OAIResponseAdditionalDataCommon::getAcquirerReference() const {
    return m_acquirer_reference;
}
void OAIResponseAdditionalDataCommon::setAcquirerReference(const QString &acquirer_reference) {
    m_acquirer_reference = acquirer_reference;
    m_acquirer_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_reference_Set() const{
    return m_acquirer_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_acquirer_reference_Valid() const{
    return m_acquirer_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getAlias() const {
    return m_alias;
}
void OAIResponseAdditionalDataCommon::setAlias(const QString &alias) {
    m_alias = alias;
    m_alias_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_alias_Set() const{
    return m_alias_isSet;
}

bool OAIResponseAdditionalDataCommon::is_alias_Valid() const{
    return m_alias_isValid;
}

QString OAIResponseAdditionalDataCommon::getAliasType() const {
    return m_alias_type;
}
void OAIResponseAdditionalDataCommon::setAliasType(const QString &alias_type) {
    m_alias_type = alias_type;
    m_alias_type_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_alias_type_Set() const{
    return m_alias_type_isSet;
}

bool OAIResponseAdditionalDataCommon::is_alias_type_Valid() const{
    return m_alias_type_isValid;
}

QString OAIResponseAdditionalDataCommon::getAuthCode() const {
    return m_auth_code;
}
void OAIResponseAdditionalDataCommon::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIResponseAdditionalDataCommon::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

QString OAIResponseAdditionalDataCommon::getAuthorisationMid() const {
    return m_authorisation_mid;
}
void OAIResponseAdditionalDataCommon::setAuthorisationMid(const QString &authorisation_mid) {
    m_authorisation_mid = authorisation_mid;
    m_authorisation_mid_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_authorisation_mid_Set() const{
    return m_authorisation_mid_isSet;
}

bool OAIResponseAdditionalDataCommon::is_authorisation_mid_Valid() const{
    return m_authorisation_mid_isValid;
}

QString OAIResponseAdditionalDataCommon::getAuthorisedAmountCurrency() const {
    return m_authorised_amount_currency;
}
void OAIResponseAdditionalDataCommon::setAuthorisedAmountCurrency(const QString &authorised_amount_currency) {
    m_authorised_amount_currency = authorised_amount_currency;
    m_authorised_amount_currency_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_authorised_amount_currency_Set() const{
    return m_authorised_amount_currency_isSet;
}

bool OAIResponseAdditionalDataCommon::is_authorised_amount_currency_Valid() const{
    return m_authorised_amount_currency_isValid;
}

QString OAIResponseAdditionalDataCommon::getAuthorisedAmountValue() const {
    return m_authorised_amount_value;
}
void OAIResponseAdditionalDataCommon::setAuthorisedAmountValue(const QString &authorised_amount_value) {
    m_authorised_amount_value = authorised_amount_value;
    m_authorised_amount_value_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_authorised_amount_value_Set() const{
    return m_authorised_amount_value_isSet;
}

bool OAIResponseAdditionalDataCommon::is_authorised_amount_value_Valid() const{
    return m_authorised_amount_value_isValid;
}

QString OAIResponseAdditionalDataCommon::getAvsResult() const {
    return m_avs_result;
}
void OAIResponseAdditionalDataCommon::setAvsResult(const QString &avs_result) {
    m_avs_result = avs_result;
    m_avs_result_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_avs_result_Set() const{
    return m_avs_result_isSet;
}

bool OAIResponseAdditionalDataCommon::is_avs_result_Valid() const{
    return m_avs_result_isValid;
}

QString OAIResponseAdditionalDataCommon::getAvsResultRaw() const {
    return m_avs_result_raw;
}
void OAIResponseAdditionalDataCommon::setAvsResultRaw(const QString &avs_result_raw) {
    m_avs_result_raw = avs_result_raw;
    m_avs_result_raw_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_avs_result_raw_Set() const{
    return m_avs_result_raw_isSet;
}

bool OAIResponseAdditionalDataCommon::is_avs_result_raw_Valid() const{
    return m_avs_result_raw_isValid;
}

QString OAIResponseAdditionalDataCommon::getBic() const {
    return m_bic;
}
void OAIResponseAdditionalDataCommon::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIResponseAdditionalDataCommon::is_bic_Valid() const{
    return m_bic_isValid;
}

QString OAIResponseAdditionalDataCommon::getCoBrandedWith() const {
    return m_co_branded_with;
}
void OAIResponseAdditionalDataCommon::setCoBrandedWith(const QString &co_branded_with) {
    m_co_branded_with = co_branded_with;
    m_co_branded_with_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_co_branded_with_Set() const{
    return m_co_branded_with_isSet;
}

bool OAIResponseAdditionalDataCommon::is_co_branded_with_Valid() const{
    return m_co_branded_with_isValid;
}

QString OAIResponseAdditionalDataCommon::getCvcResult() const {
    return m_cvc_result;
}
void OAIResponseAdditionalDataCommon::setCvcResult(const QString &cvc_result) {
    m_cvc_result = cvc_result;
    m_cvc_result_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_cvc_result_Set() const{
    return m_cvc_result_isSet;
}

bool OAIResponseAdditionalDataCommon::is_cvc_result_Valid() const{
    return m_cvc_result_isValid;
}

QString OAIResponseAdditionalDataCommon::getCvcResultRaw() const {
    return m_cvc_result_raw;
}
void OAIResponseAdditionalDataCommon::setCvcResultRaw(const QString &cvc_result_raw) {
    m_cvc_result_raw = cvc_result_raw;
    m_cvc_result_raw_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_cvc_result_raw_Set() const{
    return m_cvc_result_raw_isSet;
}

bool OAIResponseAdditionalDataCommon::is_cvc_result_raw_Valid() const{
    return m_cvc_result_raw_isValid;
}

QString OAIResponseAdditionalDataCommon::getDsTransId() const {
    return m_ds_trans_id;
}
void OAIResponseAdditionalDataCommon::setDsTransId(const QString &ds_trans_id) {
    m_ds_trans_id = ds_trans_id;
    m_ds_trans_id_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_ds_trans_id_Set() const{
    return m_ds_trans_id_isSet;
}

bool OAIResponseAdditionalDataCommon::is_ds_trans_id_Valid() const{
    return m_ds_trans_id_isValid;
}

QString OAIResponseAdditionalDataCommon::getEci() const {
    return m_eci;
}
void OAIResponseAdditionalDataCommon::setEci(const QString &eci) {
    m_eci = eci;
    m_eci_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_eci_Set() const{
    return m_eci_isSet;
}

bool OAIResponseAdditionalDataCommon::is_eci_Valid() const{
    return m_eci_isValid;
}

QString OAIResponseAdditionalDataCommon::getExpiryDate() const {
    return m_expiry_date;
}
void OAIResponseAdditionalDataCommon::setExpiryDate(const QString &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIResponseAdditionalDataCommon::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

QString OAIResponseAdditionalDataCommon::getExtraCostsCurrency() const {
    return m_extra_costs_currency;
}
void OAIResponseAdditionalDataCommon::setExtraCostsCurrency(const QString &extra_costs_currency) {
    m_extra_costs_currency = extra_costs_currency;
    m_extra_costs_currency_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_extra_costs_currency_Set() const{
    return m_extra_costs_currency_isSet;
}

bool OAIResponseAdditionalDataCommon::is_extra_costs_currency_Valid() const{
    return m_extra_costs_currency_isValid;
}

QString OAIResponseAdditionalDataCommon::getExtraCostsValue() const {
    return m_extra_costs_value;
}
void OAIResponseAdditionalDataCommon::setExtraCostsValue(const QString &extra_costs_value) {
    m_extra_costs_value = extra_costs_value;
    m_extra_costs_value_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_extra_costs_value_Set() const{
    return m_extra_costs_value_isSet;
}

bool OAIResponseAdditionalDataCommon::is_extra_costs_value_Valid() const{
    return m_extra_costs_value_isValid;
}

QString OAIResponseAdditionalDataCommon::getFraudCheckItemNrFraudCheckname() const {
    return m_fraud_check__item_nr__fraud_checkname;
}
void OAIResponseAdditionalDataCommon::setFraudCheckItemNrFraudCheckname(const QString &fraud_check__item_nr__fraud_checkname) {
    m_fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname;
    m_fraud_check__item_nr__fraud_checkname_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_fraud_check__item_nr__fraud_checkname_Set() const{
    return m_fraud_check__item_nr__fraud_checkname_isSet;
}

bool OAIResponseAdditionalDataCommon::is_fraud_check__item_nr__fraud_checkname_Valid() const{
    return m_fraud_check__item_nr__fraud_checkname_isValid;
}

QString OAIResponseAdditionalDataCommon::getFraudManualReview() const {
    return m_fraud_manual_review;
}
void OAIResponseAdditionalDataCommon::setFraudManualReview(const QString &fraud_manual_review) {
    m_fraud_manual_review = fraud_manual_review;
    m_fraud_manual_review_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_fraud_manual_review_Set() const{
    return m_fraud_manual_review_isSet;
}

bool OAIResponseAdditionalDataCommon::is_fraud_manual_review_Valid() const{
    return m_fraud_manual_review_isValid;
}

QString OAIResponseAdditionalDataCommon::getFraudResultType() const {
    return m_fraud_result_type;
}
void OAIResponseAdditionalDataCommon::setFraudResultType(const QString &fraud_result_type) {
    m_fraud_result_type = fraud_result_type;
    m_fraud_result_type_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_fraud_result_type_Set() const{
    return m_fraud_result_type_isSet;
}

bool OAIResponseAdditionalDataCommon::is_fraud_result_type_Valid() const{
    return m_fraud_result_type_isValid;
}

QString OAIResponseAdditionalDataCommon::getFundingSource() const {
    return m_funding_source;
}
void OAIResponseAdditionalDataCommon::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIResponseAdditionalDataCommon::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAIResponseAdditionalDataCommon::getFundsAvailability() const {
    return m_funds_availability;
}
void OAIResponseAdditionalDataCommon::setFundsAvailability(const QString &funds_availability) {
    m_funds_availability = funds_availability;
    m_funds_availability_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_funds_availability_Set() const{
    return m_funds_availability_isSet;
}

bool OAIResponseAdditionalDataCommon::is_funds_availability_Valid() const{
    return m_funds_availability_isValid;
}

QString OAIResponseAdditionalDataCommon::getInferredRefusalReason() const {
    return m_inferred_refusal_reason;
}
void OAIResponseAdditionalDataCommon::setInferredRefusalReason(const QString &inferred_refusal_reason) {
    m_inferred_refusal_reason = inferred_refusal_reason;
    m_inferred_refusal_reason_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_inferred_refusal_reason_Set() const{
    return m_inferred_refusal_reason_isSet;
}

bool OAIResponseAdditionalDataCommon::is_inferred_refusal_reason_Valid() const{
    return m_inferred_refusal_reason_isValid;
}

QString OAIResponseAdditionalDataCommon::getIsCardCommercial() const {
    return m_is_card_commercial;
}
void OAIResponseAdditionalDataCommon::setIsCardCommercial(const QString &is_card_commercial) {
    m_is_card_commercial = is_card_commercial;
    m_is_card_commercial_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_is_card_commercial_Set() const{
    return m_is_card_commercial_isSet;
}

bool OAIResponseAdditionalDataCommon::is_is_card_commercial_Valid() const{
    return m_is_card_commercial_isValid;
}

QString OAIResponseAdditionalDataCommon::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIResponseAdditionalDataCommon::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIResponseAdditionalDataCommon::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIResponseAdditionalDataCommon::getLiabilityShift() const {
    return m_liability_shift;
}
void OAIResponseAdditionalDataCommon::setLiabilityShift(const QString &liability_shift) {
    m_liability_shift = liability_shift;
    m_liability_shift_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_liability_shift_Set() const{
    return m_liability_shift_isSet;
}

bool OAIResponseAdditionalDataCommon::is_liability_shift_Valid() const{
    return m_liability_shift_isValid;
}

QString OAIResponseAdditionalDataCommon::getMcBankNetReferenceNumber() const {
    return m_mc_bank_net_reference_number;
}
void OAIResponseAdditionalDataCommon::setMcBankNetReferenceNumber(const QString &mc_bank_net_reference_number) {
    m_mc_bank_net_reference_number = mc_bank_net_reference_number;
    m_mc_bank_net_reference_number_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_mc_bank_net_reference_number_Set() const{
    return m_mc_bank_net_reference_number_isSet;
}

bool OAIResponseAdditionalDataCommon::is_mc_bank_net_reference_number_Valid() const{
    return m_mc_bank_net_reference_number_isValid;
}

QString OAIResponseAdditionalDataCommon::getMerchantAdviceCode() const {
    return m_merchant_advice_code;
}
void OAIResponseAdditionalDataCommon::setMerchantAdviceCode(const QString &merchant_advice_code) {
    m_merchant_advice_code = merchant_advice_code;
    m_merchant_advice_code_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_merchant_advice_code_Set() const{
    return m_merchant_advice_code_isSet;
}

bool OAIResponseAdditionalDataCommon::is_merchant_advice_code_Valid() const{
    return m_merchant_advice_code_isValid;
}

QString OAIResponseAdditionalDataCommon::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIResponseAdditionalDataCommon::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getNetworkTxReference() const {
    return m_network_tx_reference;
}
void OAIResponseAdditionalDataCommon::setNetworkTxReference(const QString &network_tx_reference) {
    m_network_tx_reference = network_tx_reference;
    m_network_tx_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_network_tx_reference_Set() const{
    return m_network_tx_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_network_tx_reference_Valid() const{
    return m_network_tx_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getNonSchemeTransactionLimit() const {
    return m_non_scheme_transaction_limit;
}
void OAIResponseAdditionalDataCommon::setNonSchemeTransactionLimit(const QString &non_scheme_transaction_limit) {
    m_non_scheme_transaction_limit = non_scheme_transaction_limit;
    m_non_scheme_transaction_limit_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_non_scheme_transaction_limit_Set() const{
    return m_non_scheme_transaction_limit_isSet;
}

bool OAIResponseAdditionalDataCommon::is_non_scheme_transaction_limit_Valid() const{
    return m_non_scheme_transaction_limit_isValid;
}

QString OAIResponseAdditionalDataCommon::getNonSchemeTransactionLimitCcy() const {
    return m_non_scheme_transaction_limit_ccy;
}
void OAIResponseAdditionalDataCommon::setNonSchemeTransactionLimitCcy(const QString &non_scheme_transaction_limit_ccy) {
    m_non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy;
    m_non_scheme_transaction_limit_ccy_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_non_scheme_transaction_limit_ccy_Set() const{
    return m_non_scheme_transaction_limit_ccy_isSet;
}

bool OAIResponseAdditionalDataCommon::is_non_scheme_transaction_limit_ccy_Valid() const{
    return m_non_scheme_transaction_limit_ccy_isValid;
}

QString OAIResponseAdditionalDataCommon::getOwnerName() const {
    return m_owner_name;
}
void OAIResponseAdditionalDataCommon::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIResponseAdditionalDataCommon::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIResponseAdditionalDataCommon::getPaymentAccountReference() const {
    return m_payment_account_reference;
}
void OAIResponseAdditionalDataCommon::setPaymentAccountReference(const QString &payment_account_reference) {
    m_payment_account_reference = payment_account_reference;
    m_payment_account_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_payment_account_reference_Set() const{
    return m_payment_account_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_payment_account_reference_Valid() const{
    return m_payment_account_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getPaymentMethod() const {
    return m_payment_method;
}
void OAIResponseAdditionalDataCommon::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIResponseAdditionalDataCommon::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIResponseAdditionalDataCommon::getPaymentMethodVariant() const {
    return m_payment_method_variant;
}
void OAIResponseAdditionalDataCommon::setPaymentMethodVariant(const QString &payment_method_variant) {
    m_payment_method_variant = payment_method_variant;
    m_payment_method_variant_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_payment_method_variant_Set() const{
    return m_payment_method_variant_isSet;
}

bool OAIResponseAdditionalDataCommon::is_payment_method_variant_Valid() const{
    return m_payment_method_variant_isValid;
}

QString OAIResponseAdditionalDataCommon::getPayoutEligible() const {
    return m_payout_eligible;
}
void OAIResponseAdditionalDataCommon::setPayoutEligible(const QString &payout_eligible) {
    m_payout_eligible = payout_eligible;
    m_payout_eligible_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_payout_eligible_Set() const{
    return m_payout_eligible_isSet;
}

bool OAIResponseAdditionalDataCommon::is_payout_eligible_Valid() const{
    return m_payout_eligible_isValid;
}

QString OAIResponseAdditionalDataCommon::getRealtimeAccountUpdaterStatus() const {
    return m_realtime_account_updater_status;
}
void OAIResponseAdditionalDataCommon::setRealtimeAccountUpdaterStatus(const QString &realtime_account_updater_status) {
    m_realtime_account_updater_status = realtime_account_updater_status;
    m_realtime_account_updater_status_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_realtime_account_updater_status_Set() const{
    return m_realtime_account_updater_status_isSet;
}

bool OAIResponseAdditionalDataCommon::is_realtime_account_updater_status_Valid() const{
    return m_realtime_account_updater_status_isValid;
}

QString OAIResponseAdditionalDataCommon::getReceiptFreeText() const {
    return m_receipt_free_text;
}
void OAIResponseAdditionalDataCommon::setReceiptFreeText(const QString &receipt_free_text) {
    m_receipt_free_text = receipt_free_text;
    m_receipt_free_text_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_receipt_free_text_Set() const{
    return m_receipt_free_text_isSet;
}

bool OAIResponseAdditionalDataCommon::is_receipt_free_text_Valid() const{
    return m_receipt_free_text_isValid;
}

QString OAIResponseAdditionalDataCommon::getRecurringFirstPspReference() const {
    return m_recurring_first_psp_reference;
}
void OAIResponseAdditionalDataCommon::setRecurringFirstPspReference(const QString &recurring_first_psp_reference) {
    m_recurring_first_psp_reference = recurring_first_psp_reference;
    m_recurring_first_psp_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_recurring_first_psp_reference_Set() const{
    return m_recurring_first_psp_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_recurring_first_psp_reference_Valid() const{
    return m_recurring_first_psp_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getRecurringRecurringDetailReference() const {
    return m_recurring_recurring_detail_reference;
}
void OAIResponseAdditionalDataCommon::setRecurringRecurringDetailReference(const QString &recurring_recurring_detail_reference) {
    m_recurring_recurring_detail_reference = recurring_recurring_detail_reference;
    m_recurring_recurring_detail_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_recurring_recurring_detail_reference_Set() const{
    return m_recurring_recurring_detail_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_recurring_recurring_detail_reference_Valid() const{
    return m_recurring_recurring_detail_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getReferred() const {
    return m_referred;
}
void OAIResponseAdditionalDataCommon::setReferred(const QString &referred) {
    m_referred = referred;
    m_referred_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_referred_Set() const{
    return m_referred_isSet;
}

bool OAIResponseAdditionalDataCommon::is_referred_Valid() const{
    return m_referred_isValid;
}

QString OAIResponseAdditionalDataCommon::getRefusalReasonRaw() const {
    return m_refusal_reason_raw;
}
void OAIResponseAdditionalDataCommon::setRefusalReasonRaw(const QString &refusal_reason_raw) {
    m_refusal_reason_raw = refusal_reason_raw;
    m_refusal_reason_raw_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_refusal_reason_raw_Set() const{
    return m_refusal_reason_raw_isSet;
}

bool OAIResponseAdditionalDataCommon::is_refusal_reason_raw_Valid() const{
    return m_refusal_reason_raw_isValid;
}

QString OAIResponseAdditionalDataCommon::getRequestAmount() const {
    return m_request_amount;
}
void OAIResponseAdditionalDataCommon::setRequestAmount(const QString &request_amount) {
    m_request_amount = request_amount;
    m_request_amount_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_request_amount_Set() const{
    return m_request_amount_isSet;
}

bool OAIResponseAdditionalDataCommon::is_request_amount_Valid() const{
    return m_request_amount_isValid;
}

QString OAIResponseAdditionalDataCommon::getRequestCurrencyCode() const {
    return m_request_currency_code;
}
void OAIResponseAdditionalDataCommon::setRequestCurrencyCode(const QString &request_currency_code) {
    m_request_currency_code = request_currency_code;
    m_request_currency_code_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_request_currency_code_Set() const{
    return m_request_currency_code_isSet;
}

bool OAIResponseAdditionalDataCommon::is_request_currency_code_Valid() const{
    return m_request_currency_code_isValid;
}

QString OAIResponseAdditionalDataCommon::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIResponseAdditionalDataCommon::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIResponseAdditionalDataCommon::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIResponseAdditionalDataCommon::getShopperReference() const {
    return m_shopper_reference;
}
void OAIResponseAdditionalDataCommon::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIResponseAdditionalDataCommon::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIResponseAdditionalDataCommon::getTerminalId() const {
    return m_terminal_id;
}
void OAIResponseAdditionalDataCommon::setTerminalId(const QString &terminal_id) {
    m_terminal_id = terminal_id;
    m_terminal_id_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_terminal_id_Set() const{
    return m_terminal_id_isSet;
}

bool OAIResponseAdditionalDataCommon::is_terminal_id_Valid() const{
    return m_terminal_id_isValid;
}

QString OAIResponseAdditionalDataCommon::getThreeDAuthenticated() const {
    return m_three_d_authenticated;
}
void OAIResponseAdditionalDataCommon::setThreeDAuthenticated(const QString &three_d_authenticated) {
    m_three_d_authenticated = three_d_authenticated;
    m_three_d_authenticated_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_three_d_authenticated_Set() const{
    return m_three_d_authenticated_isSet;
}

bool OAIResponseAdditionalDataCommon::is_three_d_authenticated_Valid() const{
    return m_three_d_authenticated_isValid;
}

QString OAIResponseAdditionalDataCommon::getThreeDAuthenticatedResponse() const {
    return m_three_d_authenticated_response;
}
void OAIResponseAdditionalDataCommon::setThreeDAuthenticatedResponse(const QString &three_d_authenticated_response) {
    m_three_d_authenticated_response = three_d_authenticated_response;
    m_three_d_authenticated_response_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_three_d_authenticated_response_Set() const{
    return m_three_d_authenticated_response_isSet;
}

bool OAIResponseAdditionalDataCommon::is_three_d_authenticated_response_Valid() const{
    return m_three_d_authenticated_response_isValid;
}

QString OAIResponseAdditionalDataCommon::getThreeDOffered() const {
    return m_three_d_offered;
}
void OAIResponseAdditionalDataCommon::setThreeDOffered(const QString &three_d_offered) {
    m_three_d_offered = three_d_offered;
    m_three_d_offered_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_three_d_offered_Set() const{
    return m_three_d_offered_isSet;
}

bool OAIResponseAdditionalDataCommon::is_three_d_offered_Valid() const{
    return m_three_d_offered_isValid;
}

QString OAIResponseAdditionalDataCommon::getThreeDOfferedResponse() const {
    return m_three_d_offered_response;
}
void OAIResponseAdditionalDataCommon::setThreeDOfferedResponse(const QString &three_d_offered_response) {
    m_three_d_offered_response = three_d_offered_response;
    m_three_d_offered_response_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_three_d_offered_response_Set() const{
    return m_three_d_offered_response_isSet;
}

bool OAIResponseAdditionalDataCommon::is_three_d_offered_response_Valid() const{
    return m_three_d_offered_response_isValid;
}

QString OAIResponseAdditionalDataCommon::getThreeDsVersion() const {
    return m_three_ds_version;
}
void OAIResponseAdditionalDataCommon::setThreeDsVersion(const QString &three_ds_version) {
    m_three_ds_version = three_ds_version;
    m_three_ds_version_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_three_ds_version_Set() const{
    return m_three_ds_version_isSet;
}

bool OAIResponseAdditionalDataCommon::is_three_ds_version_Valid() const{
    return m_three_ds_version_isValid;
}

QString OAIResponseAdditionalDataCommon::getVisaTransactionId() const {
    return m_visa_transaction_id;
}
void OAIResponseAdditionalDataCommon::setVisaTransactionId(const QString &visa_transaction_id) {
    m_visa_transaction_id = visa_transaction_id;
    m_visa_transaction_id_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_visa_transaction_id_Set() const{
    return m_visa_transaction_id_isSet;
}

bool OAIResponseAdditionalDataCommon::is_visa_transaction_id_Valid() const{
    return m_visa_transaction_id_isValid;
}

QString OAIResponseAdditionalDataCommon::getXid() const {
    return m_xid;
}
void OAIResponseAdditionalDataCommon::setXid(const QString &xid) {
    m_xid = xid;
    m_xid_isSet = true;
}

bool OAIResponseAdditionalDataCommon::is_xid_Set() const{
    return m_xid_isSet;
}

bool OAIResponseAdditionalDataCommon::is_xid_Valid() const{
    return m_xid_isValid;
}

bool OAIResponseAdditionalDataCommon::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alias_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorisation_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorised_amount_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorised_amount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_co_branded_with_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_costs_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_costs_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_check__item_nr__fraud_checkname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_manual_review_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funds_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inferred_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_card_commercial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liability_shift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mc_bank_net_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_advice_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_tx_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_scheme_transaction_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_scheme_transaction_limit_ccy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_variant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realtime_account_updater_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_free_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_first_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referred_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visa_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAdditionalDataCommon::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
