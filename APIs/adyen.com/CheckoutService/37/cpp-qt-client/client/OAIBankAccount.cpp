/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v37/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v37/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=37) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 37
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBankAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBankAccount::OAIBankAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBankAccount::OAIBankAccount() {
    this->initializeModel();
}

OAIBankAccount::~OAIBankAccount() {}

void OAIBankAccount::initializeModel() {

    m_bank_account_number_isSet = false;
    m_bank_account_number_isValid = false;

    m_bank_city_isSet = false;
    m_bank_city_isValid = false;

    m_bank_location_id_isSet = false;
    m_bank_location_id_isValid = false;

    m_bank_name_isSet = false;
    m_bank_name_isValid = false;

    m_bic_isSet = false;
    m_bic_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_iban_isSet = false;
    m_iban_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;
}

void OAIBankAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBankAccount::fromJsonObject(QJsonObject json) {

    m_bank_account_number_isValid = ::OpenAPI::fromJsonValue(m_bank_account_number, json[QString("bankAccountNumber")]);
    m_bank_account_number_isSet = !json[QString("bankAccountNumber")].isNull() && m_bank_account_number_isValid;

    m_bank_city_isValid = ::OpenAPI::fromJsonValue(m_bank_city, json[QString("bankCity")]);
    m_bank_city_isSet = !json[QString("bankCity")].isNull() && m_bank_city_isValid;

    m_bank_location_id_isValid = ::OpenAPI::fromJsonValue(m_bank_location_id, json[QString("bankLocationId")]);
    m_bank_location_id_isSet = !json[QString("bankLocationId")].isNull() && m_bank_location_id_isValid;

    m_bank_name_isValid = ::OpenAPI::fromJsonValue(m_bank_name, json[QString("bankName")]);
    m_bank_name_isSet = !json[QString("bankName")].isNull() && m_bank_name_isValid;

    m_bic_isValid = ::OpenAPI::fromJsonValue(m_bic, json[QString("bic")]);
    m_bic_isSet = !json[QString("bic")].isNull() && m_bic_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_iban_isValid = ::OpenAPI::fromJsonValue(m_iban, json[QString("iban")]);
    m_iban_isSet = !json[QString("iban")].isNull() && m_iban_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;
}

QString OAIBankAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBankAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_bank_account_number_isSet) {
        obj.insert(QString("bankAccountNumber"), ::OpenAPI::toJsonValue(m_bank_account_number));
    }
    if (m_bank_city_isSet) {
        obj.insert(QString("bankCity"), ::OpenAPI::toJsonValue(m_bank_city));
    }
    if (m_bank_location_id_isSet) {
        obj.insert(QString("bankLocationId"), ::OpenAPI::toJsonValue(m_bank_location_id));
    }
    if (m_bank_name_isSet) {
        obj.insert(QString("bankName"), ::OpenAPI::toJsonValue(m_bank_name));
    }
    if (m_bic_isSet) {
        obj.insert(QString("bic"), ::OpenAPI::toJsonValue(m_bic));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_iban_isSet) {
        obj.insert(QString("iban"), ::OpenAPI::toJsonValue(m_iban));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    return obj;
}

QString OAIBankAccount::getBankAccountNumber() const {
    return m_bank_account_number;
}
void OAIBankAccount::setBankAccountNumber(const QString &bank_account_number) {
    m_bank_account_number = bank_account_number;
    m_bank_account_number_isSet = true;
}

bool OAIBankAccount::is_bank_account_number_Set() const{
    return m_bank_account_number_isSet;
}

bool OAIBankAccount::is_bank_account_number_Valid() const{
    return m_bank_account_number_isValid;
}

QString OAIBankAccount::getBankCity() const {
    return m_bank_city;
}
void OAIBankAccount::setBankCity(const QString &bank_city) {
    m_bank_city = bank_city;
    m_bank_city_isSet = true;
}

bool OAIBankAccount::is_bank_city_Set() const{
    return m_bank_city_isSet;
}

bool OAIBankAccount::is_bank_city_Valid() const{
    return m_bank_city_isValid;
}

QString OAIBankAccount::getBankLocationId() const {
    return m_bank_location_id;
}
void OAIBankAccount::setBankLocationId(const QString &bank_location_id) {
    m_bank_location_id = bank_location_id;
    m_bank_location_id_isSet = true;
}

bool OAIBankAccount::is_bank_location_id_Set() const{
    return m_bank_location_id_isSet;
}

bool OAIBankAccount::is_bank_location_id_Valid() const{
    return m_bank_location_id_isValid;
}

QString OAIBankAccount::getBankName() const {
    return m_bank_name;
}
void OAIBankAccount::setBankName(const QString &bank_name) {
    m_bank_name = bank_name;
    m_bank_name_isSet = true;
}

bool OAIBankAccount::is_bank_name_Set() const{
    return m_bank_name_isSet;
}

bool OAIBankAccount::is_bank_name_Valid() const{
    return m_bank_name_isValid;
}

QString OAIBankAccount::getBic() const {
    return m_bic;
}
void OAIBankAccount::setBic(const QString &bic) {
    m_bic = bic;
    m_bic_isSet = true;
}

bool OAIBankAccount::is_bic_Set() const{
    return m_bic_isSet;
}

bool OAIBankAccount::is_bic_Valid() const{
    return m_bic_isValid;
}

QString OAIBankAccount::getCountryCode() const {
    return m_country_code;
}
void OAIBankAccount::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIBankAccount::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIBankAccount::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIBankAccount::getIban() const {
    return m_iban;
}
void OAIBankAccount::setIban(const QString &iban) {
    m_iban = iban;
    m_iban_isSet = true;
}

bool OAIBankAccount::is_iban_Set() const{
    return m_iban_isSet;
}

bool OAIBankAccount::is_iban_Valid() const{
    return m_iban_isValid;
}

QString OAIBankAccount::getOwnerName() const {
    return m_owner_name;
}
void OAIBankAccount::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIBankAccount::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIBankAccount::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIBankAccount::getTaxId() const {
    return m_tax_id;
}
void OAIBankAccount::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAIBankAccount::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAIBankAccount::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAIBankAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bank_account_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_iban_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBankAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
