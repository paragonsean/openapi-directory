/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v37/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v37/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=37) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 37
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputDetail::OAIInputDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputDetail::OAIInputDetail() {
    this->initializeModel();
}

OAIInputDetail::~OAIInputDetail() {}

void OAIInputDetail::initializeModel() {

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_input_details_isSet = false;
    m_input_details_isValid = false;

    m_item_search_url_isSet = false;
    m_item_search_url_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_optional_isSet = false;
    m_optional_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIInputDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputDetail::fromJsonObject(QJsonObject json) {

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_input_details_isValid = ::OpenAPI::fromJsonValue(m_input_details, json[QString("inputDetails")]);
    m_input_details_isSet = !json[QString("inputDetails")].isNull() && m_input_details_isValid;

    m_item_search_url_isValid = ::OpenAPI::fromJsonValue(m_item_search_url, json[QString("itemSearchUrl")]);
    m_item_search_url_isSet = !json[QString("itemSearchUrl")].isNull() && m_item_search_url_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_optional_isValid = ::OpenAPI::fromJsonValue(m_optional, json[QString("optional")]);
    m_optional_isSet = !json[QString("optional")].isNull() && m_optional_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIInputDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_input_details.size() > 0) {
        obj.insert(QString("inputDetails"), ::OpenAPI::toJsonValue(m_input_details));
    }
    if (m_item_search_url_isSet) {
        obj.insert(QString("itemSearchUrl"), ::OpenAPI::toJsonValue(m_item_search_url));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_optional_isSet) {
        obj.insert(QString("optional"), ::OpenAPI::toJsonValue(m_optional));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QMap<QString, QString> OAIInputDetail::getConfiguration() const {
    return m_configuration;
}
void OAIInputDetail::setConfiguration(const QMap<QString, QString> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIInputDetail::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIInputDetail::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QList<OAISubInputDetail> OAIInputDetail::getDetails() const {
    return m_details;
}
void OAIInputDetail::setDetails(const QList<OAISubInputDetail> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIInputDetail::is_details_Set() const{
    return m_details_isSet;
}

bool OAIInputDetail::is_details_Valid() const{
    return m_details_isValid;
}

QList<OAISubInputDetail> OAIInputDetail::getInputDetails() const {
    return m_input_details;
}
void OAIInputDetail::setInputDetails(const QList<OAISubInputDetail> &input_details) {
    m_input_details = input_details;
    m_input_details_isSet = true;
}

bool OAIInputDetail::is_input_details_Set() const{
    return m_input_details_isSet;
}

bool OAIInputDetail::is_input_details_Valid() const{
    return m_input_details_isValid;
}

QString OAIInputDetail::getItemSearchUrl() const {
    return m_item_search_url;
}
void OAIInputDetail::setItemSearchUrl(const QString &item_search_url) {
    m_item_search_url = item_search_url;
    m_item_search_url_isSet = true;
}

bool OAIInputDetail::is_item_search_url_Set() const{
    return m_item_search_url_isSet;
}

bool OAIInputDetail::is_item_search_url_Valid() const{
    return m_item_search_url_isValid;
}

QList<OAIItem> OAIInputDetail::getItems() const {
    return m_items;
}
void OAIInputDetail::setItems(const QList<OAIItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIInputDetail::is_items_Set() const{
    return m_items_isSet;
}

bool OAIInputDetail::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIInputDetail::getKey() const {
    return m_key;
}
void OAIInputDetail::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIInputDetail::is_key_Set() const{
    return m_key_isSet;
}

bool OAIInputDetail::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIInputDetail::isOptional() const {
    return m_optional;
}
void OAIInputDetail::setOptional(const bool &optional) {
    m_optional = optional;
    m_optional_isSet = true;
}

bool OAIInputDetail::is_optional_Set() const{
    return m_optional_isSet;
}

bool OAIInputDetail::is_optional_Valid() const{
    return m_optional_isValid;
}

QString OAIInputDetail::getType() const {
    return m_type;
}
void OAIInputDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIInputDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAIInputDetail::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIInputDetail::getValue() const {
    return m_value;
}
void OAIInputDetail::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIInputDetail::is_value_Set() const{
    return m_value_isSet;
}

bool OAIInputDetail::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIInputDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_search_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optional_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
