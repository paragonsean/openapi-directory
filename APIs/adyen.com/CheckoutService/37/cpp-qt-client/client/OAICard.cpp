/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v37/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v37/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=37) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 37
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICard::OAICard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICard::OAICard() {
    this->initializeModel();
}

OAICard::~OAICard() {}

void OAICard::initializeModel() {

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_issue_number_isSet = false;
    m_issue_number_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_start_month_isSet = false;
    m_start_month_isValid = false;

    m_start_year_isSet = false;
    m_start_year_isValid = false;
}

void OAICard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICard::fromJsonObject(QJsonObject json) {

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_issue_number_isValid = ::OpenAPI::fromJsonValue(m_issue_number, json[QString("issueNumber")]);
    m_issue_number_isSet = !json[QString("issueNumber")].isNull() && m_issue_number_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_start_month_isValid = ::OpenAPI::fromJsonValue(m_start_month, json[QString("startMonth")]);
    m_start_month_isSet = !json[QString("startMonth")].isNull() && m_start_month_isValid;

    m_start_year_isValid = ::OpenAPI::fromJsonValue(m_start_year, json[QString("startYear")]);
    m_start_year_isSet = !json[QString("startYear")].isNull() && m_start_year_isValid;
}

QString OAICard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICard::asJsonObject() const {
    QJsonObject obj;
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_issue_number_isSet) {
        obj.insert(QString("issueNumber"), ::OpenAPI::toJsonValue(m_issue_number));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_start_month_isSet) {
        obj.insert(QString("startMonth"), ::OpenAPI::toJsonValue(m_start_month));
    }
    if (m_start_year_isSet) {
        obj.insert(QString("startYear"), ::OpenAPI::toJsonValue(m_start_year));
    }
    return obj;
}

QString OAICard::getCvc() const {
    return m_cvc;
}
void OAICard::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAICard::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAICard::is_cvc_Valid() const{
    return m_cvc_isValid;
}

QString OAICard::getExpiryMonth() const {
    return m_expiry_month;
}
void OAICard::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAICard::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAICard::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAICard::getExpiryYear() const {
    return m_expiry_year;
}
void OAICard::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAICard::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAICard::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAICard::getHolderName() const {
    return m_holder_name;
}
void OAICard::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAICard::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAICard::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAICard::getIssueNumber() const {
    return m_issue_number;
}
void OAICard::setIssueNumber(const QString &issue_number) {
    m_issue_number = issue_number;
    m_issue_number_isSet = true;
}

bool OAICard::is_issue_number_Set() const{
    return m_issue_number_isSet;
}

bool OAICard::is_issue_number_Valid() const{
    return m_issue_number_isValid;
}

QString OAICard::getNumber() const {
    return m_number;
}
void OAICard::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICard::is_number_Set() const{
    return m_number_isSet;
}

bool OAICard::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICard::getStartMonth() const {
    return m_start_month;
}
void OAICard::setStartMonth(const QString &start_month) {
    m_start_month = start_month;
    m_start_month_isSet = true;
}

bool OAICard::is_start_month_Set() const{
    return m_start_month_isSet;
}

bool OAICard::is_start_month_Valid() const{
    return m_start_month_isValid;
}

QString OAICard::getStartYear() const {
    return m_start_year;
}
void OAICard::setStartYear(const QString &start_year) {
    m_start_year = start_year;
    m_start_year_isSet = true;
}

bool OAICard::is_start_year_Set() const{
    return m_start_year_isSet;
}

bool OAICard::is_start_year_Valid() const{
    return m_start_year_isValid;
}

bool OAICard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issue_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
