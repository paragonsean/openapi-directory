/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v37/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v37/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=37) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 37
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ResponseAdditionalDataCommon
 */
public class ResponseAdditionalDataCommonTest {
    private final ResponseAdditionalDataCommon model = new ResponseAdditionalDataCommon();

    /**
     * Model tests for ResponseAdditionalDataCommon
     */
    @Test
    public void testResponseAdditionalDataCommon() {
        // TODO: test ResponseAdditionalDataCommon
    }

    /**
     * Test the property 'acquirerAccountCode'
     */
    @Test
    public void acquirerAccountCodeTest() {
        // TODO: test acquirerAccountCode
    }

    /**
     * Test the property 'acquirerCode'
     */
    @Test
    public void acquirerCodeTest() {
        // TODO: test acquirerCode
    }

    /**
     * Test the property 'acquirerReference'
     */
    @Test
    public void acquirerReferenceTest() {
        // TODO: test acquirerReference
    }

    /**
     * Test the property 'alias'
     */
    @Test
    public void aliasTest() {
        // TODO: test alias
    }

    /**
     * Test the property 'aliasType'
     */
    @Test
    public void aliasTypeTest() {
        // TODO: test aliasType
    }

    /**
     * Test the property 'authCode'
     */
    @Test
    public void authCodeTest() {
        // TODO: test authCode
    }

    /**
     * Test the property 'authorisationMid'
     */
    @Test
    public void authorisationMidTest() {
        // TODO: test authorisationMid
    }

    /**
     * Test the property 'authorisedAmountCurrency'
     */
    @Test
    public void authorisedAmountCurrencyTest() {
        // TODO: test authorisedAmountCurrency
    }

    /**
     * Test the property 'authorisedAmountValue'
     */
    @Test
    public void authorisedAmountValueTest() {
        // TODO: test authorisedAmountValue
    }

    /**
     * Test the property 'avsResult'
     */
    @Test
    public void avsResultTest() {
        // TODO: test avsResult
    }

    /**
     * Test the property 'avsResultRaw'
     */
    @Test
    public void avsResultRawTest() {
        // TODO: test avsResultRaw
    }

    /**
     * Test the property 'bic'
     */
    @Test
    public void bicTest() {
        // TODO: test bic
    }

    /**
     * Test the property 'coBrandedWith'
     */
    @Test
    public void coBrandedWithTest() {
        // TODO: test coBrandedWith
    }

    /**
     * Test the property 'cvcResult'
     */
    @Test
    public void cvcResultTest() {
        // TODO: test cvcResult
    }

    /**
     * Test the property 'cvcResultRaw'
     */
    @Test
    public void cvcResultRawTest() {
        // TODO: test cvcResultRaw
    }

    /**
     * Test the property 'dsTransID'
     */
    @Test
    public void dsTransIDTest() {
        // TODO: test dsTransID
    }

    /**
     * Test the property 'eci'
     */
    @Test
    public void eciTest() {
        // TODO: test eci
    }

    /**
     * Test the property 'expiryDate'
     */
    @Test
    public void expiryDateTest() {
        // TODO: test expiryDate
    }

    /**
     * Test the property 'extraCostsCurrency'
     */
    @Test
    public void extraCostsCurrencyTest() {
        // TODO: test extraCostsCurrency
    }

    /**
     * Test the property 'extraCostsValue'
     */
    @Test
    public void extraCostsValueTest() {
        // TODO: test extraCostsValue
    }

    /**
     * Test the property 'fraudCheckItemNrFraudCheckname'
     */
    @Test
    public void fraudCheckItemNrFraudChecknameTest() {
        // TODO: test fraudCheckItemNrFraudCheckname
    }

    /**
     * Test the property 'fraudManualReview'
     */
    @Test
    public void fraudManualReviewTest() {
        // TODO: test fraudManualReview
    }

    /**
     * Test the property 'fraudResultType'
     */
    @Test
    public void fraudResultTypeTest() {
        // TODO: test fraudResultType
    }

    /**
     * Test the property 'fundingSource'
     */
    @Test
    public void fundingSourceTest() {
        // TODO: test fundingSource
    }

    /**
     * Test the property 'fundsAvailability'
     */
    @Test
    public void fundsAvailabilityTest() {
        // TODO: test fundsAvailability
    }

    /**
     * Test the property 'inferredRefusalReason'
     */
    @Test
    public void inferredRefusalReasonTest() {
        // TODO: test inferredRefusalReason
    }

    /**
     * Test the property 'isCardCommercial'
     */
    @Test
    public void isCardCommercialTest() {
        // TODO: test isCardCommercial
    }

    /**
     * Test the property 'issuerCountry'
     */
    @Test
    public void issuerCountryTest() {
        // TODO: test issuerCountry
    }

    /**
     * Test the property 'liabilityShift'
     */
    @Test
    public void liabilityShiftTest() {
        // TODO: test liabilityShift
    }

    /**
     * Test the property 'mcBankNetReferenceNumber'
     */
    @Test
    public void mcBankNetReferenceNumberTest() {
        // TODO: test mcBankNetReferenceNumber
    }

    /**
     * Test the property 'merchantAdviceCode'
     */
    @Test
    public void merchantAdviceCodeTest() {
        // TODO: test merchantAdviceCode
    }

    /**
     * Test the property 'merchantReference'
     */
    @Test
    public void merchantReferenceTest() {
        // TODO: test merchantReference
    }

    /**
     * Test the property 'networkTxReference'
     */
    @Test
    public void networkTxReferenceTest() {
        // TODO: test networkTxReference
    }

    /**
     * Test the property 'nonSchemeTransactionLimit'
     */
    @Test
    public void nonSchemeTransactionLimitTest() {
        // TODO: test nonSchemeTransactionLimit
    }

    /**
     * Test the property 'nonSchemeTransactionLimitCcy'
     */
    @Test
    public void nonSchemeTransactionLimitCcyTest() {
        // TODO: test nonSchemeTransactionLimitCcy
    }

    /**
     * Test the property 'ownerName'
     */
    @Test
    public void ownerNameTest() {
        // TODO: test ownerName
    }

    /**
     * Test the property 'paymentAccountReference'
     */
    @Test
    public void paymentAccountReferenceTest() {
        // TODO: test paymentAccountReference
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'paymentMethodVariant'
     */
    @Test
    public void paymentMethodVariantTest() {
        // TODO: test paymentMethodVariant
    }

    /**
     * Test the property 'payoutEligible'
     */
    @Test
    public void payoutEligibleTest() {
        // TODO: test payoutEligible
    }

    /**
     * Test the property 'realtimeAccountUpdaterStatus'
     */
    @Test
    public void realtimeAccountUpdaterStatusTest() {
        // TODO: test realtimeAccountUpdaterStatus
    }

    /**
     * Test the property 'receiptFreeText'
     */
    @Test
    public void receiptFreeTextTest() {
        // TODO: test receiptFreeText
    }

    /**
     * Test the property 'recurringFirstPspReference'
     */
    @Test
    public void recurringFirstPspReferenceTest() {
        // TODO: test recurringFirstPspReference
    }

    /**
     * Test the property 'recurringRecurringDetailReference'
     */
    @Test
    public void recurringRecurringDetailReferenceTest() {
        // TODO: test recurringRecurringDetailReference
    }

    /**
     * Test the property 'referred'
     */
    @Test
    public void referredTest() {
        // TODO: test referred
    }

    /**
     * Test the property 'refusalReasonRaw'
     */
    @Test
    public void refusalReasonRawTest() {
        // TODO: test refusalReasonRaw
    }

    /**
     * Test the property 'requestAmount'
     */
    @Test
    public void requestAmountTest() {
        // TODO: test requestAmount
    }

    /**
     * Test the property 'requestCurrencyCode'
     */
    @Test
    public void requestCurrencyCodeTest() {
        // TODO: test requestCurrencyCode
    }

    /**
     * Test the property 'shopperInteraction'
     */
    @Test
    public void shopperInteractionTest() {
        // TODO: test shopperInteraction
    }

    /**
     * Test the property 'shopperReference'
     */
    @Test
    public void shopperReferenceTest() {
        // TODO: test shopperReference
    }

    /**
     * Test the property 'terminalId'
     */
    @Test
    public void terminalIdTest() {
        // TODO: test terminalId
    }

    /**
     * Test the property 'threeDAuthenticated'
     */
    @Test
    public void threeDAuthenticatedTest() {
        // TODO: test threeDAuthenticated
    }

    /**
     * Test the property 'threeDAuthenticatedResponse'
     */
    @Test
    public void threeDAuthenticatedResponseTest() {
        // TODO: test threeDAuthenticatedResponse
    }

    /**
     * Test the property 'threeDOffered'
     */
    @Test
    public void threeDOfferedTest() {
        // TODO: test threeDOffered
    }

    /**
     * Test the property 'threeDOfferedResponse'
     */
    @Test
    public void threeDOfferedResponseTest() {
        // TODO: test threeDOfferedResponse
    }

    /**
     * Test the property 'threeDSVersion'
     */
    @Test
    public void threeDSVersionTest() {
        // TODO: test threeDSVersion
    }

    /**
     * Test the property 'visaTransactionId'
     */
    @Test
    public void visaTransactionIdTest() {
        // TODO: test visaTransactionId
    }

    /**
     * Test the property 'xid'
     */
    @Test
    public void xidTest() {
        // TODO: test xid
    }

}
