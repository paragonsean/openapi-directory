# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrowserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_header: str=None, user_agent: str=None):
        """BrowserInfo - a model defined in OpenAPI

        :param accept_header: The accept_header of this BrowserInfo.
        :param user_agent: The user_agent of this BrowserInfo.
        """
        self.openapi_types = {
            'accept_header': str,
            'user_agent': str
        }

        self.attribute_map = {
            'accept_header': 'acceptHeader',
            'user_agent': 'userAgent'
        }

        self._accept_header = accept_header
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrowserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrowserInfo of this BrowserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_header(self):
        """Gets the accept_header of this BrowserInfo.

        The accept header value of the shopper's browser.

        :return: The accept_header of this BrowserInfo.
        :rtype: str
        """
        return self._accept_header

    @accept_header.setter
    def accept_header(self, accept_header):
        """Sets the accept_header of this BrowserInfo.

        The accept header value of the shopper's browser.

        :param accept_header: The accept_header of this BrowserInfo.
        :type accept_header: str
        """
        if accept_header is None:
            raise ValueError("Invalid value for `accept_header`, must not be `None`")

        self._accept_header = accept_header

    @property
    def user_agent(self):
        """Gets the user_agent of this BrowserInfo.

        The user agent value of the shopper's browser.

        :return: The user_agent of this BrowserInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this BrowserInfo.

        The user agent value of the shopper's browser.

        :param user_agent: The user_agent of this BrowserInfo.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent
