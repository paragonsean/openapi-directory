# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.balance_check_request_additional_data import BalanceCheckRequestAdditionalData
from openapi_server.models.company import Company
from openapi_server.models.configuration import Configuration
from openapi_server.models.forex_quote import ForexQuote
from openapi_server.models.installments import Installments
from openapi_server.models.line_item import LineItem
from openapi_server.models.mandate import Mandate
from openapi_server.models.name import Name
from openapi_server.models.risk_data import RiskData
from openapi_server.models.split import Split
from openapi_server import util


class PaymentSetupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_amount: Amount=None, additional_data: BalanceCheckRequestAdditionalData=None, allowed_payment_methods: List[str]=None, amount: Amount=None, billing_address: Address=None, blocked_payment_methods: List[str]=None, capture_delay_hours: int=None, channel: str=None, company: Company=None, configuration: Configuration=None, country_code: str=None, date_of_birth: date=None, dcc_quote: ForexQuote=None, delivery_address: Address=None, delivery_date: datetime=None, enable_one_click: bool=None, enable_pay_out: bool=None, enable_recurring: bool=None, entity_type: str=None, fraud_offset: int=None, installments: Installments=None, line_items: List[LineItem]=None, mandate: Mandate=None, mcc: str=None, merchant_account: str=None, merchant_order_reference: str=None, metadata: Dict[str, str]=None, order_reference: str=None, origin: str=None, recurring_expiry: str=None, recurring_frequency: str=None, reference: str=None, return_url: str=None, risk_data: RiskData=None, sdk_version: str=None, session_validity: str=None, shopper_email: str=None, shopper_ip: str=None, shopper_interaction: str=None, shopper_locale: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, social_security_number: str=None, splits: List[Split]=None, store: str=None, telephone_number: str=None, token: str=None, trusted_shopper: bool=None):
        """PaymentSetupRequest - a model defined in OpenAPI

        :param additional_amount: The additional_amount of this PaymentSetupRequest.
        :param additional_data: The additional_data of this PaymentSetupRequest.
        :param allowed_payment_methods: The allowed_payment_methods of this PaymentSetupRequest.
        :param amount: The amount of this PaymentSetupRequest.
        :param billing_address: The billing_address of this PaymentSetupRequest.
        :param blocked_payment_methods: The blocked_payment_methods of this PaymentSetupRequest.
        :param capture_delay_hours: The capture_delay_hours of this PaymentSetupRequest.
        :param channel: The channel of this PaymentSetupRequest.
        :param company: The company of this PaymentSetupRequest.
        :param configuration: The configuration of this PaymentSetupRequest.
        :param country_code: The country_code of this PaymentSetupRequest.
        :param date_of_birth: The date_of_birth of this PaymentSetupRequest.
        :param dcc_quote: The dcc_quote of this PaymentSetupRequest.
        :param delivery_address: The delivery_address of this PaymentSetupRequest.
        :param delivery_date: The delivery_date of this PaymentSetupRequest.
        :param enable_one_click: The enable_one_click of this PaymentSetupRequest.
        :param enable_pay_out: The enable_pay_out of this PaymentSetupRequest.
        :param enable_recurring: The enable_recurring of this PaymentSetupRequest.
        :param entity_type: The entity_type of this PaymentSetupRequest.
        :param fraud_offset: The fraud_offset of this PaymentSetupRequest.
        :param installments: The installments of this PaymentSetupRequest.
        :param line_items: The line_items of this PaymentSetupRequest.
        :param mandate: The mandate of this PaymentSetupRequest.
        :param mcc: The mcc of this PaymentSetupRequest.
        :param merchant_account: The merchant_account of this PaymentSetupRequest.
        :param merchant_order_reference: The merchant_order_reference of this PaymentSetupRequest.
        :param metadata: The metadata of this PaymentSetupRequest.
        :param order_reference: The order_reference of this PaymentSetupRequest.
        :param origin: The origin of this PaymentSetupRequest.
        :param recurring_expiry: The recurring_expiry of this PaymentSetupRequest.
        :param recurring_frequency: The recurring_frequency of this PaymentSetupRequest.
        :param reference: The reference of this PaymentSetupRequest.
        :param return_url: The return_url of this PaymentSetupRequest.
        :param risk_data: The risk_data of this PaymentSetupRequest.
        :param sdk_version: The sdk_version of this PaymentSetupRequest.
        :param session_validity: The session_validity of this PaymentSetupRequest.
        :param shopper_email: The shopper_email of this PaymentSetupRequest.
        :param shopper_ip: The shopper_ip of this PaymentSetupRequest.
        :param shopper_interaction: The shopper_interaction of this PaymentSetupRequest.
        :param shopper_locale: The shopper_locale of this PaymentSetupRequest.
        :param shopper_name: The shopper_name of this PaymentSetupRequest.
        :param shopper_reference: The shopper_reference of this PaymentSetupRequest.
        :param shopper_statement: The shopper_statement of this PaymentSetupRequest.
        :param social_security_number: The social_security_number of this PaymentSetupRequest.
        :param splits: The splits of this PaymentSetupRequest.
        :param store: The store of this PaymentSetupRequest.
        :param telephone_number: The telephone_number of this PaymentSetupRequest.
        :param token: The token of this PaymentSetupRequest.
        :param trusted_shopper: The trusted_shopper of this PaymentSetupRequest.
        """
        self.openapi_types = {
            'additional_amount': Amount,
            'additional_data': BalanceCheckRequestAdditionalData,
            'allowed_payment_methods': List[str],
            'amount': Amount,
            'billing_address': Address,
            'blocked_payment_methods': List[str],
            'capture_delay_hours': int,
            'channel': str,
            'company': Company,
            'configuration': Configuration,
            'country_code': str,
            'date_of_birth': date,
            'dcc_quote': ForexQuote,
            'delivery_address': Address,
            'delivery_date': datetime,
            'enable_one_click': bool,
            'enable_pay_out': bool,
            'enable_recurring': bool,
            'entity_type': str,
            'fraud_offset': int,
            'installments': Installments,
            'line_items': List[LineItem],
            'mandate': Mandate,
            'mcc': str,
            'merchant_account': str,
            'merchant_order_reference': str,
            'metadata': Dict[str, str],
            'order_reference': str,
            'origin': str,
            'recurring_expiry': str,
            'recurring_frequency': str,
            'reference': str,
            'return_url': str,
            'risk_data': RiskData,
            'sdk_version': str,
            'session_validity': str,
            'shopper_email': str,
            'shopper_ip': str,
            'shopper_interaction': str,
            'shopper_locale': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'social_security_number': str,
            'splits': List[Split],
            'store': str,
            'telephone_number': str,
            'token': str,
            'trusted_shopper': bool
        }

        self.attribute_map = {
            'additional_amount': 'additionalAmount',
            'additional_data': 'additionalData',
            'allowed_payment_methods': 'allowedPaymentMethods',
            'amount': 'amount',
            'billing_address': 'billingAddress',
            'blocked_payment_methods': 'blockedPaymentMethods',
            'capture_delay_hours': 'captureDelayHours',
            'channel': 'channel',
            'company': 'company',
            'configuration': 'configuration',
            'country_code': 'countryCode',
            'date_of_birth': 'dateOfBirth',
            'dcc_quote': 'dccQuote',
            'delivery_address': 'deliveryAddress',
            'delivery_date': 'deliveryDate',
            'enable_one_click': 'enableOneClick',
            'enable_pay_out': 'enablePayOut',
            'enable_recurring': 'enableRecurring',
            'entity_type': 'entityType',
            'fraud_offset': 'fraudOffset',
            'installments': 'installments',
            'line_items': 'lineItems',
            'mandate': 'mandate',
            'mcc': 'mcc',
            'merchant_account': 'merchantAccount',
            'merchant_order_reference': 'merchantOrderReference',
            'metadata': 'metadata',
            'order_reference': 'orderReference',
            'origin': 'origin',
            'recurring_expiry': 'recurringExpiry',
            'recurring_frequency': 'recurringFrequency',
            'reference': 'reference',
            'return_url': 'returnUrl',
            'risk_data': 'riskData',
            'sdk_version': 'sdkVersion',
            'session_validity': 'sessionValidity',
            'shopper_email': 'shopperEmail',
            'shopper_ip': 'shopperIP',
            'shopper_interaction': 'shopperInteraction',
            'shopper_locale': 'shopperLocale',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'social_security_number': 'socialSecurityNumber',
            'splits': 'splits',
            'store': 'store',
            'telephone_number': 'telephoneNumber',
            'token': 'token',
            'trusted_shopper': 'trustedShopper'
        }

        self._additional_amount = additional_amount
        self._additional_data = additional_data
        self._allowed_payment_methods = allowed_payment_methods
        self._amount = amount
        self._billing_address = billing_address
        self._blocked_payment_methods = blocked_payment_methods
        self._capture_delay_hours = capture_delay_hours
        self._channel = channel
        self._company = company
        self._configuration = configuration
        self._country_code = country_code
        self._date_of_birth = date_of_birth
        self._dcc_quote = dcc_quote
        self._delivery_address = delivery_address
        self._delivery_date = delivery_date
        self._enable_one_click = enable_one_click
        self._enable_pay_out = enable_pay_out
        self._enable_recurring = enable_recurring
        self._entity_type = entity_type
        self._fraud_offset = fraud_offset
        self._installments = installments
        self._line_items = line_items
        self._mandate = mandate
        self._mcc = mcc
        self._merchant_account = merchant_account
        self._merchant_order_reference = merchant_order_reference
        self._metadata = metadata
        self._order_reference = order_reference
        self._origin = origin
        self._recurring_expiry = recurring_expiry
        self._recurring_frequency = recurring_frequency
        self._reference = reference
        self._return_url = return_url
        self._risk_data = risk_data
        self._sdk_version = sdk_version
        self._session_validity = session_validity
        self._shopper_email = shopper_email
        self._shopper_ip = shopper_ip
        self._shopper_interaction = shopper_interaction
        self._shopper_locale = shopper_locale
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._social_security_number = social_security_number
        self._splits = splits
        self._store = store
        self._telephone_number = telephone_number
        self._token = token
        self._trusted_shopper = trusted_shopper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentSetupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentSetupRequest of this PaymentSetupRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_amount(self):
        """Gets the additional_amount of this PaymentSetupRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :return: The additional_amount of this PaymentSetupRequest.
        :rtype: Amount
        """
        return self._additional_amount

    @additional_amount.setter
    def additional_amount(self, additional_amount):
        """Sets the additional_amount of this PaymentSetupRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :param additional_amount: The additional_amount of this PaymentSetupRequest.
        :type additional_amount: Amount
        """

        self._additional_amount = additional_amount

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentSetupRequest.


        :return: The additional_data of this PaymentSetupRequest.
        :rtype: BalanceCheckRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentSetupRequest.


        :param additional_data: The additional_data of this PaymentSetupRequest.
        :type additional_data: BalanceCheckRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def allowed_payment_methods(self):
        """Gets the allowed_payment_methods of this PaymentSetupRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The allowed_payment_methods of this PaymentSetupRequest.
        :rtype: List[str]
        """
        return self._allowed_payment_methods

    @allowed_payment_methods.setter
    def allowed_payment_methods(self, allowed_payment_methods):
        """Sets the allowed_payment_methods of this PaymentSetupRequest.

        List of payment methods to be presented to the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"allowedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param allowed_payment_methods: The allowed_payment_methods of this PaymentSetupRequest.
        :type allowed_payment_methods: List[str]
        """

        self._allowed_payment_methods = allowed_payment_methods

    @property
    def amount(self):
        """Gets the amount of this PaymentSetupRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :return: The amount of this PaymentSetupRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentSetupRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :param amount: The amount of this PaymentSetupRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentSetupRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :return: The billing_address of this PaymentSetupRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentSetupRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :param billing_address: The billing_address of this PaymentSetupRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def blocked_payment_methods(self):
        """Gets the blocked_payment_methods of this PaymentSetupRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :return: The blocked_payment_methods of this PaymentSetupRequest.
        :rtype: List[str]
        """
        return self._blocked_payment_methods

    @blocked_payment_methods.setter
    def blocked_payment_methods(self, blocked_payment_methods):
        """Sets the blocked_payment_methods of this PaymentSetupRequest.

        List of payment methods to be hidden from the shopper. To refer to payment methods, use their [payment method type](https://docs.adyen.com/payment-methods/payment-method-types).  Example: `\"blockedPaymentMethods\":[\"ideal\",\"giropay\"]`

        :param blocked_payment_methods: The blocked_payment_methods of this PaymentSetupRequest.
        :type blocked_payment_methods: List[str]
        """

        self._blocked_payment_methods = blocked_payment_methods

    @property
    def capture_delay_hours(self):
        """Gets the capture_delay_hours of this PaymentSetupRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :return: The capture_delay_hours of this PaymentSetupRequest.
        :rtype: int
        """
        return self._capture_delay_hours

    @capture_delay_hours.setter
    def capture_delay_hours(self, capture_delay_hours):
        """Sets the capture_delay_hours of this PaymentSetupRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :param capture_delay_hours: The capture_delay_hours of this PaymentSetupRequest.
        :type capture_delay_hours: int
        """

        self._capture_delay_hours = capture_delay_hours

    @property
    def channel(self):
        """Gets the channel of this PaymentSetupRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web

        :return: The channel of this PaymentSetupRequest.
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this PaymentSetupRequest.

        The platform where a payment transaction takes place. This field is optional for filtering out payment methods that are only available on specific platforms. If this value is not set, then we will try to infer it from the `sdkVersion` or `token`.  Possible values: * iOS * Android * Web

        :param channel: The channel of this PaymentSetupRequest.
        :type channel: str
        """
        allowed_values = ["iOS", "Android", "Web"]  # noqa: E501
        if channel not in allowed_values:
            raise ValueError(
                "Invalid value for `channel` ({0}), must be one of {1}"
                .format(channel, allowed_values)
            )

        self._channel = channel

    @property
    def company(self):
        """Gets the company of this PaymentSetupRequest.

        Information regarding the company.

        :return: The company of this PaymentSetupRequest.
        :rtype: Company
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this PaymentSetupRequest.

        Information regarding the company.

        :param company: The company of this PaymentSetupRequest.
        :type company: Company
        """

        self._company = company

    @property
    def configuration(self):
        """Gets the configuration of this PaymentSetupRequest.

        Specify configurations to enable additional features.

        :return: The configuration of this PaymentSetupRequest.
        :rtype: Configuration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this PaymentSetupRequest.

        Specify configurations to enable additional features.

        :param configuration: The configuration of this PaymentSetupRequest.
        :type configuration: Configuration
        """

        self._configuration = configuration

    @property
    def country_code(self):
        """Gets the country_code of this PaymentSetupRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :return: The country_code of this PaymentSetupRequest.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this PaymentSetupRequest.

        The shopper country.  Format: [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) Example: NL or DE

        :param country_code: The country_code of this PaymentSetupRequest.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PaymentSetupRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :return: The date_of_birth of this PaymentSetupRequest.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PaymentSetupRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :param date_of_birth: The date_of_birth of this PaymentSetupRequest.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def dcc_quote(self):
        """Gets the dcc_quote of this PaymentSetupRequest.

        The forex quote as returned in the response of the forex service.

        :return: The dcc_quote of this PaymentSetupRequest.
        :rtype: ForexQuote
        """
        return self._dcc_quote

    @dcc_quote.setter
    def dcc_quote(self, dcc_quote):
        """Sets the dcc_quote of this PaymentSetupRequest.

        The forex quote as returned in the response of the forex service.

        :param dcc_quote: The dcc_quote of this PaymentSetupRequest.
        :type dcc_quote: ForexQuote
        """

        self._dcc_quote = dcc_quote

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PaymentSetupRequest.

        The address where the purchased goods should be delivered.

        :return: The delivery_address of this PaymentSetupRequest.
        :rtype: Address
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PaymentSetupRequest.

        The address where the purchased goods should be delivered.

        :param delivery_address: The delivery_address of this PaymentSetupRequest.
        :type delivery_address: Address
        """

        self._delivery_address = delivery_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this PaymentSetupRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :return: The delivery_date of this PaymentSetupRequest.
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this PaymentSetupRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :param delivery_date: The delivery_date of this PaymentSetupRequest.
        :type delivery_date: datetime
        """

        self._delivery_date = delivery_date

    @property
    def enable_one_click(self):
        """Gets the enable_one_click of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :return: The enable_one_click of this PaymentSetupRequest.
        :rtype: bool
        """
        return self._enable_one_click

    @enable_one_click.setter
    def enable_one_click(self, enable_one_click):
        """Sets the enable_one_click of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the shopper will be asked if the payment details should be stored for future one-click payments.

        :param enable_one_click: The enable_one_click of this PaymentSetupRequest.
        :type enable_one_click: bool
        """

        self._enable_one_click = enable_one_click

    @property
    def enable_pay_out(self):
        """Gets the enable_pay_out of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :return: The enable_pay_out of this PaymentSetupRequest.
        :rtype: bool
        """
        return self._enable_pay_out

    @enable_pay_out.setter
    def enable_pay_out(self, enable_pay_out):
        """Sets the enable_pay_out of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for payouts.

        :param enable_pay_out: The enable_pay_out of this PaymentSetupRequest.
        :type enable_pay_out: bool
        """

        self._enable_pay_out = enable_pay_out

    @property
    def enable_recurring(self):
        """Gets the enable_recurring of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :return: The enable_recurring of this PaymentSetupRequest.
        :rtype: bool
        """
        return self._enable_recurring

    @enable_recurring.setter
    def enable_recurring(self, enable_recurring):
        """Sets the enable_recurring of this PaymentSetupRequest.

        When true and `shopperReference` is provided, the payment details will be tokenized for recurring payments.

        :param enable_recurring: The enable_recurring of this PaymentSetupRequest.
        :type enable_recurring: bool
        """

        self._enable_recurring = enable_recurring

    @property
    def entity_type(self):
        """Gets the entity_type of this PaymentSetupRequest.

        The type of the entity the payment is processed for.

        :return: The entity_type of this PaymentSetupRequest.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PaymentSetupRequest.

        The type of the entity the payment is processed for.

        :param entity_type: The entity_type of this PaymentSetupRequest.
        :type entity_type: str
        """
        allowed_values = ["NaturalPerson", "CompanyName"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this PaymentSetupRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this PaymentSetupRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this PaymentSetupRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this PaymentSetupRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def installments(self):
        """Gets the installments of this PaymentSetupRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :return: The installments of this PaymentSetupRequest.
        :rtype: Installments
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PaymentSetupRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :param installments: The installments of this PaymentSetupRequest.
        :type installments: Installments
        """

        self._installments = installments

    @property
    def line_items(self):
        """Gets the line_items of this PaymentSetupRequest.

        Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, and Zip.

        :return: The line_items of this PaymentSetupRequest.
        :rtype: List[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this PaymentSetupRequest.

        Price and product information of the refunded items, required for [partial refunds](https://docs.adyen.com/online-payments/refund#refund-a-payment). > This field is required for partial refunds with 3x 4x Oney, Affirm, Afterpay, Atome, Clearpay, Klarna, Ratepay, and Zip.

        :param line_items: The line_items of this PaymentSetupRequest.
        :type line_items: List[LineItem]
        """

        self._line_items = line_items

    @property
    def mandate(self):
        """Gets the mandate of this PaymentSetupRequest.

        The mandate details to initiate recurring transaction.

        :return: The mandate of this PaymentSetupRequest.
        :rtype: Mandate
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """Sets the mandate of this PaymentSetupRequest.

        The mandate details to initiate recurring transaction.

        :param mandate: The mandate of this PaymentSetupRequest.
        :type mandate: Mandate
        """

        self._mandate = mandate

    @property
    def mcc(self):
        """Gets the mcc of this PaymentSetupRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :return: The mcc of this PaymentSetupRequest.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this PaymentSetupRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :param mcc: The mcc of this PaymentSetupRequest.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentSetupRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this PaymentSetupRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentSetupRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this PaymentSetupRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_order_reference(self):
        """Gets the merchant_order_reference of this PaymentSetupRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :return: The merchant_order_reference of this PaymentSetupRequest.
        :rtype: str
        """
        return self._merchant_order_reference

    @merchant_order_reference.setter
    def merchant_order_reference(self, merchant_order_reference):
        """Sets the merchant_order_reference of this PaymentSetupRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :param merchant_order_reference: The merchant_order_reference of this PaymentSetupRequest.
        :type merchant_order_reference: str
        """

        self._merchant_order_reference = merchant_order_reference

    @property
    def metadata(self):
        """Gets the metadata of this PaymentSetupRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :return: The metadata of this PaymentSetupRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentSetupRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :param metadata: The metadata of this PaymentSetupRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def order_reference(self):
        """Gets the order_reference of this PaymentSetupRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :return: The order_reference of this PaymentSetupRequest.
        :rtype: str
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this PaymentSetupRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :param order_reference: The order_reference of this PaymentSetupRequest.
        :type order_reference: str
        """

        self._order_reference = order_reference

    @property
    def origin(self):
        """Gets the origin of this PaymentSetupRequest.

        Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.

        :return: The origin of this PaymentSetupRequest.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this PaymentSetupRequest.

        Required for the Web integration.  Set this parameter to the origin URL of the page that you are loading the SDK from.

        :param origin: The origin of this PaymentSetupRequest.
        :type origin: str
        """

        self._origin = origin

    @property
    def recurring_expiry(self):
        """Gets the recurring_expiry of this PaymentSetupRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :return: The recurring_expiry of this PaymentSetupRequest.
        :rtype: str
        """
        return self._recurring_expiry

    @recurring_expiry.setter
    def recurring_expiry(self, recurring_expiry):
        """Sets the recurring_expiry of this PaymentSetupRequest.

        Date after which no further authorisations shall be performed. Only for 3D Secure 2.

        :param recurring_expiry: The recurring_expiry of this PaymentSetupRequest.
        :type recurring_expiry: str
        """

        self._recurring_expiry = recurring_expiry

    @property
    def recurring_frequency(self):
        """Gets the recurring_frequency of this PaymentSetupRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :return: The recurring_frequency of this PaymentSetupRequest.
        :rtype: str
        """
        return self._recurring_frequency

    @recurring_frequency.setter
    def recurring_frequency(self, recurring_frequency):
        """Sets the recurring_frequency of this PaymentSetupRequest.

        Minimum number of days between authorisations. Only for 3D Secure 2.

        :param recurring_frequency: The recurring_frequency of this PaymentSetupRequest.
        :type recurring_frequency: str
        """

        self._recurring_frequency = recurring_frequency

    @property
    def reference(self):
        """Gets the reference of this PaymentSetupRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this PaymentSetupRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentSetupRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this PaymentSetupRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def return_url(self):
        """Gets the return_url of this PaymentSetupRequest.

        The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`

        :return: The return_url of this PaymentSetupRequest.
        :rtype: str
        """
        return self._return_url

    @return_url.setter
    def return_url(self, return_url):
        """Sets the return_url of this PaymentSetupRequest.

        The URL to return to in case of a redirection. The format depends on the channel. This URL can have a maximum of 1024 characters. * For web, include the protocol `http://` or `https://`. You can also include your own additional query parameters, for example, shopper ID or order reference number. Example: `https://your-company.com/checkout?shopperOrder=12xy` * For iOS, use the custom URL for your app. To know more about setting custom URL schemes, refer to the [Apple Developer documentation](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app). Example: `my-app://` * For Android, use a custom URL handled by an Activity on your app. You can configure it with an [intent filter](https://developer.android.com/guide/components/intents-filters). Example: `my-app://your.package.name`

        :param return_url: The return_url of this PaymentSetupRequest.
        :type return_url: str
        """
        if return_url is None:
            raise ValueError("Invalid value for `return_url`, must not be `None`")
        if return_url is not None and len(return_url) > 8000:
            raise ValueError("Invalid value for `return_url`, length must be less than or equal to `8000`")

        self._return_url = return_url

    @property
    def risk_data(self):
        """Gets the risk_data of this PaymentSetupRequest.

        Contains risk data, such as client-side data, used to identify risk for a transaction.

        :return: The risk_data of this PaymentSetupRequest.
        :rtype: RiskData
        """
        return self._risk_data

    @risk_data.setter
    def risk_data(self, risk_data):
        """Sets the risk_data of this PaymentSetupRequest.

        Contains risk data, such as client-side data, used to identify risk for a transaction.

        :param risk_data: The risk_data of this PaymentSetupRequest.
        :type risk_data: RiskData
        """

        self._risk_data = risk_data

    @property
    def sdk_version(self):
        """Gets the sdk_version of this PaymentSetupRequest.

        The version of the SDK you are using (for Web SDK integrations only).

        :return: The sdk_version of this PaymentSetupRequest.
        :rtype: str
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this PaymentSetupRequest.

        The version of the SDK you are using (for Web SDK integrations only).

        :param sdk_version: The sdk_version of this PaymentSetupRequest.
        :type sdk_version: str
        """

        self._sdk_version = sdk_version

    @property
    def session_validity(self):
        """Gets the session_validity of this PaymentSetupRequest.

        The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00

        :return: The session_validity of this PaymentSetupRequest.
        :rtype: str
        """
        return self._session_validity

    @session_validity.setter
    def session_validity(self, session_validity):
        """Sets the session_validity of this PaymentSetupRequest.

        The date and time until when the session remains valid, in [ISO 8601](https://www.w3.org/TR/NOTE-datetime) format.  For example: 2020-07-18T15:42:40.428+01:00

        :param session_validity: The session_validity of this PaymentSetupRequest.
        :type session_validity: str
        """

        self._session_validity = session_validity

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PaymentSetupRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :return: The shopper_email of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PaymentSetupRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :param shopper_email: The shopper_email of this PaymentSetupRequest.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_ip(self):
        """Gets the shopper_ip of this PaymentSetupRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The shopper_ip of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_ip

    @shopper_ip.setter
    def shopper_ip(self, shopper_ip):
        """Sets the shopper_ip of this PaymentSetupRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param shopper_ip: The shopper_ip of this PaymentSetupRequest.
        :type shopper_ip: str
        """

        self._shopper_ip = shopper_ip

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this PaymentSetupRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this PaymentSetupRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this PaymentSetupRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentSetupRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :return: The shopper_locale of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentSetupRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :param shopper_locale: The shopper_locale of this PaymentSetupRequest.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_name(self):
        """Gets the shopper_name of this PaymentSetupRequest.

        The shopper's full name.

        :return: The shopper_name of this PaymentSetupRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this PaymentSetupRequest.

        The shopper's full name.

        :param shopper_name: The shopper_name of this PaymentSetupRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PaymentSetupRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PaymentSetupRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this PaymentSetupRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this PaymentSetupRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :return: The shopper_statement of this PaymentSetupRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this PaymentSetupRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :param shopper_statement: The shopper_statement of this PaymentSetupRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def social_security_number(self):
        """Gets the social_security_number of this PaymentSetupRequest.

        The shopper's social security number.

        :return: The social_security_number of this PaymentSetupRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this PaymentSetupRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this PaymentSetupRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def splits(self):
        """Gets the splits of this PaymentSetupRequest.

        An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).

        :return: The splits of this PaymentSetupRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this PaymentSetupRequest.

        An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).

        :param splits: The splits of this PaymentSetupRequest.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def store(self):
        """Gets the store of this PaymentSetupRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :return: The store of this PaymentSetupRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PaymentSetupRequest.

        Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.

        :param store: The store of this PaymentSetupRequest.
        :type store: str
        """
        if store is not None and len(store) > 16:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `16`")
        if store is not None and len(store) < 1:
            raise ValueError("Invalid value for `store`, length must be greater than or equal to `1`")

        self._store = store

    @property
    def telephone_number(self):
        """Gets the telephone_number of this PaymentSetupRequest.

        The shopper's telephone number.

        :return: The telephone_number of this PaymentSetupRequest.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this PaymentSetupRequest.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this PaymentSetupRequest.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def token(self):
        """Gets the token of this PaymentSetupRequest.

        The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web.

        :return: The token of this PaymentSetupRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentSetupRequest.

        The token obtained when initializing the SDK.  > This parameter is required for iOS and Android; not required for Web.

        :param token: The token of this PaymentSetupRequest.
        :type token: str
        """

        self._token = token

    @property
    def trusted_shopper(self):
        """Gets the trusted_shopper of this PaymentSetupRequest.

        Set to true if the payment should be routed to a trusted MID.

        :return: The trusted_shopper of this PaymentSetupRequest.
        :rtype: bool
        """
        return self._trusted_shopper

    @trusted_shopper.setter
    def trusted_shopper(self, trusted_shopper):
        """Sets the trusted_shopper of this PaymentSetupRequest.

        Set to true if the payment should be routed to a trusted MID.

        :param trusted_shopper: The trusted_shopper of this PaymentSetupRequest.
        :type trusted_shopper: bool
        """

        self._trusted_shopper = trusted_shopper
