# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShopperInput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: str=None, delivery_address: str=None, personal_details: str=None):
        """ShopperInput - a model defined in OpenAPI

        :param billing_address: The billing_address of this ShopperInput.
        :param delivery_address: The delivery_address of this ShopperInput.
        :param personal_details: The personal_details of this ShopperInput.
        """
        self.openapi_types = {
            'billing_address': str,
            'delivery_address': str,
            'personal_details': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'delivery_address': 'deliveryAddress',
            'personal_details': 'personalDetails'
        }

        self._billing_address = billing_address
        self._delivery_address = delivery_address
        self._personal_details = personal_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShopperInput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShopperInput of this ShopperInput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this ShopperInput.

        Specifies visibility of billing address fields.  Permitted values: * editable * hidden * readOnly

        :return: The billing_address of this ShopperInput.
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this ShopperInput.

        Specifies visibility of billing address fields.  Permitted values: * editable * hidden * readOnly

        :param billing_address: The billing_address of this ShopperInput.
        :type billing_address: str
        """
        allowed_values = ["editable", "hidden", "readOnly"]  # noqa: E501
        if billing_address not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_address` ({0}), must be one of {1}"
                .format(billing_address, allowed_values)
            )

        self._billing_address = billing_address

    @property
    def delivery_address(self):
        """Gets the delivery_address of this ShopperInput.

        Specifies visibility of delivery address fields.  Permitted values: * editable * hidden * readOnly

        :return: The delivery_address of this ShopperInput.
        :rtype: str
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this ShopperInput.

        Specifies visibility of delivery address fields.  Permitted values: * editable * hidden * readOnly

        :param delivery_address: The delivery_address of this ShopperInput.
        :type delivery_address: str
        """
        allowed_values = ["editable", "hidden", "readOnly"]  # noqa: E501
        if delivery_address not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_address` ({0}), must be one of {1}"
                .format(delivery_address, allowed_values)
            )

        self._delivery_address = delivery_address

    @property
    def personal_details(self):
        """Gets the personal_details of this ShopperInput.

        Specifies visibility of personal details.  Permitted values: * editable * hidden * readOnly

        :return: The personal_details of this ShopperInput.
        :rtype: str
        """
        return self._personal_details

    @personal_details.setter
    def personal_details(self, personal_details):
        """Sets the personal_details of this ShopperInput.

        Specifies visibility of personal details.  Permitted values: * editable * hidden * readOnly

        :param personal_details: The personal_details of this ShopperInput.
        :type personal_details: str
        """
        allowed_values = ["editable", "hidden", "readOnly"]  # noqa: E501
        if personal_details not in allowed_values:
            raise ValueError(
                "Invalid value for `personal_details` ({0}), must be one of {1}"
                .format(personal_details, allowed_values)
            )

        self._personal_details = personal_details
