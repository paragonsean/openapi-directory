# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_check_response_additional_data import BalanceCheckResponseAdditionalData
from openapi_server.models.checkout_order_response import CheckoutOrderResponse
from openapi_server.models.fraud_result import FraudResult
from openapi_server.models.service_error_details import ServiceErrorDetails
from openapi_server import util


class PaymentVerificationResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: BalanceCheckResponseAdditionalData=None, auth_response: str=None, fraud_result: FraudResult=None, merchant_reference: str=None, order: CheckoutOrderResponse=None, payment_method: str=None, psp_reference: str=None, refusal_reason: str=None, refusal_reason_code: str=None, result_code: str=None, service_error: ServiceErrorDetails=None, shopper_locale: str=None):
        """PaymentVerificationResponse - a model defined in OpenAPI

        :param additional_data: The additional_data of this PaymentVerificationResponse.
        :param auth_response: The auth_response of this PaymentVerificationResponse.
        :param fraud_result: The fraud_result of this PaymentVerificationResponse.
        :param merchant_reference: The merchant_reference of this PaymentVerificationResponse.
        :param order: The order of this PaymentVerificationResponse.
        :param payment_method: The payment_method of this PaymentVerificationResponse.
        :param psp_reference: The psp_reference of this PaymentVerificationResponse.
        :param refusal_reason: The refusal_reason of this PaymentVerificationResponse.
        :param refusal_reason_code: The refusal_reason_code of this PaymentVerificationResponse.
        :param result_code: The result_code of this PaymentVerificationResponse.
        :param service_error: The service_error of this PaymentVerificationResponse.
        :param shopper_locale: The shopper_locale of this PaymentVerificationResponse.
        """
        self.openapi_types = {
            'additional_data': BalanceCheckResponseAdditionalData,
            'auth_response': str,
            'fraud_result': FraudResult,
            'merchant_reference': str,
            'order': CheckoutOrderResponse,
            'payment_method': str,
            'psp_reference': str,
            'refusal_reason': str,
            'refusal_reason_code': str,
            'result_code': str,
            'service_error': ServiceErrorDetails,
            'shopper_locale': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'auth_response': 'authResponse',
            'fraud_result': 'fraudResult',
            'merchant_reference': 'merchantReference',
            'order': 'order',
            'payment_method': 'paymentMethod',
            'psp_reference': 'pspReference',
            'refusal_reason': 'refusalReason',
            'refusal_reason_code': 'refusalReasonCode',
            'result_code': 'resultCode',
            'service_error': 'serviceError',
            'shopper_locale': 'shopperLocale'
        }

        self._additional_data = additional_data
        self._auth_response = auth_response
        self._fraud_result = fraud_result
        self._merchant_reference = merchant_reference
        self._order = order
        self._payment_method = payment_method
        self._psp_reference = psp_reference
        self._refusal_reason = refusal_reason
        self._refusal_reason_code = refusal_reason_code
        self._result_code = result_code
        self._service_error = service_error
        self._shopper_locale = shopper_locale

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentVerificationResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentVerificationResponse of this PaymentVerificationResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentVerificationResponse.


        :return: The additional_data of this PaymentVerificationResponse.
        :rtype: BalanceCheckResponseAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentVerificationResponse.


        :param additional_data: The additional_data of this PaymentVerificationResponse.
        :type additional_data: BalanceCheckResponseAdditionalData
        """

        self._additional_data = additional_data

    @property
    def auth_response(self):
        """Gets the auth_response of this PaymentVerificationResponse.

        The authorisation code representing the authentication result.  Possible values: * Received * Authorised * Error * Refused * Cancelled * Unknown

        :return: The auth_response of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._auth_response

    @auth_response.setter
    def auth_response(self, auth_response):
        """Sets the auth_response of this PaymentVerificationResponse.

        The authorisation code representing the authentication result.  Possible values: * Received * Authorised * Error * Refused * Cancelled * Unknown

        :param auth_response: The auth_response of this PaymentVerificationResponse.
        :type auth_response: str
        """
        if auth_response is None:
            raise ValueError("Invalid value for `auth_response`, must not be `None`")

        self._auth_response = auth_response

    @property
    def fraud_result(self):
        """Gets the fraud_result of this PaymentVerificationResponse.

        The fraud result properties of the payment.

        :return: The fraud_result of this PaymentVerificationResponse.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this PaymentVerificationResponse.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this PaymentVerificationResponse.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PaymentVerificationResponse.

        A unique value that you provided in the initial `/paymentSession` request as a `reference` field.

        :return: The merchant_reference of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PaymentVerificationResponse.

        A unique value that you provided in the initial `/paymentSession` request as a `reference` field.

        :param merchant_reference: The merchant_reference of this PaymentVerificationResponse.
        :type merchant_reference: str
        """
        if merchant_reference is None:
            raise ValueError("Invalid value for `merchant_reference`, must not be `None`")

        self._merchant_reference = merchant_reference

    @property
    def order(self):
        """Gets the order of this PaymentVerificationResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :return: The order of this PaymentVerificationResponse.
        :rtype: CheckoutOrderResponse
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PaymentVerificationResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :param order: The order of this PaymentVerificationResponse.
        :type order: CheckoutOrderResponse
        """

        self._order = order

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentVerificationResponse.

        The payment method used in the transaction.

        :return: The payment_method of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentVerificationResponse.

        The payment method used in the transaction.

        :param payment_method: The payment_method of this PaymentVerificationResponse.
        :type payment_method: str
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def psp_reference(self):
        """Gets the psp_reference of this PaymentVerificationResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this PaymentVerificationResponse.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this PaymentVerificationResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this PaymentVerificationResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this PaymentVerificationResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this PaymentVerificationResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def refusal_reason_code(self):
        """Gets the refusal_reason_code of this PaymentVerificationResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason_code of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._refusal_reason_code

    @refusal_reason_code.setter
    def refusal_reason_code(self, refusal_reason_code):
        """Sets the refusal_reason_code of this PaymentVerificationResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason_code: The refusal_reason_code of this PaymentVerificationResponse.
        :type refusal_reason_code: str
        """

        self._refusal_reason_code = refusal_reason_code

    @property
    def result_code(self):
        """Gets the result_code of this PaymentVerificationResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :return: The result_code of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this PaymentVerificationResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :param result_code: The result_code of this PaymentVerificationResponse.
        :type result_code: str
        """
        allowed_values = ["AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code

    @property
    def service_error(self):
        """Gets the service_error of this PaymentVerificationResponse.

        The type of the error.

        :return: The service_error of this PaymentVerificationResponse.
        :rtype: ServiceErrorDetails
        """
        return self._service_error

    @service_error.setter
    def service_error(self, service_error):
        """Sets the service_error of this PaymentVerificationResponse.

        The type of the error.

        :param service_error: The service_error of this PaymentVerificationResponse.
        :type service_error: ServiceErrorDetails
        """

        self._service_error = service_error

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentVerificationResponse.

        The shopperLocale value provided in the payment request.

        :return: The shopper_locale of this PaymentVerificationResponse.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentVerificationResponse.

        The shopperLocale value provided in the payment request.

        :param shopper_locale: The shopper_locale of this PaymentVerificationResponse.
        :type shopper_locale: str
        """
        if shopper_locale is None:
            raise ValueError("Invalid value for `shopper_locale`, must not be `None`")

        self._shopper_locale = shopper_locale
