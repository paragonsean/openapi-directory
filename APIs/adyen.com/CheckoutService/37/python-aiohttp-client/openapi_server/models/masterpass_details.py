# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MasterpassDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, funding_source: str=None, masterpass_transaction_id: str=None, type: str='masterpass'):
        """MasterpassDetails - a model defined in OpenAPI

        :param funding_source: The funding_source of this MasterpassDetails.
        :param masterpass_transaction_id: The masterpass_transaction_id of this MasterpassDetails.
        :param type: The type of this MasterpassDetails.
        """
        self.openapi_types = {
            'funding_source': str,
            'masterpass_transaction_id': str,
            'type': str
        }

        self.attribute_map = {
            'funding_source': 'fundingSource',
            'masterpass_transaction_id': 'masterpassTransactionId',
            'type': 'type'
        }

        self._funding_source = funding_source
        self._masterpass_transaction_id = masterpass_transaction_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MasterpassDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MasterpassDetails of this MasterpassDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def funding_source(self):
        """Gets the funding_source of this MasterpassDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this MasterpassDetails.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this MasterpassDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this MasterpassDetails.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def masterpass_transaction_id(self):
        """Gets the masterpass_transaction_id of this MasterpassDetails.

        The Masterpass transaction ID.

        :return: The masterpass_transaction_id of this MasterpassDetails.
        :rtype: str
        """
        return self._masterpass_transaction_id

    @masterpass_transaction_id.setter
    def masterpass_transaction_id(self, masterpass_transaction_id):
        """Sets the masterpass_transaction_id of this MasterpassDetails.

        The Masterpass transaction ID.

        :param masterpass_transaction_id: The masterpass_transaction_id of this MasterpassDetails.
        :type masterpass_transaction_id: str
        """
        if masterpass_transaction_id is None:
            raise ValueError("Invalid value for `masterpass_transaction_id`, must not be `None`")

        self._masterpass_transaction_id = masterpass_transaction_id

    @property
    def type(self):
        """Gets the type of this MasterpassDetails.

        **masterpass**

        :return: The type of this MasterpassDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MasterpassDetails.

        **masterpass**

        :param type: The type of this MasterpassDetails.
        :type type: str
        """
        allowed_values = ["masterpass"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
