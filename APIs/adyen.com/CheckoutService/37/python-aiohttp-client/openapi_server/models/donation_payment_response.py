# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.payment_response import PaymentResponse
from openapi_server import util


class DonationPaymentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, donation_account: str=None, id: str=None, merchant_account: str=None, payment: PaymentResponse=None, reference: str=None, status: str=None):
        """DonationPaymentResponse - a model defined in OpenAPI

        :param amount: The amount of this DonationPaymentResponse.
        :param donation_account: The donation_account of this DonationPaymentResponse.
        :param id: The id of this DonationPaymentResponse.
        :param merchant_account: The merchant_account of this DonationPaymentResponse.
        :param payment: The payment of this DonationPaymentResponse.
        :param reference: The reference of this DonationPaymentResponse.
        :param status: The status of this DonationPaymentResponse.
        """
        self.openapi_types = {
            'amount': Amount,
            'donation_account': str,
            'id': str,
            'merchant_account': str,
            'payment': PaymentResponse,
            'reference': str,
            'status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'donation_account': 'donationAccount',
            'id': 'id',
            'merchant_account': 'merchantAccount',
            'payment': 'payment',
            'reference': 'reference',
            'status': 'status'
        }

        self._amount = amount
        self._donation_account = donation_account
        self._id = id
        self._merchant_account = merchant_account
        self._payment = payment
        self._reference = reference
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DonationPaymentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DonationPaymentResponse of this DonationPaymentResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this DonationPaymentResponse.

        Authorised amount in the transaction.

        :return: The amount of this DonationPaymentResponse.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DonationPaymentResponse.

        Authorised amount in the transaction.

        :param amount: The amount of this DonationPaymentResponse.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def donation_account(self):
        """Gets the donation_account of this DonationPaymentResponse.

        The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).

        :return: The donation_account of this DonationPaymentResponse.
        :rtype: str
        """
        return self._donation_account

    @donation_account.setter
    def donation_account(self, donation_account):
        """Sets the donation_account of this DonationPaymentResponse.

        The Adyen account name of your charity. We will provide you with this account name once your chosen charity has been [onboarded](https://docs.adyen.com/online-payments/donations#onboarding).

        :param donation_account: The donation_account of this DonationPaymentResponse.
        :type donation_account: str
        """

        self._donation_account = donation_account

    @property
    def id(self):
        """Gets the id of this DonationPaymentResponse.

        Your unique resource identifier.

        :return: The id of this DonationPaymentResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DonationPaymentResponse.

        Your unique resource identifier.

        :param id: The id of this DonationPaymentResponse.
        :type id: str
        """

        self._id = id

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DonationPaymentResponse.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this DonationPaymentResponse.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DonationPaymentResponse.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this DonationPaymentResponse.
        :type merchant_account: str
        """

        self._merchant_account = merchant_account

    @property
    def payment(self):
        """Gets the payment of this DonationPaymentResponse.

        Action to be taken for completing the payment.

        :return: The payment of this DonationPaymentResponse.
        :rtype: PaymentResponse
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this DonationPaymentResponse.

        Action to be taken for completing the payment.

        :param payment: The payment of this DonationPaymentResponse.
        :type payment: PaymentResponse
        """

        self._payment = payment

    @property
    def reference(self):
        """Gets the reference of this DonationPaymentResponse.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this DonationPaymentResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this DonationPaymentResponse.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this DonationPaymentResponse.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this DonationPaymentResponse.

        The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**

        :return: The status of this DonationPaymentResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DonationPaymentResponse.

        The status of the donation transaction.  Possible values: * **completed** * **pending** * **refused**

        :param status: The status of this DonationPaymentResponse.
        :type status: str
        """
        allowed_values = ["completed", "pending", "refused"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
