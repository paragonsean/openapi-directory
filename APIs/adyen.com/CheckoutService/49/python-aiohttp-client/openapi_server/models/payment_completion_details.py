# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentCompletionDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, md: str=None, pa_req: str=None, pa_res: str=None, authorization_token: str=None, billing_token: str=None, cupsecureplus_smscode: str=None, facilitator_access_token: str=None, one_time_passcode: str=None, order_id: str=None, payer_id: str=None, payload: str=None, payment_id: str=None, payment_status: str=None, redirect_result: str=None, result_code: str=None, three_ds_result: str=None, threeds2_challenge_result: str=None, threeds2_fingerprint: str=None):
        """PaymentCompletionDetails - a model defined in OpenAPI

        :param md: The md of this PaymentCompletionDetails.
        :param pa_req: The pa_req of this PaymentCompletionDetails.
        :param pa_res: The pa_res of this PaymentCompletionDetails.
        :param authorization_token: The authorization_token of this PaymentCompletionDetails.
        :param billing_token: The billing_token of this PaymentCompletionDetails.
        :param cupsecureplus_smscode: The cupsecureplus_smscode of this PaymentCompletionDetails.
        :param facilitator_access_token: The facilitator_access_token of this PaymentCompletionDetails.
        :param one_time_passcode: The one_time_passcode of this PaymentCompletionDetails.
        :param order_id: The order_id of this PaymentCompletionDetails.
        :param payer_id: The payer_id of this PaymentCompletionDetails.
        :param payload: The payload of this PaymentCompletionDetails.
        :param payment_id: The payment_id of this PaymentCompletionDetails.
        :param payment_status: The payment_status of this PaymentCompletionDetails.
        :param redirect_result: The redirect_result of this PaymentCompletionDetails.
        :param result_code: The result_code of this PaymentCompletionDetails.
        :param three_ds_result: The three_ds_result of this PaymentCompletionDetails.
        :param threeds2_challenge_result: The threeds2_challenge_result of this PaymentCompletionDetails.
        :param threeds2_fingerprint: The threeds2_fingerprint of this PaymentCompletionDetails.
        """
        self.openapi_types = {
            'md': str,
            'pa_req': str,
            'pa_res': str,
            'authorization_token': str,
            'billing_token': str,
            'cupsecureplus_smscode': str,
            'facilitator_access_token': str,
            'one_time_passcode': str,
            'order_id': str,
            'payer_id': str,
            'payload': str,
            'payment_id': str,
            'payment_status': str,
            'redirect_result': str,
            'result_code': str,
            'three_ds_result': str,
            'threeds2_challenge_result': str,
            'threeds2_fingerprint': str
        }

        self.attribute_map = {
            'md': 'MD',
            'pa_req': 'PaReq',
            'pa_res': 'PaRes',
            'authorization_token': 'authorization_token',
            'billing_token': 'billingToken',
            'cupsecureplus_smscode': 'cupsecureplus.smscode',
            'facilitator_access_token': 'facilitatorAccessToken',
            'one_time_passcode': 'oneTimePasscode',
            'order_id': 'orderID',
            'payer_id': 'payerID',
            'payload': 'payload',
            'payment_id': 'paymentID',
            'payment_status': 'paymentStatus',
            'redirect_result': 'redirectResult',
            'result_code': 'resultCode',
            'three_ds_result': 'threeDSResult',
            'threeds2_challenge_result': 'threeds2.challengeResult',
            'threeds2_fingerprint': 'threeds2.fingerprint'
        }

        self._md = md
        self._pa_req = pa_req
        self._pa_res = pa_res
        self._authorization_token = authorization_token
        self._billing_token = billing_token
        self._cupsecureplus_smscode = cupsecureplus_smscode
        self._facilitator_access_token = facilitator_access_token
        self._one_time_passcode = one_time_passcode
        self._order_id = order_id
        self._payer_id = payer_id
        self._payload = payload
        self._payment_id = payment_id
        self._payment_status = payment_status
        self._redirect_result = redirect_result
        self._result_code = result_code
        self._three_ds_result = three_ds_result
        self._threeds2_challenge_result = threeds2_challenge_result
        self._threeds2_fingerprint = threeds2_fingerprint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentCompletionDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentCompletionDetails of this PaymentCompletionDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def md(self):
        """Gets the md of this PaymentCompletionDetails.

        A payment session identifier returned by the card issuer.

        :return: The md of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._md

    @md.setter
    def md(self, md):
        """Sets the md of this PaymentCompletionDetails.

        A payment session identifier returned by the card issuer.

        :param md: The md of this PaymentCompletionDetails.
        :type md: str
        """
        if md is not None and len(md) > 20000:
            raise ValueError("Invalid value for `md`, length must be less than or equal to `20000`")

        self._md = md

    @property
    def pa_req(self):
        """Gets the pa_req of this PaymentCompletionDetails.

        (3D) Payment Authentication Request data for the card issuer.

        :return: The pa_req of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._pa_req

    @pa_req.setter
    def pa_req(self, pa_req):
        """Sets the pa_req of this PaymentCompletionDetails.

        (3D) Payment Authentication Request data for the card issuer.

        :param pa_req: The pa_req of this PaymentCompletionDetails.
        :type pa_req: str
        """

        self._pa_req = pa_req

    @property
    def pa_res(self):
        """Gets the pa_res of this PaymentCompletionDetails.

        (3D) Payment Authentication Response data by the card issuer.

        :return: The pa_res of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._pa_res

    @pa_res.setter
    def pa_res(self, pa_res):
        """Sets the pa_res of this PaymentCompletionDetails.

        (3D) Payment Authentication Response data by the card issuer.

        :param pa_res: The pa_res of this PaymentCompletionDetails.
        :type pa_res: str
        """
        if pa_res is not None and len(pa_res) > 20000:
            raise ValueError("Invalid value for `pa_res`, length must be less than or equal to `20000`")

        self._pa_res = pa_res

    @property
    def authorization_token(self):
        """Gets the authorization_token of this PaymentCompletionDetails.


        :return: The authorization_token of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._authorization_token

    @authorization_token.setter
    def authorization_token(self, authorization_token):
        """Sets the authorization_token of this PaymentCompletionDetails.


        :param authorization_token: The authorization_token of this PaymentCompletionDetails.
        :type authorization_token: str
        """

        self._authorization_token = authorization_token

    @property
    def billing_token(self):
        """Gets the billing_token of this PaymentCompletionDetails.

        PayPal-generated token for recurring payments.

        :return: The billing_token of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._billing_token

    @billing_token.setter
    def billing_token(self, billing_token):
        """Sets the billing_token of this PaymentCompletionDetails.

        PayPal-generated token for recurring payments.

        :param billing_token: The billing_token of this PaymentCompletionDetails.
        :type billing_token: str
        """

        self._billing_token = billing_token

    @property
    def cupsecureplus_smscode(self):
        """Gets the cupsecureplus_smscode of this PaymentCompletionDetails.

        The SMS verification code collected from the shopper.

        :return: The cupsecureplus_smscode of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._cupsecureplus_smscode

    @cupsecureplus_smscode.setter
    def cupsecureplus_smscode(self, cupsecureplus_smscode):
        """Sets the cupsecureplus_smscode of this PaymentCompletionDetails.

        The SMS verification code collected from the shopper.

        :param cupsecureplus_smscode: The cupsecureplus_smscode of this PaymentCompletionDetails.
        :type cupsecureplus_smscode: str
        """

        self._cupsecureplus_smscode = cupsecureplus_smscode

    @property
    def facilitator_access_token(self):
        """Gets the facilitator_access_token of this PaymentCompletionDetails.

        PayPal-generated third party access token.

        :return: The facilitator_access_token of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._facilitator_access_token

    @facilitator_access_token.setter
    def facilitator_access_token(self, facilitator_access_token):
        """Sets the facilitator_access_token of this PaymentCompletionDetails.

        PayPal-generated third party access token.

        :param facilitator_access_token: The facilitator_access_token of this PaymentCompletionDetails.
        :type facilitator_access_token: str
        """

        self._facilitator_access_token = facilitator_access_token

    @property
    def one_time_passcode(self):
        """Gets the one_time_passcode of this PaymentCompletionDetails.

        A random number sent to the mobile phone number of the shopper to verify the payment.

        :return: The one_time_passcode of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._one_time_passcode

    @one_time_passcode.setter
    def one_time_passcode(self, one_time_passcode):
        """Sets the one_time_passcode of this PaymentCompletionDetails.

        A random number sent to the mobile phone number of the shopper to verify the payment.

        :param one_time_passcode: The one_time_passcode of this PaymentCompletionDetails.
        :type one_time_passcode: str
        """

        self._one_time_passcode = one_time_passcode

    @property
    def order_id(self):
        """Gets the order_id of this PaymentCompletionDetails.

        PayPal-assigned ID for the order.

        :return: The order_id of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this PaymentCompletionDetails.

        PayPal-assigned ID for the order.

        :param order_id: The order_id of this PaymentCompletionDetails.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def payer_id(self):
        """Gets the payer_id of this PaymentCompletionDetails.

        PayPal-assigned ID for the payer (shopper).

        :return: The payer_id of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._payer_id

    @payer_id.setter
    def payer_id(self, payer_id):
        """Sets the payer_id of this PaymentCompletionDetails.

        PayPal-assigned ID for the payer (shopper).

        :param payer_id: The payer_id of this PaymentCompletionDetails.
        :type payer_id: str
        """

        self._payer_id = payer_id

    @property
    def payload(self):
        """Gets the payload of this PaymentCompletionDetails.

        Payload appended to the `returnURL` as a result of the redirect.

        :return: The payload of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this PaymentCompletionDetails.

        Payload appended to the `returnURL` as a result of the redirect.

        :param payload: The payload of this PaymentCompletionDetails.
        :type payload: str
        """
        if payload is not None and len(payload) > 20000:
            raise ValueError("Invalid value for `payload`, length must be less than or equal to `20000`")

        self._payload = payload

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentCompletionDetails.

        PayPal-generated ID for the payment.

        :return: The payment_id of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentCompletionDetails.

        PayPal-generated ID for the payment.

        :param payment_id: The payment_id of this PaymentCompletionDetails.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def payment_status(self):
        """Gets the payment_status of this PaymentCompletionDetails.

        Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`.

        :return: The payment_status of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._payment_status

    @payment_status.setter
    def payment_status(self, payment_status):
        """Sets the payment_status of this PaymentCompletionDetails.

        Value passed from the WeChat MiniProgram `wx.requestPayment` **complete** callback. Possible values: any value starting with `requestPayment:`.

        :param payment_status: The payment_status of this PaymentCompletionDetails.
        :type payment_status: str
        """

        self._payment_status = payment_status

    @property
    def redirect_result(self):
        """Gets the redirect_result of this PaymentCompletionDetails.

        The result of the redirect as appended to the `returnURL`.

        :return: The redirect_result of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._redirect_result

    @redirect_result.setter
    def redirect_result(self, redirect_result):
        """Sets the redirect_result of this PaymentCompletionDetails.

        The result of the redirect as appended to the `returnURL`.

        :param redirect_result: The redirect_result of this PaymentCompletionDetails.
        :type redirect_result: str
        """
        if redirect_result is not None and len(redirect_result) > 20000:
            raise ValueError("Invalid value for `redirect_result`, length must be less than or equal to `20000`")

        self._redirect_result = redirect_result

    @property
    def result_code(self):
        """Gets the result_code of this PaymentCompletionDetails.

        Value you received from the WeChat Pay SDK.

        :return: The result_code of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this PaymentCompletionDetails.

        Value you received from the WeChat Pay SDK.

        :param result_code: The result_code of this PaymentCompletionDetails.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def three_ds_result(self):
        """Gets the three_ds_result of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.

        :return: The three_ds_result of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._three_ds_result

    @three_ds_result.setter
    def three_ds_result(self, three_ds_result):
        """Sets the three_ds_result of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameters: `transStatus`, `authorisationToken`.

        :param three_ds_result: The three_ds_result of this PaymentCompletionDetails.
        :type three_ds_result: str
        """
        if three_ds_result is not None and len(three_ds_result) > 50000:
            raise ValueError("Invalid value for `three_ds_result`, length must be less than or equal to `50000`")

        self._three_ds_result = three_ds_result

    @property
    def threeds2_challenge_result(self):
        """Gets the threeds2_challenge_result of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.

        :return: The threeds2_challenge_result of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._threeds2_challenge_result

    @threeds2_challenge_result.setter
    def threeds2_challenge_result(self, threeds2_challenge_result):
        """Sets the threeds2_challenge_result of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `transStatus`.

        :param threeds2_challenge_result: The threeds2_challenge_result of this PaymentCompletionDetails.
        :type threeds2_challenge_result: str
        """
        if threeds2_challenge_result is not None and len(threeds2_challenge_result) > 50000:
            raise ValueError("Invalid value for `threeds2_challenge_result`, length must be less than or equal to `50000`")

        self._threeds2_challenge_result = threeds2_challenge_result

    @property
    def threeds2_fingerprint(self):
        """Gets the threeds2_fingerprint of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.

        :return: The threeds2_fingerprint of this PaymentCompletionDetails.
        :rtype: str
        """
        return self._threeds2_fingerprint

    @threeds2_fingerprint.setter
    def threeds2_fingerprint(self, threeds2_fingerprint):
        """Sets the threeds2_fingerprint of this PaymentCompletionDetails.

        Base64-encoded string returned by the Component after the challenge flow. It contains the following parameter: `threeDSCompInd`.

        :param threeds2_fingerprint: The threeds2_fingerprint of this PaymentCompletionDetails.
        :type threeds2_fingerprint: str
        """
        if threeds2_fingerprint is not None and len(threeds2_fingerprint) > 100000:
            raise ValueError("Invalid value for `threeds2_fingerprint`, length must be less than or equal to `100000`")

        self._threeds2_fingerprint = threeds2_fingerprint
