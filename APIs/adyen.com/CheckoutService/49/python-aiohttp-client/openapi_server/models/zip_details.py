# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ZipDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, click_and_collect: str=None, recurring_detail_reference: str=None, stored_payment_method_id: str=None, type: str='zip'):
        """ZipDetails - a model defined in OpenAPI

        :param click_and_collect: The click_and_collect of this ZipDetails.
        :param recurring_detail_reference: The recurring_detail_reference of this ZipDetails.
        :param stored_payment_method_id: The stored_payment_method_id of this ZipDetails.
        :param type: The type of this ZipDetails.
        """
        self.openapi_types = {
            'click_and_collect': str,
            'recurring_detail_reference': str,
            'stored_payment_method_id': str,
            'type': str
        }

        self.attribute_map = {
            'click_and_collect': 'clickAndCollect',
            'recurring_detail_reference': 'recurringDetailReference',
            'stored_payment_method_id': 'storedPaymentMethodId',
            'type': 'type'
        }

        self._click_and_collect = click_and_collect
        self._recurring_detail_reference = recurring_detail_reference
        self._stored_payment_method_id = stored_payment_method_id
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ZipDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ZipDetails of this ZipDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def click_and_collect(self):
        """Gets the click_and_collect of this ZipDetails.

        Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.

        :return: The click_and_collect of this ZipDetails.
        :rtype: str
        """
        return self._click_and_collect

    @click_and_collect.setter
    def click_and_collect(self, click_and_collect):
        """Sets the click_and_collect of this ZipDetails.

        Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.

        :param click_and_collect: The click_and_collect of this ZipDetails.
        :type click_and_collect: str
        """

        self._click_and_collect = click_and_collect

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this ZipDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The recurring_detail_reference of this ZipDetails.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this ZipDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param recurring_detail_reference: The recurring_detail_reference of this ZipDetails.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def stored_payment_method_id(self):
        """Gets the stored_payment_method_id of this ZipDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :return: The stored_payment_method_id of this ZipDetails.
        :rtype: str
        """
        return self._stored_payment_method_id

    @stored_payment_method_id.setter
    def stored_payment_method_id(self, stored_payment_method_id):
        """Sets the stored_payment_method_id of this ZipDetails.

        This is the `recurringDetailReference` returned in the response when you created the token.

        :param stored_payment_method_id: The stored_payment_method_id of this ZipDetails.
        :type stored_payment_method_id: str
        """
        if stored_payment_method_id is not None and len(stored_payment_method_id) > 64:
            raise ValueError("Invalid value for `stored_payment_method_id`, length must be less than or equal to `64`")

        self._stored_payment_method_id = stored_payment_method_id

    @property
    def type(self):
        """Gets the type of this ZipDetails.

        **zip**

        :return: The type of this ZipDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ZipDetails.

        **zip**

        :param type: The type of this ZipDetails.
        :type type: str
        """
        allowed_values = ["zip", "zip_pos"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
