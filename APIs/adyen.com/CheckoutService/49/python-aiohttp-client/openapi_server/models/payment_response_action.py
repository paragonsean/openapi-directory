# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.checkout_await_action import CheckoutAwaitAction
from openapi_server.models.checkout_native_redirect_action import CheckoutNativeRedirectAction
from openapi_server.models.checkout_qr_code_action import CheckoutQrCodeAction
from openapi_server.models.checkout_redirect_action import CheckoutRedirectAction
from openapi_server.models.checkout_sdk_action import CheckoutSDKAction
from openapi_server.models.checkout_three_ds2_challenge_action import CheckoutThreeDS2ChallengeAction
from openapi_server.models.checkout_three_ds2_finger_print_action import CheckoutThreeDS2FingerPrintAction
from openapi_server.models.checkout_voucher_action import CheckoutVoucherAction
from openapi_server import util


class PaymentResponseAction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_data: str=None, payment_method_type: str=None, type: str=None, url: str=None, data: Dict[str, str]=None, method: str=None, native_redirect_data: str=None, expires_at: str=None, qr_code_data: str=None, sdk_data: Dict[str, str]=None, token: str=None, alternative_reference: str=None, collection_institution_number: str=None, download_url: str=None, entity: str=None, initial_amount: Amount=None, instructions_url: str=None, issuer: str=None, masked_telephone_number: str=None, merchant_name: str=None, merchant_reference: str=None, reference: str=None, shopper_email: str=None, shopper_name: str=None, surcharge: Amount=None, total_amount: Amount=None):
        """PaymentResponseAction - a model defined in OpenAPI

        :param payment_data: The payment_data of this PaymentResponseAction.
        :param payment_method_type: The payment_method_type of this PaymentResponseAction.
        :param type: The type of this PaymentResponseAction.
        :param url: The url of this PaymentResponseAction.
        :param data: The data of this PaymentResponseAction.
        :param method: The method of this PaymentResponseAction.
        :param native_redirect_data: The native_redirect_data of this PaymentResponseAction.
        :param expires_at: The expires_at of this PaymentResponseAction.
        :param qr_code_data: The qr_code_data of this PaymentResponseAction.
        :param sdk_data: The sdk_data of this PaymentResponseAction.
        :param token: The token of this PaymentResponseAction.
        :param alternative_reference: The alternative_reference of this PaymentResponseAction.
        :param collection_institution_number: The collection_institution_number of this PaymentResponseAction.
        :param download_url: The download_url of this PaymentResponseAction.
        :param entity: The entity of this PaymentResponseAction.
        :param initial_amount: The initial_amount of this PaymentResponseAction.
        :param instructions_url: The instructions_url of this PaymentResponseAction.
        :param issuer: The issuer of this PaymentResponseAction.
        :param masked_telephone_number: The masked_telephone_number of this PaymentResponseAction.
        :param merchant_name: The merchant_name of this PaymentResponseAction.
        :param merchant_reference: The merchant_reference of this PaymentResponseAction.
        :param reference: The reference of this PaymentResponseAction.
        :param shopper_email: The shopper_email of this PaymentResponseAction.
        :param shopper_name: The shopper_name of this PaymentResponseAction.
        :param surcharge: The surcharge of this PaymentResponseAction.
        :param total_amount: The total_amount of this PaymentResponseAction.
        """
        self.openapi_types = {
            'payment_data': str,
            'payment_method_type': str,
            'type': str,
            'url': str,
            'data': Dict[str, str],
            'method': str,
            'native_redirect_data': str,
            'expires_at': str,
            'qr_code_data': str,
            'sdk_data': Dict[str, str],
            'token': str,
            'alternative_reference': str,
            'collection_institution_number': str,
            'download_url': str,
            'entity': str,
            'initial_amount': Amount,
            'instructions_url': str,
            'issuer': str,
            'masked_telephone_number': str,
            'merchant_name': str,
            'merchant_reference': str,
            'reference': str,
            'shopper_email': str,
            'shopper_name': str,
            'surcharge': Amount,
            'total_amount': Amount
        }

        self.attribute_map = {
            'payment_data': 'paymentData',
            'payment_method_type': 'paymentMethodType',
            'type': 'type',
            'url': 'url',
            'data': 'data',
            'method': 'method',
            'native_redirect_data': 'nativeRedirectData',
            'expires_at': 'expiresAt',
            'qr_code_data': 'qrCodeData',
            'sdk_data': 'sdkData',
            'token': 'token',
            'alternative_reference': 'alternativeReference',
            'collection_institution_number': 'collectionInstitutionNumber',
            'download_url': 'downloadUrl',
            'entity': 'entity',
            'initial_amount': 'initialAmount',
            'instructions_url': 'instructionsUrl',
            'issuer': 'issuer',
            'masked_telephone_number': 'maskedTelephoneNumber',
            'merchant_name': 'merchantName',
            'merchant_reference': 'merchantReference',
            'reference': 'reference',
            'shopper_email': 'shopperEmail',
            'shopper_name': 'shopperName',
            'surcharge': 'surcharge',
            'total_amount': 'totalAmount'
        }

        self._payment_data = payment_data
        self._payment_method_type = payment_method_type
        self._type = type
        self._url = url
        self._data = data
        self._method = method
        self._native_redirect_data = native_redirect_data
        self._expires_at = expires_at
        self._qr_code_data = qr_code_data
        self._sdk_data = sdk_data
        self._token = token
        self._alternative_reference = alternative_reference
        self._collection_institution_number = collection_institution_number
        self._download_url = download_url
        self._entity = entity
        self._initial_amount = initial_amount
        self._instructions_url = instructions_url
        self._issuer = issuer
        self._masked_telephone_number = masked_telephone_number
        self._merchant_name = merchant_name
        self._merchant_reference = merchant_reference
        self._reference = reference
        self._shopper_email = shopper_email
        self._shopper_name = shopper_name
        self._surcharge = surcharge
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResponseAction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResponse_action of this PaymentResponseAction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_data(self):
        """Gets the payment_data of this PaymentResponseAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :return: The payment_data of this PaymentResponseAction.
        :rtype: str
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this PaymentResponseAction.

        A value that must be submitted to the `/payments/details` endpoint to verify this payment.

        :param payment_data: The payment_data of this PaymentResponseAction.
        :type payment_data: str
        """

        self._payment_data = payment_data

    @property
    def payment_method_type(self):
        """Gets the payment_method_type of this PaymentResponseAction.

        Specifies the payment method.

        :return: The payment_method_type of this PaymentResponseAction.
        :rtype: str
        """
        return self._payment_method_type

    @payment_method_type.setter
    def payment_method_type(self, payment_method_type):
        """Sets the payment_method_type of this PaymentResponseAction.

        Specifies the payment method.

        :param payment_method_type: The payment_method_type of this PaymentResponseAction.
        :type payment_method_type: str
        """

        self._payment_method_type = payment_method_type

    @property
    def type(self):
        """Gets the type of this PaymentResponseAction.

        **await**

        :return: The type of this PaymentResponseAction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentResponseAction.

        **await**

        :param type: The type of this PaymentResponseAction.
        :type type: str
        """
        allowed_values = ["await", "nativeRedirect", "qrCode", "redirect", "sdk", "wechatpaySDK", "threeDS2Challenge", "threeDS2Fingerprint", "voucher"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self):
        """Gets the url of this PaymentResponseAction.

        Specifies the URL to redirect to.

        :return: The url of this PaymentResponseAction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PaymentResponseAction.

        Specifies the URL to redirect to.

        :param url: The url of this PaymentResponseAction.
        :type url: str
        """

        self._url = url

    @property
    def data(self):
        """Gets the data of this PaymentResponseAction.

        When the redirect URL must be accessed via POST, use this data to post to the redirect URL.

        :return: The data of this PaymentResponseAction.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this PaymentResponseAction.

        When the redirect URL must be accessed via POST, use this data to post to the redirect URL.

        :param data: The data of this PaymentResponseAction.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def method(self):
        """Gets the method of this PaymentResponseAction.

        Specifies the HTTP method, for example GET or POST.

        :return: The method of this PaymentResponseAction.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentResponseAction.

        Specifies the HTTP method, for example GET or POST.

        :param method: The method of this PaymentResponseAction.
        :type method: str
        """

        self._method = method

    @property
    def native_redirect_data(self):
        """Gets the native_redirect_data of this PaymentResponseAction.

        Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.

        :return: The native_redirect_data of this PaymentResponseAction.
        :rtype: str
        """
        return self._native_redirect_data

    @native_redirect_data.setter
    def native_redirect_data(self, native_redirect_data):
        """Sets the native_redirect_data of this PaymentResponseAction.

        Native SDK's redirect data containing the direct issuer link and state data that must be submitted to the /v1/nativeRedirect/redirectResult.

        :param native_redirect_data: The native_redirect_data of this PaymentResponseAction.
        :type native_redirect_data: str
        """

        self._native_redirect_data = native_redirect_data

    @property
    def expires_at(self):
        """Gets the expires_at of this PaymentResponseAction.

        The date time of the voucher expiry.

        :return: The expires_at of this PaymentResponseAction.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this PaymentResponseAction.

        The date time of the voucher expiry.

        :param expires_at: The expires_at of this PaymentResponseAction.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def qr_code_data(self):
        """Gets the qr_code_data of this PaymentResponseAction.

        The contents of the QR code as a UTF8 string.

        :return: The qr_code_data of this PaymentResponseAction.
        :rtype: str
        """
        return self._qr_code_data

    @qr_code_data.setter
    def qr_code_data(self, qr_code_data):
        """Sets the qr_code_data of this PaymentResponseAction.

        The contents of the QR code as a UTF8 string.

        :param qr_code_data: The qr_code_data of this PaymentResponseAction.
        :type qr_code_data: str
        """

        self._qr_code_data = qr_code_data

    @property
    def sdk_data(self):
        """Gets the sdk_data of this PaymentResponseAction.

        The data to pass to the SDK.

        :return: The sdk_data of this PaymentResponseAction.
        :rtype: Dict[str, str]
        """
        return self._sdk_data

    @sdk_data.setter
    def sdk_data(self, sdk_data):
        """Sets the sdk_data of this PaymentResponseAction.

        The data to pass to the SDK.

        :param sdk_data: The sdk_data of this PaymentResponseAction.
        :type sdk_data: Dict[str, str]
        """

        self._sdk_data = sdk_data

    @property
    def token(self):
        """Gets the token of this PaymentResponseAction.

        A token to pass to the 3DS2 Component to get the fingerprint.

        :return: The token of this PaymentResponseAction.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentResponseAction.

        A token to pass to the 3DS2 Component to get the fingerprint.

        :param token: The token of this PaymentResponseAction.
        :type token: str
        """

        self._token = token

    @property
    def alternative_reference(self):
        """Gets the alternative_reference of this PaymentResponseAction.

        The voucher alternative reference code.

        :return: The alternative_reference of this PaymentResponseAction.
        :rtype: str
        """
        return self._alternative_reference

    @alternative_reference.setter
    def alternative_reference(self, alternative_reference):
        """Sets the alternative_reference of this PaymentResponseAction.

        The voucher alternative reference code.

        :param alternative_reference: The alternative_reference of this PaymentResponseAction.
        :type alternative_reference: str
        """

        self._alternative_reference = alternative_reference

    @property
    def collection_institution_number(self):
        """Gets the collection_institution_number of this PaymentResponseAction.

        A collection institution number (store number) for Econtext Pay-Easy ATM.

        :return: The collection_institution_number of this PaymentResponseAction.
        :rtype: str
        """
        return self._collection_institution_number

    @collection_institution_number.setter
    def collection_institution_number(self, collection_institution_number):
        """Sets the collection_institution_number of this PaymentResponseAction.

        A collection institution number (store number) for Econtext Pay-Easy ATM.

        :param collection_institution_number: The collection_institution_number of this PaymentResponseAction.
        :type collection_institution_number: str
        """

        self._collection_institution_number = collection_institution_number

    @property
    def download_url(self):
        """Gets the download_url of this PaymentResponseAction.

        The URL to download the voucher.

        :return: The download_url of this PaymentResponseAction.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this PaymentResponseAction.

        The URL to download the voucher.

        :param download_url: The download_url of this PaymentResponseAction.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def entity(self):
        """Gets the entity of this PaymentResponseAction.

        An entity number of Multibanco.

        :return: The entity of this PaymentResponseAction.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this PaymentResponseAction.

        An entity number of Multibanco.

        :param entity: The entity of this PaymentResponseAction.
        :type entity: str
        """

        self._entity = entity

    @property
    def initial_amount(self):
        """Gets the initial_amount of this PaymentResponseAction.

        The initial amount.

        :return: The initial_amount of this PaymentResponseAction.
        :rtype: Amount
        """
        return self._initial_amount

    @initial_amount.setter
    def initial_amount(self, initial_amount):
        """Sets the initial_amount of this PaymentResponseAction.

        The initial amount.

        :param initial_amount: The initial_amount of this PaymentResponseAction.
        :type initial_amount: Amount
        """

        self._initial_amount = initial_amount

    @property
    def instructions_url(self):
        """Gets the instructions_url of this PaymentResponseAction.

        The URL to the detailed instructions to make payment using the voucher.

        :return: The instructions_url of this PaymentResponseAction.
        :rtype: str
        """
        return self._instructions_url

    @instructions_url.setter
    def instructions_url(self, instructions_url):
        """Sets the instructions_url of this PaymentResponseAction.

        The URL to the detailed instructions to make payment using the voucher.

        :param instructions_url: The instructions_url of this PaymentResponseAction.
        :type instructions_url: str
        """

        self._instructions_url = instructions_url

    @property
    def issuer(self):
        """Gets the issuer of this PaymentResponseAction.

        The issuer of the voucher.

        :return: The issuer of this PaymentResponseAction.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this PaymentResponseAction.

        The issuer of the voucher.

        :param issuer: The issuer of this PaymentResponseAction.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def masked_telephone_number(self):
        """Gets the masked_telephone_number of this PaymentResponseAction.

        The shopper telephone number (partially masked).

        :return: The masked_telephone_number of this PaymentResponseAction.
        :rtype: str
        """
        return self._masked_telephone_number

    @masked_telephone_number.setter
    def masked_telephone_number(self, masked_telephone_number):
        """Sets the masked_telephone_number of this PaymentResponseAction.

        The shopper telephone number (partially masked).

        :param masked_telephone_number: The masked_telephone_number of this PaymentResponseAction.
        :type masked_telephone_number: str
        """

        self._masked_telephone_number = masked_telephone_number

    @property
    def merchant_name(self):
        """Gets the merchant_name of this PaymentResponseAction.

        The merchant name.

        :return: The merchant_name of this PaymentResponseAction.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this PaymentResponseAction.

        The merchant name.

        :param merchant_name: The merchant_name of this PaymentResponseAction.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PaymentResponseAction.

        The merchant reference.

        :return: The merchant_reference of this PaymentResponseAction.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PaymentResponseAction.

        The merchant reference.

        :param merchant_reference: The merchant_reference of this PaymentResponseAction.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def reference(self):
        """Gets the reference of this PaymentResponseAction.

        The voucher reference code.

        :return: The reference of this PaymentResponseAction.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentResponseAction.

        The voucher reference code.

        :param reference: The reference of this PaymentResponseAction.
        :type reference: str
        """

        self._reference = reference

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PaymentResponseAction.

        The shopper email.

        :return: The shopper_email of this PaymentResponseAction.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PaymentResponseAction.

        The shopper email.

        :param shopper_email: The shopper_email of this PaymentResponseAction.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_name(self):
        """Gets the shopper_name of this PaymentResponseAction.

        The shopper name.

        :return: The shopper_name of this PaymentResponseAction.
        :rtype: str
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this PaymentResponseAction.

        The shopper name.

        :param shopper_name: The shopper_name of this PaymentResponseAction.
        :type shopper_name: str
        """

        self._shopper_name = shopper_name

    @property
    def surcharge(self):
        """Gets the surcharge of this PaymentResponseAction.

        The surcharge amount.

        :return: The surcharge of this PaymentResponseAction.
        :rtype: Amount
        """
        return self._surcharge

    @surcharge.setter
    def surcharge(self, surcharge):
        """Sets the surcharge of this PaymentResponseAction.

        The surcharge amount.

        :param surcharge: The surcharge of this PaymentResponseAction.
        :type surcharge: Amount
        """

        self._surcharge = surcharge

    @property
    def total_amount(self):
        """Gets the total_amount of this PaymentResponseAction.

        The total amount (initial plus surcharge amount).

        :return: The total_amount of this PaymentResponseAction.
        :rtype: Amount
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this PaymentResponseAction.

        The total amount (initial plus surcharge amount).

        :param total_amount: The total_amount of this PaymentResponseAction.
        :type total_amount: Amount
        """

        self._total_amount = total_amount
