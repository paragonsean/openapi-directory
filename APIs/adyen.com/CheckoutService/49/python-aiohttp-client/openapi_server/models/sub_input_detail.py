# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.item import Item
from openapi_server import util


class SubInputDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration: Dict[str, str]=None, items: List[Item]=None, key: str=None, optional: bool=None, type: str=None, value: str=None):
        """SubInputDetail - a model defined in OpenAPI

        :param configuration: The configuration of this SubInputDetail.
        :param items: The items of this SubInputDetail.
        :param key: The key of this SubInputDetail.
        :param optional: The optional of this SubInputDetail.
        :param type: The type of this SubInputDetail.
        :param value: The value of this SubInputDetail.
        """
        self.openapi_types = {
            'configuration': Dict[str, str],
            'items': List[Item],
            'key': str,
            'optional': bool,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'items': 'items',
            'key': 'key',
            'optional': 'optional',
            'type': 'type',
            'value': 'value'
        }

        self._configuration = configuration
        self._items = items
        self._key = key
        self._optional = optional
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubInputDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubInputDetail of this SubInputDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self):
        """Gets the configuration of this SubInputDetail.

        Configuration parameters for the required input.

        :return: The configuration of this SubInputDetail.
        :rtype: Dict[str, str]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this SubInputDetail.

        Configuration parameters for the required input.

        :param configuration: The configuration of this SubInputDetail.
        :type configuration: Dict[str, str]
        """

        self._configuration = configuration

    @property
    def items(self):
        """Gets the items of this SubInputDetail.

        In case of a select, the items to choose from.

        :return: The items of this SubInputDetail.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubInputDetail.

        In case of a select, the items to choose from.

        :param items: The items of this SubInputDetail.
        :type items: List[Item]
        """

        self._items = items

    @property
    def key(self):
        """Gets the key of this SubInputDetail.

        The value to provide in the result.

        :return: The key of this SubInputDetail.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SubInputDetail.

        The value to provide in the result.

        :param key: The key of this SubInputDetail.
        :type key: str
        """

        self._key = key

    @property
    def optional(self):
        """Gets the optional of this SubInputDetail.

        True if this input is optional to provide.

        :return: The optional of this SubInputDetail.
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this SubInputDetail.

        True if this input is optional to provide.

        :param optional: The optional of this SubInputDetail.
        :type optional: bool
        """

        self._optional = optional

    @property
    def type(self):
        """Gets the type of this SubInputDetail.

        The type of the required input.

        :return: The type of this SubInputDetail.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SubInputDetail.

        The type of the required input.

        :param type: The type of this SubInputDetail.
        :type type: str
        """

        self._type = type

    @property
    def value(self):
        """Gets the value of this SubInputDetail.

        The value can be pre-filled, if available.

        :return: The value of this SubInputDetail.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SubInputDetail.

        The value can be pre-filled, if available.

        :param value: The value of this SubInputDetail.
        :type value: str
        """

        self._value = value
