# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class ForexQuote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, account_type: str=None, base_amount: Amount=None, base_points: int=None, buy: Amount=None, interbank: Amount=None, reference: str=None, sell: Amount=None, signature: str=None, source: str=None, type: str=None, valid_till: datetime=None):
        """ForexQuote - a model defined in OpenAPI

        :param account: The account of this ForexQuote.
        :param account_type: The account_type of this ForexQuote.
        :param base_amount: The base_amount of this ForexQuote.
        :param base_points: The base_points of this ForexQuote.
        :param buy: The buy of this ForexQuote.
        :param interbank: The interbank of this ForexQuote.
        :param reference: The reference of this ForexQuote.
        :param sell: The sell of this ForexQuote.
        :param signature: The signature of this ForexQuote.
        :param source: The source of this ForexQuote.
        :param type: The type of this ForexQuote.
        :param valid_till: The valid_till of this ForexQuote.
        """
        self.openapi_types = {
            'account': str,
            'account_type': str,
            'base_amount': Amount,
            'base_points': int,
            'buy': Amount,
            'interbank': Amount,
            'reference': str,
            'sell': Amount,
            'signature': str,
            'source': str,
            'type': str,
            'valid_till': datetime
        }

        self.attribute_map = {
            'account': 'account',
            'account_type': 'accountType',
            'base_amount': 'baseAmount',
            'base_points': 'basePoints',
            'buy': 'buy',
            'interbank': 'interbank',
            'reference': 'reference',
            'sell': 'sell',
            'signature': 'signature',
            'source': 'source',
            'type': 'type',
            'valid_till': 'validTill'
        }

        self._account = account
        self._account_type = account_type
        self._base_amount = base_amount
        self._base_points = base_points
        self._buy = buy
        self._interbank = interbank
        self._reference = reference
        self._sell = sell
        self._signature = signature
        self._source = source
        self._type = type
        self._valid_till = valid_till

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForexQuote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForexQuote of this ForexQuote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this ForexQuote.

        The account name.

        :return: The account of this ForexQuote.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this ForexQuote.

        The account name.

        :param account: The account of this ForexQuote.
        :type account: str
        """

        self._account = account

    @property
    def account_type(self):
        """Gets the account_type of this ForexQuote.

        The account type.

        :return: The account_type of this ForexQuote.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this ForexQuote.

        The account type.

        :param account_type: The account_type of this ForexQuote.
        :type account_type: str
        """

        self._account_type = account_type

    @property
    def base_amount(self):
        """Gets the base_amount of this ForexQuote.

        The base amount.

        :return: The base_amount of this ForexQuote.
        :rtype: Amount
        """
        return self._base_amount

    @base_amount.setter
    def base_amount(self, base_amount):
        """Sets the base_amount of this ForexQuote.

        The base amount.

        :param base_amount: The base_amount of this ForexQuote.
        :type base_amount: Amount
        """

        self._base_amount = base_amount

    @property
    def base_points(self):
        """Gets the base_points of this ForexQuote.

        The base points.

        :return: The base_points of this ForexQuote.
        :rtype: int
        """
        return self._base_points

    @base_points.setter
    def base_points(self, base_points):
        """Sets the base_points of this ForexQuote.

        The base points.

        :param base_points: The base_points of this ForexQuote.
        :type base_points: int
        """
        if base_points is None:
            raise ValueError("Invalid value for `base_points`, must not be `None`")

        self._base_points = base_points

    @property
    def buy(self):
        """Gets the buy of this ForexQuote.

        The buy rate.

        :return: The buy of this ForexQuote.
        :rtype: Amount
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this ForexQuote.

        The buy rate.

        :param buy: The buy of this ForexQuote.
        :type buy: Amount
        """

        self._buy = buy

    @property
    def interbank(self):
        """Gets the interbank of this ForexQuote.

        The interbank amount.

        :return: The interbank of this ForexQuote.
        :rtype: Amount
        """
        return self._interbank

    @interbank.setter
    def interbank(self, interbank):
        """Sets the interbank of this ForexQuote.

        The interbank amount.

        :param interbank: The interbank of this ForexQuote.
        :type interbank: Amount
        """

        self._interbank = interbank

    @property
    def reference(self):
        """Gets the reference of this ForexQuote.

        The reference assigned to the forex quote request.

        :return: The reference of this ForexQuote.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ForexQuote.

        The reference assigned to the forex quote request.

        :param reference: The reference of this ForexQuote.
        :type reference: str
        """

        self._reference = reference

    @property
    def sell(self):
        """Gets the sell of this ForexQuote.

        The sell rate.

        :return: The sell of this ForexQuote.
        :rtype: Amount
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this ForexQuote.

        The sell rate.

        :param sell: The sell of this ForexQuote.
        :type sell: Amount
        """

        self._sell = sell

    @property
    def signature(self):
        """Gets the signature of this ForexQuote.

        The signature to validate the integrity.

        :return: The signature of this ForexQuote.
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ForexQuote.

        The signature to validate the integrity.

        :param signature: The signature of this ForexQuote.
        :type signature: str
        """

        self._signature = signature

    @property
    def source(self):
        """Gets the source of this ForexQuote.

        The source of the forex quote.

        :return: The source of this ForexQuote.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ForexQuote.

        The source of the forex quote.

        :param source: The source of this ForexQuote.
        :type source: str
        """

        self._source = source

    @property
    def type(self):
        """Gets the type of this ForexQuote.

        The type of forex.

        :return: The type of this ForexQuote.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ForexQuote.

        The type of forex.

        :param type: The type of this ForexQuote.
        :type type: str
        """

        self._type = type

    @property
    def valid_till(self):
        """Gets the valid_till of this ForexQuote.

        The date until which the forex quote is valid.

        :return: The valid_till of this ForexQuote.
        :rtype: datetime
        """
        return self._valid_till

    @valid_till.setter
    def valid_till(self, valid_till):
        """Sets the valid_till of this ForexQuote.

        The date until which the forex quote is valid.

        :param valid_till: The valid_till of this ForexQuote.
        :type valid_till: datetime
        """
        if valid_till is None:
            raise ValueError("Invalid value for `valid_till`, must not be `None`")

        self._valid_till = valid_till
