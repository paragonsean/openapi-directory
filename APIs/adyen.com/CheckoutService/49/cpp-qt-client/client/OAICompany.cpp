/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v49/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v49/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=49) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICompany.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICompany::OAICompany(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICompany::OAICompany() {
    this->initializeModel();
}

OAICompany::~OAICompany() {}

void OAICompany::initializeModel() {

    m_homepage_isSet = false;
    m_homepage_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_registry_location_isSet = false;
    m_registry_location_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICompany::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICompany::fromJsonObject(QJsonObject json) {

    m_homepage_isValid = ::OpenAPI::fromJsonValue(m_homepage, json[QString("homepage")]);
    m_homepage_isSet = !json[QString("homepage")].isNull() && m_homepage_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_registry_location_isValid = ::OpenAPI::fromJsonValue(m_registry_location, json[QString("registryLocation")]);
    m_registry_location_isSet = !json[QString("registryLocation")].isNull() && m_registry_location_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("taxId")]);
    m_tax_id_isSet = !json[QString("taxId")].isNull() && m_tax_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICompany::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICompany::asJsonObject() const {
    QJsonObject obj;
    if (m_homepage_isSet) {
        obj.insert(QString("homepage"), ::OpenAPI::toJsonValue(m_homepage));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_registry_location_isSet) {
        obj.insert(QString("registryLocation"), ::OpenAPI::toJsonValue(m_registry_location));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("taxId"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICompany::getHomepage() const {
    return m_homepage;
}
void OAICompany::setHomepage(const QString &homepage) {
    m_homepage = homepage;
    m_homepage_isSet = true;
}

bool OAICompany::is_homepage_Set() const{
    return m_homepage_isSet;
}

bool OAICompany::is_homepage_Valid() const{
    return m_homepage_isValid;
}

QString OAICompany::getName() const {
    return m_name;
}
void OAICompany::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICompany::is_name_Set() const{
    return m_name_isSet;
}

bool OAICompany::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICompany::getRegistrationNumber() const {
    return m_registration_number;
}
void OAICompany::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAICompany::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAICompany::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QString OAICompany::getRegistryLocation() const {
    return m_registry_location;
}
void OAICompany::setRegistryLocation(const QString &registry_location) {
    m_registry_location = registry_location;
    m_registry_location_isSet = true;
}

bool OAICompany::is_registry_location_Set() const{
    return m_registry_location_isSet;
}

bool OAICompany::is_registry_location_Valid() const{
    return m_registry_location_isValid;
}

QString OAICompany::getTaxId() const {
    return m_tax_id;
}
void OAICompany::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAICompany::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAICompany::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

QString OAICompany::getType() const {
    return m_type;
}
void OAICompany::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICompany::is_type_Set() const{
    return m_type_isSet;
}

bool OAICompany::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICompany::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_homepage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registry_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICompany::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
