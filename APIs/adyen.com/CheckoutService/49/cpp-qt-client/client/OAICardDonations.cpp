/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v49/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v49/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=49) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardDonations.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardDonations::OAICardDonations(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardDonations::OAICardDonations() {
    this->initializeModel();
}

OAICardDonations::~OAICardDonations() {}

void OAICardDonations::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_cupsecureplus_smscode_isSet = false;
    m_cupsecureplus_smscode_isValid = false;

    m_cvc_isSet = false;
    m_cvc_isValid = false;

    m_encrypted_card_number_isSet = false;
    m_encrypted_card_number_isValid = false;

    m_encrypted_expiry_month_isSet = false;
    m_encrypted_expiry_month_isValid = false;

    m_encrypted_expiry_year_isSet = false;
    m_encrypted_expiry_year_isValid = false;

    m_encrypted_security_code_isSet = false;
    m_encrypted_security_code_isValid = false;

    m_expiry_month_isSet = false;
    m_expiry_month_isValid = false;

    m_expiry_year_isSet = false;
    m_expiry_year_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_holder_name_isSet = false;
    m_holder_name_isValid = false;

    m_network_payment_reference_isSet = false;
    m_network_payment_reference_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_shopper_notification_reference_isSet = false;
    m_shopper_notification_reference_isValid = false;

    m_stored_payment_method_id_isSet = false;
    m_stored_payment_method_id_isValid = false;

    m_three_ds2_sdk_version_isSet = false;
    m_three_ds2_sdk_version_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAICardDonations::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardDonations::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_cupsecureplus_smscode_isValid = ::OpenAPI::fromJsonValue(m_cupsecureplus_smscode, json[QString("cupsecureplus.smscode")]);
    m_cupsecureplus_smscode_isSet = !json[QString("cupsecureplus.smscode")].isNull() && m_cupsecureplus_smscode_isValid;

    m_cvc_isValid = ::OpenAPI::fromJsonValue(m_cvc, json[QString("cvc")]);
    m_cvc_isSet = !json[QString("cvc")].isNull() && m_cvc_isValid;

    m_encrypted_card_number_isValid = ::OpenAPI::fromJsonValue(m_encrypted_card_number, json[QString("encryptedCardNumber")]);
    m_encrypted_card_number_isSet = !json[QString("encryptedCardNumber")].isNull() && m_encrypted_card_number_isValid;

    m_encrypted_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_encrypted_expiry_month, json[QString("encryptedExpiryMonth")]);
    m_encrypted_expiry_month_isSet = !json[QString("encryptedExpiryMonth")].isNull() && m_encrypted_expiry_month_isValid;

    m_encrypted_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_encrypted_expiry_year, json[QString("encryptedExpiryYear")]);
    m_encrypted_expiry_year_isSet = !json[QString("encryptedExpiryYear")].isNull() && m_encrypted_expiry_year_isValid;

    m_encrypted_security_code_isValid = ::OpenAPI::fromJsonValue(m_encrypted_security_code, json[QString("encryptedSecurityCode")]);
    m_encrypted_security_code_isSet = !json[QString("encryptedSecurityCode")].isNull() && m_encrypted_security_code_isValid;

    m_expiry_month_isValid = ::OpenAPI::fromJsonValue(m_expiry_month, json[QString("expiryMonth")]);
    m_expiry_month_isSet = !json[QString("expiryMonth")].isNull() && m_expiry_month_isValid;

    m_expiry_year_isValid = ::OpenAPI::fromJsonValue(m_expiry_year, json[QString("expiryYear")]);
    m_expiry_year_isSet = !json[QString("expiryYear")].isNull() && m_expiry_year_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_holder_name_isValid = ::OpenAPI::fromJsonValue(m_holder_name, json[QString("holderName")]);
    m_holder_name_isSet = !json[QString("holderName")].isNull() && m_holder_name_isValid;

    m_network_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_network_payment_reference, json[QString("networkPaymentReference")]);
    m_network_payment_reference_isSet = !json[QString("networkPaymentReference")].isNull() && m_network_payment_reference_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_shopper_notification_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_notification_reference, json[QString("shopperNotificationReference")]);
    m_shopper_notification_reference_isSet = !json[QString("shopperNotificationReference")].isNull() && m_shopper_notification_reference_isValid;

    m_stored_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_stored_payment_method_id, json[QString("storedPaymentMethodId")]);
    m_stored_payment_method_id_isSet = !json[QString("storedPaymentMethodId")].isNull() && m_stored_payment_method_id_isValid;

    m_three_ds2_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_sdk_version, json[QString("threeDS2SdkVersion")]);
    m_three_ds2_sdk_version_isSet = !json[QString("threeDS2SdkVersion")].isNull() && m_three_ds2_sdk_version_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAICardDonations::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardDonations::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_cupsecureplus_smscode_isSet) {
        obj.insert(QString("cupsecureplus.smscode"), ::OpenAPI::toJsonValue(m_cupsecureplus_smscode));
    }
    if (m_cvc_isSet) {
        obj.insert(QString("cvc"), ::OpenAPI::toJsonValue(m_cvc));
    }
    if (m_encrypted_card_number_isSet) {
        obj.insert(QString("encryptedCardNumber"), ::OpenAPI::toJsonValue(m_encrypted_card_number));
    }
    if (m_encrypted_expiry_month_isSet) {
        obj.insert(QString("encryptedExpiryMonth"), ::OpenAPI::toJsonValue(m_encrypted_expiry_month));
    }
    if (m_encrypted_expiry_year_isSet) {
        obj.insert(QString("encryptedExpiryYear"), ::OpenAPI::toJsonValue(m_encrypted_expiry_year));
    }
    if (m_encrypted_security_code_isSet) {
        obj.insert(QString("encryptedSecurityCode"), ::OpenAPI::toJsonValue(m_encrypted_security_code));
    }
    if (m_expiry_month_isSet) {
        obj.insert(QString("expiryMonth"), ::OpenAPI::toJsonValue(m_expiry_month));
    }
    if (m_expiry_year_isSet) {
        obj.insert(QString("expiryYear"), ::OpenAPI::toJsonValue(m_expiry_year));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_holder_name_isSet) {
        obj.insert(QString("holderName"), ::OpenAPI::toJsonValue(m_holder_name));
    }
    if (m_network_payment_reference_isSet) {
        obj.insert(QString("networkPaymentReference"), ::OpenAPI::toJsonValue(m_network_payment_reference));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_shopper_notification_reference_isSet) {
        obj.insert(QString("shopperNotificationReference"), ::OpenAPI::toJsonValue(m_shopper_notification_reference));
    }
    if (m_stored_payment_method_id_isSet) {
        obj.insert(QString("storedPaymentMethodId"), ::OpenAPI::toJsonValue(m_stored_payment_method_id));
    }
    if (m_three_ds2_sdk_version_isSet) {
        obj.insert(QString("threeDS2SdkVersion"), ::OpenAPI::toJsonValue(m_three_ds2_sdk_version));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAICardDonations::getBrand() const {
    return m_brand;
}
void OAICardDonations::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAICardDonations::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAICardDonations::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAICardDonations::getCupsecureplusSmscode() const {
    return m_cupsecureplus_smscode;
}
void OAICardDonations::setCupsecureplusSmscode(const QString &cupsecureplus_smscode) {
    m_cupsecureplus_smscode = cupsecureplus_smscode;
    m_cupsecureplus_smscode_isSet = true;
}

bool OAICardDonations::is_cupsecureplus_smscode_Set() const{
    return m_cupsecureplus_smscode_isSet;
}

bool OAICardDonations::is_cupsecureplus_smscode_Valid() const{
    return m_cupsecureplus_smscode_isValid;
}

QString OAICardDonations::getCvc() const {
    return m_cvc;
}
void OAICardDonations::setCvc(const QString &cvc) {
    m_cvc = cvc;
    m_cvc_isSet = true;
}

bool OAICardDonations::is_cvc_Set() const{
    return m_cvc_isSet;
}

bool OAICardDonations::is_cvc_Valid() const{
    return m_cvc_isValid;
}

QString OAICardDonations::getEncryptedCardNumber() const {
    return m_encrypted_card_number;
}
void OAICardDonations::setEncryptedCardNumber(const QString &encrypted_card_number) {
    m_encrypted_card_number = encrypted_card_number;
    m_encrypted_card_number_isSet = true;
}

bool OAICardDonations::is_encrypted_card_number_Set() const{
    return m_encrypted_card_number_isSet;
}

bool OAICardDonations::is_encrypted_card_number_Valid() const{
    return m_encrypted_card_number_isValid;
}

QString OAICardDonations::getEncryptedExpiryMonth() const {
    return m_encrypted_expiry_month;
}
void OAICardDonations::setEncryptedExpiryMonth(const QString &encrypted_expiry_month) {
    m_encrypted_expiry_month = encrypted_expiry_month;
    m_encrypted_expiry_month_isSet = true;
}

bool OAICardDonations::is_encrypted_expiry_month_Set() const{
    return m_encrypted_expiry_month_isSet;
}

bool OAICardDonations::is_encrypted_expiry_month_Valid() const{
    return m_encrypted_expiry_month_isValid;
}

QString OAICardDonations::getEncryptedExpiryYear() const {
    return m_encrypted_expiry_year;
}
void OAICardDonations::setEncryptedExpiryYear(const QString &encrypted_expiry_year) {
    m_encrypted_expiry_year = encrypted_expiry_year;
    m_encrypted_expiry_year_isSet = true;
}

bool OAICardDonations::is_encrypted_expiry_year_Set() const{
    return m_encrypted_expiry_year_isSet;
}

bool OAICardDonations::is_encrypted_expiry_year_Valid() const{
    return m_encrypted_expiry_year_isValid;
}

QString OAICardDonations::getEncryptedSecurityCode() const {
    return m_encrypted_security_code;
}
void OAICardDonations::setEncryptedSecurityCode(const QString &encrypted_security_code) {
    m_encrypted_security_code = encrypted_security_code;
    m_encrypted_security_code_isSet = true;
}

bool OAICardDonations::is_encrypted_security_code_Set() const{
    return m_encrypted_security_code_isSet;
}

bool OAICardDonations::is_encrypted_security_code_Valid() const{
    return m_encrypted_security_code_isValid;
}

QString OAICardDonations::getExpiryMonth() const {
    return m_expiry_month;
}
void OAICardDonations::setExpiryMonth(const QString &expiry_month) {
    m_expiry_month = expiry_month;
    m_expiry_month_isSet = true;
}

bool OAICardDonations::is_expiry_month_Set() const{
    return m_expiry_month_isSet;
}

bool OAICardDonations::is_expiry_month_Valid() const{
    return m_expiry_month_isValid;
}

QString OAICardDonations::getExpiryYear() const {
    return m_expiry_year;
}
void OAICardDonations::setExpiryYear(const QString &expiry_year) {
    m_expiry_year = expiry_year;
    m_expiry_year_isSet = true;
}

bool OAICardDonations::is_expiry_year_Set() const{
    return m_expiry_year_isSet;
}

bool OAICardDonations::is_expiry_year_Valid() const{
    return m_expiry_year_isValid;
}

QString OAICardDonations::getFundingSource() const {
    return m_funding_source;
}
void OAICardDonations::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAICardDonations::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAICardDonations::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAICardDonations::getHolderName() const {
    return m_holder_name;
}
void OAICardDonations::setHolderName(const QString &holder_name) {
    m_holder_name = holder_name;
    m_holder_name_isSet = true;
}

bool OAICardDonations::is_holder_name_Set() const{
    return m_holder_name_isSet;
}

bool OAICardDonations::is_holder_name_Valid() const{
    return m_holder_name_isValid;
}

QString OAICardDonations::getNetworkPaymentReference() const {
    return m_network_payment_reference;
}
void OAICardDonations::setNetworkPaymentReference(const QString &network_payment_reference) {
    m_network_payment_reference = network_payment_reference;
    m_network_payment_reference_isSet = true;
}

bool OAICardDonations::is_network_payment_reference_Set() const{
    return m_network_payment_reference_isSet;
}

bool OAICardDonations::is_network_payment_reference_Valid() const{
    return m_network_payment_reference_isValid;
}

QString OAICardDonations::getNumber() const {
    return m_number;
}
void OAICardDonations::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICardDonations::is_number_Set() const{
    return m_number_isSet;
}

bool OAICardDonations::is_number_Valid() const{
    return m_number_isValid;
}

QString OAICardDonations::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAICardDonations::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAICardDonations::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAICardDonations::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAICardDonations::getShopperNotificationReference() const {
    return m_shopper_notification_reference;
}
void OAICardDonations::setShopperNotificationReference(const QString &shopper_notification_reference) {
    m_shopper_notification_reference = shopper_notification_reference;
    m_shopper_notification_reference_isSet = true;
}

bool OAICardDonations::is_shopper_notification_reference_Set() const{
    return m_shopper_notification_reference_isSet;
}

bool OAICardDonations::is_shopper_notification_reference_Valid() const{
    return m_shopper_notification_reference_isValid;
}

QString OAICardDonations::getStoredPaymentMethodId() const {
    return m_stored_payment_method_id;
}
void OAICardDonations::setStoredPaymentMethodId(const QString &stored_payment_method_id) {
    m_stored_payment_method_id = stored_payment_method_id;
    m_stored_payment_method_id_isSet = true;
}

bool OAICardDonations::is_stored_payment_method_id_Set() const{
    return m_stored_payment_method_id_isSet;
}

bool OAICardDonations::is_stored_payment_method_id_Valid() const{
    return m_stored_payment_method_id_isValid;
}

QString OAICardDonations::getThreeDs2SdkVersion() const {
    return m_three_ds2_sdk_version;
}
void OAICardDonations::setThreeDs2SdkVersion(const QString &three_ds2_sdk_version) {
    m_three_ds2_sdk_version = three_ds2_sdk_version;
    m_three_ds2_sdk_version_isSet = true;
}

bool OAICardDonations::is_three_ds2_sdk_version_Set() const{
    return m_three_ds2_sdk_version_isSet;
}

bool OAICardDonations::is_three_ds2_sdk_version_Valid() const{
    return m_three_ds2_sdk_version_isValid;
}

QString OAICardDonations::getType() const {
    return m_type;
}
void OAICardDonations::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICardDonations::is_type_Set() const{
    return m_type_isSet;
}

bool OAICardDonations::is_type_Valid() const{
    return m_type_isValid;
}

bool OAICardDonations::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cupsecureplus_smscode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_security_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_payment_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_notification_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardDonations::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
