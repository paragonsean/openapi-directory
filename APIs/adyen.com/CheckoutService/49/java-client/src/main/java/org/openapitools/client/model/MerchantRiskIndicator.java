/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v49/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v49/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=49) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.Amount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MerchantRiskIndicator
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:01.751258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MerchantRiskIndicator {
  public static final String SERIALIZED_NAME_ADDRESS_MATCH = "addressMatch";
  @SerializedName(SERIALIZED_NAME_ADDRESS_MATCH)
  private Boolean addressMatch;

  /**
   * Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;
   */
  @JsonAdapter(DeliveryAddressIndicatorEnum.Adapter.class)
  public enum DeliveryAddressIndicatorEnum {
    SHIP_TO_BILLING_ADDRESS("shipToBillingAddress"),
    
    SHIP_TO_VERIFIED_ADDRESS("shipToVerifiedAddress"),
    
    SHIP_TO_NEW_ADDRESS("shipToNewAddress"),
    
    SHIP_TO_STORE("shipToStore"),
    
    DIGITAL_GOODS("digitalGoods"),
    
    GOODS_NOT_SHIPPED("goodsNotShipped"),
    
    OTHER("other");

    private String value;

    DeliveryAddressIndicatorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryAddressIndicatorEnum fromValue(String value) {
      for (DeliveryAddressIndicatorEnum b : DeliveryAddressIndicatorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryAddressIndicatorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryAddressIndicatorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryAddressIndicatorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryAddressIndicatorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryAddressIndicatorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_ADDRESS_INDICATOR = "deliveryAddressIndicator";
  @SerializedName(SERIALIZED_NAME_DELIVERY_ADDRESS_INDICATOR)
  private DeliveryAddressIndicatorEnum deliveryAddressIndicator;

  public static final String SERIALIZED_NAME_DELIVERY_EMAIL = "deliveryEmail";
  @SerializedName(SERIALIZED_NAME_DELIVERY_EMAIL)
  private String deliveryEmail;

  /**
   * The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;
   */
  @JsonAdapter(DeliveryTimeframeEnum.Adapter.class)
  public enum DeliveryTimeframeEnum {
    ELECTRONIC_DELIVERY("electronicDelivery"),
    
    SAME_DAY_SHIPPING("sameDayShipping"),
    
    OVERNIGHT_SHIPPING("overnightShipping"),
    
    TWO_OR_MORE_DAYS_SHIPPING("twoOrMoreDaysShipping");

    private String value;

    DeliveryTimeframeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeliveryTimeframeEnum fromValue(String value) {
      for (DeliveryTimeframeEnum b : DeliveryTimeframeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeliveryTimeframeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeliveryTimeframeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeliveryTimeframeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeliveryTimeframeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeliveryTimeframeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DELIVERY_TIMEFRAME = "deliveryTimeframe";
  @SerializedName(SERIALIZED_NAME_DELIVERY_TIMEFRAME)
  private DeliveryTimeframeEnum deliveryTimeframe;

  public static final String SERIALIZED_NAME_GIFT_CARD_AMOUNT = "giftCardAmount";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_AMOUNT)
  private Amount giftCardAmount;

  public static final String SERIALIZED_NAME_GIFT_CARD_COUNT = "giftCardCount";
  @SerializedName(SERIALIZED_NAME_GIFT_CARD_COUNT)
  private Integer giftCardCount;

  public static final String SERIALIZED_NAME_PRE_ORDER_DATE = "preOrderDate";
  @SerializedName(SERIALIZED_NAME_PRE_ORDER_DATE)
  private OffsetDateTime preOrderDate;

  public static final String SERIALIZED_NAME_PRE_ORDER_PURCHASE = "preOrderPurchase";
  @SerializedName(SERIALIZED_NAME_PRE_ORDER_PURCHASE)
  private Boolean preOrderPurchase;

  public static final String SERIALIZED_NAME_REORDER_ITEMS = "reorderItems";
  @SerializedName(SERIALIZED_NAME_REORDER_ITEMS)
  private Boolean reorderItems;

  public MerchantRiskIndicator() {
  }

  public MerchantRiskIndicator addressMatch(Boolean addressMatch) {
    this.addressMatch = addressMatch;
    return this;
  }

  /**
   * Whether the chosen delivery address is identical to the billing address.
   * @return addressMatch
   */
  @javax.annotation.Nullable
  public Boolean getAddressMatch() {
    return addressMatch;
  }

  public void setAddressMatch(Boolean addressMatch) {
    this.addressMatch = addressMatch;
  }


  public MerchantRiskIndicator deliveryAddressIndicator(DeliveryAddressIndicatorEnum deliveryAddressIndicator) {
    this.deliveryAddressIndicator = deliveryAddressIndicator;
    return this;
  }

  /**
   * Indicator regarding the delivery address. Allowed values: * &#x60;shipToBillingAddress&#x60; * &#x60;shipToVerifiedAddress&#x60; * &#x60;shipToNewAddress&#x60; * &#x60;shipToStore&#x60; * &#x60;digitalGoods&#x60; * &#x60;goodsNotShipped&#x60; * &#x60;other&#x60;
   * @return deliveryAddressIndicator
   */
  @javax.annotation.Nullable
  public DeliveryAddressIndicatorEnum getDeliveryAddressIndicator() {
    return deliveryAddressIndicator;
  }

  public void setDeliveryAddressIndicator(DeliveryAddressIndicatorEnum deliveryAddressIndicator) {
    this.deliveryAddressIndicator = deliveryAddressIndicator;
  }


  public MerchantRiskIndicator deliveryEmail(String deliveryEmail) {
    this.deliveryEmail = deliveryEmail;
    return this;
  }

  /**
   * The delivery email address (for digital goods).
   * @return deliveryEmail
   */
  @javax.annotation.Nullable
  public String getDeliveryEmail() {
    return deliveryEmail;
  }

  public void setDeliveryEmail(String deliveryEmail) {
    this.deliveryEmail = deliveryEmail;
  }


  public MerchantRiskIndicator deliveryTimeframe(DeliveryTimeframeEnum deliveryTimeframe) {
    this.deliveryTimeframe = deliveryTimeframe;
    return this;
  }

  /**
   * The estimated delivery time for the shopper to receive the goods. Allowed values: * &#x60;electronicDelivery&#x60; * &#x60;sameDayShipping&#x60; * &#x60;overnightShipping&#x60; * &#x60;twoOrMoreDaysShipping&#x60;
   * @return deliveryTimeframe
   */
  @javax.annotation.Nullable
  public DeliveryTimeframeEnum getDeliveryTimeframe() {
    return deliveryTimeframe;
  }

  public void setDeliveryTimeframe(DeliveryTimeframeEnum deliveryTimeframe) {
    this.deliveryTimeframe = deliveryTimeframe;
  }


  public MerchantRiskIndicator giftCardAmount(Amount giftCardAmount) {
    this.giftCardAmount = giftCardAmount;
    return this;
  }

  /**
   * For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s).
   * @return giftCardAmount
   */
  @javax.annotation.Nullable
  public Amount getGiftCardAmount() {
    return giftCardAmount;
  }

  public void setGiftCardAmount(Amount giftCardAmount) {
    this.giftCardAmount = giftCardAmount;
  }


  public MerchantRiskIndicator giftCardCount(Integer giftCardCount) {
    this.giftCardCount = giftCardCount;
    return this;
  }

  /**
   * For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.
   * @return giftCardCount
   */
  @javax.annotation.Nullable
  public Integer getGiftCardCount() {
    return giftCardCount;
  }

  public void setGiftCardCount(Integer giftCardCount) {
    this.giftCardCount = giftCardCount;
  }


  public MerchantRiskIndicator preOrderDate(OffsetDateTime preOrderDate) {
    this.preOrderDate = preOrderDate;
    return this;
  }

  /**
   * For pre-order purchases, the expected date this product will be available to the shopper.
   * @return preOrderDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPreOrderDate() {
    return preOrderDate;
  }

  public void setPreOrderDate(OffsetDateTime preOrderDate) {
    this.preOrderDate = preOrderDate;
  }


  public MerchantRiskIndicator preOrderPurchase(Boolean preOrderPurchase) {
    this.preOrderPurchase = preOrderPurchase;
    return this;
  }

  /**
   * Indicator for whether this transaction is for pre-ordering a product.
   * @return preOrderPurchase
   */
  @javax.annotation.Nullable
  public Boolean getPreOrderPurchase() {
    return preOrderPurchase;
  }

  public void setPreOrderPurchase(Boolean preOrderPurchase) {
    this.preOrderPurchase = preOrderPurchase;
  }


  public MerchantRiskIndicator reorderItems(Boolean reorderItems) {
    this.reorderItems = reorderItems;
    return this;
  }

  /**
   * Indicator for whether the shopper has already purchased the same items in the past.
   * @return reorderItems
   */
  @javax.annotation.Nullable
  public Boolean getReorderItems() {
    return reorderItems;
  }

  public void setReorderItems(Boolean reorderItems) {
    this.reorderItems = reorderItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MerchantRiskIndicator merchantRiskIndicator = (MerchantRiskIndicator) o;
    return Objects.equals(this.addressMatch, merchantRiskIndicator.addressMatch) &&
        Objects.equals(this.deliveryAddressIndicator, merchantRiskIndicator.deliveryAddressIndicator) &&
        Objects.equals(this.deliveryEmail, merchantRiskIndicator.deliveryEmail) &&
        Objects.equals(this.deliveryTimeframe, merchantRiskIndicator.deliveryTimeframe) &&
        Objects.equals(this.giftCardAmount, merchantRiskIndicator.giftCardAmount) &&
        Objects.equals(this.giftCardCount, merchantRiskIndicator.giftCardCount) &&
        Objects.equals(this.preOrderDate, merchantRiskIndicator.preOrderDate) &&
        Objects.equals(this.preOrderPurchase, merchantRiskIndicator.preOrderPurchase) &&
        Objects.equals(this.reorderItems, merchantRiskIndicator.reorderItems);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressMatch, deliveryAddressIndicator, deliveryEmail, deliveryTimeframe, giftCardAmount, giftCardCount, preOrderDate, preOrderPurchase, reorderItems);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MerchantRiskIndicator {\n");
    sb.append("    addressMatch: ").append(toIndentedString(addressMatch)).append("\n");
    sb.append("    deliveryAddressIndicator: ").append(toIndentedString(deliveryAddressIndicator)).append("\n");
    sb.append("    deliveryEmail: ").append(toIndentedString(deliveryEmail)).append("\n");
    sb.append("    deliveryTimeframe: ").append(toIndentedString(deliveryTimeframe)).append("\n");
    sb.append("    giftCardAmount: ").append(toIndentedString(giftCardAmount)).append("\n");
    sb.append("    giftCardCount: ").append(toIndentedString(giftCardCount)).append("\n");
    sb.append("    preOrderDate: ").append(toIndentedString(preOrderDate)).append("\n");
    sb.append("    preOrderPurchase: ").append(toIndentedString(preOrderPurchase)).append("\n");
    sb.append("    reorderItems: ").append(toIndentedString(reorderItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("addressMatch");
    openapiFields.add("deliveryAddressIndicator");
    openapiFields.add("deliveryEmail");
    openapiFields.add("deliveryTimeframe");
    openapiFields.add("giftCardAmount");
    openapiFields.add("giftCardCount");
    openapiFields.add("preOrderDate");
    openapiFields.add("preOrderPurchase");
    openapiFields.add("reorderItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MerchantRiskIndicator
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MerchantRiskIndicator.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MerchantRiskIndicator is not found in the empty JSON string", MerchantRiskIndicator.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MerchantRiskIndicator.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MerchantRiskIndicator` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("deliveryAddressIndicator") != null && !jsonObj.get("deliveryAddressIndicator").isJsonNull()) && !jsonObj.get("deliveryAddressIndicator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryAddressIndicator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryAddressIndicator").toString()));
      }
      // validate the optional field `deliveryAddressIndicator`
      if (jsonObj.get("deliveryAddressIndicator") != null && !jsonObj.get("deliveryAddressIndicator").isJsonNull()) {
        DeliveryAddressIndicatorEnum.validateJsonElement(jsonObj.get("deliveryAddressIndicator"));
      }
      if ((jsonObj.get("deliveryEmail") != null && !jsonObj.get("deliveryEmail").isJsonNull()) && !jsonObj.get("deliveryEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryEmail").toString()));
      }
      if ((jsonObj.get("deliveryTimeframe") != null && !jsonObj.get("deliveryTimeframe").isJsonNull()) && !jsonObj.get("deliveryTimeframe").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deliveryTimeframe` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deliveryTimeframe").toString()));
      }
      // validate the optional field `deliveryTimeframe`
      if (jsonObj.get("deliveryTimeframe") != null && !jsonObj.get("deliveryTimeframe").isJsonNull()) {
        DeliveryTimeframeEnum.validateJsonElement(jsonObj.get("deliveryTimeframe"));
      }
      // validate the optional field `giftCardAmount`
      if (jsonObj.get("giftCardAmount") != null && !jsonObj.get("giftCardAmount").isJsonNull()) {
        Amount.validateJsonElement(jsonObj.get("giftCardAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MerchantRiskIndicator.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MerchantRiskIndicator' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MerchantRiskIndicator> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MerchantRiskIndicator.class));

       return (TypeAdapter<T>) new TypeAdapter<MerchantRiskIndicator>() {
           @Override
           public void write(JsonWriter out, MerchantRiskIndicator value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MerchantRiskIndicator read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MerchantRiskIndicator given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MerchantRiskIndicator
   * @throws IOException if the JSON string is invalid with respect to MerchantRiskIndicator
   */
  public static MerchantRiskIndicator fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MerchantRiskIndicator.class);
  }

  /**
   * Convert an instance of MerchantRiskIndicator to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

