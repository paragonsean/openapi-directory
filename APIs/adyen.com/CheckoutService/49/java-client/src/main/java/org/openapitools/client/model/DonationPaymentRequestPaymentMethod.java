/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v49/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v49/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=49) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApplePayDonations;
import org.openapitools.client.model.CardDonations;
import org.openapitools.client.model.GooglePayDonations;
import org.openapitools.client.model.IdealDonations;
import org.openapitools.client.model.PayWithGoogleDonations;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:01.751258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DonationPaymentRequestPaymentMethod extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(DonationPaymentRequestPaymentMethod.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!DonationPaymentRequestPaymentMethod.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'DonationPaymentRequestPaymentMethod' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ApplePayDonations> adapterApplePayDonations = gson.getDelegateAdapter(this, TypeToken.get(ApplePayDonations.class));
            final TypeAdapter<CardDonations> adapterCardDonations = gson.getDelegateAdapter(this, TypeToken.get(CardDonations.class));
            final TypeAdapter<GooglePayDonations> adapterGooglePayDonations = gson.getDelegateAdapter(this, TypeToken.get(GooglePayDonations.class));
            final TypeAdapter<IdealDonations> adapterIdealDonations = gson.getDelegateAdapter(this, TypeToken.get(IdealDonations.class));
            final TypeAdapter<PayWithGoogleDonations> adapterPayWithGoogleDonations = gson.getDelegateAdapter(this, TypeToken.get(PayWithGoogleDonations.class));

            return (TypeAdapter<T>) new TypeAdapter<DonationPaymentRequestPaymentMethod>() {
                @Override
                public void write(JsonWriter out, DonationPaymentRequestPaymentMethod value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ApplePayDonations`
                    if (value.getActualInstance() instanceof ApplePayDonations) {
                        JsonElement element = adapterApplePayDonations.toJsonTree((ApplePayDonations)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CardDonations`
                    if (value.getActualInstance() instanceof CardDonations) {
                        JsonElement element = adapterCardDonations.toJsonTree((CardDonations)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GooglePayDonations`
                    if (value.getActualInstance() instanceof GooglePayDonations) {
                        JsonElement element = adapterGooglePayDonations.toJsonTree((GooglePayDonations)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IdealDonations`
                    if (value.getActualInstance() instanceof IdealDonations) {
                        JsonElement element = adapterIdealDonations.toJsonTree((IdealDonations)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PayWithGoogleDonations`
                    if (value.getActualInstance() instanceof PayWithGoogleDonations) {
                        JsonElement element = adapterPayWithGoogleDonations.toJsonTree((PayWithGoogleDonations)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations");
                }

                @Override
                public DonationPaymentRequestPaymentMethod read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ApplePayDonations
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ApplePayDonations.validateJsonElement(jsonElement);
                        actualAdapter = adapterApplePayDonations;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ApplePayDonations'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ApplePayDonations failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ApplePayDonations'", e);
                    }
                    // deserialize CardDonations
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CardDonations.validateJsonElement(jsonElement);
                        actualAdapter = adapterCardDonations;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CardDonations'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CardDonations failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CardDonations'", e);
                    }
                    // deserialize GooglePayDonations
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GooglePayDonations.validateJsonElement(jsonElement);
                        actualAdapter = adapterGooglePayDonations;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GooglePayDonations'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GooglePayDonations failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GooglePayDonations'", e);
                    }
                    // deserialize IdealDonations
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IdealDonations.validateJsonElement(jsonElement);
                        actualAdapter = adapterIdealDonations;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IdealDonations'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IdealDonations failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IdealDonations'", e);
                    }
                    // deserialize PayWithGoogleDonations
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PayWithGoogleDonations.validateJsonElement(jsonElement);
                        actualAdapter = adapterPayWithGoogleDonations;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PayWithGoogleDonations'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PayWithGoogleDonations failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PayWithGoogleDonations'", e);
                    }

                    if (match == 1) {
                        DonationPaymentRequestPaymentMethod ret = new DonationPaymentRequestPaymentMethod();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for DonationPaymentRequestPaymentMethod: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public DonationPaymentRequestPaymentMethod() {
        super("oneOf", Boolean.FALSE);
    }

    public DonationPaymentRequestPaymentMethod(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ApplePayDonations", ApplePayDonations.class);
        schemas.put("CardDonations", CardDonations.class);
        schemas.put("GooglePayDonations", GooglePayDonations.class);
        schemas.put("IdealDonations", IdealDonations.class);
        schemas.put("PayWithGoogleDonations", PayWithGoogleDonations.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return DonationPaymentRequestPaymentMethod.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ApplePayDonations) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CardDonations) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GooglePayDonations) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IdealDonations) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PayWithGoogleDonations) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations");
    }

    /**
     * Get the actual instance, which can be the following:
     * ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations
     *
     * @return The actual instance (ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ApplePayDonations`. If the actual instance is not `ApplePayDonations`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ApplePayDonations`
     * @throws ClassCastException if the instance is not `ApplePayDonations`
     */
    public ApplePayDonations getApplePayDonations() throws ClassCastException {
        return (ApplePayDonations)super.getActualInstance();
    }
    /**
     * Get the actual instance of `CardDonations`. If the actual instance is not `CardDonations`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CardDonations`
     * @throws ClassCastException if the instance is not `CardDonations`
     */
    public CardDonations getCardDonations() throws ClassCastException {
        return (CardDonations)super.getActualInstance();
    }
    /**
     * Get the actual instance of `GooglePayDonations`. If the actual instance is not `GooglePayDonations`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GooglePayDonations`
     * @throws ClassCastException if the instance is not `GooglePayDonations`
     */
    public GooglePayDonations getGooglePayDonations() throws ClassCastException {
        return (GooglePayDonations)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IdealDonations`. If the actual instance is not `IdealDonations`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IdealDonations`
     * @throws ClassCastException if the instance is not `IdealDonations`
     */
    public IdealDonations getIdealDonations() throws ClassCastException {
        return (IdealDonations)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PayWithGoogleDonations`. If the actual instance is not `PayWithGoogleDonations`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PayWithGoogleDonations`
     * @throws ClassCastException if the instance is not `PayWithGoogleDonations`
     */
    public PayWithGoogleDonations getPayWithGoogleDonations() throws ClassCastException {
        return (PayWithGoogleDonations)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to DonationPaymentRequestPaymentMethod
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ApplePayDonations
        try {
            ApplePayDonations.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ApplePayDonations failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CardDonations
        try {
            CardDonations.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CardDonations failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GooglePayDonations
        try {
            GooglePayDonations.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GooglePayDonations failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IdealDonations
        try {
            IdealDonations.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IdealDonations failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PayWithGoogleDonations
        try {
            PayWithGoogleDonations.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PayWithGoogleDonations failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for DonationPaymentRequestPaymentMethod with oneOf schemas: ApplePayDonations, CardDonations, GooglePayDonations, IdealDonations, PayWithGoogleDonations. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of DonationPaymentRequestPaymentMethod given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of DonationPaymentRequestPaymentMethod
     * @throws IOException if the JSON string is invalid with respect to DonationPaymentRequestPaymentMethod
     */
    public static DonationPaymentRequestPaymentMethod fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, DonationPaymentRequestPaymentMethod.class);
    }

    /**
     * Convert an instance of DonationPaymentRequestPaymentMethod to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

