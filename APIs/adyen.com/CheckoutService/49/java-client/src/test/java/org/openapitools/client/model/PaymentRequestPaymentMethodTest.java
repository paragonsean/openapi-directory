/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v49/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v49/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=49) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AchDetails;
import org.openapitools.client.model.AfterpayDetails;
import org.openapitools.client.model.AmazonPayDetails;
import org.openapitools.client.model.AndroidPayDetails;
import org.openapitools.client.model.ApplePayDetails;
import org.openapitools.client.model.BacsDirectDebitDetails;
import org.openapitools.client.model.BillDeskDetails;
import org.openapitools.client.model.BlikDetails;
import org.openapitools.client.model.CardDetails;
import org.openapitools.client.model.CellulantDetails;
import org.openapitools.client.model.DokuDetails;
import org.openapitools.client.model.DotpayDetails;
import org.openapitools.client.model.DragonpayDetails;
import org.openapitools.client.model.EcontextVoucherDetails;
import org.openapitools.client.model.GenericIssuerPaymentMethodDetails;
import org.openapitools.client.model.GiropayDetails;
import org.openapitools.client.model.GooglePayDetails;
import org.openapitools.client.model.IdealDetails;
import org.openapitools.client.model.KlarnaDetails;
import org.openapitools.client.model.MasterpassDetails;
import org.openapitools.client.model.MbwayDetails;
import org.openapitools.client.model.MobilePayDetails;
import org.openapitools.client.model.MolPayDetails;
import org.openapitools.client.model.OpenInvoiceDetails;
import org.openapitools.client.model.PayPalDetails;
import org.openapitools.client.model.PayUUpiDetails;
import org.openapitools.client.model.PayWithGoogleDetails;
import org.openapitools.client.model.PaymentDetails;
import org.openapitools.client.model.RatepayDetails;
import org.openapitools.client.model.SamsungPayDetails;
import org.openapitools.client.model.SepaDirectDebitDetails;
import org.openapitools.client.model.StoredPaymentMethodDetails;
import org.openapitools.client.model.UpiCollectDetails;
import org.openapitools.client.model.UpiIntentDetails;
import org.openapitools.client.model.VippsDetails;
import org.openapitools.client.model.VisaCheckoutDetails;
import org.openapitools.client.model.WeChatPayDetails;
import org.openapitools.client.model.WeChatPayMiniProgramDetails;
import org.openapitools.client.model.ZipDetails;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentRequestPaymentMethod
 */
public class PaymentRequestPaymentMethodTest {
    private final PaymentRequestPaymentMethod model = new PaymentRequestPaymentMethod();

    /**
     * Model tests for PaymentRequestPaymentMethod
     */
    @Test
    public void testPaymentRequestPaymentMethod() {
        // TODO: test PaymentRequestPaymentMethod
    }

    /**
     * Test the property 'bankAccountNumber'
     */
    @Test
    public void bankAccountNumberTest() {
        // TODO: test bankAccountNumber
    }

    /**
     * Test the property 'bankAccountType'
     */
    @Test
    public void bankAccountTypeTest() {
        // TODO: test bankAccountType
    }

    /**
     * Test the property 'bankLocationId'
     */
    @Test
    public void bankLocationIdTest() {
        // TODO: test bankLocationId
    }

    /**
     * Test the property 'encryptedBankAccountNumber'
     */
    @Test
    public void encryptedBankAccountNumberTest() {
        // TODO: test encryptedBankAccountNumber
    }

    /**
     * Test the property 'encryptedBankLocationId'
     */
    @Test
    public void encryptedBankLocationIdTest() {
        // TODO: test encryptedBankLocationId
    }

    /**
     * Test the property 'ownerName'
     */
    @Test
    public void ownerNameTest() {
        // TODO: test ownerName
    }

    /**
     * Test the property 'recurringDetailReference'
     */
    @Test
    public void recurringDetailReferenceTest() {
        // TODO: test recurringDetailReference
    }

    /**
     * Test the property 'storedPaymentMethodId'
     */
    @Test
    public void storedPaymentMethodIdTest() {
        // TODO: test storedPaymentMethodId
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'billingAddress'
     */
    @Test
    public void billingAddressTest() {
        // TODO: test billingAddress
    }

    /**
     * Test the property 'deliveryAddress'
     */
    @Test
    public void deliveryAddressTest() {
        // TODO: test deliveryAddress
    }

    /**
     * Test the property 'personalDetails'
     */
    @Test
    public void personalDetailsTest() {
        // TODO: test personalDetails
    }

    /**
     * Test the property 'amazonPayToken'
     */
    @Test
    public void amazonPayTokenTest() {
        // TODO: test amazonPayToken
    }

    /**
     * Test the property 'checkoutSessionId'
     */
    @Test
    public void checkoutSessionIdTest() {
        // TODO: test checkoutSessionId
    }

    /**
     * Test the property 'applePayToken'
     */
    @Test
    public void applePayTokenTest() {
        // TODO: test applePayToken
    }

    /**
     * Test the property 'fundingSource'
     */
    @Test
    public void fundingSourceTest() {
        // TODO: test fundingSource
    }

    /**
     * Test the property 'issuer'
     */
    @Test
    public void issuerTest() {
        // TODO: test issuer
    }

    /**
     * Test the property 'blikCode'
     */
    @Test
    public void blikCodeTest() {
        // TODO: test blikCode
    }

    /**
     * Test the property 'brand'
     */
    @Test
    public void brandTest() {
        // TODO: test brand
    }

    /**
     * Test the property 'cupsecureplusSmscode'
     */
    @Test
    public void cupsecureplusSmscodeTest() {
        // TODO: test cupsecureplusSmscode
    }

    /**
     * Test the property 'cvc'
     */
    @Test
    public void cvcTest() {
        // TODO: test cvc
    }

    /**
     * Test the property 'encryptedCardNumber'
     */
    @Test
    public void encryptedCardNumberTest() {
        // TODO: test encryptedCardNumber
    }

    /**
     * Test the property 'encryptedExpiryMonth'
     */
    @Test
    public void encryptedExpiryMonthTest() {
        // TODO: test encryptedExpiryMonth
    }

    /**
     * Test the property 'encryptedExpiryYear'
     */
    @Test
    public void encryptedExpiryYearTest() {
        // TODO: test encryptedExpiryYear
    }

    /**
     * Test the property 'encryptedSecurityCode'
     */
    @Test
    public void encryptedSecurityCodeTest() {
        // TODO: test encryptedSecurityCode
    }

    /**
     * Test the property 'expiryMonth'
     */
    @Test
    public void expiryMonthTest() {
        // TODO: test expiryMonth
    }

    /**
     * Test the property 'expiryYear'
     */
    @Test
    public void expiryYearTest() {
        // TODO: test expiryYear
    }

    /**
     * Test the property 'holderName'
     */
    @Test
    public void holderNameTest() {
        // TODO: test holderName
    }

    /**
     * Test the property 'networkPaymentReference'
     */
    @Test
    public void networkPaymentReferenceTest() {
        // TODO: test networkPaymentReference
    }

    /**
     * Test the property 'number'
     */
    @Test
    public void numberTest() {
        // TODO: test number
    }

    /**
     * Test the property 'shopperNotificationReference'
     */
    @Test
    public void shopperNotificationReferenceTest() {
        // TODO: test shopperNotificationReference
    }

    /**
     * Test the property 'threeDS2SdkVersion'
     */
    @Test
    public void threeDS2SdkVersionTest() {
        // TODO: test threeDS2SdkVersion
    }

    /**
     * Test the property 'firstName'
     */
    @Test
    public void firstNameTest() {
        // TODO: test firstName
    }

    /**
     * Test the property 'lastName'
     */
    @Test
    public void lastNameTest() {
        // TODO: test lastName
    }

    /**
     * Test the property 'shopperEmail'
     */
    @Test
    public void shopperEmailTest() {
        // TODO: test shopperEmail
    }

    /**
     * Test the property 'telephoneNumber'
     */
    @Test
    public void telephoneNumberTest() {
        // TODO: test telephoneNumber
    }

    /**
     * Test the property 'googlePayCardNetwork'
     */
    @Test
    public void googlePayCardNetworkTest() {
        // TODO: test googlePayCardNetwork
    }

    /**
     * Test the property 'googlePayToken'
     */
    @Test
    public void googlePayTokenTest() {
        // TODO: test googlePayToken
    }

    /**
     * Test the property 'subtype'
     */
    @Test
    public void subtypeTest() {
        // TODO: test subtype
    }

    /**
     * Test the property 'masterpassTransactionId'
     */
    @Test
    public void masterpassTransactionIdTest() {
        // TODO: test masterpassTransactionId
    }

    /**
     * Test the property 'orderID'
     */
    @Test
    public void orderIDTest() {
        // TODO: test orderID
    }

    /**
     * Test the property 'payeePreferred'
     */
    @Test
    public void payeePreferredTest() {
        // TODO: test payeePreferred
    }

    /**
     * Test the property 'payerID'
     */
    @Test
    public void payerIDTest() {
        // TODO: test payerID
    }

    /**
     * Test the property 'payerSelected'
     */
    @Test
    public void payerSelectedTest() {
        // TODO: test payerSelected
    }

    /**
     * Test the property 'virtualPaymentAddress'
     */
    @Test
    public void virtualPaymentAddressTest() {
        // TODO: test virtualPaymentAddress
    }

    /**
     * Test the property 'samsungPayToken'
     */
    @Test
    public void samsungPayTokenTest() {
        // TODO: test samsungPayToken
    }

    /**
     * Test the property 'iban'
     */
    @Test
    public void ibanTest() {
        // TODO: test iban
    }

    /**
     * Test the property 'billingSequenceNumber'
     */
    @Test
    public void billingSequenceNumberTest() {
        // TODO: test billingSequenceNumber
    }

    /**
     * Test the property 'visaCheckoutCallId'
     */
    @Test
    public void visaCheckoutCallIdTest() {
        // TODO: test visaCheckoutCallId
    }

    /**
     * Test the property 'appId'
     */
    @Test
    public void appIdTest() {
        // TODO: test appId
    }

    /**
     * Test the property 'openid'
     */
    @Test
    public void openidTest() {
        // TODO: test openid
    }

    /**
     * Test the property 'clickAndCollect'
     */
    @Test
    public void clickAndCollectTest() {
        // TODO: test clickAndCollect
    }

}
