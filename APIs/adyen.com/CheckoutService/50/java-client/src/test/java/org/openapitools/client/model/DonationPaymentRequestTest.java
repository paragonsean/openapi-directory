/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v50/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v50/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=50) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccountInfo;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.BalanceCheckRequestAdditionalData;
import org.openapitools.client.model.BillingAddress;
import org.openapitools.client.model.BrowserInfo;
import org.openapitools.client.model.Company;
import org.openapitools.client.model.DeliveryAddress;
import org.openapitools.client.model.DonationPaymentRequestPaymentMethod;
import org.openapitools.client.model.EncryptedOrderData;
import org.openapitools.client.model.ForexQuote;
import org.openapitools.client.model.FundOrigin;
import org.openapitools.client.model.FundRecipient;
import org.openapitools.client.model.Installments;
import org.openapitools.client.model.LineItem;
import org.openapitools.client.model.Mandate;
import org.openapitools.client.model.MerchantRiskIndicator;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.RiskData;
import org.openapitools.client.model.Split;
import org.openapitools.client.model.ThreeDS2RequestFields;
import org.openapitools.client.model.ThreeDSecureData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for DonationPaymentRequest
 */
public class DonationPaymentRequestTest {
    private final DonationPaymentRequest model = new DonationPaymentRequest();

    /**
     * Model tests for DonationPaymentRequest
     */
    @Test
    public void testDonationPaymentRequest() {
        // TODO: test DonationPaymentRequest
    }

    /**
     * Test the property 'accountInfo'
     */
    @Test
    public void accountInfoTest() {
        // TODO: test accountInfo
    }

    /**
     * Test the property 'additionalAmount'
     */
    @Test
    public void additionalAmountTest() {
        // TODO: test additionalAmount
    }

    /**
     * Test the property 'additionalData'
     */
    @Test
    public void additionalDataTest() {
        // TODO: test additionalData
    }

    /**
     * Test the property 'allowedPaymentMethods'
     */
    @Test
    public void allowedPaymentMethodsTest() {
        // TODO: test allowedPaymentMethods
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'applicationInfo'
     */
    @Test
    public void applicationInfoTest() {
        // TODO: test applicationInfo
    }

    /**
     * Test the property 'billingAddress'
     */
    @Test
    public void billingAddressTest() {
        // TODO: test billingAddress
    }

    /**
     * Test the property 'blockedPaymentMethods'
     */
    @Test
    public void blockedPaymentMethodsTest() {
        // TODO: test blockedPaymentMethods
    }

    /**
     * Test the property 'browserInfo'
     */
    @Test
    public void browserInfoTest() {
        // TODO: test browserInfo
    }

    /**
     * Test the property 'captureDelayHours'
     */
    @Test
    public void captureDelayHoursTest() {
        // TODO: test captureDelayHours
    }

    /**
     * Test the property 'channel'
     */
    @Test
    public void channelTest() {
        // TODO: test channel
    }

    /**
     * Test the property 'company'
     */
    @Test
    public void companyTest() {
        // TODO: test company
    }

    /**
     * Test the property 'conversionId'
     */
    @Test
    public void conversionIdTest() {
        // TODO: test conversionId
    }

    /**
     * Test the property 'countryCode'
     */
    @Test
    public void countryCodeTest() {
        // TODO: test countryCode
    }

    /**
     * Test the property 'dateOfBirth'
     */
    @Test
    public void dateOfBirthTest() {
        // TODO: test dateOfBirth
    }

    /**
     * Test the property 'dccQuote'
     */
    @Test
    public void dccQuoteTest() {
        // TODO: test dccQuote
    }

    /**
     * Test the property 'deliveryAddress'
     */
    @Test
    public void deliveryAddressTest() {
        // TODO: test deliveryAddress
    }

    /**
     * Test the property 'deliveryDate'
     */
    @Test
    public void deliveryDateTest() {
        // TODO: test deliveryDate
    }

    /**
     * Test the property 'deviceFingerprint'
     */
    @Test
    public void deviceFingerprintTest() {
        // TODO: test deviceFingerprint
    }

    /**
     * Test the property 'donationAccount'
     */
    @Test
    public void donationAccountTest() {
        // TODO: test donationAccount
    }

    /**
     * Test the property 'donationOriginalPspReference'
     */
    @Test
    public void donationOriginalPspReferenceTest() {
        // TODO: test donationOriginalPspReference
    }

    /**
     * Test the property 'donationToken'
     */
    @Test
    public void donationTokenTest() {
        // TODO: test donationToken
    }

    /**
     * Test the property 'enableOneClick'
     */
    @Test
    public void enableOneClickTest() {
        // TODO: test enableOneClick
    }

    /**
     * Test the property 'enablePayOut'
     */
    @Test
    public void enablePayOutTest() {
        // TODO: test enablePayOut
    }

    /**
     * Test the property 'enableRecurring'
     */
    @Test
    public void enableRecurringTest() {
        // TODO: test enableRecurring
    }

    /**
     * Test the property 'entityType'
     */
    @Test
    public void entityTypeTest() {
        // TODO: test entityType
    }

    /**
     * Test the property 'fraudOffset'
     */
    @Test
    public void fraudOffsetTest() {
        // TODO: test fraudOffset
    }

    /**
     * Test the property 'fundOrigin'
     */
    @Test
    public void fundOriginTest() {
        // TODO: test fundOrigin
    }

    /**
     * Test the property 'fundRecipient'
     */
    @Test
    public void fundRecipientTest() {
        // TODO: test fundRecipient
    }

    /**
     * Test the property 'installments'
     */
    @Test
    public void installmentsTest() {
        // TODO: test installments
    }

    /**
     * Test the property 'lineItems'
     */
    @Test
    public void lineItemsTest() {
        // TODO: test lineItems
    }

    /**
     * Test the property 'mandate'
     */
    @Test
    public void mandateTest() {
        // TODO: test mandate
    }

    /**
     * Test the property 'mcc'
     */
    @Test
    public void mccTest() {
        // TODO: test mcc
    }

    /**
     * Test the property 'merchantAccount'
     */
    @Test
    public void merchantAccountTest() {
        // TODO: test merchantAccount
    }

    /**
     * Test the property 'merchantOrderReference'
     */
    @Test
    public void merchantOrderReferenceTest() {
        // TODO: test merchantOrderReference
    }

    /**
     * Test the property 'merchantRiskIndicator'
     */
    @Test
    public void merchantRiskIndicatorTest() {
        // TODO: test merchantRiskIndicator
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'mpiData'
     */
    @Test
    public void mpiDataTest() {
        // TODO: test mpiData
    }

    /**
     * Test the property 'order'
     */
    @Test
    public void orderTest() {
        // TODO: test order
    }

    /**
     * Test the property 'orderReference'
     */
    @Test
    public void orderReferenceTest() {
        // TODO: test orderReference
    }

    /**
     * Test the property 'origin'
     */
    @Test
    public void originTest() {
        // TODO: test origin
    }

    /**
     * Test the property 'paymentMethod'
     */
    @Test
    public void paymentMethodTest() {
        // TODO: test paymentMethod
    }

    /**
     * Test the property 'recurringExpiry'
     */
    @Test
    public void recurringExpiryTest() {
        // TODO: test recurringExpiry
    }

    /**
     * Test the property 'recurringFrequency'
     */
    @Test
    public void recurringFrequencyTest() {
        // TODO: test recurringFrequency
    }

    /**
     * Test the property 'recurringProcessingModel'
     */
    @Test
    public void recurringProcessingModelTest() {
        // TODO: test recurringProcessingModel
    }

    /**
     * Test the property 'redirectFromIssuerMethod'
     */
    @Test
    public void redirectFromIssuerMethodTest() {
        // TODO: test redirectFromIssuerMethod
    }

    /**
     * Test the property 'redirectToIssuerMethod'
     */
    @Test
    public void redirectToIssuerMethodTest() {
        // TODO: test redirectToIssuerMethod
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'returnUrl'
     */
    @Test
    public void returnUrlTest() {
        // TODO: test returnUrl
    }

    /**
     * Test the property 'riskData'
     */
    @Test
    public void riskDataTest() {
        // TODO: test riskData
    }

    /**
     * Test the property 'selectedRecurringDetailReference'
     */
    @Test
    public void selectedRecurringDetailReferenceTest() {
        // TODO: test selectedRecurringDetailReference
    }

    /**
     * Test the property 'sessionValidity'
     */
    @Test
    public void sessionValidityTest() {
        // TODO: test sessionValidity
    }

    /**
     * Test the property 'shopperEmail'
     */
    @Test
    public void shopperEmailTest() {
        // TODO: test shopperEmail
    }

    /**
     * Test the property 'shopperIP'
     */
    @Test
    public void shopperIPTest() {
        // TODO: test shopperIP
    }

    /**
     * Test the property 'shopperInteraction'
     */
    @Test
    public void shopperInteractionTest() {
        // TODO: test shopperInteraction
    }

    /**
     * Test the property 'shopperLocale'
     */
    @Test
    public void shopperLocaleTest() {
        // TODO: test shopperLocale
    }

    /**
     * Test the property 'shopperName'
     */
    @Test
    public void shopperNameTest() {
        // TODO: test shopperName
    }

    /**
     * Test the property 'shopperReference'
     */
    @Test
    public void shopperReferenceTest() {
        // TODO: test shopperReference
    }

    /**
     * Test the property 'shopperStatement'
     */
    @Test
    public void shopperStatementTest() {
        // TODO: test shopperStatement
    }

    /**
     * Test the property 'socialSecurityNumber'
     */
    @Test
    public void socialSecurityNumberTest() {
        // TODO: test socialSecurityNumber
    }

    /**
     * Test the property 'splits'
     */
    @Test
    public void splitsTest() {
        // TODO: test splits
    }

    /**
     * Test the property 'store'
     */
    @Test
    public void storeTest() {
        // TODO: test store
    }

    /**
     * Test the property 'storePaymentMethod'
     */
    @Test
    public void storePaymentMethodTest() {
        // TODO: test storePaymentMethod
    }

    /**
     * Test the property 'telephoneNumber'
     */
    @Test
    public void telephoneNumberTest() {
        // TODO: test telephoneNumber
    }

    /**
     * Test the property 'threeDS2RequestData'
     */
    @Test
    public void threeDS2RequestDataTest() {
        // TODO: test threeDS2RequestData
    }

    /**
     * Test the property 'threeDSAuthenticationOnly'
     */
    @Test
    public void threeDSAuthenticationOnlyTest() {
        // TODO: test threeDSAuthenticationOnly
    }

    /**
     * Test the property 'trustedShopper'
     */
    @Test
    public void trustedShopperTest() {
        // TODO: test trustedShopper
    }

}
