# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class CheckoutOrderResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, expires_at: str=None, order_data: str=None, psp_reference: str=None, reference: str=None, remaining_amount: Amount=None):
        """CheckoutOrderResponse - a model defined in OpenAPI

        :param amount: The amount of this CheckoutOrderResponse.
        :param expires_at: The expires_at of this CheckoutOrderResponse.
        :param order_data: The order_data of this CheckoutOrderResponse.
        :param psp_reference: The psp_reference of this CheckoutOrderResponse.
        :param reference: The reference of this CheckoutOrderResponse.
        :param remaining_amount: The remaining_amount of this CheckoutOrderResponse.
        """
        self.openapi_types = {
            'amount': Amount,
            'expires_at': str,
            'order_data': str,
            'psp_reference': str,
            'reference': str,
            'remaining_amount': Amount
        }

        self.attribute_map = {
            'amount': 'amount',
            'expires_at': 'expiresAt',
            'order_data': 'orderData',
            'psp_reference': 'pspReference',
            'reference': 'reference',
            'remaining_amount': 'remainingAmount'
        }

        self._amount = amount
        self._expires_at = expires_at
        self._order_data = order_data
        self._psp_reference = psp_reference
        self._reference = reference
        self._remaining_amount = remaining_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckoutOrderResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckoutOrderResponse of this CheckoutOrderResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CheckoutOrderResponse.

        The initial amount of the order.

        :return: The amount of this CheckoutOrderResponse.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CheckoutOrderResponse.

        The initial amount of the order.

        :param amount: The amount of this CheckoutOrderResponse.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def expires_at(self):
        """Gets the expires_at of this CheckoutOrderResponse.

        The expiry date for the order.

        :return: The expires_at of this CheckoutOrderResponse.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this CheckoutOrderResponse.

        The expiry date for the order.

        :param expires_at: The expires_at of this CheckoutOrderResponse.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def order_data(self):
        """Gets the order_data of this CheckoutOrderResponse.

        The encrypted order data.

        :return: The order_data of this CheckoutOrderResponse.
        :rtype: str
        """
        return self._order_data

    @order_data.setter
    def order_data(self, order_data):
        """Sets the order_data of this CheckoutOrderResponse.

        The encrypted order data.

        :param order_data: The order_data of this CheckoutOrderResponse.
        :type order_data: str
        """

        self._order_data = order_data

    @property
    def psp_reference(self):
        """Gets the psp_reference of this CheckoutOrderResponse.

        The `pspReference` that belongs to the order.

        :return: The psp_reference of this CheckoutOrderResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this CheckoutOrderResponse.

        The `pspReference` that belongs to the order.

        :param psp_reference: The psp_reference of this CheckoutOrderResponse.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference

    @property
    def reference(self):
        """Gets the reference of this CheckoutOrderResponse.

        The merchant reference for the order.

        :return: The reference of this CheckoutOrderResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this CheckoutOrderResponse.

        The merchant reference for the order.

        :param reference: The reference of this CheckoutOrderResponse.
        :type reference: str
        """

        self._reference = reference

    @property
    def remaining_amount(self):
        """Gets the remaining_amount of this CheckoutOrderResponse.

        The updated remaining amount.

        :return: The remaining_amount of this CheckoutOrderResponse.
        :rtype: Amount
        """
        return self._remaining_amount

    @remaining_amount.setter
    def remaining_amount(self, remaining_amount):
        """Sets the remaining_amount of this CheckoutOrderResponse.

        The updated remaining amount.

        :param remaining_amount: The remaining_amount of this CheckoutOrderResponse.
        :type remaining_amount: Amount
        """

        self._remaining_amount = remaining_amount
