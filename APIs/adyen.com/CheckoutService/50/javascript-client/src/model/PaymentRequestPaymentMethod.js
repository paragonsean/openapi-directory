/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v50/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v50/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=50) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AchDetails from './AchDetails';
import AfterpayDetails from './AfterpayDetails';
import AmazonPayDetails from './AmazonPayDetails';
import AndroidPayDetails from './AndroidPayDetails';
import ApplePayDetails from './ApplePayDetails';
import BacsDirectDebitDetails from './BacsDirectDebitDetails';
import BillDeskDetails from './BillDeskDetails';
import BlikDetails from './BlikDetails';
import CardDetails from './CardDetails';
import CellulantDetails from './CellulantDetails';
import DokuDetails from './DokuDetails';
import DotpayDetails from './DotpayDetails';
import DragonpayDetails from './DragonpayDetails';
import EcontextVoucherDetails from './EcontextVoucherDetails';
import GenericIssuerPaymentMethodDetails from './GenericIssuerPaymentMethodDetails';
import GiropayDetails from './GiropayDetails';
import GooglePayDetails from './GooglePayDetails';
import IdealDetails from './IdealDetails';
import KlarnaDetails from './KlarnaDetails';
import MasterpassDetails from './MasterpassDetails';
import MbwayDetails from './MbwayDetails';
import MobilePayDetails from './MobilePayDetails';
import MolPayDetails from './MolPayDetails';
import OpenInvoiceDetails from './OpenInvoiceDetails';
import PayPalDetails from './PayPalDetails';
import PayUUpiDetails from './PayUUpiDetails';
import PayWithGoogleDetails from './PayWithGoogleDetails';
import PaymentDetails from './PaymentDetails';
import RatepayDetails from './RatepayDetails';
import SamsungPayDetails from './SamsungPayDetails';
import SepaDirectDebitDetails from './SepaDirectDebitDetails';
import StoredPaymentMethodDetails from './StoredPaymentMethodDetails';
import UpiCollectDetails from './UpiCollectDetails';
import UpiIntentDetails from './UpiIntentDetails';
import VippsDetails from './VippsDetails';
import VisaCheckoutDetails from './VisaCheckoutDetails';
import WeChatPayDetails from './WeChatPayDetails';
import WeChatPayMiniProgramDetails from './WeChatPayMiniProgramDetails';
import ZipDetails from './ZipDetails';

/**
 * The PaymentRequestPaymentMethod model module.
 * @module model/PaymentRequestPaymentMethod
 * @version 50
 */
class PaymentRequestPaymentMethod {
    /**
     * Constructs a new <code>PaymentRequestPaymentMethod</code>.
     * The type and required details of a payment method to use.
     * @alias module:model/PaymentRequestPaymentMethod
     * @param {(module:model/AchDetails|module:model/AfterpayDetails|module:model/AmazonPayDetails|module:model/AndroidPayDetails|module:model/ApplePayDetails|module:model/BacsDirectDebitDetails|module:model/BillDeskDetails|module:model/BlikDetails|module:model/CardDetails|module:model/CellulantDetails|module:model/DokuDetails|module:model/DotpayDetails|module:model/DragonpayDetails|module:model/EcontextVoucherDetails|module:model/GenericIssuerPaymentMethodDetails|module:model/GiropayDetails|module:model/GooglePayDetails|module:model/IdealDetails|module:model/KlarnaDetails|module:model/MasterpassDetails|module:model/MbwayDetails|module:model/MobilePayDetails|module:model/MolPayDetails|module:model/OpenInvoiceDetails|module:model/PayPalDetails|module:model/PayUUpiDetails|module:model/PayWithGoogleDetails|module:model/PaymentDetails|module:model/RatepayDetails|module:model/SamsungPayDetails|module:model/SepaDirectDebitDetails|module:model/StoredPaymentMethodDetails|module:model/UpiCollectDetails|module:model/UpiIntentDetails|module:model/VippsDetails|module:model/VisaCheckoutDetails|module:model/WeChatPayDetails|module:model/WeChatPayMiniProgramDetails|module:model/ZipDetails)} instance The actual instance to initialize PaymentRequestPaymentMethod.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "AchDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AchDetails.validateJSON(instance); // throw an exception if no match
                // create AchDetails from JS object
                this.actualInstance = AchDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AchDetails
            errorMessages.push("Failed to construct AchDetails: " + err)
        }

        try {
            if (typeof instance === "AfterpayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AfterpayDetails.validateJSON(instance); // throw an exception if no match
                // create AfterpayDetails from JS object
                this.actualInstance = AfterpayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AfterpayDetails
            errorMessages.push("Failed to construct AfterpayDetails: " + err)
        }

        try {
            if (typeof instance === "AmazonPayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AmazonPayDetails.validateJSON(instance); // throw an exception if no match
                // create AmazonPayDetails from JS object
                this.actualInstance = AmazonPayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AmazonPayDetails
            errorMessages.push("Failed to construct AmazonPayDetails: " + err)
        }

        try {
            if (typeof instance === "AndroidPayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                AndroidPayDetails.validateJSON(instance); // throw an exception if no match
                // create AndroidPayDetails from JS object
                this.actualInstance = AndroidPayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into AndroidPayDetails
            errorMessages.push("Failed to construct AndroidPayDetails: " + err)
        }

        try {
            if (typeof instance === "ApplePayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ApplePayDetails.validateJSON(instance); // throw an exception if no match
                // create ApplePayDetails from JS object
                this.actualInstance = ApplePayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ApplePayDetails
            errorMessages.push("Failed to construct ApplePayDetails: " + err)
        }

        try {
            if (typeof instance === "BacsDirectDebitDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BacsDirectDebitDetails.validateJSON(instance); // throw an exception if no match
                // create BacsDirectDebitDetails from JS object
                this.actualInstance = BacsDirectDebitDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BacsDirectDebitDetails
            errorMessages.push("Failed to construct BacsDirectDebitDetails: " + err)
        }

        try {
            if (typeof instance === "BillDeskDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BillDeskDetails.validateJSON(instance); // throw an exception if no match
                // create BillDeskDetails from JS object
                this.actualInstance = BillDeskDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BillDeskDetails
            errorMessages.push("Failed to construct BillDeskDetails: " + err)
        }

        try {
            if (typeof instance === "BlikDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BlikDetails.validateJSON(instance); // throw an exception if no match
                // create BlikDetails from JS object
                this.actualInstance = BlikDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BlikDetails
            errorMessages.push("Failed to construct BlikDetails: " + err)
        }

        try {
            if (typeof instance === "CardDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CardDetails.validateJSON(instance); // throw an exception if no match
                // create CardDetails from JS object
                this.actualInstance = CardDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CardDetails
            errorMessages.push("Failed to construct CardDetails: " + err)
        }

        try {
            if (typeof instance === "CellulantDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                CellulantDetails.validateJSON(instance); // throw an exception if no match
                // create CellulantDetails from JS object
                this.actualInstance = CellulantDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into CellulantDetails
            errorMessages.push("Failed to construct CellulantDetails: " + err)
        }

        try {
            if (typeof instance === "DokuDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DokuDetails.validateJSON(instance); // throw an exception if no match
                // create DokuDetails from JS object
                this.actualInstance = DokuDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DokuDetails
            errorMessages.push("Failed to construct DokuDetails: " + err)
        }

        try {
            if (typeof instance === "DotpayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DotpayDetails.validateJSON(instance); // throw an exception if no match
                // create DotpayDetails from JS object
                this.actualInstance = DotpayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DotpayDetails
            errorMessages.push("Failed to construct DotpayDetails: " + err)
        }

        try {
            if (typeof instance === "DragonpayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                DragonpayDetails.validateJSON(instance); // throw an exception if no match
                // create DragonpayDetails from JS object
                this.actualInstance = DragonpayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into DragonpayDetails
            errorMessages.push("Failed to construct DragonpayDetails: " + err)
        }

        try {
            if (typeof instance === "EcontextVoucherDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                EcontextVoucherDetails.validateJSON(instance); // throw an exception if no match
                // create EcontextVoucherDetails from JS object
                this.actualInstance = EcontextVoucherDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into EcontextVoucherDetails
            errorMessages.push("Failed to construct EcontextVoucherDetails: " + err)
        }

        try {
            if (typeof instance === "GenericIssuerPaymentMethodDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GenericIssuerPaymentMethodDetails.validateJSON(instance); // throw an exception if no match
                // create GenericIssuerPaymentMethodDetails from JS object
                this.actualInstance = GenericIssuerPaymentMethodDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GenericIssuerPaymentMethodDetails
            errorMessages.push("Failed to construct GenericIssuerPaymentMethodDetails: " + err)
        }

        try {
            if (typeof instance === "GiropayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GiropayDetails.validateJSON(instance); // throw an exception if no match
                // create GiropayDetails from JS object
                this.actualInstance = GiropayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GiropayDetails
            errorMessages.push("Failed to construct GiropayDetails: " + err)
        }

        try {
            if (typeof instance === "GooglePayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                GooglePayDetails.validateJSON(instance); // throw an exception if no match
                // create GooglePayDetails from JS object
                this.actualInstance = GooglePayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into GooglePayDetails
            errorMessages.push("Failed to construct GooglePayDetails: " + err)
        }

        try {
            if (typeof instance === "IdealDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                IdealDetails.validateJSON(instance); // throw an exception if no match
                // create IdealDetails from JS object
                this.actualInstance = IdealDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into IdealDetails
            errorMessages.push("Failed to construct IdealDetails: " + err)
        }

        try {
            if (typeof instance === "KlarnaDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                KlarnaDetails.validateJSON(instance); // throw an exception if no match
                // create KlarnaDetails from JS object
                this.actualInstance = KlarnaDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into KlarnaDetails
            errorMessages.push("Failed to construct KlarnaDetails: " + err)
        }

        try {
            if (typeof instance === "MasterpassDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MasterpassDetails.validateJSON(instance); // throw an exception if no match
                // create MasterpassDetails from JS object
                this.actualInstance = MasterpassDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MasterpassDetails
            errorMessages.push("Failed to construct MasterpassDetails: " + err)
        }

        try {
            if (typeof instance === "MbwayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MbwayDetails.validateJSON(instance); // throw an exception if no match
                // create MbwayDetails from JS object
                this.actualInstance = MbwayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MbwayDetails
            errorMessages.push("Failed to construct MbwayDetails: " + err)
        }

        try {
            if (typeof instance === "MobilePayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MobilePayDetails.validateJSON(instance); // throw an exception if no match
                // create MobilePayDetails from JS object
                this.actualInstance = MobilePayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MobilePayDetails
            errorMessages.push("Failed to construct MobilePayDetails: " + err)
        }

        try {
            if (typeof instance === "MolPayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                MolPayDetails.validateJSON(instance); // throw an exception if no match
                // create MolPayDetails from JS object
                this.actualInstance = MolPayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into MolPayDetails
            errorMessages.push("Failed to construct MolPayDetails: " + err)
        }

        try {
            if (typeof instance === "OpenInvoiceDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                OpenInvoiceDetails.validateJSON(instance); // throw an exception if no match
                // create OpenInvoiceDetails from JS object
                this.actualInstance = OpenInvoiceDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into OpenInvoiceDetails
            errorMessages.push("Failed to construct OpenInvoiceDetails: " + err)
        }

        try {
            if (typeof instance === "PayPalDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PayPalDetails.validateJSON(instance); // throw an exception if no match
                // create PayPalDetails from JS object
                this.actualInstance = PayPalDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PayPalDetails
            errorMessages.push("Failed to construct PayPalDetails: " + err)
        }

        try {
            if (typeof instance === "PayUUpiDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PayUUpiDetails.validateJSON(instance); // throw an exception if no match
                // create PayUUpiDetails from JS object
                this.actualInstance = PayUUpiDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PayUUpiDetails
            errorMessages.push("Failed to construct PayUUpiDetails: " + err)
        }

        try {
            if (typeof instance === "PayWithGoogleDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PayWithGoogleDetails.validateJSON(instance); // throw an exception if no match
                // create PayWithGoogleDetails from JS object
                this.actualInstance = PayWithGoogleDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PayWithGoogleDetails
            errorMessages.push("Failed to construct PayWithGoogleDetails: " + err)
        }

        try {
            if (typeof instance === "PaymentDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PaymentDetails.validateJSON(instance); // throw an exception if no match
                // create PaymentDetails from JS object
                this.actualInstance = PaymentDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PaymentDetails
            errorMessages.push("Failed to construct PaymentDetails: " + err)
        }

        try {
            if (typeof instance === "RatepayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RatepayDetails.validateJSON(instance); // throw an exception if no match
                // create RatepayDetails from JS object
                this.actualInstance = RatepayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RatepayDetails
            errorMessages.push("Failed to construct RatepayDetails: " + err)
        }

        try {
            if (typeof instance === "SamsungPayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SamsungPayDetails.validateJSON(instance); // throw an exception if no match
                // create SamsungPayDetails from JS object
                this.actualInstance = SamsungPayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SamsungPayDetails
            errorMessages.push("Failed to construct SamsungPayDetails: " + err)
        }

        try {
            if (typeof instance === "SepaDirectDebitDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SepaDirectDebitDetails.validateJSON(instance); // throw an exception if no match
                // create SepaDirectDebitDetails from JS object
                this.actualInstance = SepaDirectDebitDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SepaDirectDebitDetails
            errorMessages.push("Failed to construct SepaDirectDebitDetails: " + err)
        }

        try {
            if (typeof instance === "StoredPaymentMethodDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                StoredPaymentMethodDetails.validateJSON(instance); // throw an exception if no match
                // create StoredPaymentMethodDetails from JS object
                this.actualInstance = StoredPaymentMethodDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into StoredPaymentMethodDetails
            errorMessages.push("Failed to construct StoredPaymentMethodDetails: " + err)
        }

        try {
            if (typeof instance === "UpiCollectDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UpiCollectDetails.validateJSON(instance); // throw an exception if no match
                // create UpiCollectDetails from JS object
                this.actualInstance = UpiCollectDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UpiCollectDetails
            errorMessages.push("Failed to construct UpiCollectDetails: " + err)
        }

        try {
            if (typeof instance === "UpiIntentDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                UpiIntentDetails.validateJSON(instance); // throw an exception if no match
                // create UpiIntentDetails from JS object
                this.actualInstance = UpiIntentDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into UpiIntentDetails
            errorMessages.push("Failed to construct UpiIntentDetails: " + err)
        }

        try {
            if (typeof instance === "VippsDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VippsDetails.validateJSON(instance); // throw an exception if no match
                // create VippsDetails from JS object
                this.actualInstance = VippsDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VippsDetails
            errorMessages.push("Failed to construct VippsDetails: " + err)
        }

        try {
            if (typeof instance === "VisaCheckoutDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                VisaCheckoutDetails.validateJSON(instance); // throw an exception if no match
                // create VisaCheckoutDetails from JS object
                this.actualInstance = VisaCheckoutDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into VisaCheckoutDetails
            errorMessages.push("Failed to construct VisaCheckoutDetails: " + err)
        }

        try {
            if (typeof instance === "WeChatPayDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WeChatPayDetails.validateJSON(instance); // throw an exception if no match
                // create WeChatPayDetails from JS object
                this.actualInstance = WeChatPayDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WeChatPayDetails
            errorMessages.push("Failed to construct WeChatPayDetails: " + err)
        }

        try {
            if (typeof instance === "WeChatPayMiniProgramDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                WeChatPayMiniProgramDetails.validateJSON(instance); // throw an exception if no match
                // create WeChatPayMiniProgramDetails from JS object
                this.actualInstance = WeChatPayMiniProgramDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into WeChatPayMiniProgramDetails
            errorMessages.push("Failed to construct WeChatPayMiniProgramDetails: " + err)
        }

        try {
            if (typeof instance === "ZipDetails") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                ZipDetails.validateJSON(instance); // throw an exception if no match
                // create ZipDetails from JS object
                this.actualInstance = ZipDetails.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into ZipDetails
            errorMessages.push("Failed to construct ZipDetails: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `PaymentRequestPaymentMethod` with oneOf schemas AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `PaymentRequestPaymentMethod` with oneOf schemas AchDetails, AfterpayDetails, AmazonPayDetails, AndroidPayDetails, ApplePayDetails, BacsDirectDebitDetails, BillDeskDetails, BlikDetails, CardDetails, CellulantDetails, DokuDetails, DotpayDetails, DragonpayDetails, EcontextVoucherDetails, GenericIssuerPaymentMethodDetails, GiropayDetails, GooglePayDetails, IdealDetails, KlarnaDetails, MasterpassDetails, MbwayDetails, MobilePayDetails, MolPayDetails, OpenInvoiceDetails, PayPalDetails, PayUUpiDetails, PayWithGoogleDetails, PaymentDetails, RatepayDetails, SamsungPayDetails, SepaDirectDebitDetails, StoredPaymentMethodDetails, UpiCollectDetails, UpiIntentDetails, VippsDetails, VisaCheckoutDetails, WeChatPayDetails, WeChatPayMiniProgramDetails, ZipDetails. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>PaymentRequestPaymentMethod</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentRequestPaymentMethod} obj Optional instance to populate.
     * @return {module:model/PaymentRequestPaymentMethod} The populated <code>PaymentRequestPaymentMethod</code> instance.
     */
    static constructFromObject(data, obj) {
        return new PaymentRequestPaymentMethod(data);
    }

    /**
     * Gets the actual instance, which can be <code>AchDetails</code>, <code>AfterpayDetails</code>, <code>AmazonPayDetails</code>, <code>AndroidPayDetails</code>, <code>ApplePayDetails</code>, <code>BacsDirectDebitDetails</code>, <code>BillDeskDetails</code>, <code>BlikDetails</code>, <code>CardDetails</code>, <code>CellulantDetails</code>, <code>DokuDetails</code>, <code>DotpayDetails</code>, <code>DragonpayDetails</code>, <code>EcontextVoucherDetails</code>, <code>GenericIssuerPaymentMethodDetails</code>, <code>GiropayDetails</code>, <code>GooglePayDetails</code>, <code>IdealDetails</code>, <code>KlarnaDetails</code>, <code>MasterpassDetails</code>, <code>MbwayDetails</code>, <code>MobilePayDetails</code>, <code>MolPayDetails</code>, <code>OpenInvoiceDetails</code>, <code>PayPalDetails</code>, <code>PayUUpiDetails</code>, <code>PayWithGoogleDetails</code>, <code>PaymentDetails</code>, <code>RatepayDetails</code>, <code>SamsungPayDetails</code>, <code>SepaDirectDebitDetails</code>, <code>StoredPaymentMethodDetails</code>, <code>UpiCollectDetails</code>, <code>UpiIntentDetails</code>, <code>VippsDetails</code>, <code>VisaCheckoutDetails</code>, <code>WeChatPayDetails</code>, <code>WeChatPayMiniProgramDetails</code>, <code>ZipDetails</code>.
     * @return {(module:model/AchDetails|module:model/AfterpayDetails|module:model/AmazonPayDetails|module:model/AndroidPayDetails|module:model/ApplePayDetails|module:model/BacsDirectDebitDetails|module:model/BillDeskDetails|module:model/BlikDetails|module:model/CardDetails|module:model/CellulantDetails|module:model/DokuDetails|module:model/DotpayDetails|module:model/DragonpayDetails|module:model/EcontextVoucherDetails|module:model/GenericIssuerPaymentMethodDetails|module:model/GiropayDetails|module:model/GooglePayDetails|module:model/IdealDetails|module:model/KlarnaDetails|module:model/MasterpassDetails|module:model/MbwayDetails|module:model/MobilePayDetails|module:model/MolPayDetails|module:model/OpenInvoiceDetails|module:model/PayPalDetails|module:model/PayUUpiDetails|module:model/PayWithGoogleDetails|module:model/PaymentDetails|module:model/RatepayDetails|module:model/SamsungPayDetails|module:model/SepaDirectDebitDetails|module:model/StoredPaymentMethodDetails|module:model/UpiCollectDetails|module:model/UpiIntentDetails|module:model/VippsDetails|module:model/VisaCheckoutDetails|module:model/WeChatPayDetails|module:model/WeChatPayMiniProgramDetails|module:model/ZipDetails)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>AchDetails</code>, <code>AfterpayDetails</code>, <code>AmazonPayDetails</code>, <code>AndroidPayDetails</code>, <code>ApplePayDetails</code>, <code>BacsDirectDebitDetails</code>, <code>BillDeskDetails</code>, <code>BlikDetails</code>, <code>CardDetails</code>, <code>CellulantDetails</code>, <code>DokuDetails</code>, <code>DotpayDetails</code>, <code>DragonpayDetails</code>, <code>EcontextVoucherDetails</code>, <code>GenericIssuerPaymentMethodDetails</code>, <code>GiropayDetails</code>, <code>GooglePayDetails</code>, <code>IdealDetails</code>, <code>KlarnaDetails</code>, <code>MasterpassDetails</code>, <code>MbwayDetails</code>, <code>MobilePayDetails</code>, <code>MolPayDetails</code>, <code>OpenInvoiceDetails</code>, <code>PayPalDetails</code>, <code>PayUUpiDetails</code>, <code>PayWithGoogleDetails</code>, <code>PaymentDetails</code>, <code>RatepayDetails</code>, <code>SamsungPayDetails</code>, <code>SepaDirectDebitDetails</code>, <code>StoredPaymentMethodDetails</code>, <code>UpiCollectDetails</code>, <code>UpiIntentDetails</code>, <code>VippsDetails</code>, <code>VisaCheckoutDetails</code>, <code>WeChatPayDetails</code>, <code>WeChatPayMiniProgramDetails</code>, <code>ZipDetails</code>.
     * @param {(module:model/AchDetails|module:model/AfterpayDetails|module:model/AmazonPayDetails|module:model/AndroidPayDetails|module:model/ApplePayDetails|module:model/BacsDirectDebitDetails|module:model/BillDeskDetails|module:model/BlikDetails|module:model/CardDetails|module:model/CellulantDetails|module:model/DokuDetails|module:model/DotpayDetails|module:model/DragonpayDetails|module:model/EcontextVoucherDetails|module:model/GenericIssuerPaymentMethodDetails|module:model/GiropayDetails|module:model/GooglePayDetails|module:model/IdealDetails|module:model/KlarnaDetails|module:model/MasterpassDetails|module:model/MbwayDetails|module:model/MobilePayDetails|module:model/MolPayDetails|module:model/OpenInvoiceDetails|module:model/PayPalDetails|module:model/PayUUpiDetails|module:model/PayWithGoogleDetails|module:model/PaymentDetails|module:model/RatepayDetails|module:model/SamsungPayDetails|module:model/SepaDirectDebitDetails|module:model/StoredPaymentMethodDetails|module:model/UpiCollectDetails|module:model/UpiIntentDetails|module:model/VippsDetails|module:model/VisaCheckoutDetails|module:model/WeChatPayDetails|module:model/WeChatPayMiniProgramDetails|module:model/ZipDetails)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = PaymentRequestPaymentMethod.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of PaymentRequestPaymentMethod from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/PaymentRequestPaymentMethod} An instance of PaymentRequestPaymentMethod.
     */
    static fromJSON = function(json_string){
        return PaymentRequestPaymentMethod.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The bank account number (without separators).
 * @member {String} bankAccountNumber
 */
PaymentRequestPaymentMethod.prototype['bankAccountNumber'] = undefined;

/**
 * The bank account type (checking, savings...).
 * @member {module:model/PaymentRequestPaymentMethod.BankAccountTypeEnum} bankAccountType
 */
PaymentRequestPaymentMethod.prototype['bankAccountType'] = undefined;

/**
 * The bank routing number of the account. The field value is `nil` in most cases.
 * @member {String} bankLocationId
 */
PaymentRequestPaymentMethod.prototype['bankLocationId'] = undefined;

/**
 * Encrypted bank account number. The bank account number (without separators).
 * @member {String} encryptedBankAccountNumber
 */
PaymentRequestPaymentMethod.prototype['encryptedBankAccountNumber'] = undefined;

/**
 * Encrypted location id. The bank routing number of the account. The field value is `nil` in most cases.
 * @member {String} encryptedBankLocationId
 */
PaymentRequestPaymentMethod.prototype['encryptedBankLocationId'] = undefined;

/**
 * The name of the bank account holder.
 * @member {String} ownerName
 */
PaymentRequestPaymentMethod.prototype['ownerName'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} recurringDetailReference
 */
PaymentRequestPaymentMethod.prototype['recurringDetailReference'] = undefined;

/**
 * This is the `recurringDetailReference` returned in the response when you created the token.
 * @member {String} storedPaymentMethodId
 */
PaymentRequestPaymentMethod.prototype['storedPaymentMethodId'] = undefined;

/**
 * **ach**
 * @member {module:model/PaymentRequestPaymentMethod.TypeEnum} type
 * @default 'ach'
 */
PaymentRequestPaymentMethod.prototype['type'] = 'ach';

/**
 * The address where to send the invoice.
 * @member {String} billingAddress
 */
PaymentRequestPaymentMethod.prototype['billingAddress'] = undefined;

/**
 * The address where the goods should be delivered.
 * @member {String} deliveryAddress
 */
PaymentRequestPaymentMethod.prototype['deliveryAddress'] = undefined;

/**
 * Shopper name, date of birth, phone number, and email address.
 * @member {String} personalDetails
 */
PaymentRequestPaymentMethod.prototype['personalDetails'] = undefined;

/**
 * This is the `amazonPayToken` that you obtained from the [Get Checkout Session](https://amazon-pay-acquirer-guide.s3-eu-west-1.amazonaws.com/v1/amazon-pay-api-v2/checkout-session.html#get-checkout-session) response. This token is used for API only integration specifically.
 * @member {String} amazonPayToken
 */
PaymentRequestPaymentMethod.prototype['amazonPayToken'] = undefined;

/**
 * The `checkoutSessionId` is used to identify the checkout session at the Amazon Pay side. This field is required only for drop-in and components integration, where it replaces the amazonPayToken.
 * @member {String} checkoutSessionId
 */
PaymentRequestPaymentMethod.prototype['checkoutSessionId'] = undefined;

/**
 * The stringified and base64 encoded `paymentData` you retrieved from the Apple framework.
 * @member {String} applePayToken
 */
PaymentRequestPaymentMethod.prototype['applePayToken'] = undefined;

/**
 * The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.
 * @member {module:model/PaymentRequestPaymentMethod.FundingSourceEnum} fundingSource
 */
PaymentRequestPaymentMethod.prototype['fundingSource'] = undefined;

/**
 * The shopper's bank. Specify this with the issuer value that corresponds to this bank.
 * @member {String} issuer
 */
PaymentRequestPaymentMethod.prototype['issuer'] = undefined;

/**
 * BLIK code consisting of 6 digits.
 * @member {String} blikCode
 */
PaymentRequestPaymentMethod.prototype['blikCode'] = undefined;

/**
 * Secondary brand of the card. For example: **plastix**, **hmclub**.
 * @member {String} brand
 */
PaymentRequestPaymentMethod.prototype['brand'] = undefined;

/**
 * @member {String} cupsecureplus.smscode
 */
PaymentRequestPaymentMethod.prototype['cupsecureplus.smscode'] = undefined;

/**
 * The card verification code. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} cvc
 */
PaymentRequestPaymentMethod.prototype['cvc'] = undefined;

/**
 * The encrypted card number.
 * @member {String} encryptedCardNumber
 */
PaymentRequestPaymentMethod.prototype['encryptedCardNumber'] = undefined;

/**
 * The encrypted card expiry month.
 * @member {String} encryptedExpiryMonth
 */
PaymentRequestPaymentMethod.prototype['encryptedExpiryMonth'] = undefined;

/**
 * The encrypted card expiry year.
 * @member {String} encryptedExpiryYear
 */
PaymentRequestPaymentMethod.prototype['encryptedExpiryYear'] = undefined;

/**
 * The encrypted card verification code.
 * @member {String} encryptedSecurityCode
 */
PaymentRequestPaymentMethod.prototype['encryptedSecurityCode'] = undefined;

/**
 * The card expiry month. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} expiryMonth
 */
PaymentRequestPaymentMethod.prototype['expiryMonth'] = undefined;

/**
 * The card expiry year. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} expiryYear
 */
PaymentRequestPaymentMethod.prototype['expiryYear'] = undefined;

/**
 * The name of the card holder.
 * @member {String} holderName
 */
PaymentRequestPaymentMethod.prototype['holderName'] = undefined;

/**
 * The network token reference. This is the [`networkTxReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-networkTxReference) from the response to the first payment.
 * @member {String} networkPaymentReference
 */
PaymentRequestPaymentMethod.prototype['networkPaymentReference'] = undefined;

/**
 * The card number. Only collect raw card data if you are [fully PCI compliant](https://docs.adyen.com/development-resources/pci-dss-compliance-guide).
 * @member {String} number
 */
PaymentRequestPaymentMethod.prototype['number'] = undefined;

/**
 * The `shopperNotificationReference` returned in the response when you requested to notify the shopper. Used for recurring payment only.
 * @member {String} shopperNotificationReference
 */
PaymentRequestPaymentMethod.prototype['shopperNotificationReference'] = undefined;

/**
 * Required for mobile integrations. Version of the 3D Secure 2 mobile SDK.
 * @member {String} threeDS2SdkVersion
 */
PaymentRequestPaymentMethod.prototype['threeDS2SdkVersion'] = undefined;

/**
 * The shopper's first name.
 * @member {String} firstName
 */
PaymentRequestPaymentMethod.prototype['firstName'] = undefined;

/**
 * The shopper's last name.
 * @member {String} lastName
 */
PaymentRequestPaymentMethod.prototype['lastName'] = undefined;

/**
 * 
 * @member {String} shopperEmail
 */
PaymentRequestPaymentMethod.prototype['shopperEmail'] = undefined;

/**
 * 
 * @member {String} telephoneNumber
 */
PaymentRequestPaymentMethod.prototype['telephoneNumber'] = undefined;

/**
 * The selected payment card network. 
 * @member {String} googlePayCardNetwork
 */
PaymentRequestPaymentMethod.prototype['googlePayCardNetwork'] = undefined;

/**
 * The `token` that you obtained from the [Google Pay API](https://developers.google.com/pay/api/web/reference/response-objects#PaymentData) `PaymentData` response.
 * @member {String} googlePayToken
 */
PaymentRequestPaymentMethod.prototype['googlePayToken'] = undefined;

/**
 * The type of flow to initiate.
 * @member {module:model/PaymentRequestPaymentMethod.SubtypeEnum} subtype
 */
PaymentRequestPaymentMethod.prototype['subtype'] = undefined;

/**
 * The Masterpass transaction ID.
 * @member {String} masterpassTransactionId
 */
PaymentRequestPaymentMethod.prototype['masterpassTransactionId'] = undefined;

/**
 * The unique ID associated with the order.
 * @member {String} orderID
 */
PaymentRequestPaymentMethod.prototype['orderID'] = undefined;

/**
 * IMMEDIATE_PAYMENT_REQUIRED or UNRESTRICTED
 * @member {String} payeePreferred
 */
PaymentRequestPaymentMethod.prototype['payeePreferred'] = undefined;

/**
 * The unique ID associated with the payer.
 * @member {String} payerID
 */
PaymentRequestPaymentMethod.prototype['payerID'] = undefined;

/**
 * PAYPAL or PAYPAL_CREDIT
 * @member {String} payerSelected
 */
PaymentRequestPaymentMethod.prototype['payerSelected'] = undefined;

/**
 * The virtual payment address for UPI.
 * @member {String} virtualPaymentAddress
 */
PaymentRequestPaymentMethod.prototype['virtualPaymentAddress'] = undefined;

/**
 * The payload you received from the Samsung Pay SDK response.
 * @member {String} samsungPayToken
 */
PaymentRequestPaymentMethod.prototype['samsungPayToken'] = undefined;

/**
 * The International Bank Account Number (IBAN).
 * @member {String} iban
 */
PaymentRequestPaymentMethod.prototype['iban'] = undefined;

/**
 * The sequence number for the debit. For example, send **2** if this is the second debit for the subscription. The sequence number is included in the notification sent to the shopper.
 * @member {String} billingSequenceNumber
 */
PaymentRequestPaymentMethod.prototype['billingSequenceNumber'] = undefined;

/**
 * The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.
 * @member {String} visaCheckoutCallId
 */
PaymentRequestPaymentMethod.prototype['visaCheckoutCallId'] = undefined;

/**
 * @member {String} appId
 */
PaymentRequestPaymentMethod.prototype['appId'] = undefined;

/**
 * @member {String} openid
 */
PaymentRequestPaymentMethod.prototype['openid'] = undefined;

/**
 * Set this to **true** if the shopper would like to pick up and collect their order, instead of having the goods delivered to them.
 * @member {String} clickAndCollect
 */
PaymentRequestPaymentMethod.prototype['clickAndCollect'] = undefined;


PaymentRequestPaymentMethod.OneOf = ["AchDetails", "AfterpayDetails", "AmazonPayDetails", "AndroidPayDetails", "ApplePayDetails", "BacsDirectDebitDetails", "BillDeskDetails", "BlikDetails", "CardDetails", "CellulantDetails", "DokuDetails", "DotpayDetails", "DragonpayDetails", "EcontextVoucherDetails", "GenericIssuerPaymentMethodDetails", "GiropayDetails", "GooglePayDetails", "IdealDetails", "KlarnaDetails", "MasterpassDetails", "MbwayDetails", "MobilePayDetails", "MolPayDetails", "OpenInvoiceDetails", "PayPalDetails", "PayUUpiDetails", "PayWithGoogleDetails", "PaymentDetails", "RatepayDetails", "SamsungPayDetails", "SepaDirectDebitDetails", "StoredPaymentMethodDetails", "UpiCollectDetails", "UpiIntentDetails", "VippsDetails", "VisaCheckoutDetails", "WeChatPayDetails", "WeChatPayMiniProgramDetails", "ZipDetails"];

export default PaymentRequestPaymentMethod;

