/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v50/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v50/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=50) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 50
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStoredPaymentMethod.h
 *
 * 
 */

#ifndef OAIStoredPaymentMethod_H
#define OAIStoredPaymentMethod_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStoredPaymentMethod : public OAIObject {
public:
    OAIStoredPaymentMethod();
    OAIStoredPaymentMethod(QString json);
    ~OAIStoredPaymentMethod() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBankAccountNumber() const;
    void setBankAccountNumber(const QString &bank_account_number);
    bool is_bank_account_number_Set() const;
    bool is_bank_account_number_Valid() const;

    QString getBankLocationId() const;
    void setBankLocationId(const QString &bank_location_id);
    bool is_bank_location_id_Set() const;
    bool is_bank_location_id_Valid() const;

    QString getBrand() const;
    void setBrand(const QString &brand);
    bool is_brand_Set() const;
    bool is_brand_Valid() const;

    QString getExpiryMonth() const;
    void setExpiryMonth(const QString &expiry_month);
    bool is_expiry_month_Set() const;
    bool is_expiry_month_Valid() const;

    QString getExpiryYear() const;
    void setExpiryYear(const QString &expiry_year);
    bool is_expiry_year_Set() const;
    bool is_expiry_year_Valid() const;

    QString getHolderName() const;
    void setHolderName(const QString &holder_name);
    bool is_holder_name_Set() const;
    bool is_holder_name_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getLastFour() const;
    void setLastFour(const QString &last_four);
    bool is_last_four_Set() const;
    bool is_last_four_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    QList<QString> getSupportedShopperInteractions() const;
    void setSupportedShopperInteractions(const QList<QString> &supported_shopper_interactions);
    bool is_supported_shopper_interactions_Set() const;
    bool is_supported_shopper_interactions_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bank_account_number;
    bool m_bank_account_number_isSet;
    bool m_bank_account_number_isValid;

    QString m_bank_location_id;
    bool m_bank_location_id_isSet;
    bool m_bank_location_id_isValid;

    QString m_brand;
    bool m_brand_isSet;
    bool m_brand_isValid;

    QString m_expiry_month;
    bool m_expiry_month_isSet;
    bool m_expiry_month_isValid;

    QString m_expiry_year;
    bool m_expiry_year_isSet;
    bool m_expiry_year_isValid;

    QString m_holder_name;
    bool m_holder_name_isSet;
    bool m_holder_name_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_last_four;
    bool m_last_four_isSet;
    bool m_last_four_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    QList<QString> m_supported_shopper_interactions;
    bool m_supported_shopper_interactions_isSet;
    bool m_supported_shopper_interactions_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStoredPaymentMethod)

#endif // OAIStoredPaymentMethod_H
