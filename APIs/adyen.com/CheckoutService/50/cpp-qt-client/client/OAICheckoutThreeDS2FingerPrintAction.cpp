/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v50/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v50/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=50) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 50
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckoutThreeDS2FingerPrintAction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckoutThreeDS2FingerPrintAction::OAICheckoutThreeDS2FingerPrintAction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckoutThreeDS2FingerPrintAction::OAICheckoutThreeDS2FingerPrintAction() {
    this->initializeModel();
}

OAICheckoutThreeDS2FingerPrintAction::~OAICheckoutThreeDS2FingerPrintAction() {}

void OAICheckoutThreeDS2FingerPrintAction::initializeModel() {

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_payment_method_type_isSet = false;
    m_payment_method_type_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAICheckoutThreeDS2FingerPrintAction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckoutThreeDS2FingerPrintAction::fromJsonObject(QJsonObject json) {

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("paymentData")]);
    m_payment_data_isSet = !json[QString("paymentData")].isNull() && m_payment_data_isValid;

    m_payment_method_type_isValid = ::OpenAPI::fromJsonValue(m_payment_method_type, json[QString("paymentMethodType")]);
    m_payment_method_type_isSet = !json[QString("paymentMethodType")].isNull() && m_payment_method_type_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAICheckoutThreeDS2FingerPrintAction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckoutThreeDS2FingerPrintAction::asJsonObject() const {
    QJsonObject obj;
    if (m_payment_data_isSet) {
        obj.insert(QString("paymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_payment_method_type_isSet) {
        obj.insert(QString("paymentMethodType"), ::OpenAPI::toJsonValue(m_payment_method_type));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAICheckoutThreeDS2FingerPrintAction::getPaymentData() const {
    return m_payment_data;
}
void OAICheckoutThreeDS2FingerPrintAction::setPaymentData(const QString &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

QString OAICheckoutThreeDS2FingerPrintAction::getPaymentMethodType() const {
    return m_payment_method_type;
}
void OAICheckoutThreeDS2FingerPrintAction::setPaymentMethodType(const QString &payment_method_type) {
    m_payment_method_type = payment_method_type;
    m_payment_method_type_isSet = true;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_payment_method_type_Set() const{
    return m_payment_method_type_isSet;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_payment_method_type_Valid() const{
    return m_payment_method_type_isValid;
}

QString OAICheckoutThreeDS2FingerPrintAction::getToken() const {
    return m_token;
}
void OAICheckoutThreeDS2FingerPrintAction::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_token_Set() const{
    return m_token_isSet;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_token_Valid() const{
    return m_token_isValid;
}

QString OAICheckoutThreeDS2FingerPrintAction::getType() const {
    return m_type;
}
void OAICheckoutThreeDS2FingerPrintAction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_type_Set() const{
    return m_type_isSet;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_type_Valid() const{
    return m_type_isValid;
}

QString OAICheckoutThreeDS2FingerPrintAction::getUrl() const {
    return m_url;
}
void OAICheckoutThreeDS2FingerPrintAction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_url_Set() const{
    return m_url_isSet;
}

bool OAICheckoutThreeDS2FingerPrintAction::is_url_Valid() const{
    return m_url_isValid;
}

bool OAICheckoutThreeDS2FingerPrintAction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payment_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckoutThreeDS2FingerPrintAction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
