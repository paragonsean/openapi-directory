/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v52/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v52/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=52) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentResponse_action.h
 *
 * Action to be taken for completing the payment.
 */

#ifndef OAIPaymentResponse_action_H
#define OAIPaymentResponse_action_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAICheckoutAwaitAction.h"
#include "OAICheckoutNativeRedirectAction.h"
#include "OAICheckoutQrCodeAction.h"
#include "OAICheckoutRedirectAction.h"
#include "OAICheckoutSDKAction.h"
#include "OAICheckoutThreeDS2ChallengeAction.h"
#include "OAICheckoutThreeDS2FingerPrintAction.h"
#include "OAICheckoutVoucherAction.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIPaymentResponse_action : public OAIObject {
public:
    OAIPaymentResponse_action();
    OAIPaymentResponse_action(QString json);
    ~OAIPaymentResponse_action() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getPaymentData() const;
    void setPaymentData(const QString &payment_data);
    bool is_payment_data_Set() const;
    bool is_payment_data_Valid() const;

    QString getPaymentMethodType() const;
    void setPaymentMethodType(const QString &payment_method_type);
    bool is_payment_method_type_Set() const;
    bool is_payment_method_type_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUrl() const;
    void setUrl(const QString &url);
    bool is_url_Set() const;
    bool is_url_Valid() const;

    QMap<QString, QString> getData() const;
    void setData(const QMap<QString, QString> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getMethod() const;
    void setMethod(const QString &method);
    bool is_method_Set() const;
    bool is_method_Valid() const;

    QString getNativeRedirectData() const;
    void setNativeRedirectData(const QString &native_redirect_data);
    bool is_native_redirect_data_Set() const;
    bool is_native_redirect_data_Valid() const;

    QString getExpiresAt() const;
    void setExpiresAt(const QString &expires_at);
    bool is_expires_at_Set() const;
    bool is_expires_at_Valid() const;

    QString getQrCodeData() const;
    void setQrCodeData(const QString &qr_code_data);
    bool is_qr_code_data_Set() const;
    bool is_qr_code_data_Valid() const;

    QMap<QString, QString> getSdkData() const;
    void setSdkData(const QMap<QString, QString> &sdk_data);
    bool is_sdk_data_Set() const;
    bool is_sdk_data_Valid() const;

    QString getToken() const;
    void setToken(const QString &token);
    bool is_token_Set() const;
    bool is_token_Valid() const;

    QString getAlternativeReference() const;
    void setAlternativeReference(const QString &alternative_reference);
    bool is_alternative_reference_Set() const;
    bool is_alternative_reference_Valid() const;

    QString getCollectionInstitutionNumber() const;
    void setCollectionInstitutionNumber(const QString &collection_institution_number);
    bool is_collection_institution_number_Set() const;
    bool is_collection_institution_number_Valid() const;

    QString getDownloadUrl() const;
    void setDownloadUrl(const QString &download_url);
    bool is_download_url_Set() const;
    bool is_download_url_Valid() const;

    QString getEntity() const;
    void setEntity(const QString &entity);
    bool is_entity_Set() const;
    bool is_entity_Valid() const;

    OAIAmount getInitialAmount() const;
    void setInitialAmount(const OAIAmount &initial_amount);
    bool is_initial_amount_Set() const;
    bool is_initial_amount_Valid() const;

    QString getInstructionsUrl() const;
    void setInstructionsUrl(const QString &instructions_url);
    bool is_instructions_url_Set() const;
    bool is_instructions_url_Valid() const;

    QString getIssuer() const;
    void setIssuer(const QString &issuer);
    bool is_issuer_Set() const;
    bool is_issuer_Valid() const;

    QString getMaskedTelephoneNumber() const;
    void setMaskedTelephoneNumber(const QString &masked_telephone_number);
    bool is_masked_telephone_number_Set() const;
    bool is_masked_telephone_number_Valid() const;

    QString getMerchantName() const;
    void setMerchantName(const QString &merchant_name);
    bool is_merchant_name_Set() const;
    bool is_merchant_name_Valid() const;

    QString getMerchantReference() const;
    void setMerchantReference(const QString &merchant_reference);
    bool is_merchant_reference_Set() const;
    bool is_merchant_reference_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    QString getShopperName() const;
    void setShopperName(const QString &shopper_name);
    bool is_shopper_name_Set() const;
    bool is_shopper_name_Valid() const;

    OAIAmount getSurcharge() const;
    void setSurcharge(const OAIAmount &surcharge);
    bool is_surcharge_Set() const;
    bool is_surcharge_Valid() const;

    OAIAmount getTotalAmount() const;
    void setTotalAmount(const OAIAmount &total_amount);
    bool is_total_amount_Set() const;
    bool is_total_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_payment_data;
    bool m_payment_data_isSet;
    bool m_payment_data_isValid;

    QString m_payment_method_type;
    bool m_payment_method_type_isSet;
    bool m_payment_method_type_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_url;
    bool m_url_isSet;
    bool m_url_isValid;

    QMap<QString, QString> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_method;
    bool m_method_isSet;
    bool m_method_isValid;

    QString m_native_redirect_data;
    bool m_native_redirect_data_isSet;
    bool m_native_redirect_data_isValid;

    QString m_expires_at;
    bool m_expires_at_isSet;
    bool m_expires_at_isValid;

    QString m_qr_code_data;
    bool m_qr_code_data_isSet;
    bool m_qr_code_data_isValid;

    QMap<QString, QString> m_sdk_data;
    bool m_sdk_data_isSet;
    bool m_sdk_data_isValid;

    QString m_token;
    bool m_token_isSet;
    bool m_token_isValid;

    QString m_alternative_reference;
    bool m_alternative_reference_isSet;
    bool m_alternative_reference_isValid;

    QString m_collection_institution_number;
    bool m_collection_institution_number_isSet;
    bool m_collection_institution_number_isValid;

    QString m_download_url;
    bool m_download_url_isSet;
    bool m_download_url_isValid;

    QString m_entity;
    bool m_entity_isSet;
    bool m_entity_isValid;

    OAIAmount m_initial_amount;
    bool m_initial_amount_isSet;
    bool m_initial_amount_isValid;

    QString m_instructions_url;
    bool m_instructions_url_isSet;
    bool m_instructions_url_isValid;

    QString m_issuer;
    bool m_issuer_isSet;
    bool m_issuer_isValid;

    QString m_masked_telephone_number;
    bool m_masked_telephone_number_isSet;
    bool m_masked_telephone_number_isValid;

    QString m_merchant_name;
    bool m_merchant_name_isSet;
    bool m_merchant_name_isValid;

    QString m_merchant_reference;
    bool m_merchant_reference_isSet;
    bool m_merchant_reference_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    QString m_shopper_name;
    bool m_shopper_name_isSet;
    bool m_shopper_name_isValid;

    OAIAmount m_surcharge;
    bool m_surcharge_isSet;
    bool m_surcharge_isValid;

    OAIAmount m_total_amount;
    bool m_total_amount_isSet;
    bool m_total_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentResponse_action)

#endif // OAIPaymentResponse_action_H
