/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v52/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v52/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=52) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentMethodsRequest.h
 *
 * 
 */

#ifndef OAIPaymentMethodsRequest_H
#define OAIPaymentMethodsRequest_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAIBalanceCheckRequest_additionalData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBalanceCheckRequest_additionalData;
class OAIAmount;

class OAIPaymentMethodsRequest : public OAIObject {
public:
    OAIPaymentMethodsRequest();
    OAIPaymentMethodsRequest(QString json);
    ~OAIPaymentMethodsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBalanceCheckRequest_additionalData getAdditionalData() const;
    void setAdditionalData(const OAIBalanceCheckRequest_additionalData &additional_data);
    bool is_additional_data_Set() const;
    bool is_additional_data_Valid() const;

    QList<QString> getAllowedPaymentMethods() const;
    void setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods);
    bool is_allowed_payment_methods_Set() const;
    bool is_allowed_payment_methods_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QList<QString> getBlockedPaymentMethods() const;
    void setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods);
    bool is_blocked_payment_methods_Set() const;
    bool is_blocked_payment_methods_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    QString getCountryCode() const;
    void setCountryCode(const QString &country_code);
    bool is_country_code_Set() const;
    bool is_country_code_Valid() const;

    Q_DECL_DEPRECATED bool isEnableRealTimeUpdate() const;
    Q_DECL_DEPRECATED void setEnableRealTimeUpdate(const bool &enable_real_time_update);
    Q_DECL_DEPRECATED bool is_enable_real_time_update_Set() const;
    Q_DECL_DEPRECATED bool is_enable_real_time_update_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    QString getShopperLocale() const;
    void setShopperLocale(const QString &shopper_locale);
    bool is_shopper_locale_Set() const;
    bool is_shopper_locale_Valid() const;

    QString getShopperReference() const;
    void setShopperReference(const QString &shopper_reference);
    bool is_shopper_reference_Set() const;
    bool is_shopper_reference_Valid() const;

    QString getStore() const;
    void setStore(const QString &store);
    bool is_store_Set() const;
    bool is_store_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBalanceCheckRequest_additionalData m_additional_data;
    bool m_additional_data_isSet;
    bool m_additional_data_isValid;

    QList<QString> m_allowed_payment_methods;
    bool m_allowed_payment_methods_isSet;
    bool m_allowed_payment_methods_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QList<QString> m_blocked_payment_methods;
    bool m_blocked_payment_methods_isSet;
    bool m_blocked_payment_methods_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    QString m_country_code;
    bool m_country_code_isSet;
    bool m_country_code_isValid;

    bool m_enable_real_time_update;
    bool m_enable_real_time_update_isSet;
    bool m_enable_real_time_update_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    QString m_shopper_locale;
    bool m_shopper_locale_isSet;
    bool m_shopper_locale_isValid;

    QString m_shopper_reference;
    bool m_shopper_reference_isSet;
    bool m_shopper_reference_isValid;

    QString m_store;
    bool m_store_isSet;
    bool m_store_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentMethodsRequest)

#endif // OAIPaymentMethodsRequest_H
