/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v52/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v52/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=52) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataRiskStandalone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataRiskStandalone::OAIAdditionalDataRiskStandalone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataRiskStandalone::OAIAdditionalDataRiskStandalone() {
    this->initializeModel();
}

OAIAdditionalDataRiskStandalone::~OAIAdditionalDataRiskStandalone() {}

void OAIAdditionalDataRiskStandalone::initializeModel() {

    m_pay_pal_country_code_isSet = false;
    m_pay_pal_country_code_isValid = false;

    m_pay_pal_email_id_isSet = false;
    m_pay_pal_email_id_isValid = false;

    m_pay_pal_first_name_isSet = false;
    m_pay_pal_first_name_isValid = false;

    m_pay_pal_last_name_isSet = false;
    m_pay_pal_last_name_isValid = false;

    m_pay_pal_payer_id_isSet = false;
    m_pay_pal_payer_id_isValid = false;

    m_pay_pal_phone_isSet = false;
    m_pay_pal_phone_isValid = false;

    m_pay_pal_protection_eligibility_isSet = false;
    m_pay_pal_protection_eligibility_isValid = false;

    m_pay_pal_transaction_id_isSet = false;
    m_pay_pal_transaction_id_isValid = false;

    m_avs_result_raw_isSet = false;
    m_avs_result_raw_isValid = false;

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_cvc_result_raw_isSet = false;
    m_cvc_result_raw_isValid = false;

    m_risk_token_isSet = false;
    m_risk_token_isValid = false;

    m_three_d_authenticated_isSet = false;
    m_three_d_authenticated_isValid = false;

    m_three_d_offered_isSet = false;
    m_three_d_offered_isValid = false;

    m_token_data_type_isSet = false;
    m_token_data_type_isValid = false;
}

void OAIAdditionalDataRiskStandalone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataRiskStandalone::fromJsonObject(QJsonObject json) {

    m_pay_pal_country_code_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_country_code, json[QString("PayPal.CountryCode")]);
    m_pay_pal_country_code_isSet = !json[QString("PayPal.CountryCode")].isNull() && m_pay_pal_country_code_isValid;

    m_pay_pal_email_id_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_email_id, json[QString("PayPal.EmailId")]);
    m_pay_pal_email_id_isSet = !json[QString("PayPal.EmailId")].isNull() && m_pay_pal_email_id_isValid;

    m_pay_pal_first_name_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_first_name, json[QString("PayPal.FirstName")]);
    m_pay_pal_first_name_isSet = !json[QString("PayPal.FirstName")].isNull() && m_pay_pal_first_name_isValid;

    m_pay_pal_last_name_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_last_name, json[QString("PayPal.LastName")]);
    m_pay_pal_last_name_isSet = !json[QString("PayPal.LastName")].isNull() && m_pay_pal_last_name_isValid;

    m_pay_pal_payer_id_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_payer_id, json[QString("PayPal.PayerId")]);
    m_pay_pal_payer_id_isSet = !json[QString("PayPal.PayerId")].isNull() && m_pay_pal_payer_id_isValid;

    m_pay_pal_phone_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_phone, json[QString("PayPal.Phone")]);
    m_pay_pal_phone_isSet = !json[QString("PayPal.Phone")].isNull() && m_pay_pal_phone_isValid;

    m_pay_pal_protection_eligibility_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_protection_eligibility, json[QString("PayPal.ProtectionEligibility")]);
    m_pay_pal_protection_eligibility_isSet = !json[QString("PayPal.ProtectionEligibility")].isNull() && m_pay_pal_protection_eligibility_isValid;

    m_pay_pal_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_pay_pal_transaction_id, json[QString("PayPal.TransactionId")]);
    m_pay_pal_transaction_id_isSet = !json[QString("PayPal.TransactionId")].isNull() && m_pay_pal_transaction_id_isValid;

    m_avs_result_raw_isValid = ::OpenAPI::fromJsonValue(m_avs_result_raw, json[QString("avsResultRaw")]);
    m_avs_result_raw_isSet = !json[QString("avsResultRaw")].isNull() && m_avs_result_raw_isValid;

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_cvc_result_raw_isValid = ::OpenAPI::fromJsonValue(m_cvc_result_raw, json[QString("cvcResultRaw")]);
    m_cvc_result_raw_isSet = !json[QString("cvcResultRaw")].isNull() && m_cvc_result_raw_isValid;

    m_risk_token_isValid = ::OpenAPI::fromJsonValue(m_risk_token, json[QString("riskToken")]);
    m_risk_token_isSet = !json[QString("riskToken")].isNull() && m_risk_token_isValid;

    m_three_d_authenticated_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated, json[QString("threeDAuthenticated")]);
    m_three_d_authenticated_isSet = !json[QString("threeDAuthenticated")].isNull() && m_three_d_authenticated_isValid;

    m_three_d_offered_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered, json[QString("threeDOffered")]);
    m_three_d_offered_isSet = !json[QString("threeDOffered")].isNull() && m_three_d_offered_isValid;

    m_token_data_type_isValid = ::OpenAPI::fromJsonValue(m_token_data_type, json[QString("tokenDataType")]);
    m_token_data_type_isSet = !json[QString("tokenDataType")].isNull() && m_token_data_type_isValid;
}

QString OAIAdditionalDataRiskStandalone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataRiskStandalone::asJsonObject() const {
    QJsonObject obj;
    if (m_pay_pal_country_code_isSet) {
        obj.insert(QString("PayPal.CountryCode"), ::OpenAPI::toJsonValue(m_pay_pal_country_code));
    }
    if (m_pay_pal_email_id_isSet) {
        obj.insert(QString("PayPal.EmailId"), ::OpenAPI::toJsonValue(m_pay_pal_email_id));
    }
    if (m_pay_pal_first_name_isSet) {
        obj.insert(QString("PayPal.FirstName"), ::OpenAPI::toJsonValue(m_pay_pal_first_name));
    }
    if (m_pay_pal_last_name_isSet) {
        obj.insert(QString("PayPal.LastName"), ::OpenAPI::toJsonValue(m_pay_pal_last_name));
    }
    if (m_pay_pal_payer_id_isSet) {
        obj.insert(QString("PayPal.PayerId"), ::OpenAPI::toJsonValue(m_pay_pal_payer_id));
    }
    if (m_pay_pal_phone_isSet) {
        obj.insert(QString("PayPal.Phone"), ::OpenAPI::toJsonValue(m_pay_pal_phone));
    }
    if (m_pay_pal_protection_eligibility_isSet) {
        obj.insert(QString("PayPal.ProtectionEligibility"), ::OpenAPI::toJsonValue(m_pay_pal_protection_eligibility));
    }
    if (m_pay_pal_transaction_id_isSet) {
        obj.insert(QString("PayPal.TransactionId"), ::OpenAPI::toJsonValue(m_pay_pal_transaction_id));
    }
    if (m_avs_result_raw_isSet) {
        obj.insert(QString("avsResultRaw"), ::OpenAPI::toJsonValue(m_avs_result_raw));
    }
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_cvc_result_raw_isSet) {
        obj.insert(QString("cvcResultRaw"), ::OpenAPI::toJsonValue(m_cvc_result_raw));
    }
    if (m_risk_token_isSet) {
        obj.insert(QString("riskToken"), ::OpenAPI::toJsonValue(m_risk_token));
    }
    if (m_three_d_authenticated_isSet) {
        obj.insert(QString("threeDAuthenticated"), ::OpenAPI::toJsonValue(m_three_d_authenticated));
    }
    if (m_three_d_offered_isSet) {
        obj.insert(QString("threeDOffered"), ::OpenAPI::toJsonValue(m_three_d_offered));
    }
    if (m_token_data_type_isSet) {
        obj.insert(QString("tokenDataType"), ::OpenAPI::toJsonValue(m_token_data_type));
    }
    return obj;
}

QString OAIAdditionalDataRiskStandalone::getPayPalCountryCode() const {
    return m_pay_pal_country_code;
}
void OAIAdditionalDataRiskStandalone::setPayPalCountryCode(const QString &pay_pal_country_code) {
    m_pay_pal_country_code = pay_pal_country_code;
    m_pay_pal_country_code_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_country_code_Set() const{
    return m_pay_pal_country_code_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_country_code_Valid() const{
    return m_pay_pal_country_code_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalEmailId() const {
    return m_pay_pal_email_id;
}
void OAIAdditionalDataRiskStandalone::setPayPalEmailId(const QString &pay_pal_email_id) {
    m_pay_pal_email_id = pay_pal_email_id;
    m_pay_pal_email_id_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_email_id_Set() const{
    return m_pay_pal_email_id_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_email_id_Valid() const{
    return m_pay_pal_email_id_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalFirstName() const {
    return m_pay_pal_first_name;
}
void OAIAdditionalDataRiskStandalone::setPayPalFirstName(const QString &pay_pal_first_name) {
    m_pay_pal_first_name = pay_pal_first_name;
    m_pay_pal_first_name_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_first_name_Set() const{
    return m_pay_pal_first_name_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_first_name_Valid() const{
    return m_pay_pal_first_name_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalLastName() const {
    return m_pay_pal_last_name;
}
void OAIAdditionalDataRiskStandalone::setPayPalLastName(const QString &pay_pal_last_name) {
    m_pay_pal_last_name = pay_pal_last_name;
    m_pay_pal_last_name_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_last_name_Set() const{
    return m_pay_pal_last_name_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_last_name_Valid() const{
    return m_pay_pal_last_name_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalPayerId() const {
    return m_pay_pal_payer_id;
}
void OAIAdditionalDataRiskStandalone::setPayPalPayerId(const QString &pay_pal_payer_id) {
    m_pay_pal_payer_id = pay_pal_payer_id;
    m_pay_pal_payer_id_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_payer_id_Set() const{
    return m_pay_pal_payer_id_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_payer_id_Valid() const{
    return m_pay_pal_payer_id_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalPhone() const {
    return m_pay_pal_phone;
}
void OAIAdditionalDataRiskStandalone::setPayPalPhone(const QString &pay_pal_phone) {
    m_pay_pal_phone = pay_pal_phone;
    m_pay_pal_phone_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_phone_Set() const{
    return m_pay_pal_phone_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_phone_Valid() const{
    return m_pay_pal_phone_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalProtectionEligibility() const {
    return m_pay_pal_protection_eligibility;
}
void OAIAdditionalDataRiskStandalone::setPayPalProtectionEligibility(const QString &pay_pal_protection_eligibility) {
    m_pay_pal_protection_eligibility = pay_pal_protection_eligibility;
    m_pay_pal_protection_eligibility_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_protection_eligibility_Set() const{
    return m_pay_pal_protection_eligibility_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_protection_eligibility_Valid() const{
    return m_pay_pal_protection_eligibility_isValid;
}

QString OAIAdditionalDataRiskStandalone::getPayPalTransactionId() const {
    return m_pay_pal_transaction_id;
}
void OAIAdditionalDataRiskStandalone::setPayPalTransactionId(const QString &pay_pal_transaction_id) {
    m_pay_pal_transaction_id = pay_pal_transaction_id;
    m_pay_pal_transaction_id_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_transaction_id_Set() const{
    return m_pay_pal_transaction_id_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_pay_pal_transaction_id_Valid() const{
    return m_pay_pal_transaction_id_isValid;
}

QString OAIAdditionalDataRiskStandalone::getAvsResultRaw() const {
    return m_avs_result_raw;
}
void OAIAdditionalDataRiskStandalone::setAvsResultRaw(const QString &avs_result_raw) {
    m_avs_result_raw = avs_result_raw;
    m_avs_result_raw_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_avs_result_raw_Set() const{
    return m_avs_result_raw_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_avs_result_raw_Valid() const{
    return m_avs_result_raw_isValid;
}

QString OAIAdditionalDataRiskStandalone::getBin() const {
    return m_bin;
}
void OAIAdditionalDataRiskStandalone::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_bin_Valid() const{
    return m_bin_isValid;
}

QString OAIAdditionalDataRiskStandalone::getCvcResultRaw() const {
    return m_cvc_result_raw;
}
void OAIAdditionalDataRiskStandalone::setCvcResultRaw(const QString &cvc_result_raw) {
    m_cvc_result_raw = cvc_result_raw;
    m_cvc_result_raw_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_cvc_result_raw_Set() const{
    return m_cvc_result_raw_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_cvc_result_raw_Valid() const{
    return m_cvc_result_raw_isValid;
}

QString OAIAdditionalDataRiskStandalone::getRiskToken() const {
    return m_risk_token;
}
void OAIAdditionalDataRiskStandalone::setRiskToken(const QString &risk_token) {
    m_risk_token = risk_token;
    m_risk_token_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_risk_token_Set() const{
    return m_risk_token_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_risk_token_Valid() const{
    return m_risk_token_isValid;
}

QString OAIAdditionalDataRiskStandalone::getThreeDAuthenticated() const {
    return m_three_d_authenticated;
}
void OAIAdditionalDataRiskStandalone::setThreeDAuthenticated(const QString &three_d_authenticated) {
    m_three_d_authenticated = three_d_authenticated;
    m_three_d_authenticated_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_three_d_authenticated_Set() const{
    return m_three_d_authenticated_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_three_d_authenticated_Valid() const{
    return m_three_d_authenticated_isValid;
}

QString OAIAdditionalDataRiskStandalone::getThreeDOffered() const {
    return m_three_d_offered;
}
void OAIAdditionalDataRiskStandalone::setThreeDOffered(const QString &three_d_offered) {
    m_three_d_offered = three_d_offered;
    m_three_d_offered_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_three_d_offered_Set() const{
    return m_three_d_offered_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_three_d_offered_Valid() const{
    return m_three_d_offered_isValid;
}

QString OAIAdditionalDataRiskStandalone::getTokenDataType() const {
    return m_token_data_type;
}
void OAIAdditionalDataRiskStandalone::setTokenDataType(const QString &token_data_type) {
    m_token_data_type = token_data_type;
    m_token_data_type_isSet = true;
}

bool OAIAdditionalDataRiskStandalone::is_token_data_type_Set() const{
    return m_token_data_type_isSet;
}

bool OAIAdditionalDataRiskStandalone::is_token_data_type_Valid() const{
    return m_token_data_type_isValid;
}

bool OAIAdditionalDataRiskStandalone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pay_pal_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_email_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_payer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_protection_eligibility_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pay_pal_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avs_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cvc_result_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_risk_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataRiskStandalone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
