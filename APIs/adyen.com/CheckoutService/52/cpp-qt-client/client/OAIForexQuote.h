/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v52/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v52/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=52) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIForexQuote.h
 *
 * 
 */

#ifndef OAIForexQuote_H
#define OAIForexQuote_H

#include <QJsonObject>

#include "OAIAmount.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;

class OAIForexQuote : public OAIObject {
public:
    OAIForexQuote();
    OAIForexQuote(QString json);
    ~OAIForexQuote() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccount() const;
    void setAccount(const QString &account);
    bool is_account_Set() const;
    bool is_account_Valid() const;

    QString getAccountType() const;
    void setAccountType(const QString &account_type);
    bool is_account_type_Set() const;
    bool is_account_type_Valid() const;

    OAIAmount getBaseAmount() const;
    void setBaseAmount(const OAIAmount &base_amount);
    bool is_base_amount_Set() const;
    bool is_base_amount_Valid() const;

    qint32 getBasePoints() const;
    void setBasePoints(const qint32 &base_points);
    bool is_base_points_Set() const;
    bool is_base_points_Valid() const;

    OAIAmount getBuy() const;
    void setBuy(const OAIAmount &buy);
    bool is_buy_Set() const;
    bool is_buy_Valid() const;

    OAIAmount getInterbank() const;
    void setInterbank(const OAIAmount &interbank);
    bool is_interbank_Set() const;
    bool is_interbank_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    OAIAmount getSell() const;
    void setSell(const OAIAmount &sell);
    bool is_sell_Set() const;
    bool is_sell_Valid() const;

    QString getSignature() const;
    void setSignature(const QString &signature);
    bool is_signature_Set() const;
    bool is_signature_Valid() const;

    QString getSource() const;
    void setSource(const QString &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getValidTill() const;
    void setValidTill(const QDateTime &valid_till);
    bool is_valid_till_Set() const;
    bool is_valid_till_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account;
    bool m_account_isSet;
    bool m_account_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    OAIAmount m_base_amount;
    bool m_base_amount_isSet;
    bool m_base_amount_isValid;

    qint32 m_base_points;
    bool m_base_points_isSet;
    bool m_base_points_isValid;

    OAIAmount m_buy;
    bool m_buy_isSet;
    bool m_buy_isValid;

    OAIAmount m_interbank;
    bool m_interbank_isSet;
    bool m_interbank_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    OAIAmount m_sell;
    bool m_sell_isSet;
    bool m_sell_isValid;

    QString m_signature;
    bool m_signature_isSet;
    bool m_signature_isValid;

    QString m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_valid_till;
    bool m_valid_till_isSet;
    bool m_valid_till_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIForexQuote)

#endif // OAIForexQuote_H
