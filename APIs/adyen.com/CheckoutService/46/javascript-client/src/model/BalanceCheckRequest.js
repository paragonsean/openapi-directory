/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v46/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=46) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountInfo from './AccountInfo';
import Address from './Address';
import Amount from './Amount';
import ApplicationInfo from './ApplicationInfo';
import BalanceCheckRequestAdditionalData from './BalanceCheckRequestAdditionalData';
import BrowserInfo from './BrowserInfo';
import ForexQuote from './ForexQuote';
import Installments from './Installments';
import MerchantRiskIndicator from './MerchantRiskIndicator';
import Name from './Name';
import Recurring from './Recurring';
import Split from './Split';
import ThreeDS2RequestData from './ThreeDS2RequestData';

/**
 * The BalanceCheckRequest model module.
 * @module model/BalanceCheckRequest
 * @version 46
 */
class BalanceCheckRequest {
    /**
     * Constructs a new <code>BalanceCheckRequest</code>.
     * @alias module:model/BalanceCheckRequest
     * @param amount {module:model/Amount} The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
     * @param merchantAccount {String} The merchant account identifier, with which you want to process the transaction.
     * @param paymentMethod {Object.<String, String>} The collection that contains the type of the payment method and its specific information.
     */
    constructor(amount, merchantAccount, paymentMethod) { 
        
        BalanceCheckRequest.initialize(this, amount, merchantAccount, paymentMethod);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount, paymentMethod) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
        obj['paymentMethod'] = paymentMethod;
    }

    /**
     * Constructs a <code>BalanceCheckRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BalanceCheckRequest} obj Optional instance to populate.
     * @return {module:model/BalanceCheckRequest} The populated <code>BalanceCheckRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BalanceCheckRequest();

            if (data.hasOwnProperty('accountInfo')) {
                obj['accountInfo'] = AccountInfo.constructFromObject(data['accountInfo']);
            }
            if (data.hasOwnProperty('additionalAmount')) {
                obj['additionalAmount'] = Amount.constructFromObject(data['additionalAmount']);
            }
            if (data.hasOwnProperty('additionalData')) {
                obj['additionalData'] = BalanceCheckRequestAdditionalData.constructFromObject(data['additionalData']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('applicationInfo')) {
                obj['applicationInfo'] = ApplicationInfo.constructFromObject(data['applicationInfo']);
            }
            if (data.hasOwnProperty('billingAddress')) {
                obj['billingAddress'] = Address.constructFromObject(data['billingAddress']);
            }
            if (data.hasOwnProperty('browserInfo')) {
                obj['browserInfo'] = BrowserInfo.constructFromObject(data['browserInfo']);
            }
            if (data.hasOwnProperty('captureDelayHours')) {
                obj['captureDelayHours'] = ApiClient.convertToType(data['captureDelayHours'], 'Number');
            }
            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'Date');
            }
            if (data.hasOwnProperty('dccQuote')) {
                obj['dccQuote'] = ForexQuote.constructFromObject(data['dccQuote']);
            }
            if (data.hasOwnProperty('deliveryAddress')) {
                obj['deliveryAddress'] = Address.constructFromObject(data['deliveryAddress']);
            }
            if (data.hasOwnProperty('deliveryDate')) {
                obj['deliveryDate'] = ApiClient.convertToType(data['deliveryDate'], 'Date');
            }
            if (data.hasOwnProperty('deviceFingerprint')) {
                obj['deviceFingerprint'] = ApiClient.convertToType(data['deviceFingerprint'], 'String');
            }
            if (data.hasOwnProperty('fraudOffset')) {
                obj['fraudOffset'] = ApiClient.convertToType(data['fraudOffset'], 'Number');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = Installments.constructFromObject(data['installments']);
            }
            if (data.hasOwnProperty('mcc')) {
                obj['mcc'] = ApiClient.convertToType(data['mcc'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantOrderReference')) {
                obj['merchantOrderReference'] = ApiClient.convertToType(data['merchantOrderReference'], 'String');
            }
            if (data.hasOwnProperty('merchantRiskIndicator')) {
                obj['merchantRiskIndicator'] = MerchantRiskIndicator.constructFromObject(data['merchantRiskIndicator']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('orderReference')) {
                obj['orderReference'] = ApiClient.convertToType(data['orderReference'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], {'String': 'String'});
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('recurringProcessingModel')) {
                obj['recurringProcessingModel'] = ApiClient.convertToType(data['recurringProcessingModel'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('selectedBrand')) {
                obj['selectedBrand'] = ApiClient.convertToType(data['selectedBrand'], 'String');
            }
            if (data.hasOwnProperty('selectedRecurringDetailReference')) {
                obj['selectedRecurringDetailReference'] = ApiClient.convertToType(data['selectedRecurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('sessionId')) {
                obj['sessionId'] = ApiClient.convertToType(data['sessionId'], 'String');
            }
            if (data.hasOwnProperty('shopperEmail')) {
                obj['shopperEmail'] = ApiClient.convertToType(data['shopperEmail'], 'String');
            }
            if (data.hasOwnProperty('shopperIP')) {
                obj['shopperIP'] = ApiClient.convertToType(data['shopperIP'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('shopperLocale')) {
                obj['shopperLocale'] = ApiClient.convertToType(data['shopperLocale'], 'String');
            }
            if (data.hasOwnProperty('shopperName')) {
                obj['shopperName'] = Name.constructFromObject(data['shopperName']);
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('shopperStatement')) {
                obj['shopperStatement'] = ApiClient.convertToType(data['shopperStatement'], 'String');
            }
            if (data.hasOwnProperty('socialSecurityNumber')) {
                obj['socialSecurityNumber'] = ApiClient.convertToType(data['socialSecurityNumber'], 'String');
            }
            if (data.hasOwnProperty('splits')) {
                obj['splits'] = ApiClient.convertToType(data['splits'], [Split]);
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('telephoneNumber')) {
                obj['telephoneNumber'] = ApiClient.convertToType(data['telephoneNumber'], 'String');
            }
            if (data.hasOwnProperty('threeDS2RequestData')) {
                obj['threeDS2RequestData'] = ThreeDS2RequestData.constructFromObject(data['threeDS2RequestData']);
            }
            if (data.hasOwnProperty('totalsGroup')) {
                obj['totalsGroup'] = ApiClient.convertToType(data['totalsGroup'], 'String');
            }
            if (data.hasOwnProperty('trustedShopper')) {
                obj['trustedShopper'] = ApiClient.convertToType(data['trustedShopper'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BalanceCheckRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BalanceCheckRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BalanceCheckRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountInfo`
        if (data['accountInfo']) { // data not null
          AccountInfo.validateJSON(data['accountInfo']);
        }
        // validate the optional field `additionalAmount`
        if (data['additionalAmount']) { // data not null
          Amount.validateJSON(data['additionalAmount']);
        }
        // validate the optional field `additionalData`
        if (data['additionalData']) { // data not null
          BalanceCheckRequestAdditionalData.validateJSON(data['additionalData']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `applicationInfo`
        if (data['applicationInfo']) { // data not null
          ApplicationInfo.validateJSON(data['applicationInfo']);
        }
        // validate the optional field `billingAddress`
        if (data['billingAddress']) { // data not null
          Address.validateJSON(data['billingAddress']);
        }
        // validate the optional field `browserInfo`
        if (data['browserInfo']) { // data not null
          BrowserInfo.validateJSON(data['browserInfo']);
        }
        // validate the optional field `dccQuote`
        if (data['dccQuote']) { // data not null
          ForexQuote.validateJSON(data['dccQuote']);
        }
        // validate the optional field `deliveryAddress`
        if (data['deliveryAddress']) { // data not null
          Address.validateJSON(data['deliveryAddress']);
        }
        // ensure the json data is a string
        if (data['deviceFingerprint'] && !(typeof data['deviceFingerprint'] === 'string' || data['deviceFingerprint'] instanceof String)) {
            throw new Error("Expected the field `deviceFingerprint` to be a primitive type in the JSON string but got " + data['deviceFingerprint']);
        }
        // validate the optional field `installments`
        if (data['installments']) { // data not null
          Installments.validateJSON(data['installments']);
        }
        // ensure the json data is a string
        if (data['mcc'] && !(typeof data['mcc'] === 'string' || data['mcc'] instanceof String)) {
            throw new Error("Expected the field `mcc` to be a primitive type in the JSON string but got " + data['mcc']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['merchantOrderReference'] && !(typeof data['merchantOrderReference'] === 'string' || data['merchantOrderReference'] instanceof String)) {
            throw new Error("Expected the field `merchantOrderReference` to be a primitive type in the JSON string but got " + data['merchantOrderReference']);
        }
        // validate the optional field `merchantRiskIndicator`
        if (data['merchantRiskIndicator']) { // data not null
          MerchantRiskIndicator.validateJSON(data['merchantRiskIndicator']);
        }
        // ensure the json data is a string
        if (data['orderReference'] && !(typeof data['orderReference'] === 'string' || data['orderReference'] instanceof String)) {
            throw new Error("Expected the field `orderReference` to be a primitive type in the JSON string but got " + data['orderReference']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['recurringProcessingModel'] && !(typeof data['recurringProcessingModel'] === 'string' || data['recurringProcessingModel'] instanceof String)) {
            throw new Error("Expected the field `recurringProcessingModel` to be a primitive type in the JSON string but got " + data['recurringProcessingModel']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['selectedBrand'] && !(typeof data['selectedBrand'] === 'string' || data['selectedBrand'] instanceof String)) {
            throw new Error("Expected the field `selectedBrand` to be a primitive type in the JSON string but got " + data['selectedBrand']);
        }
        // ensure the json data is a string
        if (data['selectedRecurringDetailReference'] && !(typeof data['selectedRecurringDetailReference'] === 'string' || data['selectedRecurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `selectedRecurringDetailReference` to be a primitive type in the JSON string but got " + data['selectedRecurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['sessionId'] && !(typeof data['sessionId'] === 'string' || data['sessionId'] instanceof String)) {
            throw new Error("Expected the field `sessionId` to be a primitive type in the JSON string but got " + data['sessionId']);
        }
        // ensure the json data is a string
        if (data['shopperEmail'] && !(typeof data['shopperEmail'] === 'string' || data['shopperEmail'] instanceof String)) {
            throw new Error("Expected the field `shopperEmail` to be a primitive type in the JSON string but got " + data['shopperEmail']);
        }
        // ensure the json data is a string
        if (data['shopperIP'] && !(typeof data['shopperIP'] === 'string' || data['shopperIP'] instanceof String)) {
            throw new Error("Expected the field `shopperIP` to be a primitive type in the JSON string but got " + data['shopperIP']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // ensure the json data is a string
        if (data['shopperLocale'] && !(typeof data['shopperLocale'] === 'string' || data['shopperLocale'] instanceof String)) {
            throw new Error("Expected the field `shopperLocale` to be a primitive type in the JSON string but got " + data['shopperLocale']);
        }
        // validate the optional field `shopperName`
        if (data['shopperName']) { // data not null
          Name.validateJSON(data['shopperName']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['shopperStatement'] && !(typeof data['shopperStatement'] === 'string' || data['shopperStatement'] instanceof String)) {
            throw new Error("Expected the field `shopperStatement` to be a primitive type in the JSON string but got " + data['shopperStatement']);
        }
        // ensure the json data is a string
        if (data['socialSecurityNumber'] && !(typeof data['socialSecurityNumber'] === 'string' || data['socialSecurityNumber'] instanceof String)) {
            throw new Error("Expected the field `socialSecurityNumber` to be a primitive type in the JSON string but got " + data['socialSecurityNumber']);
        }
        if (data['splits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['splits'])) {
                throw new Error("Expected the field `splits` to be an array in the JSON data but got " + data['splits']);
            }
            // validate the optional field `splits` (array)
            for (const item of data['splits']) {
                Split.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['telephoneNumber'] && !(typeof data['telephoneNumber'] === 'string' || data['telephoneNumber'] instanceof String)) {
            throw new Error("Expected the field `telephoneNumber` to be a primitive type in the JSON string but got " + data['telephoneNumber']);
        }
        // validate the optional field `threeDS2RequestData`
        if (data['threeDS2RequestData']) { // data not null
          ThreeDS2RequestData.validateJSON(data['threeDS2RequestData']);
        }
        // ensure the json data is a string
        if (data['totalsGroup'] && !(typeof data['totalsGroup'] === 'string' || data['totalsGroup'] instanceof String)) {
            throw new Error("Expected the field `totalsGroup` to be a primitive type in the JSON string but got " + data['totalsGroup']);
        }

        return true;
    }


}

BalanceCheckRequest.RequiredProperties = ["amount", "merchantAccount", "paymentMethod"];

/**
 * Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
 * @member {module:model/AccountInfo} accountInfo
 */
BalanceCheckRequest.prototype['accountInfo'] = undefined;

/**
 * If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 
 * @member {module:model/Amount} additionalAmount
 */
BalanceCheckRequest.prototype['additionalAmount'] = undefined;

/**
 * @member {module:model/BalanceCheckRequestAdditionalData} additionalData
 */
BalanceCheckRequest.prototype['additionalData'] = undefined;

/**
 * The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).
 * @member {module:model/Amount} amount
 */
BalanceCheckRequest.prototype['amount'] = undefined;

/**
 * Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).
 * @member {module:model/ApplicationInfo} applicationInfo
 */
BalanceCheckRequest.prototype['applicationInfo'] = undefined;

/**
 * The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.
 * @member {module:model/Address} billingAddress
 */
BalanceCheckRequest.prototype['billingAddress'] = undefined;

/**
 * The shopper's browser information. > For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.
 * @member {module:model/BrowserInfo} browserInfo
 */
BalanceCheckRequest.prototype['browserInfo'] = undefined;

/**
 * The delay between the authorisation and scheduled auto-capture, specified in hours.
 * @member {Number} captureDelayHours
 */
BalanceCheckRequest.prototype['captureDelayHours'] = undefined;

/**
 * The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD
 * @member {Date} dateOfBirth
 */
BalanceCheckRequest.prototype['dateOfBirth'] = undefined;

/**
 * The forex quote as returned in the response of the forex service.
 * @member {module:model/ForexQuote} dccQuote
 */
BalanceCheckRequest.prototype['dccQuote'] = undefined;

/**
 * The address where the purchased goods should be delivered.
 * @member {module:model/Address} deliveryAddress
 */
BalanceCheckRequest.prototype['deliveryAddress'] = undefined;

/**
 * The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00
 * @member {Date} deliveryDate
 */
BalanceCheckRequest.prototype['deliveryDate'] = undefined;

/**
 * A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).
 * @member {String} deviceFingerprint
 */
BalanceCheckRequest.prototype['deviceFingerprint'] = undefined;

/**
 * An integer value that is added to the normal fraud score. The value can be either positive or negative.
 * @member {Number} fraudOffset
 */
BalanceCheckRequest.prototype['fraudOffset'] = undefined;

/**
 * Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).
 * @member {module:model/Installments} installments
 */
BalanceCheckRequest.prototype['installments'] = undefined;

/**
 * The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.
 * @member {String} mcc
 */
BalanceCheckRequest.prototype['mcc'] = undefined;

/**
 * The merchant account identifier, with which you want to process the transaction.
 * @member {String} merchantAccount
 */
BalanceCheckRequest.prototype['merchantAccount'] = undefined;

/**
 * This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.
 * @member {String} merchantOrderReference
 */
BalanceCheckRequest.prototype['merchantOrderReference'] = undefined;

/**
 * Additional risk fields for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.
 * @member {module:model/MerchantRiskIndicator} merchantRiskIndicator
 */
BalanceCheckRequest.prototype['merchantRiskIndicator'] = undefined;

/**
 * Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 
 * @member {Object.<String, String>} metadata
 */
BalanceCheckRequest.prototype['metadata'] = undefined;

/**
 * When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.
 * @member {String} orderReference
 */
BalanceCheckRequest.prototype['orderReference'] = undefined;

/**
 * The collection that contains the type of the payment method and its specific information.
 * @member {Object.<String, String>} paymentMethod
 */
BalanceCheckRequest.prototype['paymentMethod'] = undefined;

/**
 * The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).
 * @member {module:model/Recurring} recurring
 */
BalanceCheckRequest.prototype['recurring'] = undefined;

/**
 * Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 
 * @member {module:model/BalanceCheckRequest.RecurringProcessingModelEnum} recurringProcessingModel
 */
BalanceCheckRequest.prototype['recurringProcessingModel'] = undefined;

/**
 * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
 * @member {String} reference
 */
BalanceCheckRequest.prototype['reference'] = undefined;

/**
 * Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * `maestro` (default), to be processed like a Maestro card, or * `bcmc`, to be processed like a Bancontact card.
 * @member {String} selectedBrand
 */
BalanceCheckRequest.prototype['selectedBrand'] = undefined;

/**
 * The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.
 * @member {String} selectedRecurringDetailReference
 */
BalanceCheckRequest.prototype['selectedRecurringDetailReference'] = undefined;

/**
 * A session ID used to identify a payment session.
 * @member {String} sessionId
 */
BalanceCheckRequest.prototype['sessionId'] = undefined;

/**
 * The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.
 * @member {String} shopperEmail
 */
BalanceCheckRequest.prototype['shopperEmail'] = undefined;

/**
 * The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).
 * @member {String} shopperIP
 */
BalanceCheckRequest.prototype['shopperIP'] = undefined;

/**
 * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @member {module:model/BalanceCheckRequest.ShopperInteractionEnum} shopperInteraction
 */
BalanceCheckRequest.prototype['shopperInteraction'] = undefined;

/**
 * The combination of a language code and a country code to specify the language to be used in the payment.
 * @member {String} shopperLocale
 */
BalanceCheckRequest.prototype['shopperLocale'] = undefined;

/**
 * The shopper's full name.
 * @member {module:model/Name} shopperName
 */
BalanceCheckRequest.prototype['shopperName'] = undefined;

/**
 * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
BalanceCheckRequest.prototype['shopperReference'] = undefined;

/**
 * The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /_**.
 * @member {String} shopperStatement
 */
BalanceCheckRequest.prototype['shopperStatement'] = undefined;

/**
 * The shopper's social security number.
 * @member {String} socialSecurityNumber
 */
BalanceCheckRequest.prototype['socialSecurityNumber'] = undefined;

/**
 * An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).
 * @member {Array.<module:model/Split>} splits
 */
BalanceCheckRequest.prototype['splits'] = undefined;

/**
 * Required for Adyen for Platforms integrations if you have a platform setup. This is your [reference](https://docs.adyen.com/api-explorer/Management/3/post/merchants/(merchantId)/stores#request-reference) (on [balance platform](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments)) or the [storeReference](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccountHolder#request-accountHolderDetails-storeDetails-storeReference) (in the [classic integration](https://docs.adyen.com/marketplaces-and-platforms/processing-payments/route-payment-to-store/#route-a-payment-to-a-store)) for the ecommerce or point-of-sale store that is processing the payment.
 * @member {String} store
 */
BalanceCheckRequest.prototype['store'] = undefined;

/**
 * The shopper's telephone number.
 * @member {String} telephoneNumber
 */
BalanceCheckRequest.prototype['telephoneNumber'] = undefined;

/**
 * Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.
 * @member {module:model/ThreeDS2RequestData} threeDS2RequestData
 */
BalanceCheckRequest.prototype['threeDS2RequestData'] = undefined;

/**
 * The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).
 * @member {String} totalsGroup
 */
BalanceCheckRequest.prototype['totalsGroup'] = undefined;

/**
 * Set to true if the payment should be routed to a trusted MID.
 * @member {Boolean} trustedShopper
 */
BalanceCheckRequest.prototype['trustedShopper'] = undefined;





/**
 * Allowed values for the <code>recurringProcessingModel</code> property.
 * @enum {String}
 * @readonly
 */
BalanceCheckRequest['RecurringProcessingModelEnum'] = {

    /**
     * value: "CardOnFile"
     * @const
     */
    "CardOnFile": "CardOnFile",

    /**
     * value: "Subscription"
     * @const
     */
    "Subscription": "Subscription",

    /**
     * value: "UnscheduledCardOnFile"
     * @const
     */
    "UnscheduledCardOnFile": "UnscheduledCardOnFile"
};


/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
BalanceCheckRequest['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};



export default BalanceCheckRequest;

