/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v46/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=46) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalData3DSecure model module.
 * @module model/AdditionalData3DSecure
 * @version 46
 */
class AdditionalData3DSecure {
    /**
     * Constructs a new <code>AdditionalData3DSecure</code>.
     * @alias module:model/AdditionalData3DSecure
     */
    constructor() { 
        
        AdditionalData3DSecure.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalData3DSecure</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalData3DSecure} obj Optional instance to populate.
     * @return {module:model/AdditionalData3DSecure} The populated <code>AdditionalData3DSecure</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalData3DSecure();

            if (data.hasOwnProperty('allow3DS2')) {
                obj['allow3DS2'] = ApiClient.convertToType(data['allow3DS2'], 'String');
            }
            if (data.hasOwnProperty('challengeWindowSize')) {
                obj['challengeWindowSize'] = ApiClient.convertToType(data['challengeWindowSize'], 'String');
            }
            if (data.hasOwnProperty('executeThreeD')) {
                obj['executeThreeD'] = ApiClient.convertToType(data['executeThreeD'], 'String');
            }
            if (data.hasOwnProperty('mpiImplementationType')) {
                obj['mpiImplementationType'] = ApiClient.convertToType(data['mpiImplementationType'], 'String');
            }
            if (data.hasOwnProperty('scaExemption')) {
                obj['scaExemption'] = ApiClient.convertToType(data['scaExemption'], 'String');
            }
            if (data.hasOwnProperty('threeDSVersion')) {
                obj['threeDSVersion'] = ApiClient.convertToType(data['threeDSVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalData3DSecure</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalData3DSecure</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allow3DS2'] && !(typeof data['allow3DS2'] === 'string' || data['allow3DS2'] instanceof String)) {
            throw new Error("Expected the field `allow3DS2` to be a primitive type in the JSON string but got " + data['allow3DS2']);
        }
        // ensure the json data is a string
        if (data['challengeWindowSize'] && !(typeof data['challengeWindowSize'] === 'string' || data['challengeWindowSize'] instanceof String)) {
            throw new Error("Expected the field `challengeWindowSize` to be a primitive type in the JSON string but got " + data['challengeWindowSize']);
        }
        // ensure the json data is a string
        if (data['executeThreeD'] && !(typeof data['executeThreeD'] === 'string' || data['executeThreeD'] instanceof String)) {
            throw new Error("Expected the field `executeThreeD` to be a primitive type in the JSON string but got " + data['executeThreeD']);
        }
        // ensure the json data is a string
        if (data['mpiImplementationType'] && !(typeof data['mpiImplementationType'] === 'string' || data['mpiImplementationType'] instanceof String)) {
            throw new Error("Expected the field `mpiImplementationType` to be a primitive type in the JSON string but got " + data['mpiImplementationType']);
        }
        // ensure the json data is a string
        if (data['scaExemption'] && !(typeof data['scaExemption'] === 'string' || data['scaExemption'] instanceof String)) {
            throw new Error("Expected the field `scaExemption` to be a primitive type in the JSON string but got " + data['scaExemption']);
        }
        // ensure the json data is a string
        if (data['threeDSVersion'] && !(typeof data['threeDSVersion'] === 'string' || data['threeDSVersion'] instanceof String)) {
            throw new Error("Expected the field `threeDSVersion` to be a primitive type in the JSON string but got " + data['threeDSVersion']);
        }

        return true;
    }


}



/**
 * Indicates if you are able to process 3D Secure 2 transactions natively on your payment page. Send this parameter when you are using `/payments` endpoint with any of our [native 3D Secure 2 solutions](https://docs.adyen.com/online-payments/3d-secure/native-3ds2).   > This parameter only indicates readiness to support native 3D Secure 2 authentication. To specify if you _want_ to perform 3D Secure, use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) or send the `executeThreeD` parameter.  Possible values: * **true** - Ready to support native 3D Secure 2 authentication. Setting this to true does not mean always applying 3D Secure 2. Adyen still selects the version of 3D Secure based on configuration to optimize authorisation rates and improve the shopper's experience. * **false** – Not ready to support native 3D Secure 2 authentication. Adyen will not offer 3D Secure 2 to your shopper regardless of your configuration. 
 * @member {String} allow3DS2
 */
AdditionalData3DSecure.prototype['allow3DS2'] = undefined;

/**
 * Dimensions of the 3DS2 challenge window to be displayed to the cardholder.  Possible values:  * **01** - size of 250x400  * **02** - size of 390x400 * **03** - size of 500x600 * **04** - size of 600x400 * **05** - Fullscreen
 * @member {module:model/AdditionalData3DSecure.ChallengeWindowSizeEnum} challengeWindowSize
 */
AdditionalData3DSecure.prototype['challengeWindowSize'] = undefined;

/**
 * Indicates if you want to perform 3D Secure authentication on a transaction.   > Alternatively, you can use [Dynamic 3D Secure](/risk-management/dynamic-3d-secure) to configure rules for applying 3D Secure.  Possible values: * **true** – Perform 3D Secure authentication. * **false** – Don't perform 3D Secure authentication. Note that this setting results in refusals if the issuer mandates 3D Secure because of the PSD2 directive  or other, national regulations.  
 * @member {String} executeThreeD
 */
AdditionalData3DSecure.prototype['executeThreeD'] = undefined;

/**
 * In case of Secure+, this field must be set to **CUPSecurePlus**.
 * @member {String} mpiImplementationType
 */
AdditionalData3DSecure.prototype['mpiImplementationType'] = undefined;

/**
 * Indicates the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that you want to request for the transaction.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 
 * @member {String} scaExemption
 */
AdditionalData3DSecure.prototype['scaExemption'] = undefined;

/**
 * Indicates your preference for the 3D Secure version.  > If you use this parameter, you override the checks from Adyen's Authentication Engine. We recommend to use this field only if you have an extensive knowledge of 3D Secure.  Possible values: * **1.0.2**: Apply 3D Secure version 1.0.2.  * **2.1.0**: Apply 3D Secure version 2.1.0.  * **2.2.0**: Apply 3D Secure version 2.2.0. If the issuer does not support version 2.2.0, we will fall back to 2.1.0.  The following rules apply: * If you prefer 2.1.0 or 2.2.0 but we receive a negative `transStatus` in the `ARes`, we will apply the fallback policy configured in your account. For example, if the configuration is to fall back to 3D Secure 1, we will apply version 1.0.2. * If you prefer 2.1.0 or 2.2.0 but the BIN is not enrolled, you will receive an error.  
 * @member {String} threeDSVersion
 */
AdditionalData3DSecure.prototype['threeDSVersion'] = undefined;





/**
 * Allowed values for the <code>challengeWindowSize</code> property.
 * @enum {String}
 * @readonly
 */
AdditionalData3DSecure['ChallengeWindowSizeEnum'] = {

    /**
     * value: "01"
     * @const
     */
    "01": "01",

    /**
     * value: "02"
     * @const
     */
    "02": "02",

    /**
     * value: "03"
     * @const
     */
    "03": "03",

    /**
     * value: "04"
     * @const
     */
    "04": "04",

    /**
     * value: "05"
     * @const
     */
    "05": "05"
};



export default AdditionalData3DSecure;

