# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UtilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, origin_domains: List[str]=None):
        """UtilityRequest - a model defined in OpenAPI

        :param origin_domains: The origin_domains of this UtilityRequest.
        """
        self.openapi_types = {
            'origin_domains': List[str]
        }

        self.attribute_map = {
            'origin_domains': 'originDomains'
        }

        self._origin_domains = origin_domains

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UtilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UtilityRequest of this UtilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def origin_domains(self):
        """Gets the origin_domains of this UtilityRequest.

        The list of origin domains, for which origin keys are requested.

        :return: The origin_domains of this UtilityRequest.
        :rtype: List[str]
        """
        return self._origin_domains

    @origin_domains.setter
    def origin_domains(self, origin_domains):
        """Sets the origin_domains of this UtilityRequest.

        The list of origin domains, for which origin keys are requested.

        :param origin_domains: The origin_domains of this UtilityRequest.
        :type origin_domains: List[str]
        """
        if origin_domains is None:
            raise ValueError("Invalid value for `origin_domains`, must not be `None`")

        self._origin_domains = origin_domains
