# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.balance_check_response_additional_data import BalanceCheckResponseAdditionalData
from openapi_server.models.checkout_order_response import CheckoutOrderResponse
from openapi_server.models.fraud_result import FraudResult
from openapi_server.models.input_detail import InputDetail
from openapi_server.models.redirect import Redirect
from openapi_server.models.three_ds2_result import ThreeDS2Result
from openapi_server import util


class PaymentDetailsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: BalanceCheckResponseAdditionalData=None, authentication: Dict[str, str]=None, details: List[InputDetail]=None, fraud_result: FraudResult=None, merchant_reference: str=None, order: CheckoutOrderResponse=None, output_details: Dict[str, str]=None, payment_data: str=None, psp_reference: str=None, redirect: Redirect=None, refusal_reason: str=None, refusal_reason_code: str=None, result_code: str=None, shopper_locale: str=None, three_ds2_result: ThreeDS2Result=None):
        """PaymentDetailsResponse - a model defined in OpenAPI

        :param additional_data: The additional_data of this PaymentDetailsResponse.
        :param authentication: The authentication of this PaymentDetailsResponse.
        :param details: The details of this PaymentDetailsResponse.
        :param fraud_result: The fraud_result of this PaymentDetailsResponse.
        :param merchant_reference: The merchant_reference of this PaymentDetailsResponse.
        :param order: The order of this PaymentDetailsResponse.
        :param output_details: The output_details of this PaymentDetailsResponse.
        :param payment_data: The payment_data of this PaymentDetailsResponse.
        :param psp_reference: The psp_reference of this PaymentDetailsResponse.
        :param redirect: The redirect of this PaymentDetailsResponse.
        :param refusal_reason: The refusal_reason of this PaymentDetailsResponse.
        :param refusal_reason_code: The refusal_reason_code of this PaymentDetailsResponse.
        :param result_code: The result_code of this PaymentDetailsResponse.
        :param shopper_locale: The shopper_locale of this PaymentDetailsResponse.
        :param three_ds2_result: The three_ds2_result of this PaymentDetailsResponse.
        """
        self.openapi_types = {
            'additional_data': BalanceCheckResponseAdditionalData,
            'authentication': Dict[str, str],
            'details': List[InputDetail],
            'fraud_result': FraudResult,
            'merchant_reference': str,
            'order': CheckoutOrderResponse,
            'output_details': Dict[str, str],
            'payment_data': str,
            'psp_reference': str,
            'redirect': Redirect,
            'refusal_reason': str,
            'refusal_reason_code': str,
            'result_code': str,
            'shopper_locale': str,
            'three_ds2_result': ThreeDS2Result
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'authentication': 'authentication',
            'details': 'details',
            'fraud_result': 'fraudResult',
            'merchant_reference': 'merchantReference',
            'order': 'order',
            'output_details': 'outputDetails',
            'payment_data': 'paymentData',
            'psp_reference': 'pspReference',
            'redirect': 'redirect',
            'refusal_reason': 'refusalReason',
            'refusal_reason_code': 'refusalReasonCode',
            'result_code': 'resultCode',
            'shopper_locale': 'shopperLocale',
            'three_ds2_result': 'threeDS2Result'
        }

        self._additional_data = additional_data
        self._authentication = authentication
        self._details = details
        self._fraud_result = fraud_result
        self._merchant_reference = merchant_reference
        self._order = order
        self._output_details = output_details
        self._payment_data = payment_data
        self._psp_reference = psp_reference
        self._redirect = redirect
        self._refusal_reason = refusal_reason
        self._refusal_reason_code = refusal_reason_code
        self._result_code = result_code
        self._shopper_locale = shopper_locale
        self._three_ds2_result = three_ds2_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentDetailsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentDetailsResponse of this PaymentDetailsResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentDetailsResponse.


        :return: The additional_data of this PaymentDetailsResponse.
        :rtype: BalanceCheckResponseAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentDetailsResponse.


        :param additional_data: The additional_data of this PaymentDetailsResponse.
        :type additional_data: BalanceCheckResponseAdditionalData
        """

        self._additional_data = additional_data

    @property
    def authentication(self):
        """Gets the authentication of this PaymentDetailsResponse.

        Contains `threeds2.fingerprint` or `threeds2.challengeToken` values to be used in further calls to `/payments/details` endpoint. 

        :return: The authentication of this PaymentDetailsResponse.
        :rtype: Dict[str, str]
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this PaymentDetailsResponse.

        Contains `threeds2.fingerprint` or `threeds2.challengeToken` values to be used in further calls to `/payments/details` endpoint. 

        :param authentication: The authentication of this PaymentDetailsResponse.
        :type authentication: Dict[str, str]
        """

        self._authentication = authentication

    @property
    def details(self):
        """Gets the details of this PaymentDetailsResponse.

        When non-empty, contains all the fields that you must submit to the `/payments/details` endpoint.

        :return: The details of this PaymentDetailsResponse.
        :rtype: List[InputDetail]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this PaymentDetailsResponse.

        When non-empty, contains all the fields that you must submit to the `/payments/details` endpoint.

        :param details: The details of this PaymentDetailsResponse.
        :type details: List[InputDetail]
        """

        self._details = details

    @property
    def fraud_result(self):
        """Gets the fraud_result of this PaymentDetailsResponse.

        The fraud result properties of the payment.

        :return: The fraud_result of this PaymentDetailsResponse.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this PaymentDetailsResponse.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this PaymentDetailsResponse.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PaymentDetailsResponse.

        The reference used during the /payments request.

        :return: The merchant_reference of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PaymentDetailsResponse.

        The reference used during the /payments request.

        :param merchant_reference: The merchant_reference of this PaymentDetailsResponse.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def order(self):
        """Gets the order of this PaymentDetailsResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :return: The order of this PaymentDetailsResponse.
        :rtype: CheckoutOrderResponse
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this PaymentDetailsResponse.

        Contains updated information regarding the order in case order information was provided in the request.

        :param order: The order of this PaymentDetailsResponse.
        :type order: CheckoutOrderResponse
        """

        self._order = order

    @property
    def output_details(self):
        """Gets the output_details of this PaymentDetailsResponse.

        Contains the details that will be presented to the shopper.

        :return: The output_details of this PaymentDetailsResponse.
        :rtype: Dict[str, str]
        """
        return self._output_details

    @output_details.setter
    def output_details(self, output_details):
        """Sets the output_details of this PaymentDetailsResponse.

        Contains the details that will be presented to the shopper.

        :param output_details: The output_details of this PaymentDetailsResponse.
        :type output_details: Dict[str, str]
        """

        self._output_details = output_details

    @property
    def payment_data(self):
        """Gets the payment_data of this PaymentDetailsResponse.

        When non-empty, contains a value that you must submit to the `/payments/details` endpoint.

        :return: The payment_data of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this PaymentDetailsResponse.

        When non-empty, contains a value that you must submit to the `/payments/details` endpoint.

        :param payment_data: The payment_data of this PaymentDetailsResponse.
        :type payment_data: str
        """

        self._payment_data = payment_data

    @property
    def psp_reference(self):
        """Gets the psp_reference of this PaymentDetailsResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this PaymentDetailsResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this PaymentDetailsResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def redirect(self):
        """Gets the redirect of this PaymentDetailsResponse.

        When the payment flow requires a redirect, this object contains information about the redirect URL.

        :return: The redirect of this PaymentDetailsResponse.
        :rtype: Redirect
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this PaymentDetailsResponse.

        When the payment flow requires a redirect, this object contains information about the redirect URL.

        :param redirect: The redirect of this PaymentDetailsResponse.
        :type redirect: Redirect
        """

        self._redirect = redirect

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this PaymentDetailsResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this PaymentDetailsResponse.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this PaymentDetailsResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def refusal_reason_code(self):
        """Gets the refusal_reason_code of this PaymentDetailsResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason_code of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._refusal_reason_code

    @refusal_reason_code.setter
    def refusal_reason_code(self, refusal_reason_code):
        """Sets the refusal_reason_code of this PaymentDetailsResponse.

        Code that specifies the refusal reason. For more information, see [Authorisation refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason_code: The refusal_reason_code of this PaymentDetailsResponse.
        :type refusal_reason_code: str
        """

        self._refusal_reason_code = refusal_reason_code

    @property
    def result_code(self):
        """Gets the result_code of this PaymentDetailsResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :return: The result_code of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this PaymentDetailsResponse.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :param result_code: The result_code of this PaymentDetailsResponse.
        :type result_code: str
        """
        allowed_values = ["AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentDetailsResponse.

        The shopperLocale.

        :return: The shopper_locale of this PaymentDetailsResponse.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentDetailsResponse.

        The shopperLocale.

        :param shopper_locale: The shopper_locale of this PaymentDetailsResponse.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def three_ds2_result(self):
        """Gets the three_ds2_result of this PaymentDetailsResponse.

        Result of the 3D Secure 2 authentication.

        :return: The three_ds2_result of this PaymentDetailsResponse.
        :rtype: ThreeDS2Result
        """
        return self._three_ds2_result

    @three_ds2_result.setter
    def three_ds2_result(self, three_ds2_result):
        """Sets the three_ds2_result of this PaymentDetailsResponse.

        Result of the 3D Secure 2 authentication.

        :param three_ds2_result: The three_ds2_result of this PaymentDetailsResponse.
        :type three_ds2_result: ThreeDS2Result
        """

        self._three_ds2_result = three_ds2_result
