# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VisaCheckoutDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, funding_source: str=None, type: str='visacheckout', visa_checkout_call_id: str=None):
        """VisaCheckoutDetails - a model defined in OpenAPI

        :param funding_source: The funding_source of this VisaCheckoutDetails.
        :param type: The type of this VisaCheckoutDetails.
        :param visa_checkout_call_id: The visa_checkout_call_id of this VisaCheckoutDetails.
        """
        self.openapi_types = {
            'funding_source': str,
            'type': str,
            'visa_checkout_call_id': str
        }

        self.attribute_map = {
            'funding_source': 'fundingSource',
            'type': 'type',
            'visa_checkout_call_id': 'visaCheckoutCallId'
        }

        self._funding_source = funding_source
        self._type = type
        self._visa_checkout_call_id = visa_checkout_call_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VisaCheckoutDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VisaCheckoutDetails of this VisaCheckoutDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def funding_source(self):
        """Gets the funding_source of this VisaCheckoutDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this VisaCheckoutDetails.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this VisaCheckoutDetails.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this VisaCheckoutDetails.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def type(self):
        """Gets the type of this VisaCheckoutDetails.

        **visacheckout**

        :return: The type of this VisaCheckoutDetails.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VisaCheckoutDetails.

        **visacheckout**

        :param type: The type of this VisaCheckoutDetails.
        :type type: str
        """
        allowed_values = ["visacheckout"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def visa_checkout_call_id(self):
        """Gets the visa_checkout_call_id of this VisaCheckoutDetails.

        The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.

        :return: The visa_checkout_call_id of this VisaCheckoutDetails.
        :rtype: str
        """
        return self._visa_checkout_call_id

    @visa_checkout_call_id.setter
    def visa_checkout_call_id(self, visa_checkout_call_id):
        """Sets the visa_checkout_call_id of this VisaCheckoutDetails.

        The Visa Click to Pay Call ID value. When your shopper selects a payment and/or a shipping address from Visa Click to Pay, you will receive a Visa Click to Pay Call ID.

        :param visa_checkout_call_id: The visa_checkout_call_id of this VisaCheckoutDetails.
        :type visa_checkout_call_id: str
        """
        if visa_checkout_call_id is None:
            raise ValueError("Invalid value for `visa_checkout_call_id`, must not be `None`")

        self._visa_checkout_call_id = visa_checkout_call_id
