/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v46/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=46) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFundRecipient.h
 *
 * 
 */

#ifndef OAIFundRecipient_H
#define OAIFundRecipient_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAICardDetails.h"
#include "OAIName.h"
#include "OAISubMerchant.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAICardDetails;
class OAIName;
class OAISubMerchant;

class OAIFundRecipient : public OAIObject {
public:
    OAIFundRecipient();
    OAIFundRecipient(QString json);
    ~OAIFundRecipient() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAddress getBillingAddress() const;
    void setBillingAddress(const OAIAddress &billing_address);
    bool is_billing_address_Set() const;
    bool is_billing_address_Valid() const;

    OAICardDetails getPaymentMethod() const;
    void setPaymentMethod(const OAICardDetails &payment_method);
    bool is_payment_method_Set() const;
    bool is_payment_method_Valid() const;

    QString getShopperEmail() const;
    void setShopperEmail(const QString &shopper_email);
    bool is_shopper_email_Set() const;
    bool is_shopper_email_Valid() const;

    OAIName getShopperName() const;
    void setShopperName(const OAIName &shopper_name);
    bool is_shopper_name_Set() const;
    bool is_shopper_name_Valid() const;

    QString getShopperReference() const;
    void setShopperReference(const QString &shopper_reference);
    bool is_shopper_reference_Set() const;
    bool is_shopper_reference_Valid() const;

    QString getStoredPaymentMethodId() const;
    void setStoredPaymentMethodId(const QString &stored_payment_method_id);
    bool is_stored_payment_method_id_Set() const;
    bool is_stored_payment_method_id_Valid() const;

    OAISubMerchant getSubMerchant() const;
    void setSubMerchant(const OAISubMerchant &sub_merchant);
    bool is_sub_merchant_Set() const;
    bool is_sub_merchant_Valid() const;

    QString getTelephoneNumber() const;
    void setTelephoneNumber(const QString &telephone_number);
    bool is_telephone_number_Set() const;
    bool is_telephone_number_Valid() const;

    QString getWalletIdentifier() const;
    void setWalletIdentifier(const QString &wallet_identifier);
    bool is_wallet_identifier_Set() const;
    bool is_wallet_identifier_Valid() const;

    QString getWalletOwnerTaxId() const;
    void setWalletOwnerTaxId(const QString &wallet_owner_tax_id);
    bool is_wallet_owner_tax_id_Set() const;
    bool is_wallet_owner_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAddress m_billing_address;
    bool m_billing_address_isSet;
    bool m_billing_address_isValid;

    OAICardDetails m_payment_method;
    bool m_payment_method_isSet;
    bool m_payment_method_isValid;

    QString m_shopper_email;
    bool m_shopper_email_isSet;
    bool m_shopper_email_isValid;

    OAIName m_shopper_name;
    bool m_shopper_name_isSet;
    bool m_shopper_name_isValid;

    QString m_shopper_reference;
    bool m_shopper_reference_isSet;
    bool m_shopper_reference_isValid;

    QString m_stored_payment_method_id;
    bool m_stored_payment_method_id_isSet;
    bool m_stored_payment_method_id_isValid;

    OAISubMerchant m_sub_merchant;
    bool m_sub_merchant_isSet;
    bool m_sub_merchant_isValid;

    QString m_telephone_number;
    bool m_telephone_number_isSet;
    bool m_telephone_number_isValid;

    QString m_wallet_identifier;
    bool m_wallet_identifier_isSet;
    bool m_wallet_identifier_isValid;

    QString m_wallet_owner_tax_id;
    bool m_wallet_owner_tax_id_isSet;
    bool m_wallet_owner_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFundRecipient)

#endif // OAIFundRecipient_H
