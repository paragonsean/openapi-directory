/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v46/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=46) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ResponseAdditionalData3DSecure;
import org.openapitools.client.model.ResponseAdditionalDataBillingAddress;
import org.openapitools.client.model.ResponseAdditionalDataCard;
import org.openapitools.client.model.ResponseAdditionalDataCommon;
import org.openapitools.client.model.ResponseAdditionalDataDomesticError;
import org.openapitools.client.model.ResponseAdditionalDataInstallments;
import org.openapitools.client.model.ResponseAdditionalDataNetworkTokens;
import org.openapitools.client.model.ResponseAdditionalDataOpi;
import org.openapitools.client.model.ResponseAdditionalDataSepa;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:30.615800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BalanceCheckResponseAdditionalData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BalanceCheckResponseAdditionalData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BalanceCheckResponseAdditionalData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BalanceCheckResponseAdditionalData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ResponseAdditionalData3DSecure> adapterResponseAdditionalData3DSecure = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalData3DSecure.class));
            final TypeAdapter<ResponseAdditionalDataBillingAddress> adapterResponseAdditionalDataBillingAddress = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataBillingAddress.class));
            final TypeAdapter<ResponseAdditionalDataCard> adapterResponseAdditionalDataCard = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataCard.class));
            final TypeAdapter<ResponseAdditionalDataCommon> adapterResponseAdditionalDataCommon = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataCommon.class));
            final TypeAdapter<ResponseAdditionalDataDomesticError> adapterResponseAdditionalDataDomesticError = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataDomesticError.class));
            final TypeAdapter<ResponseAdditionalDataInstallments> adapterResponseAdditionalDataInstallments = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataInstallments.class));
            final TypeAdapter<ResponseAdditionalDataNetworkTokens> adapterResponseAdditionalDataNetworkTokens = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataNetworkTokens.class));
            final TypeAdapter<ResponseAdditionalDataOpi> adapterResponseAdditionalDataOpi = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataOpi.class));
            final TypeAdapter<ResponseAdditionalDataSepa> adapterResponseAdditionalDataSepa = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataSepa.class));

            return (TypeAdapter<T>) new TypeAdapter<BalanceCheckResponseAdditionalData>() {
                @Override
                public void write(JsonWriter out, BalanceCheckResponseAdditionalData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ResponseAdditionalData3DSecure`
                    if (value.getActualInstance() instanceof ResponseAdditionalData3DSecure) {
                        JsonElement element = adapterResponseAdditionalData3DSecure.toJsonTree((ResponseAdditionalData3DSecure)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataBillingAddress`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataBillingAddress) {
                        JsonElement element = adapterResponseAdditionalDataBillingAddress.toJsonTree((ResponseAdditionalDataBillingAddress)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataCard`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataCard) {
                        JsonElement element = adapterResponseAdditionalDataCard.toJsonTree((ResponseAdditionalDataCard)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataCommon`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataCommon) {
                        JsonElement element = adapterResponseAdditionalDataCommon.toJsonTree((ResponseAdditionalDataCommon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataDomesticError`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataDomesticError) {
                        JsonElement element = adapterResponseAdditionalDataDomesticError.toJsonTree((ResponseAdditionalDataDomesticError)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataInstallments`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataInstallments) {
                        JsonElement element = adapterResponseAdditionalDataInstallments.toJsonTree((ResponseAdditionalDataInstallments)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataNetworkTokens`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataNetworkTokens) {
                        JsonElement element = adapterResponseAdditionalDataNetworkTokens.toJsonTree((ResponseAdditionalDataNetworkTokens)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataOpi`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataOpi) {
                        JsonElement element = adapterResponseAdditionalDataOpi.toJsonTree((ResponseAdditionalDataOpi)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResponseAdditionalDataSepa`
                    if (value.getActualInstance() instanceof ResponseAdditionalDataSepa) {
                        JsonElement element = adapterResponseAdditionalDataSepa.toJsonTree((ResponseAdditionalDataSepa)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa");
                }

                @Override
                public BalanceCheckResponseAdditionalData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ResponseAdditionalData3DSecure
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalData3DSecure.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalData3DSecure;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalData3DSecure failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalData3DSecure'", e);
                    }
                    // deserialize ResponseAdditionalDataBillingAddress
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataBillingAddress.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataBillingAddress;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataBillingAddress failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataBillingAddress'", e);
                    }
                    // deserialize ResponseAdditionalDataCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataCard.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataCard;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataCard'", e);
                    }
                    // deserialize ResponseAdditionalDataCommon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataCommon.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataCommon;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataCommon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataCommon'", e);
                    }
                    // deserialize ResponseAdditionalDataDomesticError
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataDomesticError.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataDomesticError;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataDomesticError failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataDomesticError'", e);
                    }
                    // deserialize ResponseAdditionalDataInstallments
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataInstallments.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataInstallments;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataInstallments failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataInstallments'", e);
                    }
                    // deserialize ResponseAdditionalDataNetworkTokens
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataNetworkTokens.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataNetworkTokens;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataNetworkTokens failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataNetworkTokens'", e);
                    }
                    // deserialize ResponseAdditionalDataOpi
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataOpi.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataOpi;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataOpi failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataOpi'", e);
                    }
                    // deserialize ResponseAdditionalDataSepa
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResponseAdditionalDataSepa.validateJsonElement(jsonElement);
                        actualAdapter = adapterResponseAdditionalDataSepa;
                        BalanceCheckResponseAdditionalData ret = new BalanceCheckResponseAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResponseAdditionalDataSepa failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResponseAdditionalDataSepa'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for BalanceCheckResponseAdditionalData: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public BalanceCheckResponseAdditionalData() {
        super("anyOf", Boolean.FALSE);
    }

    public BalanceCheckResponseAdditionalData(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ResponseAdditionalData3DSecure", ResponseAdditionalData3DSecure.class);
        schemas.put("ResponseAdditionalDataBillingAddress", ResponseAdditionalDataBillingAddress.class);
        schemas.put("ResponseAdditionalDataCard", ResponseAdditionalDataCard.class);
        schemas.put("ResponseAdditionalDataCommon", ResponseAdditionalDataCommon.class);
        schemas.put("ResponseAdditionalDataDomesticError", ResponseAdditionalDataDomesticError.class);
        schemas.put("ResponseAdditionalDataInstallments", ResponseAdditionalDataInstallments.class);
        schemas.put("ResponseAdditionalDataNetworkTokens", ResponseAdditionalDataNetworkTokens.class);
        schemas.put("ResponseAdditionalDataOpi", ResponseAdditionalDataOpi.class);
        schemas.put("ResponseAdditionalDataSepa", ResponseAdditionalDataSepa.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return BalanceCheckResponseAdditionalData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ResponseAdditionalData3DSecure) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataBillingAddress) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataCommon) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataDomesticError) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataInstallments) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataNetworkTokens) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataOpi) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResponseAdditionalDataSepa) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa");
    }

    /**
     * Get the actual instance, which can be the following:
     * ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa
     *
     * @return The actual instance (ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResponseAdditionalData3DSecure`. If the actual instance is not `ResponseAdditionalData3DSecure`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalData3DSecure`
     * @throws ClassCastException if the instance is not `ResponseAdditionalData3DSecure`
     */
    public ResponseAdditionalData3DSecure getResponseAdditionalData3DSecure() throws ClassCastException {
        return (ResponseAdditionalData3DSecure)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataBillingAddress`. If the actual instance is not `ResponseAdditionalDataBillingAddress`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataBillingAddress`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataBillingAddress`
     */
    public ResponseAdditionalDataBillingAddress getResponseAdditionalDataBillingAddress() throws ClassCastException {
        return (ResponseAdditionalDataBillingAddress)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataCard`. If the actual instance is not `ResponseAdditionalDataCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataCard`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataCard`
     */
    public ResponseAdditionalDataCard getResponseAdditionalDataCard() throws ClassCastException {
        return (ResponseAdditionalDataCard)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataCommon`. If the actual instance is not `ResponseAdditionalDataCommon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataCommon`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataCommon`
     */
    public ResponseAdditionalDataCommon getResponseAdditionalDataCommon() throws ClassCastException {
        return (ResponseAdditionalDataCommon)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataDomesticError`. If the actual instance is not `ResponseAdditionalDataDomesticError`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataDomesticError`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataDomesticError`
     */
    public ResponseAdditionalDataDomesticError getResponseAdditionalDataDomesticError() throws ClassCastException {
        return (ResponseAdditionalDataDomesticError)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataInstallments`. If the actual instance is not `ResponseAdditionalDataInstallments`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataInstallments`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataInstallments`
     */
    public ResponseAdditionalDataInstallments getResponseAdditionalDataInstallments() throws ClassCastException {
        return (ResponseAdditionalDataInstallments)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataNetworkTokens`. If the actual instance is not `ResponseAdditionalDataNetworkTokens`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataNetworkTokens`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataNetworkTokens`
     */
    public ResponseAdditionalDataNetworkTokens getResponseAdditionalDataNetworkTokens() throws ClassCastException {
        return (ResponseAdditionalDataNetworkTokens)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataOpi`. If the actual instance is not `ResponseAdditionalDataOpi`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataOpi`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataOpi`
     */
    public ResponseAdditionalDataOpi getResponseAdditionalDataOpi() throws ClassCastException {
        return (ResponseAdditionalDataOpi)super.getActualInstance();
    }
    /**
     * Get the actual instance of `ResponseAdditionalDataSepa`. If the actual instance is not `ResponseAdditionalDataSepa`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResponseAdditionalDataSepa`
     * @throws ClassCastException if the instance is not `ResponseAdditionalDataSepa`
     */
    public ResponseAdditionalDataSepa getResponseAdditionalDataSepa() throws ClassCastException {
        return (ResponseAdditionalDataSepa)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to BalanceCheckResponseAdditionalData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ResponseAdditionalData3DSecure
        try {
            ResponseAdditionalData3DSecure.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalData3DSecure failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataBillingAddress
        try {
            ResponseAdditionalDataBillingAddress.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataBillingAddress failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataCard
        try {
            ResponseAdditionalDataCard.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataCard failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataCommon
        try {
            ResponseAdditionalDataCommon.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataCommon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataDomesticError
        try {
            ResponseAdditionalDataDomesticError.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataDomesticError failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataInstallments
        try {
            ResponseAdditionalDataInstallments.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataInstallments failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataNetworkTokens
        try {
            ResponseAdditionalDataNetworkTokens.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataNetworkTokens failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataOpi
        try {
            ResponseAdditionalDataOpi.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataOpi failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResponseAdditionalDataSepa
        try {
            ResponseAdditionalDataSepa.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResponseAdditionalDataSepa failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for BalanceCheckResponseAdditionalData with anyOf schemas: ResponseAdditionalData3DSecure, ResponseAdditionalDataBillingAddress, ResponseAdditionalDataCard, ResponseAdditionalDataCommon, ResponseAdditionalDataDomesticError, ResponseAdditionalDataInstallments, ResponseAdditionalDataNetworkTokens, ResponseAdditionalDataOpi, ResponseAdditionalDataSepa. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of BalanceCheckResponseAdditionalData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of BalanceCheckResponseAdditionalData
     * @throws IOException if the JSON string is invalid with respect to BalanceCheckResponseAdditionalData
     */
    public static BalanceCheckResponseAdditionalData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, BalanceCheckResponseAdditionalData.class);
    }

    /**
     * Convert an instance of BalanceCheckResponseAdditionalData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

