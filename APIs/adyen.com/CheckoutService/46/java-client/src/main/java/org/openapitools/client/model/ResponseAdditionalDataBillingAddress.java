/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v46/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v46/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=46) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResponseAdditionalDataBillingAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:30.615800-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResponseAdditionalDataBillingAddress {
  public static final String SERIALIZED_NAME_BILLING_ADDRESS_CITY = "billingAddress.city";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_CITY)
  private String billingAddressCity;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_COUNTRY = "billingAddress.country";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_COUNTRY)
  private String billingAddressCountry;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_HOUSE_NUMBER_OR_NAME = "billingAddress.houseNumberOrName";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_HOUSE_NUMBER_OR_NAME)
  private String billingAddressHouseNumberOrName;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_POSTAL_CODE = "billingAddress.postalCode";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_POSTAL_CODE)
  private String billingAddressPostalCode;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_STATE_OR_PROVINCE = "billingAddress.stateOrProvince";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_STATE_OR_PROVINCE)
  private String billingAddressStateOrProvince;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS_STREET = "billingAddress.street";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS_STREET)
  private String billingAddressStreet;

  public ResponseAdditionalDataBillingAddress() {
  }

  public ResponseAdditionalDataBillingAddress billingAddressCity(String billingAddressCity) {
    this.billingAddressCity = billingAddressCity;
    return this;
  }

  /**
   * The billing address city passed in the payment request.
   * @return billingAddressCity
   */
  @javax.annotation.Nullable
  public String getBillingAddressCity() {
    return billingAddressCity;
  }

  public void setBillingAddressCity(String billingAddressCity) {
    this.billingAddressCity = billingAddressCity;
  }


  public ResponseAdditionalDataBillingAddress billingAddressCountry(String billingAddressCountry) {
    this.billingAddressCountry = billingAddressCountry;
    return this;
  }

  /**
   * The billing address country passed in the payment request.  Example: NL
   * @return billingAddressCountry
   */
  @javax.annotation.Nullable
  public String getBillingAddressCountry() {
    return billingAddressCountry;
  }

  public void setBillingAddressCountry(String billingAddressCountry) {
    this.billingAddressCountry = billingAddressCountry;
  }


  public ResponseAdditionalDataBillingAddress billingAddressHouseNumberOrName(String billingAddressHouseNumberOrName) {
    this.billingAddressHouseNumberOrName = billingAddressHouseNumberOrName;
    return this;
  }

  /**
   * The billing address house number or name passed in the payment request.
   * @return billingAddressHouseNumberOrName
   */
  @javax.annotation.Nullable
  public String getBillingAddressHouseNumberOrName() {
    return billingAddressHouseNumberOrName;
  }

  public void setBillingAddressHouseNumberOrName(String billingAddressHouseNumberOrName) {
    this.billingAddressHouseNumberOrName = billingAddressHouseNumberOrName;
  }


  public ResponseAdditionalDataBillingAddress billingAddressPostalCode(String billingAddressPostalCode) {
    this.billingAddressPostalCode = billingAddressPostalCode;
    return this;
  }

  /**
   * The billing address postal code passed in the payment request.  Example: 1011 DJ
   * @return billingAddressPostalCode
   */
  @javax.annotation.Nullable
  public String getBillingAddressPostalCode() {
    return billingAddressPostalCode;
  }

  public void setBillingAddressPostalCode(String billingAddressPostalCode) {
    this.billingAddressPostalCode = billingAddressPostalCode;
  }


  public ResponseAdditionalDataBillingAddress billingAddressStateOrProvince(String billingAddressStateOrProvince) {
    this.billingAddressStateOrProvince = billingAddressStateOrProvince;
    return this;
  }

  /**
   * The billing address state or province passed in the payment request.  Example: NH
   * @return billingAddressStateOrProvince
   */
  @javax.annotation.Nullable
  public String getBillingAddressStateOrProvince() {
    return billingAddressStateOrProvince;
  }

  public void setBillingAddressStateOrProvince(String billingAddressStateOrProvince) {
    this.billingAddressStateOrProvince = billingAddressStateOrProvince;
  }


  public ResponseAdditionalDataBillingAddress billingAddressStreet(String billingAddressStreet) {
    this.billingAddressStreet = billingAddressStreet;
    return this;
  }

  /**
   * The billing address street passed in the payment request.
   * @return billingAddressStreet
   */
  @javax.annotation.Nullable
  public String getBillingAddressStreet() {
    return billingAddressStreet;
  }

  public void setBillingAddressStreet(String billingAddressStreet) {
    this.billingAddressStreet = billingAddressStreet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseAdditionalDataBillingAddress responseAdditionalDataBillingAddress = (ResponseAdditionalDataBillingAddress) o;
    return Objects.equals(this.billingAddressCity, responseAdditionalDataBillingAddress.billingAddressCity) &&
        Objects.equals(this.billingAddressCountry, responseAdditionalDataBillingAddress.billingAddressCountry) &&
        Objects.equals(this.billingAddressHouseNumberOrName, responseAdditionalDataBillingAddress.billingAddressHouseNumberOrName) &&
        Objects.equals(this.billingAddressPostalCode, responseAdditionalDataBillingAddress.billingAddressPostalCode) &&
        Objects.equals(this.billingAddressStateOrProvince, responseAdditionalDataBillingAddress.billingAddressStateOrProvince) &&
        Objects.equals(this.billingAddressStreet, responseAdditionalDataBillingAddress.billingAddressStreet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAddressCity, billingAddressCountry, billingAddressHouseNumberOrName, billingAddressPostalCode, billingAddressStateOrProvince, billingAddressStreet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseAdditionalDataBillingAddress {\n");
    sb.append("    billingAddressCity: ").append(toIndentedString(billingAddressCity)).append("\n");
    sb.append("    billingAddressCountry: ").append(toIndentedString(billingAddressCountry)).append("\n");
    sb.append("    billingAddressHouseNumberOrName: ").append(toIndentedString(billingAddressHouseNumberOrName)).append("\n");
    sb.append("    billingAddressPostalCode: ").append(toIndentedString(billingAddressPostalCode)).append("\n");
    sb.append("    billingAddressStateOrProvince: ").append(toIndentedString(billingAddressStateOrProvince)).append("\n");
    sb.append("    billingAddressStreet: ").append(toIndentedString(billingAddressStreet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAddress.city");
    openapiFields.add("billingAddress.country");
    openapiFields.add("billingAddress.houseNumberOrName");
    openapiFields.add("billingAddress.postalCode");
    openapiFields.add("billingAddress.stateOrProvince");
    openapiFields.add("billingAddress.street");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResponseAdditionalDataBillingAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResponseAdditionalDataBillingAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResponseAdditionalDataBillingAddress is not found in the empty JSON string", ResponseAdditionalDataBillingAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResponseAdditionalDataBillingAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResponseAdditionalDataBillingAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingAddress.city") != null && !jsonObj.get("billingAddress.city").isJsonNull()) && !jsonObj.get("billingAddress.city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.city").toString()));
      }
      if ((jsonObj.get("billingAddress.country") != null && !jsonObj.get("billingAddress.country").isJsonNull()) && !jsonObj.get("billingAddress.country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.country").toString()));
      }
      if ((jsonObj.get("billingAddress.houseNumberOrName") != null && !jsonObj.get("billingAddress.houseNumberOrName").isJsonNull()) && !jsonObj.get("billingAddress.houseNumberOrName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.houseNumberOrName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.houseNumberOrName").toString()));
      }
      if ((jsonObj.get("billingAddress.postalCode") != null && !jsonObj.get("billingAddress.postalCode").isJsonNull()) && !jsonObj.get("billingAddress.postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.postalCode").toString()));
      }
      if ((jsonObj.get("billingAddress.stateOrProvince") != null && !jsonObj.get("billingAddress.stateOrProvince").isJsonNull()) && !jsonObj.get("billingAddress.stateOrProvince").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.stateOrProvince` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.stateOrProvince").toString()));
      }
      if ((jsonObj.get("billingAddress.street") != null && !jsonObj.get("billingAddress.street").isJsonNull()) && !jsonObj.get("billingAddress.street").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAddress.street` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAddress.street").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResponseAdditionalDataBillingAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResponseAdditionalDataBillingAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResponseAdditionalDataBillingAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResponseAdditionalDataBillingAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<ResponseAdditionalDataBillingAddress>() {
           @Override
           public void write(JsonWriter out, ResponseAdditionalDataBillingAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResponseAdditionalDataBillingAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResponseAdditionalDataBillingAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResponseAdditionalDataBillingAddress
   * @throws IOException if the JSON string is invalid with respect to ResponseAdditionalDataBillingAddress
   */
  public static ResponseAdditionalDataBillingAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResponseAdditionalDataBillingAddress.class);
  }

  /**
   * Convert an instance of ResponseAdditionalDataBillingAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

