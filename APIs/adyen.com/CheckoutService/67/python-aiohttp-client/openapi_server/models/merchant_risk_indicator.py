# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class MerchantRiskIndicator(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_match: bool=None, delivery_address_indicator: str=None, delivery_email: str=None, delivery_timeframe: str=None, gift_card_amount: Amount=None, gift_card_count: int=None, pre_order_date: datetime=None, pre_order_purchase: bool=None, reorder_items: bool=None):
        """MerchantRiskIndicator - a model defined in OpenAPI

        :param address_match: The address_match of this MerchantRiskIndicator.
        :param delivery_address_indicator: The delivery_address_indicator of this MerchantRiskIndicator.
        :param delivery_email: The delivery_email of this MerchantRiskIndicator.
        :param delivery_timeframe: The delivery_timeframe of this MerchantRiskIndicator.
        :param gift_card_amount: The gift_card_amount of this MerchantRiskIndicator.
        :param gift_card_count: The gift_card_count of this MerchantRiskIndicator.
        :param pre_order_date: The pre_order_date of this MerchantRiskIndicator.
        :param pre_order_purchase: The pre_order_purchase of this MerchantRiskIndicator.
        :param reorder_items: The reorder_items of this MerchantRiskIndicator.
        """
        self.openapi_types = {
            'address_match': bool,
            'delivery_address_indicator': str,
            'delivery_email': str,
            'delivery_timeframe': str,
            'gift_card_amount': Amount,
            'gift_card_count': int,
            'pre_order_date': datetime,
            'pre_order_purchase': bool,
            'reorder_items': bool
        }

        self.attribute_map = {
            'address_match': 'addressMatch',
            'delivery_address_indicator': 'deliveryAddressIndicator',
            'delivery_email': 'deliveryEmail',
            'delivery_timeframe': 'deliveryTimeframe',
            'gift_card_amount': 'giftCardAmount',
            'gift_card_count': 'giftCardCount',
            'pre_order_date': 'preOrderDate',
            'pre_order_purchase': 'preOrderPurchase',
            'reorder_items': 'reorderItems'
        }

        self._address_match = address_match
        self._delivery_address_indicator = delivery_address_indicator
        self._delivery_email = delivery_email
        self._delivery_timeframe = delivery_timeframe
        self._gift_card_amount = gift_card_amount
        self._gift_card_count = gift_card_count
        self._pre_order_date = pre_order_date
        self._pre_order_purchase = pre_order_purchase
        self._reorder_items = reorder_items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantRiskIndicator':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantRiskIndicator of this MerchantRiskIndicator.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_match(self):
        """Gets the address_match of this MerchantRiskIndicator.

        Whether the chosen delivery address is identical to the billing address.

        :return: The address_match of this MerchantRiskIndicator.
        :rtype: bool
        """
        return self._address_match

    @address_match.setter
    def address_match(self, address_match):
        """Sets the address_match of this MerchantRiskIndicator.

        Whether the chosen delivery address is identical to the billing address.

        :param address_match: The address_match of this MerchantRiskIndicator.
        :type address_match: bool
        """

        self._address_match = address_match

    @property
    def delivery_address_indicator(self):
        """Gets the delivery_address_indicator of this MerchantRiskIndicator.

        Indicator regarding the delivery address. Allowed values: * `shipToBillingAddress` * `shipToVerifiedAddress` * `shipToNewAddress` * `shipToStore` * `digitalGoods` * `goodsNotShipped` * `other`

        :return: The delivery_address_indicator of this MerchantRiskIndicator.
        :rtype: str
        """
        return self._delivery_address_indicator

    @delivery_address_indicator.setter
    def delivery_address_indicator(self, delivery_address_indicator):
        """Sets the delivery_address_indicator of this MerchantRiskIndicator.

        Indicator regarding the delivery address. Allowed values: * `shipToBillingAddress` * `shipToVerifiedAddress` * `shipToNewAddress` * `shipToStore` * `digitalGoods` * `goodsNotShipped` * `other`

        :param delivery_address_indicator: The delivery_address_indicator of this MerchantRiskIndicator.
        :type delivery_address_indicator: str
        """
        allowed_values = ["shipToBillingAddress", "shipToVerifiedAddress", "shipToNewAddress", "shipToStore", "digitalGoods", "goodsNotShipped", "other"]  # noqa: E501
        if delivery_address_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_address_indicator` ({0}), must be one of {1}"
                .format(delivery_address_indicator, allowed_values)
            )

        self._delivery_address_indicator = delivery_address_indicator

    @property
    def delivery_email(self):
        """Gets the delivery_email of this MerchantRiskIndicator.

        The delivery email address (for digital goods).

        :return: The delivery_email of this MerchantRiskIndicator.
        :rtype: str
        """
        return self._delivery_email

    @delivery_email.setter
    def delivery_email(self, delivery_email):
        """Sets the delivery_email of this MerchantRiskIndicator.

        The delivery email address (for digital goods).

        :param delivery_email: The delivery_email of this MerchantRiskIndicator.
        :type delivery_email: str
        """

        self._delivery_email = delivery_email

    @property
    def delivery_timeframe(self):
        """Gets the delivery_timeframe of this MerchantRiskIndicator.

        The estimated delivery time for the shopper to receive the goods. Allowed values: * `electronicDelivery` * `sameDayShipping` * `overnightShipping` * `twoOrMoreDaysShipping`

        :return: The delivery_timeframe of this MerchantRiskIndicator.
        :rtype: str
        """
        return self._delivery_timeframe

    @delivery_timeframe.setter
    def delivery_timeframe(self, delivery_timeframe):
        """Sets the delivery_timeframe of this MerchantRiskIndicator.

        The estimated delivery time for the shopper to receive the goods. Allowed values: * `electronicDelivery` * `sameDayShipping` * `overnightShipping` * `twoOrMoreDaysShipping`

        :param delivery_timeframe: The delivery_timeframe of this MerchantRiskIndicator.
        :type delivery_timeframe: str
        """
        allowed_values = ["electronicDelivery", "sameDayShipping", "overnightShipping", "twoOrMoreDaysShipping"]  # noqa: E501
        if delivery_timeframe not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_timeframe` ({0}), must be one of {1}"
                .format(delivery_timeframe, allowed_values)
            )

        self._delivery_timeframe = delivery_timeframe

    @property
    def gift_card_amount(self):
        """Gets the gift_card_amount of this MerchantRiskIndicator.

        For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s).

        :return: The gift_card_amount of this MerchantRiskIndicator.
        :rtype: Amount
        """
        return self._gift_card_amount

    @gift_card_amount.setter
    def gift_card_amount(self, gift_card_amount):
        """Sets the gift_card_amount of this MerchantRiskIndicator.

        For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s).

        :param gift_card_amount: The gift_card_amount of this MerchantRiskIndicator.
        :type gift_card_amount: Amount
        """

        self._gift_card_amount = gift_card_amount

    @property
    def gift_card_count(self):
        """Gets the gift_card_count of this MerchantRiskIndicator.

        For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.

        :return: The gift_card_count of this MerchantRiskIndicator.
        :rtype: int
        """
        return self._gift_card_count

    @gift_card_count.setter
    def gift_card_count(self, gift_card_count):
        """Sets the gift_card_count of this MerchantRiskIndicator.

        For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.

        :param gift_card_count: The gift_card_count of this MerchantRiskIndicator.
        :type gift_card_count: int
        """

        self._gift_card_count = gift_card_count

    @property
    def pre_order_date(self):
        """Gets the pre_order_date of this MerchantRiskIndicator.

        For pre-order purchases, the expected date this product will be available to the shopper.

        :return: The pre_order_date of this MerchantRiskIndicator.
        :rtype: datetime
        """
        return self._pre_order_date

    @pre_order_date.setter
    def pre_order_date(self, pre_order_date):
        """Sets the pre_order_date of this MerchantRiskIndicator.

        For pre-order purchases, the expected date this product will be available to the shopper.

        :param pre_order_date: The pre_order_date of this MerchantRiskIndicator.
        :type pre_order_date: datetime
        """

        self._pre_order_date = pre_order_date

    @property
    def pre_order_purchase(self):
        """Gets the pre_order_purchase of this MerchantRiskIndicator.

        Indicator for whether this transaction is for pre-ordering a product.

        :return: The pre_order_purchase of this MerchantRiskIndicator.
        :rtype: bool
        """
        return self._pre_order_purchase

    @pre_order_purchase.setter
    def pre_order_purchase(self, pre_order_purchase):
        """Sets the pre_order_purchase of this MerchantRiskIndicator.

        Indicator for whether this transaction is for pre-ordering a product.

        :param pre_order_purchase: The pre_order_purchase of this MerchantRiskIndicator.
        :type pre_order_purchase: bool
        """

        self._pre_order_purchase = pre_order_purchase

    @property
    def reorder_items(self):
        """Gets the reorder_items of this MerchantRiskIndicator.

        Indicator for whether the shopper has already purchased the same items in the past.

        :return: The reorder_items of this MerchantRiskIndicator.
        :rtype: bool
        """
        return self._reorder_items

    @reorder_items.setter
    def reorder_items(self, reorder_items):
        """Sets the reorder_items of this MerchantRiskIndicator.

        Indicator for whether the shopper has already purchased the same items in the past.

        :param reorder_items: The reorder_items of this MerchantRiskIndicator.
        :type reorder_items: bool
        """

        self._reorder_items = reorder_items
