# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentCancelResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, payment_psp_reference: str=None, psp_reference: str=None, reference: str=None, status: str=None):
        """PaymentCancelResponse - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this PaymentCancelResponse.
        :param payment_psp_reference: The payment_psp_reference of this PaymentCancelResponse.
        :param psp_reference: The psp_reference of this PaymentCancelResponse.
        :param reference: The reference of this PaymentCancelResponse.
        :param status: The status of this PaymentCancelResponse.
        """
        self.openapi_types = {
            'merchant_account': str,
            'payment_psp_reference': str,
            'psp_reference': str,
            'reference': str,
            'status': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'payment_psp_reference': 'paymentPspReference',
            'psp_reference': 'pspReference',
            'reference': 'reference',
            'status': 'status'
        }

        self._merchant_account = merchant_account
        self._payment_psp_reference = payment_psp_reference
        self._psp_reference = psp_reference
        self._reference = reference
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentCancelResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentCancelResponse of this PaymentCancelResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentCancelResponse.

        The merchant account that is used to process the payment.

        :return: The merchant_account of this PaymentCancelResponse.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentCancelResponse.

        The merchant account that is used to process the payment.

        :param merchant_account: The merchant_account of this PaymentCancelResponse.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def payment_psp_reference(self):
        """Gets the payment_psp_reference of this PaymentCancelResponse.

        The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. 

        :return: The payment_psp_reference of this PaymentCancelResponse.
        :rtype: str
        """
        return self._payment_psp_reference

    @payment_psp_reference.setter
    def payment_psp_reference(self, payment_psp_reference):
        """Sets the payment_psp_reference of this PaymentCancelResponse.

        The [`pspReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_pspReference) of the payment to cancel. 

        :param payment_psp_reference: The payment_psp_reference of this PaymentCancelResponse.
        :type payment_psp_reference: str
        """
        if payment_psp_reference is None:
            raise ValueError("Invalid value for `payment_psp_reference`, must not be `None`")

        self._payment_psp_reference = payment_psp_reference

    @property
    def psp_reference(self):
        """Gets the psp_reference of this PaymentCancelResponse.

        Adyen's 16-character reference associated with the cancel request.

        :return: The psp_reference of this PaymentCancelResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this PaymentCancelResponse.

        Adyen's 16-character reference associated with the cancel request.

        :param psp_reference: The psp_reference of this PaymentCancelResponse.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference

    @property
    def reference(self):
        """Gets the reference of this PaymentCancelResponse.

        Your reference for the cancel request.

        :return: The reference of this PaymentCancelResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentCancelResponse.

        Your reference for the cancel request.

        :param reference: The reference of this PaymentCancelResponse.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this PaymentCancelResponse.

        The status of your request. This will always have the value **received**.

        :return: The status of this PaymentCancelResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentCancelResponse.

        The status of your request. This will always have the value **received**.

        :param status: The status of this PaymentCancelResponse.
        :type status: str
        """
        allowed_values = ["received"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
