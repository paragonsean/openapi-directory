# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeviceRenderOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sdk_interface: str='both', sdk_ui_type: List[str]=None):
        """DeviceRenderOptions - a model defined in OpenAPI

        :param sdk_interface: The sdk_interface of this DeviceRenderOptions.
        :param sdk_ui_type: The sdk_ui_type of this DeviceRenderOptions.
        """
        self.openapi_types = {
            'sdk_interface': str,
            'sdk_ui_type': List[str]
        }

        self.attribute_map = {
            'sdk_interface': 'sdkInterface',
            'sdk_ui_type': 'sdkUiType'
        }

        self._sdk_interface = sdk_interface
        self._sdk_ui_type = sdk_ui_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeviceRenderOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeviceRenderOptions of this DeviceRenderOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sdk_interface(self):
        """Gets the sdk_interface of this DeviceRenderOptions.

        Supported SDK interface types. Allowed values: * native * html * both

        :return: The sdk_interface of this DeviceRenderOptions.
        :rtype: str
        """
        return self._sdk_interface

    @sdk_interface.setter
    def sdk_interface(self, sdk_interface):
        """Sets the sdk_interface of this DeviceRenderOptions.

        Supported SDK interface types. Allowed values: * native * html * both

        :param sdk_interface: The sdk_interface of this DeviceRenderOptions.
        :type sdk_interface: str
        """
        allowed_values = ["native", "html", "both"]  # noqa: E501
        if sdk_interface not in allowed_values:
            raise ValueError(
                "Invalid value for `sdk_interface` ({0}), must be one of {1}"
                .format(sdk_interface, allowed_values)
            )

        self._sdk_interface = sdk_interface

    @property
    def sdk_ui_type(self):
        """Gets the sdk_ui_type of this DeviceRenderOptions.

        UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect

        :return: The sdk_ui_type of this DeviceRenderOptions.
        :rtype: List[str]
        """
        return self._sdk_ui_type

    @sdk_ui_type.setter
    def sdk_ui_type(self, sdk_ui_type):
        """Sets the sdk_ui_type of this DeviceRenderOptions.

        UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect

        :param sdk_ui_type: The sdk_ui_type of this DeviceRenderOptions.
        :type sdk_ui_type: List[str]
        """
        allowed_values = ["multiSelect", "otherHtml", "outOfBand", "singleSelect", "text"]  # noqa: E501
        if not set(sdk_ui_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `sdk_ui_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(sdk_ui_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._sdk_ui_type = sdk_ui_type
