/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Avs;
import org.openapitools.client.model.InstallmentsNumber;
import org.openapitools.client.model.ShopperInput;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelConfiguration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:35.076798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelConfiguration {
  public static final String SERIALIZED_NAME_AVS = "avs";
  @SerializedName(SERIALIZED_NAME_AVS)
  private Avs avs;

  /**
   * Determines whether the cardholder name should be provided or not.  Permitted values: * NONE * OPTIONAL * REQUIRED
   */
  @JsonAdapter(CardHolderNameEnum.Adapter.class)
  public enum CardHolderNameEnum {
    NONE("NONE"),
    
    OPTIONAL("OPTIONAL"),
    
    REQUIRED("REQUIRED");

    private String value;

    CardHolderNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CardHolderNameEnum fromValue(String value) {
      for (CardHolderNameEnum b : CardHolderNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CardHolderNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CardHolderNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CardHolderNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CardHolderNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CardHolderNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CARD_HOLDER_NAME = "cardHolderName";
  @SerializedName(SERIALIZED_NAME_CARD_HOLDER_NAME)
  private CardHolderNameEnum cardHolderName;

  public static final String SERIALIZED_NAME_INSTALLMENTS = "installments";
  @SerializedName(SERIALIZED_NAME_INSTALLMENTS)
  private InstallmentsNumber installments;

  public static final String SERIALIZED_NAME_SHOPPER_INPUT = "shopperInput";
  @SerializedName(SERIALIZED_NAME_SHOPPER_INPUT)
  private ShopperInput shopperInput;

  public ModelConfiguration() {
  }

  public ModelConfiguration avs(Avs avs) {
    this.avs = avs;
    return this;
  }

  /**
   * Describes the configuration for AVS ([Address Verification System](https://en.wikipedia.org/wiki/Address_Verification_System)).
   * @return avs
   */
  @javax.annotation.Nullable
  public Avs getAvs() {
    return avs;
  }

  public void setAvs(Avs avs) {
    this.avs = avs;
  }


  public ModelConfiguration cardHolderName(CardHolderNameEnum cardHolderName) {
    this.cardHolderName = cardHolderName;
    return this;
  }

  /**
   * Determines whether the cardholder name should be provided or not.  Permitted values: * NONE * OPTIONAL * REQUIRED
   * @return cardHolderName
   */
  @javax.annotation.Nullable
  public CardHolderNameEnum getCardHolderName() {
    return cardHolderName;
  }

  public void setCardHolderName(CardHolderNameEnum cardHolderName) {
    this.cardHolderName = cardHolderName;
  }


  public ModelConfiguration installments(InstallmentsNumber installments) {
    this.installments = installments;
    return this;
  }

  /**
   * Describes the configuration for [installment payments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).
   * @return installments
   */
  @javax.annotation.Nullable
  public InstallmentsNumber getInstallments() {
    return installments;
  }

  public void setInstallments(InstallmentsNumber installments) {
    this.installments = installments;
  }


  public ModelConfiguration shopperInput(ShopperInput shopperInput) {
    this.shopperInput = shopperInput;
    return this;
  }

  /**
   * Determines how to display the details fields.
   * @return shopperInput
   */
  @javax.annotation.Nullable
  public ShopperInput getShopperInput() {
    return shopperInput;
  }

  public void setShopperInput(ShopperInput shopperInput) {
    this.shopperInput = shopperInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelConfiguration _configuration = (ModelConfiguration) o;
    return Objects.equals(this.avs, _configuration.avs) &&
        Objects.equals(this.cardHolderName, _configuration.cardHolderName) &&
        Objects.equals(this.installments, _configuration.installments) &&
        Objects.equals(this.shopperInput, _configuration.shopperInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avs, cardHolderName, installments, shopperInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelConfiguration {\n");
    sb.append("    avs: ").append(toIndentedString(avs)).append("\n");
    sb.append("    cardHolderName: ").append(toIndentedString(cardHolderName)).append("\n");
    sb.append("    installments: ").append(toIndentedString(installments)).append("\n");
    sb.append("    shopperInput: ").append(toIndentedString(shopperInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avs");
    openapiFields.add("cardHolderName");
    openapiFields.add("installments");
    openapiFields.add("shopperInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelConfiguration is not found in the empty JSON string", ModelConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `avs`
      if (jsonObj.get("avs") != null && !jsonObj.get("avs").isJsonNull()) {
        Avs.validateJsonElement(jsonObj.get("avs"));
      }
      if ((jsonObj.get("cardHolderName") != null && !jsonObj.get("cardHolderName").isJsonNull()) && !jsonObj.get("cardHolderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cardHolderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cardHolderName").toString()));
      }
      // validate the optional field `cardHolderName`
      if (jsonObj.get("cardHolderName") != null && !jsonObj.get("cardHolderName").isJsonNull()) {
        CardHolderNameEnum.validateJsonElement(jsonObj.get("cardHolderName"));
      }
      // validate the optional field `installments`
      if (jsonObj.get("installments") != null && !jsonObj.get("installments").isJsonNull()) {
        InstallmentsNumber.validateJsonElement(jsonObj.get("installments"));
      }
      // validate the optional field `shopperInput`
      if (jsonObj.get("shopperInput") != null && !jsonObj.get("shopperInput").isJsonNull()) {
        ShopperInput.validateJsonElement(jsonObj.get("shopperInput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelConfiguration>() {
           @Override
           public void write(JsonWriter out, ModelConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelConfiguration
   * @throws IOException if the JSON string is invalid with respect to ModelConfiguration
   */
  public static ModelConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelConfiguration.class);
  }

  /**
   * Convert an instance of ModelConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

