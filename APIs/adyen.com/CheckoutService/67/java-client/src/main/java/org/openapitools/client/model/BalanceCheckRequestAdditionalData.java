/*
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AdditionalData3DSecure;
import org.openapitools.client.model.AdditionalDataAirline;
import org.openapitools.client.model.AdditionalDataCarRental;
import org.openapitools.client.model.AdditionalDataCommon;
import org.openapitools.client.model.AdditionalDataLevel23;
import org.openapitools.client.model.AdditionalDataLodging;
import org.openapitools.client.model.AdditionalDataOpenInvoice;
import org.openapitools.client.model.AdditionalDataOpi;
import org.openapitools.client.model.AdditionalDataRatepay;
import org.openapitools.client.model.AdditionalDataRetry;
import org.openapitools.client.model.AdditionalDataRisk;
import org.openapitools.client.model.AdditionalDataRiskStandalone;
import org.openapitools.client.model.AdditionalDataSubMerchant;
import org.openapitools.client.model.AdditionalDataTemporaryServices;
import org.openapitools.client.model.AdditionalDataWallets;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:16:35.076798-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BalanceCheckRequestAdditionalData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(BalanceCheckRequestAdditionalData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!BalanceCheckRequestAdditionalData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'BalanceCheckRequestAdditionalData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<AdditionalData3DSecure> adapterAdditionalData3DSecure = gson.getDelegateAdapter(this, TypeToken.get(AdditionalData3DSecure.class));
            final TypeAdapter<AdditionalDataAirline> adapterAdditionalDataAirline = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataAirline.class));
            final TypeAdapter<AdditionalDataCarRental> adapterAdditionalDataCarRental = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataCarRental.class));
            final TypeAdapter<AdditionalDataCommon> adapterAdditionalDataCommon = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataCommon.class));
            final TypeAdapter<AdditionalDataLevel23> adapterAdditionalDataLevel23 = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataLevel23.class));
            final TypeAdapter<AdditionalDataLodging> adapterAdditionalDataLodging = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataLodging.class));
            final TypeAdapter<AdditionalDataOpenInvoice> adapterAdditionalDataOpenInvoice = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataOpenInvoice.class));
            final TypeAdapter<AdditionalDataOpi> adapterAdditionalDataOpi = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataOpi.class));
            final TypeAdapter<AdditionalDataRatepay> adapterAdditionalDataRatepay = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataRatepay.class));
            final TypeAdapter<AdditionalDataRetry> adapterAdditionalDataRetry = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataRetry.class));
            final TypeAdapter<AdditionalDataRisk> adapterAdditionalDataRisk = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataRisk.class));
            final TypeAdapter<AdditionalDataRiskStandalone> adapterAdditionalDataRiskStandalone = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataRiskStandalone.class));
            final TypeAdapter<AdditionalDataSubMerchant> adapterAdditionalDataSubMerchant = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataSubMerchant.class));
            final TypeAdapter<AdditionalDataTemporaryServices> adapterAdditionalDataTemporaryServices = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataTemporaryServices.class));
            final TypeAdapter<AdditionalDataWallets> adapterAdditionalDataWallets = gson.getDelegateAdapter(this, TypeToken.get(AdditionalDataWallets.class));

            return (TypeAdapter<T>) new TypeAdapter<BalanceCheckRequestAdditionalData>() {
                @Override
                public void write(JsonWriter out, BalanceCheckRequestAdditionalData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `AdditionalData3DSecure`
                    if (value.getActualInstance() instanceof AdditionalData3DSecure) {
                        JsonElement element = adapterAdditionalData3DSecure.toJsonTree((AdditionalData3DSecure)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataAirline`
                    if (value.getActualInstance() instanceof AdditionalDataAirline) {
                        JsonElement element = adapterAdditionalDataAirline.toJsonTree((AdditionalDataAirline)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataCarRental`
                    if (value.getActualInstance() instanceof AdditionalDataCarRental) {
                        JsonElement element = adapterAdditionalDataCarRental.toJsonTree((AdditionalDataCarRental)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataCommon`
                    if (value.getActualInstance() instanceof AdditionalDataCommon) {
                        JsonElement element = adapterAdditionalDataCommon.toJsonTree((AdditionalDataCommon)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataLevel23`
                    if (value.getActualInstance() instanceof AdditionalDataLevel23) {
                        JsonElement element = adapterAdditionalDataLevel23.toJsonTree((AdditionalDataLevel23)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataLodging`
                    if (value.getActualInstance() instanceof AdditionalDataLodging) {
                        JsonElement element = adapterAdditionalDataLodging.toJsonTree((AdditionalDataLodging)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataOpenInvoice`
                    if (value.getActualInstance() instanceof AdditionalDataOpenInvoice) {
                        JsonElement element = adapterAdditionalDataOpenInvoice.toJsonTree((AdditionalDataOpenInvoice)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataOpi`
                    if (value.getActualInstance() instanceof AdditionalDataOpi) {
                        JsonElement element = adapterAdditionalDataOpi.toJsonTree((AdditionalDataOpi)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataRatepay`
                    if (value.getActualInstance() instanceof AdditionalDataRatepay) {
                        JsonElement element = adapterAdditionalDataRatepay.toJsonTree((AdditionalDataRatepay)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataRetry`
                    if (value.getActualInstance() instanceof AdditionalDataRetry) {
                        JsonElement element = adapterAdditionalDataRetry.toJsonTree((AdditionalDataRetry)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataRisk`
                    if (value.getActualInstance() instanceof AdditionalDataRisk) {
                        JsonElement element = adapterAdditionalDataRisk.toJsonTree((AdditionalDataRisk)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataRiskStandalone`
                    if (value.getActualInstance() instanceof AdditionalDataRiskStandalone) {
                        JsonElement element = adapterAdditionalDataRiskStandalone.toJsonTree((AdditionalDataRiskStandalone)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataSubMerchant`
                    if (value.getActualInstance() instanceof AdditionalDataSubMerchant) {
                        JsonElement element = adapterAdditionalDataSubMerchant.toJsonTree((AdditionalDataSubMerchant)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataTemporaryServices`
                    if (value.getActualInstance() instanceof AdditionalDataTemporaryServices) {
                        JsonElement element = adapterAdditionalDataTemporaryServices.toJsonTree((AdditionalDataTemporaryServices)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdditionalDataWallets`
                    if (value.getActualInstance() instanceof AdditionalDataWallets) {
                        JsonElement element = adapterAdditionalDataWallets.toJsonTree((AdditionalDataWallets)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match anyOf schemas: AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets");
                }

                @Override
                public BalanceCheckRequestAdditionalData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize AdditionalData3DSecure
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalData3DSecure.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalData3DSecure;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalData3DSecure failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalData3DSecure'", e);
                    }
                    // deserialize AdditionalDataAirline
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataAirline.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataAirline;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataAirline failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataAirline'", e);
                    }
                    // deserialize AdditionalDataCarRental
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataCarRental.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataCarRental;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataCarRental failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataCarRental'", e);
                    }
                    // deserialize AdditionalDataCommon
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataCommon.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataCommon;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataCommon failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataCommon'", e);
                    }
                    // deserialize AdditionalDataLevel23
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataLevel23.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataLevel23;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataLevel23 failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataLevel23'", e);
                    }
                    // deserialize AdditionalDataLodging
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataLodging.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataLodging;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataLodging failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataLodging'", e);
                    }
                    // deserialize AdditionalDataOpenInvoice
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataOpenInvoice.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataOpenInvoice;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataOpenInvoice failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataOpenInvoice'", e);
                    }
                    // deserialize AdditionalDataOpi
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataOpi.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataOpi;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataOpi failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataOpi'", e);
                    }
                    // deserialize AdditionalDataRatepay
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataRatepay.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataRatepay;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataRatepay failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataRatepay'", e);
                    }
                    // deserialize AdditionalDataRetry
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataRetry.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataRetry;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataRetry failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataRetry'", e);
                    }
                    // deserialize AdditionalDataRisk
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataRisk.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataRisk;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataRisk failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataRisk'", e);
                    }
                    // deserialize AdditionalDataRiskStandalone
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataRiskStandalone.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataRiskStandalone;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataRiskStandalone failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataRiskStandalone'", e);
                    }
                    // deserialize AdditionalDataSubMerchant
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataSubMerchant.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataSubMerchant;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataSubMerchant failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataSubMerchant'", e);
                    }
                    // deserialize AdditionalDataTemporaryServices
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataTemporaryServices.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataTemporaryServices;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataTemporaryServices failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataTemporaryServices'", e);
                    }
                    // deserialize AdditionalDataWallets
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdditionalDataWallets.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdditionalDataWallets;
                        BalanceCheckRequestAdditionalData ret = new BalanceCheckRequestAdditionalData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdditionalDataWallets failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdditionalDataWallets'", e);
                    }

                    throw new IOException(String.format("Failed deserialization for BalanceCheckRequestAdditionalData: no class matches result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in anyOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public BalanceCheckRequestAdditionalData() {
        super("anyOf", Boolean.FALSE);
    }

    public BalanceCheckRequestAdditionalData(Object o) {
        super("anyOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("AdditionalData3DSecure", AdditionalData3DSecure.class);
        schemas.put("AdditionalDataAirline", AdditionalDataAirline.class);
        schemas.put("AdditionalDataCarRental", AdditionalDataCarRental.class);
        schemas.put("AdditionalDataCommon", AdditionalDataCommon.class);
        schemas.put("AdditionalDataLevel23", AdditionalDataLevel23.class);
        schemas.put("AdditionalDataLodging", AdditionalDataLodging.class);
        schemas.put("AdditionalDataOpenInvoice", AdditionalDataOpenInvoice.class);
        schemas.put("AdditionalDataOpi", AdditionalDataOpi.class);
        schemas.put("AdditionalDataRatepay", AdditionalDataRatepay.class);
        schemas.put("AdditionalDataRetry", AdditionalDataRetry.class);
        schemas.put("AdditionalDataRisk", AdditionalDataRisk.class);
        schemas.put("AdditionalDataRiskStandalone", AdditionalDataRiskStandalone.class);
        schemas.put("AdditionalDataSubMerchant", AdditionalDataSubMerchant.class);
        schemas.put("AdditionalDataTemporaryServices", AdditionalDataTemporaryServices.class);
        schemas.put("AdditionalDataWallets", AdditionalDataWallets.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return BalanceCheckRequestAdditionalData.schemas;
    }

    /**
     * Set the instance that matches the anyOf child schema, check
     * the instance parameter is valid against the anyOf child schemas:
     * AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets
     *
     * It could be an instance of the 'anyOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof AdditionalData3DSecure) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataAirline) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataCarRental) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataCommon) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataLevel23) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataLodging) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataOpenInvoice) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataOpi) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataRatepay) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataRetry) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataRisk) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataRiskStandalone) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataSubMerchant) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataTemporaryServices) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdditionalDataWallets) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets");
    }

    /**
     * Get the actual instance, which can be the following:
     * AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets
     *
     * @return The actual instance (AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdditionalData3DSecure`. If the actual instance is not `AdditionalData3DSecure`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalData3DSecure`
     * @throws ClassCastException if the instance is not `AdditionalData3DSecure`
     */
    public AdditionalData3DSecure getAdditionalData3DSecure() throws ClassCastException {
        return (AdditionalData3DSecure)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataAirline`. If the actual instance is not `AdditionalDataAirline`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataAirline`
     * @throws ClassCastException if the instance is not `AdditionalDataAirline`
     */
    public AdditionalDataAirline getAdditionalDataAirline() throws ClassCastException {
        return (AdditionalDataAirline)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataCarRental`. If the actual instance is not `AdditionalDataCarRental`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataCarRental`
     * @throws ClassCastException if the instance is not `AdditionalDataCarRental`
     */
    public AdditionalDataCarRental getAdditionalDataCarRental() throws ClassCastException {
        return (AdditionalDataCarRental)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataCommon`. If the actual instance is not `AdditionalDataCommon`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataCommon`
     * @throws ClassCastException if the instance is not `AdditionalDataCommon`
     */
    public AdditionalDataCommon getAdditionalDataCommon() throws ClassCastException {
        return (AdditionalDataCommon)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataLevel23`. If the actual instance is not `AdditionalDataLevel23`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataLevel23`
     * @throws ClassCastException if the instance is not `AdditionalDataLevel23`
     */
    public AdditionalDataLevel23 getAdditionalDataLevel23() throws ClassCastException {
        return (AdditionalDataLevel23)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataLodging`. If the actual instance is not `AdditionalDataLodging`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataLodging`
     * @throws ClassCastException if the instance is not `AdditionalDataLodging`
     */
    public AdditionalDataLodging getAdditionalDataLodging() throws ClassCastException {
        return (AdditionalDataLodging)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataOpenInvoice`. If the actual instance is not `AdditionalDataOpenInvoice`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataOpenInvoice`
     * @throws ClassCastException if the instance is not `AdditionalDataOpenInvoice`
     */
    public AdditionalDataOpenInvoice getAdditionalDataOpenInvoice() throws ClassCastException {
        return (AdditionalDataOpenInvoice)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataOpi`. If the actual instance is not `AdditionalDataOpi`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataOpi`
     * @throws ClassCastException if the instance is not `AdditionalDataOpi`
     */
    public AdditionalDataOpi getAdditionalDataOpi() throws ClassCastException {
        return (AdditionalDataOpi)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataRatepay`. If the actual instance is not `AdditionalDataRatepay`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataRatepay`
     * @throws ClassCastException if the instance is not `AdditionalDataRatepay`
     */
    public AdditionalDataRatepay getAdditionalDataRatepay() throws ClassCastException {
        return (AdditionalDataRatepay)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataRetry`. If the actual instance is not `AdditionalDataRetry`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataRetry`
     * @throws ClassCastException if the instance is not `AdditionalDataRetry`
     */
    public AdditionalDataRetry getAdditionalDataRetry() throws ClassCastException {
        return (AdditionalDataRetry)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataRisk`. If the actual instance is not `AdditionalDataRisk`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataRisk`
     * @throws ClassCastException if the instance is not `AdditionalDataRisk`
     */
    public AdditionalDataRisk getAdditionalDataRisk() throws ClassCastException {
        return (AdditionalDataRisk)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataRiskStandalone`. If the actual instance is not `AdditionalDataRiskStandalone`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataRiskStandalone`
     * @throws ClassCastException if the instance is not `AdditionalDataRiskStandalone`
     */
    public AdditionalDataRiskStandalone getAdditionalDataRiskStandalone() throws ClassCastException {
        return (AdditionalDataRiskStandalone)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataSubMerchant`. If the actual instance is not `AdditionalDataSubMerchant`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataSubMerchant`
     * @throws ClassCastException if the instance is not `AdditionalDataSubMerchant`
     */
    public AdditionalDataSubMerchant getAdditionalDataSubMerchant() throws ClassCastException {
        return (AdditionalDataSubMerchant)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataTemporaryServices`. If the actual instance is not `AdditionalDataTemporaryServices`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataTemporaryServices`
     * @throws ClassCastException if the instance is not `AdditionalDataTemporaryServices`
     */
    public AdditionalDataTemporaryServices getAdditionalDataTemporaryServices() throws ClassCastException {
        return (AdditionalDataTemporaryServices)super.getActualInstance();
    }
    /**
     * Get the actual instance of `AdditionalDataWallets`. If the actual instance is not `AdditionalDataWallets`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdditionalDataWallets`
     * @throws ClassCastException if the instance is not `AdditionalDataWallets`
     */
    public AdditionalDataWallets getAdditionalDataWallets() throws ClassCastException {
        return (AdditionalDataWallets)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to BalanceCheckRequestAdditionalData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate anyOf schemas one by one
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with AdditionalData3DSecure
        try {
            AdditionalData3DSecure.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalData3DSecure failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataAirline
        try {
            AdditionalDataAirline.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataAirline failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataCarRental
        try {
            AdditionalDataCarRental.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataCarRental failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataCommon
        try {
            AdditionalDataCommon.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataCommon failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataLevel23
        try {
            AdditionalDataLevel23.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataLevel23 failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataLodging
        try {
            AdditionalDataLodging.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataLodging failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataOpenInvoice
        try {
            AdditionalDataOpenInvoice.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataOpenInvoice failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataOpi
        try {
            AdditionalDataOpi.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataOpi failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataRatepay
        try {
            AdditionalDataRatepay.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataRatepay failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataRetry
        try {
            AdditionalDataRetry.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataRetry failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataRisk
        try {
            AdditionalDataRisk.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataRisk failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataRiskStandalone
        try {
            AdditionalDataRiskStandalone.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataRiskStandalone failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataSubMerchant
        try {
            AdditionalDataSubMerchant.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataSubMerchant failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataTemporaryServices
        try {
            AdditionalDataTemporaryServices.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataTemporaryServices failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdditionalDataWallets
        try {
            AdditionalDataWallets.validateJsonElement(jsonElement);
            return;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdditionalDataWallets failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        throw new IOException(String.format("The JSON string is invalid for BalanceCheckRequestAdditionalData with anyOf schemas: AdditionalData3DSecure, AdditionalDataAirline, AdditionalDataCarRental, AdditionalDataCommon, AdditionalDataLevel23, AdditionalDataLodging, AdditionalDataOpenInvoice, AdditionalDataOpi, AdditionalDataRatepay, AdditionalDataRetry, AdditionalDataRisk, AdditionalDataRiskStandalone, AdditionalDataSubMerchant, AdditionalDataTemporaryServices, AdditionalDataWallets. no class match the result, expected at least 1. Detailed failure message for anyOf schemas: %s. JSON: %s", errorMessages, jsonElement.toString()));
    }

    /**
     * Create an instance of BalanceCheckRequestAdditionalData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of BalanceCheckRequestAdditionalData
     * @throws IOException if the JSON string is invalid with respect to BalanceCheckRequestAdditionalData
     */
    public static BalanceCheckRequestAdditionalData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, BalanceCheckRequestAdditionalData.class);
    }

    /**
     * Convert an instance of BalanceCheckRequestAdditionalData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

