/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentDetailsRequest.h
 *
 * 
 */

#ifndef OAIPaymentDetailsRequest_H
#define OAIPaymentDetailsRequest_H

#include <QJsonObject>

#include "OAIPaymentCompletionDetails.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPaymentCompletionDetails;

class OAIPaymentDetailsRequest : public OAIObject {
public:
    OAIPaymentDetailsRequest();
    OAIPaymentDetailsRequest(QString json);
    ~OAIPaymentDetailsRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIPaymentCompletionDetails getDetails() const;
    void setDetails(const OAIPaymentCompletionDetails &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getPaymentData() const;
    void setPaymentData(const QString &payment_data);
    bool is_payment_data_Set() const;
    bool is_payment_data_Valid() const;

    bool isThreeDsAuthenticationOnly() const;
    void setThreeDsAuthenticationOnly(const bool &three_ds_authentication_only);
    bool is_three_ds_authentication_only_Set() const;
    bool is_three_ds_authentication_only_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIPaymentCompletionDetails m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_payment_data;
    bool m_payment_data_isSet;
    bool m_payment_data_isValid;

    bool m_three_ds_authentication_only;
    bool m_three_ds_authentication_only_isSet;
    bool m_three_ds_authentication_only_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentDetailsRequest)

#endif // OAIPaymentDetailsRequest_H
