/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentRefundResponse.h
 *
 * 
 */

#ifndef OAIPaymentRefundResponse_H
#define OAIPaymentRefundResponse_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAILineItem.h"
#include "OAISplit.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAILineItem;
class OAISplit;

class OAIPaymentRefundResponse : public OAIObject {
public:
    OAIPaymentRefundResponse();
    OAIPaymentRefundResponse(QString json);
    ~OAIPaymentRefundResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QList<OAILineItem> getLineItems() const;
    void setLineItems(const QList<OAILineItem> &line_items);
    bool is_line_items_Set() const;
    bool is_line_items_Valid() const;

    QString getMerchantAccount() const;
    void setMerchantAccount(const QString &merchant_account);
    bool is_merchant_account_Set() const;
    bool is_merchant_account_Valid() const;

    QString getMerchantRefundReason() const;
    void setMerchantRefundReason(const QString &merchant_refund_reason);
    bool is_merchant_refund_reason_Set() const;
    bool is_merchant_refund_reason_Valid() const;

    QString getPaymentPspReference() const;
    void setPaymentPspReference(const QString &payment_psp_reference);
    bool is_payment_psp_reference_Set() const;
    bool is_payment_psp_reference_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QList<OAISplit> getSplits() const;
    void setSplits(const QList<OAISplit> &splits);
    bool is_splits_Set() const;
    bool is_splits_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getStore() const;
    void setStore(const QString &store);
    bool is_store_Set() const;
    bool is_store_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QList<OAILineItem> m_line_items;
    bool m_line_items_isSet;
    bool m_line_items_isValid;

    QString m_merchant_account;
    bool m_merchant_account_isSet;
    bool m_merchant_account_isValid;

    QString m_merchant_refund_reason;
    bool m_merchant_refund_reason_isSet;
    bool m_merchant_refund_reason_isValid;

    QString m_payment_psp_reference;
    bool m_payment_psp_reference_isSet;
    bool m_payment_psp_reference_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QList<OAISplit> m_splits;
    bool m_splits_isSet;
    bool m_splits_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_store;
    bool m_store_isSet;
    bool m_store_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentRefundResponse)

#endif // OAIPaymentRefundResponse_H
