/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResponse::OAIPaymentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResponse::OAIPaymentResponse() {
    this->initializeModel();
}

OAIPaymentResponse::~OAIPaymentResponse() {}

void OAIPaymentResponse::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_donation_token_isSet = false;
    m_donation_token_isValid = false;

    m_fraud_result_isSet = false;
    m_fraud_result_isValid = false;

    m_merchant_reference_isSet = false;
    m_merchant_reference_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_refusal_reason_code_isSet = false;
    m_refusal_reason_code_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_three_ds2_response_data_isSet = false;
    m_three_ds2_response_data_isValid = false;

    m_three_ds2_result_isSet = false;
    m_three_ds2_result_isValid = false;

    m_three_ds_payment_data_isSet = false;
    m_three_ds_payment_data_isValid = false;
}

void OAIPaymentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResponse::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_donation_token_isValid = ::OpenAPI::fromJsonValue(m_donation_token, json[QString("donationToken")]);
    m_donation_token_isSet = !json[QString("donationToken")].isNull() && m_donation_token_isValid;

    m_fraud_result_isValid = ::OpenAPI::fromJsonValue(m_fraud_result, json[QString("fraudResult")]);
    m_fraud_result_isSet = !json[QString("fraudResult")].isNull() && m_fraud_result_isValid;

    m_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_reference, json[QString("merchantReference")]);
    m_merchant_reference_isSet = !json[QString("merchantReference")].isNull() && m_merchant_reference_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_refusal_reason_code_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason_code, json[QString("refusalReasonCode")]);
    m_refusal_reason_code_isSet = !json[QString("refusalReasonCode")].isNull() && m_refusal_reason_code_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_three_ds2_response_data_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_response_data, json[QString("threeDS2ResponseData")]);
    m_three_ds2_response_data_isSet = !json[QString("threeDS2ResponseData")].isNull() && m_three_ds2_response_data_isValid;

    m_three_ds2_result_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_result, json[QString("threeDS2Result")]);
    m_three_ds2_result_isSet = !json[QString("threeDS2Result")].isNull() && m_three_ds2_result_isValid;

    m_three_ds_payment_data_isValid = ::OpenAPI::fromJsonValue(m_three_ds_payment_data, json[QString("threeDSPaymentData")]);
    m_three_ds_payment_data_isSet = !json[QString("threeDSPaymentData")].isNull() && m_three_ds_payment_data_isValid;
}

QString OAIPaymentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_action.isSet()) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_donation_token_isSet) {
        obj.insert(QString("donationToken"), ::OpenAPI::toJsonValue(m_donation_token));
    }
    if (m_fraud_result.isSet()) {
        obj.insert(QString("fraudResult"), ::OpenAPI::toJsonValue(m_fraud_result));
    }
    if (m_merchant_reference_isSet) {
        obj.insert(QString("merchantReference"), ::OpenAPI::toJsonValue(m_merchant_reference));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_refusal_reason_code_isSet) {
        obj.insert(QString("refusalReasonCode"), ::OpenAPI::toJsonValue(m_refusal_reason_code));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_three_ds2_response_data.isSet()) {
        obj.insert(QString("threeDS2ResponseData"), ::OpenAPI::toJsonValue(m_three_ds2_response_data));
    }
    if (m_three_ds2_result.isSet()) {
        obj.insert(QString("threeDS2Result"), ::OpenAPI::toJsonValue(m_three_ds2_result));
    }
    if (m_three_ds_payment_data_isSet) {
        obj.insert(QString("threeDSPaymentData"), ::OpenAPI::toJsonValue(m_three_ds_payment_data));
    }
    return obj;
}

OAIPaymentResponse_action OAIPaymentResponse::getAction() const {
    return m_action;
}
void OAIPaymentResponse::setAction(const OAIPaymentResponse_action &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIPaymentResponse::is_action_Set() const{
    return m_action_isSet;
}

bool OAIPaymentResponse::is_action_Valid() const{
    return m_action_isValid;
}

OAIBalanceCheckResponse_additionalData OAIPaymentResponse::getAdditionalData() const {
    return m_additional_data;
}
void OAIPaymentResponse::setAdditionalData(const OAIBalanceCheckResponse_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPaymentResponse::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPaymentResponse::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

OAIAmount OAIPaymentResponse::getAmount() const {
    return m_amount;
}
void OAIPaymentResponse::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentResponse::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentResponse::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIPaymentResponse::getDonationToken() const {
    return m_donation_token;
}
void OAIPaymentResponse::setDonationToken(const QString &donation_token) {
    m_donation_token = donation_token;
    m_donation_token_isSet = true;
}

bool OAIPaymentResponse::is_donation_token_Set() const{
    return m_donation_token_isSet;
}

bool OAIPaymentResponse::is_donation_token_Valid() const{
    return m_donation_token_isValid;
}

OAIFraudResult OAIPaymentResponse::getFraudResult() const {
    return m_fraud_result;
}
void OAIPaymentResponse::setFraudResult(const OAIFraudResult &fraud_result) {
    m_fraud_result = fraud_result;
    m_fraud_result_isSet = true;
}

bool OAIPaymentResponse::is_fraud_result_Set() const{
    return m_fraud_result_isSet;
}

bool OAIPaymentResponse::is_fraud_result_Valid() const{
    return m_fraud_result_isValid;
}

QString OAIPaymentResponse::getMerchantReference() const {
    return m_merchant_reference;
}
void OAIPaymentResponse::setMerchantReference(const QString &merchant_reference) {
    m_merchant_reference = merchant_reference;
    m_merchant_reference_isSet = true;
}

bool OAIPaymentResponse::is_merchant_reference_Set() const{
    return m_merchant_reference_isSet;
}

bool OAIPaymentResponse::is_merchant_reference_Valid() const{
    return m_merchant_reference_isValid;
}

OAICheckoutOrderResponse OAIPaymentResponse::getOrder() const {
    return m_order;
}
void OAIPaymentResponse::setOrder(const OAICheckoutOrderResponse &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPaymentResponse::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPaymentResponse::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPaymentResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIPaymentResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIPaymentResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIPaymentResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIPaymentResponse::getRefusalReason() const {
    return m_refusal_reason;
}
void OAIPaymentResponse::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAIPaymentResponse::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAIPaymentResponse::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

QString OAIPaymentResponse::getRefusalReasonCode() const {
    return m_refusal_reason_code;
}
void OAIPaymentResponse::setRefusalReasonCode(const QString &refusal_reason_code) {
    m_refusal_reason_code = refusal_reason_code;
    m_refusal_reason_code_isSet = true;
}

bool OAIPaymentResponse::is_refusal_reason_code_Set() const{
    return m_refusal_reason_code_isSet;
}

bool OAIPaymentResponse::is_refusal_reason_code_Valid() const{
    return m_refusal_reason_code_isValid;
}

QString OAIPaymentResponse::getResultCode() const {
    return m_result_code;
}
void OAIPaymentResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIPaymentResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIPaymentResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

OAIThreeDS2ResponseData OAIPaymentResponse::getThreeDs2ResponseData() const {
    return m_three_ds2_response_data;
}
void OAIPaymentResponse::setThreeDs2ResponseData(const OAIThreeDS2ResponseData &three_ds2_response_data) {
    m_three_ds2_response_data = three_ds2_response_data;
    m_three_ds2_response_data_isSet = true;
}

bool OAIPaymentResponse::is_three_ds2_response_data_Set() const{
    return m_three_ds2_response_data_isSet;
}

bool OAIPaymentResponse::is_three_ds2_response_data_Valid() const{
    return m_three_ds2_response_data_isValid;
}

OAIThreeDS2Result OAIPaymentResponse::getThreeDs2Result() const {
    return m_three_ds2_result;
}
void OAIPaymentResponse::setThreeDs2Result(const OAIThreeDS2Result &three_ds2_result) {
    m_three_ds2_result = three_ds2_result;
    m_three_ds2_result_isSet = true;
}

bool OAIPaymentResponse::is_three_ds2_result_Set() const{
    return m_three_ds2_result_isSet;
}

bool OAIPaymentResponse::is_three_ds2_result_Valid() const{
    return m_three_ds2_result_isValid;
}

QString OAIPaymentResponse::getThreeDsPaymentData() const {
    return m_three_ds_payment_data;
}
void OAIPaymentResponse::setThreeDsPaymentData(const QString &three_ds_payment_data) {
    m_three_ds_payment_data = three_ds_payment_data;
    m_three_ds_payment_data_isSet = true;
}

bool OAIPaymentResponse::is_three_ds_payment_data_Set() const{
    return m_three_ds_payment_data_isSet;
}

bool OAIPaymentResponse::is_three_ds_payment_data_Valid() const{
    return m_three_ds_payment_data_isValid;
}

bool OAIPaymentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_donation_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_response_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_payment_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
