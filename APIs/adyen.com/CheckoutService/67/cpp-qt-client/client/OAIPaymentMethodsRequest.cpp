/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentMethodsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentMethodsRequest::OAIPaymentMethodsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentMethodsRequest::OAIPaymentMethodsRequest() {
    this->initializeModel();
}

OAIPaymentMethodsRequest::~OAIPaymentMethodsRequest() {}

void OAIPaymentMethodsRequest::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_allowed_payment_methods_isSet = false;
    m_allowed_payment_methods_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_blocked_payment_methods_isSet = false;
    m_blocked_payment_methods_isValid = false;

    m_channel_isSet = false;
    m_channel_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_split_card_funding_sources_isSet = false;
    m_split_card_funding_sources_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;
}

void OAIPaymentMethodsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentMethodsRequest::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_allowed_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_methods, json[QString("allowedPaymentMethods")]);
    m_allowed_payment_methods_isSet = !json[QString("allowedPaymentMethods")].isNull() && m_allowed_payment_methods_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_blocked_payment_methods_isValid = ::OpenAPI::fromJsonValue(m_blocked_payment_methods, json[QString("blockedPaymentMethods")]);
    m_blocked_payment_methods_isSet = !json[QString("blockedPaymentMethods")].isNull() && m_blocked_payment_methods_isValid;

    m_channel_isValid = ::OpenAPI::fromJsonValue(m_channel, json[QString("channel")]);
    m_channel_isSet = !json[QString("channel")].isNull() && m_channel_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_split_card_funding_sources_isValid = ::OpenAPI::fromJsonValue(m_split_card_funding_sources, json[QString("splitCardFundingSources")]);
    m_split_card_funding_sources_isSet = !json[QString("splitCardFundingSources")].isNull() && m_split_card_funding_sources_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;
}

QString OAIPaymentMethodsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentMethodsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_allowed_payment_methods.size() > 0) {
        obj.insert(QString("allowedPaymentMethods"), ::OpenAPI::toJsonValue(m_allowed_payment_methods));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_blocked_payment_methods.size() > 0) {
        obj.insert(QString("blockedPaymentMethods"), ::OpenAPI::toJsonValue(m_blocked_payment_methods));
    }
    if (m_channel_isSet) {
        obj.insert(QString("channel"), ::OpenAPI::toJsonValue(m_channel));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_split_card_funding_sources_isSet) {
        obj.insert(QString("splitCardFundingSources"), ::OpenAPI::toJsonValue(m_split_card_funding_sources));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    return obj;
}

OAIBalanceCheckRequest_additionalData OAIPaymentMethodsRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAIPaymentMethodsRequest::setAdditionalData(const OAIBalanceCheckRequest_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPaymentMethodsRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPaymentMethodsRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QList<QString> OAIPaymentMethodsRequest::getAllowedPaymentMethods() const {
    return m_allowed_payment_methods;
}
void OAIPaymentMethodsRequest::setAllowedPaymentMethods(const QList<QString> &allowed_payment_methods) {
    m_allowed_payment_methods = allowed_payment_methods;
    m_allowed_payment_methods_isSet = true;
}

bool OAIPaymentMethodsRequest::is_allowed_payment_methods_Set() const{
    return m_allowed_payment_methods_isSet;
}

bool OAIPaymentMethodsRequest::is_allowed_payment_methods_Valid() const{
    return m_allowed_payment_methods_isValid;
}

OAIAmount OAIPaymentMethodsRequest::getAmount() const {
    return m_amount;
}
void OAIPaymentMethodsRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentMethodsRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentMethodsRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<QString> OAIPaymentMethodsRequest::getBlockedPaymentMethods() const {
    return m_blocked_payment_methods;
}
void OAIPaymentMethodsRequest::setBlockedPaymentMethods(const QList<QString> &blocked_payment_methods) {
    m_blocked_payment_methods = blocked_payment_methods;
    m_blocked_payment_methods_isSet = true;
}

bool OAIPaymentMethodsRequest::is_blocked_payment_methods_Set() const{
    return m_blocked_payment_methods_isSet;
}

bool OAIPaymentMethodsRequest::is_blocked_payment_methods_Valid() const{
    return m_blocked_payment_methods_isValid;
}

QString OAIPaymentMethodsRequest::getChannel() const {
    return m_channel;
}
void OAIPaymentMethodsRequest::setChannel(const QString &channel) {
    m_channel = channel;
    m_channel_isSet = true;
}

bool OAIPaymentMethodsRequest::is_channel_Set() const{
    return m_channel_isSet;
}

bool OAIPaymentMethodsRequest::is_channel_Valid() const{
    return m_channel_isValid;
}

QString OAIPaymentMethodsRequest::getCountryCode() const {
    return m_country_code;
}
void OAIPaymentMethodsRequest::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPaymentMethodsRequest::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPaymentMethodsRequest::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIPaymentMethodsRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIPaymentMethodsRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIPaymentMethodsRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIPaymentMethodsRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

OAIEncryptedOrderData OAIPaymentMethodsRequest::getOrder() const {
    return m_order;
}
void OAIPaymentMethodsRequest::setOrder(const OAIEncryptedOrderData &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIPaymentMethodsRequest::is_order_Set() const{
    return m_order_isSet;
}

bool OAIPaymentMethodsRequest::is_order_Valid() const{
    return m_order_isValid;
}

QString OAIPaymentMethodsRequest::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIPaymentMethodsRequest::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIPaymentMethodsRequest::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIPaymentMethodsRequest::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

QString OAIPaymentMethodsRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPaymentMethodsRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPaymentMethodsRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPaymentMethodsRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAIPaymentMethodsRequest::isSplitCardFundingSources() const {
    return m_split_card_funding_sources;
}
void OAIPaymentMethodsRequest::setSplitCardFundingSources(const bool &split_card_funding_sources) {
    m_split_card_funding_sources = split_card_funding_sources;
    m_split_card_funding_sources_isSet = true;
}

bool OAIPaymentMethodsRequest::is_split_card_funding_sources_Set() const{
    return m_split_card_funding_sources_isSet;
}

bool OAIPaymentMethodsRequest::is_split_card_funding_sources_Valid() const{
    return m_split_card_funding_sources_isValid;
}

QString OAIPaymentMethodsRequest::getStore() const {
    return m_store;
}
void OAIPaymentMethodsRequest::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIPaymentMethodsRequest::is_store_Set() const{
    return m_store_isSet;
}

bool OAIPaymentMethodsRequest::is_store_Valid() const{
    return m_store_isValid;
}

bool OAIPaymentMethodsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blocked_payment_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_card_funding_sources_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentMethodsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_account_isValid && true;
}

} // namespace OpenAPI
