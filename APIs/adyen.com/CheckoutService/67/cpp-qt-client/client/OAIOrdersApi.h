/**
 * Adyen Checkout API
 * Adyen Checkout API provides a simple and flexible way to initiate and authorise online payments. You can use the same integration for payments made with cards (including 3D Secure), mobile wallets, and local payment methods (for example, iDEAL and Sofort).  This API reference provides information on available endpoints and how to interact with them. To learn more about the API, visit [online payments documentation](https://docs.adyen.com/online-payments).  ## Authentication Each request to Checkout API must be signed with an API key. For this, [get your API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key) from your Customer Area, and set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ``` ## Versioning Checkout API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://checkout-test.adyen.com/v67/payments ```  ## Going live  To access the live endpoints, you need an API key from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account, for example: ``` https://{PREFIX}-checkout-live.adyenpayments.com/checkout/v67/payments ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.  When preparing to do live transactions with Checkout API, follow the [go-live checklist](https://docs.adyen.com/online-payments/go-live-checklist) to make sure you've got all the required configuration in place.  ## Release notes Have a look at the [release notes](https://docs.adyen.com/online-payments/release-notes?integration_type=api&version=67) to find out what changed in this version!
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrdersApi_H
#define OAI_OAIOrdersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBalanceCheckRequest.h"
#include "OAIBalanceCheckResponse.h"
#include "OAICancelOrderRequest.h"
#include "OAICancelOrderResponse.h"
#include "OAICreateOrderRequest.h"
#include "OAICreateOrderResponse.h"
#include "OAIServiceError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrdersApi : public QObject {
    Q_OBJECT

public:
    OAIOrdersApi(const int timeOut = 0);
    ~OAIOrdersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_create_order_request OAICreateOrderRequest [optional]
    */
    virtual void postOrders(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICreateOrderRequest> &oai_create_order_request = ::OpenAPI::OptionalParam<OAICreateOrderRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_cancel_order_request OAICancelOrderRequest [optional]
    */
    virtual void postOrdersCancel(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICancelOrderRequest> &oai_cancel_order_request = ::OpenAPI::OptionalParam<OAICancelOrderRequest>());

    /**
    * @param[in]  idempotency_key QString [optional]
    * @param[in]  oai_balance_check_request OAIBalanceCheckRequest [optional]
    */
    virtual void postPaymentMethodsBalance(const ::OpenAPI::OptionalParam<QString> &idempotency_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBalanceCheckRequest> &oai_balance_check_request = ::OpenAPI::OptionalParam<OAIBalanceCheckRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postOrdersCallback(OAIHttpRequestWorker *worker);
    void postOrdersCancelCallback(OAIHttpRequestWorker *worker);
    void postPaymentMethodsBalanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postOrdersSignal(OAICreateOrderResponse summary);
    void postOrdersCancelSignal(OAICancelOrderResponse summary);
    void postPaymentMethodsBalanceSignal(OAIBalanceCheckResponse summary);


    void postOrdersSignalFull(OAIHttpRequestWorker *worker, OAICreateOrderResponse summary);
    void postOrdersCancelSignalFull(OAIHttpRequestWorker *worker, OAICancelOrderResponse summary);
    void postPaymentMethodsBalanceSignalFull(OAIHttpRequestWorker *worker, OAIBalanceCheckResponse summary);

    Q_DECL_DEPRECATED_X("Use postOrdersSignalError() instead")
    void postOrdersSignalE(OAICreateOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrdersSignalError(OAICreateOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrdersCancelSignalError() instead")
    void postOrdersCancelSignalE(OAICancelOrderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrdersCancelSignalError(OAICancelOrderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentMethodsBalanceSignalError() instead")
    void postPaymentMethodsBalanceSignalE(OAIBalanceCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentMethodsBalanceSignalError(OAIBalanceCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postOrdersSignalErrorFull() instead")
    void postOrdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postOrdersCancelSignalErrorFull() instead")
    void postOrdersCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postOrdersCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPaymentMethodsBalanceSignalErrorFull() instead")
    void postPaymentMethodsBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPaymentMethodsBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
