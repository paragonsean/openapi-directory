/**
 * Report webhooks
 * Adyen sends webhooks to inform your system that reports were generated and are ready to be downloaded.  You can download reports programmatically by making an HTTP GET request, or manually from your [Balance Platform Customer Area](https://balanceplatform-test.adyen.com/balanceplatform).
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportNotificationRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportNotificationRequest::OAIReportNotificationRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportNotificationRequest::OAIReportNotificationRequest() {
    this->initializeModel();
}

OAIReportNotificationRequest::~OAIReportNotificationRequest() {}

void OAIReportNotificationRequest::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_environment_isSet = false;
    m_environment_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReportNotificationRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportNotificationRequest::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_environment_isValid = ::OpenAPI::fromJsonValue(m_environment, json[QString("environment")]);
    m_environment_isSet = !json[QString("environment")].isNull() && m_environment_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIReportNotificationRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportNotificationRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_environment_isSet) {
        obj.insert(QString("environment"), ::OpenAPI::toJsonValue(m_environment));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIReportNotificationData OAIReportNotificationRequest::getData() const {
    return m_data;
}
void OAIReportNotificationRequest::setData(const OAIReportNotificationData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIReportNotificationRequest::is_data_Set() const{
    return m_data_isSet;
}

bool OAIReportNotificationRequest::is_data_Valid() const{
    return m_data_isValid;
}

QString OAIReportNotificationRequest::getEnvironment() const {
    return m_environment;
}
void OAIReportNotificationRequest::setEnvironment(const QString &environment) {
    m_environment = environment;
    m_environment_isSet = true;
}

bool OAIReportNotificationRequest::is_environment_Set() const{
    return m_environment_isSet;
}

bool OAIReportNotificationRequest::is_environment_Valid() const{
    return m_environment_isValid;
}

QString OAIReportNotificationRequest::getType() const {
    return m_type;
}
void OAIReportNotificationRequest::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReportNotificationRequest::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReportNotificationRequest::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReportNotificationRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportNotificationRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_isValid && m_environment_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
