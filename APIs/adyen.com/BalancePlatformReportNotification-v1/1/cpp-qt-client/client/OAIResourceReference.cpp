/**
 * Report webhooks
 * Adyen sends webhooks to inform your system that reports were generated and are ready to be downloaded.  You can download reports programmatically by making an HTTP GET request, or manually from your [Balance Platform Customer Area](https://balanceplatform-test.adyen.com/balanceplatform).
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceReference::OAIResourceReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceReference::OAIResourceReference() {
    this->initializeModel();
}

OAIResourceReference::~OAIResourceReference() {}

void OAIResourceReference::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;
}

void OAIResourceReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceReference::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;
}

QString OAIResourceReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceReference::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    return obj;
}

QString OAIResourceReference::getDescription() const {
    return m_description;
}
void OAIResourceReference::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIResourceReference::is_description_Set() const{
    return m_description_isSet;
}

bool OAIResourceReference::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIResourceReference::getId() const {
    return m_id;
}
void OAIResourceReference::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIResourceReference::is_id_Set() const{
    return m_id_isSet;
}

bool OAIResourceReference::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIResourceReference::getReference() const {
    return m_reference;
}
void OAIResourceReference::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIResourceReference::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIResourceReference::is_reference_Valid() const{
    return m_reference_isValid;
}

bool OAIResourceReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
