/**
 * Report webhooks
 * Adyen sends webhooks to inform your system that reports were generated and are ready to be downloaded.  You can download reports programmatically by making an HTTP GET request, or manually from your [Balance Platform Customer Area](https://balanceplatform-test.adyen.com/balanceplatform).
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportNotificationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportNotificationData::OAIReportNotificationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportNotificationData::OAIReportNotificationData() {
    this->initializeModel();
}

OAIReportNotificationData::~OAIReportNotificationData() {}

void OAIReportNotificationData::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_balance_account_isSet = false;
    m_balance_account_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_report_type_isSet = false;
    m_report_type_isValid = false;
}

void OAIReportNotificationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportNotificationData::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_balance_account_isValid = ::OpenAPI::fromJsonValue(m_balance_account, json[QString("balanceAccount")]);
    m_balance_account_isSet = !json[QString("balanceAccount")].isNull() && m_balance_account_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_report_type_isValid = ::OpenAPI::fromJsonValue(m_report_type, json[QString("reportType")]);
    m_report_type_isSet = !json[QString("reportType")].isNull() && m_report_type_isValid;
}

QString OAIReportNotificationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportNotificationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_balance_account.isSet()) {
        obj.insert(QString("balanceAccount"), ::OpenAPI::toJsonValue(m_balance_account));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_report_type_isSet) {
        obj.insert(QString("reportType"), ::OpenAPI::toJsonValue(m_report_type));
    }
    return obj;
}

OAIResourceReference OAIReportNotificationData::getAccountHolder() const {
    return m_account_holder;
}
void OAIReportNotificationData::setAccountHolder(const OAIResourceReference &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAIReportNotificationData::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAIReportNotificationData::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

OAIResourceReference OAIReportNotificationData::getBalanceAccount() const {
    return m_balance_account;
}
void OAIReportNotificationData::setBalanceAccount(const OAIResourceReference &balance_account) {
    m_balance_account = balance_account;
    m_balance_account_isSet = true;
}

bool OAIReportNotificationData::is_balance_account_Set() const{
    return m_balance_account_isSet;
}

bool OAIReportNotificationData::is_balance_account_Valid() const{
    return m_balance_account_isValid;
}

QString OAIReportNotificationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIReportNotificationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIReportNotificationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIReportNotificationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

QDateTime OAIReportNotificationData::getCreationDate() const {
    return m_creation_date;
}
void OAIReportNotificationData::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIReportNotificationData::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIReportNotificationData::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIReportNotificationData::getDownloadUrl() const {
    return m_download_url;
}
void OAIReportNotificationData::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIReportNotificationData::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIReportNotificationData::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QString OAIReportNotificationData::getFileName() const {
    return m_file_name;
}
void OAIReportNotificationData::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIReportNotificationData::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIReportNotificationData::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIReportNotificationData::getReportType() const {
    return m_report_type;
}
void OAIReportNotificationData::setReportType(const QString &report_type) {
    m_report_type = report_type;
    m_report_type_isSet = true;
}

bool OAIReportNotificationData::is_report_type_Set() const{
    return m_report_type_isSet;
}

bool OAIReportNotificationData::is_report_type_Valid() const{
    return m_report_type_isValid;
}

bool OAIReportNotificationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_report_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportNotificationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_download_url_isValid && m_file_name_isValid && m_report_type_isValid && true;
}

} // namespace OpenAPI
