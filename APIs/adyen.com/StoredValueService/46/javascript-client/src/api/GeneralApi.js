/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServiceError from '../model/ServiceError';
import StoredValueBalanceCheckRequest from '../model/StoredValueBalanceCheckRequest';
import StoredValueBalanceCheckResponse from '../model/StoredValueBalanceCheckResponse';
import StoredValueBalanceMergeRequest from '../model/StoredValueBalanceMergeRequest';
import StoredValueBalanceMergeResponse from '../model/StoredValueBalanceMergeResponse';
import StoredValueIssueRequest from '../model/StoredValueIssueRequest';
import StoredValueIssueResponse from '../model/StoredValueIssueResponse';
import StoredValueLoadRequest from '../model/StoredValueLoadRequest';
import StoredValueLoadResponse from '../model/StoredValueLoadResponse';
import StoredValueStatusChangeRequest from '../model/StoredValueStatusChangeRequest';
import StoredValueStatusChangeResponse from '../model/StoredValueStatusChangeResponse';
import StoredValueVoidRequest from '../model/StoredValueVoidRequest';
import StoredValueVoidResponse from '../model/StoredValueVoidResponse';

/**
* General service.
* @module api/GeneralApi
* @version 46
*/
export default class GeneralApi {

    /**
    * Constructs a new GeneralApi. 
    * @alias module:api/GeneralApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postChangeStatus operation.
     * @callback module:api/GeneralApi~postChangeStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueStatusChangeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Changes the status of the payment method.
     * Changes the status of the provided payment method to the specified status.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueStatusChangeRequest} [storedValueStatusChangeRequest] 
     * @param {module:api/GeneralApi~postChangeStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueStatusChangeResponse}
     */
    postChangeStatus(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueStatusChangeRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueStatusChangeResponse;
      return this.apiClient.callApi(
        '/changeStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCheckBalance operation.
     * @callback module:api/GeneralApi~postCheckBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueBalanceCheckResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the balance.
     * Checks the balance of the provided payment method.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueBalanceCheckRequest} [storedValueBalanceCheckRequest] 
     * @param {module:api/GeneralApi~postCheckBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueBalanceCheckResponse}
     */
    postCheckBalance(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueBalanceCheckRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueBalanceCheckResponse;
      return this.apiClient.callApi(
        '/checkBalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postIssue operation.
     * @callback module:api/GeneralApi~postIssueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueIssueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Issues a new card.
     * Issues a new card of the given payment method.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueIssueRequest} [storedValueIssueRequest] 
     * @param {module:api/GeneralApi~postIssueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueIssueResponse}
     */
    postIssue(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueIssueRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueIssueResponse;
      return this.apiClient.callApi(
        '/issue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postLoad operation.
     * @callback module:api/GeneralApi~postLoadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueLoadResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads the payment method.
     * Loads the payment method with the specified funds.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueLoadRequest} [storedValueLoadRequest] 
     * @param {module:api/GeneralApi~postLoadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueLoadResponse}
     */
    postLoad(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueLoadRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueLoadResponse;
      return this.apiClient.callApi(
        '/load', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postMergeBalance operation.
     * @callback module:api/GeneralApi~postMergeBalanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueBalanceMergeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Merge the balance of two cards.
     * Increases the balance of the paymentmethod by the full amount left on the source paymentmethod
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueBalanceMergeRequest} [storedValueBalanceMergeRequest] 
     * @param {module:api/GeneralApi~postMergeBalanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueBalanceMergeResponse}
     */
    postMergeBalance(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueBalanceMergeRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueBalanceMergeResponse;
      return this.apiClient.callApi(
        '/mergeBalance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVoidTransaction operation.
     * @callback module:api/GeneralApi~postVoidTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueVoidResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Voids a transaction.
     * Voids the referenced stored value transaction.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueVoidRequest} [storedValueVoidRequest] 
     * @param {module:api/GeneralApi~postVoidTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueVoidResponse}
     */
    postVoidTransaction(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueVoidRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueVoidResponse;
      return this.apiClient.callApi(
        '/voidTransaction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
