/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The StoredValueIssueResponse model module.
 * @module model/StoredValueIssueResponse
 * @version 46
 */
class StoredValueIssueResponse {
    /**
     * Constructs a new <code>StoredValueIssueResponse</code>.
     * @alias module:model/StoredValueIssueResponse
     */
    constructor() { 
        
        StoredValueIssueResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StoredValueIssueResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredValueIssueResponse} obj Optional instance to populate.
     * @return {module:model/StoredValueIssueResponse} The populated <code>StoredValueIssueResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredValueIssueResponse();

            if (data.hasOwnProperty('authCode')) {
                obj['authCode'] = ApiClient.convertToType(data['authCode'], 'String');
            }
            if (data.hasOwnProperty('currentBalance')) {
                obj['currentBalance'] = Amount.constructFromObject(data['currentBalance']);
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], {'String': 'String'});
            }
            if (data.hasOwnProperty('pspReference')) {
                obj['pspReference'] = ApiClient.convertToType(data['pspReference'], 'String');
            }
            if (data.hasOwnProperty('refusalReason')) {
                obj['refusalReason'] = ApiClient.convertToType(data['refusalReason'], 'String');
            }
            if (data.hasOwnProperty('resultCode')) {
                obj['resultCode'] = ApiClient.convertToType(data['resultCode'], 'String');
            }
            if (data.hasOwnProperty('thirdPartyRefusalReason')) {
                obj['thirdPartyRefusalReason'] = ApiClient.convertToType(data['thirdPartyRefusalReason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredValueIssueResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredValueIssueResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authCode'] && !(typeof data['authCode'] === 'string' || data['authCode'] instanceof String)) {
            throw new Error("Expected the field `authCode` to be a primitive type in the JSON string but got " + data['authCode']);
        }
        // validate the optional field `currentBalance`
        if (data['currentBalance']) { // data not null
          Amount.validateJSON(data['currentBalance']);
        }
        // ensure the json data is a string
        if (data['pspReference'] && !(typeof data['pspReference'] === 'string' || data['pspReference'] instanceof String)) {
            throw new Error("Expected the field `pspReference` to be a primitive type in the JSON string but got " + data['pspReference']);
        }
        // ensure the json data is a string
        if (data['refusalReason'] && !(typeof data['refusalReason'] === 'string' || data['refusalReason'] instanceof String)) {
            throw new Error("Expected the field `refusalReason` to be a primitive type in the JSON string but got " + data['refusalReason']);
        }
        // ensure the json data is a string
        if (data['resultCode'] && !(typeof data['resultCode'] === 'string' || data['resultCode'] instanceof String)) {
            throw new Error("Expected the field `resultCode` to be a primitive type in the JSON string but got " + data['resultCode']);
        }
        // ensure the json data is a string
        if (data['thirdPartyRefusalReason'] && !(typeof data['thirdPartyRefusalReason'] === 'string' || data['thirdPartyRefusalReason'] instanceof String)) {
            throw new Error("Expected the field `thirdPartyRefusalReason` to be a primitive type in the JSON string but got " + data['thirdPartyRefusalReason']);
        }

        return true;
    }


}



/**
 * Authorisation code: * When the payment is authorised, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.
 * @member {String} authCode
 */
StoredValueIssueResponse.prototype['authCode'] = undefined;

/**
 * The balance currently on the payment method.
 * @member {module:model/Amount} currentBalance
 */
StoredValueIssueResponse.prototype['currentBalance'] = undefined;

/**
 * The collection that contains the type of the payment method and its specific information if available
 * @member {Object.<String, String>} paymentMethod
 */
StoredValueIssueResponse.prototype['paymentMethod'] = undefined;

/**
 * Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.
 * @member {String} pspReference
 */
StoredValueIssueResponse.prototype['pspReference'] = undefined;

/**
 * If the transaction is refused or an error occurs, this field holds Adyen's mapped reason for the refusal or a description of the error.  When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.
 * @member {String} refusalReason
 */
StoredValueIssueResponse.prototype['refusalReason'] = undefined;

/**
 * The result of the payment. Possible values:  * **Success** – The operation has been completed successfully.  * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.  * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.  * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.  
 * @member {module:model/StoredValueIssueResponse.ResultCodeEnum} resultCode
 */
StoredValueIssueResponse.prototype['resultCode'] = undefined;

/**
 * Raw refusal reason received from the third party, where available
 * @member {String} thirdPartyRefusalReason
 */
StoredValueIssueResponse.prototype['thirdPartyRefusalReason'] = undefined;





/**
 * Allowed values for the <code>resultCode</code> property.
 * @enum {String}
 * @readonly
 */
StoredValueIssueResponse['ResultCodeEnum'] = {

    /**
     * value: "Success"
     * @const
     */
    "Success": "Success",

    /**
     * value: "Refused"
     * @const
     */
    "Refused": "Refused",

    /**
     * value: "Error"
     * @const
     */
    "Error": "Error",

    /**
     * value: "NotEnoughBalance"
     * @const
     */
    "NotEnoughBalance": "NotEnoughBalance"
};



export default StoredValueIssueResponse;

