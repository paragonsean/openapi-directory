/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The StoredValueLoadRequest model module.
 * @module model/StoredValueLoadRequest
 * @version 46
 */
class StoredValueLoadRequest {
    /**
     * Constructs a new <code>StoredValueLoadRequest</code>.
     * @alias module:model/StoredValueLoadRequest
     * @param amount {module:model/Amount} The amount information for the transaction.
     * @param merchantAccount {String} The merchant account identifier, with which you want to process the transaction.
     * @param paymentMethod {Object.<String, String>} The collection that contains the type of the payment method and its specific information if available
     * @param reference {String} The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
     */
    constructor(amount, merchantAccount, paymentMethod, reference) { 
        
        StoredValueLoadRequest.initialize(this, amount, merchantAccount, paymentMethod, reference);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount, paymentMethod, reference) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
        obj['paymentMethod'] = paymentMethod;
        obj['reference'] = reference;
    }

    /**
     * Constructs a <code>StoredValueLoadRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredValueLoadRequest} obj Optional instance to populate.
     * @return {module:model/StoredValueLoadRequest} The populated <code>StoredValueLoadRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredValueLoadRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('loadType')) {
                obj['loadType'] = ApiClient.convertToType(data['loadType'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], {'String': 'String'});
            }
            if (data.hasOwnProperty('recurringDetailReference')) {
                obj['recurringDetailReference'] = ApiClient.convertToType(data['recurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredValueLoadRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredValueLoadRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoredValueLoadRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['loadType'] && !(typeof data['loadType'] === 'string' || data['loadType'] instanceof String)) {
            throw new Error("Expected the field `loadType` to be a primitive type in the JSON string but got " + data['loadType']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['recurringDetailReference'] && !(typeof data['recurringDetailReference'] === 'string' || data['recurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `recurringDetailReference` to be a primitive type in the JSON string but got " + data['recurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }

        return true;
    }


}

StoredValueLoadRequest.RequiredProperties = ["amount", "merchantAccount", "paymentMethod", "reference"];

/**
 * The amount information for the transaction.
 * @member {module:model/Amount} amount
 */
StoredValueLoadRequest.prototype['amount'] = undefined;

/**
 * The type of load you are trying to do, when absent we default to 'Load'
 * @member {module:model/StoredValueLoadRequest.LoadTypeEnum} loadType
 */
StoredValueLoadRequest.prototype['loadType'] = undefined;

/**
 * The merchant account identifier, with which you want to process the transaction.
 * @member {String} merchantAccount
 */
StoredValueLoadRequest.prototype['merchantAccount'] = undefined;

/**
 * The collection that contains the type of the payment method and its specific information if available
 * @member {Object.<String, String>} paymentMethod
 */
StoredValueLoadRequest.prototype['paymentMethod'] = undefined;

/**
 * @member {String} recurringDetailReference
 */
StoredValueLoadRequest.prototype['recurringDetailReference'] = undefined;

/**
 * The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.
 * @member {String} reference
 */
StoredValueLoadRequest.prototype['reference'] = undefined;

/**
 * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @member {module:model/StoredValueLoadRequest.ShopperInteractionEnum} shopperInteraction
 */
StoredValueLoadRequest.prototype['shopperInteraction'] = undefined;

/**
 * @member {String} shopperReference
 */
StoredValueLoadRequest.prototype['shopperReference'] = undefined;

/**
 * The physical store, for which this payment is processed.
 * @member {String} store
 */
StoredValueLoadRequest.prototype['store'] = undefined;





/**
 * Allowed values for the <code>loadType</code> property.
 * @enum {String}
 * @readonly
 */
StoredValueLoadRequest['LoadTypeEnum'] = {

    /**
     * value: "merchandiseReturn"
     * @const
     */
    "merchandiseReturn": "merchandiseReturn",

    /**
     * value: "load"
     * @const
     */
    "load": "load"
};


/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
StoredValueLoadRequest['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};



export default StoredValueLoadRequest;

