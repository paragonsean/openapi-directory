/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIServiceError.h"
#include "OAIStoredValueBalanceCheckRequest.h"
#include "OAIStoredValueBalanceCheckResponse.h"
#include "OAIStoredValueBalanceMergeRequest.h"
#include "OAIStoredValueBalanceMergeResponse.h"
#include "OAIStoredValueIssueRequest.h"
#include "OAIStoredValueIssueResponse.h"
#include "OAIStoredValueLoadRequest.h"
#include "OAIStoredValueLoadResponse.h"
#include "OAIStoredValueStatusChangeRequest.h"
#include "OAIStoredValueStatusChangeResponse.h"
#include "OAIStoredValueVoidRequest.h"
#include "OAIStoredValueVoidResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_stored_value_status_change_request OAIStoredValueStatusChangeRequest [optional]
    */
    virtual void postChangeStatus(const ::OpenAPI::OptionalParam<OAIStoredValueStatusChangeRequest> &oai_stored_value_status_change_request = ::OpenAPI::OptionalParam<OAIStoredValueStatusChangeRequest>());

    /**
    * @param[in]  oai_stored_value_balance_check_request OAIStoredValueBalanceCheckRequest [optional]
    */
    virtual void postCheckBalance(const ::OpenAPI::OptionalParam<OAIStoredValueBalanceCheckRequest> &oai_stored_value_balance_check_request = ::OpenAPI::OptionalParam<OAIStoredValueBalanceCheckRequest>());

    /**
    * @param[in]  oai_stored_value_issue_request OAIStoredValueIssueRequest [optional]
    */
    virtual void postIssue(const ::OpenAPI::OptionalParam<OAIStoredValueIssueRequest> &oai_stored_value_issue_request = ::OpenAPI::OptionalParam<OAIStoredValueIssueRequest>());

    /**
    * @param[in]  oai_stored_value_load_request OAIStoredValueLoadRequest [optional]
    */
    virtual void postLoad(const ::OpenAPI::OptionalParam<OAIStoredValueLoadRequest> &oai_stored_value_load_request = ::OpenAPI::OptionalParam<OAIStoredValueLoadRequest>());

    /**
    * @param[in]  oai_stored_value_balance_merge_request OAIStoredValueBalanceMergeRequest [optional]
    */
    virtual void postMergeBalance(const ::OpenAPI::OptionalParam<OAIStoredValueBalanceMergeRequest> &oai_stored_value_balance_merge_request = ::OpenAPI::OptionalParam<OAIStoredValueBalanceMergeRequest>());

    /**
    * @param[in]  oai_stored_value_void_request OAIStoredValueVoidRequest [optional]
    */
    virtual void postVoidTransaction(const ::OpenAPI::OptionalParam<OAIStoredValueVoidRequest> &oai_stored_value_void_request = ::OpenAPI::OptionalParam<OAIStoredValueVoidRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postChangeStatusCallback(OAIHttpRequestWorker *worker);
    void postCheckBalanceCallback(OAIHttpRequestWorker *worker);
    void postIssueCallback(OAIHttpRequestWorker *worker);
    void postLoadCallback(OAIHttpRequestWorker *worker);
    void postMergeBalanceCallback(OAIHttpRequestWorker *worker);
    void postVoidTransactionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postChangeStatusSignal(OAIStoredValueStatusChangeResponse summary);
    void postCheckBalanceSignal(OAIStoredValueBalanceCheckResponse summary);
    void postIssueSignal(OAIStoredValueIssueResponse summary);
    void postLoadSignal(OAIStoredValueLoadResponse summary);
    void postMergeBalanceSignal(OAIStoredValueBalanceMergeResponse summary);
    void postVoidTransactionSignal(OAIStoredValueVoidResponse summary);


    void postChangeStatusSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueStatusChangeResponse summary);
    void postCheckBalanceSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueBalanceCheckResponse summary);
    void postIssueSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueIssueResponse summary);
    void postLoadSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueLoadResponse summary);
    void postMergeBalanceSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueBalanceMergeResponse summary);
    void postVoidTransactionSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueVoidResponse summary);

    Q_DECL_DEPRECATED_X("Use postChangeStatusSignalError() instead")
    void postChangeStatusSignalE(OAIStoredValueStatusChangeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postChangeStatusSignalError(OAIStoredValueStatusChangeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCheckBalanceSignalError() instead")
    void postCheckBalanceSignalE(OAIStoredValueBalanceCheckResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCheckBalanceSignalError(OAIStoredValueBalanceCheckResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postIssueSignalError() instead")
    void postIssueSignalE(OAIStoredValueIssueResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postIssueSignalError(OAIStoredValueIssueResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLoadSignalError() instead")
    void postLoadSignalE(OAIStoredValueLoadResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postLoadSignalError(OAIStoredValueLoadResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMergeBalanceSignalError() instead")
    void postMergeBalanceSignalE(OAIStoredValueBalanceMergeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postMergeBalanceSignalError(OAIStoredValueBalanceMergeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVoidTransactionSignalError() instead")
    void postVoidTransactionSignalE(OAIStoredValueVoidResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postVoidTransactionSignalError(OAIStoredValueVoidResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postChangeStatusSignalErrorFull() instead")
    void postChangeStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postChangeStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCheckBalanceSignalErrorFull() instead")
    void postCheckBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCheckBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postIssueSignalErrorFull() instead")
    void postIssueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postIssueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postLoadSignalErrorFull() instead")
    void postLoadSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postLoadSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postMergeBalanceSignalErrorFull() instead")
    void postMergeBalanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postMergeBalanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVoidTransactionSignalErrorFull() instead")
    void postVoidTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVoidTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
