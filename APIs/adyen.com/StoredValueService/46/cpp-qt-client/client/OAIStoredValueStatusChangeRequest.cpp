/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredValueStatusChangeRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredValueStatusChangeRequest::OAIStoredValueStatusChangeRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredValueStatusChangeRequest::OAIStoredValueStatusChangeRequest() {
    this->initializeModel();
}

OAIStoredValueStatusChangeRequest::~OAIStoredValueStatusChangeRequest() {}

void OAIStoredValueStatusChangeRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;
}

void OAIStoredValueStatusChangeRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredValueStatusChangeRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;
}

QString OAIStoredValueStatusChangeRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredValueStatusChangeRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_payment_method.size() > 0) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    return obj;
}

OAIAmount OAIStoredValueStatusChangeRequest::getAmount() const {
    return m_amount;
}
void OAIStoredValueStatusChangeRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIStoredValueStatusChangeRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIStoredValueStatusChangeRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QMap<QString, QString> OAIStoredValueStatusChangeRequest::getPaymentMethod() const {
    return m_payment_method;
}
void OAIStoredValueStatusChangeRequest::setPaymentMethod(const QMap<QString, QString> &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIStoredValueStatusChangeRequest::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIStoredValueStatusChangeRequest::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIStoredValueStatusChangeRequest::getReference() const {
    return m_reference;
}
void OAIStoredValueStatusChangeRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIStoredValueStatusChangeRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIStoredValueStatusChangeRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIStoredValueStatusChangeRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIStoredValueStatusChangeRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIStoredValueStatusChangeRequest::getStatus() const {
    return m_status;
}
void OAIStoredValueStatusChangeRequest::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIStoredValueStatusChangeRequest::getStore() const {
    return m_store;
}
void OAIStoredValueStatusChangeRequest::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIStoredValueStatusChangeRequest::is_store_Set() const{
    return m_store_isSet;
}

bool OAIStoredValueStatusChangeRequest::is_store_Valid() const{
    return m_store_isValid;
}

bool OAIStoredValueStatusChangeRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredValueStatusChangeRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_account_isValid && m_payment_method_isValid && m_reference_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
