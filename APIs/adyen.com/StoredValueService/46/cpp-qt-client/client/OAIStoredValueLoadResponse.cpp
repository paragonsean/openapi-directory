/**
 * Adyen Stored Value API
 * A set of API endpoints to manage stored value products.
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredValueLoadResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredValueLoadResponse::OAIStoredValueLoadResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredValueLoadResponse::OAIStoredValueLoadResponse() {
    this->initializeModel();
}

OAIStoredValueLoadResponse::~OAIStoredValueLoadResponse() {}

void OAIStoredValueLoadResponse::initializeModel() {

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_third_party_refusal_reason_isSet = false;
    m_third_party_refusal_reason_isValid = false;
}

void OAIStoredValueLoadResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredValueLoadResponse::fromJsonObject(QJsonObject json) {

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("currentBalance")]);
    m_current_balance_isSet = !json[QString("currentBalance")].isNull() && m_current_balance_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_third_party_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_third_party_refusal_reason, json[QString("thirdPartyRefusalReason")]);
    m_third_party_refusal_reason_isSet = !json[QString("thirdPartyRefusalReason")].isNull() && m_third_party_refusal_reason_isValid;
}

QString OAIStoredValueLoadResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredValueLoadResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_current_balance.isSet()) {
        obj.insert(QString("currentBalance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_third_party_refusal_reason_isSet) {
        obj.insert(QString("thirdPartyRefusalReason"), ::OpenAPI::toJsonValue(m_third_party_refusal_reason));
    }
    return obj;
}

QString OAIStoredValueLoadResponse::getAuthCode() const {
    return m_auth_code;
}
void OAIStoredValueLoadResponse::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIStoredValueLoadResponse::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIStoredValueLoadResponse::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAIAmount OAIStoredValueLoadResponse::getCurrentBalance() const {
    return m_current_balance;
}
void OAIStoredValueLoadResponse::setCurrentBalance(const OAIAmount &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIStoredValueLoadResponse::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIStoredValueLoadResponse::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

QString OAIStoredValueLoadResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIStoredValueLoadResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIStoredValueLoadResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIStoredValueLoadResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIStoredValueLoadResponse::getRefusalReason() const {
    return m_refusal_reason;
}
void OAIStoredValueLoadResponse::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAIStoredValueLoadResponse::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAIStoredValueLoadResponse::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

QString OAIStoredValueLoadResponse::getResultCode() const {
    return m_result_code;
}
void OAIStoredValueLoadResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIStoredValueLoadResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIStoredValueLoadResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAIStoredValueLoadResponse::getThirdPartyRefusalReason() const {
    return m_third_party_refusal_reason;
}
void OAIStoredValueLoadResponse::setThirdPartyRefusalReason(const QString &third_party_refusal_reason) {
    m_third_party_refusal_reason = third_party_refusal_reason;
    m_third_party_refusal_reason_isSet = true;
}

bool OAIStoredValueLoadResponse::is_third_party_refusal_reason_Set() const{
    return m_third_party_refusal_reason_isSet;
}

bool OAIStoredValueLoadResponse::is_third_party_refusal_reason_Valid() const{
    return m_third_party_refusal_reason_isValid;
}

bool OAIStoredValueLoadResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredValueLoadResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
