# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class StoredValueStatusChangeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_code: str=None, current_balance: Amount=None, psp_reference: str=None, refusal_reason: str=None, result_code: str=None, third_party_refusal_reason: str=None):
        """StoredValueStatusChangeResponse - a model defined in OpenAPI

        :param auth_code: The auth_code of this StoredValueStatusChangeResponse.
        :param current_balance: The current_balance of this StoredValueStatusChangeResponse.
        :param psp_reference: The psp_reference of this StoredValueStatusChangeResponse.
        :param refusal_reason: The refusal_reason of this StoredValueStatusChangeResponse.
        :param result_code: The result_code of this StoredValueStatusChangeResponse.
        :param third_party_refusal_reason: The third_party_refusal_reason of this StoredValueStatusChangeResponse.
        """
        self.openapi_types = {
            'auth_code': str,
            'current_balance': Amount,
            'psp_reference': str,
            'refusal_reason': str,
            'result_code': str,
            'third_party_refusal_reason': str
        }

        self.attribute_map = {
            'auth_code': 'authCode',
            'current_balance': 'currentBalance',
            'psp_reference': 'pspReference',
            'refusal_reason': 'refusalReason',
            'result_code': 'resultCode',
            'third_party_refusal_reason': 'thirdPartyRefusalReason'
        }

        self._auth_code = auth_code
        self._current_balance = current_balance
        self._psp_reference = psp_reference
        self._refusal_reason = refusal_reason
        self._result_code = result_code
        self._third_party_refusal_reason = third_party_refusal_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueStatusChangeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueStatusChangeResponse of this StoredValueStatusChangeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_code(self):
        """Gets the auth_code of this StoredValueStatusChangeResponse.

        Authorisation code: * When the payment is authorised, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.

        :return: The auth_code of this StoredValueStatusChangeResponse.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this StoredValueStatusChangeResponse.

        Authorisation code: * When the payment is authorised, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.

        :param auth_code: The auth_code of this StoredValueStatusChangeResponse.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def current_balance(self):
        """Gets the current_balance of this StoredValueStatusChangeResponse.

        The balance currently on the payment method.

        :return: The current_balance of this StoredValueStatusChangeResponse.
        :rtype: Amount
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this StoredValueStatusChangeResponse.

        The balance currently on the payment method.

        :param current_balance: The current_balance of this StoredValueStatusChangeResponse.
        :type current_balance: Amount
        """

        self._current_balance = current_balance

    @property
    def psp_reference(self):
        """Gets the psp_reference of this StoredValueStatusChangeResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this StoredValueStatusChangeResponse.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this StoredValueStatusChangeResponse.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this StoredValueStatusChangeResponse.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this StoredValueStatusChangeResponse.

        If the transaction is refused or an error occurs, this field holds Adyen's mapped reason for the refusal or a description of the error.  When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.

        :return: The refusal_reason of this StoredValueStatusChangeResponse.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this StoredValueStatusChangeResponse.

        If the transaction is refused or an error occurs, this field holds Adyen's mapped reason for the refusal or a description of the error.  When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.

        :param refusal_reason: The refusal_reason of this StoredValueStatusChangeResponse.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def result_code(self):
        """Gets the result_code of this StoredValueStatusChangeResponse.

        The result of the payment. Possible values:  * **Success** – The operation has been completed successfully.  * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.  * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.  * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.  

        :return: The result_code of this StoredValueStatusChangeResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this StoredValueStatusChangeResponse.

        The result of the payment. Possible values:  * **Success** – The operation has been completed successfully.  * **Refused** – The operation was refused. The reason is given in the `refusalReason` field.  * **Error** – There was an error when the operation was processed. The reason is given in the `refusalReason` field.  * **NotEnoughBalance** – The amount on the payment method is lower than the amount given in the request. Only applicable to balance checks.  

        :param result_code: The result_code of this StoredValueStatusChangeResponse.
        :type result_code: str
        """
        allowed_values = ["Success", "Refused", "Error", "NotEnoughBalance"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code

    @property
    def third_party_refusal_reason(self):
        """Gets the third_party_refusal_reason of this StoredValueStatusChangeResponse.

        Raw refusal reason received from the third party, where available

        :return: The third_party_refusal_reason of this StoredValueStatusChangeResponse.
        :rtype: str
        """
        return self._third_party_refusal_reason

    @third_party_refusal_reason.setter
    def third_party_refusal_reason(self, third_party_refusal_reason):
        """Sets the third_party_refusal_reason of this StoredValueStatusChangeResponse.

        Raw refusal reason received from the third party, where available

        :param third_party_refusal_reason: The third_party_refusal_reason of this StoredValueStatusChangeResponse.
        :type third_party_refusal_reason: str
        """

        self._third_party_refusal_reason = third_party_refusal_reason
