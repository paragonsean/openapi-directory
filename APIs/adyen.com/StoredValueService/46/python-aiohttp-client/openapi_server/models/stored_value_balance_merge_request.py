# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class StoredValueBalanceMergeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, merchant_account: str=None, payment_method: Dict[str, str]=None, recurring_detail_reference: str=None, reference: str=None, shopper_interaction: str=None, shopper_reference: str=None, source_payment_method: Dict[str, str]=None, store: str=None):
        """StoredValueBalanceMergeRequest - a model defined in OpenAPI

        :param amount: The amount of this StoredValueBalanceMergeRequest.
        :param merchant_account: The merchant_account of this StoredValueBalanceMergeRequest.
        :param payment_method: The payment_method of this StoredValueBalanceMergeRequest.
        :param recurring_detail_reference: The recurring_detail_reference of this StoredValueBalanceMergeRequest.
        :param reference: The reference of this StoredValueBalanceMergeRequest.
        :param shopper_interaction: The shopper_interaction of this StoredValueBalanceMergeRequest.
        :param shopper_reference: The shopper_reference of this StoredValueBalanceMergeRequest.
        :param source_payment_method: The source_payment_method of this StoredValueBalanceMergeRequest.
        :param store: The store of this StoredValueBalanceMergeRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'merchant_account': str,
            'payment_method': Dict[str, str],
            'recurring_detail_reference': str,
            'reference': str,
            'shopper_interaction': str,
            'shopper_reference': str,
            'source_payment_method': Dict[str, str],
            'store': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'merchant_account': 'merchantAccount',
            'payment_method': 'paymentMethod',
            'recurring_detail_reference': 'recurringDetailReference',
            'reference': 'reference',
            'shopper_interaction': 'shopperInteraction',
            'shopper_reference': 'shopperReference',
            'source_payment_method': 'sourcePaymentMethod',
            'store': 'store'
        }

        self._amount = amount
        self._merchant_account = merchant_account
        self._payment_method = payment_method
        self._recurring_detail_reference = recurring_detail_reference
        self._reference = reference
        self._shopper_interaction = shopper_interaction
        self._shopper_reference = shopper_reference
        self._source_payment_method = source_payment_method
        self._store = store

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueBalanceMergeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueBalanceMergeRequest of this StoredValueBalanceMergeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this StoredValueBalanceMergeRequest.

        The amount information for the transaction.

        :return: The amount of this StoredValueBalanceMergeRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this StoredValueBalanceMergeRequest.

        The amount information for the transaction.

        :param amount: The amount of this StoredValueBalanceMergeRequest.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def merchant_account(self):
        """Gets the merchant_account of this StoredValueBalanceMergeRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this StoredValueBalanceMergeRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this StoredValueBalanceMergeRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def payment_method(self):
        """Gets the payment_method of this StoredValueBalanceMergeRequest.

        The collection that contains the type of the payment method and its specific information if available

        :return: The payment_method of this StoredValueBalanceMergeRequest.
        :rtype: Dict[str, str]
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this StoredValueBalanceMergeRequest.

        The collection that contains the type of the payment method and its specific information if available

        :param payment_method: The payment_method of this StoredValueBalanceMergeRequest.
        :type payment_method: Dict[str, str]
        """
        if payment_method is None:
            raise ValueError("Invalid value for `payment_method`, must not be `None`")

        self._payment_method = payment_method

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this StoredValueBalanceMergeRequest.


        :return: The recurring_detail_reference of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this StoredValueBalanceMergeRequest.


        :param recurring_detail_reference: The recurring_detail_reference of this StoredValueBalanceMergeRequest.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def reference(self):
        """Gets the reference of this StoredValueBalanceMergeRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this StoredValueBalanceMergeRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this StoredValueBalanceMergeRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this StoredValueBalanceMergeRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this StoredValueBalanceMergeRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this StoredValueBalanceMergeRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this StoredValueBalanceMergeRequest.


        :return: The shopper_reference of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this StoredValueBalanceMergeRequest.


        :param shopper_reference: The shopper_reference of this StoredValueBalanceMergeRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def source_payment_method(self):
        """Gets the source_payment_method of this StoredValueBalanceMergeRequest.

        The collection that contains the source payment method and its specific information if available. Note that type should not be included since it is inferred from the (target) payment method

        :return: The source_payment_method of this StoredValueBalanceMergeRequest.
        :rtype: Dict[str, str]
        """
        return self._source_payment_method

    @source_payment_method.setter
    def source_payment_method(self, source_payment_method):
        """Sets the source_payment_method of this StoredValueBalanceMergeRequest.

        The collection that contains the source payment method and its specific information if available. Note that type should not be included since it is inferred from the (target) payment method

        :param source_payment_method: The source_payment_method of this StoredValueBalanceMergeRequest.
        :type source_payment_method: Dict[str, str]
        """
        if source_payment_method is None:
            raise ValueError("Invalid value for `source_payment_method`, must not be `None`")

        self._source_payment_method = source_payment_method

    @property
    def store(self):
        """Gets the store of this StoredValueBalanceMergeRequest.

        The physical store, for which this payment is processed.

        :return: The store of this StoredValueBalanceMergeRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this StoredValueBalanceMergeRequest.

        The physical store, for which this payment is processed.

        :param store: The store of this StoredValueBalanceMergeRequest.
        :type store: str
        """
        if store is not None and len(store) > 16:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `16`")
        if store is not None and len(store) < 1:
            raise ValueError("Invalid value for `store`, length must be greater than or equal to `1`")

        self._store = store
