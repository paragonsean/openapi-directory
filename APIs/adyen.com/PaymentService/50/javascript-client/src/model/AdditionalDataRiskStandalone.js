/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v50/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v50/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalDataRiskStandalone model module.
 * @module model/AdditionalDataRiskStandalone
 * @version 50
 */
class AdditionalDataRiskStandalone {
    /**
     * Constructs a new <code>AdditionalDataRiskStandalone</code>.
     * @alias module:model/AdditionalDataRiskStandalone
     */
    constructor() { 
        
        AdditionalDataRiskStandalone.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdditionalDataRiskStandalone</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalDataRiskStandalone} obj Optional instance to populate.
     * @return {module:model/AdditionalDataRiskStandalone} The populated <code>AdditionalDataRiskStandalone</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalDataRiskStandalone();

            if (data.hasOwnProperty('PayPal.CountryCode')) {
                obj['PayPal.CountryCode'] = ApiClient.convertToType(data['PayPal.CountryCode'], 'String');
            }
            if (data.hasOwnProperty('PayPal.EmailId')) {
                obj['PayPal.EmailId'] = ApiClient.convertToType(data['PayPal.EmailId'], 'String');
            }
            if (data.hasOwnProperty('PayPal.FirstName')) {
                obj['PayPal.FirstName'] = ApiClient.convertToType(data['PayPal.FirstName'], 'String');
            }
            if (data.hasOwnProperty('PayPal.LastName')) {
                obj['PayPal.LastName'] = ApiClient.convertToType(data['PayPal.LastName'], 'String');
            }
            if (data.hasOwnProperty('PayPal.PayerId')) {
                obj['PayPal.PayerId'] = ApiClient.convertToType(data['PayPal.PayerId'], 'String');
            }
            if (data.hasOwnProperty('PayPal.Phone')) {
                obj['PayPal.Phone'] = ApiClient.convertToType(data['PayPal.Phone'], 'String');
            }
            if (data.hasOwnProperty('PayPal.ProtectionEligibility')) {
                obj['PayPal.ProtectionEligibility'] = ApiClient.convertToType(data['PayPal.ProtectionEligibility'], 'String');
            }
            if (data.hasOwnProperty('PayPal.TransactionId')) {
                obj['PayPal.TransactionId'] = ApiClient.convertToType(data['PayPal.TransactionId'], 'String');
            }
            if (data.hasOwnProperty('avsResultRaw')) {
                obj['avsResultRaw'] = ApiClient.convertToType(data['avsResultRaw'], 'String');
            }
            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('cvcResultRaw')) {
                obj['cvcResultRaw'] = ApiClient.convertToType(data['cvcResultRaw'], 'String');
            }
            if (data.hasOwnProperty('riskToken')) {
                obj['riskToken'] = ApiClient.convertToType(data['riskToken'], 'String');
            }
            if (data.hasOwnProperty('threeDAuthenticated')) {
                obj['threeDAuthenticated'] = ApiClient.convertToType(data['threeDAuthenticated'], 'String');
            }
            if (data.hasOwnProperty('threeDOffered')) {
                obj['threeDOffered'] = ApiClient.convertToType(data['threeDOffered'], 'String');
            }
            if (data.hasOwnProperty('tokenDataType')) {
                obj['tokenDataType'] = ApiClient.convertToType(data['tokenDataType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalDataRiskStandalone</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalDataRiskStandalone</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PayPal.CountryCode'] && !(typeof data['PayPal.CountryCode'] === 'string' || data['PayPal.CountryCode'] instanceof String)) {
            throw new Error("Expected the field `PayPal.CountryCode` to be a primitive type in the JSON string but got " + data['PayPal.CountryCode']);
        }
        // ensure the json data is a string
        if (data['PayPal.EmailId'] && !(typeof data['PayPal.EmailId'] === 'string' || data['PayPal.EmailId'] instanceof String)) {
            throw new Error("Expected the field `PayPal.EmailId` to be a primitive type in the JSON string but got " + data['PayPal.EmailId']);
        }
        // ensure the json data is a string
        if (data['PayPal.FirstName'] && !(typeof data['PayPal.FirstName'] === 'string' || data['PayPal.FirstName'] instanceof String)) {
            throw new Error("Expected the field `PayPal.FirstName` to be a primitive type in the JSON string but got " + data['PayPal.FirstName']);
        }
        // ensure the json data is a string
        if (data['PayPal.LastName'] && !(typeof data['PayPal.LastName'] === 'string' || data['PayPal.LastName'] instanceof String)) {
            throw new Error("Expected the field `PayPal.LastName` to be a primitive type in the JSON string but got " + data['PayPal.LastName']);
        }
        // ensure the json data is a string
        if (data['PayPal.PayerId'] && !(typeof data['PayPal.PayerId'] === 'string' || data['PayPal.PayerId'] instanceof String)) {
            throw new Error("Expected the field `PayPal.PayerId` to be a primitive type in the JSON string but got " + data['PayPal.PayerId']);
        }
        // ensure the json data is a string
        if (data['PayPal.Phone'] && !(typeof data['PayPal.Phone'] === 'string' || data['PayPal.Phone'] instanceof String)) {
            throw new Error("Expected the field `PayPal.Phone` to be a primitive type in the JSON string but got " + data['PayPal.Phone']);
        }
        // ensure the json data is a string
        if (data['PayPal.ProtectionEligibility'] && !(typeof data['PayPal.ProtectionEligibility'] === 'string' || data['PayPal.ProtectionEligibility'] instanceof String)) {
            throw new Error("Expected the field `PayPal.ProtectionEligibility` to be a primitive type in the JSON string but got " + data['PayPal.ProtectionEligibility']);
        }
        // ensure the json data is a string
        if (data['PayPal.TransactionId'] && !(typeof data['PayPal.TransactionId'] === 'string' || data['PayPal.TransactionId'] instanceof String)) {
            throw new Error("Expected the field `PayPal.TransactionId` to be a primitive type in the JSON string but got " + data['PayPal.TransactionId']);
        }
        // ensure the json data is a string
        if (data['avsResultRaw'] && !(typeof data['avsResultRaw'] === 'string' || data['avsResultRaw'] instanceof String)) {
            throw new Error("Expected the field `avsResultRaw` to be a primitive type in the JSON string but got " + data['avsResultRaw']);
        }
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['cvcResultRaw'] && !(typeof data['cvcResultRaw'] === 'string' || data['cvcResultRaw'] instanceof String)) {
            throw new Error("Expected the field `cvcResultRaw` to be a primitive type in the JSON string but got " + data['cvcResultRaw']);
        }
        // ensure the json data is a string
        if (data['riskToken'] && !(typeof data['riskToken'] === 'string' || data['riskToken'] instanceof String)) {
            throw new Error("Expected the field `riskToken` to be a primitive type in the JSON string but got " + data['riskToken']);
        }
        // ensure the json data is a string
        if (data['threeDAuthenticated'] && !(typeof data['threeDAuthenticated'] === 'string' || data['threeDAuthenticated'] instanceof String)) {
            throw new Error("Expected the field `threeDAuthenticated` to be a primitive type in the JSON string but got " + data['threeDAuthenticated']);
        }
        // ensure the json data is a string
        if (data['threeDOffered'] && !(typeof data['threeDOffered'] === 'string' || data['threeDOffered'] instanceof String)) {
            throw new Error("Expected the field `threeDOffered` to be a primitive type in the JSON string but got " + data['threeDOffered']);
        }
        // ensure the json data is a string
        if (data['tokenDataType'] && !(typeof data['tokenDataType'] === 'string' || data['tokenDataType'] instanceof String)) {
            throw new Error("Expected the field `tokenDataType` to be a primitive type in the JSON string but got " + data['tokenDataType']);
        }

        return true;
    }


}



/**
 * Shopper's country of residence in the form of ISO standard 3166 2-character country codes.
 * @member {String} PayPal.CountryCode
 */
AdditionalDataRiskStandalone.prototype['PayPal.CountryCode'] = undefined;

/**
 * Shopper's email.
 * @member {String} PayPal.EmailId
 */
AdditionalDataRiskStandalone.prototype['PayPal.EmailId'] = undefined;

/**
 * Shopper's first name.
 * @member {String} PayPal.FirstName
 */
AdditionalDataRiskStandalone.prototype['PayPal.FirstName'] = undefined;

/**
 * Shopper's last name.
 * @member {String} PayPal.LastName
 */
AdditionalDataRiskStandalone.prototype['PayPal.LastName'] = undefined;

/**
 * Unique PayPal Customer Account identification number. Character length and limitations: 13 single-byte alphanumeric characters.
 * @member {String} PayPal.PayerId
 */
AdditionalDataRiskStandalone.prototype['PayPal.PayerId'] = undefined;

/**
 * Shopper's phone number.
 * @member {String} PayPal.Phone
 */
AdditionalDataRiskStandalone.prototype['PayPal.Phone'] = undefined;

/**
 * Allowed values: * **Eligible** — Merchant is protected by PayPal's Seller Protection Policy for Unauthorized Payments and Item Not Received.  * **PartiallyEligible** — Merchant is protected by PayPal's Seller Protection Policy for Item Not Received.  * **Ineligible** — Merchant is not protected under the Seller Protection Policy.
 * @member {String} PayPal.ProtectionEligibility
 */
AdditionalDataRiskStandalone.prototype['PayPal.ProtectionEligibility'] = undefined;

/**
 * Unique transaction ID of the payment.
 * @member {String} PayPal.TransactionId
 */
AdditionalDataRiskStandalone.prototype['PayPal.TransactionId'] = undefined;

/**
 * Raw AVS result received from the acquirer, where available. Example: D
 * @member {String} avsResultRaw
 */
AdditionalDataRiskStandalone.prototype['avsResultRaw'] = undefined;

/**
 * The Bank Identification Number of a credit card, which is the first six digits of a card number. Required for [tokenized card request](https://docs.adyen.com/risk-management/standalone-risk#tokenised-pan-request).
 * @member {String} bin
 */
AdditionalDataRiskStandalone.prototype['bin'] = undefined;

/**
 * Raw CVC result received from the acquirer, where available. Example: 1
 * @member {String} cvcResultRaw
 */
AdditionalDataRiskStandalone.prototype['cvcResultRaw'] = undefined;

/**
 * Unique identifier or token for the shopper's card details.
 * @member {String} riskToken
 */
AdditionalDataRiskStandalone.prototype['riskToken'] = undefined;

/**
 * A Boolean value indicating whether 3DS authentication was completed on this payment. Example: true
 * @member {String} threeDAuthenticated
 */
AdditionalDataRiskStandalone.prototype['threeDAuthenticated'] = undefined;

/**
 * A Boolean value indicating whether 3DS was offered for this payment. Example: true
 * @member {String} threeDOffered
 */
AdditionalDataRiskStandalone.prototype['threeDOffered'] = undefined;

/**
 * Required for PayPal payments only. The only supported value is: **paypal**.
 * @member {String} tokenDataType
 */
AdditionalDataRiskStandalone.prototype['tokenDataType'] = undefined;






export default AdditionalDataRiskStandalone;

