# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ModificationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, psp_reference: str=None, response: str=None):
        """ModificationResult - a model defined in OpenAPI

        :param additional_data: The additional_data of this ModificationResult.
        :param psp_reference: The psp_reference of this ModificationResult.
        :param response: The response of this ModificationResult.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'psp_reference': str,
            'response': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'psp_reference': 'pspReference',
            'response': 'response'
        }

        self._additional_data = additional_data
        self._psp_reference = psp_reference
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModificationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModificationResult of this ModificationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this ModificationResult.

        This field contains additional data, which may be returned in a particular modification response.

        :return: The additional_data of this ModificationResult.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ModificationResult.

        This field contains additional data, which may be returned in a particular modification response.

        :param additional_data: The additional_data of this ModificationResult.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def psp_reference(self):
        """Gets the psp_reference of this ModificationResult.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this ModificationResult.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this ModificationResult.

        Adyen's 16-character string reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this ModificationResult.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference

    @property
    def response(self):
        """Gets the response of this ModificationResult.

        Indicates if the modification request has been received for processing.

        :return: The response of this ModificationResult.
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ModificationResult.

        Indicates if the modification request has been received for processing.

        :param response: The response of this ModificationResult.
        :type response: str
        """
        allowed_values = ["[capture-received]", "[cancel-received]", "[refund-received]", "[cancelOrRefund-received]", "[adjustAuthorisation-received]", "[donation-received]", "[technical-cancel-received]", "[voidPendingRefund-received]"]  # noqa: E501
        if response not in allowed_values:
            raise ValueError(
                "Invalid value for `response` ({0}), must be one of {1}"
                .format(response, allowed_values)
            )

        self._response = response
