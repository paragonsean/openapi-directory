/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v50/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v50/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExternalPlatform.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExternalPlatform::OAIExternalPlatform(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExternalPlatform::OAIExternalPlatform() {
    this->initializeModel();
}

OAIExternalPlatform::~OAIExternalPlatform() {}

void OAIExternalPlatform::initializeModel() {

    m_integrator_isSet = false;
    m_integrator_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIExternalPlatform::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExternalPlatform::fromJsonObject(QJsonObject json) {

    m_integrator_isValid = ::OpenAPI::fromJsonValue(m_integrator, json[QString("integrator")]);
    m_integrator_isSet = !json[QString("integrator")].isNull() && m_integrator_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIExternalPlatform::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExternalPlatform::asJsonObject() const {
    QJsonObject obj;
    if (m_integrator_isSet) {
        obj.insert(QString("integrator"), ::OpenAPI::toJsonValue(m_integrator));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIExternalPlatform::getIntegrator() const {
    return m_integrator;
}
void OAIExternalPlatform::setIntegrator(const QString &integrator) {
    m_integrator = integrator;
    m_integrator_isSet = true;
}

bool OAIExternalPlatform::is_integrator_Set() const{
    return m_integrator_isSet;
}

bool OAIExternalPlatform::is_integrator_Valid() const{
    return m_integrator_isValid;
}

QString OAIExternalPlatform::getName() const {
    return m_name;
}
void OAIExternalPlatform::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExternalPlatform::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExternalPlatform::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIExternalPlatform::getVersion() const {
    return m_version;
}
void OAIExternalPlatform::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIExternalPlatform::is_version_Set() const{
    return m_version_isSet;
}

bool OAIExternalPlatform::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIExternalPlatform::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_integrator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExternalPlatform::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
