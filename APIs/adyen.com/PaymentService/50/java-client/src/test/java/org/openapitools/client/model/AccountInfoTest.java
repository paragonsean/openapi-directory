/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v50/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v50/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AccountInfo
 */
public class AccountInfoTest {
    private final AccountInfo model = new AccountInfo();

    /**
     * Model tests for AccountInfo
     */
    @Test
    public void testAccountInfo() {
        // TODO: test AccountInfo
    }

    /**
     * Test the property 'accountAgeIndicator'
     */
    @Test
    public void accountAgeIndicatorTest() {
        // TODO: test accountAgeIndicator
    }

    /**
     * Test the property 'accountChangeDate'
     */
    @Test
    public void accountChangeDateTest() {
        // TODO: test accountChangeDate
    }

    /**
     * Test the property 'accountChangeIndicator'
     */
    @Test
    public void accountChangeIndicatorTest() {
        // TODO: test accountChangeIndicator
    }

    /**
     * Test the property 'accountCreationDate'
     */
    @Test
    public void accountCreationDateTest() {
        // TODO: test accountCreationDate
    }

    /**
     * Test the property 'accountType'
     */
    @Test
    public void accountTypeTest() {
        // TODO: test accountType
    }

    /**
     * Test the property 'addCardAttemptsDay'
     */
    @Test
    public void addCardAttemptsDayTest() {
        // TODO: test addCardAttemptsDay
    }

    /**
     * Test the property 'deliveryAddressUsageDate'
     */
    @Test
    public void deliveryAddressUsageDateTest() {
        // TODO: test deliveryAddressUsageDate
    }

    /**
     * Test the property 'deliveryAddressUsageIndicator'
     */
    @Test
    public void deliveryAddressUsageIndicatorTest() {
        // TODO: test deliveryAddressUsageIndicator
    }

    /**
     * Test the property 'homePhone'
     */
    @Test
    public void homePhoneTest() {
        // TODO: test homePhone
    }

    /**
     * Test the property 'mobilePhone'
     */
    @Test
    public void mobilePhoneTest() {
        // TODO: test mobilePhone
    }

    /**
     * Test the property 'passwordChangeDate'
     */
    @Test
    public void passwordChangeDateTest() {
        // TODO: test passwordChangeDate
    }

    /**
     * Test the property 'passwordChangeIndicator'
     */
    @Test
    public void passwordChangeIndicatorTest() {
        // TODO: test passwordChangeIndicator
    }

    /**
     * Test the property 'pastTransactionsDay'
     */
    @Test
    public void pastTransactionsDayTest() {
        // TODO: test pastTransactionsDay
    }

    /**
     * Test the property 'pastTransactionsYear'
     */
    @Test
    public void pastTransactionsYearTest() {
        // TODO: test pastTransactionsYear
    }

    /**
     * Test the property 'paymentAccountAge'
     */
    @Test
    public void paymentAccountAgeTest() {
        // TODO: test paymentAccountAge
    }

    /**
     * Test the property 'paymentAccountIndicator'
     */
    @Test
    public void paymentAccountIndicatorTest() {
        // TODO: test paymentAccountIndicator
    }

    /**
     * Test the property 'purchasesLast6Months'
     */
    @Test
    public void purchasesLast6MonthsTest() {
        // TODO: test purchasesLast6Months
    }

    /**
     * Test the property 'suspiciousActivity'
     */
    @Test
    public void suspiciousActivityTest() {
        // TODO: test suspiciousActivity
    }

    /**
     * Test the property 'workPhone'
     */
    @Test
    public void workPhoneTest() {
        // TODO: test workPhone
    }

}
