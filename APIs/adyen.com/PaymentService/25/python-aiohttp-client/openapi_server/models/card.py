# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Card(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cvc: str=None, expiry_month: str=None, expiry_year: str=None, holder_name: str=None, issue_number: str=None, number: str=None, start_month: str=None, start_year: str=None):
        """Card - a model defined in OpenAPI

        :param cvc: The cvc of this Card.
        :param expiry_month: The expiry_month of this Card.
        :param expiry_year: The expiry_year of this Card.
        :param holder_name: The holder_name of this Card.
        :param issue_number: The issue_number of this Card.
        :param number: The number of this Card.
        :param start_month: The start_month of this Card.
        :param start_year: The start_year of this Card.
        """
        self.openapi_types = {
            'cvc': str,
            'expiry_month': str,
            'expiry_year': str,
            'holder_name': str,
            'issue_number': str,
            'number': str,
            'start_month': str,
            'start_year': str
        }

        self.attribute_map = {
            'cvc': 'cvc',
            'expiry_month': 'expiryMonth',
            'expiry_year': 'expiryYear',
            'holder_name': 'holderName',
            'issue_number': 'issueNumber',
            'number': 'number',
            'start_month': 'startMonth',
            'start_year': 'startYear'
        }

        self._cvc = cvc
        self._expiry_month = expiry_month
        self._expiry_year = expiry_year
        self._holder_name = holder_name
        self._issue_number = issue_number
        self._number = number
        self._start_month = start_month
        self._start_year = start_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Card':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Card of this Card.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cvc(self):
        """Gets the cvc of this Card.

        The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as: * CVV2/CVC2 – length: 3 digits * CID – length: 4 digits > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server. > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments). > When this value is returned in a response, it is always empty because it is not stored.

        :return: The cvc of this Card.
        :rtype: str
        """
        return self._cvc

    @cvc.setter
    def cvc(self, cvc):
        """Sets the cvc of this Card.

        The [card verification code](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid) (1-20 characters). Depending on the card brand, it is known also as: * CVV2/CVC2 – length: 3 digits * CID – length: 4 digits > If you are using [Client-Side Encryption](https://docs.adyen.com/classic-integration/cse-integration-ecommerce), the CVC code is present in the encrypted data. You must never post the card details to the server. > This field must be always present in a [one-click payment request](https://docs.adyen.com/classic-integration/recurring-payments). > When this value is returned in a response, it is always empty because it is not stored.

        :param cvc: The cvc of this Card.
        :type cvc: str
        """
        if cvc is not None and len(cvc) > 20:
            raise ValueError("Invalid value for `cvc`, length must be less than or equal to `20`")
        if cvc is not None and len(cvc) < 1:
            raise ValueError("Invalid value for `cvc`, length must be greater than or equal to `1`")

        self._cvc = cvc

    @property
    def expiry_month(self):
        """Gets the expiry_month of this Card.

        The card expiry month. Format: 2 digits, zero-padded for single digits. For example: * 03 = March * 11 = November

        :return: The expiry_month of this Card.
        :rtype: str
        """
        return self._expiry_month

    @expiry_month.setter
    def expiry_month(self, expiry_month):
        """Sets the expiry_month of this Card.

        The card expiry month. Format: 2 digits, zero-padded for single digits. For example: * 03 = March * 11 = November

        :param expiry_month: The expiry_month of this Card.
        :type expiry_month: str
        """
        if expiry_month is not None and len(expiry_month) > 2:
            raise ValueError("Invalid value for `expiry_month`, length must be less than or equal to `2`")
        if expiry_month is not None and len(expiry_month) < 1:
            raise ValueError("Invalid value for `expiry_month`, length must be greater than or equal to `1`")

        self._expiry_month = expiry_month

    @property
    def expiry_year(self):
        """Gets the expiry_year of this Card.

        The card expiry year. Format: 4 digits. For example: 2020

        :return: The expiry_year of this Card.
        :rtype: str
        """
        return self._expiry_year

    @expiry_year.setter
    def expiry_year(self, expiry_year):
        """Sets the expiry_year of this Card.

        The card expiry year. Format: 4 digits. For example: 2020

        :param expiry_year: The expiry_year of this Card.
        :type expiry_year: str
        """
        if expiry_year is not None and len(expiry_year) > 4:
            raise ValueError("Invalid value for `expiry_year`, length must be less than or equal to `4`")
        if expiry_year is not None and len(expiry_year) < 4:
            raise ValueError("Invalid value for `expiry_year`, length must be greater than or equal to `4`")

        self._expiry_year = expiry_year

    @property
    def holder_name(self):
        """Gets the holder_name of this Card.

        The name of the cardholder, as printed on the card.

        :return: The holder_name of this Card.
        :rtype: str
        """
        return self._holder_name

    @holder_name.setter
    def holder_name(self, holder_name):
        """Sets the holder_name of this Card.

        The name of the cardholder, as printed on the card.

        :param holder_name: The holder_name of this Card.
        :type holder_name: str
        """
        if holder_name is not None and len(holder_name) > 50:
            raise ValueError("Invalid value for `holder_name`, length must be less than or equal to `50`")
        if holder_name is not None and len(holder_name) < 1:
            raise ValueError("Invalid value for `holder_name`, length must be greater than or equal to `1`")

        self._holder_name = holder_name

    @property
    def issue_number(self):
        """Gets the issue_number of this Card.

        The issue number of the card (for some UK debit cards only).

        :return: The issue_number of this Card.
        :rtype: str
        """
        return self._issue_number

    @issue_number.setter
    def issue_number(self, issue_number):
        """Sets the issue_number of this Card.

        The issue number of the card (for some UK debit cards only).

        :param issue_number: The issue_number of this Card.
        :type issue_number: str
        """
        if issue_number is not None and len(issue_number) > 2:
            raise ValueError("Invalid value for `issue_number`, length must be less than or equal to `2`")
        if issue_number is not None and len(issue_number) < 1:
            raise ValueError("Invalid value for `issue_number`, length must be greater than or equal to `1`")

        self._issue_number = issue_number

    @property
    def number(self):
        """Gets the number of this Card.

        The card number (4-19 characters). Do not use any separators. When this value is returned in a response, only the last 4 digits of the card number are returned.

        :return: The number of this Card.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Card.

        The card number (4-19 characters). Do not use any separators. When this value is returned in a response, only the last 4 digits of the card number are returned.

        :param number: The number of this Card.
        :type number: str
        """
        if number is not None and len(number) > 19:
            raise ValueError("Invalid value for `number`, length must be less than or equal to `19`")
        if number is not None and len(number) < 4:
            raise ValueError("Invalid value for `number`, length must be greater than or equal to `4`")

        self._number = number

    @property
    def start_month(self):
        """Gets the start_month of this Card.

        The month component of the start date (for some UK debit cards only).

        :return: The start_month of this Card.
        :rtype: str
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this Card.

        The month component of the start date (for some UK debit cards only).

        :param start_month: The start_month of this Card.
        :type start_month: str
        """
        if start_month is not None and len(start_month) > 2:
            raise ValueError("Invalid value for `start_month`, length must be less than or equal to `2`")
        if start_month is not None and len(start_month) < 1:
            raise ValueError("Invalid value for `start_month`, length must be greater than or equal to `1`")

        self._start_month = start_month

    @property
    def start_year(self):
        """Gets the start_year of this Card.

        The year component of the start date (for some UK debit cards only).

        :return: The start_year of this Card.
        :rtype: str
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year):
        """Sets the start_year of this Card.

        The year component of the start date (for some UK debit cards only).

        :param start_year: The start_year of this Card.
        :type start_year: str
        """
        if start_year is not None and len(start_year) > 4:
            raise ValueError("Invalid value for `start_year`, length must be less than or equal to `4`")
        if start_year is not None and len(start_year) < 4:
            raise ValueError("Invalid value for `start_year`, length must be greater than or equal to `4`")

        self._start_year = start_year
