# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalDataSubMerchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sub_merchant_number_of_sub_sellers: str=None, sub_merchant_sub_seller_sub_seller_nr_city: str=None, sub_merchant_sub_seller_sub_seller_nr_country: str=None, sub_merchant_sub_seller_sub_seller_nr_id: str=None, sub_merchant_sub_seller_sub_seller_nr_mcc: str=None, sub_merchant_sub_seller_sub_seller_nr_name: str=None, sub_merchant_sub_seller_sub_seller_nr_postal_code: str=None, sub_merchant_sub_seller_sub_seller_nr_state: str=None, sub_merchant_sub_seller_sub_seller_nr_street: str=None, sub_merchant_sub_seller_sub_seller_nr_tax_id: str=None):
        """AdditionalDataSubMerchant - a model defined in OpenAPI

        :param sub_merchant_number_of_sub_sellers: The sub_merchant_number_of_sub_sellers of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_city: The sub_merchant_sub_seller_sub_seller_nr_city of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_country: The sub_merchant_sub_seller_sub_seller_nr_country of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_id: The sub_merchant_sub_seller_sub_seller_nr_id of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_mcc: The sub_merchant_sub_seller_sub_seller_nr_mcc of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_name: The sub_merchant_sub_seller_sub_seller_nr_name of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_postal_code: The sub_merchant_sub_seller_sub_seller_nr_postal_code of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_state: The sub_merchant_sub_seller_sub_seller_nr_state of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_street: The sub_merchant_sub_seller_sub_seller_nr_street of this AdditionalDataSubMerchant.
        :param sub_merchant_sub_seller_sub_seller_nr_tax_id: The sub_merchant_sub_seller_sub_seller_nr_tax_id of this AdditionalDataSubMerchant.
        """
        self.openapi_types = {
            'sub_merchant_number_of_sub_sellers': str,
            'sub_merchant_sub_seller_sub_seller_nr_city': str,
            'sub_merchant_sub_seller_sub_seller_nr_country': str,
            'sub_merchant_sub_seller_sub_seller_nr_id': str,
            'sub_merchant_sub_seller_sub_seller_nr_mcc': str,
            'sub_merchant_sub_seller_sub_seller_nr_name': str,
            'sub_merchant_sub_seller_sub_seller_nr_postal_code': str,
            'sub_merchant_sub_seller_sub_seller_nr_state': str,
            'sub_merchant_sub_seller_sub_seller_nr_street': str,
            'sub_merchant_sub_seller_sub_seller_nr_tax_id': str
        }

        self.attribute_map = {
            'sub_merchant_number_of_sub_sellers': 'subMerchant.numberOfSubSellers',
            'sub_merchant_sub_seller_sub_seller_nr_city': 'subMerchant.subSeller[subSellerNr].city',
            'sub_merchant_sub_seller_sub_seller_nr_country': 'subMerchant.subSeller[subSellerNr].country',
            'sub_merchant_sub_seller_sub_seller_nr_id': 'subMerchant.subSeller[subSellerNr].id',
            'sub_merchant_sub_seller_sub_seller_nr_mcc': 'subMerchant.subSeller[subSellerNr].mcc',
            'sub_merchant_sub_seller_sub_seller_nr_name': 'subMerchant.subSeller[subSellerNr].name',
            'sub_merchant_sub_seller_sub_seller_nr_postal_code': 'subMerchant.subSeller[subSellerNr].postalCode',
            'sub_merchant_sub_seller_sub_seller_nr_state': 'subMerchant.subSeller[subSellerNr].state',
            'sub_merchant_sub_seller_sub_seller_nr_street': 'subMerchant.subSeller[subSellerNr].street',
            'sub_merchant_sub_seller_sub_seller_nr_tax_id': 'subMerchant.subSeller[subSellerNr].taxId'
        }

        self._sub_merchant_number_of_sub_sellers = sub_merchant_number_of_sub_sellers
        self._sub_merchant_sub_seller_sub_seller_nr_city = sub_merchant_sub_seller_sub_seller_nr_city
        self._sub_merchant_sub_seller_sub_seller_nr_country = sub_merchant_sub_seller_sub_seller_nr_country
        self._sub_merchant_sub_seller_sub_seller_nr_id = sub_merchant_sub_seller_sub_seller_nr_id
        self._sub_merchant_sub_seller_sub_seller_nr_mcc = sub_merchant_sub_seller_sub_seller_nr_mcc
        self._sub_merchant_sub_seller_sub_seller_nr_name = sub_merchant_sub_seller_sub_seller_nr_name
        self._sub_merchant_sub_seller_sub_seller_nr_postal_code = sub_merchant_sub_seller_sub_seller_nr_postal_code
        self._sub_merchant_sub_seller_sub_seller_nr_state = sub_merchant_sub_seller_sub_seller_nr_state
        self._sub_merchant_sub_seller_sub_seller_nr_street = sub_merchant_sub_seller_sub_seller_nr_street
        self._sub_merchant_sub_seller_sub_seller_nr_tax_id = sub_merchant_sub_seller_sub_seller_nr_tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalDataSubMerchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalDataSubMerchant of this AdditionalDataSubMerchant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sub_merchant_number_of_sub_sellers(self):
        """Gets the sub_merchant_number_of_sub_sellers of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.

        :return: The sub_merchant_number_of_sub_sellers of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_number_of_sub_sellers

    @sub_merchant_number_of_sub_sellers.setter
    def sub_merchant_number_of_sub_sellers(self, sub_merchant_number_of_sub_sellers):
        """Sets the sub_merchant_number_of_sub_sellers of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. Indicates the number of sub-merchants contained in the request. For example, **3**.

        :param sub_merchant_number_of_sub_sellers: The sub_merchant_number_of_sub_sellers of this AdditionalDataSubMerchant.
        :type sub_merchant_number_of_sub_sellers: str
        """

        self._sub_merchant_number_of_sub_sellers = sub_merchant_number_of_sub_sellers

    @property
    def sub_merchant_sub_seller_sub_seller_nr_city(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_city of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_city of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_city

    @sub_merchant_sub_seller_sub_seller_nr_city.setter
    def sub_merchant_sub_seller_sub_seller_nr_city(self, sub_merchant_sub_seller_sub_seller_nr_city):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_city of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The city of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 13 characters

        :param sub_merchant_sub_seller_sub_seller_nr_city: The sub_merchant_sub_seller_sub_seller_nr_city of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_city: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_city = sub_merchant_sub_seller_sub_seller_nr_city

    @property
    def sub_merchant_sub_seller_sub_seller_nr_country(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_country of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_country of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_country

    @sub_merchant_sub_seller_sub_seller_nr_country.setter
    def sub_merchant_sub_seller_sub_seller_nr_country(self, sub_merchant_sub_seller_sub_seller_nr_country):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_country of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The three-letter country code of the sub-merchant's address. For example, **BRA** for Brazil.  * Format: [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3) * Fixed length: 3 characters

        :param sub_merchant_sub_seller_sub_seller_nr_country: The sub_merchant_sub_seller_sub_seller_nr_country of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_country: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_country = sub_merchant_sub_seller_sub_seller_nr_country

    @property
    def sub_merchant_sub_seller_sub_seller_nr_id(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_id of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_id of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_id

    @sub_merchant_sub_seller_sub_seller_nr_id.setter
    def sub_merchant_sub_seller_sub_seller_nr_id(self, sub_merchant_sub_seller_sub_seller_nr_id):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_id of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. A unique identifier that you create for the sub-merchant, used by schemes to identify the sub-merchant.  * Format: Alphanumeric * Maximum length: 15 characters

        :param sub_merchant_sub_seller_sub_seller_nr_id: The sub_merchant_sub_seller_sub_seller_nr_id of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_id: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_id = sub_merchant_sub_seller_sub_seller_nr_id

    @property
    def sub_merchant_sub_seller_sub_seller_nr_mcc(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_mcc of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits

        :return: The sub_merchant_sub_seller_sub_seller_nr_mcc of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_mcc

    @sub_merchant_sub_seller_sub_seller_nr_mcc.setter
    def sub_merchant_sub_seller_sub_seller_nr_mcc(self, sub_merchant_sub_seller_sub_seller_nr_mcc):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_mcc of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The sub-merchant's 4-digit Merchant Category Code (MCC).  * Format: Numeric * Fixed length: 4 digits

        :param sub_merchant_sub_seller_sub_seller_nr_mcc: The sub_merchant_sub_seller_sub_seller_nr_mcc of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_mcc: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_mcc = sub_merchant_sub_seller_sub_seller_nr_mcc

    @property
    def sub_merchant_sub_seller_sub_seller_nr_name(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_name of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_name of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_name

    @sub_merchant_sub_seller_sub_seller_nr_name.setter
    def sub_merchant_sub_seller_sub_seller_nr_name(self, sub_merchant_sub_seller_sub_seller_nr_name):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_name of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The name of the sub-merchant. Based on scheme specifications, this value will overwrite the shopper statement  that will appear in the card statement. * Format: Alphanumeric * Maximum length: 22 characters

        :param sub_merchant_sub_seller_sub_seller_nr_name: The sub_merchant_sub_seller_sub_seller_nr_name of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_name: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_name = sub_merchant_sub_seller_sub_seller_nr_name

    @property
    def sub_merchant_sub_seller_sub_seller_nr_postal_code(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_postal_code of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes. * Format: Numeric * Fixed length: 8 digits

        :return: The sub_merchant_sub_seller_sub_seller_nr_postal_code of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_postal_code

    @sub_merchant_sub_seller_sub_seller_nr_postal_code.setter
    def sub_merchant_sub_seller_sub_seller_nr_postal_code(self, sub_merchant_sub_seller_sub_seller_nr_postal_code):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_postal_code of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The postal code of the sub-merchant's address, without dashes. * Format: Numeric * Fixed length: 8 digits

        :param sub_merchant_sub_seller_sub_seller_nr_postal_code: The sub_merchant_sub_seller_sub_seller_nr_postal_code of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_postal_code: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_postal_code = sub_merchant_sub_seller_sub_seller_nr_postal_code

    @property
    def sub_merchant_sub_seller_sub_seller_nr_state(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_state of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_state of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_state

    @sub_merchant_sub_seller_sub_seller_nr_state.setter
    def sub_merchant_sub_seller_sub_seller_nr_state(self, sub_merchant_sub_seller_sub_seller_nr_state):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_state of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The state code of the sub-merchant's address, if applicable to the country. * Format: Alphanumeric * Maximum length: 2 characters

        :param sub_merchant_sub_seller_sub_seller_nr_state: The sub_merchant_sub_seller_sub_seller_nr_state of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_state: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_state = sub_merchant_sub_seller_sub_seller_nr_state

    @property
    def sub_merchant_sub_seller_sub_seller_nr_street(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_street of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 60 characters

        :return: The sub_merchant_sub_seller_sub_seller_nr_street of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_street

    @sub_merchant_sub_seller_sub_seller_nr_street.setter
    def sub_merchant_sub_seller_sub_seller_nr_street(self, sub_merchant_sub_seller_sub_seller_nr_street):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_street of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The street name and house number of the sub-merchant's address. * Format: Alphanumeric * Maximum length: 60 characters

        :param sub_merchant_sub_seller_sub_seller_nr_street: The sub_merchant_sub_seller_sub_seller_nr_street of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_street: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_street = sub_merchant_sub_seller_sub_seller_nr_street

    @property
    def sub_merchant_sub_seller_sub_seller_nr_tax_id(self):
        """Gets the sub_merchant_sub_seller_sub_seller_nr_tax_id of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ

        :return: The sub_merchant_sub_seller_sub_seller_nr_tax_id of this AdditionalDataSubMerchant.
        :rtype: str
        """
        return self._sub_merchant_sub_seller_sub_seller_nr_tax_id

    @sub_merchant_sub_seller_sub_seller_nr_tax_id.setter
    def sub_merchant_sub_seller_sub_seller_nr_tax_id(self, sub_merchant_sub_seller_sub_seller_nr_tax_id):
        """Sets the sub_merchant_sub_seller_sub_seller_nr_tax_id of this AdditionalDataSubMerchant.

        Required for transactions performed by registered payment facilitators. The tax ID of the sub-merchant. * Format: Numeric * Fixed length: 11 digits for the CPF or 14 digits for the CNPJ

        :param sub_merchant_sub_seller_sub_seller_nr_tax_id: The sub_merchant_sub_seller_sub_seller_nr_tax_id of this AdditionalDataSubMerchant.
        :type sub_merchant_sub_seller_sub_seller_nr_tax_id: str
        """

        self._sub_merchant_sub_seller_sub_seller_nr_tax_id = sub_merchant_sub_seller_sub_seller_nr_tax_id
