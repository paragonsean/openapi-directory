/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v52/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v52/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 52
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentRequest::OAIPaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentRequest::OAIPaymentRequest() {
    this->initializeModel();
}

OAIPaymentRequest::~OAIPaymentRequest() {}

void OAIPaymentRequest::initializeModel() {

    m_account_info_isSet = false;
    m_account_info_isValid = false;

    m_additional_amount_isSet = false;
    m_additional_amount_isValid = false;

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_application_info_isSet = false;
    m_application_info_isValid = false;

    m_bank_account_isSet = false;
    m_bank_account_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_browser_info_isSet = false;
    m_browser_info_isValid = false;

    m_capture_delay_hours_isSet = false;
    m_capture_delay_hours_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_date_of_birth_isSet = false;
    m_date_of_birth_isValid = false;

    m_dcc_quote_isSet = false;
    m_dcc_quote_isValid = false;

    m_delivery_address_isSet = false;
    m_delivery_address_isValid = false;

    m_delivery_date_isSet = false;
    m_delivery_date_isValid = false;

    m_device_fingerprint_isSet = false;
    m_device_fingerprint_isValid = false;

    m_enable_real_time_update_isSet = false;
    m_enable_real_time_update_isValid = false;

    m_entity_type_isSet = false;
    m_entity_type_isValid = false;

    m_fraud_offset_isSet = false;
    m_fraud_offset_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;

    m_mandate_isSet = false;
    m_mandate_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_order_reference_isSet = false;
    m_merchant_order_reference_isValid = false;

    m_merchant_risk_indicator_isSet = false;
    m_merchant_risk_indicator_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_mpi_data_isSet = false;
    m_mpi_data_isValid = false;

    m_nationality_isSet = false;
    m_nationality_isValid = false;

    m_order_reference_isSet = false;
    m_order_reference_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_recurring_processing_model_isSet = false;
    m_recurring_processing_model_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_selected_brand_isSet = false;
    m_selected_brand_isValid = false;

    m_selected_recurring_detail_reference_isSet = false;
    m_selected_recurring_detail_reference_isValid = false;

    m_session_id_isSet = false;
    m_session_id_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_ip_isSet = false;
    m_shopper_ip_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_locale_isSet = false;
    m_shopper_locale_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_shopper_statement_isSet = false;
    m_shopper_statement_isValid = false;

    m_social_security_number_isSet = false;
    m_social_security_number_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;

    m_store_isSet = false;
    m_store_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;

    m_three_ds2_request_data_isSet = false;
    m_three_ds2_request_data_isValid = false;

    m_three_ds_authentication_only_isSet = false;
    m_three_ds_authentication_only_isValid = false;

    m_totals_group_isSet = false;
    m_totals_group_isValid = false;

    m_trusted_shopper_isSet = false;
    m_trusted_shopper_isValid = false;
}

void OAIPaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentRequest::fromJsonObject(QJsonObject json) {

    m_account_info_isValid = ::OpenAPI::fromJsonValue(m_account_info, json[QString("accountInfo")]);
    m_account_info_isSet = !json[QString("accountInfo")].isNull() && m_account_info_isValid;

    m_additional_amount_isValid = ::OpenAPI::fromJsonValue(m_additional_amount, json[QString("additionalAmount")]);
    m_additional_amount_isSet = !json[QString("additionalAmount")].isNull() && m_additional_amount_isValid;

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_application_info_isValid = ::OpenAPI::fromJsonValue(m_application_info, json[QString("applicationInfo")]);
    m_application_info_isSet = !json[QString("applicationInfo")].isNull() && m_application_info_isValid;

    m_bank_account_isValid = ::OpenAPI::fromJsonValue(m_bank_account, json[QString("bankAccount")]);
    m_bank_account_isSet = !json[QString("bankAccount")].isNull() && m_bank_account_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_browser_info_isValid = ::OpenAPI::fromJsonValue(m_browser_info, json[QString("browserInfo")]);
    m_browser_info_isSet = !json[QString("browserInfo")].isNull() && m_browser_info_isValid;

    m_capture_delay_hours_isValid = ::OpenAPI::fromJsonValue(m_capture_delay_hours, json[QString("captureDelayHours")]);
    m_capture_delay_hours_isSet = !json[QString("captureDelayHours")].isNull() && m_capture_delay_hours_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_date_of_birth_isValid = ::OpenAPI::fromJsonValue(m_date_of_birth, json[QString("dateOfBirth")]);
    m_date_of_birth_isSet = !json[QString("dateOfBirth")].isNull() && m_date_of_birth_isValid;

    m_dcc_quote_isValid = ::OpenAPI::fromJsonValue(m_dcc_quote, json[QString("dccQuote")]);
    m_dcc_quote_isSet = !json[QString("dccQuote")].isNull() && m_dcc_quote_isValid;

    m_delivery_address_isValid = ::OpenAPI::fromJsonValue(m_delivery_address, json[QString("deliveryAddress")]);
    m_delivery_address_isSet = !json[QString("deliveryAddress")].isNull() && m_delivery_address_isValid;

    m_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_delivery_date, json[QString("deliveryDate")]);
    m_delivery_date_isSet = !json[QString("deliveryDate")].isNull() && m_delivery_date_isValid;

    m_device_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_device_fingerprint, json[QString("deviceFingerprint")]);
    m_device_fingerprint_isSet = !json[QString("deviceFingerprint")].isNull() && m_device_fingerprint_isValid;

    m_enable_real_time_update_isValid = ::OpenAPI::fromJsonValue(m_enable_real_time_update, json[QString("enableRealTimeUpdate")]);
    m_enable_real_time_update_isSet = !json[QString("enableRealTimeUpdate")].isNull() && m_enable_real_time_update_isValid;

    m_entity_type_isValid = ::OpenAPI::fromJsonValue(m_entity_type, json[QString("entityType")]);
    m_entity_type_isSet = !json[QString("entityType")].isNull() && m_entity_type_isValid;

    m_fraud_offset_isValid = ::OpenAPI::fromJsonValue(m_fraud_offset, json[QString("fraudOffset")]);
    m_fraud_offset_isSet = !json[QString("fraudOffset")].isNull() && m_fraud_offset_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;

    m_mandate_isValid = ::OpenAPI::fromJsonValue(m_mandate, json[QString("mandate")]);
    m_mandate_isSet = !json[QString("mandate")].isNull() && m_mandate_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_order_reference_isValid = ::OpenAPI::fromJsonValue(m_merchant_order_reference, json[QString("merchantOrderReference")]);
    m_merchant_order_reference_isSet = !json[QString("merchantOrderReference")].isNull() && m_merchant_order_reference_isValid;

    m_merchant_risk_indicator_isValid = ::OpenAPI::fromJsonValue(m_merchant_risk_indicator, json[QString("merchantRiskIndicator")]);
    m_merchant_risk_indicator_isSet = !json[QString("merchantRiskIndicator")].isNull() && m_merchant_risk_indicator_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_mpi_data_isValid = ::OpenAPI::fromJsonValue(m_mpi_data, json[QString("mpiData")]);
    m_mpi_data_isSet = !json[QString("mpiData")].isNull() && m_mpi_data_isValid;

    m_nationality_isValid = ::OpenAPI::fromJsonValue(m_nationality, json[QString("nationality")]);
    m_nationality_isSet = !json[QString("nationality")].isNull() && m_nationality_isValid;

    m_order_reference_isValid = ::OpenAPI::fromJsonValue(m_order_reference, json[QString("orderReference")]);
    m_order_reference_isSet = !json[QString("orderReference")].isNull() && m_order_reference_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_recurring_processing_model_isValid = ::OpenAPI::fromJsonValue(m_recurring_processing_model, json[QString("recurringProcessingModel")]);
    m_recurring_processing_model_isSet = !json[QString("recurringProcessingModel")].isNull() && m_recurring_processing_model_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_selected_brand_isValid = ::OpenAPI::fromJsonValue(m_selected_brand, json[QString("selectedBrand")]);
    m_selected_brand_isSet = !json[QString("selectedBrand")].isNull() && m_selected_brand_isValid;

    m_selected_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_selected_recurring_detail_reference, json[QString("selectedRecurringDetailReference")]);
    m_selected_recurring_detail_reference_isSet = !json[QString("selectedRecurringDetailReference")].isNull() && m_selected_recurring_detail_reference_isValid;

    m_session_id_isValid = ::OpenAPI::fromJsonValue(m_session_id, json[QString("sessionId")]);
    m_session_id_isSet = !json[QString("sessionId")].isNull() && m_session_id_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_ip_isValid = ::OpenAPI::fromJsonValue(m_shopper_ip, json[QString("shopperIP")]);
    m_shopper_ip_isSet = !json[QString("shopperIP")].isNull() && m_shopper_ip_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_locale_isValid = ::OpenAPI::fromJsonValue(m_shopper_locale, json[QString("shopperLocale")]);
    m_shopper_locale_isSet = !json[QString("shopperLocale")].isNull() && m_shopper_locale_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_shopper_statement_isValid = ::OpenAPI::fromJsonValue(m_shopper_statement, json[QString("shopperStatement")]);
    m_shopper_statement_isSet = !json[QString("shopperStatement")].isNull() && m_shopper_statement_isValid;

    m_social_security_number_isValid = ::OpenAPI::fromJsonValue(m_social_security_number, json[QString("socialSecurityNumber")]);
    m_social_security_number_isSet = !json[QString("socialSecurityNumber")].isNull() && m_social_security_number_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;

    m_store_isValid = ::OpenAPI::fromJsonValue(m_store, json[QString("store")]);
    m_store_isSet = !json[QString("store")].isNull() && m_store_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;

    m_three_ds2_request_data_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_request_data, json[QString("threeDS2RequestData")]);
    m_three_ds2_request_data_isSet = !json[QString("threeDS2RequestData")].isNull() && m_three_ds2_request_data_isValid;

    m_three_ds_authentication_only_isValid = ::OpenAPI::fromJsonValue(m_three_ds_authentication_only, json[QString("threeDSAuthenticationOnly")]);
    m_three_ds_authentication_only_isSet = !json[QString("threeDSAuthenticationOnly")].isNull() && m_three_ds_authentication_only_isValid;

    m_totals_group_isValid = ::OpenAPI::fromJsonValue(m_totals_group, json[QString("totalsGroup")]);
    m_totals_group_isSet = !json[QString("totalsGroup")].isNull() && m_totals_group_isValid;

    m_trusted_shopper_isValid = ::OpenAPI::fromJsonValue(m_trusted_shopper, json[QString("trustedShopper")]);
    m_trusted_shopper_isSet = !json[QString("trustedShopper")].isNull() && m_trusted_shopper_isValid;
}

QString OAIPaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_info.isSet()) {
        obj.insert(QString("accountInfo"), ::OpenAPI::toJsonValue(m_account_info));
    }
    if (m_additional_amount.isSet()) {
        obj.insert(QString("additionalAmount"), ::OpenAPI::toJsonValue(m_additional_amount));
    }
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_application_info.isSet()) {
        obj.insert(QString("applicationInfo"), ::OpenAPI::toJsonValue(m_application_info));
    }
    if (m_bank_account.isSet()) {
        obj.insert(QString("bankAccount"), ::OpenAPI::toJsonValue(m_bank_account));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_browser_info.isSet()) {
        obj.insert(QString("browserInfo"), ::OpenAPI::toJsonValue(m_browser_info));
    }
    if (m_capture_delay_hours_isSet) {
        obj.insert(QString("captureDelayHours"), ::OpenAPI::toJsonValue(m_capture_delay_hours));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_date_of_birth_isSet) {
        obj.insert(QString("dateOfBirth"), ::OpenAPI::toJsonValue(m_date_of_birth));
    }
    if (m_dcc_quote.isSet()) {
        obj.insert(QString("dccQuote"), ::OpenAPI::toJsonValue(m_dcc_quote));
    }
    if (m_delivery_address.isSet()) {
        obj.insert(QString("deliveryAddress"), ::OpenAPI::toJsonValue(m_delivery_address));
    }
    if (m_delivery_date_isSet) {
        obj.insert(QString("deliveryDate"), ::OpenAPI::toJsonValue(m_delivery_date));
    }
    if (m_device_fingerprint_isSet) {
        obj.insert(QString("deviceFingerprint"), ::OpenAPI::toJsonValue(m_device_fingerprint));
    }
    if (m_enable_real_time_update_isSet) {
        obj.insert(QString("enableRealTimeUpdate"), ::OpenAPI::toJsonValue(m_enable_real_time_update));
    }
    if (m_entity_type_isSet) {
        obj.insert(QString("entityType"), ::OpenAPI::toJsonValue(m_entity_type));
    }
    if (m_fraud_offset_isSet) {
        obj.insert(QString("fraudOffset"), ::OpenAPI::toJsonValue(m_fraud_offset));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_installments.isSet()) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    if (m_mandate.isSet()) {
        obj.insert(QString("mandate"), ::OpenAPI::toJsonValue(m_mandate));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_order_reference_isSet) {
        obj.insert(QString("merchantOrderReference"), ::OpenAPI::toJsonValue(m_merchant_order_reference));
    }
    if (m_merchant_risk_indicator.isSet()) {
        obj.insert(QString("merchantRiskIndicator"), ::OpenAPI::toJsonValue(m_merchant_risk_indicator));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_mpi_data.isSet()) {
        obj.insert(QString("mpiData"), ::OpenAPI::toJsonValue(m_mpi_data));
    }
    if (m_nationality_isSet) {
        obj.insert(QString("nationality"), ::OpenAPI::toJsonValue(m_nationality));
    }
    if (m_order_reference_isSet) {
        obj.insert(QString("orderReference"), ::OpenAPI::toJsonValue(m_order_reference));
    }
    if (m_recurring.isSet()) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_recurring_processing_model_isSet) {
        obj.insert(QString("recurringProcessingModel"), ::OpenAPI::toJsonValue(m_recurring_processing_model));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_selected_brand_isSet) {
        obj.insert(QString("selectedBrand"), ::OpenAPI::toJsonValue(m_selected_brand));
    }
    if (m_selected_recurring_detail_reference_isSet) {
        obj.insert(QString("selectedRecurringDetailReference"), ::OpenAPI::toJsonValue(m_selected_recurring_detail_reference));
    }
    if (m_session_id_isSet) {
        obj.insert(QString("sessionId"), ::OpenAPI::toJsonValue(m_session_id));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_ip_isSet) {
        obj.insert(QString("shopperIP"), ::OpenAPI::toJsonValue(m_shopper_ip));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_locale_isSet) {
        obj.insert(QString("shopperLocale"), ::OpenAPI::toJsonValue(m_shopper_locale));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_shopper_statement_isSet) {
        obj.insert(QString("shopperStatement"), ::OpenAPI::toJsonValue(m_shopper_statement));
    }
    if (m_social_security_number_isSet) {
        obj.insert(QString("socialSecurityNumber"), ::OpenAPI::toJsonValue(m_social_security_number));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    if (m_store_isSet) {
        obj.insert(QString("store"), ::OpenAPI::toJsonValue(m_store));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    if (m_three_ds2_request_data.isSet()) {
        obj.insert(QString("threeDS2RequestData"), ::OpenAPI::toJsonValue(m_three_ds2_request_data));
    }
    if (m_three_ds_authentication_only_isSet) {
        obj.insert(QString("threeDSAuthenticationOnly"), ::OpenAPI::toJsonValue(m_three_ds_authentication_only));
    }
    if (m_totals_group_isSet) {
        obj.insert(QString("totalsGroup"), ::OpenAPI::toJsonValue(m_totals_group));
    }
    if (m_trusted_shopper_isSet) {
        obj.insert(QString("trustedShopper"), ::OpenAPI::toJsonValue(m_trusted_shopper));
    }
    return obj;
}

OAIAccountInfo OAIPaymentRequest::getAccountInfo() const {
    return m_account_info;
}
void OAIPaymentRequest::setAccountInfo(const OAIAccountInfo &account_info) {
    m_account_info = account_info;
    m_account_info_isSet = true;
}

bool OAIPaymentRequest::is_account_info_Set() const{
    return m_account_info_isSet;
}

bool OAIPaymentRequest::is_account_info_Valid() const{
    return m_account_info_isValid;
}

OAIAmount OAIPaymentRequest::getAdditionalAmount() const {
    return m_additional_amount;
}
void OAIPaymentRequest::setAdditionalAmount(const OAIAmount &additional_amount) {
    m_additional_amount = additional_amount;
    m_additional_amount_isSet = true;
}

bool OAIPaymentRequest::is_additional_amount_Set() const{
    return m_additional_amount_isSet;
}

bool OAIPaymentRequest::is_additional_amount_Valid() const{
    return m_additional_amount_isValid;
}

OAIPaymentRequest_additionalData OAIPaymentRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAIPaymentRequest::setAdditionalData(const OAIPaymentRequest_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPaymentRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPaymentRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

OAIAmount OAIPaymentRequest::getAmount() const {
    return m_amount;
}
void OAIPaymentRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIPaymentRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIPaymentRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIApplicationInfo OAIPaymentRequest::getApplicationInfo() const {
    return m_application_info;
}
void OAIPaymentRequest::setApplicationInfo(const OAIApplicationInfo &application_info) {
    m_application_info = application_info;
    m_application_info_isSet = true;
}

bool OAIPaymentRequest::is_application_info_Set() const{
    return m_application_info_isSet;
}

bool OAIPaymentRequest::is_application_info_Valid() const{
    return m_application_info_isValid;
}

OAIBankAccount OAIPaymentRequest::getBankAccount() const {
    return m_bank_account;
}
void OAIPaymentRequest::setBankAccount(const OAIBankAccount &bank_account) {
    m_bank_account = bank_account;
    m_bank_account_isSet = true;
}

bool OAIPaymentRequest::is_bank_account_Set() const{
    return m_bank_account_isSet;
}

bool OAIPaymentRequest::is_bank_account_Valid() const{
    return m_bank_account_isValid;
}

OAIAddress OAIPaymentRequest::getBillingAddress() const {
    return m_billing_address;
}
void OAIPaymentRequest::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIPaymentRequest::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIPaymentRequest::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAIBrowserInfo OAIPaymentRequest::getBrowserInfo() const {
    return m_browser_info;
}
void OAIPaymentRequest::setBrowserInfo(const OAIBrowserInfo &browser_info) {
    m_browser_info = browser_info;
    m_browser_info_isSet = true;
}

bool OAIPaymentRequest::is_browser_info_Set() const{
    return m_browser_info_isSet;
}

bool OAIPaymentRequest::is_browser_info_Valid() const{
    return m_browser_info_isValid;
}

qint32 OAIPaymentRequest::getCaptureDelayHours() const {
    return m_capture_delay_hours;
}
void OAIPaymentRequest::setCaptureDelayHours(const qint32 &capture_delay_hours) {
    m_capture_delay_hours = capture_delay_hours;
    m_capture_delay_hours_isSet = true;
}

bool OAIPaymentRequest::is_capture_delay_hours_Set() const{
    return m_capture_delay_hours_isSet;
}

bool OAIPaymentRequest::is_capture_delay_hours_Valid() const{
    return m_capture_delay_hours_isValid;
}

OAICard OAIPaymentRequest::getCard() const {
    return m_card;
}
void OAIPaymentRequest::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIPaymentRequest::is_card_Set() const{
    return m_card_isSet;
}

bool OAIPaymentRequest::is_card_Valid() const{
    return m_card_isValid;
}

QDate OAIPaymentRequest::getDateOfBirth() const {
    return m_date_of_birth;
}
void OAIPaymentRequest::setDateOfBirth(const QDate &date_of_birth) {
    m_date_of_birth = date_of_birth;
    m_date_of_birth_isSet = true;
}

bool OAIPaymentRequest::is_date_of_birth_Set() const{
    return m_date_of_birth_isSet;
}

bool OAIPaymentRequest::is_date_of_birth_Valid() const{
    return m_date_of_birth_isValid;
}

OAIForexQuote OAIPaymentRequest::getDccQuote() const {
    return m_dcc_quote;
}
void OAIPaymentRequest::setDccQuote(const OAIForexQuote &dcc_quote) {
    m_dcc_quote = dcc_quote;
    m_dcc_quote_isSet = true;
}

bool OAIPaymentRequest::is_dcc_quote_Set() const{
    return m_dcc_quote_isSet;
}

bool OAIPaymentRequest::is_dcc_quote_Valid() const{
    return m_dcc_quote_isValid;
}

OAIAddress OAIPaymentRequest::getDeliveryAddress() const {
    return m_delivery_address;
}
void OAIPaymentRequest::setDeliveryAddress(const OAIAddress &delivery_address) {
    m_delivery_address = delivery_address;
    m_delivery_address_isSet = true;
}

bool OAIPaymentRequest::is_delivery_address_Set() const{
    return m_delivery_address_isSet;
}

bool OAIPaymentRequest::is_delivery_address_Valid() const{
    return m_delivery_address_isValid;
}

QDateTime OAIPaymentRequest::getDeliveryDate() const {
    return m_delivery_date;
}
void OAIPaymentRequest::setDeliveryDate(const QDateTime &delivery_date) {
    m_delivery_date = delivery_date;
    m_delivery_date_isSet = true;
}

bool OAIPaymentRequest::is_delivery_date_Set() const{
    return m_delivery_date_isSet;
}

bool OAIPaymentRequest::is_delivery_date_Valid() const{
    return m_delivery_date_isValid;
}

QString OAIPaymentRequest::getDeviceFingerprint() const {
    return m_device_fingerprint;
}
void OAIPaymentRequest::setDeviceFingerprint(const QString &device_fingerprint) {
    m_device_fingerprint = device_fingerprint;
    m_device_fingerprint_isSet = true;
}

bool OAIPaymentRequest::is_device_fingerprint_Set() const{
    return m_device_fingerprint_isSet;
}

bool OAIPaymentRequest::is_device_fingerprint_Valid() const{
    return m_device_fingerprint_isValid;
}

bool OAIPaymentRequest::isEnableRealTimeUpdate() const {
    return m_enable_real_time_update;
}
void OAIPaymentRequest::setEnableRealTimeUpdate(const bool &enable_real_time_update) {
    m_enable_real_time_update = enable_real_time_update;
    m_enable_real_time_update_isSet = true;
}

bool OAIPaymentRequest::is_enable_real_time_update_Set() const{
    return m_enable_real_time_update_isSet;
}

bool OAIPaymentRequest::is_enable_real_time_update_Valid() const{
    return m_enable_real_time_update_isValid;
}

QString OAIPaymentRequest::getEntityType() const {
    return m_entity_type;
}
void OAIPaymentRequest::setEntityType(const QString &entity_type) {
    m_entity_type = entity_type;
    m_entity_type_isSet = true;
}

bool OAIPaymentRequest::is_entity_type_Set() const{
    return m_entity_type_isSet;
}

bool OAIPaymentRequest::is_entity_type_Valid() const{
    return m_entity_type_isValid;
}

qint32 OAIPaymentRequest::getFraudOffset() const {
    return m_fraud_offset;
}
void OAIPaymentRequest::setFraudOffset(const qint32 &fraud_offset) {
    m_fraud_offset = fraud_offset;
    m_fraud_offset_isSet = true;
}

bool OAIPaymentRequest::is_fraud_offset_Set() const{
    return m_fraud_offset_isSet;
}

bool OAIPaymentRequest::is_fraud_offset_Valid() const{
    return m_fraud_offset_isValid;
}

QString OAIPaymentRequest::getFundingSource() const {
    return m_funding_source;
}
void OAIPaymentRequest::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAIPaymentRequest::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAIPaymentRequest::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

OAIInstallments OAIPaymentRequest::getInstallments() const {
    return m_installments;
}
void OAIPaymentRequest::setInstallments(const OAIInstallments &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAIPaymentRequest::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAIPaymentRequest::is_installments_Valid() const{
    return m_installments_isValid;
}

OAIMandate OAIPaymentRequest::getMandate() const {
    return m_mandate;
}
void OAIPaymentRequest::setMandate(const OAIMandate &mandate) {
    m_mandate = mandate;
    m_mandate_isSet = true;
}

bool OAIPaymentRequest::is_mandate_Set() const{
    return m_mandate_isSet;
}

bool OAIPaymentRequest::is_mandate_Valid() const{
    return m_mandate_isValid;
}

QString OAIPaymentRequest::getMcc() const {
    return m_mcc;
}
void OAIPaymentRequest::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIPaymentRequest::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIPaymentRequest::is_mcc_Valid() const{
    return m_mcc_isValid;
}

QString OAIPaymentRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIPaymentRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIPaymentRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIPaymentRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIPaymentRequest::getMerchantOrderReference() const {
    return m_merchant_order_reference;
}
void OAIPaymentRequest::setMerchantOrderReference(const QString &merchant_order_reference) {
    m_merchant_order_reference = merchant_order_reference;
    m_merchant_order_reference_isSet = true;
}

bool OAIPaymentRequest::is_merchant_order_reference_Set() const{
    return m_merchant_order_reference_isSet;
}

bool OAIPaymentRequest::is_merchant_order_reference_Valid() const{
    return m_merchant_order_reference_isValid;
}

OAIMerchantRiskIndicator OAIPaymentRequest::getMerchantRiskIndicator() const {
    return m_merchant_risk_indicator;
}
void OAIPaymentRequest::setMerchantRiskIndicator(const OAIMerchantRiskIndicator &merchant_risk_indicator) {
    m_merchant_risk_indicator = merchant_risk_indicator;
    m_merchant_risk_indicator_isSet = true;
}

bool OAIPaymentRequest::is_merchant_risk_indicator_Set() const{
    return m_merchant_risk_indicator_isSet;
}

bool OAIPaymentRequest::is_merchant_risk_indicator_Valid() const{
    return m_merchant_risk_indicator_isValid;
}

QMap<QString, QString> OAIPaymentRequest::getMetadata() const {
    return m_metadata;
}
void OAIPaymentRequest::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPaymentRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPaymentRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIThreeDSecureData OAIPaymentRequest::getMpiData() const {
    return m_mpi_data;
}
void OAIPaymentRequest::setMpiData(const OAIThreeDSecureData &mpi_data) {
    m_mpi_data = mpi_data;
    m_mpi_data_isSet = true;
}

bool OAIPaymentRequest::is_mpi_data_Set() const{
    return m_mpi_data_isSet;
}

bool OAIPaymentRequest::is_mpi_data_Valid() const{
    return m_mpi_data_isValid;
}

QString OAIPaymentRequest::getNationality() const {
    return m_nationality;
}
void OAIPaymentRequest::setNationality(const QString &nationality) {
    m_nationality = nationality;
    m_nationality_isSet = true;
}

bool OAIPaymentRequest::is_nationality_Set() const{
    return m_nationality_isSet;
}

bool OAIPaymentRequest::is_nationality_Valid() const{
    return m_nationality_isValid;
}

QString OAIPaymentRequest::getOrderReference() const {
    return m_order_reference;
}
void OAIPaymentRequest::setOrderReference(const QString &order_reference) {
    m_order_reference = order_reference;
    m_order_reference_isSet = true;
}

bool OAIPaymentRequest::is_order_reference_Set() const{
    return m_order_reference_isSet;
}

bool OAIPaymentRequest::is_order_reference_Valid() const{
    return m_order_reference_isValid;
}

OAIRecurring OAIPaymentRequest::getRecurring() const {
    return m_recurring;
}
void OAIPaymentRequest::setRecurring(const OAIRecurring &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAIPaymentRequest::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAIPaymentRequest::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAIPaymentRequest::getRecurringProcessingModel() const {
    return m_recurring_processing_model;
}
void OAIPaymentRequest::setRecurringProcessingModel(const QString &recurring_processing_model) {
    m_recurring_processing_model = recurring_processing_model;
    m_recurring_processing_model_isSet = true;
}

bool OAIPaymentRequest::is_recurring_processing_model_Set() const{
    return m_recurring_processing_model_isSet;
}

bool OAIPaymentRequest::is_recurring_processing_model_Valid() const{
    return m_recurring_processing_model_isValid;
}

QString OAIPaymentRequest::getReference() const {
    return m_reference;
}
void OAIPaymentRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAIPaymentRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAIPaymentRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAIPaymentRequest::getSelectedBrand() const {
    return m_selected_brand;
}
void OAIPaymentRequest::setSelectedBrand(const QString &selected_brand) {
    m_selected_brand = selected_brand;
    m_selected_brand_isSet = true;
}

bool OAIPaymentRequest::is_selected_brand_Set() const{
    return m_selected_brand_isSet;
}

bool OAIPaymentRequest::is_selected_brand_Valid() const{
    return m_selected_brand_isValid;
}

QString OAIPaymentRequest::getSelectedRecurringDetailReference() const {
    return m_selected_recurring_detail_reference;
}
void OAIPaymentRequest::setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference) {
    m_selected_recurring_detail_reference = selected_recurring_detail_reference;
    m_selected_recurring_detail_reference_isSet = true;
}

bool OAIPaymentRequest::is_selected_recurring_detail_reference_Set() const{
    return m_selected_recurring_detail_reference_isSet;
}

bool OAIPaymentRequest::is_selected_recurring_detail_reference_Valid() const{
    return m_selected_recurring_detail_reference_isValid;
}

QString OAIPaymentRequest::getSessionId() const {
    return m_session_id;
}
void OAIPaymentRequest::setSessionId(const QString &session_id) {
    m_session_id = session_id;
    m_session_id_isSet = true;
}

bool OAIPaymentRequest::is_session_id_Set() const{
    return m_session_id_isSet;
}

bool OAIPaymentRequest::is_session_id_Valid() const{
    return m_session_id_isValid;
}

QString OAIPaymentRequest::getShopperEmail() const {
    return m_shopper_email;
}
void OAIPaymentRequest::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIPaymentRequest::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIPaymentRequest::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

QString OAIPaymentRequest::getShopperIp() const {
    return m_shopper_ip;
}
void OAIPaymentRequest::setShopperIp(const QString &shopper_ip) {
    m_shopper_ip = shopper_ip;
    m_shopper_ip_isSet = true;
}

bool OAIPaymentRequest::is_shopper_ip_Set() const{
    return m_shopper_ip_isSet;
}

bool OAIPaymentRequest::is_shopper_ip_Valid() const{
    return m_shopper_ip_isValid;
}

QString OAIPaymentRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAIPaymentRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAIPaymentRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAIPaymentRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAIPaymentRequest::getShopperLocale() const {
    return m_shopper_locale;
}
void OAIPaymentRequest::setShopperLocale(const QString &shopper_locale) {
    m_shopper_locale = shopper_locale;
    m_shopper_locale_isSet = true;
}

bool OAIPaymentRequest::is_shopper_locale_Set() const{
    return m_shopper_locale_isSet;
}

bool OAIPaymentRequest::is_shopper_locale_Valid() const{
    return m_shopper_locale_isValid;
}

OAIName OAIPaymentRequest::getShopperName() const {
    return m_shopper_name;
}
void OAIPaymentRequest::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIPaymentRequest::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIPaymentRequest::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIPaymentRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPaymentRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPaymentRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPaymentRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

QString OAIPaymentRequest::getShopperStatement() const {
    return m_shopper_statement;
}
void OAIPaymentRequest::setShopperStatement(const QString &shopper_statement) {
    m_shopper_statement = shopper_statement;
    m_shopper_statement_isSet = true;
}

bool OAIPaymentRequest::is_shopper_statement_Set() const{
    return m_shopper_statement_isSet;
}

bool OAIPaymentRequest::is_shopper_statement_Valid() const{
    return m_shopper_statement_isValid;
}

QString OAIPaymentRequest::getSocialSecurityNumber() const {
    return m_social_security_number;
}
void OAIPaymentRequest::setSocialSecurityNumber(const QString &social_security_number) {
    m_social_security_number = social_security_number;
    m_social_security_number_isSet = true;
}

bool OAIPaymentRequest::is_social_security_number_Set() const{
    return m_social_security_number_isSet;
}

bool OAIPaymentRequest::is_social_security_number_Valid() const{
    return m_social_security_number_isValid;
}

QList<OAISplit> OAIPaymentRequest::getSplits() const {
    return m_splits;
}
void OAIPaymentRequest::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAIPaymentRequest::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAIPaymentRequest::is_splits_Valid() const{
    return m_splits_isValid;
}

QString OAIPaymentRequest::getStore() const {
    return m_store;
}
void OAIPaymentRequest::setStore(const QString &store) {
    m_store = store;
    m_store_isSet = true;
}

bool OAIPaymentRequest::is_store_Set() const{
    return m_store_isSet;
}

bool OAIPaymentRequest::is_store_Valid() const{
    return m_store_isValid;
}

QString OAIPaymentRequest::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIPaymentRequest::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIPaymentRequest::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIPaymentRequest::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

OAIThreeDS2RequestData OAIPaymentRequest::getThreeDs2RequestData() const {
    return m_three_ds2_request_data;
}
void OAIPaymentRequest::setThreeDs2RequestData(const OAIThreeDS2RequestData &three_ds2_request_data) {
    m_three_ds2_request_data = three_ds2_request_data;
    m_three_ds2_request_data_isSet = true;
}

bool OAIPaymentRequest::is_three_ds2_request_data_Set() const{
    return m_three_ds2_request_data_isSet;
}

bool OAIPaymentRequest::is_three_ds2_request_data_Valid() const{
    return m_three_ds2_request_data_isValid;
}

bool OAIPaymentRequest::isThreeDsAuthenticationOnly() const {
    return m_three_ds_authentication_only;
}
void OAIPaymentRequest::setThreeDsAuthenticationOnly(const bool &three_ds_authentication_only) {
    m_three_ds_authentication_only = three_ds_authentication_only;
    m_three_ds_authentication_only_isSet = true;
}

bool OAIPaymentRequest::is_three_ds_authentication_only_Set() const{
    return m_three_ds_authentication_only_isSet;
}

bool OAIPaymentRequest::is_three_ds_authentication_only_Valid() const{
    return m_three_ds_authentication_only_isValid;
}

QString OAIPaymentRequest::getTotalsGroup() const {
    return m_totals_group;
}
void OAIPaymentRequest::setTotalsGroup(const QString &totals_group) {
    m_totals_group = totals_group;
    m_totals_group_isSet = true;
}

bool OAIPaymentRequest::is_totals_group_Set() const{
    return m_totals_group_isSet;
}

bool OAIPaymentRequest::is_totals_group_Valid() const{
    return m_totals_group_isValid;
}

bool OAIPaymentRequest::isTrustedShopper() const {
    return m_trusted_shopper;
}
void OAIPaymentRequest::setTrustedShopper(const bool &trusted_shopper) {
    m_trusted_shopper = trusted_shopper;
    m_trusted_shopper_isSet = true;
}

bool OAIPaymentRequest::is_trusted_shopper_Set() const{
    return m_trusted_shopper_isSet;
}

bool OAIPaymentRequest::is_trusted_shopper_Valid() const{
    return m_trusted_shopper_isValid;
}

bool OAIPaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_browser_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_capture_delay_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_of_birth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcc_quote.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_real_time_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mandate.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_risk_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nationality_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_processing_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_statement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_security_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_store_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_request_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_authentication_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trusted_shopper_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_merchant_account_isValid && m_reference_isValid && true;
}

} // namespace OpenAPI
