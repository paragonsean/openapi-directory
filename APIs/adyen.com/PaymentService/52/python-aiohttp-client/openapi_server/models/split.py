# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.split_amount import SplitAmount
from openapi_server import util


class Split(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, amount: SplitAmount=None, description: str=None, reference: str=None, type: str=None):
        """Split - a model defined in OpenAPI

        :param account: The account of this Split.
        :param amount: The amount of this Split.
        :param description: The description of this Split.
        :param reference: The reference of this Split.
        :param type: The type of this Split.
        """
        self.openapi_types = {
            'account': str,
            'amount': SplitAmount,
            'description': str,
            'reference': str,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'amount': 'amount',
            'description': 'description',
            'reference': 'reference',
            'type': 'type'
        }

        self._account = account
        self._amount = amount
        self._description = description
        self._reference = reference
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Split':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Split of this Split.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this Split.

        The unique identifier of the account to which the split amount is booked. Required if `type` is **MarketPlace** or **BalanceAccount**.  * [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic): The [`accountCode`](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked. * [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms): The [`balanceAccountId`](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked.

        :return: The account of this Split.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Split.

        The unique identifier of the account to which the split amount is booked. Required if `type` is **MarketPlace** or **BalanceAccount**.  * [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic): The [`accountCode`](https://docs.adyen.com/api-explorer/Account/latest/post/updateAccount#request-accountCode) of the account to which the split amount is booked. * [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms): The [`balanceAccountId`](https://docs.adyen.com/api-explorer/balanceplatform/latest/get/balanceAccounts/_id_#path-id) of the account to which the split amount is booked.

        :param account: The account of this Split.
        :type account: str
        """

        self._account = account

    @property
    def amount(self):
        """Gets the amount of this Split.

        The amount of the split item.  * Required for all split types in the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * Required if `type` is **BalanceAccount**, **Commission**, **Default**, or **VAT** in your [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms) integration.

        :return: The amount of this Split.
        :rtype: SplitAmount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Split.

        The amount of the split item.  * Required for all split types in the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * Required if `type` is **BalanceAccount**, **Commission**, **Default**, or **VAT** in your [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms) integration.

        :param amount: The amount of this Split.
        :type amount: SplitAmount
        """

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this Split.

        Your description for the split item.

        :return: The description of this Split.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Split.

        Your description for the split item.

        :param description: The description of this Split.
        :type description: str
        """

        self._description = description

    @property
    def reference(self):
        """Gets the reference of this Split.

        Your unique reference for the split item.  This is required if `type` is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/marketplaces-and-platforms)).  For the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports.

        :return: The reference of this Split.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Split.

        Your unique reference for the split item.  This is required if `type` is **MarketPlace** ([Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic)) or **BalanceAccount** ([Balance Platform](https://docs.adyen.com/marketplaces-and-platforms)).  For the other types, we also recommend providing a **unique** reference so you can reconcile the split and the associated payment in the transaction overview and in the reports.

        :param reference: The reference of this Split.
        :type reference: str
        """

        self._reference = reference

    @property
    def type(self):
        """Gets the type of this Split.

        The type of the split item.  Possible values:  * [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic): **Commission**, **Default**, **Marketplace**, **PaymentFee**, **VAT**. * [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms): **BalanceAccount**, **Commission**, **Default**, **PaymentFee**, **Remainder**, **Surcharge**, **Tip**, **VAT**.

        :return: The type of this Split.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Split.

        The type of the split item.  Possible values:  * [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic): **Commission**, **Default**, **Marketplace**, **PaymentFee**, **VAT**. * [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms): **BalanceAccount**, **Commission**, **Default**, **PaymentFee**, **Remainder**, **Surcharge**, **Tip**, **VAT**.

        :param type: The type of this Split.
        :type type: str
        """
        allowed_values = ["BalanceAccount", "Commission", "Default", "MarketPlace", "PaymentFee", "Remainder", "Surcharge", "Tip", "VAT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
