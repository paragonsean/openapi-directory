/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v52/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v52/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 52
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonField from './CommonField';
import ExternalPlatform from './ExternalPlatform';
import MerchantDevice from './MerchantDevice';
import ShopperInteractionDevice from './ShopperInteractionDevice';

/**
 * The ApplicationInfo model module.
 * @module model/ApplicationInfo
 * @version 52
 */
class ApplicationInfo {
    /**
     * Constructs a new <code>ApplicationInfo</code>.
     * @alias module:model/ApplicationInfo
     */
    constructor() { 
        
        ApplicationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ApplicationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationInfo} obj Optional instance to populate.
     * @return {module:model/ApplicationInfo} The populated <code>ApplicationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationInfo();

            if (data.hasOwnProperty('adyenLibrary')) {
                obj['adyenLibrary'] = CommonField.constructFromObject(data['adyenLibrary']);
            }
            if (data.hasOwnProperty('adyenPaymentSource')) {
                obj['adyenPaymentSource'] = CommonField.constructFromObject(data['adyenPaymentSource']);
            }
            if (data.hasOwnProperty('externalPlatform')) {
                obj['externalPlatform'] = ExternalPlatform.constructFromObject(data['externalPlatform']);
            }
            if (data.hasOwnProperty('merchantApplication')) {
                obj['merchantApplication'] = CommonField.constructFromObject(data['merchantApplication']);
            }
            if (data.hasOwnProperty('merchantDevice')) {
                obj['merchantDevice'] = MerchantDevice.constructFromObject(data['merchantDevice']);
            }
            if (data.hasOwnProperty('shopperInteractionDevice')) {
                obj['shopperInteractionDevice'] = ShopperInteractionDevice.constructFromObject(data['shopperInteractionDevice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `adyenLibrary`
        if (data['adyenLibrary']) { // data not null
          CommonField.validateJSON(data['adyenLibrary']);
        }
        // validate the optional field `adyenPaymentSource`
        if (data['adyenPaymentSource']) { // data not null
          CommonField.validateJSON(data['adyenPaymentSource']);
        }
        // validate the optional field `externalPlatform`
        if (data['externalPlatform']) { // data not null
          ExternalPlatform.validateJSON(data['externalPlatform']);
        }
        // validate the optional field `merchantApplication`
        if (data['merchantApplication']) { // data not null
          CommonField.validateJSON(data['merchantApplication']);
        }
        // validate the optional field `merchantDevice`
        if (data['merchantDevice']) { // data not null
          MerchantDevice.validateJSON(data['merchantDevice']);
        }
        // validate the optional field `shopperInteractionDevice`
        if (data['shopperInteractionDevice']) { // data not null
          ShopperInteractionDevice.validateJSON(data['shopperInteractionDevice']);
        }

        return true;
    }


}



/**
 * Adyen-developed software, such as libraries and plugins, used to interact with the Adyen API. For example, Magento plugin, Java API library, etc.
 * @member {module:model/CommonField} adyenLibrary
 */
ApplicationInfo.prototype['adyenLibrary'] = undefined;

/**
 * Adyen-developed software to get payment details. For example, Checkout SDK, Secured Fields SDK, etc.
 * @member {module:model/CommonField} adyenPaymentSource
 */
ApplicationInfo.prototype['adyenPaymentSource'] = undefined;

/**
 * Third-party developed platform used to initiate payment requests. For example, Magento, Zuora, etc.
 * @member {module:model/ExternalPlatform} externalPlatform
 */
ApplicationInfo.prototype['externalPlatform'] = undefined;

/**
 * Merchant developed software, such as cashier application, used to interact with the Adyen API.
 * @member {module:model/CommonField} merchantApplication
 */
ApplicationInfo.prototype['merchantApplication'] = undefined;

/**
 * Merchant device information.
 * @member {module:model/MerchantDevice} merchantDevice
 */
ApplicationInfo.prototype['merchantDevice'] = undefined;

/**
 * Shopper interaction device, such as terminal, mobile device or web browser, to initiate payment requests.
 * @member {module:model/ShopperInteractionDevice} shopperInteractionDevice
 */
ApplicationInfo.prototype['shopperInteractionDevice'] = undefined;






export default ApplicationInfo;

