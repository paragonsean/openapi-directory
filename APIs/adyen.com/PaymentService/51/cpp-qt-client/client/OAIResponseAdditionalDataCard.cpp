/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v51/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v51/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAdditionalDataCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAdditionalDataCard::OAIResponseAdditionalDataCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAdditionalDataCard::OAIResponseAdditionalDataCard() {
    this->initializeModel();
}

OAIResponseAdditionalDataCard::~OAIResponseAdditionalDataCard() {}

void OAIResponseAdditionalDataCard::initializeModel() {

    m_card_bin_isSet = false;
    m_card_bin_isValid = false;

    m_card_holder_name_isSet = false;
    m_card_holder_name_isValid = false;

    m_card_issuing_bank_isSet = false;
    m_card_issuing_bank_isValid = false;

    m_card_issuing_country_isSet = false;
    m_card_issuing_country_isValid = false;

    m_card_issuing_currency_isSet = false;
    m_card_issuing_currency_isValid = false;

    m_card_payment_method_isSet = false;
    m_card_payment_method_isValid = false;

    m_card_summary_isSet = false;
    m_card_summary_isValid = false;

    m_issuer_bin_isSet = false;
    m_issuer_bin_isValid = false;
}

void OAIResponseAdditionalDataCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAdditionalDataCard::fromJsonObject(QJsonObject json) {

    m_card_bin_isValid = ::OpenAPI::fromJsonValue(m_card_bin, json[QString("cardBin")]);
    m_card_bin_isSet = !json[QString("cardBin")].isNull() && m_card_bin_isValid;

    m_card_holder_name_isValid = ::OpenAPI::fromJsonValue(m_card_holder_name, json[QString("cardHolderName")]);
    m_card_holder_name_isSet = !json[QString("cardHolderName")].isNull() && m_card_holder_name_isValid;

    m_card_issuing_bank_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_bank, json[QString("cardIssuingBank")]);
    m_card_issuing_bank_isSet = !json[QString("cardIssuingBank")].isNull() && m_card_issuing_bank_isValid;

    m_card_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_country, json[QString("cardIssuingCountry")]);
    m_card_issuing_country_isSet = !json[QString("cardIssuingCountry")].isNull() && m_card_issuing_country_isValid;

    m_card_issuing_currency_isValid = ::OpenAPI::fromJsonValue(m_card_issuing_currency, json[QString("cardIssuingCurrency")]);
    m_card_issuing_currency_isSet = !json[QString("cardIssuingCurrency")].isNull() && m_card_issuing_currency_isValid;

    m_card_payment_method_isValid = ::OpenAPI::fromJsonValue(m_card_payment_method, json[QString("cardPaymentMethod")]);
    m_card_payment_method_isSet = !json[QString("cardPaymentMethod")].isNull() && m_card_payment_method_isValid;

    m_card_summary_isValid = ::OpenAPI::fromJsonValue(m_card_summary, json[QString("cardSummary")]);
    m_card_summary_isSet = !json[QString("cardSummary")].isNull() && m_card_summary_isValid;

    m_issuer_bin_isValid = ::OpenAPI::fromJsonValue(m_issuer_bin, json[QString("issuerBin")]);
    m_issuer_bin_isSet = !json[QString("issuerBin")].isNull() && m_issuer_bin_isValid;
}

QString OAIResponseAdditionalDataCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAdditionalDataCard::asJsonObject() const {
    QJsonObject obj;
    if (m_card_bin_isSet) {
        obj.insert(QString("cardBin"), ::OpenAPI::toJsonValue(m_card_bin));
    }
    if (m_card_holder_name_isSet) {
        obj.insert(QString("cardHolderName"), ::OpenAPI::toJsonValue(m_card_holder_name));
    }
    if (m_card_issuing_bank_isSet) {
        obj.insert(QString("cardIssuingBank"), ::OpenAPI::toJsonValue(m_card_issuing_bank));
    }
    if (m_card_issuing_country_isSet) {
        obj.insert(QString("cardIssuingCountry"), ::OpenAPI::toJsonValue(m_card_issuing_country));
    }
    if (m_card_issuing_currency_isSet) {
        obj.insert(QString("cardIssuingCurrency"), ::OpenAPI::toJsonValue(m_card_issuing_currency));
    }
    if (m_card_payment_method_isSet) {
        obj.insert(QString("cardPaymentMethod"), ::OpenAPI::toJsonValue(m_card_payment_method));
    }
    if (m_card_summary_isSet) {
        obj.insert(QString("cardSummary"), ::OpenAPI::toJsonValue(m_card_summary));
    }
    if (m_issuer_bin_isSet) {
        obj.insert(QString("issuerBin"), ::OpenAPI::toJsonValue(m_issuer_bin));
    }
    return obj;
}

QString OAIResponseAdditionalDataCard::getCardBin() const {
    return m_card_bin;
}
void OAIResponseAdditionalDataCard::setCardBin(const QString &card_bin) {
    m_card_bin = card_bin;
    m_card_bin_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_bin_Set() const{
    return m_card_bin_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_bin_Valid() const{
    return m_card_bin_isValid;
}

QString OAIResponseAdditionalDataCard::getCardHolderName() const {
    return m_card_holder_name;
}
void OAIResponseAdditionalDataCard::setCardHolderName(const QString &card_holder_name) {
    m_card_holder_name = card_holder_name;
    m_card_holder_name_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_holder_name_Set() const{
    return m_card_holder_name_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_holder_name_Valid() const{
    return m_card_holder_name_isValid;
}

QString OAIResponseAdditionalDataCard::getCardIssuingBank() const {
    return m_card_issuing_bank;
}
void OAIResponseAdditionalDataCard::setCardIssuingBank(const QString &card_issuing_bank) {
    m_card_issuing_bank = card_issuing_bank;
    m_card_issuing_bank_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_bank_Set() const{
    return m_card_issuing_bank_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_bank_Valid() const{
    return m_card_issuing_bank_isValid;
}

QString OAIResponseAdditionalDataCard::getCardIssuingCountry() const {
    return m_card_issuing_country;
}
void OAIResponseAdditionalDataCard::setCardIssuingCountry(const QString &card_issuing_country) {
    m_card_issuing_country = card_issuing_country;
    m_card_issuing_country_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_country_Set() const{
    return m_card_issuing_country_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_country_Valid() const{
    return m_card_issuing_country_isValid;
}

QString OAIResponseAdditionalDataCard::getCardIssuingCurrency() const {
    return m_card_issuing_currency;
}
void OAIResponseAdditionalDataCard::setCardIssuingCurrency(const QString &card_issuing_currency) {
    m_card_issuing_currency = card_issuing_currency;
    m_card_issuing_currency_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_currency_Set() const{
    return m_card_issuing_currency_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_issuing_currency_Valid() const{
    return m_card_issuing_currency_isValid;
}

QString OAIResponseAdditionalDataCard::getCardPaymentMethod() const {
    return m_card_payment_method;
}
void OAIResponseAdditionalDataCard::setCardPaymentMethod(const QString &card_payment_method) {
    m_card_payment_method = card_payment_method;
    m_card_payment_method_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_payment_method_Set() const{
    return m_card_payment_method_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_payment_method_Valid() const{
    return m_card_payment_method_isValid;
}

QString OAIResponseAdditionalDataCard::getCardSummary() const {
    return m_card_summary;
}
void OAIResponseAdditionalDataCard::setCardSummary(const QString &card_summary) {
    m_card_summary = card_summary;
    m_card_summary_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_card_summary_Set() const{
    return m_card_summary_isSet;
}

bool OAIResponseAdditionalDataCard::is_card_summary_Valid() const{
    return m_card_summary_isValid;
}

QString OAIResponseAdditionalDataCard::getIssuerBin() const {
    return m_issuer_bin;
}
void OAIResponseAdditionalDataCard::setIssuerBin(const QString &issuer_bin) {
    m_issuer_bin = issuer_bin;
    m_issuer_bin_isSet = true;
}

bool OAIResponseAdditionalDataCard::is_issuer_bin_Set() const{
    return m_issuer_bin_isSet;
}

bool OAIResponseAdditionalDataCard::is_issuer_bin_Valid() const{
    return m_issuer_bin_isValid;
}

bool OAIResponseAdditionalDataCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_holder_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_bank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_issuing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_bin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAdditionalDataCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
