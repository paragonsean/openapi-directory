/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v51/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v51/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 51
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataRatepay.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataRatepay::OAIAdditionalDataRatepay(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataRatepay::OAIAdditionalDataRatepay() {
    this->initializeModel();
}

OAIAdditionalDataRatepay::~OAIAdditionalDataRatepay() {}

void OAIAdditionalDataRatepay::initializeModel() {

    m_ratepay_installment_amount_isSet = false;
    m_ratepay_installment_amount_isValid = false;

    m_ratepay_interest_rate_isSet = false;
    m_ratepay_interest_rate_isValid = false;

    m_ratepay_last_installment_amount_isSet = false;
    m_ratepay_last_installment_amount_isValid = false;

    m_ratepay_payment_firstday_isSet = false;
    m_ratepay_payment_firstday_isValid = false;

    m_ratepaydata_delivery_date_isSet = false;
    m_ratepaydata_delivery_date_isValid = false;

    m_ratepaydata_due_date_isSet = false;
    m_ratepaydata_due_date_isValid = false;

    m_ratepaydata_invoice_date_isSet = false;
    m_ratepaydata_invoice_date_isValid = false;

    m_ratepaydata_invoice_id_isSet = false;
    m_ratepaydata_invoice_id_isValid = false;
}

void OAIAdditionalDataRatepay::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataRatepay::fromJsonObject(QJsonObject json) {

    m_ratepay_installment_amount_isValid = ::OpenAPI::fromJsonValue(m_ratepay_installment_amount, json[QString("ratepay.installmentAmount")]);
    m_ratepay_installment_amount_isSet = !json[QString("ratepay.installmentAmount")].isNull() && m_ratepay_installment_amount_isValid;

    m_ratepay_interest_rate_isValid = ::OpenAPI::fromJsonValue(m_ratepay_interest_rate, json[QString("ratepay.interestRate")]);
    m_ratepay_interest_rate_isSet = !json[QString("ratepay.interestRate")].isNull() && m_ratepay_interest_rate_isValid;

    m_ratepay_last_installment_amount_isValid = ::OpenAPI::fromJsonValue(m_ratepay_last_installment_amount, json[QString("ratepay.lastInstallmentAmount")]);
    m_ratepay_last_installment_amount_isSet = !json[QString("ratepay.lastInstallmentAmount")].isNull() && m_ratepay_last_installment_amount_isValid;

    m_ratepay_payment_firstday_isValid = ::OpenAPI::fromJsonValue(m_ratepay_payment_firstday, json[QString("ratepay.paymentFirstday")]);
    m_ratepay_payment_firstday_isSet = !json[QString("ratepay.paymentFirstday")].isNull() && m_ratepay_payment_firstday_isValid;

    m_ratepaydata_delivery_date_isValid = ::OpenAPI::fromJsonValue(m_ratepaydata_delivery_date, json[QString("ratepaydata.deliveryDate")]);
    m_ratepaydata_delivery_date_isSet = !json[QString("ratepaydata.deliveryDate")].isNull() && m_ratepaydata_delivery_date_isValid;

    m_ratepaydata_due_date_isValid = ::OpenAPI::fromJsonValue(m_ratepaydata_due_date, json[QString("ratepaydata.dueDate")]);
    m_ratepaydata_due_date_isSet = !json[QString("ratepaydata.dueDate")].isNull() && m_ratepaydata_due_date_isValid;

    m_ratepaydata_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_ratepaydata_invoice_date, json[QString("ratepaydata.invoiceDate")]);
    m_ratepaydata_invoice_date_isSet = !json[QString("ratepaydata.invoiceDate")].isNull() && m_ratepaydata_invoice_date_isValid;

    m_ratepaydata_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_ratepaydata_invoice_id, json[QString("ratepaydata.invoiceId")]);
    m_ratepaydata_invoice_id_isSet = !json[QString("ratepaydata.invoiceId")].isNull() && m_ratepaydata_invoice_id_isValid;
}

QString OAIAdditionalDataRatepay::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataRatepay::asJsonObject() const {
    QJsonObject obj;
    if (m_ratepay_installment_amount_isSet) {
        obj.insert(QString("ratepay.installmentAmount"), ::OpenAPI::toJsonValue(m_ratepay_installment_amount));
    }
    if (m_ratepay_interest_rate_isSet) {
        obj.insert(QString("ratepay.interestRate"), ::OpenAPI::toJsonValue(m_ratepay_interest_rate));
    }
    if (m_ratepay_last_installment_amount_isSet) {
        obj.insert(QString("ratepay.lastInstallmentAmount"), ::OpenAPI::toJsonValue(m_ratepay_last_installment_amount));
    }
    if (m_ratepay_payment_firstday_isSet) {
        obj.insert(QString("ratepay.paymentFirstday"), ::OpenAPI::toJsonValue(m_ratepay_payment_firstday));
    }
    if (m_ratepaydata_delivery_date_isSet) {
        obj.insert(QString("ratepaydata.deliveryDate"), ::OpenAPI::toJsonValue(m_ratepaydata_delivery_date));
    }
    if (m_ratepaydata_due_date_isSet) {
        obj.insert(QString("ratepaydata.dueDate"), ::OpenAPI::toJsonValue(m_ratepaydata_due_date));
    }
    if (m_ratepaydata_invoice_date_isSet) {
        obj.insert(QString("ratepaydata.invoiceDate"), ::OpenAPI::toJsonValue(m_ratepaydata_invoice_date));
    }
    if (m_ratepaydata_invoice_id_isSet) {
        obj.insert(QString("ratepaydata.invoiceId"), ::OpenAPI::toJsonValue(m_ratepaydata_invoice_id));
    }
    return obj;
}

QString OAIAdditionalDataRatepay::getRatepayInstallmentAmount() const {
    return m_ratepay_installment_amount;
}
void OAIAdditionalDataRatepay::setRatepayInstallmentAmount(const QString &ratepay_installment_amount) {
    m_ratepay_installment_amount = ratepay_installment_amount;
    m_ratepay_installment_amount_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepay_installment_amount_Set() const{
    return m_ratepay_installment_amount_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepay_installment_amount_Valid() const{
    return m_ratepay_installment_amount_isValid;
}

QString OAIAdditionalDataRatepay::getRatepayInterestRate() const {
    return m_ratepay_interest_rate;
}
void OAIAdditionalDataRatepay::setRatepayInterestRate(const QString &ratepay_interest_rate) {
    m_ratepay_interest_rate = ratepay_interest_rate;
    m_ratepay_interest_rate_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepay_interest_rate_Set() const{
    return m_ratepay_interest_rate_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepay_interest_rate_Valid() const{
    return m_ratepay_interest_rate_isValid;
}

QString OAIAdditionalDataRatepay::getRatepayLastInstallmentAmount() const {
    return m_ratepay_last_installment_amount;
}
void OAIAdditionalDataRatepay::setRatepayLastInstallmentAmount(const QString &ratepay_last_installment_amount) {
    m_ratepay_last_installment_amount = ratepay_last_installment_amount;
    m_ratepay_last_installment_amount_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepay_last_installment_amount_Set() const{
    return m_ratepay_last_installment_amount_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepay_last_installment_amount_Valid() const{
    return m_ratepay_last_installment_amount_isValid;
}

QString OAIAdditionalDataRatepay::getRatepayPaymentFirstday() const {
    return m_ratepay_payment_firstday;
}
void OAIAdditionalDataRatepay::setRatepayPaymentFirstday(const QString &ratepay_payment_firstday) {
    m_ratepay_payment_firstday = ratepay_payment_firstday;
    m_ratepay_payment_firstday_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepay_payment_firstday_Set() const{
    return m_ratepay_payment_firstday_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepay_payment_firstday_Valid() const{
    return m_ratepay_payment_firstday_isValid;
}

QString OAIAdditionalDataRatepay::getRatepaydataDeliveryDate() const {
    return m_ratepaydata_delivery_date;
}
void OAIAdditionalDataRatepay::setRatepaydataDeliveryDate(const QString &ratepaydata_delivery_date) {
    m_ratepaydata_delivery_date = ratepaydata_delivery_date;
    m_ratepaydata_delivery_date_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_delivery_date_Set() const{
    return m_ratepaydata_delivery_date_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_delivery_date_Valid() const{
    return m_ratepaydata_delivery_date_isValid;
}

QString OAIAdditionalDataRatepay::getRatepaydataDueDate() const {
    return m_ratepaydata_due_date;
}
void OAIAdditionalDataRatepay::setRatepaydataDueDate(const QString &ratepaydata_due_date) {
    m_ratepaydata_due_date = ratepaydata_due_date;
    m_ratepaydata_due_date_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_due_date_Set() const{
    return m_ratepaydata_due_date_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_due_date_Valid() const{
    return m_ratepaydata_due_date_isValid;
}

QString OAIAdditionalDataRatepay::getRatepaydataInvoiceDate() const {
    return m_ratepaydata_invoice_date;
}
void OAIAdditionalDataRatepay::setRatepaydataInvoiceDate(const QString &ratepaydata_invoice_date) {
    m_ratepaydata_invoice_date = ratepaydata_invoice_date;
    m_ratepaydata_invoice_date_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_invoice_date_Set() const{
    return m_ratepaydata_invoice_date_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_invoice_date_Valid() const{
    return m_ratepaydata_invoice_date_isValid;
}

QString OAIAdditionalDataRatepay::getRatepaydataInvoiceId() const {
    return m_ratepaydata_invoice_id;
}
void OAIAdditionalDataRatepay::setRatepaydataInvoiceId(const QString &ratepaydata_invoice_id) {
    m_ratepaydata_invoice_id = ratepaydata_invoice_id;
    m_ratepaydata_invoice_id_isSet = true;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_invoice_id_Set() const{
    return m_ratepaydata_invoice_id_isSet;
}

bool OAIAdditionalDataRatepay::is_ratepaydata_invoice_id_Valid() const{
    return m_ratepaydata_invoice_id_isValid;
}

bool OAIAdditionalDataRatepay::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ratepay_installment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepay_interest_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepay_last_installment_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepay_payment_firstday_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepaydata_delivery_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepaydata_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepaydata_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ratepaydata_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataRatepay::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
