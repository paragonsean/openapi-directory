# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device_render_options import DeviceRenderOptions
from openapi_server.models.sdk_ephem_pub_key import SDKEphemPubKey
from openapi_server import util


class ThreeDS2RequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_bin: str=None, acquirer_merchant_id: str=None, authentication_only: bool=False, challenge_indicator: str=None, device_channel: str=None, device_render_options: DeviceRenderOptions=None, mcc: str=None, merchant_name: str=None, message_version: str=None, notification_url: str=None, sdk_app_id: str=None, sdk_enc_data: str=None, sdk_ephem_pub_key: SDKEphemPubKey=None, sdk_max_timeout: int=60, sdk_reference_number: str=None, sdk_trans_id: str=None, sdk_version: str=None, three_ds_comp_ind: str=None, three_ds_requestor_id: str=None, three_ds_requestor_name: str=None, three_ds_requestor_url: str=None, transaction_type: str=None, white_list_status: str=None):
        """ThreeDS2RequestData - a model defined in OpenAPI

        :param acquirer_bin: The acquirer_bin of this ThreeDS2RequestData.
        :param acquirer_merchant_id: The acquirer_merchant_id of this ThreeDS2RequestData.
        :param authentication_only: The authentication_only of this ThreeDS2RequestData.
        :param challenge_indicator: The challenge_indicator of this ThreeDS2RequestData.
        :param device_channel: The device_channel of this ThreeDS2RequestData.
        :param device_render_options: The device_render_options of this ThreeDS2RequestData.
        :param mcc: The mcc of this ThreeDS2RequestData.
        :param merchant_name: The merchant_name of this ThreeDS2RequestData.
        :param message_version: The message_version of this ThreeDS2RequestData.
        :param notification_url: The notification_url of this ThreeDS2RequestData.
        :param sdk_app_id: The sdk_app_id of this ThreeDS2RequestData.
        :param sdk_enc_data: The sdk_enc_data of this ThreeDS2RequestData.
        :param sdk_ephem_pub_key: The sdk_ephem_pub_key of this ThreeDS2RequestData.
        :param sdk_max_timeout: The sdk_max_timeout of this ThreeDS2RequestData.
        :param sdk_reference_number: The sdk_reference_number of this ThreeDS2RequestData.
        :param sdk_trans_id: The sdk_trans_id of this ThreeDS2RequestData.
        :param sdk_version: The sdk_version of this ThreeDS2RequestData.
        :param three_ds_comp_ind: The three_ds_comp_ind of this ThreeDS2RequestData.
        :param three_ds_requestor_id: The three_ds_requestor_id of this ThreeDS2RequestData.
        :param three_ds_requestor_name: The three_ds_requestor_name of this ThreeDS2RequestData.
        :param three_ds_requestor_url: The three_ds_requestor_url of this ThreeDS2RequestData.
        :param transaction_type: The transaction_type of this ThreeDS2RequestData.
        :param white_list_status: The white_list_status of this ThreeDS2RequestData.
        """
        self.openapi_types = {
            'acquirer_bin': str,
            'acquirer_merchant_id': str,
            'authentication_only': bool,
            'challenge_indicator': str,
            'device_channel': str,
            'device_render_options': DeviceRenderOptions,
            'mcc': str,
            'merchant_name': str,
            'message_version': str,
            'notification_url': str,
            'sdk_app_id': str,
            'sdk_enc_data': str,
            'sdk_ephem_pub_key': SDKEphemPubKey,
            'sdk_max_timeout': int,
            'sdk_reference_number': str,
            'sdk_trans_id': str,
            'sdk_version': str,
            'three_ds_comp_ind': str,
            'three_ds_requestor_id': str,
            'three_ds_requestor_name': str,
            'three_ds_requestor_url': str,
            'transaction_type': str,
            'white_list_status': str
        }

        self.attribute_map = {
            'acquirer_bin': 'acquirerBIN',
            'acquirer_merchant_id': 'acquirerMerchantID',
            'authentication_only': 'authenticationOnly',
            'challenge_indicator': 'challengeIndicator',
            'device_channel': 'deviceChannel',
            'device_render_options': 'deviceRenderOptions',
            'mcc': 'mcc',
            'merchant_name': 'merchantName',
            'message_version': 'messageVersion',
            'notification_url': 'notificationURL',
            'sdk_app_id': 'sdkAppID',
            'sdk_enc_data': 'sdkEncData',
            'sdk_ephem_pub_key': 'sdkEphemPubKey',
            'sdk_max_timeout': 'sdkMaxTimeout',
            'sdk_reference_number': 'sdkReferenceNumber',
            'sdk_trans_id': 'sdkTransID',
            'sdk_version': 'sdkVersion',
            'three_ds_comp_ind': 'threeDSCompInd',
            'three_ds_requestor_id': 'threeDSRequestorID',
            'three_ds_requestor_name': 'threeDSRequestorName',
            'three_ds_requestor_url': 'threeDSRequestorURL',
            'transaction_type': 'transactionType',
            'white_list_status': 'whiteListStatus'
        }

        self._acquirer_bin = acquirer_bin
        self._acquirer_merchant_id = acquirer_merchant_id
        self._authentication_only = authentication_only
        self._challenge_indicator = challenge_indicator
        self._device_channel = device_channel
        self._device_render_options = device_render_options
        self._mcc = mcc
        self._merchant_name = merchant_name
        self._message_version = message_version
        self._notification_url = notification_url
        self._sdk_app_id = sdk_app_id
        self._sdk_enc_data = sdk_enc_data
        self._sdk_ephem_pub_key = sdk_ephem_pub_key
        self._sdk_max_timeout = sdk_max_timeout
        self._sdk_reference_number = sdk_reference_number
        self._sdk_trans_id = sdk_trans_id
        self._sdk_version = sdk_version
        self._three_ds_comp_ind = three_ds_comp_ind
        self._three_ds_requestor_id = three_ds_requestor_id
        self._three_ds_requestor_name = three_ds_requestor_name
        self._three_ds_requestor_url = three_ds_requestor_url
        self._transaction_type = transaction_type
        self._white_list_status = white_list_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDS2RequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDS2RequestData of this ThreeDS2RequestData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_bin(self):
        """Gets the acquirer_bin of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.

        :return: The acquirer_bin of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._acquirer_bin

    @acquirer_bin.setter
    def acquirer_bin(self, acquirer_bin):
        """Sets the acquirer_bin of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The acquiring BIN enrolled for 3D Secure 2. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.

        :param acquirer_bin: The acquirer_bin of this ThreeDS2RequestData.
        :type acquirer_bin: str
        """

        self._acquirer_bin = acquirer_bin

    @property
    def acquirer_merchant_id(self):
        """Gets the acquirer_merchant_id of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.

        :return: The acquirer_merchant_id of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._acquirer_merchant_id

    @acquirer_merchant_id.setter
    def acquirer_merchant_id(self, acquirer_merchant_id):
        """Sets the acquirer_merchant_id of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchantId that is enrolled for 3D Secure 2 by the merchant's acquirer. This string should match the value that you will use in the authorisation. Use 123456 on the Test platform.

        :param acquirer_merchant_id: The acquirer_merchant_id of this ThreeDS2RequestData.
        :type acquirer_merchant_id: str
        """

        self._acquirer_merchant_id = acquirer_merchant_id

    @property
    def authentication_only(self):
        """Gets the authentication_only of this ThreeDS2RequestData.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :return: The authentication_only of this ThreeDS2RequestData.
        :rtype: bool
        """
        return self._authentication_only

    @authentication_only.setter
    def authentication_only(self, authentication_only):
        """Sets the authentication_only of this ThreeDS2RequestData.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :param authentication_only: The authentication_only of this ThreeDS2RequestData.
        :type authentication_only: bool
        """

        self._authentication_only = authentication_only

    @property
    def challenge_indicator(self):
        """Gets the challenge_indicator of this ThreeDS2RequestData.

        Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * `noPreference` * `requestNoChallenge` * `requestChallenge` * `requestChallengeAsMandate` 

        :return: The challenge_indicator of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._challenge_indicator

    @challenge_indicator.setter
    def challenge_indicator(self, challenge_indicator):
        """Sets the challenge_indicator of this ThreeDS2RequestData.

        Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * `noPreference` * `requestNoChallenge` * `requestChallenge` * `requestChallengeAsMandate` 

        :param challenge_indicator: The challenge_indicator of this ThreeDS2RequestData.
        :type challenge_indicator: str
        """
        allowed_values = ["noPreference", "requestNoChallenge", "requestChallenge", "requestChallengeAsMandate"]  # noqa: E501
        if challenge_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `challenge_indicator` ({0}), must be one of {1}"
                .format(challenge_indicator, allowed_values)
            )

        self._challenge_indicator = challenge_indicator

    @property
    def device_channel(self):
        """Gets the device_channel of this ThreeDS2RequestData.

        The environment of the shopper. Allowed values: * `app` * `browser`

        :return: The device_channel of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._device_channel

    @device_channel.setter
    def device_channel(self, device_channel):
        """Sets the device_channel of this ThreeDS2RequestData.

        The environment of the shopper. Allowed values: * `app` * `browser`

        :param device_channel: The device_channel of this ThreeDS2RequestData.
        :type device_channel: str
        """
        if device_channel is None:
            raise ValueError("Invalid value for `device_channel`, must not be `None`")

        self._device_channel = device_channel

    @property
    def device_render_options(self):
        """Gets the device_render_options of this ThreeDS2RequestData.

        Display options for the 3D Secure 2 SDK. Optional and only for `deviceChannel` **app**.

        :return: The device_render_options of this ThreeDS2RequestData.
        :rtype: DeviceRenderOptions
        """
        return self._device_render_options

    @device_render_options.setter
    def device_render_options(self, device_render_options):
        """Sets the device_render_options of this ThreeDS2RequestData.

        Display options for the 3D Secure 2 SDK. Optional and only for `deviceChannel` **app**.

        :param device_render_options: The device_render_options of this ThreeDS2RequestData.
        :type device_render_options: DeviceRenderOptions
        """

        self._device_render_options = device_render_options

    @property
    def mcc(self):
        """Gets the mcc of this ThreeDS2RequestData.

        Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.

        :return: The mcc of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this ThreeDS2RequestData.

        Required for merchants that have been enrolled for 3D Secure 2 by another party than Adyen, mostly [authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The `mcc` is a four-digit code with which the previously given `acquirerMerchantID` is registered at the scheme.

        :param mcc: The mcc of this ThreeDS2RequestData.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_name(self):
        """Gets the merchant_name of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. > Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.

        :return: The merchant_name of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). The merchant name that the issuer presents to the shopper if they get a challenge. We recommend to use the same value that you will use in the authorization. Maximum length is 40 characters. > Optional for a [full 3D Secure 2 integration](https://docs.adyen.com/online-payments/3d-secure/native-3ds2/api-integration). Use this field if you are enrolled for 3D Secure 2 with us and want to override the merchant name already configured on your account.

        :param merchant_name: The merchant_name of this ThreeDS2RequestData.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def message_version(self):
        """Gets the message_version of this ThreeDS2RequestData.

        The `messageVersion` value indicating the 3D Secure 2 protocol version.

        :return: The message_version of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._message_version

    @message_version.setter
    def message_version(self, message_version):
        """Sets the message_version of this ThreeDS2RequestData.

        The `messageVersion` value indicating the 3D Secure 2 protocol version.

        :param message_version: The message_version of this ThreeDS2RequestData.
        :type message_version: str
        """

        self._message_version = message_version

    @property
    def notification_url(self):
        """Gets the notification_url of this ThreeDS2RequestData.

        URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.

        :return: The notification_url of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this ThreeDS2RequestData.

        URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.

        :param notification_url: The notification_url of this ThreeDS2RequestData.
        :type notification_url: str
        """

        self._notification_url = notification_url

    @property
    def sdk_app_id(self):
        """Gets the sdk_app_id of this ThreeDS2RequestData.

        The `sdkAppID` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :return: The sdk_app_id of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._sdk_app_id

    @sdk_app_id.setter
    def sdk_app_id(self, sdk_app_id):
        """Sets the sdk_app_id of this ThreeDS2RequestData.

        The `sdkAppID` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :param sdk_app_id: The sdk_app_id of this ThreeDS2RequestData.
        :type sdk_app_id: str
        """

        self._sdk_app_id = sdk_app_id

    @property
    def sdk_enc_data(self):
        """Gets the sdk_enc_data of this ThreeDS2RequestData.

        The `sdkEncData` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :return: The sdk_enc_data of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._sdk_enc_data

    @sdk_enc_data.setter
    def sdk_enc_data(self, sdk_enc_data):
        """Sets the sdk_enc_data of this ThreeDS2RequestData.

        The `sdkEncData` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :param sdk_enc_data: The sdk_enc_data of this ThreeDS2RequestData.
        :type sdk_enc_data: str
        """

        self._sdk_enc_data = sdk_enc_data

    @property
    def sdk_ephem_pub_key(self):
        """Gets the sdk_ephem_pub_key of this ThreeDS2RequestData.

        The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :return: The sdk_ephem_pub_key of this ThreeDS2RequestData.
        :rtype: SDKEphemPubKey
        """
        return self._sdk_ephem_pub_key

    @sdk_ephem_pub_key.setter
    def sdk_ephem_pub_key(self, sdk_ephem_pub_key):
        """Sets the sdk_ephem_pub_key of this ThreeDS2RequestData.

        The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.

        :param sdk_ephem_pub_key: The sdk_ephem_pub_key of this ThreeDS2RequestData.
        :type sdk_ephem_pub_key: SDKEphemPubKey
        """

        self._sdk_ephem_pub_key = sdk_ephem_pub_key

    @property
    def sdk_max_timeout(self):
        """Gets the sdk_max_timeout of this ThreeDS2RequestData.

        The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.

        :return: The sdk_max_timeout of this ThreeDS2RequestData.
        :rtype: int
        """
        return self._sdk_max_timeout

    @sdk_max_timeout.setter
    def sdk_max_timeout(self, sdk_max_timeout):
        """Sets the sdk_max_timeout of this ThreeDS2RequestData.

        The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.

        :param sdk_max_timeout: The sdk_max_timeout of this ThreeDS2RequestData.
        :type sdk_max_timeout: int
        """

        self._sdk_max_timeout = sdk_max_timeout

    @property
    def sdk_reference_number(self):
        """Gets the sdk_reference_number of this ThreeDS2RequestData.

        The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.

        :return: The sdk_reference_number of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._sdk_reference_number

    @sdk_reference_number.setter
    def sdk_reference_number(self, sdk_reference_number):
        """Sets the sdk_reference_number of this ThreeDS2RequestData.

        The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.

        :param sdk_reference_number: The sdk_reference_number of this ThreeDS2RequestData.
        :type sdk_reference_number: str
        """

        self._sdk_reference_number = sdk_reference_number

    @property
    def sdk_trans_id(self):
        """Gets the sdk_trans_id of this ThreeDS2RequestData.

        The `sdkTransID` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.

        :return: The sdk_trans_id of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._sdk_trans_id

    @sdk_trans_id.setter
    def sdk_trans_id(self, sdk_trans_id):
        """Sets the sdk_trans_id of this ThreeDS2RequestData.

        The `sdkTransID` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.

        :param sdk_trans_id: The sdk_trans_id of this ThreeDS2RequestData.
        :type sdk_trans_id: str
        """

        self._sdk_trans_id = sdk_trans_id

    @property
    def sdk_version(self):
        """Gets the sdk_version of this ThreeDS2RequestData.

        Version of the 3D Secure 2 mobile SDK.  Only for `deviceChannel` set to **app**.

        :return: The sdk_version of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._sdk_version

    @sdk_version.setter
    def sdk_version(self, sdk_version):
        """Sets the sdk_version of this ThreeDS2RequestData.

        Version of the 3D Secure 2 mobile SDK.  Only for `deviceChannel` set to **app**.

        :param sdk_version: The sdk_version of this ThreeDS2RequestData.
        :type sdk_version: str
        """

        self._sdk_version = sdk_version

    @property
    def three_ds_comp_ind(self):
        """Gets the three_ds_comp_ind of this ThreeDS2RequestData.

        Completion indicator for the device fingerprinting.

        :return: The three_ds_comp_ind of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._three_ds_comp_ind

    @three_ds_comp_ind.setter
    def three_ds_comp_ind(self, three_ds_comp_ind):
        """Sets the three_ds_comp_ind of this ThreeDS2RequestData.

        Completion indicator for the device fingerprinting.

        :param three_ds_comp_ind: The three_ds_comp_ind of this ThreeDS2RequestData.
        :type three_ds_comp_ind: str
        """

        self._three_ds_comp_ind = three_ds_comp_ind

    @property
    def three_ds_requestor_id(self):
        """Gets the three_ds_requestor_id of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.

        :return: The three_ds_requestor_id of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._three_ds_requestor_id

    @three_ds_requestor_id.setter
    def three_ds_requestor_id(self, three_ds_requestor_id):
        """Sets the three_ds_requestor_id of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.

        :param three_ds_requestor_id: The three_ds_requestor_id of this ThreeDS2RequestData.
        :type three_ds_requestor_id: str
        """

        self._three_ds_requestor_id = three_ds_requestor_id

    @property
    def three_ds_requestor_name(self):
        """Gets the three_ds_requestor_name of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.

        :return: The three_ds_requestor_name of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._three_ds_requestor_name

    @three_ds_requestor_name.setter
    def three_ds_requestor_name(self, three_ds_requestor_name):
        """Sets the three_ds_requestor_name of this ThreeDS2RequestData.

        Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.

        :param three_ds_requestor_name: The three_ds_requestor_name of this ThreeDS2RequestData.
        :type three_ds_requestor_name: str
        """

        self._three_ds_requestor_name = three_ds_requestor_name

    @property
    def three_ds_requestor_url(self):
        """Gets the three_ds_requestor_url of this ThreeDS2RequestData.

        URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.

        :return: The three_ds_requestor_url of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._three_ds_requestor_url

    @three_ds_requestor_url.setter
    def three_ds_requestor_url(self, three_ds_requestor_url):
        """Sets the three_ds_requestor_url of this ThreeDS2RequestData.

        URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.

        :param three_ds_requestor_url: The three_ds_requestor_url of this ThreeDS2RequestData.
        :type three_ds_requestor_url: str
        """

        self._three_ds_requestor_url = three_ds_requestor_url

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ThreeDS2RequestData.

        Identify the type of the transaction being authenticated.

        :return: The transaction_type of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ThreeDS2RequestData.

        Identify the type of the transaction being authenticated.

        :param transaction_type: The transaction_type of this ThreeDS2RequestData.
        :type transaction_type: str
        """
        allowed_values = ["goodsOrServicePurchase", "checkAcceptance", "accountFunding", "quasiCashTransaction", "prepaidActivationAndLoad"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def white_list_status(self):
        """Gets the white_list_status of this ThreeDS2RequestData.

        The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.

        :return: The white_list_status of this ThreeDS2RequestData.
        :rtype: str
        """
        return self._white_list_status

    @white_list_status.setter
    def white_list_status(self, white_list_status):
        """Sets the white_list_status of this ThreeDS2RequestData.

        The `whiteListStatus` value returned from a previous 3D Secure 2 transaction, only applicable for 3D Secure 2 protocol version 2.2.0.

        :param white_list_status: The white_list_status of this ThreeDS2RequestData.
        :type white_list_status: str
        """

        self._white_list_status = white_list_status
