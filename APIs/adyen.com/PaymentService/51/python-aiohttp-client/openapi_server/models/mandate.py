# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Mandate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: str=None, amount_rule: str=None, billing_attempts_rule: str=None, billing_day: str=None, ends_at: str=None, frequency: str=None, remarks: str=None, starts_at: str=None):
        """Mandate - a model defined in OpenAPI

        :param amount: The amount of this Mandate.
        :param amount_rule: The amount_rule of this Mandate.
        :param billing_attempts_rule: The billing_attempts_rule of this Mandate.
        :param billing_day: The billing_day of this Mandate.
        :param ends_at: The ends_at of this Mandate.
        :param frequency: The frequency of this Mandate.
        :param remarks: The remarks of this Mandate.
        :param starts_at: The starts_at of this Mandate.
        """
        self.openapi_types = {
            'amount': str,
            'amount_rule': str,
            'billing_attempts_rule': str,
            'billing_day': str,
            'ends_at': str,
            'frequency': str,
            'remarks': str,
            'starts_at': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'amount_rule': 'amountRule',
            'billing_attempts_rule': 'billingAttemptsRule',
            'billing_day': 'billingDay',
            'ends_at': 'endsAt',
            'frequency': 'frequency',
            'remarks': 'remarks',
            'starts_at': 'startsAt'
        }

        self._amount = amount
        self._amount_rule = amount_rule
        self._billing_attempts_rule = billing_attempts_rule
        self._billing_day = billing_day
        self._ends_at = ends_at
        self._frequency = frequency
        self._remarks = remarks
        self._starts_at = starts_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Mandate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Mandate of this Mandate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Mandate.

        The billing amount (in minor units) of the recurring transactions.

        :return: The amount of this Mandate.
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Mandate.

        The billing amount (in minor units) of the recurring transactions.

        :param amount: The amount of this Mandate.
        :type amount: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def amount_rule(self):
        """Gets the amount_rule of this Mandate.

        The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.  

        :return: The amount_rule of this Mandate.
        :rtype: str
        """
        return self._amount_rule

    @amount_rule.setter
    def amount_rule(self, amount_rule):
        """Sets the amount_rule of this Mandate.

        The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.  

        :param amount_rule: The amount_rule of this Mandate.
        :type amount_rule: str
        """
        allowed_values = ["max", "exact"]  # noqa: E501
        if amount_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `amount_rule` ({0}), must be one of {1}"
                .format(amount_rule, allowed_values)
            )

        self._amount_rule = amount_rule

    @property
    def billing_attempts_rule(self):
        """Gets the billing_attempts_rule of this Mandate.

        The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  

        :return: The billing_attempts_rule of this Mandate.
        :rtype: str
        """
        return self._billing_attempts_rule

    @billing_attempts_rule.setter
    def billing_attempts_rule(self, billing_attempts_rule):
        """Sets the billing_attempts_rule of this Mandate.

        The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  

        :param billing_attempts_rule: The billing_attempts_rule of this Mandate.
        :type billing_attempts_rule: str
        """
        allowed_values = ["true", "before", "after"]  # noqa: E501
        if billing_attempts_rule not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_attempts_rule` ({0}), must be one of {1}"
                .format(billing_attempts_rule, allowed_values)
            )

        self._billing_attempts_rule = billing_attempts_rule

    @property
    def billing_day(self):
        """Gets the billing_day of this Mandate.

        The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the `frequency`.

        :return: The billing_day of this Mandate.
        :rtype: str
        """
        return self._billing_day

    @billing_day.setter
    def billing_day(self, billing_day):
        """Sets the billing_day of this Mandate.

        The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the `frequency`.

        :param billing_day: The billing_day of this Mandate.
        :type billing_day: str
        """

        self._billing_day = billing_day

    @property
    def ends_at(self):
        """Gets the ends_at of this Mandate.

        End date of the billing plan, in YYYY-MM-DD format.

        :return: The ends_at of this Mandate.
        :rtype: str
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Mandate.

        End date of the billing plan, in YYYY-MM-DD format.

        :param ends_at: The ends_at of this Mandate.
        :type ends_at: str
        """
        if ends_at is None:
            raise ValueError("Invalid value for `ends_at`, must not be `None`")

        self._ends_at = ends_at

    @property
    def frequency(self):
        """Gets the frequency of this Mandate.

        The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.

        :return: The frequency of this Mandate.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this Mandate.

        The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.

        :param frequency: The frequency of this Mandate.
        :type frequency: str
        """
        allowed_values = ["adhoc", "daily", "weekly", "biWeekly", "monthly", "quarterly", "halfYearly", "yearly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def remarks(self):
        """Gets the remarks of this Mandate.

        The message shown by UPI to the shopper on the approval screen.

        :return: The remarks of this Mandate.
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this Mandate.

        The message shown by UPI to the shopper on the approval screen.

        :param remarks: The remarks of this Mandate.
        :type remarks: str
        """

        self._remarks = remarks

    @property
    def starts_at(self):
        """Gets the starts_at of this Mandate.

        Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.

        :return: The starts_at of this Mandate.
        :rtype: str
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Mandate.

        Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.

        :param starts_at: The starts_at of this Mandate.
        :type starts_at: str
        """

        self._starts_at = starts_at
