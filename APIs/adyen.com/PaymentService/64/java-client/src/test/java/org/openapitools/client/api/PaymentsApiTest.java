/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v64/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v64/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AuthenticationResultRequest;
import org.openapitools.client.model.AuthenticationResultResponse;
import org.openapitools.client.model.PaymentRequest;
import org.openapitools.client.model.PaymentRequest3d;
import org.openapitools.client.model.PaymentRequest3ds2;
import org.openapitools.client.model.PaymentResult;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.ThreeDS2ResultRequest;
import org.openapitools.client.model.ThreeDS2ResultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PaymentsApi
 */
@Disabled
public class PaymentsApiTest {

    private final PaymentsApi api = new PaymentsApi();

    /**
     * Create an authorisation
     *
     * Creates a payment with a unique reference (&#x60;pspReference&#x60;) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don&#39;t support this and will automatically capture as part of the authorisation. &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments) endpoint under Checkout API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAuthoriseTest() throws ApiException {
        PaymentRequest paymentRequest = null;
        PaymentResult response = api.postAuthorise(paymentRequest);
        // TODO: test validations
    }

    /**
     * Complete a 3DS authorisation
     *
     * For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the &#x60;md&#x60; and &#x60;paResponse&#x60; parameters that you get from the card issuer after a shopper pays via 3D Secure.  &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments/details&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAuthorise3dTest() throws ApiException {
        PaymentRequest3d paymentRequest3d = null;
        PaymentResult response = api.postAuthorise3d(paymentRequest3d);
        // TODO: test validations
    }

    /**
     * Complete a 3DS2 authorisation
     *
     * For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the &#x60;threeDS2Token&#x60; and &#x60;threeDS2Result&#x60; parameters.  &gt; This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [&#x60;/payments/details&#x60;](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAuthorise3ds2Test() throws ApiException {
        PaymentRequest3ds2 paymentRequest3ds2 = null;
        PaymentResult response = api.postAuthorise3ds2(paymentRequest3ds2);
        // TODO: test validations
    }

    /**
     * Get the 3DS authentication result
     *
     * Return the authentication result after doing a 3D Secure authentication only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postGetAuthenticationResultTest() throws ApiException {
        AuthenticationResultRequest authenticationResultRequest = null;
        AuthenticationResultResponse response = api.postGetAuthenticationResult(authenticationResultRequest);
        // TODO: test validations
    }

    /**
     * Get the 3DS2 authentication result
     *
     * Retrieves the &#x60;threeDS2Result&#x60; after doing a 3D Secure 2 authentication only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRetrieve3ds2ResultTest() throws ApiException {
        ThreeDS2ResultRequest threeDS2ResultRequest = null;
        ThreeDS2ResultResponse response = api.postRetrieve3ds2Result(threeDS2ResultRequest);
        // TODO: test validations
    }

}
