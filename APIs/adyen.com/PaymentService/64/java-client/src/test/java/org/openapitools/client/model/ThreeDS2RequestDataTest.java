/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v64/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v64/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DeviceRenderOptions;
import org.openapitools.client.model.SDKEphemPubKey;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ThreeDS2RequestData
 */
public class ThreeDS2RequestDataTest {
    private final ThreeDS2RequestData model = new ThreeDS2RequestData();

    /**
     * Model tests for ThreeDS2RequestData
     */
    @Test
    public void testThreeDS2RequestData() {
        // TODO: test ThreeDS2RequestData
    }

    /**
     * Test the property 'acquirerBIN'
     */
    @Test
    public void acquirerBINTest() {
        // TODO: test acquirerBIN
    }

    /**
     * Test the property 'acquirerMerchantID'
     */
    @Test
    public void acquirerMerchantIDTest() {
        // TODO: test acquirerMerchantID
    }

    /**
     * Test the property 'authenticationOnly'
     */
    @Test
    public void authenticationOnlyTest() {
        // TODO: test authenticationOnly
    }

    /**
     * Test the property 'challengeIndicator'
     */
    @Test
    public void challengeIndicatorTest() {
        // TODO: test challengeIndicator
    }

    /**
     * Test the property 'deviceChannel'
     */
    @Test
    public void deviceChannelTest() {
        // TODO: test deviceChannel
    }

    /**
     * Test the property 'deviceRenderOptions'
     */
    @Test
    public void deviceRenderOptionsTest() {
        // TODO: test deviceRenderOptions
    }

    /**
     * Test the property 'mcc'
     */
    @Test
    public void mccTest() {
        // TODO: test mcc
    }

    /**
     * Test the property 'merchantName'
     */
    @Test
    public void merchantNameTest() {
        // TODO: test merchantName
    }

    /**
     * Test the property 'messageVersion'
     */
    @Test
    public void messageVersionTest() {
        // TODO: test messageVersion
    }

    /**
     * Test the property 'notificationURL'
     */
    @Test
    public void notificationURLTest() {
        // TODO: test notificationURL
    }

    /**
     * Test the property 'sdkAppID'
     */
    @Test
    public void sdkAppIDTest() {
        // TODO: test sdkAppID
    }

    /**
     * Test the property 'sdkEncData'
     */
    @Test
    public void sdkEncDataTest() {
        // TODO: test sdkEncData
    }

    /**
     * Test the property 'sdkEphemPubKey'
     */
    @Test
    public void sdkEphemPubKeyTest() {
        // TODO: test sdkEphemPubKey
    }

    /**
     * Test the property 'sdkMaxTimeout'
     */
    @Test
    public void sdkMaxTimeoutTest() {
        // TODO: test sdkMaxTimeout
    }

    /**
     * Test the property 'sdkReferenceNumber'
     */
    @Test
    public void sdkReferenceNumberTest() {
        // TODO: test sdkReferenceNumber
    }

    /**
     * Test the property 'sdkTransID'
     */
    @Test
    public void sdkTransIDTest() {
        // TODO: test sdkTransID
    }

    /**
     * Test the property 'sdkVersion'
     */
    @Test
    public void sdkVersionTest() {
        // TODO: test sdkVersion
    }

    /**
     * Test the property 'threeDSCompInd'
     */
    @Test
    public void threeDSCompIndTest() {
        // TODO: test threeDSCompInd
    }

    /**
     * Test the property 'threeDSRequestorID'
     */
    @Test
    public void threeDSRequestorIDTest() {
        // TODO: test threeDSRequestorID
    }

    /**
     * Test the property 'threeDSRequestorName'
     */
    @Test
    public void threeDSRequestorNameTest() {
        // TODO: test threeDSRequestorName
    }

    /**
     * Test the property 'threeDSRequestorURL'
     */
    @Test
    public void threeDSRequestorURLTest() {
        // TODO: test threeDSRequestorURL
    }

    /**
     * Test the property 'transactionType'
     */
    @Test
    public void transactionTypeTest() {
        // TODO: test transactionType
    }

    /**
     * Test the property 'whiteListStatus'
     */
    @Test
    public void whiteListStatusTest() {
        // TODO: test whiteListStatus
    }

}
