/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v64/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v64/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AuthenticationResultRequest from '../model/AuthenticationResultRequest';
import AuthenticationResultResponse from '../model/AuthenticationResultResponse';
import PaymentRequest from '../model/PaymentRequest';
import PaymentRequest3d from '../model/PaymentRequest3d';
import PaymentRequest3ds2 from '../model/PaymentRequest3ds2';
import PaymentResult from '../model/PaymentResult';
import ServiceError from '../model/ServiceError';
import ThreeDS2ResultRequest from '../model/ThreeDS2ResultRequest';
import ThreeDS2ResultResponse from '../model/ThreeDS2ResultResponse';

/**
* Payments service.
* @module api/PaymentsApi
* @version 64
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postAuthorise operation.
     * @callback module:api/PaymentsApi~postAuthoriseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an authorisation
     * Creates a payment with a unique reference (`pspReference`) and attempts to obtain an authorisation hold. For cards, this amount can be captured or cancelled later. Non-card payment methods typically don't support this and will automatically capture as part of the authorisation. > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest} [paymentRequest] 
     * @param {module:api/PaymentsApi~postAuthoriseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    postAuthorise(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResult;
      return this.apiClient.callApi(
        '/authorise', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorise3d operation.
     * @callback module:api/PaymentsApi~postAuthorise3dCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a 3DS authorisation
     * For an authenticated 3D Secure session, completes the payment authorisation. This endpoint must receive the `md` and `paResponse` parameters that you get from the card issuer after a shopper pays via 3D Secure.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest3d} [paymentRequest3d] 
     * @param {module:api/PaymentsApi~postAuthorise3dCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    postAuthorise3d(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest3d'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResult;
      return this.apiClient.callApi(
        '/authorise3d', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postAuthorise3ds2 operation.
     * @callback module:api/PaymentsApi~postAuthorise3ds2Callback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Complete a 3DS2 authorisation
     * For an authenticated 3D Secure 2 session, completes the payment authorisation. This endpoint must receive the `threeDS2Token` and `threeDS2Result` parameters.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce/3d-secure). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/details`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/details) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest3ds2} [paymentRequest3ds2] 
     * @param {module:api/PaymentsApi~postAuthorise3ds2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResult}
     */
    postAuthorise3ds2(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest3ds2'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResult;
      return this.apiClient.callApi(
        '/authorise3ds2', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGetAuthenticationResult operation.
     * @callback module:api/PaymentsApi~postGetAuthenticationResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AuthenticationResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the 3DS authentication result
     * Return the authentication result after doing a 3D Secure authentication only.
     * @param {Object} opts Optional parameters
     * @param {module:model/AuthenticationResultRequest} [authenticationResultRequest] 
     * @param {module:api/PaymentsApi~postGetAuthenticationResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AuthenticationResultResponse}
     */
    postGetAuthenticationResult(opts, callback) {
      opts = opts || {};
      let postBody = opts['authenticationResultRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AuthenticationResultResponse;
      return this.apiClient.callApi(
        '/getAuthenticationResult', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRetrieve3ds2Result operation.
     * @callback module:api/PaymentsApi~postRetrieve3ds2ResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ThreeDS2ResultResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the 3DS2 authentication result
     * Retrieves the `threeDS2Result` after doing a 3D Secure 2 authentication only.
     * @param {Object} opts Optional parameters
     * @param {module:model/ThreeDS2ResultRequest} [threeDS2ResultRequest] 
     * @param {module:api/PaymentsApi~postRetrieve3ds2ResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ThreeDS2ResultResponse}
     */
    postRetrieve3ds2Result(opts, callback) {
      opts = opts || {};
      let postBody = opts['threeDS2ResultRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ThreeDS2ResultResponse;
      return this.apiClient.callApi(
        '/retrieve3ds2Result', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
