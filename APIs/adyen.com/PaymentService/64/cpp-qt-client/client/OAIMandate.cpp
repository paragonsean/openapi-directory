/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v64/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v64/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMandate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMandate::OAIMandate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMandate::OAIMandate() {
    this->initializeModel();
}

OAIMandate::~OAIMandate() {}

void OAIMandate::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_amount_rule_isSet = false;
    m_amount_rule_isValid = false;

    m_billing_attempts_rule_isSet = false;
    m_billing_attempts_rule_isValid = false;

    m_billing_day_isSet = false;
    m_billing_day_isValid = false;

    m_ends_at_isSet = false;
    m_ends_at_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_remarks_isSet = false;
    m_remarks_isValid = false;

    m_starts_at_isSet = false;
    m_starts_at_isValid = false;
}

void OAIMandate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMandate::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_amount_rule_isValid = ::OpenAPI::fromJsonValue(m_amount_rule, json[QString("amountRule")]);
    m_amount_rule_isSet = !json[QString("amountRule")].isNull() && m_amount_rule_isValid;

    m_billing_attempts_rule_isValid = ::OpenAPI::fromJsonValue(m_billing_attempts_rule, json[QString("billingAttemptsRule")]);
    m_billing_attempts_rule_isSet = !json[QString("billingAttemptsRule")].isNull() && m_billing_attempts_rule_isValid;

    m_billing_day_isValid = ::OpenAPI::fromJsonValue(m_billing_day, json[QString("billingDay")]);
    m_billing_day_isSet = !json[QString("billingDay")].isNull() && m_billing_day_isValid;

    m_ends_at_isValid = ::OpenAPI::fromJsonValue(m_ends_at, json[QString("endsAt")]);
    m_ends_at_isSet = !json[QString("endsAt")].isNull() && m_ends_at_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_remarks_isValid = ::OpenAPI::fromJsonValue(m_remarks, json[QString("remarks")]);
    m_remarks_isSet = !json[QString("remarks")].isNull() && m_remarks_isValid;

    m_starts_at_isValid = ::OpenAPI::fromJsonValue(m_starts_at, json[QString("startsAt")]);
    m_starts_at_isSet = !json[QString("startsAt")].isNull() && m_starts_at_isValid;
}

QString OAIMandate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMandate::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_amount_rule_isSet) {
        obj.insert(QString("amountRule"), ::OpenAPI::toJsonValue(m_amount_rule));
    }
    if (m_billing_attempts_rule_isSet) {
        obj.insert(QString("billingAttemptsRule"), ::OpenAPI::toJsonValue(m_billing_attempts_rule));
    }
    if (m_billing_day_isSet) {
        obj.insert(QString("billingDay"), ::OpenAPI::toJsonValue(m_billing_day));
    }
    if (m_ends_at_isSet) {
        obj.insert(QString("endsAt"), ::OpenAPI::toJsonValue(m_ends_at));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_remarks_isSet) {
        obj.insert(QString("remarks"), ::OpenAPI::toJsonValue(m_remarks));
    }
    if (m_starts_at_isSet) {
        obj.insert(QString("startsAt"), ::OpenAPI::toJsonValue(m_starts_at));
    }
    return obj;
}

QString OAIMandate::getAmount() const {
    return m_amount;
}
void OAIMandate::setAmount(const QString &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIMandate::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIMandate::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIMandate::getAmountRule() const {
    return m_amount_rule;
}
void OAIMandate::setAmountRule(const QString &amount_rule) {
    m_amount_rule = amount_rule;
    m_amount_rule_isSet = true;
}

bool OAIMandate::is_amount_rule_Set() const{
    return m_amount_rule_isSet;
}

bool OAIMandate::is_amount_rule_Valid() const{
    return m_amount_rule_isValid;
}

QString OAIMandate::getBillingAttemptsRule() const {
    return m_billing_attempts_rule;
}
void OAIMandate::setBillingAttemptsRule(const QString &billing_attempts_rule) {
    m_billing_attempts_rule = billing_attempts_rule;
    m_billing_attempts_rule_isSet = true;
}

bool OAIMandate::is_billing_attempts_rule_Set() const{
    return m_billing_attempts_rule_isSet;
}

bool OAIMandate::is_billing_attempts_rule_Valid() const{
    return m_billing_attempts_rule_isValid;
}

QString OAIMandate::getBillingDay() const {
    return m_billing_day;
}
void OAIMandate::setBillingDay(const QString &billing_day) {
    m_billing_day = billing_day;
    m_billing_day_isSet = true;
}

bool OAIMandate::is_billing_day_Set() const{
    return m_billing_day_isSet;
}

bool OAIMandate::is_billing_day_Valid() const{
    return m_billing_day_isValid;
}

QString OAIMandate::getEndsAt() const {
    return m_ends_at;
}
void OAIMandate::setEndsAt(const QString &ends_at) {
    m_ends_at = ends_at;
    m_ends_at_isSet = true;
}

bool OAIMandate::is_ends_at_Set() const{
    return m_ends_at_isSet;
}

bool OAIMandate::is_ends_at_Valid() const{
    return m_ends_at_isValid;
}

QString OAIMandate::getFrequency() const {
    return m_frequency;
}
void OAIMandate::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIMandate::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIMandate::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIMandate::getRemarks() const {
    return m_remarks;
}
void OAIMandate::setRemarks(const QString &remarks) {
    m_remarks = remarks;
    m_remarks_isSet = true;
}

bool OAIMandate::is_remarks_Set() const{
    return m_remarks_isSet;
}

bool OAIMandate::is_remarks_Valid() const{
    return m_remarks_isValid;
}

QString OAIMandate::getStartsAt() const {
    return m_starts_at;
}
void OAIMandate::setStartsAt(const QString &starts_at) {
    m_starts_at = starts_at;
    m_starts_at_isSet = true;
}

bool OAIMandate::is_starts_at_Set() const{
    return m_starts_at_isSet;
}

bool OAIMandate::is_starts_at_Valid() const{
    return m_starts_at_isValid;
}

bool OAIMandate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_attempts_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ends_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remarks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starts_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMandate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_ends_at_isValid && m_frequency_isValid && true;
}

} // namespace OpenAPI
