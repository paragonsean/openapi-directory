/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v64/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v64/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 64
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFundDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFundDestination::OAIFundDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFundDestination::OAIFundDestination() {
    this->initializeModel();
}

OAIFundDestination::~OAIFundDestination() {}

void OAIFundDestination::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_billing_address_isSet = false;
    m_billing_address_isValid = false;

    m_card_isSet = false;
    m_card_isValid = false;

    m_selected_recurring_detail_reference_isSet = false;
    m_selected_recurring_detail_reference_isValid = false;

    m_shopper_email_isSet = false;
    m_shopper_email_isValid = false;

    m_shopper_name_isSet = false;
    m_shopper_name_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;

    m_sub_merchant_isSet = false;
    m_sub_merchant_isValid = false;

    m_telephone_number_isSet = false;
    m_telephone_number_isValid = false;
}

void OAIFundDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFundDestination::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_billing_address_isValid = ::OpenAPI::fromJsonValue(m_billing_address, json[QString("billingAddress")]);
    m_billing_address_isSet = !json[QString("billingAddress")].isNull() && m_billing_address_isValid;

    m_card_isValid = ::OpenAPI::fromJsonValue(m_card, json[QString("card")]);
    m_card_isSet = !json[QString("card")].isNull() && m_card_isValid;

    m_selected_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_selected_recurring_detail_reference, json[QString("selectedRecurringDetailReference")]);
    m_selected_recurring_detail_reference_isSet = !json[QString("selectedRecurringDetailReference")].isNull() && m_selected_recurring_detail_reference_isValid;

    m_shopper_email_isValid = ::OpenAPI::fromJsonValue(m_shopper_email, json[QString("shopperEmail")]);
    m_shopper_email_isSet = !json[QString("shopperEmail")].isNull() && m_shopper_email_isValid;

    m_shopper_name_isValid = ::OpenAPI::fromJsonValue(m_shopper_name, json[QString("shopperName")]);
    m_shopper_name_isSet = !json[QString("shopperName")].isNull() && m_shopper_name_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;

    m_sub_merchant_isValid = ::OpenAPI::fromJsonValue(m_sub_merchant, json[QString("subMerchant")]);
    m_sub_merchant_isSet = !json[QString("subMerchant")].isNull() && m_sub_merchant_isValid;

    m_telephone_number_isValid = ::OpenAPI::fromJsonValue(m_telephone_number, json[QString("telephoneNumber")]);
    m_telephone_number_isSet = !json[QString("telephoneNumber")].isNull() && m_telephone_number_isValid;
}

QString OAIFundDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFundDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.size() > 0) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_billing_address.isSet()) {
        obj.insert(QString("billingAddress"), ::OpenAPI::toJsonValue(m_billing_address));
    }
    if (m_card.isSet()) {
        obj.insert(QString("card"), ::OpenAPI::toJsonValue(m_card));
    }
    if (m_selected_recurring_detail_reference_isSet) {
        obj.insert(QString("selectedRecurringDetailReference"), ::OpenAPI::toJsonValue(m_selected_recurring_detail_reference));
    }
    if (m_shopper_email_isSet) {
        obj.insert(QString("shopperEmail"), ::OpenAPI::toJsonValue(m_shopper_email));
    }
    if (m_shopper_name.isSet()) {
        obj.insert(QString("shopperName"), ::OpenAPI::toJsonValue(m_shopper_name));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    if (m_sub_merchant.isSet()) {
        obj.insert(QString("subMerchant"), ::OpenAPI::toJsonValue(m_sub_merchant));
    }
    if (m_telephone_number_isSet) {
        obj.insert(QString("telephoneNumber"), ::OpenAPI::toJsonValue(m_telephone_number));
    }
    return obj;
}

QMap<QString, QString> OAIFundDestination::getAdditionalData() const {
    return m_additional_data;
}
void OAIFundDestination::setAdditionalData(const QMap<QString, QString> &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIFundDestination::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIFundDestination::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

OAIAddress OAIFundDestination::getBillingAddress() const {
    return m_billing_address;
}
void OAIFundDestination::setBillingAddress(const OAIAddress &billing_address) {
    m_billing_address = billing_address;
    m_billing_address_isSet = true;
}

bool OAIFundDestination::is_billing_address_Set() const{
    return m_billing_address_isSet;
}

bool OAIFundDestination::is_billing_address_Valid() const{
    return m_billing_address_isValid;
}

OAICard OAIFundDestination::getCard() const {
    return m_card;
}
void OAIFundDestination::setCard(const OAICard &card) {
    m_card = card;
    m_card_isSet = true;
}

bool OAIFundDestination::is_card_Set() const{
    return m_card_isSet;
}

bool OAIFundDestination::is_card_Valid() const{
    return m_card_isValid;
}

QString OAIFundDestination::getSelectedRecurringDetailReference() const {
    return m_selected_recurring_detail_reference;
}
void OAIFundDestination::setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference) {
    m_selected_recurring_detail_reference = selected_recurring_detail_reference;
    m_selected_recurring_detail_reference_isSet = true;
}

bool OAIFundDestination::is_selected_recurring_detail_reference_Set() const{
    return m_selected_recurring_detail_reference_isSet;
}

bool OAIFundDestination::is_selected_recurring_detail_reference_Valid() const{
    return m_selected_recurring_detail_reference_isValid;
}

QString OAIFundDestination::getShopperEmail() const {
    return m_shopper_email;
}
void OAIFundDestination::setShopperEmail(const QString &shopper_email) {
    m_shopper_email = shopper_email;
    m_shopper_email_isSet = true;
}

bool OAIFundDestination::is_shopper_email_Set() const{
    return m_shopper_email_isSet;
}

bool OAIFundDestination::is_shopper_email_Valid() const{
    return m_shopper_email_isValid;
}

OAIName OAIFundDestination::getShopperName() const {
    return m_shopper_name;
}
void OAIFundDestination::setShopperName(const OAIName &shopper_name) {
    m_shopper_name = shopper_name;
    m_shopper_name_isSet = true;
}

bool OAIFundDestination::is_shopper_name_Set() const{
    return m_shopper_name_isSet;
}

bool OAIFundDestination::is_shopper_name_Valid() const{
    return m_shopper_name_isValid;
}

QString OAIFundDestination::getShopperReference() const {
    return m_shopper_reference;
}
void OAIFundDestination::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIFundDestination::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIFundDestination::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

OAISubMerchant OAIFundDestination::getSubMerchant() const {
    return m_sub_merchant;
}
void OAIFundDestination::setSubMerchant(const OAISubMerchant &sub_merchant) {
    m_sub_merchant = sub_merchant;
    m_sub_merchant_isSet = true;
}

bool OAIFundDestination::is_sub_merchant_Set() const{
    return m_sub_merchant_isSet;
}

bool OAIFundDestination::is_sub_merchant_Valid() const{
    return m_sub_merchant_isValid;
}

QString OAIFundDestination::getTelephoneNumber() const {
    return m_telephone_number;
}
void OAIFundDestination::setTelephoneNumber(const QString &telephone_number) {
    m_telephone_number = telephone_number;
    m_telephone_number_isSet = true;
}

bool OAIFundDestination::is_telephone_number_Set() const{
    return m_telephone_number_isSet;
}

bool OAIFundDestination::is_telephone_number_Valid() const{
    return m_telephone_number_isValid;
}

bool OAIFundDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_merchant.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_telephone_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFundDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
