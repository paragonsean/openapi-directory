# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.card import Card
from openapi_server.models.name import Name
from openapi_server.models.sub_merchant import SubMerchant
from openapi_server import util


class FundDestination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, billing_address: Address=None, card: Card=None, selected_recurring_detail_reference: str=None, shopper_email: str=None, shopper_name: Name=None, shopper_reference: str=None, sub_merchant: SubMerchant=None, telephone_number: str=None):
        """FundDestination - a model defined in OpenAPI

        :param additional_data: The additional_data of this FundDestination.
        :param billing_address: The billing_address of this FundDestination.
        :param card: The card of this FundDestination.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this FundDestination.
        :param shopper_email: The shopper_email of this FundDestination.
        :param shopper_name: The shopper_name of this FundDestination.
        :param shopper_reference: The shopper_reference of this FundDestination.
        :param sub_merchant: The sub_merchant of this FundDestination.
        :param telephone_number: The telephone_number of this FundDestination.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'billing_address': Address,
            'card': Card,
            'selected_recurring_detail_reference': str,
            'shopper_email': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'sub_merchant': SubMerchant,
            'telephone_number': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'billing_address': 'billingAddress',
            'card': 'card',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'shopper_email': 'shopperEmail',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'sub_merchant': 'subMerchant',
            'telephone_number': 'telephoneNumber'
        }

        self._additional_data = additional_data
        self._billing_address = billing_address
        self._card = card
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._shopper_email = shopper_email
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._sub_merchant = sub_merchant
        self._telephone_number = telephone_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FundDestination':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FundDestination of this FundDestination.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this FundDestination.

        a map of name/value pairs for passing in additional/industry-specific data

        :return: The additional_data of this FundDestination.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this FundDestination.

        a map of name/value pairs for passing in additional/industry-specific data

        :param additional_data: The additional_data of this FundDestination.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def billing_address(self):
        """Gets the billing_address of this FundDestination.

        The address where to send the invoice.

        :return: The billing_address of this FundDestination.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this FundDestination.

        The address where to send the invoice.

        :param billing_address: The billing_address of this FundDestination.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def card(self):
        """Gets the card of this FundDestination.

        Credit card data.  Optional if `shopperReference` and `selectedRecurringDetailReference` are provided.

        :return: The card of this FundDestination.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this FundDestination.

        Credit card data.  Optional if `shopperReference` and `selectedRecurringDetailReference` are provided.

        :param card: The card of this FundDestination.
        :type card: Card
        """

        self._card = card

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this FundDestination.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :return: The selected_recurring_detail_reference of this FundDestination.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this FundDestination.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this FundDestination.
        :type selected_recurring_detail_reference: str
        """

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def shopper_email(self):
        """Gets the shopper_email of this FundDestination.

        the email address of the person

        :return: The shopper_email of this FundDestination.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this FundDestination.

        the email address of the person

        :param shopper_email: The shopper_email of this FundDestination.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_name(self):
        """Gets the shopper_name of this FundDestination.

        the name of the person

        :return: The shopper_name of this FundDestination.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this FundDestination.

        the name of the person

        :param shopper_name: The shopper_name of this FundDestination.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this FundDestination.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this FundDestination.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this FundDestination.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this FundDestination.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def sub_merchant(self):
        """Gets the sub_merchant of this FundDestination.

        Required for Back-to-Back/ purchase driven load in Wallet transactions. Contains the final merchant who will be receiving the money, also known as subMerchant, information.

        :return: The sub_merchant of this FundDestination.
        :rtype: SubMerchant
        """
        return self._sub_merchant

    @sub_merchant.setter
    def sub_merchant(self, sub_merchant):
        """Sets the sub_merchant of this FundDestination.

        Required for Back-to-Back/ purchase driven load in Wallet transactions. Contains the final merchant who will be receiving the money, also known as subMerchant, information.

        :param sub_merchant: The sub_merchant of this FundDestination.
        :type sub_merchant: SubMerchant
        """

        self._sub_merchant = sub_merchant

    @property
    def telephone_number(self):
        """Gets the telephone_number of this FundDestination.

        the telephone number of the person

        :return: The telephone_number of this FundDestination.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this FundDestination.

        the telephone number of the person

        :param telephone_number: The telephone_number of this FundDestination.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number
