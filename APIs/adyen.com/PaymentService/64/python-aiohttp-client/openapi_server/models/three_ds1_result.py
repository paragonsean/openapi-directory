# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDS1Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cavv: str=None, cavv_algorithm: str=None, eci: str=None, three_d_authenticated_response: str=None, three_d_offered_response: str=None, xid: str=None):
        """ThreeDS1Result - a model defined in OpenAPI

        :param cavv: The cavv of this ThreeDS1Result.
        :param cavv_algorithm: The cavv_algorithm of this ThreeDS1Result.
        :param eci: The eci of this ThreeDS1Result.
        :param three_d_authenticated_response: The three_d_authenticated_response of this ThreeDS1Result.
        :param three_d_offered_response: The three_d_offered_response of this ThreeDS1Result.
        :param xid: The xid of this ThreeDS1Result.
        """
        self.openapi_types = {
            'cavv': str,
            'cavv_algorithm': str,
            'eci': str,
            'three_d_authenticated_response': str,
            'three_d_offered_response': str,
            'xid': str
        }

        self.attribute_map = {
            'cavv': 'cavv',
            'cavv_algorithm': 'cavvAlgorithm',
            'eci': 'eci',
            'three_d_authenticated_response': 'threeDAuthenticatedResponse',
            'three_d_offered_response': 'threeDOfferedResponse',
            'xid': 'xid'
        }

        self._cavv = cavv
        self._cavv_algorithm = cavv_algorithm
        self._eci = eci
        self._three_d_authenticated_response = three_d_authenticated_response
        self._three_d_offered_response = three_d_offered_response
        self._xid = xid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDS1Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDS1Result of this ThreeDS1Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cavv(self):
        """Gets the cavv of this ThreeDS1Result.

        The cardholder authentication value (base64 encoded).

        :return: The cavv of this ThreeDS1Result.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this ThreeDS1Result.

        The cardholder authentication value (base64 encoded).

        :param cavv: The cavv of this ThreeDS1Result.
        :type cavv: str
        """

        self._cavv = cavv

    @property
    def cavv_algorithm(self):
        """Gets the cavv_algorithm of this ThreeDS1Result.

        The CAVV algorithm used.

        :return: The cavv_algorithm of this ThreeDS1Result.
        :rtype: str
        """
        return self._cavv_algorithm

    @cavv_algorithm.setter
    def cavv_algorithm(self, cavv_algorithm):
        """Sets the cavv_algorithm of this ThreeDS1Result.

        The CAVV algorithm used.

        :param cavv_algorithm: The cavv_algorithm of this ThreeDS1Result.
        :type cavv_algorithm: str
        """

        self._cavv_algorithm = cavv_algorithm

    @property
    def eci(self):
        """Gets the eci of this ThreeDS1Result.

        3D Secure Electronic Commerce Indicator (ECI).

        :return: The eci of this ThreeDS1Result.
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this ThreeDS1Result.

        3D Secure Electronic Commerce Indicator (ECI).

        :param eci: The eci of this ThreeDS1Result.
        :type eci: str
        """

        self._eci = eci

    @property
    def three_d_authenticated_response(self):
        """Gets the three_d_authenticated_response of this ThreeDS1Result.

        The authentication response from the ACS.

        :return: The three_d_authenticated_response of this ThreeDS1Result.
        :rtype: str
        """
        return self._three_d_authenticated_response

    @three_d_authenticated_response.setter
    def three_d_authenticated_response(self, three_d_authenticated_response):
        """Sets the three_d_authenticated_response of this ThreeDS1Result.

        The authentication response from the ACS.

        :param three_d_authenticated_response: The three_d_authenticated_response of this ThreeDS1Result.
        :type three_d_authenticated_response: str
        """

        self._three_d_authenticated_response = three_d_authenticated_response

    @property
    def three_d_offered_response(self):
        """Gets the three_d_offered_response of this ThreeDS1Result.

        Whether 3D Secure was offered or not.

        :return: The three_d_offered_response of this ThreeDS1Result.
        :rtype: str
        """
        return self._three_d_offered_response

    @three_d_offered_response.setter
    def three_d_offered_response(self, three_d_offered_response):
        """Sets the three_d_offered_response of this ThreeDS1Result.

        Whether 3D Secure was offered or not.

        :param three_d_offered_response: The three_d_offered_response of this ThreeDS1Result.
        :type three_d_offered_response: str
        """

        self._three_d_offered_response = three_d_offered_response

    @property
    def xid(self):
        """Gets the xid of this ThreeDS1Result.

        A unique transaction identifier generated by the MPI on behalf of the merchant to identify the 3D Secure transaction, in `Base64` encoding.

        :return: The xid of this ThreeDS1Result.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this ThreeDS1Result.

        A unique transaction identifier generated by the MPI on behalf of the merchant to identify the 3D Secure transaction, in `Base64` encoding.

        :param xid: The xid of this ThreeDS1Result.
        :type xid: str
        """

        self._xid = xid
