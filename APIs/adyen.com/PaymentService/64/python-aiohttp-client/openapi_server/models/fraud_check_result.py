# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FraudCheckResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_score: int=None, check_id: int=None, name: str=None):
        """FraudCheckResult - a model defined in OpenAPI

        :param account_score: The account_score of this FraudCheckResult.
        :param check_id: The check_id of this FraudCheckResult.
        :param name: The name of this FraudCheckResult.
        """
        self.openapi_types = {
            'account_score': int,
            'check_id': int,
            'name': str
        }

        self.attribute_map = {
            'account_score': 'accountScore',
            'check_id': 'checkId',
            'name': 'name'
        }

        self._account_score = account_score
        self._check_id = check_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FraudCheckResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FraudCheckResult of this FraudCheckResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_score(self):
        """Gets the account_score of this FraudCheckResult.

        The fraud score generated by the risk check.

        :return: The account_score of this FraudCheckResult.
        :rtype: int
        """
        return self._account_score

    @account_score.setter
    def account_score(self, account_score):
        """Sets the account_score of this FraudCheckResult.

        The fraud score generated by the risk check.

        :param account_score: The account_score of this FraudCheckResult.
        :type account_score: int
        """
        if account_score is None:
            raise ValueError("Invalid value for `account_score`, must not be `None`")

        self._account_score = account_score

    @property
    def check_id(self):
        """Gets the check_id of this FraudCheckResult.

        The ID of the risk check.

        :return: The check_id of this FraudCheckResult.
        :rtype: int
        """
        return self._check_id

    @check_id.setter
    def check_id(self, check_id):
        """Sets the check_id of this FraudCheckResult.

        The ID of the risk check.

        :param check_id: The check_id of this FraudCheckResult.
        :type check_id: int
        """
        if check_id is None:
            raise ValueError("Invalid value for `check_id`, must not be `None`")

        self._check_id = check_id

    @property
    def name(self):
        """Gets the name of this FraudCheckResult.

        The name of the risk check.

        :return: The name of this FraudCheckResult.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FraudCheckResult.

        The name of the risk check.

        :param name: The name of this FraudCheckResult.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name
