# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationResultRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, psp_reference: str=None):
        """AuthenticationResultRequest - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this AuthenticationResultRequest.
        :param psp_reference: The psp_reference of this AuthenticationResultRequest.
        """
        self.openapi_types = {
            'merchant_account': str,
            'psp_reference': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'psp_reference': 'pspReference'
        }

        self._merchant_account = merchant_account
        self._psp_reference = psp_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationResultRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationResultRequest of this AuthenticationResultRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this AuthenticationResultRequest.

        The merchant account identifier, with which the authentication was processed.

        :return: The merchant_account of this AuthenticationResultRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this AuthenticationResultRequest.

        The merchant account identifier, with which the authentication was processed.

        :param merchant_account: The merchant_account of this AuthenticationResultRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def psp_reference(self):
        """Gets the psp_reference of this AuthenticationResultRequest.

        The pspReference identifier for the transaction.

        :return: The psp_reference of this AuthenticationResultRequest.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this AuthenticationResultRequest.

        The pspReference identifier for the transaction.

        :param psp_reference: The psp_reference of this AuthenticationResultRequest.
        :type psp_reference: str
        """
        if psp_reference is None:
            raise ValueError("Invalid value for `psp_reference`, must not be `None`")

        self._psp_reference = psp_reference
