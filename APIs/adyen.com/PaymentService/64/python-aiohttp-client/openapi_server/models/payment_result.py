# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.fraud_result import FraudResult
from openapi_server.models.payment_result_additional_data import PaymentResultAdditionalData
from openapi_server import util


class PaymentResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: PaymentResultAdditionalData=None, auth_code: str=None, dcc_amount: Amount=None, dcc_signature: str=None, fraud_result: FraudResult=None, issuer_url: str=None, md: str=None, pa_request: str=None, psp_reference: str=None, refusal_reason: str=None, result_code: str=None):
        """PaymentResult - a model defined in OpenAPI

        :param additional_data: The additional_data of this PaymentResult.
        :param auth_code: The auth_code of this PaymentResult.
        :param dcc_amount: The dcc_amount of this PaymentResult.
        :param dcc_signature: The dcc_signature of this PaymentResult.
        :param fraud_result: The fraud_result of this PaymentResult.
        :param issuer_url: The issuer_url of this PaymentResult.
        :param md: The md of this PaymentResult.
        :param pa_request: The pa_request of this PaymentResult.
        :param psp_reference: The psp_reference of this PaymentResult.
        :param refusal_reason: The refusal_reason of this PaymentResult.
        :param result_code: The result_code of this PaymentResult.
        """
        self.openapi_types = {
            'additional_data': PaymentResultAdditionalData,
            'auth_code': str,
            'dcc_amount': Amount,
            'dcc_signature': str,
            'fraud_result': FraudResult,
            'issuer_url': str,
            'md': str,
            'pa_request': str,
            'psp_reference': str,
            'refusal_reason': str,
            'result_code': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'auth_code': 'authCode',
            'dcc_amount': 'dccAmount',
            'dcc_signature': 'dccSignature',
            'fraud_result': 'fraudResult',
            'issuer_url': 'issuerUrl',
            'md': 'md',
            'pa_request': 'paRequest',
            'psp_reference': 'pspReference',
            'refusal_reason': 'refusalReason',
            'result_code': 'resultCode'
        }

        self._additional_data = additional_data
        self._auth_code = auth_code
        self._dcc_amount = dcc_amount
        self._dcc_signature = dcc_signature
        self._fraud_result = fraud_result
        self._issuer_url = issuer_url
        self._md = md
        self._pa_request = pa_request
        self._psp_reference = psp_reference
        self._refusal_reason = refusal_reason
        self._result_code = result_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResult of this PaymentResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentResult.


        :return: The additional_data of this PaymentResult.
        :rtype: PaymentResultAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentResult.


        :param additional_data: The additional_data of this PaymentResult.
        :type additional_data: PaymentResultAdditionalData
        """

        self._additional_data = additional_data

    @property
    def auth_code(self):
        """Gets the auth_code of this PaymentResult.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.

        :return: The auth_code of this PaymentResult.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this PaymentResult.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.

        :param auth_code: The auth_code of this PaymentResult.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def dcc_amount(self):
        """Gets the dcc_amount of this PaymentResult.

        Includes the currency of the conversion and the value of the transaction. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The dcc_amount of this PaymentResult.
        :rtype: Amount
        """
        return self._dcc_amount

    @dcc_amount.setter
    def dcc_amount(self, dcc_amount):
        """Sets the dcc_amount of this PaymentResult.

        Includes the currency of the conversion and the value of the transaction. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param dcc_amount: The dcc_amount of this PaymentResult.
        :type dcc_amount: Amount
        """

        self._dcc_amount = dcc_amount

    @property
    def dcc_signature(self):
        """Gets the dcc_signature of this PaymentResult.

        Cryptographic signature used to verify `dccQuote`. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The dcc_signature of this PaymentResult.
        :rtype: str
        """
        return self._dcc_signature

    @dcc_signature.setter
    def dcc_signature(self, dcc_signature):
        """Sets the dcc_signature of this PaymentResult.

        Cryptographic signature used to verify `dccQuote`. > This value only applies if you have implemented Dynamic Currency Conversion. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param dcc_signature: The dcc_signature of this PaymentResult.
        :type dcc_signature: str
        """

        self._dcc_signature = dcc_signature

    @property
    def fraud_result(self):
        """Gets the fraud_result of this PaymentResult.

        The fraud result properties of the payment.

        :return: The fraud_result of this PaymentResult.
        :rtype: FraudResult
        """
        return self._fraud_result

    @fraud_result.setter
    def fraud_result(self, fraud_result):
        """Sets the fraud_result of this PaymentResult.

        The fraud result properties of the payment.

        :param fraud_result: The fraud_result of this PaymentResult.
        :type fraud_result: FraudResult
        """

        self._fraud_result = fraud_result

    @property
    def issuer_url(self):
        """Gets the issuer_url of this PaymentResult.

        The URL to direct the shopper to. > In case of SecurePlus, do not redirect a shopper to this URL.

        :return: The issuer_url of this PaymentResult.
        :rtype: str
        """
        return self._issuer_url

    @issuer_url.setter
    def issuer_url(self, issuer_url):
        """Sets the issuer_url of this PaymentResult.

        The URL to direct the shopper to. > In case of SecurePlus, do not redirect a shopper to this URL.

        :param issuer_url: The issuer_url of this PaymentResult.
        :type issuer_url: str
        """

        self._issuer_url = issuer_url

    @property
    def md(self):
        """Gets the md of this PaymentResult.

        The payment session.

        :return: The md of this PaymentResult.
        :rtype: str
        """
        return self._md

    @md.setter
    def md(self, md):
        """Sets the md of this PaymentResult.

        The payment session.

        :param md: The md of this PaymentResult.
        :type md: str
        """
        if md is not None and len(md) > 20000:
            raise ValueError("Invalid value for `md`, length must be less than or equal to `20000`")

        self._md = md

    @property
    def pa_request(self):
        """Gets the pa_request of this PaymentResult.

        The 3D request data for the issuer.  If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).

        :return: The pa_request of this PaymentResult.
        :rtype: str
        """
        return self._pa_request

    @pa_request.setter
    def pa_request(self, pa_request):
        """Sets the pa_request of this PaymentResult.

        The 3D request data for the issuer.  If the value is **CUPSecurePlus-CollectSMSVerificationCode**, collect an SMS code from the shopper and pass it in the `/authorise3D` request. For more information, see [3D Secure](https://docs.adyen.com/classic-integration/3d-secure).

        :param pa_request: The pa_request of this PaymentResult.
        :type pa_request: str
        """

        self._pa_request = pa_request

    @property
    def psp_reference(self):
        """Gets the psp_reference of this PaymentResult.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :return: The psp_reference of this PaymentResult.
        :rtype: str
        """
        return self._psp_reference

    @psp_reference.setter
    def psp_reference(self, psp_reference):
        """Sets the psp_reference of this PaymentResult.

        Adyen's 16-character reference associated with the transaction/request. This value is globally unique; quote it when communicating with us about this request.

        :param psp_reference: The psp_reference of this PaymentResult.
        :type psp_reference: str
        """

        self._psp_reference = psp_reference

    @property
    def refusal_reason(self):
        """Gets the refusal_reason of this PaymentResult.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :return: The refusal_reason of this PaymentResult.
        :rtype: str
        """
        return self._refusal_reason

    @refusal_reason.setter
    def refusal_reason(self, refusal_reason):
        """Sets the refusal_reason of this PaymentResult.

        If the payment's authorisation is refused or an error occurs during authorisation, this field holds Adyen's mapped reason for the refusal or a description of the error. When a transaction fails, the authorisation response includes `resultCode` and `refusalReason` values.  For more information, see [Refusal reasons](https://docs.adyen.com/development-resources/refusal-reasons).

        :param refusal_reason: The refusal_reason of this PaymentResult.
        :type refusal_reason: str
        """

        self._refusal_reason = refusal_reason

    @property
    def result_code(self):
        """Gets the result_code of this PaymentResult.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :return: The result_code of this PaymentResult.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this PaymentResult.

        The result of the payment. For more information, see [Result codes](https://docs.adyen.com/online-payments/payment-result-codes).  Possible values:  * **AuthenticationFinished** – The payment has been successfully authenticated with 3D Secure 2. Returned for 3D Secure 2 authentication-only transactions. * **AuthenticationNotRequired** – The transaction does not require 3D Secure authentication. Returned for [standalone authentication-only integrations](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only). * **Authorised** – The payment was successfully authorised. This state serves as an indicator to proceed with the delivery of goods and services. This is a final state. * **Cancelled** – Indicates the payment has been cancelled (either by the shopper or the merchant) before processing was completed. This is a final state. * **ChallengeShopper** – The issuer requires further shopper interaction before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **Error** – There was an error when the payment was being processed. The reason is given in the `refusalReason` field. This is a final state. * **IdentifyShopper** – The issuer requires the shopper's device fingerprint before the payment can be authenticated. Returned for 3D Secure 2 transactions. * **PartiallyAuthorised** – The payment has been authorised for a partial amount. This happens for card payments when the merchant supports Partial Authorisations and the cardholder has insufficient funds. * **Pending** – Indicates that it is not possible to obtain the final status of the payment. This can happen if the systems providing final status information for the payment are unavailable, or if the shopper needs to take further action to complete the payment. * **PresentToShopper** – Indicates that the response contains additional information that you need to present to a shopper, so that they can use it to complete a payment. * **Received** – Indicates the payment has successfully been received by Adyen, and will be processed. This is the initial state for all payments. * **RedirectShopper** – Indicates the shopper should be redirected to an external web page or app to complete the authorisation. * **Refused** – Indicates the payment was refused. The reason is given in the `refusalReason` field. This is a final state.

        :param result_code: The result_code of this PaymentResult.
        :type result_code: str
        """
        allowed_values = ["AuthenticationFinished", "AuthenticationNotRequired", "Authorised", "Cancelled", "ChallengeShopper", "Error", "IdentifyShopper", "PartiallyAuthorised", "Pending", "PresentToShopper", "Received", "RedirectShopper", "Refused", "Success"]  # noqa: E501
        if result_code not in allowed_values:
            raise ValueError(
                "Invalid value for `result_code` ({0}), must be one of {1}"
                .format(result_code, allowed_values)
            )

        self._result_code = result_code
