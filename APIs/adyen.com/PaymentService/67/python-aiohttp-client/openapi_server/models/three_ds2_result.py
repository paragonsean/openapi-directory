# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDS2Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authentication_value: str=None, cavv_algorithm: str=None, challenge_cancel: str=None, ds_trans_id: str=None, eci: str=None, exemption_indicator: str=None, message_version: str=None, risk_score: str=None, three_ds_server_trans_id: str=None, timestamp: str=None, trans_status: str=None, trans_status_reason: str=None, white_list_status: str=None):
        """ThreeDS2Result - a model defined in OpenAPI

        :param authentication_value: The authentication_value of this ThreeDS2Result.
        :param cavv_algorithm: The cavv_algorithm of this ThreeDS2Result.
        :param challenge_cancel: The challenge_cancel of this ThreeDS2Result.
        :param ds_trans_id: The ds_trans_id of this ThreeDS2Result.
        :param eci: The eci of this ThreeDS2Result.
        :param exemption_indicator: The exemption_indicator of this ThreeDS2Result.
        :param message_version: The message_version of this ThreeDS2Result.
        :param risk_score: The risk_score of this ThreeDS2Result.
        :param three_ds_server_trans_id: The three_ds_server_trans_id of this ThreeDS2Result.
        :param timestamp: The timestamp of this ThreeDS2Result.
        :param trans_status: The trans_status of this ThreeDS2Result.
        :param trans_status_reason: The trans_status_reason of this ThreeDS2Result.
        :param white_list_status: The white_list_status of this ThreeDS2Result.
        """
        self.openapi_types = {
            'authentication_value': str,
            'cavv_algorithm': str,
            'challenge_cancel': str,
            'ds_trans_id': str,
            'eci': str,
            'exemption_indicator': str,
            'message_version': str,
            'risk_score': str,
            'three_ds_server_trans_id': str,
            'timestamp': str,
            'trans_status': str,
            'trans_status_reason': str,
            'white_list_status': str
        }

        self.attribute_map = {
            'authentication_value': 'authenticationValue',
            'cavv_algorithm': 'cavvAlgorithm',
            'challenge_cancel': 'challengeCancel',
            'ds_trans_id': 'dsTransID',
            'eci': 'eci',
            'exemption_indicator': 'exemptionIndicator',
            'message_version': 'messageVersion',
            'risk_score': 'riskScore',
            'three_ds_server_trans_id': 'threeDSServerTransID',
            'timestamp': 'timestamp',
            'trans_status': 'transStatus',
            'trans_status_reason': 'transStatusReason',
            'white_list_status': 'whiteListStatus'
        }

        self._authentication_value = authentication_value
        self._cavv_algorithm = cavv_algorithm
        self._challenge_cancel = challenge_cancel
        self._ds_trans_id = ds_trans_id
        self._eci = eci
        self._exemption_indicator = exemption_indicator
        self._message_version = message_version
        self._risk_score = risk_score
        self._three_ds_server_trans_id = three_ds_server_trans_id
        self._timestamp = timestamp
        self._trans_status = trans_status
        self._trans_status_reason = trans_status_reason
        self._white_list_status = white_list_status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDS2Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDS2Result of this ThreeDS2Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authentication_value(self):
        """Gets the authentication_value of this ThreeDS2Result.

        The `authenticationValue` value as defined in the 3D Secure 2 specification.

        :return: The authentication_value of this ThreeDS2Result.
        :rtype: str
        """
        return self._authentication_value

    @authentication_value.setter
    def authentication_value(self, authentication_value):
        """Sets the authentication_value of this ThreeDS2Result.

        The `authenticationValue` value as defined in the 3D Secure 2 specification.

        :param authentication_value: The authentication_value of this ThreeDS2Result.
        :type authentication_value: str
        """

        self._authentication_value = authentication_value

    @property
    def cavv_algorithm(self):
        """Gets the cavv_algorithm of this ThreeDS2Result.

        The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.

        :return: The cavv_algorithm of this ThreeDS2Result.
        :rtype: str
        """
        return self._cavv_algorithm

    @cavv_algorithm.setter
    def cavv_algorithm(self, cavv_algorithm):
        """Sets the cavv_algorithm of this ThreeDS2Result.

        The algorithm used by the ACS to calculate the authentication value, only for Cartes Bancaires integrations.

        :param cavv_algorithm: The cavv_algorithm of this ThreeDS2Result.
        :type cavv_algorithm: str
        """

        self._cavv_algorithm = cavv_algorithm

    @property
    def challenge_cancel(self):
        """Gets the challenge_cancel of this ThreeDS2Result.

        Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).

        :return: The challenge_cancel of this ThreeDS2Result.
        :rtype: str
        """
        return self._challenge_cancel

    @challenge_cancel.setter
    def challenge_cancel(self, challenge_cancel):
        """Sets the challenge_cancel of this ThreeDS2Result.

        Indicator informing the Access Control Server (ACS) and the Directory Server (DS) that the authentication has been cancelled. For possible values, refer to [3D Secure API reference](https://docs.adyen.com/online-payments/3d-secure/api-reference#mpidata).

        :param challenge_cancel: The challenge_cancel of this ThreeDS2Result.
        :type challenge_cancel: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "06", "07"]  # noqa: E501
        if challenge_cancel not in allowed_values:
            raise ValueError(
                "Invalid value for `challenge_cancel` ({0}), must be one of {1}"
                .format(challenge_cancel, allowed_values)
            )

        self._challenge_cancel = challenge_cancel

    @property
    def ds_trans_id(self):
        """Gets the ds_trans_id of this ThreeDS2Result.

        The `dsTransID` value as defined in the 3D Secure 2 specification.

        :return: The ds_trans_id of this ThreeDS2Result.
        :rtype: str
        """
        return self._ds_trans_id

    @ds_trans_id.setter
    def ds_trans_id(self, ds_trans_id):
        """Sets the ds_trans_id of this ThreeDS2Result.

        The `dsTransID` value as defined in the 3D Secure 2 specification.

        :param ds_trans_id: The ds_trans_id of this ThreeDS2Result.
        :type ds_trans_id: str
        """

        self._ds_trans_id = ds_trans_id

    @property
    def eci(self):
        """Gets the eci of this ThreeDS2Result.

        The `eci` value as defined in the 3D Secure 2 specification.

        :return: The eci of this ThreeDS2Result.
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this ThreeDS2Result.

        The `eci` value as defined in the 3D Secure 2 specification.

        :param eci: The eci of this ThreeDS2Result.
        :type eci: str
        """

        self._eci = eci

    @property
    def exemption_indicator(self):
        """Gets the exemption_indicator of this ThreeDS2Result.

        Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * `lowValue` * `secureCorporate` * `trustedBeneficiary` * `transactionRiskAnalysis` 

        :return: The exemption_indicator of this ThreeDS2Result.
        :rtype: str
        """
        return self._exemption_indicator

    @exemption_indicator.setter
    def exemption_indicator(self, exemption_indicator):
        """Sets the exemption_indicator of this ThreeDS2Result.

        Indicates the exemption type that was applied by the issuer to the authentication, if exemption applied. Allowed values: * `lowValue` * `secureCorporate` * `trustedBeneficiary` * `transactionRiskAnalysis` 

        :param exemption_indicator: The exemption_indicator of this ThreeDS2Result.
        :type exemption_indicator: str
        """
        allowed_values = ["lowValue", "secureCorporate", "trustedBeneficiary", "transactionRiskAnalysis"]  # noqa: E501
        if exemption_indicator not in allowed_values:
            raise ValueError(
                "Invalid value for `exemption_indicator` ({0}), must be one of {1}"
                .format(exemption_indicator, allowed_values)
            )

        self._exemption_indicator = exemption_indicator

    @property
    def message_version(self):
        """Gets the message_version of this ThreeDS2Result.

        The `messageVersion` value as defined in the 3D Secure 2 specification.

        :return: The message_version of this ThreeDS2Result.
        :rtype: str
        """
        return self._message_version

    @message_version.setter
    def message_version(self, message_version):
        """Sets the message_version of this ThreeDS2Result.

        The `messageVersion` value as defined in the 3D Secure 2 specification.

        :param message_version: The message_version of this ThreeDS2Result.
        :type message_version: str
        """

        self._message_version = message_version

    @property
    def risk_score(self):
        """Gets the risk_score of this ThreeDS2Result.

        Risk score calculated by Cartes Bancaires Directory Server (DS).

        :return: The risk_score of this ThreeDS2Result.
        :rtype: str
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this ThreeDS2Result.

        Risk score calculated by Cartes Bancaires Directory Server (DS).

        :param risk_score: The risk_score of this ThreeDS2Result.
        :type risk_score: str
        """

        self._risk_score = risk_score

    @property
    def three_ds_server_trans_id(self):
        """Gets the three_ds_server_trans_id of this ThreeDS2Result.

        The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.

        :return: The three_ds_server_trans_id of this ThreeDS2Result.
        :rtype: str
        """
        return self._three_ds_server_trans_id

    @three_ds_server_trans_id.setter
    def three_ds_server_trans_id(self, three_ds_server_trans_id):
        """Sets the three_ds_server_trans_id of this ThreeDS2Result.

        The `threeDSServerTransID` value as defined in the 3D Secure 2 specification.

        :param three_ds_server_trans_id: The three_ds_server_trans_id of this ThreeDS2Result.
        :type three_ds_server_trans_id: str
        """

        self._three_ds_server_trans_id = three_ds_server_trans_id

    @property
    def timestamp(self):
        """Gets the timestamp of this ThreeDS2Result.

        The `timestamp` value of the 3D Secure 2 authentication.

        :return: The timestamp of this ThreeDS2Result.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ThreeDS2Result.

        The `timestamp` value of the 3D Secure 2 authentication.

        :param timestamp: The timestamp of this ThreeDS2Result.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def trans_status(self):
        """Gets the trans_status of this ThreeDS2Result.

        The `transStatus` value as defined in the 3D Secure 2 specification.

        :return: The trans_status of this ThreeDS2Result.
        :rtype: str
        """
        return self._trans_status

    @trans_status.setter
    def trans_status(self, trans_status):
        """Sets the trans_status of this ThreeDS2Result.

        The `transStatus` value as defined in the 3D Secure 2 specification.

        :param trans_status: The trans_status of this ThreeDS2Result.
        :type trans_status: str
        """

        self._trans_status = trans_status

    @property
    def trans_status_reason(self):
        """Gets the trans_status_reason of this ThreeDS2Result.

        Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).

        :return: The trans_status_reason of this ThreeDS2Result.
        :rtype: str
        """
        return self._trans_status_reason

    @trans_status_reason.setter
    def trans_status_reason(self, trans_status_reason):
        """Sets the trans_status_reason of this ThreeDS2Result.

        Provides information on why the `transStatus` field has the specified value. For possible values, refer to [our docs](https://docs.adyen.com/online-payments/3d-secure/api-reference#possible-transstatusreason-values).

        :param trans_status_reason: The trans_status_reason of this ThreeDS2Result.
        :type trans_status_reason: str
        """

        self._trans_status_reason = trans_status_reason

    @property
    def white_list_status(self):
        """Gets the white_list_status of this ThreeDS2Result.

        The `whiteListStatus` value as defined in the 3D Secure 2 specification.

        :return: The white_list_status of this ThreeDS2Result.
        :rtype: str
        """
        return self._white_list_status

    @white_list_status.setter
    def white_list_status(self, white_list_status):
        """Sets the white_list_status of this ThreeDS2Result.

        The `whiteListStatus` value as defined in the 3D Secure 2 specification.

        :param white_list_status: The white_list_status of this ThreeDS2Result.
        :type white_list_status: str
        """

        self._white_list_status = white_list_status
