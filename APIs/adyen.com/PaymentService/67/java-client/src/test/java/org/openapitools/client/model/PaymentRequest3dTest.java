/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AccountInfo;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Amount;
import org.openapitools.client.model.ApplicationInfo;
import org.openapitools.client.model.BrowserInfo;
import org.openapitools.client.model.ForexQuote;
import org.openapitools.client.model.Installments;
import org.openapitools.client.model.MerchantRiskIndicator;
import org.openapitools.client.model.Name;
import org.openapitools.client.model.PaymentRequestAdditionalData;
import org.openapitools.client.model.Recurring;
import org.openapitools.client.model.Split;
import org.openapitools.client.model.ThreeDS2RequestData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for PaymentRequest3d
 */
public class PaymentRequest3dTest {
    private final PaymentRequest3d model = new PaymentRequest3d();

    /**
     * Model tests for PaymentRequest3d
     */
    @Test
    public void testPaymentRequest3d() {
        // TODO: test PaymentRequest3d
    }

    /**
     * Test the property 'accountInfo'
     */
    @Test
    public void accountInfoTest() {
        // TODO: test accountInfo
    }

    /**
     * Test the property 'additionalAmount'
     */
    @Test
    public void additionalAmountTest() {
        // TODO: test additionalAmount
    }

    /**
     * Test the property 'additionalData'
     */
    @Test
    public void additionalDataTest() {
        // TODO: test additionalData
    }

    /**
     * Test the property 'amount'
     */
    @Test
    public void amountTest() {
        // TODO: test amount
    }

    /**
     * Test the property 'applicationInfo'
     */
    @Test
    public void applicationInfoTest() {
        // TODO: test applicationInfo
    }

    /**
     * Test the property 'billingAddress'
     */
    @Test
    public void billingAddressTest() {
        // TODO: test billingAddress
    }

    /**
     * Test the property 'browserInfo'
     */
    @Test
    public void browserInfoTest() {
        // TODO: test browserInfo
    }

    /**
     * Test the property 'captureDelayHours'
     */
    @Test
    public void captureDelayHoursTest() {
        // TODO: test captureDelayHours
    }

    /**
     * Test the property 'dateOfBirth'
     */
    @Test
    public void dateOfBirthTest() {
        // TODO: test dateOfBirth
    }

    /**
     * Test the property 'dccQuote'
     */
    @Test
    public void dccQuoteTest() {
        // TODO: test dccQuote
    }

    /**
     * Test the property 'deliveryAddress'
     */
    @Test
    public void deliveryAddressTest() {
        // TODO: test deliveryAddress
    }

    /**
     * Test the property 'deliveryDate'
     */
    @Test
    public void deliveryDateTest() {
        // TODO: test deliveryDate
    }

    /**
     * Test the property 'deviceFingerprint'
     */
    @Test
    public void deviceFingerprintTest() {
        // TODO: test deviceFingerprint
    }

    /**
     * Test the property 'fraudOffset'
     */
    @Test
    public void fraudOffsetTest() {
        // TODO: test fraudOffset
    }

    /**
     * Test the property 'installments'
     */
    @Test
    public void installmentsTest() {
        // TODO: test installments
    }

    /**
     * Test the property 'mcc'
     */
    @Test
    public void mccTest() {
        // TODO: test mcc
    }

    /**
     * Test the property 'md'
     */
    @Test
    public void mdTest() {
        // TODO: test md
    }

    /**
     * Test the property 'merchantAccount'
     */
    @Test
    public void merchantAccountTest() {
        // TODO: test merchantAccount
    }

    /**
     * Test the property 'merchantOrderReference'
     */
    @Test
    public void merchantOrderReferenceTest() {
        // TODO: test merchantOrderReference
    }

    /**
     * Test the property 'merchantRiskIndicator'
     */
    @Test
    public void merchantRiskIndicatorTest() {
        // TODO: test merchantRiskIndicator
    }

    /**
     * Test the property 'metadata'
     */
    @Test
    public void metadataTest() {
        // TODO: test metadata
    }

    /**
     * Test the property 'orderReference'
     */
    @Test
    public void orderReferenceTest() {
        // TODO: test orderReference
    }

    /**
     * Test the property 'paResponse'
     */
    @Test
    public void paResponseTest() {
        // TODO: test paResponse
    }

    /**
     * Test the property 'recurring'
     */
    @Test
    public void recurringTest() {
        // TODO: test recurring
    }

    /**
     * Test the property 'recurringProcessingModel'
     */
    @Test
    public void recurringProcessingModelTest() {
        // TODO: test recurringProcessingModel
    }

    /**
     * Test the property 'reference'
     */
    @Test
    public void referenceTest() {
        // TODO: test reference
    }

    /**
     * Test the property 'selectedBrand'
     */
    @Test
    public void selectedBrandTest() {
        // TODO: test selectedBrand
    }

    /**
     * Test the property 'selectedRecurringDetailReference'
     */
    @Test
    public void selectedRecurringDetailReferenceTest() {
        // TODO: test selectedRecurringDetailReference
    }

    /**
     * Test the property 'sessionId'
     */
    @Test
    public void sessionIdTest() {
        // TODO: test sessionId
    }

    /**
     * Test the property 'shopperEmail'
     */
    @Test
    public void shopperEmailTest() {
        // TODO: test shopperEmail
    }

    /**
     * Test the property 'shopperIP'
     */
    @Test
    public void shopperIPTest() {
        // TODO: test shopperIP
    }

    /**
     * Test the property 'shopperInteraction'
     */
    @Test
    public void shopperInteractionTest() {
        // TODO: test shopperInteraction
    }

    /**
     * Test the property 'shopperLocale'
     */
    @Test
    public void shopperLocaleTest() {
        // TODO: test shopperLocale
    }

    /**
     * Test the property 'shopperName'
     */
    @Test
    public void shopperNameTest() {
        // TODO: test shopperName
    }

    /**
     * Test the property 'shopperReference'
     */
    @Test
    public void shopperReferenceTest() {
        // TODO: test shopperReference
    }

    /**
     * Test the property 'shopperStatement'
     */
    @Test
    public void shopperStatementTest() {
        // TODO: test shopperStatement
    }

    /**
     * Test the property 'socialSecurityNumber'
     */
    @Test
    public void socialSecurityNumberTest() {
        // TODO: test socialSecurityNumber
    }

    /**
     * Test the property 'splits'
     */
    @Test
    public void splitsTest() {
        // TODO: test splits
    }

    /**
     * Test the property 'store'
     */
    @Test
    public void storeTest() {
        // TODO: test store
    }

    /**
     * Test the property 'telephoneNumber'
     */
    @Test
    public void telephoneNumberTest() {
        // TODO: test telephoneNumber
    }

    /**
     * Test the property 'threeDS2RequestData'
     */
    @Test
    public void threeDS2RequestDataTest() {
        // TODO: test threeDS2RequestData
    }

    /**
     * Test the property 'threeDSAuthenticationOnly'
     */
    @Test
    public void threeDSAuthenticationOnlyTest() {
        // TODO: test threeDSAuthenticationOnly
    }

    /**
     * Test the property 'totalsGroup'
     */
    @Test
    public void totalsGroupTest() {
        // TODO: test totalsGroup
    }

    /**
     * Test the property 'trustedShopper'
     */
    @Test
    public void trustedShopperTest() {
        // TODO: test trustedShopper
    }

}
