/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBrowserInfo.h
 *
 * 
 */

#ifndef OAIBrowserInfo_H
#define OAIBrowserInfo_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIBrowserInfo : public OAIObject {
public:
    OAIBrowserInfo();
    OAIBrowserInfo(QString json);
    ~OAIBrowserInfo() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAcceptHeader() const;
    void setAcceptHeader(const QString &accept_header);
    bool is_accept_header_Set() const;
    bool is_accept_header_Valid() const;

    qint32 getColorDepth() const;
    void setColorDepth(const qint32 &color_depth);
    bool is_color_depth_Set() const;
    bool is_color_depth_Valid() const;

    bool isJavaEnabled() const;
    void setJavaEnabled(const bool &java_enabled);
    bool is_java_enabled_Set() const;
    bool is_java_enabled_Valid() const;

    bool isJavaScriptEnabled() const;
    void setJavaScriptEnabled(const bool &java_script_enabled);
    bool is_java_script_enabled_Set() const;
    bool is_java_script_enabled_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    qint32 getScreenHeight() const;
    void setScreenHeight(const qint32 &screen_height);
    bool is_screen_height_Set() const;
    bool is_screen_height_Valid() const;

    qint32 getScreenWidth() const;
    void setScreenWidth(const qint32 &screen_width);
    bool is_screen_width_Set() const;
    bool is_screen_width_Valid() const;

    qint32 getTimeZoneOffset() const;
    void setTimeZoneOffset(const qint32 &time_zone_offset);
    bool is_time_zone_offset_Set() const;
    bool is_time_zone_offset_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_accept_header;
    bool m_accept_header_isSet;
    bool m_accept_header_isValid;

    qint32 m_color_depth;
    bool m_color_depth_isSet;
    bool m_color_depth_isValid;

    bool m_java_enabled;
    bool m_java_enabled_isSet;
    bool m_java_enabled_isValid;

    bool m_java_script_enabled;
    bool m_java_script_enabled_isSet;
    bool m_java_script_enabled_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    qint32 m_screen_height;
    bool m_screen_height_isSet;
    bool m_screen_height_isValid;

    qint32 m_screen_width;
    bool m_screen_width_isSet;
    bool m_screen_width_isValid;

    qint32 m_time_zone_offset;
    bool m_time_zone_offset_isSet;
    bool m_time_zone_offset_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBrowserInfo)

#endif // OAIBrowserInfo_H
