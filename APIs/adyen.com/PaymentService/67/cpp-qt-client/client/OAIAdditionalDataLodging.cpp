/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataLodging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataLodging::OAIAdditionalDataLodging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataLodging::OAIAdditionalDataLodging() {
    this->initializeModel();
}

OAIAdditionalDataLodging::~OAIAdditionalDataLodging() {}

void OAIAdditionalDataLodging::initializeModel() {

    m_lodging_check_in_date_isSet = false;
    m_lodging_check_in_date_isValid = false;

    m_lodging_check_out_date_isSet = false;
    m_lodging_check_out_date_isValid = false;

    m_lodging_customer_service_toll_free_number_isSet = false;
    m_lodging_customer_service_toll_free_number_isValid = false;

    m_lodging_fire_safety_act_indicator_isSet = false;
    m_lodging_fire_safety_act_indicator_isValid = false;

    m_lodging_folio_cash_advances_isSet = false;
    m_lodging_folio_cash_advances_isValid = false;

    m_lodging_folio_number_isSet = false;
    m_lodging_folio_number_isValid = false;

    m_lodging_food_beverage_charges_isSet = false;
    m_lodging_food_beverage_charges_isValid = false;

    m_lodging_no_show_indicator_isSet = false;
    m_lodging_no_show_indicator_isValid = false;

    m_lodging_prepaid_expenses_isSet = false;
    m_lodging_prepaid_expenses_isValid = false;

    m_lodging_property_phone_number_isSet = false;
    m_lodging_property_phone_number_isValid = false;

    m_lodging_room1_number_of_nights_isSet = false;
    m_lodging_room1_number_of_nights_isValid = false;

    m_lodging_room1_rate_isSet = false;
    m_lodging_room1_rate_isValid = false;

    m_lodging_total_room_tax_isSet = false;
    m_lodging_total_room_tax_isValid = false;

    m_lodging_total_tax_isSet = false;
    m_lodging_total_tax_isValid = false;

    m_travel_entertainment_auth_data_duration_isSet = false;
    m_travel_entertainment_auth_data_duration_isValid = false;

    m_travel_entertainment_auth_data_market_isSet = false;
    m_travel_entertainment_auth_data_market_isValid = false;
}

void OAIAdditionalDataLodging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataLodging::fromJsonObject(QJsonObject json) {

    m_lodging_check_in_date_isValid = ::OpenAPI::fromJsonValue(m_lodging_check_in_date, json[QString("lodging.checkInDate")]);
    m_lodging_check_in_date_isSet = !json[QString("lodging.checkInDate")].isNull() && m_lodging_check_in_date_isValid;

    m_lodging_check_out_date_isValid = ::OpenAPI::fromJsonValue(m_lodging_check_out_date, json[QString("lodging.checkOutDate")]);
    m_lodging_check_out_date_isSet = !json[QString("lodging.checkOutDate")].isNull() && m_lodging_check_out_date_isValid;

    m_lodging_customer_service_toll_free_number_isValid = ::OpenAPI::fromJsonValue(m_lodging_customer_service_toll_free_number, json[QString("lodging.customerServiceTollFreeNumber")]);
    m_lodging_customer_service_toll_free_number_isSet = !json[QString("lodging.customerServiceTollFreeNumber")].isNull() && m_lodging_customer_service_toll_free_number_isValid;

    m_lodging_fire_safety_act_indicator_isValid = ::OpenAPI::fromJsonValue(m_lodging_fire_safety_act_indicator, json[QString("lodging.fireSafetyActIndicator")]);
    m_lodging_fire_safety_act_indicator_isSet = !json[QString("lodging.fireSafetyActIndicator")].isNull() && m_lodging_fire_safety_act_indicator_isValid;

    m_lodging_folio_cash_advances_isValid = ::OpenAPI::fromJsonValue(m_lodging_folio_cash_advances, json[QString("lodging.folioCashAdvances")]);
    m_lodging_folio_cash_advances_isSet = !json[QString("lodging.folioCashAdvances")].isNull() && m_lodging_folio_cash_advances_isValid;

    m_lodging_folio_number_isValid = ::OpenAPI::fromJsonValue(m_lodging_folio_number, json[QString("lodging.folioNumber")]);
    m_lodging_folio_number_isSet = !json[QString("lodging.folioNumber")].isNull() && m_lodging_folio_number_isValid;

    m_lodging_food_beverage_charges_isValid = ::OpenAPI::fromJsonValue(m_lodging_food_beverage_charges, json[QString("lodging.foodBeverageCharges")]);
    m_lodging_food_beverage_charges_isSet = !json[QString("lodging.foodBeverageCharges")].isNull() && m_lodging_food_beverage_charges_isValid;

    m_lodging_no_show_indicator_isValid = ::OpenAPI::fromJsonValue(m_lodging_no_show_indicator, json[QString("lodging.noShowIndicator")]);
    m_lodging_no_show_indicator_isSet = !json[QString("lodging.noShowIndicator")].isNull() && m_lodging_no_show_indicator_isValid;

    m_lodging_prepaid_expenses_isValid = ::OpenAPI::fromJsonValue(m_lodging_prepaid_expenses, json[QString("lodging.prepaidExpenses")]);
    m_lodging_prepaid_expenses_isSet = !json[QString("lodging.prepaidExpenses")].isNull() && m_lodging_prepaid_expenses_isValid;

    m_lodging_property_phone_number_isValid = ::OpenAPI::fromJsonValue(m_lodging_property_phone_number, json[QString("lodging.propertyPhoneNumber")]);
    m_lodging_property_phone_number_isSet = !json[QString("lodging.propertyPhoneNumber")].isNull() && m_lodging_property_phone_number_isValid;

    m_lodging_room1_number_of_nights_isValid = ::OpenAPI::fromJsonValue(m_lodging_room1_number_of_nights, json[QString("lodging.room1.numberOfNights")]);
    m_lodging_room1_number_of_nights_isSet = !json[QString("lodging.room1.numberOfNights")].isNull() && m_lodging_room1_number_of_nights_isValid;

    m_lodging_room1_rate_isValid = ::OpenAPI::fromJsonValue(m_lodging_room1_rate, json[QString("lodging.room1.rate")]);
    m_lodging_room1_rate_isSet = !json[QString("lodging.room1.rate")].isNull() && m_lodging_room1_rate_isValid;

    m_lodging_total_room_tax_isValid = ::OpenAPI::fromJsonValue(m_lodging_total_room_tax, json[QString("lodging.totalRoomTax")]);
    m_lodging_total_room_tax_isSet = !json[QString("lodging.totalRoomTax")].isNull() && m_lodging_total_room_tax_isValid;

    m_lodging_total_tax_isValid = ::OpenAPI::fromJsonValue(m_lodging_total_tax, json[QString("lodging.totalTax")]);
    m_lodging_total_tax_isSet = !json[QString("lodging.totalTax")].isNull() && m_lodging_total_tax_isValid;

    m_travel_entertainment_auth_data_duration_isValid = ::OpenAPI::fromJsonValue(m_travel_entertainment_auth_data_duration, json[QString("travelEntertainmentAuthData.duration")]);
    m_travel_entertainment_auth_data_duration_isSet = !json[QString("travelEntertainmentAuthData.duration")].isNull() && m_travel_entertainment_auth_data_duration_isValid;

    m_travel_entertainment_auth_data_market_isValid = ::OpenAPI::fromJsonValue(m_travel_entertainment_auth_data_market, json[QString("travelEntertainmentAuthData.market")]);
    m_travel_entertainment_auth_data_market_isSet = !json[QString("travelEntertainmentAuthData.market")].isNull() && m_travel_entertainment_auth_data_market_isValid;
}

QString OAIAdditionalDataLodging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataLodging::asJsonObject() const {
    QJsonObject obj;
    if (m_lodging_check_in_date_isSet) {
        obj.insert(QString("lodging.checkInDate"), ::OpenAPI::toJsonValue(m_lodging_check_in_date));
    }
    if (m_lodging_check_out_date_isSet) {
        obj.insert(QString("lodging.checkOutDate"), ::OpenAPI::toJsonValue(m_lodging_check_out_date));
    }
    if (m_lodging_customer_service_toll_free_number_isSet) {
        obj.insert(QString("lodging.customerServiceTollFreeNumber"), ::OpenAPI::toJsonValue(m_lodging_customer_service_toll_free_number));
    }
    if (m_lodging_fire_safety_act_indicator_isSet) {
        obj.insert(QString("lodging.fireSafetyActIndicator"), ::OpenAPI::toJsonValue(m_lodging_fire_safety_act_indicator));
    }
    if (m_lodging_folio_cash_advances_isSet) {
        obj.insert(QString("lodging.folioCashAdvances"), ::OpenAPI::toJsonValue(m_lodging_folio_cash_advances));
    }
    if (m_lodging_folio_number_isSet) {
        obj.insert(QString("lodging.folioNumber"), ::OpenAPI::toJsonValue(m_lodging_folio_number));
    }
    if (m_lodging_food_beverage_charges_isSet) {
        obj.insert(QString("lodging.foodBeverageCharges"), ::OpenAPI::toJsonValue(m_lodging_food_beverage_charges));
    }
    if (m_lodging_no_show_indicator_isSet) {
        obj.insert(QString("lodging.noShowIndicator"), ::OpenAPI::toJsonValue(m_lodging_no_show_indicator));
    }
    if (m_lodging_prepaid_expenses_isSet) {
        obj.insert(QString("lodging.prepaidExpenses"), ::OpenAPI::toJsonValue(m_lodging_prepaid_expenses));
    }
    if (m_lodging_property_phone_number_isSet) {
        obj.insert(QString("lodging.propertyPhoneNumber"), ::OpenAPI::toJsonValue(m_lodging_property_phone_number));
    }
    if (m_lodging_room1_number_of_nights_isSet) {
        obj.insert(QString("lodging.room1.numberOfNights"), ::OpenAPI::toJsonValue(m_lodging_room1_number_of_nights));
    }
    if (m_lodging_room1_rate_isSet) {
        obj.insert(QString("lodging.room1.rate"), ::OpenAPI::toJsonValue(m_lodging_room1_rate));
    }
    if (m_lodging_total_room_tax_isSet) {
        obj.insert(QString("lodging.totalRoomTax"), ::OpenAPI::toJsonValue(m_lodging_total_room_tax));
    }
    if (m_lodging_total_tax_isSet) {
        obj.insert(QString("lodging.totalTax"), ::OpenAPI::toJsonValue(m_lodging_total_tax));
    }
    if (m_travel_entertainment_auth_data_duration_isSet) {
        obj.insert(QString("travelEntertainmentAuthData.duration"), ::OpenAPI::toJsonValue(m_travel_entertainment_auth_data_duration));
    }
    if (m_travel_entertainment_auth_data_market_isSet) {
        obj.insert(QString("travelEntertainmentAuthData.market"), ::OpenAPI::toJsonValue(m_travel_entertainment_auth_data_market));
    }
    return obj;
}

QString OAIAdditionalDataLodging::getLodgingCheckInDate() const {
    return m_lodging_check_in_date;
}
void OAIAdditionalDataLodging::setLodgingCheckInDate(const QString &lodging_check_in_date) {
    m_lodging_check_in_date = lodging_check_in_date;
    m_lodging_check_in_date_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_check_in_date_Set() const{
    return m_lodging_check_in_date_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_check_in_date_Valid() const{
    return m_lodging_check_in_date_isValid;
}

QString OAIAdditionalDataLodging::getLodgingCheckOutDate() const {
    return m_lodging_check_out_date;
}
void OAIAdditionalDataLodging::setLodgingCheckOutDate(const QString &lodging_check_out_date) {
    m_lodging_check_out_date = lodging_check_out_date;
    m_lodging_check_out_date_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_check_out_date_Set() const{
    return m_lodging_check_out_date_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_check_out_date_Valid() const{
    return m_lodging_check_out_date_isValid;
}

QString OAIAdditionalDataLodging::getLodgingCustomerServiceTollFreeNumber() const {
    return m_lodging_customer_service_toll_free_number;
}
void OAIAdditionalDataLodging::setLodgingCustomerServiceTollFreeNumber(const QString &lodging_customer_service_toll_free_number) {
    m_lodging_customer_service_toll_free_number = lodging_customer_service_toll_free_number;
    m_lodging_customer_service_toll_free_number_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_customer_service_toll_free_number_Set() const{
    return m_lodging_customer_service_toll_free_number_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_customer_service_toll_free_number_Valid() const{
    return m_lodging_customer_service_toll_free_number_isValid;
}

QString OAIAdditionalDataLodging::getLodgingFireSafetyActIndicator() const {
    return m_lodging_fire_safety_act_indicator;
}
void OAIAdditionalDataLodging::setLodgingFireSafetyActIndicator(const QString &lodging_fire_safety_act_indicator) {
    m_lodging_fire_safety_act_indicator = lodging_fire_safety_act_indicator;
    m_lodging_fire_safety_act_indicator_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_fire_safety_act_indicator_Set() const{
    return m_lodging_fire_safety_act_indicator_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_fire_safety_act_indicator_Valid() const{
    return m_lodging_fire_safety_act_indicator_isValid;
}

QString OAIAdditionalDataLodging::getLodgingFolioCashAdvances() const {
    return m_lodging_folio_cash_advances;
}
void OAIAdditionalDataLodging::setLodgingFolioCashAdvances(const QString &lodging_folio_cash_advances) {
    m_lodging_folio_cash_advances = lodging_folio_cash_advances;
    m_lodging_folio_cash_advances_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_folio_cash_advances_Set() const{
    return m_lodging_folio_cash_advances_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_folio_cash_advances_Valid() const{
    return m_lodging_folio_cash_advances_isValid;
}

QString OAIAdditionalDataLodging::getLodgingFolioNumber() const {
    return m_lodging_folio_number;
}
void OAIAdditionalDataLodging::setLodgingFolioNumber(const QString &lodging_folio_number) {
    m_lodging_folio_number = lodging_folio_number;
    m_lodging_folio_number_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_folio_number_Set() const{
    return m_lodging_folio_number_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_folio_number_Valid() const{
    return m_lodging_folio_number_isValid;
}

QString OAIAdditionalDataLodging::getLodgingFoodBeverageCharges() const {
    return m_lodging_food_beverage_charges;
}
void OAIAdditionalDataLodging::setLodgingFoodBeverageCharges(const QString &lodging_food_beverage_charges) {
    m_lodging_food_beverage_charges = lodging_food_beverage_charges;
    m_lodging_food_beverage_charges_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_food_beverage_charges_Set() const{
    return m_lodging_food_beverage_charges_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_food_beverage_charges_Valid() const{
    return m_lodging_food_beverage_charges_isValid;
}

QString OAIAdditionalDataLodging::getLodgingNoShowIndicator() const {
    return m_lodging_no_show_indicator;
}
void OAIAdditionalDataLodging::setLodgingNoShowIndicator(const QString &lodging_no_show_indicator) {
    m_lodging_no_show_indicator = lodging_no_show_indicator;
    m_lodging_no_show_indicator_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_no_show_indicator_Set() const{
    return m_lodging_no_show_indicator_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_no_show_indicator_Valid() const{
    return m_lodging_no_show_indicator_isValid;
}

QString OAIAdditionalDataLodging::getLodgingPrepaidExpenses() const {
    return m_lodging_prepaid_expenses;
}
void OAIAdditionalDataLodging::setLodgingPrepaidExpenses(const QString &lodging_prepaid_expenses) {
    m_lodging_prepaid_expenses = lodging_prepaid_expenses;
    m_lodging_prepaid_expenses_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_prepaid_expenses_Set() const{
    return m_lodging_prepaid_expenses_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_prepaid_expenses_Valid() const{
    return m_lodging_prepaid_expenses_isValid;
}

QString OAIAdditionalDataLodging::getLodgingPropertyPhoneNumber() const {
    return m_lodging_property_phone_number;
}
void OAIAdditionalDataLodging::setLodgingPropertyPhoneNumber(const QString &lodging_property_phone_number) {
    m_lodging_property_phone_number = lodging_property_phone_number;
    m_lodging_property_phone_number_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_property_phone_number_Set() const{
    return m_lodging_property_phone_number_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_property_phone_number_Valid() const{
    return m_lodging_property_phone_number_isValid;
}

QString OAIAdditionalDataLodging::getLodgingRoom1NumberOfNights() const {
    return m_lodging_room1_number_of_nights;
}
void OAIAdditionalDataLodging::setLodgingRoom1NumberOfNights(const QString &lodging_room1_number_of_nights) {
    m_lodging_room1_number_of_nights = lodging_room1_number_of_nights;
    m_lodging_room1_number_of_nights_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_room1_number_of_nights_Set() const{
    return m_lodging_room1_number_of_nights_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_room1_number_of_nights_Valid() const{
    return m_lodging_room1_number_of_nights_isValid;
}

QString OAIAdditionalDataLodging::getLodgingRoom1Rate() const {
    return m_lodging_room1_rate;
}
void OAIAdditionalDataLodging::setLodgingRoom1Rate(const QString &lodging_room1_rate) {
    m_lodging_room1_rate = lodging_room1_rate;
    m_lodging_room1_rate_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_room1_rate_Set() const{
    return m_lodging_room1_rate_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_room1_rate_Valid() const{
    return m_lodging_room1_rate_isValid;
}

QString OAIAdditionalDataLodging::getLodgingTotalRoomTax() const {
    return m_lodging_total_room_tax;
}
void OAIAdditionalDataLodging::setLodgingTotalRoomTax(const QString &lodging_total_room_tax) {
    m_lodging_total_room_tax = lodging_total_room_tax;
    m_lodging_total_room_tax_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_total_room_tax_Set() const{
    return m_lodging_total_room_tax_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_total_room_tax_Valid() const{
    return m_lodging_total_room_tax_isValid;
}

QString OAIAdditionalDataLodging::getLodgingTotalTax() const {
    return m_lodging_total_tax;
}
void OAIAdditionalDataLodging::setLodgingTotalTax(const QString &lodging_total_tax) {
    m_lodging_total_tax = lodging_total_tax;
    m_lodging_total_tax_isSet = true;
}

bool OAIAdditionalDataLodging::is_lodging_total_tax_Set() const{
    return m_lodging_total_tax_isSet;
}

bool OAIAdditionalDataLodging::is_lodging_total_tax_Valid() const{
    return m_lodging_total_tax_isValid;
}

QString OAIAdditionalDataLodging::getTravelEntertainmentAuthDataDuration() const {
    return m_travel_entertainment_auth_data_duration;
}
void OAIAdditionalDataLodging::setTravelEntertainmentAuthDataDuration(const QString &travel_entertainment_auth_data_duration) {
    m_travel_entertainment_auth_data_duration = travel_entertainment_auth_data_duration;
    m_travel_entertainment_auth_data_duration_isSet = true;
}

bool OAIAdditionalDataLodging::is_travel_entertainment_auth_data_duration_Set() const{
    return m_travel_entertainment_auth_data_duration_isSet;
}

bool OAIAdditionalDataLodging::is_travel_entertainment_auth_data_duration_Valid() const{
    return m_travel_entertainment_auth_data_duration_isValid;
}

QString OAIAdditionalDataLodging::getTravelEntertainmentAuthDataMarket() const {
    return m_travel_entertainment_auth_data_market;
}
void OAIAdditionalDataLodging::setTravelEntertainmentAuthDataMarket(const QString &travel_entertainment_auth_data_market) {
    m_travel_entertainment_auth_data_market = travel_entertainment_auth_data_market;
    m_travel_entertainment_auth_data_market_isSet = true;
}

bool OAIAdditionalDataLodging::is_travel_entertainment_auth_data_market_Set() const{
    return m_travel_entertainment_auth_data_market_isSet;
}

bool OAIAdditionalDataLodging::is_travel_entertainment_auth_data_market_Valid() const{
    return m_travel_entertainment_auth_data_market_isValid;
}

bool OAIAdditionalDataLodging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lodging_check_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_check_out_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_customer_service_toll_free_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_fire_safety_act_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_folio_cash_advances_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_folio_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_food_beverage_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_no_show_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_prepaid_expenses_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_property_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_room1_number_of_nights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_room1_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_total_room_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lodging_total_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_entertainment_auth_data_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_entertainment_auth_data_market_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataLodging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
