/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBrowserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBrowserInfo::OAIBrowserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBrowserInfo::OAIBrowserInfo() {
    this->initializeModel();
}

OAIBrowserInfo::~OAIBrowserInfo() {}

void OAIBrowserInfo::initializeModel() {

    m_accept_header_isSet = false;
    m_accept_header_isValid = false;

    m_color_depth_isSet = false;
    m_color_depth_isValid = false;

    m_java_enabled_isSet = false;
    m_java_enabled_isValid = false;

    m_java_script_enabled_isSet = false;
    m_java_script_enabled_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_screen_height_isSet = false;
    m_screen_height_isValid = false;

    m_screen_width_isSet = false;
    m_screen_width_isValid = false;

    m_time_zone_offset_isSet = false;
    m_time_zone_offset_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIBrowserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBrowserInfo::fromJsonObject(QJsonObject json) {

    m_accept_header_isValid = ::OpenAPI::fromJsonValue(m_accept_header, json[QString("acceptHeader")]);
    m_accept_header_isSet = !json[QString("acceptHeader")].isNull() && m_accept_header_isValid;

    m_color_depth_isValid = ::OpenAPI::fromJsonValue(m_color_depth, json[QString("colorDepth")]);
    m_color_depth_isSet = !json[QString("colorDepth")].isNull() && m_color_depth_isValid;

    m_java_enabled_isValid = ::OpenAPI::fromJsonValue(m_java_enabled, json[QString("javaEnabled")]);
    m_java_enabled_isSet = !json[QString("javaEnabled")].isNull() && m_java_enabled_isValid;

    m_java_script_enabled_isValid = ::OpenAPI::fromJsonValue(m_java_script_enabled, json[QString("javaScriptEnabled")]);
    m_java_script_enabled_isSet = !json[QString("javaScriptEnabled")].isNull() && m_java_script_enabled_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_screen_height_isValid = ::OpenAPI::fromJsonValue(m_screen_height, json[QString("screenHeight")]);
    m_screen_height_isSet = !json[QString("screenHeight")].isNull() && m_screen_height_isValid;

    m_screen_width_isValid = ::OpenAPI::fromJsonValue(m_screen_width, json[QString("screenWidth")]);
    m_screen_width_isSet = !json[QString("screenWidth")].isNull() && m_screen_width_isValid;

    m_time_zone_offset_isValid = ::OpenAPI::fromJsonValue(m_time_zone_offset, json[QString("timeZoneOffset")]);
    m_time_zone_offset_isSet = !json[QString("timeZoneOffset")].isNull() && m_time_zone_offset_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;
}

QString OAIBrowserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBrowserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_header_isSet) {
        obj.insert(QString("acceptHeader"), ::OpenAPI::toJsonValue(m_accept_header));
    }
    if (m_color_depth_isSet) {
        obj.insert(QString("colorDepth"), ::OpenAPI::toJsonValue(m_color_depth));
    }
    if (m_java_enabled_isSet) {
        obj.insert(QString("javaEnabled"), ::OpenAPI::toJsonValue(m_java_enabled));
    }
    if (m_java_script_enabled_isSet) {
        obj.insert(QString("javaScriptEnabled"), ::OpenAPI::toJsonValue(m_java_script_enabled));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_screen_height_isSet) {
        obj.insert(QString("screenHeight"), ::OpenAPI::toJsonValue(m_screen_height));
    }
    if (m_screen_width_isSet) {
        obj.insert(QString("screenWidth"), ::OpenAPI::toJsonValue(m_screen_width));
    }
    if (m_time_zone_offset_isSet) {
        obj.insert(QString("timeZoneOffset"), ::OpenAPI::toJsonValue(m_time_zone_offset));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIBrowserInfo::getAcceptHeader() const {
    return m_accept_header;
}
void OAIBrowserInfo::setAcceptHeader(const QString &accept_header) {
    m_accept_header = accept_header;
    m_accept_header_isSet = true;
}

bool OAIBrowserInfo::is_accept_header_Set() const{
    return m_accept_header_isSet;
}

bool OAIBrowserInfo::is_accept_header_Valid() const{
    return m_accept_header_isValid;
}

qint32 OAIBrowserInfo::getColorDepth() const {
    return m_color_depth;
}
void OAIBrowserInfo::setColorDepth(const qint32 &color_depth) {
    m_color_depth = color_depth;
    m_color_depth_isSet = true;
}

bool OAIBrowserInfo::is_color_depth_Set() const{
    return m_color_depth_isSet;
}

bool OAIBrowserInfo::is_color_depth_Valid() const{
    return m_color_depth_isValid;
}

bool OAIBrowserInfo::isJavaEnabled() const {
    return m_java_enabled;
}
void OAIBrowserInfo::setJavaEnabled(const bool &java_enabled) {
    m_java_enabled = java_enabled;
    m_java_enabled_isSet = true;
}

bool OAIBrowserInfo::is_java_enabled_Set() const{
    return m_java_enabled_isSet;
}

bool OAIBrowserInfo::is_java_enabled_Valid() const{
    return m_java_enabled_isValid;
}

bool OAIBrowserInfo::isJavaScriptEnabled() const {
    return m_java_script_enabled;
}
void OAIBrowserInfo::setJavaScriptEnabled(const bool &java_script_enabled) {
    m_java_script_enabled = java_script_enabled;
    m_java_script_enabled_isSet = true;
}

bool OAIBrowserInfo::is_java_script_enabled_Set() const{
    return m_java_script_enabled_isSet;
}

bool OAIBrowserInfo::is_java_script_enabled_Valid() const{
    return m_java_script_enabled_isValid;
}

QString OAIBrowserInfo::getLanguage() const {
    return m_language;
}
void OAIBrowserInfo::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIBrowserInfo::is_language_Set() const{
    return m_language_isSet;
}

bool OAIBrowserInfo::is_language_Valid() const{
    return m_language_isValid;
}

qint32 OAIBrowserInfo::getScreenHeight() const {
    return m_screen_height;
}
void OAIBrowserInfo::setScreenHeight(const qint32 &screen_height) {
    m_screen_height = screen_height;
    m_screen_height_isSet = true;
}

bool OAIBrowserInfo::is_screen_height_Set() const{
    return m_screen_height_isSet;
}

bool OAIBrowserInfo::is_screen_height_Valid() const{
    return m_screen_height_isValid;
}

qint32 OAIBrowserInfo::getScreenWidth() const {
    return m_screen_width;
}
void OAIBrowserInfo::setScreenWidth(const qint32 &screen_width) {
    m_screen_width = screen_width;
    m_screen_width_isSet = true;
}

bool OAIBrowserInfo::is_screen_width_Set() const{
    return m_screen_width_isSet;
}

bool OAIBrowserInfo::is_screen_width_Valid() const{
    return m_screen_width_isValid;
}

qint32 OAIBrowserInfo::getTimeZoneOffset() const {
    return m_time_zone_offset;
}
void OAIBrowserInfo::setTimeZoneOffset(const qint32 &time_zone_offset) {
    m_time_zone_offset = time_zone_offset;
    m_time_zone_offset_isSet = true;
}

bool OAIBrowserInfo::is_time_zone_offset_Set() const{
    return m_time_zone_offset_isSet;
}

bool OAIBrowserInfo::is_time_zone_offset_Valid() const{
    return m_time_zone_offset_isValid;
}

QString OAIBrowserInfo::getUserAgent() const {
    return m_user_agent;
}
void OAIBrowserInfo::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIBrowserInfo::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIBrowserInfo::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIBrowserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_header_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_java_script_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_screen_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBrowserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_accept_header_isValid && m_color_depth_isValid && m_java_enabled_isValid && m_language_isValid && m_screen_height_isValid && m_screen_width_isValid && m_time_zone_offset_isValid && m_user_agent_isValid && true;
}

} // namespace OpenAPI
