/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataWallets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataWallets::OAIAdditionalDataWallets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataWallets::OAIAdditionalDataWallets() {
    this->initializeModel();
}

OAIAdditionalDataWallets::~OAIAdditionalDataWallets() {}

void OAIAdditionalDataWallets::initializeModel() {

    m_androidpay_token_isSet = false;
    m_androidpay_token_isValid = false;

    m_masterpass_transaction_id_isSet = false;
    m_masterpass_transaction_id_isValid = false;

    m_payment_token_isSet = false;
    m_payment_token_isValid = false;

    m_paywithgoogle_token_isSet = false;
    m_paywithgoogle_token_isValid = false;

    m_samsungpay_token_isSet = false;
    m_samsungpay_token_isValid = false;

    m_visacheckout_call_id_isSet = false;
    m_visacheckout_call_id_isValid = false;
}

void OAIAdditionalDataWallets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataWallets::fromJsonObject(QJsonObject json) {

    m_androidpay_token_isValid = ::OpenAPI::fromJsonValue(m_androidpay_token, json[QString("androidpay.token")]);
    m_androidpay_token_isSet = !json[QString("androidpay.token")].isNull() && m_androidpay_token_isValid;

    m_masterpass_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_masterpass_transaction_id, json[QString("masterpass.transactionId")]);
    m_masterpass_transaction_id_isSet = !json[QString("masterpass.transactionId")].isNull() && m_masterpass_transaction_id_isValid;

    m_payment_token_isValid = ::OpenAPI::fromJsonValue(m_payment_token, json[QString("payment.token")]);
    m_payment_token_isSet = !json[QString("payment.token")].isNull() && m_payment_token_isValid;

    m_paywithgoogle_token_isValid = ::OpenAPI::fromJsonValue(m_paywithgoogle_token, json[QString("paywithgoogle.token")]);
    m_paywithgoogle_token_isSet = !json[QString("paywithgoogle.token")].isNull() && m_paywithgoogle_token_isValid;

    m_samsungpay_token_isValid = ::OpenAPI::fromJsonValue(m_samsungpay_token, json[QString("samsungpay.token")]);
    m_samsungpay_token_isSet = !json[QString("samsungpay.token")].isNull() && m_samsungpay_token_isValid;

    m_visacheckout_call_id_isValid = ::OpenAPI::fromJsonValue(m_visacheckout_call_id, json[QString("visacheckout.callId")]);
    m_visacheckout_call_id_isSet = !json[QString("visacheckout.callId")].isNull() && m_visacheckout_call_id_isValid;
}

QString OAIAdditionalDataWallets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataWallets::asJsonObject() const {
    QJsonObject obj;
    if (m_androidpay_token_isSet) {
        obj.insert(QString("androidpay.token"), ::OpenAPI::toJsonValue(m_androidpay_token));
    }
    if (m_masterpass_transaction_id_isSet) {
        obj.insert(QString("masterpass.transactionId"), ::OpenAPI::toJsonValue(m_masterpass_transaction_id));
    }
    if (m_payment_token_isSet) {
        obj.insert(QString("payment.token"), ::OpenAPI::toJsonValue(m_payment_token));
    }
    if (m_paywithgoogle_token_isSet) {
        obj.insert(QString("paywithgoogle.token"), ::OpenAPI::toJsonValue(m_paywithgoogle_token));
    }
    if (m_samsungpay_token_isSet) {
        obj.insert(QString("samsungpay.token"), ::OpenAPI::toJsonValue(m_samsungpay_token));
    }
    if (m_visacheckout_call_id_isSet) {
        obj.insert(QString("visacheckout.callId"), ::OpenAPI::toJsonValue(m_visacheckout_call_id));
    }
    return obj;
}

QString OAIAdditionalDataWallets::getAndroidpayToken() const {
    return m_androidpay_token;
}
void OAIAdditionalDataWallets::setAndroidpayToken(const QString &androidpay_token) {
    m_androidpay_token = androidpay_token;
    m_androidpay_token_isSet = true;
}

bool OAIAdditionalDataWallets::is_androidpay_token_Set() const{
    return m_androidpay_token_isSet;
}

bool OAIAdditionalDataWallets::is_androidpay_token_Valid() const{
    return m_androidpay_token_isValid;
}

QString OAIAdditionalDataWallets::getMasterpassTransactionId() const {
    return m_masterpass_transaction_id;
}
void OAIAdditionalDataWallets::setMasterpassTransactionId(const QString &masterpass_transaction_id) {
    m_masterpass_transaction_id = masterpass_transaction_id;
    m_masterpass_transaction_id_isSet = true;
}

bool OAIAdditionalDataWallets::is_masterpass_transaction_id_Set() const{
    return m_masterpass_transaction_id_isSet;
}

bool OAIAdditionalDataWallets::is_masterpass_transaction_id_Valid() const{
    return m_masterpass_transaction_id_isValid;
}

QString OAIAdditionalDataWallets::getPaymentToken() const {
    return m_payment_token;
}
void OAIAdditionalDataWallets::setPaymentToken(const QString &payment_token) {
    m_payment_token = payment_token;
    m_payment_token_isSet = true;
}

bool OAIAdditionalDataWallets::is_payment_token_Set() const{
    return m_payment_token_isSet;
}

bool OAIAdditionalDataWallets::is_payment_token_Valid() const{
    return m_payment_token_isValid;
}

QString OAIAdditionalDataWallets::getPaywithgoogleToken() const {
    return m_paywithgoogle_token;
}
void OAIAdditionalDataWallets::setPaywithgoogleToken(const QString &paywithgoogle_token) {
    m_paywithgoogle_token = paywithgoogle_token;
    m_paywithgoogle_token_isSet = true;
}

bool OAIAdditionalDataWallets::is_paywithgoogle_token_Set() const{
    return m_paywithgoogle_token_isSet;
}

bool OAIAdditionalDataWallets::is_paywithgoogle_token_Valid() const{
    return m_paywithgoogle_token_isValid;
}

QString OAIAdditionalDataWallets::getSamsungpayToken() const {
    return m_samsungpay_token;
}
void OAIAdditionalDataWallets::setSamsungpayToken(const QString &samsungpay_token) {
    m_samsungpay_token = samsungpay_token;
    m_samsungpay_token_isSet = true;
}

bool OAIAdditionalDataWallets::is_samsungpay_token_Set() const{
    return m_samsungpay_token_isSet;
}

bool OAIAdditionalDataWallets::is_samsungpay_token_Valid() const{
    return m_samsungpay_token_isValid;
}

QString OAIAdditionalDataWallets::getVisacheckoutCallId() const {
    return m_visacheckout_call_id;
}
void OAIAdditionalDataWallets::setVisacheckoutCallId(const QString &visacheckout_call_id) {
    m_visacheckout_call_id = visacheckout_call_id;
    m_visacheckout_call_id_isSet = true;
}

bool OAIAdditionalDataWallets::is_visacheckout_call_id_Set() const{
    return m_visacheckout_call_id_isSet;
}

bool OAIAdditionalDataWallets::is_visacheckout_call_id_Valid() const{
    return m_visacheckout_call_id_isValid;
}

bool OAIAdditionalDataWallets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_androidpay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_masterpass_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paywithgoogle_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_samsungpay_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visacheckout_call_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataWallets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
