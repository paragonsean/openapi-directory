/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v67/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v67/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 67
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPaymentsApi_H
#define OAI_OAIPaymentsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAuthenticationResultRequest.h"
#include "OAIAuthenticationResultResponse.h"
#include "OAIPaymentRequest.h"
#include "OAIPaymentRequest3d.h"
#include "OAIPaymentRequest3ds2.h"
#include "OAIPaymentResult.h"
#include "OAIServiceError.h"
#include "OAIThreeDS2ResultRequest.h"
#include "OAIThreeDS2ResultResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPaymentsApi : public QObject {
    Q_OBJECT

public:
    OAIPaymentsApi(const int timeOut = 0);
    ~OAIPaymentsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_payment_request OAIPaymentRequest [optional]
    */
    virtual void postAuthorise(const ::OpenAPI::OptionalParam<OAIPaymentRequest> &oai_payment_request = ::OpenAPI::OptionalParam<OAIPaymentRequest>());

    /**
    * @param[in]  oai_payment_request3d OAIPaymentRequest3d [optional]
    */
    virtual void postAuthorise3d(const ::OpenAPI::OptionalParam<OAIPaymentRequest3d> &oai_payment_request3d = ::OpenAPI::OptionalParam<OAIPaymentRequest3d>());

    /**
    * @param[in]  oai_payment_request3ds2 OAIPaymentRequest3ds2 [optional]
    */
    virtual void postAuthorise3ds2(const ::OpenAPI::OptionalParam<OAIPaymentRequest3ds2> &oai_payment_request3ds2 = ::OpenAPI::OptionalParam<OAIPaymentRequest3ds2>());

    /**
    * @param[in]  oai_authentication_result_request OAIAuthenticationResultRequest [optional]
    */
    virtual void postGetAuthenticationResult(const ::OpenAPI::OptionalParam<OAIAuthenticationResultRequest> &oai_authentication_result_request = ::OpenAPI::OptionalParam<OAIAuthenticationResultRequest>());

    /**
    * @param[in]  oai_three_ds2_result_request OAIThreeDS2ResultRequest [optional]
    */
    virtual void postRetrieve3ds2Result(const ::OpenAPI::OptionalParam<OAIThreeDS2ResultRequest> &oai_three_ds2_result_request = ::OpenAPI::OptionalParam<OAIThreeDS2ResultRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postAuthoriseCallback(OAIHttpRequestWorker *worker);
    void postAuthorise3dCallback(OAIHttpRequestWorker *worker);
    void postAuthorise3ds2Callback(OAIHttpRequestWorker *worker);
    void postGetAuthenticationResultCallback(OAIHttpRequestWorker *worker);
    void postRetrieve3ds2ResultCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postAuthoriseSignal(OAIPaymentResult summary);
    void postAuthorise3dSignal(OAIPaymentResult summary);
    void postAuthorise3ds2Signal(OAIPaymentResult summary);
    void postGetAuthenticationResultSignal(OAIAuthenticationResultResponse summary);
    void postRetrieve3ds2ResultSignal(OAIThreeDS2ResultResponse summary);


    void postAuthoriseSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResult summary);
    void postAuthorise3dSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResult summary);
    void postAuthorise3ds2SignalFull(OAIHttpRequestWorker *worker, OAIPaymentResult summary);
    void postGetAuthenticationResultSignalFull(OAIHttpRequestWorker *worker, OAIAuthenticationResultResponse summary);
    void postRetrieve3ds2ResultSignalFull(OAIHttpRequestWorker *worker, OAIThreeDS2ResultResponse summary);

    Q_DECL_DEPRECATED_X("Use postAuthoriseSignalError() instead")
    void postAuthoriseSignalE(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthoriseSignalError(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorise3dSignalError() instead")
    void postAuthorise3dSignalE(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorise3dSignalError(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorise3ds2SignalError() instead")
    void postAuthorise3ds2SignalE(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorise3ds2SignalError(OAIPaymentResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetAuthenticationResultSignalError() instead")
    void postGetAuthenticationResultSignalE(OAIAuthenticationResultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetAuthenticationResultSignalError(OAIAuthenticationResultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRetrieve3ds2ResultSignalError() instead")
    void postRetrieve3ds2ResultSignalE(OAIThreeDS2ResultResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRetrieve3ds2ResultSignalError(OAIThreeDS2ResultResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postAuthoriseSignalErrorFull() instead")
    void postAuthoriseSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthoriseSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorise3dSignalErrorFull() instead")
    void postAuthorise3dSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorise3dSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postAuthorise3ds2SignalErrorFull() instead")
    void postAuthorise3ds2SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAuthorise3ds2SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetAuthenticationResultSignalErrorFull() instead")
    void postGetAuthenticationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetAuthenticationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRetrieve3ds2ResultSignalErrorFull() instead")
    void postRetrieve3ds2ResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRetrieve3ds2ResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
