/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v30/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v30/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDataSubMerchant.h
 *
 * 
 */

#ifndef OAIAdditionalDataSubMerchant_H
#define OAIAdditionalDataSubMerchant_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDataSubMerchant : public OAIObject {
public:
    OAIAdditionalDataSubMerchant();
    OAIAdditionalDataSubMerchant(QString json);
    ~OAIAdditionalDataSubMerchant() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getSubMerchantNumberOfSubSellers() const;
    void setSubMerchantNumberOfSubSellers(const QString &sub_merchant_number_of_sub_sellers);
    bool is_sub_merchant_number_of_sub_sellers_Set() const;
    bool is_sub_merchant_number_of_sub_sellers_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrCity() const;
    void setSubMerchantSubSellerSubSellerNrCity(const QString &sub_merchant_sub_seller_sub_seller_nr_city);
    bool is_sub_merchant_sub_seller_sub_seller_nr_city_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_city_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrCountry() const;
    void setSubMerchantSubSellerSubSellerNrCountry(const QString &sub_merchant_sub_seller_sub_seller_nr_country);
    bool is_sub_merchant_sub_seller_sub_seller_nr_country_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_country_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrId() const;
    void setSubMerchantSubSellerSubSellerNrId(const QString &sub_merchant_sub_seller_sub_seller_nr_id);
    bool is_sub_merchant_sub_seller_sub_seller_nr_id_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_id_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrMcc() const;
    void setSubMerchantSubSellerSubSellerNrMcc(const QString &sub_merchant_sub_seller_sub_seller_nr_mcc);
    bool is_sub_merchant_sub_seller_sub_seller_nr_mcc_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_mcc_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrName() const;
    void setSubMerchantSubSellerSubSellerNrName(const QString &sub_merchant_sub_seller_sub_seller_nr_name);
    bool is_sub_merchant_sub_seller_sub_seller_nr_name_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_name_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrPostalCode() const;
    void setSubMerchantSubSellerSubSellerNrPostalCode(const QString &sub_merchant_sub_seller_sub_seller_nr_postal_code);
    bool is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_postal_code_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrState() const;
    void setSubMerchantSubSellerSubSellerNrState(const QString &sub_merchant_sub_seller_sub_seller_nr_state);
    bool is_sub_merchant_sub_seller_sub_seller_nr_state_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_state_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrStreet() const;
    void setSubMerchantSubSellerSubSellerNrStreet(const QString &sub_merchant_sub_seller_sub_seller_nr_street);
    bool is_sub_merchant_sub_seller_sub_seller_nr_street_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_street_Valid() const;

    QString getSubMerchantSubSellerSubSellerNrTaxId() const;
    void setSubMerchantSubSellerSubSellerNrTaxId(const QString &sub_merchant_sub_seller_sub_seller_nr_tax_id);
    bool is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Set() const;
    bool is_sub_merchant_sub_seller_sub_seller_nr_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_sub_merchant_number_of_sub_sellers;
    bool m_sub_merchant_number_of_sub_sellers_isSet;
    bool m_sub_merchant_number_of_sub_sellers_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_city;
    bool m_sub_merchant_sub_seller_sub_seller_nr_city_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_city_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_country;
    bool m_sub_merchant_sub_seller_sub_seller_nr_country_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_country_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_id;
    bool m_sub_merchant_sub_seller_sub_seller_nr_id_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_id_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_mcc;
    bool m_sub_merchant_sub_seller_sub_seller_nr_mcc_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_mcc_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_name;
    bool m_sub_merchant_sub_seller_sub_seller_nr_name_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_name_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_postal_code;
    bool m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_postal_code_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_state;
    bool m_sub_merchant_sub_seller_sub_seller_nr_state_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_state_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_street;
    bool m_sub_merchant_sub_seller_sub_seller_nr_street_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_street_isValid;

    QString m_sub_merchant_sub_seller_sub_seller_nr_tax_id;
    bool m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isSet;
    bool m_sub_merchant_sub_seller_sub_seller_nr_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDataSubMerchant)

#endif // OAIAdditionalDataSubMerchant_H
