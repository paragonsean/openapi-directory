/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v30/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v30/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdditionalDataCommon.h
 *
 * 
 */

#ifndef OAIAdditionalDataCommon_H
#define OAIAdditionalDataCommon_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdditionalDataCommon : public OAIObject {
public:
    OAIAdditionalDataCommon();
    OAIAdditionalDataCommon(QString json);
    ~OAIAdditionalDataCommon() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getRequestedTestErrorResponseCode() const;
    void setRequestedTestErrorResponseCode(const QString &requested_test_error_response_code);
    bool is_requested_test_error_response_code_Set() const;
    bool is_requested_test_error_response_code_Valid() const;

    QString getAllowPartialAuth() const;
    void setAllowPartialAuth(const QString &allow_partial_auth);
    bool is_allow_partial_auth_Set() const;
    bool is_allow_partial_auth_Valid() const;

    QString getAuthorisationType() const;
    void setAuthorisationType(const QString &authorisation_type);
    bool is_authorisation_type_Set() const;
    bool is_authorisation_type_Valid() const;

    QString getCustomRoutingFlag() const;
    void setCustomRoutingFlag(const QString &custom_routing_flag);
    bool is_custom_routing_flag_Set() const;
    bool is_custom_routing_flag_Valid() const;

    QString getIndustryUsage() const;
    void setIndustryUsage(const QString &industry_usage);
    bool is_industry_usage_Set() const;
    bool is_industry_usage_Valid() const;

    QString getManualCapture() const;
    void setManualCapture(const QString &manual_capture);
    bool is_manual_capture_Set() const;
    bool is_manual_capture_Valid() const;

    QString getNetworkTxReference() const;
    void setNetworkTxReference(const QString &network_tx_reference);
    bool is_network_tx_reference_Set() const;
    bool is_network_tx_reference_Valid() const;

    QString getOverwriteBrand() const;
    void setOverwriteBrand(const QString &overwrite_brand);
    bool is_overwrite_brand_Set() const;
    bool is_overwrite_brand_Valid() const;

    QString getSubMerchantCity() const;
    void setSubMerchantCity(const QString &sub_merchant_city);
    bool is_sub_merchant_city_Set() const;
    bool is_sub_merchant_city_Valid() const;

    QString getSubMerchantCountry() const;
    void setSubMerchantCountry(const QString &sub_merchant_country);
    bool is_sub_merchant_country_Set() const;
    bool is_sub_merchant_country_Valid() const;

    QString getSubMerchantId() const;
    void setSubMerchantId(const QString &sub_merchant_id);
    bool is_sub_merchant_id_Set() const;
    bool is_sub_merchant_id_Valid() const;

    QString getSubMerchantName() const;
    void setSubMerchantName(const QString &sub_merchant_name);
    bool is_sub_merchant_name_Set() const;
    bool is_sub_merchant_name_Valid() const;

    QString getSubMerchantPostalCode() const;
    void setSubMerchantPostalCode(const QString &sub_merchant_postal_code);
    bool is_sub_merchant_postal_code_Set() const;
    bool is_sub_merchant_postal_code_Valid() const;

    QString getSubMerchantState() const;
    void setSubMerchantState(const QString &sub_merchant_state);
    bool is_sub_merchant_state_Set() const;
    bool is_sub_merchant_state_Valid() const;

    QString getSubMerchantStreet() const;
    void setSubMerchantStreet(const QString &sub_merchant_street);
    bool is_sub_merchant_street_Set() const;
    bool is_sub_merchant_street_Valid() const;

    QString getSubMerchantTaxId() const;
    void setSubMerchantTaxId(const QString &sub_merchant_tax_id);
    bool is_sub_merchant_tax_id_Set() const;
    bool is_sub_merchant_tax_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_requested_test_error_response_code;
    bool m_requested_test_error_response_code_isSet;
    bool m_requested_test_error_response_code_isValid;

    QString m_allow_partial_auth;
    bool m_allow_partial_auth_isSet;
    bool m_allow_partial_auth_isValid;

    QString m_authorisation_type;
    bool m_authorisation_type_isSet;
    bool m_authorisation_type_isValid;

    QString m_custom_routing_flag;
    bool m_custom_routing_flag_isSet;
    bool m_custom_routing_flag_isValid;

    QString m_industry_usage;
    bool m_industry_usage_isSet;
    bool m_industry_usage_isValid;

    QString m_manual_capture;
    bool m_manual_capture_isSet;
    bool m_manual_capture_isValid;

    QString m_network_tx_reference;
    bool m_network_tx_reference_isSet;
    bool m_network_tx_reference_isValid;

    QString m_overwrite_brand;
    bool m_overwrite_brand_isSet;
    bool m_overwrite_brand_isValid;

    QString m_sub_merchant_city;
    bool m_sub_merchant_city_isSet;
    bool m_sub_merchant_city_isValid;

    QString m_sub_merchant_country;
    bool m_sub_merchant_country_isSet;
    bool m_sub_merchant_country_isValid;

    QString m_sub_merchant_id;
    bool m_sub_merchant_id_isSet;
    bool m_sub_merchant_id_isValid;

    QString m_sub_merchant_name;
    bool m_sub_merchant_name_isSet;
    bool m_sub_merchant_name_isValid;

    QString m_sub_merchant_postal_code;
    bool m_sub_merchant_postal_code_isSet;
    bool m_sub_merchant_postal_code_isValid;

    QString m_sub_merchant_state;
    bool m_sub_merchant_state_isSet;
    bool m_sub_merchant_state_isValid;

    QString m_sub_merchant_street;
    bool m_sub_merchant_street_isSet;
    bool m_sub_merchant_street_isValid;

    QString m_sub_merchant_tax_id;
    bool m_sub_merchant_tax_id_isSet;
    bool m_sub_merchant_tax_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdditionalDataCommon)

#endif // OAIAdditionalDataCommon_H
