/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v30/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v30/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIModificationsApi_H
#define OAI_OAIModificationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdjustAuthorisationRequest.h"
#include "OAICancelOrRefundRequest.h"
#include "OAICancelRequest.h"
#include "OAICaptureRequest.h"
#include "OAIModificationResult.h"
#include "OAIRefundRequest.h"
#include "OAIServiceError.h"
#include "OAITechnicalCancelRequest.h"
#include "OAIVoidPendingRefundRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIModificationsApi : public QObject {
    Q_OBJECT

public:
    OAIModificationsApi(const int timeOut = 0);
    ~OAIModificationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_adjust_authorisation_request OAIAdjustAuthorisationRequest [optional]
    */
    virtual void postAdjustAuthorisation(const ::OpenAPI::OptionalParam<OAIAdjustAuthorisationRequest> &oai_adjust_authorisation_request = ::OpenAPI::OptionalParam<OAIAdjustAuthorisationRequest>());

    /**
    * @param[in]  oai_cancel_request OAICancelRequest [optional]
    */
    virtual void postCancel(const ::OpenAPI::OptionalParam<OAICancelRequest> &oai_cancel_request = ::OpenAPI::OptionalParam<OAICancelRequest>());

    /**
    * @param[in]  oai_cancel_or_refund_request OAICancelOrRefundRequest [optional]
    */
    virtual void postCancelOrRefund(const ::OpenAPI::OptionalParam<OAICancelOrRefundRequest> &oai_cancel_or_refund_request = ::OpenAPI::OptionalParam<OAICancelOrRefundRequest>());

    /**
    * @param[in]  oai_capture_request OAICaptureRequest [optional]
    */
    virtual void postCapture(const ::OpenAPI::OptionalParam<OAICaptureRequest> &oai_capture_request = ::OpenAPI::OptionalParam<OAICaptureRequest>());

    /**
    * @param[in]  oai_refund_request OAIRefundRequest [optional]
    */
    virtual void postRefund(const ::OpenAPI::OptionalParam<OAIRefundRequest> &oai_refund_request = ::OpenAPI::OptionalParam<OAIRefundRequest>());

    /**
    * @param[in]  oai_technical_cancel_request OAITechnicalCancelRequest [optional]
    */
    virtual void postTechnicalCancel(const ::OpenAPI::OptionalParam<OAITechnicalCancelRequest> &oai_technical_cancel_request = ::OpenAPI::OptionalParam<OAITechnicalCancelRequest>());

    /**
    * @param[in]  oai_void_pending_refund_request OAIVoidPendingRefundRequest [optional]
    */
    virtual void postVoidPendingRefund(const ::OpenAPI::OptionalParam<OAIVoidPendingRefundRequest> &oai_void_pending_refund_request = ::OpenAPI::OptionalParam<OAIVoidPendingRefundRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postAdjustAuthorisationCallback(OAIHttpRequestWorker *worker);
    void postCancelCallback(OAIHttpRequestWorker *worker);
    void postCancelOrRefundCallback(OAIHttpRequestWorker *worker);
    void postCaptureCallback(OAIHttpRequestWorker *worker);
    void postRefundCallback(OAIHttpRequestWorker *worker);
    void postTechnicalCancelCallback(OAIHttpRequestWorker *worker);
    void postVoidPendingRefundCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postAdjustAuthorisationSignal(OAIModificationResult summary);
    void postCancelSignal(OAIModificationResult summary);
    void postCancelOrRefundSignal(OAIModificationResult summary);
    void postCaptureSignal(OAIModificationResult summary);
    void postRefundSignal(OAIModificationResult summary);
    void postTechnicalCancelSignal(OAIModificationResult summary);
    void postVoidPendingRefundSignal(OAIModificationResult summary);


    void postAdjustAuthorisationSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postCancelSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postCancelOrRefundSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postCaptureSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postRefundSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postTechnicalCancelSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);
    void postVoidPendingRefundSignalFull(OAIHttpRequestWorker *worker, OAIModificationResult summary);

    Q_DECL_DEPRECATED_X("Use postAdjustAuthorisationSignalError() instead")
    void postAdjustAuthorisationSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAdjustAuthorisationSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCancelSignalError() instead")
    void postCancelSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCancelOrRefundSignalError() instead")
    void postCancelOrRefundSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelOrRefundSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCaptureSignalError() instead")
    void postCaptureSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCaptureSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundSignalError() instead")
    void postRefundSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTechnicalCancelSignalError() instead")
    void postTechnicalCancelSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTechnicalCancelSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVoidPendingRefundSignalError() instead")
    void postVoidPendingRefundSignalE(OAIModificationResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postVoidPendingRefundSignalError(OAIModificationResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postAdjustAuthorisationSignalErrorFull() instead")
    void postAdjustAuthorisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAdjustAuthorisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCancelSignalErrorFull() instead")
    void postCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCancelOrRefundSignalErrorFull() instead")
    void postCancelOrRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCancelOrRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCaptureSignalErrorFull() instead")
    void postCaptureSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCaptureSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRefundSignalErrorFull() instead")
    void postRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTechnicalCancelSignalErrorFull() instead")
    void postTechnicalCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTechnicalCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postVoidPendingRefundSignalErrorFull() instead")
    void postVoidPendingRefundSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postVoidPendingRefundSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
