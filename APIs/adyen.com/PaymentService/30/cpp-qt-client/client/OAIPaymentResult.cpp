/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v30/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v30/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResult::OAIPaymentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResult::OAIPaymentResult() {
    this->initializeModel();
}

OAIPaymentResult::~OAIPaymentResult() {}

void OAIPaymentResult::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_auth_code_isSet = false;
    m_auth_code_isValid = false;

    m_dcc_amount_isSet = false;
    m_dcc_amount_isValid = false;

    m_dcc_signature_isSet = false;
    m_dcc_signature_isValid = false;

    m_fraud_result_isSet = false;
    m_fraud_result_isValid = false;

    m_issuer_url_isSet = false;
    m_issuer_url_isValid = false;

    m_md_isSet = false;
    m_md_isValid = false;

    m_pa_request_isSet = false;
    m_pa_request_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;
}

void OAIPaymentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResult::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_auth_code_isValid = ::OpenAPI::fromJsonValue(m_auth_code, json[QString("authCode")]);
    m_auth_code_isSet = !json[QString("authCode")].isNull() && m_auth_code_isValid;

    m_dcc_amount_isValid = ::OpenAPI::fromJsonValue(m_dcc_amount, json[QString("dccAmount")]);
    m_dcc_amount_isSet = !json[QString("dccAmount")].isNull() && m_dcc_amount_isValid;

    m_dcc_signature_isValid = ::OpenAPI::fromJsonValue(m_dcc_signature, json[QString("dccSignature")]);
    m_dcc_signature_isSet = !json[QString("dccSignature")].isNull() && m_dcc_signature_isValid;

    m_fraud_result_isValid = ::OpenAPI::fromJsonValue(m_fraud_result, json[QString("fraudResult")]);
    m_fraud_result_isSet = !json[QString("fraudResult")].isNull() && m_fraud_result_isValid;

    m_issuer_url_isValid = ::OpenAPI::fromJsonValue(m_issuer_url, json[QString("issuerUrl")]);
    m_issuer_url_isSet = !json[QString("issuerUrl")].isNull() && m_issuer_url_isValid;

    m_md_isValid = ::OpenAPI::fromJsonValue(m_md, json[QString("md")]);
    m_md_isSet = !json[QString("md")].isNull() && m_md_isValid;

    m_pa_request_isValid = ::OpenAPI::fromJsonValue(m_pa_request, json[QString("paRequest")]);
    m_pa_request_isSet = !json[QString("paRequest")].isNull() && m_pa_request_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;
}

QString OAIPaymentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResult::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_auth_code_isSet) {
        obj.insert(QString("authCode"), ::OpenAPI::toJsonValue(m_auth_code));
    }
    if (m_dcc_amount.isSet()) {
        obj.insert(QString("dccAmount"), ::OpenAPI::toJsonValue(m_dcc_amount));
    }
    if (m_dcc_signature_isSet) {
        obj.insert(QString("dccSignature"), ::OpenAPI::toJsonValue(m_dcc_signature));
    }
    if (m_fraud_result.isSet()) {
        obj.insert(QString("fraudResult"), ::OpenAPI::toJsonValue(m_fraud_result));
    }
    if (m_issuer_url_isSet) {
        obj.insert(QString("issuerUrl"), ::OpenAPI::toJsonValue(m_issuer_url));
    }
    if (m_md_isSet) {
        obj.insert(QString("md"), ::OpenAPI::toJsonValue(m_md));
    }
    if (m_pa_request_isSet) {
        obj.insert(QString("paRequest"), ::OpenAPI::toJsonValue(m_pa_request));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    return obj;
}

OAIPaymentResult_additionalData OAIPaymentResult::getAdditionalData() const {
    return m_additional_data;
}
void OAIPaymentResult::setAdditionalData(const OAIPaymentResult_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIPaymentResult::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIPaymentResult::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QString OAIPaymentResult::getAuthCode() const {
    return m_auth_code;
}
void OAIPaymentResult::setAuthCode(const QString &auth_code) {
    m_auth_code = auth_code;
    m_auth_code_isSet = true;
}

bool OAIPaymentResult::is_auth_code_Set() const{
    return m_auth_code_isSet;
}

bool OAIPaymentResult::is_auth_code_Valid() const{
    return m_auth_code_isValid;
}

OAIAmount OAIPaymentResult::getDccAmount() const {
    return m_dcc_amount;
}
void OAIPaymentResult::setDccAmount(const OAIAmount &dcc_amount) {
    m_dcc_amount = dcc_amount;
    m_dcc_amount_isSet = true;
}

bool OAIPaymentResult::is_dcc_amount_Set() const{
    return m_dcc_amount_isSet;
}

bool OAIPaymentResult::is_dcc_amount_Valid() const{
    return m_dcc_amount_isValid;
}

QString OAIPaymentResult::getDccSignature() const {
    return m_dcc_signature;
}
void OAIPaymentResult::setDccSignature(const QString &dcc_signature) {
    m_dcc_signature = dcc_signature;
    m_dcc_signature_isSet = true;
}

bool OAIPaymentResult::is_dcc_signature_Set() const{
    return m_dcc_signature_isSet;
}

bool OAIPaymentResult::is_dcc_signature_Valid() const{
    return m_dcc_signature_isValid;
}

OAIFraudResult OAIPaymentResult::getFraudResult() const {
    return m_fraud_result;
}
void OAIPaymentResult::setFraudResult(const OAIFraudResult &fraud_result) {
    m_fraud_result = fraud_result;
    m_fraud_result_isSet = true;
}

bool OAIPaymentResult::is_fraud_result_Set() const{
    return m_fraud_result_isSet;
}

bool OAIPaymentResult::is_fraud_result_Valid() const{
    return m_fraud_result_isValid;
}

QString OAIPaymentResult::getIssuerUrl() const {
    return m_issuer_url;
}
void OAIPaymentResult::setIssuerUrl(const QString &issuer_url) {
    m_issuer_url = issuer_url;
    m_issuer_url_isSet = true;
}

bool OAIPaymentResult::is_issuer_url_Set() const{
    return m_issuer_url_isSet;
}

bool OAIPaymentResult::is_issuer_url_Valid() const{
    return m_issuer_url_isValid;
}

QString OAIPaymentResult::getMd() const {
    return m_md;
}
void OAIPaymentResult::setMd(const QString &md) {
    m_md = md;
    m_md_isSet = true;
}

bool OAIPaymentResult::is_md_Set() const{
    return m_md_isSet;
}

bool OAIPaymentResult::is_md_Valid() const{
    return m_md_isValid;
}

QString OAIPaymentResult::getPaRequest() const {
    return m_pa_request;
}
void OAIPaymentResult::setPaRequest(const QString &pa_request) {
    m_pa_request = pa_request;
    m_pa_request_isSet = true;
}

bool OAIPaymentResult::is_pa_request_Set() const{
    return m_pa_request_isSet;
}

bool OAIPaymentResult::is_pa_request_Valid() const{
    return m_pa_request_isValid;
}

QString OAIPaymentResult::getPspReference() const {
    return m_psp_reference;
}
void OAIPaymentResult::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIPaymentResult::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIPaymentResult::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIPaymentResult::getRefusalReason() const {
    return m_refusal_reason;
}
void OAIPaymentResult::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAIPaymentResult::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAIPaymentResult::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

QString OAIPaymentResult::getResultCode() const {
    return m_result_code;
}
void OAIPaymentResult::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIPaymentResult::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIPaymentResult::is_result_code_Valid() const{
    return m_result_code_isValid;
}

bool OAIPaymentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_auth_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcc_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dcc_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_md_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pa_request_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
