# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseAdditionalDataCommon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_account_code: str=None, acquirer_code: str=None, acquirer_reference: str=None, alias: str=None, alias_type: str=None, auth_code: str=None, authorisation_mid: str=None, authorised_amount_currency: str=None, authorised_amount_value: str=None, avs_result: str=None, avs_result_raw: str=None, bic: str=None, co_branded_with: str=None, cvc_result: str=None, cvc_result_raw: str=None, ds_trans_id: str=None, eci: str=None, expiry_date: str=None, extra_costs_currency: str=None, extra_costs_value: str=None, fraud_check__item_nr__fraud_checkname: str=None, fraud_manual_review: str=None, fraud_result_type: str=None, funding_source: str=None, funds_availability: str=None, inferred_refusal_reason: str=None, is_card_commercial: str=None, issuer_country: str=None, liability_shift: str=None, mc_bank_net_reference_number: str=None, merchant_advice_code: str=None, merchant_reference: str=None, network_tx_reference: str=None, non_scheme_transaction_limit: str=None, non_scheme_transaction_limit_ccy: str=None, owner_name: str=None, payment_account_reference: str=None, payment_method: str=None, payment_method_variant: str=None, payout_eligible: str=None, realtime_account_updater_status: str=None, receipt_free_text: str=None, recurring_first_psp_reference: str=None, recurring_recurring_detail_reference: str=None, referred: str=None, refusal_reason_raw: str=None, request_amount: str=None, request_currency_code: str=None, shopper_interaction: str=None, shopper_reference: str=None, terminal_id: str=None, three_d_authenticated: str=None, three_d_authenticated_response: str=None, three_d_offered: str=None, three_d_offered_response: str=None, three_ds_version: str=None, visa_transaction_id: str=None, xid: str=None):
        """ResponseAdditionalDataCommon - a model defined in OpenAPI

        :param acquirer_account_code: The acquirer_account_code of this ResponseAdditionalDataCommon.
        :param acquirer_code: The acquirer_code of this ResponseAdditionalDataCommon.
        :param acquirer_reference: The acquirer_reference of this ResponseAdditionalDataCommon.
        :param alias: The alias of this ResponseAdditionalDataCommon.
        :param alias_type: The alias_type of this ResponseAdditionalDataCommon.
        :param auth_code: The auth_code of this ResponseAdditionalDataCommon.
        :param authorisation_mid: The authorisation_mid of this ResponseAdditionalDataCommon.
        :param authorised_amount_currency: The authorised_amount_currency of this ResponseAdditionalDataCommon.
        :param authorised_amount_value: The authorised_amount_value of this ResponseAdditionalDataCommon.
        :param avs_result: The avs_result of this ResponseAdditionalDataCommon.
        :param avs_result_raw: The avs_result_raw of this ResponseAdditionalDataCommon.
        :param bic: The bic of this ResponseAdditionalDataCommon.
        :param co_branded_with: The co_branded_with of this ResponseAdditionalDataCommon.
        :param cvc_result: The cvc_result of this ResponseAdditionalDataCommon.
        :param cvc_result_raw: The cvc_result_raw of this ResponseAdditionalDataCommon.
        :param ds_trans_id: The ds_trans_id of this ResponseAdditionalDataCommon.
        :param eci: The eci of this ResponseAdditionalDataCommon.
        :param expiry_date: The expiry_date of this ResponseAdditionalDataCommon.
        :param extra_costs_currency: The extra_costs_currency of this ResponseAdditionalDataCommon.
        :param extra_costs_value: The extra_costs_value of this ResponseAdditionalDataCommon.
        :param fraud_check__item_nr__fraud_checkname: The fraud_check__item_nr__fraud_checkname of this ResponseAdditionalDataCommon.
        :param fraud_manual_review: The fraud_manual_review of this ResponseAdditionalDataCommon.
        :param fraud_result_type: The fraud_result_type of this ResponseAdditionalDataCommon.
        :param funding_source: The funding_source of this ResponseAdditionalDataCommon.
        :param funds_availability: The funds_availability of this ResponseAdditionalDataCommon.
        :param inferred_refusal_reason: The inferred_refusal_reason of this ResponseAdditionalDataCommon.
        :param is_card_commercial: The is_card_commercial of this ResponseAdditionalDataCommon.
        :param issuer_country: The issuer_country of this ResponseAdditionalDataCommon.
        :param liability_shift: The liability_shift of this ResponseAdditionalDataCommon.
        :param mc_bank_net_reference_number: The mc_bank_net_reference_number of this ResponseAdditionalDataCommon.
        :param merchant_advice_code: The merchant_advice_code of this ResponseAdditionalDataCommon.
        :param merchant_reference: The merchant_reference of this ResponseAdditionalDataCommon.
        :param network_tx_reference: The network_tx_reference of this ResponseAdditionalDataCommon.
        :param non_scheme_transaction_limit: The non_scheme_transaction_limit of this ResponseAdditionalDataCommon.
        :param non_scheme_transaction_limit_ccy: The non_scheme_transaction_limit_ccy of this ResponseAdditionalDataCommon.
        :param owner_name: The owner_name of this ResponseAdditionalDataCommon.
        :param payment_account_reference: The payment_account_reference of this ResponseAdditionalDataCommon.
        :param payment_method: The payment_method of this ResponseAdditionalDataCommon.
        :param payment_method_variant: The payment_method_variant of this ResponseAdditionalDataCommon.
        :param payout_eligible: The payout_eligible of this ResponseAdditionalDataCommon.
        :param realtime_account_updater_status: The realtime_account_updater_status of this ResponseAdditionalDataCommon.
        :param receipt_free_text: The receipt_free_text of this ResponseAdditionalDataCommon.
        :param recurring_first_psp_reference: The recurring_first_psp_reference of this ResponseAdditionalDataCommon.
        :param recurring_recurring_detail_reference: The recurring_recurring_detail_reference of this ResponseAdditionalDataCommon.
        :param referred: The referred of this ResponseAdditionalDataCommon.
        :param refusal_reason_raw: The refusal_reason_raw of this ResponseAdditionalDataCommon.
        :param request_amount: The request_amount of this ResponseAdditionalDataCommon.
        :param request_currency_code: The request_currency_code of this ResponseAdditionalDataCommon.
        :param shopper_interaction: The shopper_interaction of this ResponseAdditionalDataCommon.
        :param shopper_reference: The shopper_reference of this ResponseAdditionalDataCommon.
        :param terminal_id: The terminal_id of this ResponseAdditionalDataCommon.
        :param three_d_authenticated: The three_d_authenticated of this ResponseAdditionalDataCommon.
        :param three_d_authenticated_response: The three_d_authenticated_response of this ResponseAdditionalDataCommon.
        :param three_d_offered: The three_d_offered of this ResponseAdditionalDataCommon.
        :param three_d_offered_response: The three_d_offered_response of this ResponseAdditionalDataCommon.
        :param three_ds_version: The three_ds_version of this ResponseAdditionalDataCommon.
        :param visa_transaction_id: The visa_transaction_id of this ResponseAdditionalDataCommon.
        :param xid: The xid of this ResponseAdditionalDataCommon.
        """
        self.openapi_types = {
            'acquirer_account_code': str,
            'acquirer_code': str,
            'acquirer_reference': str,
            'alias': str,
            'alias_type': str,
            'auth_code': str,
            'authorisation_mid': str,
            'authorised_amount_currency': str,
            'authorised_amount_value': str,
            'avs_result': str,
            'avs_result_raw': str,
            'bic': str,
            'co_branded_with': str,
            'cvc_result': str,
            'cvc_result_raw': str,
            'ds_trans_id': str,
            'eci': str,
            'expiry_date': str,
            'extra_costs_currency': str,
            'extra_costs_value': str,
            'fraud_check__item_nr__fraud_checkname': str,
            'fraud_manual_review': str,
            'fraud_result_type': str,
            'funding_source': str,
            'funds_availability': str,
            'inferred_refusal_reason': str,
            'is_card_commercial': str,
            'issuer_country': str,
            'liability_shift': str,
            'mc_bank_net_reference_number': str,
            'merchant_advice_code': str,
            'merchant_reference': str,
            'network_tx_reference': str,
            'non_scheme_transaction_limit': str,
            'non_scheme_transaction_limit_ccy': str,
            'owner_name': str,
            'payment_account_reference': str,
            'payment_method': str,
            'payment_method_variant': str,
            'payout_eligible': str,
            'realtime_account_updater_status': str,
            'receipt_free_text': str,
            'recurring_first_psp_reference': str,
            'recurring_recurring_detail_reference': str,
            'referred': str,
            'refusal_reason_raw': str,
            'request_amount': str,
            'request_currency_code': str,
            'shopper_interaction': str,
            'shopper_reference': str,
            'terminal_id': str,
            'three_d_authenticated': str,
            'three_d_authenticated_response': str,
            'three_d_offered': str,
            'three_d_offered_response': str,
            'three_ds_version': str,
            'visa_transaction_id': str,
            'xid': str
        }

        self.attribute_map = {
            'acquirer_account_code': 'acquirerAccountCode',
            'acquirer_code': 'acquirerCode',
            'acquirer_reference': 'acquirerReference',
            'alias': 'alias',
            'alias_type': 'aliasType',
            'auth_code': 'authCode',
            'authorisation_mid': 'authorisationMid',
            'authorised_amount_currency': 'authorisedAmountCurrency',
            'authorised_amount_value': 'authorisedAmountValue',
            'avs_result': 'avsResult',
            'avs_result_raw': 'avsResultRaw',
            'bic': 'bic',
            'co_branded_with': 'coBrandedWith',
            'cvc_result': 'cvcResult',
            'cvc_result_raw': 'cvcResultRaw',
            'ds_trans_id': 'dsTransID',
            'eci': 'eci',
            'expiry_date': 'expiryDate',
            'extra_costs_currency': 'extraCostsCurrency',
            'extra_costs_value': 'extraCostsValue',
            'fraud_check__item_nr__fraud_checkname': 'fraudCheck-[itemNr]-[FraudCheckname]',
            'fraud_manual_review': 'fraudManualReview',
            'fraud_result_type': 'fraudResultType',
            'funding_source': 'fundingSource',
            'funds_availability': 'fundsAvailability',
            'inferred_refusal_reason': 'inferredRefusalReason',
            'is_card_commercial': 'isCardCommercial',
            'issuer_country': 'issuerCountry',
            'liability_shift': 'liabilityShift',
            'mc_bank_net_reference_number': 'mcBankNetReferenceNumber',
            'merchant_advice_code': 'merchantAdviceCode',
            'merchant_reference': 'merchantReference',
            'network_tx_reference': 'networkTxReference',
            'non_scheme_transaction_limit': 'nonScheme.transactionLimit',
            'non_scheme_transaction_limit_ccy': 'nonScheme.transactionLimitCcy',
            'owner_name': 'ownerName',
            'payment_account_reference': 'paymentAccountReference',
            'payment_method': 'paymentMethod',
            'payment_method_variant': 'paymentMethodVariant',
            'payout_eligible': 'payoutEligible',
            'realtime_account_updater_status': 'realtimeAccountUpdaterStatus',
            'receipt_free_text': 'receiptFreeText',
            'recurring_first_psp_reference': 'recurring.firstPspReference',
            'recurring_recurring_detail_reference': 'recurring.recurringDetailReference',
            'referred': 'referred',
            'refusal_reason_raw': 'refusalReasonRaw',
            'request_amount': 'requestAmount',
            'request_currency_code': 'requestCurrencyCode',
            'shopper_interaction': 'shopperInteraction',
            'shopper_reference': 'shopperReference',
            'terminal_id': 'terminalId',
            'three_d_authenticated': 'threeDAuthenticated',
            'three_d_authenticated_response': 'threeDAuthenticatedResponse',
            'three_d_offered': 'threeDOffered',
            'three_d_offered_response': 'threeDOfferedResponse',
            'three_ds_version': 'threeDSVersion',
            'visa_transaction_id': 'visaTransactionId',
            'xid': 'xid'
        }

        self._acquirer_account_code = acquirer_account_code
        self._acquirer_code = acquirer_code
        self._acquirer_reference = acquirer_reference
        self._alias = alias
        self._alias_type = alias_type
        self._auth_code = auth_code
        self._authorisation_mid = authorisation_mid
        self._authorised_amount_currency = authorised_amount_currency
        self._authorised_amount_value = authorised_amount_value
        self._avs_result = avs_result
        self._avs_result_raw = avs_result_raw
        self._bic = bic
        self._co_branded_with = co_branded_with
        self._cvc_result = cvc_result
        self._cvc_result_raw = cvc_result_raw
        self._ds_trans_id = ds_trans_id
        self._eci = eci
        self._expiry_date = expiry_date
        self._extra_costs_currency = extra_costs_currency
        self._extra_costs_value = extra_costs_value
        self._fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname
        self._fraud_manual_review = fraud_manual_review
        self._fraud_result_type = fraud_result_type
        self._funding_source = funding_source
        self._funds_availability = funds_availability
        self._inferred_refusal_reason = inferred_refusal_reason
        self._is_card_commercial = is_card_commercial
        self._issuer_country = issuer_country
        self._liability_shift = liability_shift
        self._mc_bank_net_reference_number = mc_bank_net_reference_number
        self._merchant_advice_code = merchant_advice_code
        self._merchant_reference = merchant_reference
        self._network_tx_reference = network_tx_reference
        self._non_scheme_transaction_limit = non_scheme_transaction_limit
        self._non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy
        self._owner_name = owner_name
        self._payment_account_reference = payment_account_reference
        self._payment_method = payment_method
        self._payment_method_variant = payment_method_variant
        self._payout_eligible = payout_eligible
        self._realtime_account_updater_status = realtime_account_updater_status
        self._receipt_free_text = receipt_free_text
        self._recurring_first_psp_reference = recurring_first_psp_reference
        self._recurring_recurring_detail_reference = recurring_recurring_detail_reference
        self._referred = referred
        self._refusal_reason_raw = refusal_reason_raw
        self._request_amount = request_amount
        self._request_currency_code = request_currency_code
        self._shopper_interaction = shopper_interaction
        self._shopper_reference = shopper_reference
        self._terminal_id = terminal_id
        self._three_d_authenticated = three_d_authenticated
        self._three_d_authenticated_response = three_d_authenticated_response
        self._three_d_offered = three_d_offered
        self._three_d_offered_response = three_d_offered_response
        self._three_ds_version = three_ds_version
        self._visa_transaction_id = visa_transaction_id
        self._xid = xid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseAdditionalDataCommon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseAdditionalDataCommon of this ResponseAdditionalDataCommon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_account_code(self):
        """Gets the acquirer_account_code of this ResponseAdditionalDataCommon.

        The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.

        :return: The acquirer_account_code of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._acquirer_account_code

    @acquirer_account_code.setter
    def acquirer_account_code(self, acquirer_account_code):
        """Sets the acquirer_account_code of this ResponseAdditionalDataCommon.

        The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.

        :param acquirer_account_code: The acquirer_account_code of this ResponseAdditionalDataCommon.
        :type acquirer_account_code: str
        """

        self._acquirer_account_code = acquirer_account_code

    @property
    def acquirer_code(self):
        """Gets the acquirer_code of this ResponseAdditionalDataCommon.

        The name of the acquirer processing the payment request.  Example: TestPmmAcquirer

        :return: The acquirer_code of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._acquirer_code

    @acquirer_code.setter
    def acquirer_code(self, acquirer_code):
        """Sets the acquirer_code of this ResponseAdditionalDataCommon.

        The name of the acquirer processing the payment request.  Example: TestPmmAcquirer

        :param acquirer_code: The acquirer_code of this ResponseAdditionalDataCommon.
        :type acquirer_code: str
        """

        self._acquirer_code = acquirer_code

    @property
    def acquirer_reference(self):
        """Gets the acquirer_reference of this ResponseAdditionalDataCommon.

        The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9

        :return: The acquirer_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._acquirer_reference

    @acquirer_reference.setter
    def acquirer_reference(self, acquirer_reference):
        """Sets the acquirer_reference of this ResponseAdditionalDataCommon.

        The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9

        :param acquirer_reference: The acquirer_reference of this ResponseAdditionalDataCommon.
        :type acquirer_reference: str
        """

        self._acquirer_reference = acquirer_reference

    @property
    def alias(self):
        """Gets the alias of this ResponseAdditionalDataCommon.

        The Adyen alias of the card.  Example: H167852639363479

        :return: The alias of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ResponseAdditionalDataCommon.

        The Adyen alias of the card.  Example: H167852639363479

        :param alias: The alias of this ResponseAdditionalDataCommon.
        :type alias: str
        """

        self._alias = alias

    @property
    def alias_type(self):
        """Gets the alias_type of this ResponseAdditionalDataCommon.

        The type of the card alias.  Example: Default

        :return: The alias_type of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._alias_type

    @alias_type.setter
    def alias_type(self, alias_type):
        """Sets the alias_type of this ResponseAdditionalDataCommon.

        The type of the card alias.  Example: Default

        :param alias_type: The alias_type of this ResponseAdditionalDataCommon.
        :type alias_type: str
        """

        self._alias_type = alias_type

    @property
    def auth_code(self):
        """Gets the auth_code of this ResponseAdditionalDataCommon.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747

        :return: The auth_code of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this ResponseAdditionalDataCommon.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747

        :param auth_code: The auth_code of this ResponseAdditionalDataCommon.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def authorisation_mid(self):
        """Gets the authorisation_mid of this ResponseAdditionalDataCommon.

        Merchant ID known by the acquirer.

        :return: The authorisation_mid of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._authorisation_mid

    @authorisation_mid.setter
    def authorisation_mid(self, authorisation_mid):
        """Sets the authorisation_mid of this ResponseAdditionalDataCommon.

        Merchant ID known by the acquirer.

        :param authorisation_mid: The authorisation_mid of this ResponseAdditionalDataCommon.
        :type authorisation_mid: str
        """

        self._authorisation_mid = authorisation_mid

    @property
    def authorised_amount_currency(self):
        """Gets the authorised_amount_currency of this ResponseAdditionalDataCommon.

        The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :return: The authorised_amount_currency of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._authorised_amount_currency

    @authorised_amount_currency.setter
    def authorised_amount_currency(self, authorised_amount_currency):
        """Sets the authorised_amount_currency of this ResponseAdditionalDataCommon.

        The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :param authorised_amount_currency: The authorised_amount_currency of this ResponseAdditionalDataCommon.
        :type authorised_amount_currency: str
        """

        self._authorised_amount_currency = authorised_amount_currency

    @property
    def authorised_amount_value(self):
        """Gets the authorised_amount_value of this ResponseAdditionalDataCommon.

        Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

        :return: The authorised_amount_value of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._authorised_amount_value

    @authorised_amount_value.setter
    def authorised_amount_value(self, authorised_amount_value):
        """Sets the authorised_amount_value of this ResponseAdditionalDataCommon.

        Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

        :param authorised_amount_value: The authorised_amount_value of this ResponseAdditionalDataCommon.
        :type authorised_amount_value: str
        """

        self._authorised_amount_value = authorised_amount_value

    @property
    def avs_result(self):
        """Gets the avs_result of this ResponseAdditionalDataCommon.

        The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).

        :return: The avs_result of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._avs_result

    @avs_result.setter
    def avs_result(self, avs_result):
        """Sets the avs_result of this ResponseAdditionalDataCommon.

        The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).

        :param avs_result: The avs_result of this ResponseAdditionalDataCommon.
        :type avs_result: str
        """

        self._avs_result = avs_result

    @property
    def avs_result_raw(self):
        """Gets the avs_result_raw of this ResponseAdditionalDataCommon.

        Raw AVS result received from the acquirer, where available.  Example: D

        :return: The avs_result_raw of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._avs_result_raw

    @avs_result_raw.setter
    def avs_result_raw(self, avs_result_raw):
        """Sets the avs_result_raw of this ResponseAdditionalDataCommon.

        Raw AVS result received from the acquirer, where available.  Example: D

        :param avs_result_raw: The avs_result_raw of this ResponseAdditionalDataCommon.
        :type avs_result_raw: str
        """

        self._avs_result_raw = avs_result_raw

    @property
    def bic(self):
        """Gets the bic of this ResponseAdditionalDataCommon.

        BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.

        :return: The bic of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this ResponseAdditionalDataCommon.

        BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.

        :param bic: The bic of this ResponseAdditionalDataCommon.
        :type bic: str
        """

        self._bic = bic

    @property
    def co_branded_with(self):
        """Gets the co_branded_with of this ResponseAdditionalDataCommon.

        Includes the co-branded card information.

        :return: The co_branded_with of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._co_branded_with

    @co_branded_with.setter
    def co_branded_with(self, co_branded_with):
        """Sets the co_branded_with of this ResponseAdditionalDataCommon.

        Includes the co-branded card information.

        :param co_branded_with: The co_branded_with of this ResponseAdditionalDataCommon.
        :type co_branded_with: str
        """

        self._co_branded_with = co_branded_with

    @property
    def cvc_result(self):
        """Gets the cvc_result of this ResponseAdditionalDataCommon.

        The result of CVC verification.

        :return: The cvc_result of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._cvc_result

    @cvc_result.setter
    def cvc_result(self, cvc_result):
        """Sets the cvc_result of this ResponseAdditionalDataCommon.

        The result of CVC verification.

        :param cvc_result: The cvc_result of this ResponseAdditionalDataCommon.
        :type cvc_result: str
        """

        self._cvc_result = cvc_result

    @property
    def cvc_result_raw(self):
        """Gets the cvc_result_raw of this ResponseAdditionalDataCommon.

        The raw result of CVC verification.

        :return: The cvc_result_raw of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._cvc_result_raw

    @cvc_result_raw.setter
    def cvc_result_raw(self, cvc_result_raw):
        """Sets the cvc_result_raw of this ResponseAdditionalDataCommon.

        The raw result of CVC verification.

        :param cvc_result_raw: The cvc_result_raw of this ResponseAdditionalDataCommon.
        :type cvc_result_raw: str
        """

        self._cvc_result_raw = cvc_result_raw

    @property
    def ds_trans_id(self):
        """Gets the ds_trans_id of this ResponseAdditionalDataCommon.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.

        :return: The ds_trans_id of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._ds_trans_id

    @ds_trans_id.setter
    def ds_trans_id(self, ds_trans_id):
        """Sets the ds_trans_id of this ResponseAdditionalDataCommon.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.

        :param ds_trans_id: The ds_trans_id of this ResponseAdditionalDataCommon.
        :type ds_trans_id: str
        """

        self._ds_trans_id = ds_trans_id

    @property
    def eci(self):
        """Gets the eci of this ResponseAdditionalDataCommon.

        The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02

        :return: The eci of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this ResponseAdditionalDataCommon.

        The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02

        :param eci: The eci of this ResponseAdditionalDataCommon.
        :type eci: str
        """

        self._eci = eci

    @property
    def expiry_date(self):
        """Gets the expiry_date of this ResponseAdditionalDataCommon.

        The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.

        :return: The expiry_date of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this ResponseAdditionalDataCommon.

        The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.

        :param expiry_date: The expiry_date of this ResponseAdditionalDataCommon.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def extra_costs_currency(self):
        """Gets the extra_costs_currency of this ResponseAdditionalDataCommon.

        The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR

        :return: The extra_costs_currency of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._extra_costs_currency

    @extra_costs_currency.setter
    def extra_costs_currency(self, extra_costs_currency):
        """Sets the extra_costs_currency of this ResponseAdditionalDataCommon.

        The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR

        :param extra_costs_currency: The extra_costs_currency of this ResponseAdditionalDataCommon.
        :type extra_costs_currency: str
        """

        self._extra_costs_currency = extra_costs_currency

    @property
    def extra_costs_value(self):
        """Gets the extra_costs_value of this ResponseAdditionalDataCommon.

        The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.

        :return: The extra_costs_value of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._extra_costs_value

    @extra_costs_value.setter
    def extra_costs_value(self, extra_costs_value):
        """Sets the extra_costs_value of this ResponseAdditionalDataCommon.

        The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.

        :param extra_costs_value: The extra_costs_value of this ResponseAdditionalDataCommon.
        :type extra_costs_value: str
        """

        self._extra_costs_value = extra_costs_value

    @property
    def fraud_check__item_nr__fraud_checkname(self):
        """Gets the fraud_check__item_nr__fraud_checkname of this ResponseAdditionalDataCommon.

        The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.

        :return: The fraud_check__item_nr__fraud_checkname of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._fraud_check__item_nr__fraud_checkname

    @fraud_check__item_nr__fraud_checkname.setter
    def fraud_check__item_nr__fraud_checkname(self, fraud_check__item_nr__fraud_checkname):
        """Sets the fraud_check__item_nr__fraud_checkname of this ResponseAdditionalDataCommon.

        The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.

        :param fraud_check__item_nr__fraud_checkname: The fraud_check__item_nr__fraud_checkname of this ResponseAdditionalDataCommon.
        :type fraud_check__item_nr__fraud_checkname: str
        """

        self._fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname

    @property
    def fraud_manual_review(self):
        """Gets the fraud_manual_review of this ResponseAdditionalDataCommon.

        Indicates if the payment is sent to manual review.

        :return: The fraud_manual_review of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._fraud_manual_review

    @fraud_manual_review.setter
    def fraud_manual_review(self, fraud_manual_review):
        """Sets the fraud_manual_review of this ResponseAdditionalDataCommon.

        Indicates if the payment is sent to manual review.

        :param fraud_manual_review: The fraud_manual_review of this ResponseAdditionalDataCommon.
        :type fraud_manual_review: str
        """

        self._fraud_manual_review = fraud_manual_review

    @property
    def fraud_result_type(self):
        """Gets the fraud_result_type of this ResponseAdditionalDataCommon.

        The fraud result properties of the payment.

        :return: The fraud_result_type of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._fraud_result_type

    @fraud_result_type.setter
    def fraud_result_type(self, fraud_result_type):
        """Sets the fraud_result_type of this ResponseAdditionalDataCommon.

        The fraud result properties of the payment.

        :param fraud_result_type: The fraud_result_type of this ResponseAdditionalDataCommon.
        :type fraud_result_type: str
        """
        allowed_values = ["GREEN", "FRAUD"]  # noqa: E501
        if fraud_result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fraud_result_type` ({0}), must be one of {1}"
                .format(fraud_result_type, allowed_values)
            )

        self._fraud_result_type = fraud_result_type

    @property
    def funding_source(self):
        """Gets the funding_source of this ResponseAdditionalDataCommon.

        Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.

        :return: The funding_source of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this ResponseAdditionalDataCommon.

        Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.

        :param funding_source: The funding_source of this ResponseAdditionalDataCommon.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def funds_availability(self):
        """Gets the funds_availability of this ResponseAdditionalDataCommon.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".

        :return: The funds_availability of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._funds_availability

    @funds_availability.setter
    def funds_availability(self, funds_availability):
        """Sets the funds_availability of this ResponseAdditionalDataCommon.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".

        :param funds_availability: The funds_availability of this ResponseAdditionalDataCommon.
        :type funds_availability: str
        """

        self._funds_availability = funds_availability

    @property
    def inferred_refusal_reason(self):
        """Gets the inferred_refusal_reason of this ResponseAdditionalDataCommon.

        Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card

        :return: The inferred_refusal_reason of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._inferred_refusal_reason

    @inferred_refusal_reason.setter
    def inferred_refusal_reason(self, inferred_refusal_reason):
        """Sets the inferred_refusal_reason of this ResponseAdditionalDataCommon.

        Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card

        :param inferred_refusal_reason: The inferred_refusal_reason of this ResponseAdditionalDataCommon.
        :type inferred_refusal_reason: str
        """

        self._inferred_refusal_reason = inferred_refusal_reason

    @property
    def is_card_commercial(self):
        """Gets the is_card_commercial of this ResponseAdditionalDataCommon.

        Indicates if the card is used for business purposes only.

        :return: The is_card_commercial of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._is_card_commercial

    @is_card_commercial.setter
    def is_card_commercial(self, is_card_commercial):
        """Sets the is_card_commercial of this ResponseAdditionalDataCommon.

        Indicates if the card is used for business purposes only.

        :param is_card_commercial: The is_card_commercial of this ResponseAdditionalDataCommon.
        :type is_card_commercial: str
        """

        self._is_card_commercial = is_card_commercial

    @property
    def issuer_country(self):
        """Gets the issuer_country of this ResponseAdditionalDataCommon.

        The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP

        :return: The issuer_country of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this ResponseAdditionalDataCommon.

        The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP

        :param issuer_country: The issuer_country of this ResponseAdditionalDataCommon.
        :type issuer_country: str
        """

        self._issuer_country = issuer_country

    @property
    def liability_shift(self):
        """Gets the liability_shift of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether a liability shift was offered for this payment.

        :return: The liability_shift of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._liability_shift

    @liability_shift.setter
    def liability_shift(self, liability_shift):
        """Sets the liability_shift of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether a liability shift was offered for this payment.

        :param liability_shift: The liability_shift of this ResponseAdditionalDataCommon.
        :type liability_shift: str
        """

        self._liability_shift = liability_shift

    @property
    def mc_bank_net_reference_number(self):
        """Gets the mc_bank_net_reference_number of this ResponseAdditionalDataCommon.

        The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.

        :return: The mc_bank_net_reference_number of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._mc_bank_net_reference_number

    @mc_bank_net_reference_number.setter
    def mc_bank_net_reference_number(self, mc_bank_net_reference_number):
        """Sets the mc_bank_net_reference_number of this ResponseAdditionalDataCommon.

        The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.

        :param mc_bank_net_reference_number: The mc_bank_net_reference_number of this ResponseAdditionalDataCommon.
        :type mc_bank_net_reference_number: str
        """

        self._mc_bank_net_reference_number = mc_bank_net_reference_number

    @property
    def merchant_advice_code(self):
        """Gets the merchant_advice_code of this ResponseAdditionalDataCommon.

        The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).

        :return: The merchant_advice_code of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._merchant_advice_code

    @merchant_advice_code.setter
    def merchant_advice_code(self, merchant_advice_code):
        """Sets the merchant_advice_code of this ResponseAdditionalDataCommon.

        The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).

        :param merchant_advice_code: The merchant_advice_code of this ResponseAdditionalDataCommon.
        :type merchant_advice_code: str
        """

        self._merchant_advice_code = merchant_advice_code

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this ResponseAdditionalDataCommon.

        The reference provided for the transaction.

        :return: The merchant_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this ResponseAdditionalDataCommon.

        The reference provided for the transaction.

        :param merchant_reference: The merchant_reference of this ResponseAdditionalDataCommon.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def network_tx_reference(self):
        """Gets the network_tx_reference of this ResponseAdditionalDataCommon.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :return: The network_tx_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._network_tx_reference

    @network_tx_reference.setter
    def network_tx_reference(self, network_tx_reference):
        """Sets the network_tx_reference of this ResponseAdditionalDataCommon.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :param network_tx_reference: The network_tx_reference of this ResponseAdditionalDataCommon.
        :type network_tx_reference: str
        """

        self._network_tx_reference = network_tx_reference

    @property
    def non_scheme_transaction_limit(self):
        """Gets the non_scheme_transaction_limit of this ResponseAdditionalDataCommon.

        The maximum spendable value for a single transaction. Applicable to some gift cards.

        :return: The non_scheme_transaction_limit of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._non_scheme_transaction_limit

    @non_scheme_transaction_limit.setter
    def non_scheme_transaction_limit(self, non_scheme_transaction_limit):
        """Sets the non_scheme_transaction_limit of this ResponseAdditionalDataCommon.

        The maximum spendable value for a single transaction. Applicable to some gift cards.

        :param non_scheme_transaction_limit: The non_scheme_transaction_limit of this ResponseAdditionalDataCommon.
        :type non_scheme_transaction_limit: str
        """

        self._non_scheme_transaction_limit = non_scheme_transaction_limit

    @property
    def non_scheme_transaction_limit_ccy(self):
        """Gets the non_scheme_transaction_limit_ccy of this ResponseAdditionalDataCommon.

        The currency of the transaction limit.

        :return: The non_scheme_transaction_limit_ccy of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._non_scheme_transaction_limit_ccy

    @non_scheme_transaction_limit_ccy.setter
    def non_scheme_transaction_limit_ccy(self, non_scheme_transaction_limit_ccy):
        """Sets the non_scheme_transaction_limit_ccy of this ResponseAdditionalDataCommon.

        The currency of the transaction limit.

        :param non_scheme_transaction_limit_ccy: The non_scheme_transaction_limit_ccy of this ResponseAdditionalDataCommon.
        :type non_scheme_transaction_limit_ccy: str
        """

        self._non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy

    @property
    def owner_name(self):
        """Gets the owner_name of this ResponseAdditionalDataCommon.

        The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.

        :return: The owner_name of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this ResponseAdditionalDataCommon.

        The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.

        :param owner_name: The owner_name of this ResponseAdditionalDataCommon.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def payment_account_reference(self):
        """Gets the payment_account_reference of this ResponseAdditionalDataCommon.

        The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.

        :return: The payment_account_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._payment_account_reference

    @payment_account_reference.setter
    def payment_account_reference(self, payment_account_reference):
        """Sets the payment_account_reference of this ResponseAdditionalDataCommon.

        The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.

        :param payment_account_reference: The payment_account_reference of this ResponseAdditionalDataCommon.
        :type payment_account_reference: str
        """

        self._payment_account_reference = payment_account_reference

    @property
    def payment_method(self):
        """Gets the payment_method of this ResponseAdditionalDataCommon.

        The payment method used in the transaction.

        :return: The payment_method of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ResponseAdditionalDataCommon.

        The payment method used in the transaction.

        :param payment_method: The payment_method of this ResponseAdditionalDataCommon.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_method_variant(self):
        """Gets the payment_method_variant of this ResponseAdditionalDataCommon.

        The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro

        :return: The payment_method_variant of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._payment_method_variant

    @payment_method_variant.setter
    def payment_method_variant(self, payment_method_variant):
        """Sets the payment_method_variant of this ResponseAdditionalDataCommon.

        The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro

        :param payment_method_variant: The payment_method_variant of this ResponseAdditionalDataCommon.
        :type payment_method_variant: str
        """

        self._payment_method_variant = payment_method_variant

    @property
    def payout_eligible(self):
        """Gets the payout_eligible of this ResponseAdditionalDataCommon.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)

        :return: The payout_eligible of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._payout_eligible

    @payout_eligible.setter
    def payout_eligible(self, payout_eligible):
        """Sets the payout_eligible of this ResponseAdditionalDataCommon.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)

        :param payout_eligible: The payout_eligible of this ResponseAdditionalDataCommon.
        :type payout_eligible: str
        """

        self._payout_eligible = payout_eligible

    @property
    def realtime_account_updater_status(self):
        """Gets the realtime_account_updater_status of this ResponseAdditionalDataCommon.

        The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder

        :return: The realtime_account_updater_status of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._realtime_account_updater_status

    @realtime_account_updater_status.setter
    def realtime_account_updater_status(self, realtime_account_updater_status):
        """Sets the realtime_account_updater_status of this ResponseAdditionalDataCommon.

        The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder

        :param realtime_account_updater_status: The realtime_account_updater_status of this ResponseAdditionalDataCommon.
        :type realtime_account_updater_status: str
        """

        self._realtime_account_updater_status = realtime_account_updater_status

    @property
    def receipt_free_text(self):
        """Gets the receipt_free_text of this ResponseAdditionalDataCommon.

        Message to be displayed on the terminal.

        :return: The receipt_free_text of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._receipt_free_text

    @receipt_free_text.setter
    def receipt_free_text(self, receipt_free_text):
        """Sets the receipt_free_text of this ResponseAdditionalDataCommon.

        Message to be displayed on the terminal.

        :param receipt_free_text: The receipt_free_text of this ResponseAdditionalDataCommon.
        :type receipt_free_text: str
        """

        self._receipt_free_text = receipt_free_text

    @property
    def recurring_first_psp_reference(self):
        """Gets the recurring_first_psp_reference of this ResponseAdditionalDataCommon.

        The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.

        :return: The recurring_first_psp_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._recurring_first_psp_reference

    @recurring_first_psp_reference.setter
    def recurring_first_psp_reference(self, recurring_first_psp_reference):
        """Sets the recurring_first_psp_reference of this ResponseAdditionalDataCommon.

        The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.

        :param recurring_first_psp_reference: The recurring_first_psp_reference of this ResponseAdditionalDataCommon.
        :type recurring_first_psp_reference: str
        """

        self._recurring_first_psp_reference = recurring_first_psp_reference

    @property
    def recurring_recurring_detail_reference(self):
        """Gets the recurring_recurring_detail_reference of this ResponseAdditionalDataCommon.

        The reference that uniquely identifies the recurring transaction.

        :return: The recurring_recurring_detail_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._recurring_recurring_detail_reference

    @recurring_recurring_detail_reference.setter
    def recurring_recurring_detail_reference(self, recurring_recurring_detail_reference):
        """Sets the recurring_recurring_detail_reference of this ResponseAdditionalDataCommon.

        The reference that uniquely identifies the recurring transaction.

        :param recurring_recurring_detail_reference: The recurring_recurring_detail_reference of this ResponseAdditionalDataCommon.
        :type recurring_recurring_detail_reference: str
        """

        self._recurring_recurring_detail_reference = recurring_recurring_detail_reference

    @property
    def referred(self):
        """Gets the referred of this ResponseAdditionalDataCommon.

        If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true

        :return: The referred of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._referred

    @referred.setter
    def referred(self, referred):
        """Sets the referred of this ResponseAdditionalDataCommon.

        If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true

        :param referred: The referred of this ResponseAdditionalDataCommon.
        :type referred: str
        """

        self._referred = referred

    @property
    def refusal_reason_raw(self):
        """Gets the refusal_reason_raw of this ResponseAdditionalDataCommon.

        Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED

        :return: The refusal_reason_raw of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._refusal_reason_raw

    @refusal_reason_raw.setter
    def refusal_reason_raw(self, refusal_reason_raw):
        """Sets the refusal_reason_raw of this ResponseAdditionalDataCommon.

        Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED

        :param refusal_reason_raw: The refusal_reason_raw of this ResponseAdditionalDataCommon.
        :type refusal_reason_raw: str
        """

        self._refusal_reason_raw = refusal_reason_raw

    @property
    def request_amount(self):
        """Gets the request_amount of this ResponseAdditionalDataCommon.

        The amount of the payment request.

        :return: The request_amount of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this ResponseAdditionalDataCommon.

        The amount of the payment request.

        :param request_amount: The request_amount of this ResponseAdditionalDataCommon.
        :type request_amount: str
        """

        self._request_amount = request_amount

    @property
    def request_currency_code(self):
        """Gets the request_currency_code of this ResponseAdditionalDataCommon.

        The currency of the payment request.

        :return: The request_currency_code of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._request_currency_code

    @request_currency_code.setter
    def request_currency_code(self, request_currency_code):
        """Sets the request_currency_code of this ResponseAdditionalDataCommon.

        The currency of the payment request.

        :param request_currency_code: The request_currency_code of this ResponseAdditionalDataCommon.
        :type request_currency_code: str
        """

        self._request_currency_code = request_currency_code

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this ResponseAdditionalDataCommon.

        The shopper interaction type of the payment request.  Example: Ecommerce

        :return: The shopper_interaction of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this ResponseAdditionalDataCommon.

        The shopper interaction type of the payment request.  Example: Ecommerce

        :param shopper_interaction: The shopper_interaction of this ResponseAdditionalDataCommon.
        :type shopper_interaction: str
        """

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this ResponseAdditionalDataCommon.

        The shopperReference passed in the payment request.  Example: AdyenTestShopperXX

        :return: The shopper_reference of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this ResponseAdditionalDataCommon.

        The shopperReference passed in the payment request.  Example: AdyenTestShopperXX

        :param shopper_reference: The shopper_reference of this ResponseAdditionalDataCommon.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def terminal_id(self):
        """Gets the terminal_id of this ResponseAdditionalDataCommon.

        The terminal ID used in a point-of-sale payment.  Example: 06022622

        :return: The terminal_id of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this ResponseAdditionalDataCommon.

        The terminal ID used in a point-of-sale payment.  Example: 06022622

        :param terminal_id: The terminal_id of this ResponseAdditionalDataCommon.
        :type terminal_id: str
        """

        self._terminal_id = terminal_id

    @property
    def three_d_authenticated(self):
        """Gets the three_d_authenticated of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true

        :return: The three_d_authenticated of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._three_d_authenticated

    @three_d_authenticated.setter
    def three_d_authenticated(self, three_d_authenticated):
        """Sets the three_d_authenticated of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true

        :param three_d_authenticated: The three_d_authenticated of this ResponseAdditionalDataCommon.
        :type three_d_authenticated: str
        """

        self._three_d_authenticated = three_d_authenticated

    @property
    def three_d_authenticated_response(self):
        """Gets the three_d_authenticated_response of this ResponseAdditionalDataCommon.

        The raw 3DS authentication result from the card issuer.  Example: N

        :return: The three_d_authenticated_response of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._three_d_authenticated_response

    @three_d_authenticated_response.setter
    def three_d_authenticated_response(self, three_d_authenticated_response):
        """Sets the three_d_authenticated_response of this ResponseAdditionalDataCommon.

        The raw 3DS authentication result from the card issuer.  Example: N

        :param three_d_authenticated_response: The three_d_authenticated_response of this ResponseAdditionalDataCommon.
        :type three_d_authenticated_response: str
        """

        self._three_d_authenticated_response = three_d_authenticated_response

    @property
    def three_d_offered(self):
        """Gets the three_d_offered of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether 3DS was offered for this payment.  Example: true

        :return: The three_d_offered of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._three_d_offered

    @three_d_offered.setter
    def three_d_offered(self, three_d_offered):
        """Sets the three_d_offered of this ResponseAdditionalDataCommon.

        A Boolean value indicating whether 3DS was offered for this payment.  Example: true

        :param three_d_offered: The three_d_offered of this ResponseAdditionalDataCommon.
        :type three_d_offered: str
        """

        self._three_d_offered = three_d_offered

    @property
    def three_d_offered_response(self):
        """Gets the three_d_offered_response of this ResponseAdditionalDataCommon.

        The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y

        :return: The three_d_offered_response of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._three_d_offered_response

    @three_d_offered_response.setter
    def three_d_offered_response(self, three_d_offered_response):
        """Sets the three_d_offered_response of this ResponseAdditionalDataCommon.

        The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y

        :param three_d_offered_response: The three_d_offered_response of this ResponseAdditionalDataCommon.
        :type three_d_offered_response: str
        """

        self._three_d_offered_response = three_d_offered_response

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this ResponseAdditionalDataCommon.

        The 3D Secure 2 version.

        :return: The three_ds_version of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this ResponseAdditionalDataCommon.

        The 3D Secure 2 version.

        :param three_ds_version: The three_ds_version of this ResponseAdditionalDataCommon.
        :type three_ds_version: str
        """

        self._three_ds_version = three_ds_version

    @property
    def visa_transaction_id(self):
        """Gets the visa_transaction_id of this ResponseAdditionalDataCommon.

        The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.

        :return: The visa_transaction_id of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._visa_transaction_id

    @visa_transaction_id.setter
    def visa_transaction_id(self, visa_transaction_id):
        """Sets the visa_transaction_id of this ResponseAdditionalDataCommon.

        The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.

        :param visa_transaction_id: The visa_transaction_id of this ResponseAdditionalDataCommon.
        :type visa_transaction_id: str
        """

        self._visa_transaction_id = visa_transaction_id

    @property
    def xid(self):
        """Gets the xid of this ResponseAdditionalDataCommon.

        The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=

        :return: The xid of this ResponseAdditionalDataCommon.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this ResponseAdditionalDataCommon.

        The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=

        :param xid: The xid of this ResponseAdditionalDataCommon.
        :type xid: str
        """

        self._xid = xid
