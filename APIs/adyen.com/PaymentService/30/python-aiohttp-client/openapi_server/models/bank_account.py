# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_account_number: str=None, bank_city: str=None, bank_location_id: str=None, bank_name: str=None, bic: str=None, country_code: str=None, iban: str=None, owner_name: str=None, tax_id: str=None):
        """BankAccount - a model defined in OpenAPI

        :param bank_account_number: The bank_account_number of this BankAccount.
        :param bank_city: The bank_city of this BankAccount.
        :param bank_location_id: The bank_location_id of this BankAccount.
        :param bank_name: The bank_name of this BankAccount.
        :param bic: The bic of this BankAccount.
        :param country_code: The country_code of this BankAccount.
        :param iban: The iban of this BankAccount.
        :param owner_name: The owner_name of this BankAccount.
        :param tax_id: The tax_id of this BankAccount.
        """
        self.openapi_types = {
            'bank_account_number': str,
            'bank_city': str,
            'bank_location_id': str,
            'bank_name': str,
            'bic': str,
            'country_code': str,
            'iban': str,
            'owner_name': str,
            'tax_id': str
        }

        self.attribute_map = {
            'bank_account_number': 'bankAccountNumber',
            'bank_city': 'bankCity',
            'bank_location_id': 'bankLocationId',
            'bank_name': 'bankName',
            'bic': 'bic',
            'country_code': 'countryCode',
            'iban': 'iban',
            'owner_name': 'ownerName',
            'tax_id': 'taxId'
        }

        self._bank_account_number = bank_account_number
        self._bank_city = bank_city
        self._bank_location_id = bank_location_id
        self._bank_name = bank_name
        self._bic = bic
        self._country_code = country_code
        self._iban = iban
        self._owner_name = owner_name
        self._tax_id = tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccount of this BankAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BankAccount.

        The bank account number (without separators).

        :return: The bank_account_number of this BankAccount.
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BankAccount.

        The bank account number (without separators).

        :param bank_account_number: The bank_account_number of this BankAccount.
        :type bank_account_number: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_city(self):
        """Gets the bank_city of this BankAccount.

        The bank city.

        :return: The bank_city of this BankAccount.
        :rtype: str
        """
        return self._bank_city

    @bank_city.setter
    def bank_city(self, bank_city):
        """Sets the bank_city of this BankAccount.

        The bank city.

        :param bank_city: The bank_city of this BankAccount.
        :type bank_city: str
        """

        self._bank_city = bank_city

    @property
    def bank_location_id(self):
        """Gets the bank_location_id of this BankAccount.

        The location id of the bank. The field value is `nil` in most cases.

        :return: The bank_location_id of this BankAccount.
        :rtype: str
        """
        return self._bank_location_id

    @bank_location_id.setter
    def bank_location_id(self, bank_location_id):
        """Sets the bank_location_id of this BankAccount.

        The location id of the bank. The field value is `nil` in most cases.

        :param bank_location_id: The bank_location_id of this BankAccount.
        :type bank_location_id: str
        """

        self._bank_location_id = bank_location_id

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccount.

        The name of the bank.

        :return: The bank_name of this BankAccount.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccount.

        The name of the bank.

        :param bank_name: The bank_name of this BankAccount.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def bic(self):
        """Gets the bic of this BankAccount.

        The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.

        :return: The bic of this BankAccount.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BankAccount.

        The [Business Identifier Code](https://en.wikipedia.org/wiki/ISO_9362) (BIC) is the SWIFT address assigned to a bank. The field value is `nil` in most cases.

        :param bic: The bic of this BankAccount.
        :type bic: str
        """

        self._bic = bic

    @property
    def country_code(self):
        """Gets the country_code of this BankAccount.

        Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. 'NL').

        :return: The country_code of this BankAccount.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this BankAccount.

        Country code where the bank is located.  A valid value is an ISO two-character country code (e.g. 'NL').

        :param country_code: The country_code of this BankAccount.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def iban(self):
        """Gets the iban of this BankAccount.

        The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).

        :return: The iban of this BankAccount.
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this BankAccount.

        The [International Bank Account Number](https://en.wikipedia.org/wiki/International_Bank_Account_Number) (IBAN).

        :param iban: The iban of this BankAccount.
        :type iban: str
        """

        self._iban = iban

    @property
    def owner_name(self):
        """Gets the owner_name of this BankAccount.

        The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.

        :return: The owner_name of this BankAccount.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this BankAccount.

        The name of the bank account holder. If you submit a name with non-Latin characters, we automatically replace some of them with corresponding Latin characters to meet the FATF recommendations. For example: * χ12 is converted to ch12. * üA is converted to euA. * Peter Møller is converted to Peter Mller, because banks don't accept 'ø'. After replacement, the ownerName must have at least three alphanumeric characters (A-Z, a-z, 0-9), and at least one of them must be a valid Latin character (A-Z, a-z). For example: * John17 - allowed. * J17 - allowed. * 171 - not allowed. * John-7 - allowed. > If provided details don't match the required format, the response returns the error message: 203 'Invalid bank account holder name'.

        :param owner_name: The owner_name of this BankAccount.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def tax_id(self):
        """Gets the tax_id of this BankAccount.

        The bank account holder's tax ID.

        :return: The tax_id of this BankAccount.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this BankAccount.

        The bank account holder's tax ID.

        :param tax_id: The tax_id of this BankAccount.
        :type tax_id: str
        """

        self._tax_id = tax_id
