# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.adjust_authorisation_request_additional_data import AdjustAuthorisationRequestAdditionalData
from openapi_server.models.amount import Amount
from openapi_server import util


class VoidPendingRefundRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: AdjustAuthorisationRequestAdditionalData=None, merchant_account: str=None, modification_amount: Amount=None, original_merchant_reference: str=None, original_reference: str=None, reference: str=None, tender_reference: str=None, unique_terminal_id: str=None):
        """VoidPendingRefundRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this VoidPendingRefundRequest.
        :param merchant_account: The merchant_account of this VoidPendingRefundRequest.
        :param modification_amount: The modification_amount of this VoidPendingRefundRequest.
        :param original_merchant_reference: The original_merchant_reference of this VoidPendingRefundRequest.
        :param original_reference: The original_reference of this VoidPendingRefundRequest.
        :param reference: The reference of this VoidPendingRefundRequest.
        :param tender_reference: The tender_reference of this VoidPendingRefundRequest.
        :param unique_terminal_id: The unique_terminal_id of this VoidPendingRefundRequest.
        """
        self.openapi_types = {
            'additional_data': AdjustAuthorisationRequestAdditionalData,
            'merchant_account': str,
            'modification_amount': Amount,
            'original_merchant_reference': str,
            'original_reference': str,
            'reference': str,
            'tender_reference': str,
            'unique_terminal_id': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'merchant_account': 'merchantAccount',
            'modification_amount': 'modificationAmount',
            'original_merchant_reference': 'originalMerchantReference',
            'original_reference': 'originalReference',
            'reference': 'reference',
            'tender_reference': 'tenderReference',
            'unique_terminal_id': 'uniqueTerminalId'
        }

        self._additional_data = additional_data
        self._merchant_account = merchant_account
        self._modification_amount = modification_amount
        self._original_merchant_reference = original_merchant_reference
        self._original_reference = original_reference
        self._reference = reference
        self._tender_reference = tender_reference
        self._unique_terminal_id = unique_terminal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VoidPendingRefundRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VoidPendingRefundRequest of this VoidPendingRefundRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this VoidPendingRefundRequest.


        :return: The additional_data of this VoidPendingRefundRequest.
        :rtype: AdjustAuthorisationRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this VoidPendingRefundRequest.


        :param additional_data: The additional_data of this VoidPendingRefundRequest.
        :type additional_data: AdjustAuthorisationRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def merchant_account(self):
        """Gets the merchant_account of this VoidPendingRefundRequest.

        The merchant account that is used to process the payment.

        :return: The merchant_account of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this VoidPendingRefundRequest.

        The merchant account that is used to process the payment.

        :param merchant_account: The merchant_account of this VoidPendingRefundRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def modification_amount(self):
        """Gets the modification_amount of this VoidPendingRefundRequest.

        The amount that needs to be captured/refunded. Required for `/capture` and `/refund`, not allowed for `/cancel`. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :return: The modification_amount of this VoidPendingRefundRequest.
        :rtype: Amount
        """
        return self._modification_amount

    @modification_amount.setter
    def modification_amount(self, modification_amount):
        """Sets the modification_amount of this VoidPendingRefundRequest.

        The amount that needs to be captured/refunded. Required for `/capture` and `/refund`, not allowed for `/cancel`. The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :param modification_amount: The modification_amount of this VoidPendingRefundRequest.
        :type modification_amount: Amount
        """

        self._modification_amount = modification_amount

    @property
    def original_merchant_reference(self):
        """Gets the original_merchant_reference of this VoidPendingRefundRequest.

        The original merchant reference to cancel.

        :return: The original_merchant_reference of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._original_merchant_reference

    @original_merchant_reference.setter
    def original_merchant_reference(self, original_merchant_reference):
        """Sets the original_merchant_reference of this VoidPendingRefundRequest.

        The original merchant reference to cancel.

        :param original_merchant_reference: The original_merchant_reference of this VoidPendingRefundRequest.
        :type original_merchant_reference: str
        """

        self._original_merchant_reference = original_merchant_reference

    @property
    def original_reference(self):
        """Gets the original_reference of this VoidPendingRefundRequest.

        The original pspReference of the payment to modify. This reference is returned in: * authorisation response * authorisation notification  

        :return: The original_reference of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._original_reference

    @original_reference.setter
    def original_reference(self, original_reference):
        """Sets the original_reference of this VoidPendingRefundRequest.

        The original pspReference of the payment to modify. This reference is returned in: * authorisation response * authorisation notification  

        :param original_reference: The original_reference of this VoidPendingRefundRequest.
        :type original_reference: str
        """

        self._original_reference = original_reference

    @property
    def reference(self):
        """Gets the reference of this VoidPendingRefundRequest.

        Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.

        :return: The reference of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this VoidPendingRefundRequest.

        Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.

        :param reference: The reference of this VoidPendingRefundRequest.
        :type reference: str
        """

        self._reference = reference

    @property
    def tender_reference(self):
        """Gets the tender_reference of this VoidPendingRefundRequest.

        The transaction reference provided by the PED. For point-of-sale integrations only.

        :return: The tender_reference of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._tender_reference

    @tender_reference.setter
    def tender_reference(self, tender_reference):
        """Sets the tender_reference of this VoidPendingRefundRequest.

        The transaction reference provided by the PED. For point-of-sale integrations only.

        :param tender_reference: The tender_reference of this VoidPendingRefundRequest.
        :type tender_reference: str
        """

        self._tender_reference = tender_reference

    @property
    def unique_terminal_id(self):
        """Gets the unique_terminal_id of this VoidPendingRefundRequest.

        Unique terminal ID for the PED that originally processed the request. For point-of-sale integrations only.

        :return: The unique_terminal_id of this VoidPendingRefundRequest.
        :rtype: str
        """
        return self._unique_terminal_id

    @unique_terminal_id.setter
    def unique_terminal_id(self, unique_terminal_id):
        """Sets the unique_terminal_id of this VoidPendingRefundRequest.

        Unique terminal ID for the PED that originally processed the request. For point-of-sale integrations only.

        :param unique_terminal_id: The unique_terminal_id of this VoidPendingRefundRequest.
        :type unique_terminal_id: str
        """

        self._unique_terminal_id = unique_terminal_id
