# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response_additional_data3_d_secure import ResponseAdditionalData3DSecure
from openapi_server.models.response_additional_data_billing_address import ResponseAdditionalDataBillingAddress
from openapi_server.models.response_additional_data_card import ResponseAdditionalDataCard
from openapi_server.models.response_additional_data_common import ResponseAdditionalDataCommon
from openapi_server.models.response_additional_data_domestic_error import ResponseAdditionalDataDomesticError
from openapi_server.models.response_additional_data_installments import ResponseAdditionalDataInstallments
from openapi_server.models.response_additional_data_network_tokens import ResponseAdditionalDataNetworkTokens
from openapi_server.models.response_additional_data_opi import ResponseAdditionalDataOpi
from openapi_server.models.response_additional_data_sepa import ResponseAdditionalDataSepa
from openapi_server import util


class PaymentResultAdditionalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_holder_info: str=None, cavv: str=None, cavv_algorithm: str=None, sca_exemption_requested: str=None, threeds2_card_enrolled: bool=None, billing_address_city: str=None, billing_address_country: str=None, billing_address_house_number_or_name: str=None, billing_address_postal_code: str=None, billing_address_state_or_province: str=None, billing_address_street: str=None, card_bin: str=None, card_holder_name: str=None, card_issuing_bank: str=None, card_issuing_country: str=None, card_issuing_currency: str=None, card_payment_method: str=None, card_summary: str=None, issuer_bin: str=None, acquirer_account_code: str=None, acquirer_code: str=None, acquirer_reference: str=None, alias: str=None, alias_type: str=None, auth_code: str=None, authorisation_mid: str=None, authorised_amount_currency: str=None, authorised_amount_value: str=None, avs_result: str=None, avs_result_raw: str=None, bic: str=None, co_branded_with: str=None, cvc_result: str=None, cvc_result_raw: str=None, ds_trans_id: str=None, eci: str=None, expiry_date: str=None, extra_costs_currency: str=None, extra_costs_value: str=None, fraud_check__item_nr__fraud_checkname: str=None, fraud_manual_review: str=None, fraud_result_type: str=None, funding_source: str=None, funds_availability: str=None, inferred_refusal_reason: str=None, is_card_commercial: str=None, issuer_country: str=None, liability_shift: str=None, mc_bank_net_reference_number: str=None, merchant_advice_code: str=None, merchant_reference: str=None, network_tx_reference: str=None, non_scheme_transaction_limit: str=None, non_scheme_transaction_limit_ccy: str=None, owner_name: str=None, payment_account_reference: str=None, payment_method: str=None, payment_method_variant: str=None, payout_eligible: str=None, realtime_account_updater_status: str=None, receipt_free_text: str=None, recurring_first_psp_reference: str=None, recurring_recurring_detail_reference: str=None, referred: str=None, refusal_reason_raw: str=None, request_amount: str=None, request_currency_code: str=None, shopper_interaction: str=None, shopper_reference: str=None, terminal_id: str=None, three_d_authenticated: str=None, three_d_authenticated_response: str=None, three_d_offered: str=None, three_d_offered_response: str=None, three_ds_version: str=None, visa_transaction_id: str=None, xid: str=None, domestic_refusal_reason_raw: str=None, domestic_shopper_advice: str=None, installment_payment_data_installment_type: str=None, installment_payment_data_option_item_nr_annual_percentage_rate: str=None, installment_payment_data_option_item_nr_first_installment_amount: str=None, installment_payment_data_option_item_nr_installment_fee: str=None, installment_payment_data_option_item_nr_interest_rate: str=None, installment_payment_data_option_item_nr_maximum_number_of_installments: str=None, installment_payment_data_option_item_nr_minimum_number_of_installments: str=None, installment_payment_data_option_item_nr_number_of_installments: str=None, installment_payment_data_option_item_nr_subsequent_installment_amount: str=None, installment_payment_data_option_item_nr_total_amount_due: str=None, installment_payment_data_payment_options: str=None, installments_value: str=None, network_token_available: str=None, network_token_bin: str=None, network_token_token_summary: str=None, opi_trans_token: str=None, sepadirectdebit_date_of_signature: str=None, sepadirectdebit_mandate_id: str=None, sepadirectdebit_sequence_type: str=None):
        """PaymentResultAdditionalData - a model defined in OpenAPI

        :param card_holder_info: The card_holder_info of this PaymentResultAdditionalData.
        :param cavv: The cavv of this PaymentResultAdditionalData.
        :param cavv_algorithm: The cavv_algorithm of this PaymentResultAdditionalData.
        :param sca_exemption_requested: The sca_exemption_requested of this PaymentResultAdditionalData.
        :param threeds2_card_enrolled: The threeds2_card_enrolled of this PaymentResultAdditionalData.
        :param billing_address_city: The billing_address_city of this PaymentResultAdditionalData.
        :param billing_address_country: The billing_address_country of this PaymentResultAdditionalData.
        :param billing_address_house_number_or_name: The billing_address_house_number_or_name of this PaymentResultAdditionalData.
        :param billing_address_postal_code: The billing_address_postal_code of this PaymentResultAdditionalData.
        :param billing_address_state_or_province: The billing_address_state_or_province of this PaymentResultAdditionalData.
        :param billing_address_street: The billing_address_street of this PaymentResultAdditionalData.
        :param card_bin: The card_bin of this PaymentResultAdditionalData.
        :param card_holder_name: The card_holder_name of this PaymentResultAdditionalData.
        :param card_issuing_bank: The card_issuing_bank of this PaymentResultAdditionalData.
        :param card_issuing_country: The card_issuing_country of this PaymentResultAdditionalData.
        :param card_issuing_currency: The card_issuing_currency of this PaymentResultAdditionalData.
        :param card_payment_method: The card_payment_method of this PaymentResultAdditionalData.
        :param card_summary: The card_summary of this PaymentResultAdditionalData.
        :param issuer_bin: The issuer_bin of this PaymentResultAdditionalData.
        :param acquirer_account_code: The acquirer_account_code of this PaymentResultAdditionalData.
        :param acquirer_code: The acquirer_code of this PaymentResultAdditionalData.
        :param acquirer_reference: The acquirer_reference of this PaymentResultAdditionalData.
        :param alias: The alias of this PaymentResultAdditionalData.
        :param alias_type: The alias_type of this PaymentResultAdditionalData.
        :param auth_code: The auth_code of this PaymentResultAdditionalData.
        :param authorisation_mid: The authorisation_mid of this PaymentResultAdditionalData.
        :param authorised_amount_currency: The authorised_amount_currency of this PaymentResultAdditionalData.
        :param authorised_amount_value: The authorised_amount_value of this PaymentResultAdditionalData.
        :param avs_result: The avs_result of this PaymentResultAdditionalData.
        :param avs_result_raw: The avs_result_raw of this PaymentResultAdditionalData.
        :param bic: The bic of this PaymentResultAdditionalData.
        :param co_branded_with: The co_branded_with of this PaymentResultAdditionalData.
        :param cvc_result: The cvc_result of this PaymentResultAdditionalData.
        :param cvc_result_raw: The cvc_result_raw of this PaymentResultAdditionalData.
        :param ds_trans_id: The ds_trans_id of this PaymentResultAdditionalData.
        :param eci: The eci of this PaymentResultAdditionalData.
        :param expiry_date: The expiry_date of this PaymentResultAdditionalData.
        :param extra_costs_currency: The extra_costs_currency of this PaymentResultAdditionalData.
        :param extra_costs_value: The extra_costs_value of this PaymentResultAdditionalData.
        :param fraud_check__item_nr__fraud_checkname: The fraud_check__item_nr__fraud_checkname of this PaymentResultAdditionalData.
        :param fraud_manual_review: The fraud_manual_review of this PaymentResultAdditionalData.
        :param fraud_result_type: The fraud_result_type of this PaymentResultAdditionalData.
        :param funding_source: The funding_source of this PaymentResultAdditionalData.
        :param funds_availability: The funds_availability of this PaymentResultAdditionalData.
        :param inferred_refusal_reason: The inferred_refusal_reason of this PaymentResultAdditionalData.
        :param is_card_commercial: The is_card_commercial of this PaymentResultAdditionalData.
        :param issuer_country: The issuer_country of this PaymentResultAdditionalData.
        :param liability_shift: The liability_shift of this PaymentResultAdditionalData.
        :param mc_bank_net_reference_number: The mc_bank_net_reference_number of this PaymentResultAdditionalData.
        :param merchant_advice_code: The merchant_advice_code of this PaymentResultAdditionalData.
        :param merchant_reference: The merchant_reference of this PaymentResultAdditionalData.
        :param network_tx_reference: The network_tx_reference of this PaymentResultAdditionalData.
        :param non_scheme_transaction_limit: The non_scheme_transaction_limit of this PaymentResultAdditionalData.
        :param non_scheme_transaction_limit_ccy: The non_scheme_transaction_limit_ccy of this PaymentResultAdditionalData.
        :param owner_name: The owner_name of this PaymentResultAdditionalData.
        :param payment_account_reference: The payment_account_reference of this PaymentResultAdditionalData.
        :param payment_method: The payment_method of this PaymentResultAdditionalData.
        :param payment_method_variant: The payment_method_variant of this PaymentResultAdditionalData.
        :param payout_eligible: The payout_eligible of this PaymentResultAdditionalData.
        :param realtime_account_updater_status: The realtime_account_updater_status of this PaymentResultAdditionalData.
        :param receipt_free_text: The receipt_free_text of this PaymentResultAdditionalData.
        :param recurring_first_psp_reference: The recurring_first_psp_reference of this PaymentResultAdditionalData.
        :param recurring_recurring_detail_reference: The recurring_recurring_detail_reference of this PaymentResultAdditionalData.
        :param referred: The referred of this PaymentResultAdditionalData.
        :param refusal_reason_raw: The refusal_reason_raw of this PaymentResultAdditionalData.
        :param request_amount: The request_amount of this PaymentResultAdditionalData.
        :param request_currency_code: The request_currency_code of this PaymentResultAdditionalData.
        :param shopper_interaction: The shopper_interaction of this PaymentResultAdditionalData.
        :param shopper_reference: The shopper_reference of this PaymentResultAdditionalData.
        :param terminal_id: The terminal_id of this PaymentResultAdditionalData.
        :param three_d_authenticated: The three_d_authenticated of this PaymentResultAdditionalData.
        :param three_d_authenticated_response: The three_d_authenticated_response of this PaymentResultAdditionalData.
        :param three_d_offered: The three_d_offered of this PaymentResultAdditionalData.
        :param three_d_offered_response: The three_d_offered_response of this PaymentResultAdditionalData.
        :param three_ds_version: The three_ds_version of this PaymentResultAdditionalData.
        :param visa_transaction_id: The visa_transaction_id of this PaymentResultAdditionalData.
        :param xid: The xid of this PaymentResultAdditionalData.
        :param domestic_refusal_reason_raw: The domestic_refusal_reason_raw of this PaymentResultAdditionalData.
        :param domestic_shopper_advice: The domestic_shopper_advice of this PaymentResultAdditionalData.
        :param installment_payment_data_installment_type: The installment_payment_data_installment_type of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_annual_percentage_rate: The installment_payment_data_option_item_nr_annual_percentage_rate of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_first_installment_amount: The installment_payment_data_option_item_nr_first_installment_amount of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_installment_fee: The installment_payment_data_option_item_nr_installment_fee of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_interest_rate: The installment_payment_data_option_item_nr_interest_rate of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_maximum_number_of_installments: The installment_payment_data_option_item_nr_maximum_number_of_installments of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_minimum_number_of_installments: The installment_payment_data_option_item_nr_minimum_number_of_installments of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_number_of_installments: The installment_payment_data_option_item_nr_number_of_installments of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_subsequent_installment_amount: The installment_payment_data_option_item_nr_subsequent_installment_amount of this PaymentResultAdditionalData.
        :param installment_payment_data_option_item_nr_total_amount_due: The installment_payment_data_option_item_nr_total_amount_due of this PaymentResultAdditionalData.
        :param installment_payment_data_payment_options: The installment_payment_data_payment_options of this PaymentResultAdditionalData.
        :param installments_value: The installments_value of this PaymentResultAdditionalData.
        :param network_token_available: The network_token_available of this PaymentResultAdditionalData.
        :param network_token_bin: The network_token_bin of this PaymentResultAdditionalData.
        :param network_token_token_summary: The network_token_token_summary of this PaymentResultAdditionalData.
        :param opi_trans_token: The opi_trans_token of this PaymentResultAdditionalData.
        :param sepadirectdebit_date_of_signature: The sepadirectdebit_date_of_signature of this PaymentResultAdditionalData.
        :param sepadirectdebit_mandate_id: The sepadirectdebit_mandate_id of this PaymentResultAdditionalData.
        :param sepadirectdebit_sequence_type: The sepadirectdebit_sequence_type of this PaymentResultAdditionalData.
        """
        self.openapi_types = {
            'card_holder_info': str,
            'cavv': str,
            'cavv_algorithm': str,
            'sca_exemption_requested': str,
            'threeds2_card_enrolled': bool,
            'billing_address_city': str,
            'billing_address_country': str,
            'billing_address_house_number_or_name': str,
            'billing_address_postal_code': str,
            'billing_address_state_or_province': str,
            'billing_address_street': str,
            'card_bin': str,
            'card_holder_name': str,
            'card_issuing_bank': str,
            'card_issuing_country': str,
            'card_issuing_currency': str,
            'card_payment_method': str,
            'card_summary': str,
            'issuer_bin': str,
            'acquirer_account_code': str,
            'acquirer_code': str,
            'acquirer_reference': str,
            'alias': str,
            'alias_type': str,
            'auth_code': str,
            'authorisation_mid': str,
            'authorised_amount_currency': str,
            'authorised_amount_value': str,
            'avs_result': str,
            'avs_result_raw': str,
            'bic': str,
            'co_branded_with': str,
            'cvc_result': str,
            'cvc_result_raw': str,
            'ds_trans_id': str,
            'eci': str,
            'expiry_date': str,
            'extra_costs_currency': str,
            'extra_costs_value': str,
            'fraud_check__item_nr__fraud_checkname': str,
            'fraud_manual_review': str,
            'fraud_result_type': str,
            'funding_source': str,
            'funds_availability': str,
            'inferred_refusal_reason': str,
            'is_card_commercial': str,
            'issuer_country': str,
            'liability_shift': str,
            'mc_bank_net_reference_number': str,
            'merchant_advice_code': str,
            'merchant_reference': str,
            'network_tx_reference': str,
            'non_scheme_transaction_limit': str,
            'non_scheme_transaction_limit_ccy': str,
            'owner_name': str,
            'payment_account_reference': str,
            'payment_method': str,
            'payment_method_variant': str,
            'payout_eligible': str,
            'realtime_account_updater_status': str,
            'receipt_free_text': str,
            'recurring_first_psp_reference': str,
            'recurring_recurring_detail_reference': str,
            'referred': str,
            'refusal_reason_raw': str,
            'request_amount': str,
            'request_currency_code': str,
            'shopper_interaction': str,
            'shopper_reference': str,
            'terminal_id': str,
            'three_d_authenticated': str,
            'three_d_authenticated_response': str,
            'three_d_offered': str,
            'three_d_offered_response': str,
            'three_ds_version': str,
            'visa_transaction_id': str,
            'xid': str,
            'domestic_refusal_reason_raw': str,
            'domestic_shopper_advice': str,
            'installment_payment_data_installment_type': str,
            'installment_payment_data_option_item_nr_annual_percentage_rate': str,
            'installment_payment_data_option_item_nr_first_installment_amount': str,
            'installment_payment_data_option_item_nr_installment_fee': str,
            'installment_payment_data_option_item_nr_interest_rate': str,
            'installment_payment_data_option_item_nr_maximum_number_of_installments': str,
            'installment_payment_data_option_item_nr_minimum_number_of_installments': str,
            'installment_payment_data_option_item_nr_number_of_installments': str,
            'installment_payment_data_option_item_nr_subsequent_installment_amount': str,
            'installment_payment_data_option_item_nr_total_amount_due': str,
            'installment_payment_data_payment_options': str,
            'installments_value': str,
            'network_token_available': str,
            'network_token_bin': str,
            'network_token_token_summary': str,
            'opi_trans_token': str,
            'sepadirectdebit_date_of_signature': str,
            'sepadirectdebit_mandate_id': str,
            'sepadirectdebit_sequence_type': str
        }

        self.attribute_map = {
            'card_holder_info': 'cardHolderInfo',
            'cavv': 'cavv',
            'cavv_algorithm': 'cavvAlgorithm',
            'sca_exemption_requested': 'scaExemptionRequested',
            'threeds2_card_enrolled': 'threeds2.cardEnrolled',
            'billing_address_city': 'billingAddress.city',
            'billing_address_country': 'billingAddress.country',
            'billing_address_house_number_or_name': 'billingAddress.houseNumberOrName',
            'billing_address_postal_code': 'billingAddress.postalCode',
            'billing_address_state_or_province': 'billingAddress.stateOrProvince',
            'billing_address_street': 'billingAddress.street',
            'card_bin': 'cardBin',
            'card_holder_name': 'cardHolderName',
            'card_issuing_bank': 'cardIssuingBank',
            'card_issuing_country': 'cardIssuingCountry',
            'card_issuing_currency': 'cardIssuingCurrency',
            'card_payment_method': 'cardPaymentMethod',
            'card_summary': 'cardSummary',
            'issuer_bin': 'issuerBin',
            'acquirer_account_code': 'acquirerAccountCode',
            'acquirer_code': 'acquirerCode',
            'acquirer_reference': 'acquirerReference',
            'alias': 'alias',
            'alias_type': 'aliasType',
            'auth_code': 'authCode',
            'authorisation_mid': 'authorisationMid',
            'authorised_amount_currency': 'authorisedAmountCurrency',
            'authorised_amount_value': 'authorisedAmountValue',
            'avs_result': 'avsResult',
            'avs_result_raw': 'avsResultRaw',
            'bic': 'bic',
            'co_branded_with': 'coBrandedWith',
            'cvc_result': 'cvcResult',
            'cvc_result_raw': 'cvcResultRaw',
            'ds_trans_id': 'dsTransID',
            'eci': 'eci',
            'expiry_date': 'expiryDate',
            'extra_costs_currency': 'extraCostsCurrency',
            'extra_costs_value': 'extraCostsValue',
            'fraud_check__item_nr__fraud_checkname': 'fraudCheck-[itemNr]-[FraudCheckname]',
            'fraud_manual_review': 'fraudManualReview',
            'fraud_result_type': 'fraudResultType',
            'funding_source': 'fundingSource',
            'funds_availability': 'fundsAvailability',
            'inferred_refusal_reason': 'inferredRefusalReason',
            'is_card_commercial': 'isCardCommercial',
            'issuer_country': 'issuerCountry',
            'liability_shift': 'liabilityShift',
            'mc_bank_net_reference_number': 'mcBankNetReferenceNumber',
            'merchant_advice_code': 'merchantAdviceCode',
            'merchant_reference': 'merchantReference',
            'network_tx_reference': 'networkTxReference',
            'non_scheme_transaction_limit': 'nonScheme.transactionLimit',
            'non_scheme_transaction_limit_ccy': 'nonScheme.transactionLimitCcy',
            'owner_name': 'ownerName',
            'payment_account_reference': 'paymentAccountReference',
            'payment_method': 'paymentMethod',
            'payment_method_variant': 'paymentMethodVariant',
            'payout_eligible': 'payoutEligible',
            'realtime_account_updater_status': 'realtimeAccountUpdaterStatus',
            'receipt_free_text': 'receiptFreeText',
            'recurring_first_psp_reference': 'recurring.firstPspReference',
            'recurring_recurring_detail_reference': 'recurring.recurringDetailReference',
            'referred': 'referred',
            'refusal_reason_raw': 'refusalReasonRaw',
            'request_amount': 'requestAmount',
            'request_currency_code': 'requestCurrencyCode',
            'shopper_interaction': 'shopperInteraction',
            'shopper_reference': 'shopperReference',
            'terminal_id': 'terminalId',
            'three_d_authenticated': 'threeDAuthenticated',
            'three_d_authenticated_response': 'threeDAuthenticatedResponse',
            'three_d_offered': 'threeDOffered',
            'three_d_offered_response': 'threeDOfferedResponse',
            'three_ds_version': 'threeDSVersion',
            'visa_transaction_id': 'visaTransactionId',
            'xid': 'xid',
            'domestic_refusal_reason_raw': 'domesticRefusalReasonRaw',
            'domestic_shopper_advice': 'domesticShopperAdvice',
            'installment_payment_data_installment_type': 'installmentPaymentData.installmentType',
            'installment_payment_data_option_item_nr_annual_percentage_rate': 'installmentPaymentData.option[itemNr].annualPercentageRate',
            'installment_payment_data_option_item_nr_first_installment_amount': 'installmentPaymentData.option[itemNr].firstInstallmentAmount',
            'installment_payment_data_option_item_nr_installment_fee': 'installmentPaymentData.option[itemNr].installmentFee',
            'installment_payment_data_option_item_nr_interest_rate': 'installmentPaymentData.option[itemNr].interestRate',
            'installment_payment_data_option_item_nr_maximum_number_of_installments': 'installmentPaymentData.option[itemNr].maximumNumberOfInstallments',
            'installment_payment_data_option_item_nr_minimum_number_of_installments': 'installmentPaymentData.option[itemNr].minimumNumberOfInstallments',
            'installment_payment_data_option_item_nr_number_of_installments': 'installmentPaymentData.option[itemNr].numberOfInstallments',
            'installment_payment_data_option_item_nr_subsequent_installment_amount': 'installmentPaymentData.option[itemNr].subsequentInstallmentAmount',
            'installment_payment_data_option_item_nr_total_amount_due': 'installmentPaymentData.option[itemNr].totalAmountDue',
            'installment_payment_data_payment_options': 'installmentPaymentData.paymentOptions',
            'installments_value': 'installments.value',
            'network_token_available': 'networkToken.available',
            'network_token_bin': 'networkToken.bin',
            'network_token_token_summary': 'networkToken.tokenSummary',
            'opi_trans_token': 'opi.transToken',
            'sepadirectdebit_date_of_signature': 'sepadirectdebit.dateOfSignature',
            'sepadirectdebit_mandate_id': 'sepadirectdebit.mandateId',
            'sepadirectdebit_sequence_type': 'sepadirectdebit.sequenceType'
        }

        self._card_holder_info = card_holder_info
        self._cavv = cavv
        self._cavv_algorithm = cavv_algorithm
        self._sca_exemption_requested = sca_exemption_requested
        self._threeds2_card_enrolled = threeds2_card_enrolled
        self._billing_address_city = billing_address_city
        self._billing_address_country = billing_address_country
        self._billing_address_house_number_or_name = billing_address_house_number_or_name
        self._billing_address_postal_code = billing_address_postal_code
        self._billing_address_state_or_province = billing_address_state_or_province
        self._billing_address_street = billing_address_street
        self._card_bin = card_bin
        self._card_holder_name = card_holder_name
        self._card_issuing_bank = card_issuing_bank
        self._card_issuing_country = card_issuing_country
        self._card_issuing_currency = card_issuing_currency
        self._card_payment_method = card_payment_method
        self._card_summary = card_summary
        self._issuer_bin = issuer_bin
        self._acquirer_account_code = acquirer_account_code
        self._acquirer_code = acquirer_code
        self._acquirer_reference = acquirer_reference
        self._alias = alias
        self._alias_type = alias_type
        self._auth_code = auth_code
        self._authorisation_mid = authorisation_mid
        self._authorised_amount_currency = authorised_amount_currency
        self._authorised_amount_value = authorised_amount_value
        self._avs_result = avs_result
        self._avs_result_raw = avs_result_raw
        self._bic = bic
        self._co_branded_with = co_branded_with
        self._cvc_result = cvc_result
        self._cvc_result_raw = cvc_result_raw
        self._ds_trans_id = ds_trans_id
        self._eci = eci
        self._expiry_date = expiry_date
        self._extra_costs_currency = extra_costs_currency
        self._extra_costs_value = extra_costs_value
        self._fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname
        self._fraud_manual_review = fraud_manual_review
        self._fraud_result_type = fraud_result_type
        self._funding_source = funding_source
        self._funds_availability = funds_availability
        self._inferred_refusal_reason = inferred_refusal_reason
        self._is_card_commercial = is_card_commercial
        self._issuer_country = issuer_country
        self._liability_shift = liability_shift
        self._mc_bank_net_reference_number = mc_bank_net_reference_number
        self._merchant_advice_code = merchant_advice_code
        self._merchant_reference = merchant_reference
        self._network_tx_reference = network_tx_reference
        self._non_scheme_transaction_limit = non_scheme_transaction_limit
        self._non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy
        self._owner_name = owner_name
        self._payment_account_reference = payment_account_reference
        self._payment_method = payment_method
        self._payment_method_variant = payment_method_variant
        self._payout_eligible = payout_eligible
        self._realtime_account_updater_status = realtime_account_updater_status
        self._receipt_free_text = receipt_free_text
        self._recurring_first_psp_reference = recurring_first_psp_reference
        self._recurring_recurring_detail_reference = recurring_recurring_detail_reference
        self._referred = referred
        self._refusal_reason_raw = refusal_reason_raw
        self._request_amount = request_amount
        self._request_currency_code = request_currency_code
        self._shopper_interaction = shopper_interaction
        self._shopper_reference = shopper_reference
        self._terminal_id = terminal_id
        self._three_d_authenticated = three_d_authenticated
        self._three_d_authenticated_response = three_d_authenticated_response
        self._three_d_offered = three_d_offered
        self._three_d_offered_response = three_d_offered_response
        self._three_ds_version = three_ds_version
        self._visa_transaction_id = visa_transaction_id
        self._xid = xid
        self._domestic_refusal_reason_raw = domestic_refusal_reason_raw
        self._domestic_shopper_advice = domestic_shopper_advice
        self._installment_payment_data_installment_type = installment_payment_data_installment_type
        self._installment_payment_data_option_item_nr_annual_percentage_rate = installment_payment_data_option_item_nr_annual_percentage_rate
        self._installment_payment_data_option_item_nr_first_installment_amount = installment_payment_data_option_item_nr_first_installment_amount
        self._installment_payment_data_option_item_nr_installment_fee = installment_payment_data_option_item_nr_installment_fee
        self._installment_payment_data_option_item_nr_interest_rate = installment_payment_data_option_item_nr_interest_rate
        self._installment_payment_data_option_item_nr_maximum_number_of_installments = installment_payment_data_option_item_nr_maximum_number_of_installments
        self._installment_payment_data_option_item_nr_minimum_number_of_installments = installment_payment_data_option_item_nr_minimum_number_of_installments
        self._installment_payment_data_option_item_nr_number_of_installments = installment_payment_data_option_item_nr_number_of_installments
        self._installment_payment_data_option_item_nr_subsequent_installment_amount = installment_payment_data_option_item_nr_subsequent_installment_amount
        self._installment_payment_data_option_item_nr_total_amount_due = installment_payment_data_option_item_nr_total_amount_due
        self._installment_payment_data_payment_options = installment_payment_data_payment_options
        self._installments_value = installments_value
        self._network_token_available = network_token_available
        self._network_token_bin = network_token_bin
        self._network_token_token_summary = network_token_token_summary
        self._opi_trans_token = opi_trans_token
        self._sepadirectdebit_date_of_signature = sepadirectdebit_date_of_signature
        self._sepadirectdebit_mandate_id = sepadirectdebit_mandate_id
        self._sepadirectdebit_sequence_type = sepadirectdebit_sequence_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResultAdditionalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResult_additionalData of this PaymentResultAdditionalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this PaymentResultAdditionalData.

        Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. 

        :return: The card_holder_info of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this PaymentResultAdditionalData.

        Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. 

        :param card_holder_info: The card_holder_info of this PaymentResultAdditionalData.
        :type card_holder_info: str
        """

        self._card_holder_info = card_holder_info

    @property
    def cavv(self):
        """Gets the cavv of this PaymentResultAdditionalData.

        The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.

        :return: The cavv of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this PaymentResultAdditionalData.

        The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.

        :param cavv: The cavv of this PaymentResultAdditionalData.
        :type cavv: str
        """

        self._cavv = cavv

    @property
    def cavv_algorithm(self):
        """Gets the cavv_algorithm of this PaymentResultAdditionalData.

        The CAVV algorithm used.

        :return: The cavv_algorithm of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._cavv_algorithm

    @cavv_algorithm.setter
    def cavv_algorithm(self, cavv_algorithm):
        """Sets the cavv_algorithm of this PaymentResultAdditionalData.

        The CAVV algorithm used.

        :param cavv_algorithm: The cavv_algorithm of this PaymentResultAdditionalData.
        :type cavv_algorithm: str
        """

        self._cavv_algorithm = cavv_algorithm

    @property
    def sca_exemption_requested(self):
        """Gets the sca_exemption_requested of this PaymentResultAdditionalData.

        Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :return: The sca_exemption_requested of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._sca_exemption_requested

    @sca_exemption_requested.setter
    def sca_exemption_requested(self, sca_exemption_requested):
        """Sets the sca_exemption_requested of this PaymentResultAdditionalData.

        Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :param sca_exemption_requested: The sca_exemption_requested of this PaymentResultAdditionalData.
        :type sca_exemption_requested: str
        """

        self._sca_exemption_requested = sca_exemption_requested

    @property
    def threeds2_card_enrolled(self):
        """Gets the threeds2_card_enrolled of this PaymentResultAdditionalData.

        Indicates whether a card is enrolled for 3D Secure 2.

        :return: The threeds2_card_enrolled of this PaymentResultAdditionalData.
        :rtype: bool
        """
        return self._threeds2_card_enrolled

    @threeds2_card_enrolled.setter
    def threeds2_card_enrolled(self, threeds2_card_enrolled):
        """Sets the threeds2_card_enrolled of this PaymentResultAdditionalData.

        Indicates whether a card is enrolled for 3D Secure 2.

        :param threeds2_card_enrolled: The threeds2_card_enrolled of this PaymentResultAdditionalData.
        :type threeds2_card_enrolled: bool
        """

        self._threeds2_card_enrolled = threeds2_card_enrolled

    @property
    def billing_address_city(self):
        """Gets the billing_address_city of this PaymentResultAdditionalData.

        The billing address city passed in the payment request.

        :return: The billing_address_city of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_city

    @billing_address_city.setter
    def billing_address_city(self, billing_address_city):
        """Sets the billing_address_city of this PaymentResultAdditionalData.

        The billing address city passed in the payment request.

        :param billing_address_city: The billing_address_city of this PaymentResultAdditionalData.
        :type billing_address_city: str
        """

        self._billing_address_city = billing_address_city

    @property
    def billing_address_country(self):
        """Gets the billing_address_country of this PaymentResultAdditionalData.

        The billing address country passed in the payment request.  Example: NL

        :return: The billing_address_country of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_country

    @billing_address_country.setter
    def billing_address_country(self, billing_address_country):
        """Sets the billing_address_country of this PaymentResultAdditionalData.

        The billing address country passed in the payment request.  Example: NL

        :param billing_address_country: The billing_address_country of this PaymentResultAdditionalData.
        :type billing_address_country: str
        """

        self._billing_address_country = billing_address_country

    @property
    def billing_address_house_number_or_name(self):
        """Gets the billing_address_house_number_or_name of this PaymentResultAdditionalData.

        The billing address house number or name passed in the payment request.

        :return: The billing_address_house_number_or_name of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_house_number_or_name

    @billing_address_house_number_or_name.setter
    def billing_address_house_number_or_name(self, billing_address_house_number_or_name):
        """Sets the billing_address_house_number_or_name of this PaymentResultAdditionalData.

        The billing address house number or name passed in the payment request.

        :param billing_address_house_number_or_name: The billing_address_house_number_or_name of this PaymentResultAdditionalData.
        :type billing_address_house_number_or_name: str
        """

        self._billing_address_house_number_or_name = billing_address_house_number_or_name

    @property
    def billing_address_postal_code(self):
        """Gets the billing_address_postal_code of this PaymentResultAdditionalData.

        The billing address postal code passed in the payment request.  Example: 1011 DJ

        :return: The billing_address_postal_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_postal_code

    @billing_address_postal_code.setter
    def billing_address_postal_code(self, billing_address_postal_code):
        """Sets the billing_address_postal_code of this PaymentResultAdditionalData.

        The billing address postal code passed in the payment request.  Example: 1011 DJ

        :param billing_address_postal_code: The billing_address_postal_code of this PaymentResultAdditionalData.
        :type billing_address_postal_code: str
        """

        self._billing_address_postal_code = billing_address_postal_code

    @property
    def billing_address_state_or_province(self):
        """Gets the billing_address_state_or_province of this PaymentResultAdditionalData.

        The billing address state or province passed in the payment request.  Example: NH

        :return: The billing_address_state_or_province of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_state_or_province

    @billing_address_state_or_province.setter
    def billing_address_state_or_province(self, billing_address_state_or_province):
        """Sets the billing_address_state_or_province of this PaymentResultAdditionalData.

        The billing address state or province passed in the payment request.  Example: NH

        :param billing_address_state_or_province: The billing_address_state_or_province of this PaymentResultAdditionalData.
        :type billing_address_state_or_province: str
        """

        self._billing_address_state_or_province = billing_address_state_or_province

    @property
    def billing_address_street(self):
        """Gets the billing_address_street of this PaymentResultAdditionalData.

        The billing address street passed in the payment request.

        :return: The billing_address_street of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._billing_address_street

    @billing_address_street.setter
    def billing_address_street(self, billing_address_street):
        """Sets the billing_address_street of this PaymentResultAdditionalData.

        The billing address street passed in the payment request.

        :param billing_address_street: The billing_address_street of this PaymentResultAdditionalData.
        :type billing_address_street: str
        """

        self._billing_address_street = billing_address_street

    @property
    def card_bin(self):
        """Gets the card_bin of this PaymentResultAdditionalData.

        The first six digits of the card number.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.  Example: 521234

        :return: The card_bin of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_bin

    @card_bin.setter
    def card_bin(self, card_bin):
        """Sets the card_bin of this PaymentResultAdditionalData.

        The first six digits of the card number.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with a six-digit BIN.  Example: 521234

        :param card_bin: The card_bin of this PaymentResultAdditionalData.
        :type card_bin: str
        """

        self._card_bin = card_bin

    @property
    def card_holder_name(self):
        """Gets the card_holder_name of this PaymentResultAdditionalData.

        The cardholder name passed in the payment request.

        :return: The card_holder_name of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_holder_name

    @card_holder_name.setter
    def card_holder_name(self, card_holder_name):
        """Sets the card_holder_name of this PaymentResultAdditionalData.

        The cardholder name passed in the payment request.

        :param card_holder_name: The card_holder_name of this PaymentResultAdditionalData.
        :type card_holder_name: str
        """

        self._card_holder_name = card_holder_name

    @property
    def card_issuing_bank(self):
        """Gets the card_issuing_bank of this PaymentResultAdditionalData.

        The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.

        :return: The card_issuing_bank of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_issuing_bank

    @card_issuing_bank.setter
    def card_issuing_bank(self, card_issuing_bank):
        """Sets the card_issuing_bank of this PaymentResultAdditionalData.

        The bank or the financial institution granting lines of credit through card association branded payment cards. This information can be included when available.

        :param card_issuing_bank: The card_issuing_bank of this PaymentResultAdditionalData.
        :type card_issuing_bank: str
        """

        self._card_issuing_bank = card_issuing_bank

    @property
    def card_issuing_country(self):
        """Gets the card_issuing_country of this PaymentResultAdditionalData.

        The country where the card was issued.  Example: US

        :return: The card_issuing_country of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_issuing_country

    @card_issuing_country.setter
    def card_issuing_country(self, card_issuing_country):
        """Sets the card_issuing_country of this PaymentResultAdditionalData.

        The country where the card was issued.  Example: US

        :param card_issuing_country: The card_issuing_country of this PaymentResultAdditionalData.
        :type card_issuing_country: str
        """

        self._card_issuing_country = card_issuing_country

    @property
    def card_issuing_currency(self):
        """Gets the card_issuing_currency of this PaymentResultAdditionalData.

        The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard.   Example: USD

        :return: The card_issuing_currency of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_issuing_currency

    @card_issuing_currency.setter
    def card_issuing_currency(self, card_issuing_currency):
        """Sets the card_issuing_currency of this PaymentResultAdditionalData.

        The currency in which the card is issued, if this information is available. Provided as the currency code or currency number from the ISO-4217 standard.   Example: USD

        :param card_issuing_currency: The card_issuing_currency of this PaymentResultAdditionalData.
        :type card_issuing_currency: str
        """

        self._card_issuing_currency = card_issuing_currency

    @property
    def card_payment_method(self):
        """Gets the card_payment_method of this PaymentResultAdditionalData.

        The card payment method used for the transaction.  Example: amex

        :return: The card_payment_method of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_payment_method

    @card_payment_method.setter
    def card_payment_method(self, card_payment_method):
        """Sets the card_payment_method of this PaymentResultAdditionalData.

        The card payment method used for the transaction.  Example: amex

        :param card_payment_method: The card_payment_method of this PaymentResultAdditionalData.
        :type card_payment_method: str
        """

        self._card_payment_method = card_payment_method

    @property
    def card_summary(self):
        """Gets the card_summary of this PaymentResultAdditionalData.

        The last four digits of a card number.  > Returned only in case of a card payment.

        :return: The card_summary of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._card_summary

    @card_summary.setter
    def card_summary(self, card_summary):
        """Sets the card_summary of this PaymentResultAdditionalData.

        The last four digits of a card number.  > Returned only in case of a card payment.

        :param card_summary: The card_summary of this PaymentResultAdditionalData.
        :type card_summary: str
        """

        self._card_summary = card_summary

    @property
    def issuer_bin(self):
        """Gets the issuer_bin of this PaymentResultAdditionalData.

        The first eight digits of the card number. Only returned if the card number is 16 digits or more.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.  Example: 52123423

        :return: The issuer_bin of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._issuer_bin

    @issuer_bin.setter
    def issuer_bin(self, issuer_bin):
        """Sets the issuer_bin of this PaymentResultAdditionalData.

        The first eight digits of the card number. Only returned if the card number is 16 digits or more.  This is the [Bank Identification Number (BIN)](https://docs.adyen.com/get-started-with-adyen/payment-glossary#bank-identification-number-bin) for card numbers with an eight-digit BIN.  Example: 52123423

        :param issuer_bin: The issuer_bin of this PaymentResultAdditionalData.
        :type issuer_bin: str
        """

        self._issuer_bin = issuer_bin

    @property
    def acquirer_account_code(self):
        """Gets the acquirer_account_code of this PaymentResultAdditionalData.

        The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.

        :return: The acquirer_account_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._acquirer_account_code

    @acquirer_account_code.setter
    def acquirer_account_code(self, acquirer_account_code):
        """Sets the acquirer_account_code of this PaymentResultAdditionalData.

        The name of the Adyen acquirer account.  Example: PayPalSandbox_TestAcquirer  > Only relevant for PayPal transactions.

        :param acquirer_account_code: The acquirer_account_code of this PaymentResultAdditionalData.
        :type acquirer_account_code: str
        """

        self._acquirer_account_code = acquirer_account_code

    @property
    def acquirer_code(self):
        """Gets the acquirer_code of this PaymentResultAdditionalData.

        The name of the acquirer processing the payment request.  Example: TestPmmAcquirer

        :return: The acquirer_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._acquirer_code

    @acquirer_code.setter
    def acquirer_code(self, acquirer_code):
        """Sets the acquirer_code of this PaymentResultAdditionalData.

        The name of the acquirer processing the payment request.  Example: TestPmmAcquirer

        :param acquirer_code: The acquirer_code of this PaymentResultAdditionalData.
        :type acquirer_code: str
        """

        self._acquirer_code = acquirer_code

    @property
    def acquirer_reference(self):
        """Gets the acquirer_reference of this PaymentResultAdditionalData.

        The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9

        :return: The acquirer_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._acquirer_reference

    @acquirer_reference.setter
    def acquirer_reference(self, acquirer_reference):
        """Sets the acquirer_reference of this PaymentResultAdditionalData.

        The reference number that can be used for reconciliation in case a non-Adyen acquirer is used for settlement.  Example: 7C9N3FNBKT9

        :param acquirer_reference: The acquirer_reference of this PaymentResultAdditionalData.
        :type acquirer_reference: str
        """

        self._acquirer_reference = acquirer_reference

    @property
    def alias(self):
        """Gets the alias of this PaymentResultAdditionalData.

        The Adyen alias of the card.  Example: H167852639363479

        :return: The alias of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this PaymentResultAdditionalData.

        The Adyen alias of the card.  Example: H167852639363479

        :param alias: The alias of this PaymentResultAdditionalData.
        :type alias: str
        """

        self._alias = alias

    @property
    def alias_type(self):
        """Gets the alias_type of this PaymentResultAdditionalData.

        The type of the card alias.  Example: Default

        :return: The alias_type of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._alias_type

    @alias_type.setter
    def alias_type(self, alias_type):
        """Sets the alias_type of this PaymentResultAdditionalData.

        The type of the card alias.  Example: Default

        :param alias_type: The alias_type of this PaymentResultAdditionalData.
        :type alias_type: str
        """

        self._alias_type = alias_type

    @property
    def auth_code(self):
        """Gets the auth_code of this PaymentResultAdditionalData.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747

        :return: The auth_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this PaymentResultAdditionalData.

        Authorisation code: * When the payment is authorised successfully, this field holds the authorisation code for the payment. * When the payment is not authorised, this field is empty.  Example: 58747

        :param auth_code: The auth_code of this PaymentResultAdditionalData.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def authorisation_mid(self):
        """Gets the authorisation_mid of this PaymentResultAdditionalData.

        Merchant ID known by the acquirer.

        :return: The authorisation_mid of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._authorisation_mid

    @authorisation_mid.setter
    def authorisation_mid(self, authorisation_mid):
        """Sets the authorisation_mid of this PaymentResultAdditionalData.

        Merchant ID known by the acquirer.

        :param authorisation_mid: The authorisation_mid of this PaymentResultAdditionalData.
        :type authorisation_mid: str
        """

        self._authorisation_mid = authorisation_mid

    @property
    def authorised_amount_currency(self):
        """Gets the authorised_amount_currency of this PaymentResultAdditionalData.

        The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :return: The authorised_amount_currency of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._authorised_amount_currency

    @authorised_amount_currency.setter
    def authorised_amount_currency(self, authorised_amount_currency):
        """Sets the authorised_amount_currency of this PaymentResultAdditionalData.

        The currency of the authorised amount, as a three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :param authorised_amount_currency: The authorised_amount_currency of this PaymentResultAdditionalData.
        :type authorised_amount_currency: str
        """

        self._authorised_amount_currency = authorised_amount_currency

    @property
    def authorised_amount_value(self):
        """Gets the authorised_amount_value of this PaymentResultAdditionalData.

        Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

        :return: The authorised_amount_value of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._authorised_amount_value

    @authorised_amount_value.setter
    def authorised_amount_value(self, authorised_amount_value):
        """Sets the authorised_amount_value of this PaymentResultAdditionalData.

        Value of the amount authorised.  This amount is represented in minor units according to the [following table](https://docs.adyen.com/development-resources/currency-codes).

        :param authorised_amount_value: The authorised_amount_value of this PaymentResultAdditionalData.
        :type authorised_amount_value: str
        """

        self._authorised_amount_value = authorised_amount_value

    @property
    def avs_result(self):
        """Gets the avs_result of this PaymentResultAdditionalData.

        The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).

        :return: The avs_result of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._avs_result

    @avs_result.setter
    def avs_result(self, avs_result):
        """Sets the avs_result of this PaymentResultAdditionalData.

        The AVS result code of the payment, which provides information about the outcome of the AVS check.  For possible values, see [AVS](https://docs.adyen.com/risk-management/configure-standard-risk-rules/consistency-rules#billing-address-does-not-match-cardholder-address-avs).

        :param avs_result: The avs_result of this PaymentResultAdditionalData.
        :type avs_result: str
        """

        self._avs_result = avs_result

    @property
    def avs_result_raw(self):
        """Gets the avs_result_raw of this PaymentResultAdditionalData.

        Raw AVS result received from the acquirer, where available.  Example: D

        :return: The avs_result_raw of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._avs_result_raw

    @avs_result_raw.setter
    def avs_result_raw(self, avs_result_raw):
        """Sets the avs_result_raw of this PaymentResultAdditionalData.

        Raw AVS result received from the acquirer, where available.  Example: D

        :param avs_result_raw: The avs_result_raw of this PaymentResultAdditionalData.
        :type avs_result_raw: str
        """

        self._avs_result_raw = avs_result_raw

    @property
    def bic(self):
        """Gets the bic of this PaymentResultAdditionalData.

        BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.

        :return: The bic of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this PaymentResultAdditionalData.

        BIC of a bank account.  Example: TESTNL01  > Only relevant for SEPA Direct Debit transactions.

        :param bic: The bic of this PaymentResultAdditionalData.
        :type bic: str
        """

        self._bic = bic

    @property
    def co_branded_with(self):
        """Gets the co_branded_with of this PaymentResultAdditionalData.

        Includes the co-branded card information.

        :return: The co_branded_with of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._co_branded_with

    @co_branded_with.setter
    def co_branded_with(self, co_branded_with):
        """Sets the co_branded_with of this PaymentResultAdditionalData.

        Includes the co-branded card information.

        :param co_branded_with: The co_branded_with of this PaymentResultAdditionalData.
        :type co_branded_with: str
        """

        self._co_branded_with = co_branded_with

    @property
    def cvc_result(self):
        """Gets the cvc_result of this PaymentResultAdditionalData.

        The result of CVC verification.

        :return: The cvc_result of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._cvc_result

    @cvc_result.setter
    def cvc_result(self, cvc_result):
        """Sets the cvc_result of this PaymentResultAdditionalData.

        The result of CVC verification.

        :param cvc_result: The cvc_result of this PaymentResultAdditionalData.
        :type cvc_result: str
        """

        self._cvc_result = cvc_result

    @property
    def cvc_result_raw(self):
        """Gets the cvc_result_raw of this PaymentResultAdditionalData.

        The raw result of CVC verification.

        :return: The cvc_result_raw of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._cvc_result_raw

    @cvc_result_raw.setter
    def cvc_result_raw(self, cvc_result_raw):
        """Sets the cvc_result_raw of this PaymentResultAdditionalData.

        The raw result of CVC verification.

        :param cvc_result_raw: The cvc_result_raw of this PaymentResultAdditionalData.
        :type cvc_result_raw: str
        """

        self._cvc_result_raw = cvc_result_raw

    @property
    def ds_trans_id(self):
        """Gets the ds_trans_id of this PaymentResultAdditionalData.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.

        :return: The ds_trans_id of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._ds_trans_id

    @ds_trans_id.setter
    def ds_trans_id(self, ds_trans_id):
        """Sets the ds_trans_id of this PaymentResultAdditionalData.

        Supported for 3D Secure 2. The unique transaction identifier assigned by the DS to identify a single transaction.

        :param ds_trans_id: The ds_trans_id of this PaymentResultAdditionalData.
        :type ds_trans_id: str
        """

        self._ds_trans_id = ds_trans_id

    @property
    def eci(self):
        """Gets the eci of this PaymentResultAdditionalData.

        The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02

        :return: The eci of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this PaymentResultAdditionalData.

        The Electronic Commerce Indicator returned from the schemes for the 3DS payment session.  Example: 02

        :param eci: The eci of this PaymentResultAdditionalData.
        :type eci: str
        """

        self._eci = eci

    @property
    def expiry_date(self):
        """Gets the expiry_date of this PaymentResultAdditionalData.

        The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.

        :return: The expiry_date of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this PaymentResultAdditionalData.

        The expiry date on the card.  Example: 6/2016  > Returned only in case of a card payment.

        :param expiry_date: The expiry_date of this PaymentResultAdditionalData.
        :type expiry_date: str
        """

        self._expiry_date = expiry_date

    @property
    def extra_costs_currency(self):
        """Gets the extra_costs_currency of this PaymentResultAdditionalData.

        The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR

        :return: The extra_costs_currency of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._extra_costs_currency

    @extra_costs_currency.setter
    def extra_costs_currency(self, extra_costs_currency):
        """Sets the extra_costs_currency of this PaymentResultAdditionalData.

        The currency of the extra amount charged due to additional amounts set in the skin used in the HPP payment request.  Example: EUR

        :param extra_costs_currency: The extra_costs_currency of this PaymentResultAdditionalData.
        :type extra_costs_currency: str
        """

        self._extra_costs_currency = extra_costs_currency

    @property
    def extra_costs_value(self):
        """Gets the extra_costs_value of this PaymentResultAdditionalData.

        The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.

        :return: The extra_costs_value of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._extra_costs_value

    @extra_costs_value.setter
    def extra_costs_value(self, extra_costs_value):
        """Sets the extra_costs_value of this PaymentResultAdditionalData.

        The value of the extra amount charged due to additional amounts set in the skin used in the HPP payment request. The amount is in minor units.

        :param extra_costs_value: The extra_costs_value of this PaymentResultAdditionalData.
        :type extra_costs_value: str
        """

        self._extra_costs_value = extra_costs_value

    @property
    def fraud_check__item_nr__fraud_checkname(self):
        """Gets the fraud_check__item_nr__fraud_checkname of this PaymentResultAdditionalData.

        The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.

        :return: The fraud_check__item_nr__fraud_checkname of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._fraud_check__item_nr__fraud_checkname

    @fraud_check__item_nr__fraud_checkname.setter
    def fraud_check__item_nr__fraud_checkname(self, fraud_check__item_nr__fraud_checkname):
        """Sets the fraud_check__item_nr__fraud_checkname of this PaymentResultAdditionalData.

        The fraud score due to a particular fraud check. The fraud check name is found in the key of the key-value pair.

        :param fraud_check__item_nr__fraud_checkname: The fraud_check__item_nr__fraud_checkname of this PaymentResultAdditionalData.
        :type fraud_check__item_nr__fraud_checkname: str
        """

        self._fraud_check__item_nr__fraud_checkname = fraud_check__item_nr__fraud_checkname

    @property
    def fraud_manual_review(self):
        """Gets the fraud_manual_review of this PaymentResultAdditionalData.

        Indicates if the payment is sent to manual review.

        :return: The fraud_manual_review of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._fraud_manual_review

    @fraud_manual_review.setter
    def fraud_manual_review(self, fraud_manual_review):
        """Sets the fraud_manual_review of this PaymentResultAdditionalData.

        Indicates if the payment is sent to manual review.

        :param fraud_manual_review: The fraud_manual_review of this PaymentResultAdditionalData.
        :type fraud_manual_review: str
        """

        self._fraud_manual_review = fraud_manual_review

    @property
    def fraud_result_type(self):
        """Gets the fraud_result_type of this PaymentResultAdditionalData.

        The fraud result properties of the payment.

        :return: The fraud_result_type of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._fraud_result_type

    @fraud_result_type.setter
    def fraud_result_type(self, fraud_result_type):
        """Sets the fraud_result_type of this PaymentResultAdditionalData.

        The fraud result properties of the payment.

        :param fraud_result_type: The fraud_result_type of this PaymentResultAdditionalData.
        :type fraud_result_type: str
        """
        allowed_values = ["GREEN", "FRAUD"]  # noqa: E501
        if fraud_result_type not in allowed_values:
            raise ValueError(
                "Invalid value for `fraud_result_type` ({0}), must be one of {1}"
                .format(fraud_result_type, allowed_values)
            )

        self._fraud_result_type = fraud_result_type

    @property
    def funding_source(self):
        """Gets the funding_source of this PaymentResultAdditionalData.

        Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.

        :return: The funding_source of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this PaymentResultAdditionalData.

        Information regarding the funding type of the card. The possible return values are: * CHARGE * CREDIT * DEBIT * PREPAID * PREPAID_RELOADABLE  * PREPAID_NONRELOADABLE * DEFFERED_DEBIT  > This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.  For receiving this field in the notification, enable **Include Funding Source** in **Notifications** > **Additional settings**.

        :param funding_source: The funding_source of this PaymentResultAdditionalData.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def funds_availability(self):
        """Gets the funds_availability of this PaymentResultAdditionalData.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".

        :return: The funds_availability of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._funds_availability

    @funds_availability.setter
    def funds_availability(self, funds_availability):
        """Sets the funds_availability of this PaymentResultAdditionalData.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise)  > Returned when you verify a card BIN or estimate costs, and only if payoutEligible is \"Y\" or \"D\".

        :param funds_availability: The funds_availability of this PaymentResultAdditionalData.
        :type funds_availability: str
        """

        self._funds_availability = funds_availability

    @property
    def inferred_refusal_reason(self):
        """Gets the inferred_refusal_reason of this PaymentResultAdditionalData.

        Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card

        :return: The inferred_refusal_reason of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._inferred_refusal_reason

    @inferred_refusal_reason.setter
    def inferred_refusal_reason(self, inferred_refusal_reason):
        """Sets the inferred_refusal_reason of this PaymentResultAdditionalData.

        Provides the more granular indication of why a transaction was refused. When a transaction fails with either \"Refused\", \"Restricted Card\", \"Transaction Not Permitted\", \"Not supported\" or \"DeclinedNon Generic\" refusalReason from the issuer, Adyen cross references its PSP-wide data for extra insight into the refusal reason. If an inferred refusal reason is available, the `inferredRefusalReason`, field is populated and the `refusalReason`, is set to \"Not Supported\".  Possible values:  * 3D Secure Mandated * Closed Account * ContAuth Not Supported * CVC Mandated * Ecommerce Not Allowed * Crossborder Not Supported * Card Updated  * Low Authrate Bin * Non-reloadable prepaid card

        :param inferred_refusal_reason: The inferred_refusal_reason of this PaymentResultAdditionalData.
        :type inferred_refusal_reason: str
        """

        self._inferred_refusal_reason = inferred_refusal_reason

    @property
    def is_card_commercial(self):
        """Gets the is_card_commercial of this PaymentResultAdditionalData.

        Indicates if the card is used for business purposes only.

        :return: The is_card_commercial of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._is_card_commercial

    @is_card_commercial.setter
    def is_card_commercial(self, is_card_commercial):
        """Sets the is_card_commercial of this PaymentResultAdditionalData.

        Indicates if the card is used for business purposes only.

        :param is_card_commercial: The is_card_commercial of this PaymentResultAdditionalData.
        :type is_card_commercial: str
        """

        self._is_card_commercial = is_card_commercial

    @property
    def issuer_country(self):
        """Gets the issuer_country of this PaymentResultAdditionalData.

        The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP

        :return: The issuer_country of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this PaymentResultAdditionalData.

        The issuing country of the card based on the BIN list that Adyen maintains.  Example: JP

        :param issuer_country: The issuer_country of this PaymentResultAdditionalData.
        :type issuer_country: str
        """

        self._issuer_country = issuer_country

    @property
    def liability_shift(self):
        """Gets the liability_shift of this PaymentResultAdditionalData.

        A Boolean value indicating whether a liability shift was offered for this payment.

        :return: The liability_shift of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._liability_shift

    @liability_shift.setter
    def liability_shift(self, liability_shift):
        """Sets the liability_shift of this PaymentResultAdditionalData.

        A Boolean value indicating whether a liability shift was offered for this payment.

        :param liability_shift: The liability_shift of this PaymentResultAdditionalData.
        :type liability_shift: str
        """

        self._liability_shift = liability_shift

    @property
    def mc_bank_net_reference_number(self):
        """Gets the mc_bank_net_reference_number of this PaymentResultAdditionalData.

        The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.

        :return: The mc_bank_net_reference_number of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._mc_bank_net_reference_number

    @mc_bank_net_reference_number.setter
    def mc_bank_net_reference_number(self, mc_bank_net_reference_number):
        """Sets the mc_bank_net_reference_number of this PaymentResultAdditionalData.

        The `mcBankNetReferenceNumber`, is a minimum of six characters and a maximum of nine characters long.  > Contact Support Team to enable this field.

        :param mc_bank_net_reference_number: The mc_bank_net_reference_number of this PaymentResultAdditionalData.
        :type mc_bank_net_reference_number: str
        """

        self._mc_bank_net_reference_number = mc_bank_net_reference_number

    @property
    def merchant_advice_code(self):
        """Gets the merchant_advice_code of this PaymentResultAdditionalData.

        The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).

        :return: The merchant_advice_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._merchant_advice_code

    @merchant_advice_code.setter
    def merchant_advice_code(self, merchant_advice_code):
        """Sets the merchant_advice_code of this PaymentResultAdditionalData.

        The Merchant Advice Code (MAC) can be returned by Mastercard issuers for refused payments. If present, the MAC contains information about why the payment failed, and whether it can be retried.  For more information see [Mastercard Merchant Advice Codes](https://docs.adyen.com/development-resources/raw-acquirer-responses#mastercard-merchant-advice-codes).

        :param merchant_advice_code: The merchant_advice_code of this PaymentResultAdditionalData.
        :type merchant_advice_code: str
        """

        self._merchant_advice_code = merchant_advice_code

    @property
    def merchant_reference(self):
        """Gets the merchant_reference of this PaymentResultAdditionalData.

        The reference provided for the transaction.

        :return: The merchant_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._merchant_reference

    @merchant_reference.setter
    def merchant_reference(self, merchant_reference):
        """Sets the merchant_reference of this PaymentResultAdditionalData.

        The reference provided for the transaction.

        :param merchant_reference: The merchant_reference of this PaymentResultAdditionalData.
        :type merchant_reference: str
        """

        self._merchant_reference = merchant_reference

    @property
    def network_tx_reference(self):
        """Gets the network_tx_reference of this PaymentResultAdditionalData.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :return: The network_tx_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._network_tx_reference

    @network_tx_reference.setter
    def network_tx_reference(self, network_tx_reference):
        """Sets the network_tx_reference of this PaymentResultAdditionalData.

        Returned in the response if you are not tokenizing with Adyen and are using the Merchant-initiated transactions (MIT) framework from Mastercard or Visa.  This contains either the Mastercard Trace ID or the Visa Transaction ID.

        :param network_tx_reference: The network_tx_reference of this PaymentResultAdditionalData.
        :type network_tx_reference: str
        """

        self._network_tx_reference = network_tx_reference

    @property
    def non_scheme_transaction_limit(self):
        """Gets the non_scheme_transaction_limit of this PaymentResultAdditionalData.

        The maximum spendable value for a single transaction. Applicable to some gift cards.

        :return: The non_scheme_transaction_limit of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._non_scheme_transaction_limit

    @non_scheme_transaction_limit.setter
    def non_scheme_transaction_limit(self, non_scheme_transaction_limit):
        """Sets the non_scheme_transaction_limit of this PaymentResultAdditionalData.

        The maximum spendable value for a single transaction. Applicable to some gift cards.

        :param non_scheme_transaction_limit: The non_scheme_transaction_limit of this PaymentResultAdditionalData.
        :type non_scheme_transaction_limit: str
        """

        self._non_scheme_transaction_limit = non_scheme_transaction_limit

    @property
    def non_scheme_transaction_limit_ccy(self):
        """Gets the non_scheme_transaction_limit_ccy of this PaymentResultAdditionalData.

        The currency of the transaction limit.

        :return: The non_scheme_transaction_limit_ccy of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._non_scheme_transaction_limit_ccy

    @non_scheme_transaction_limit_ccy.setter
    def non_scheme_transaction_limit_ccy(self, non_scheme_transaction_limit_ccy):
        """Sets the non_scheme_transaction_limit_ccy of this PaymentResultAdditionalData.

        The currency of the transaction limit.

        :param non_scheme_transaction_limit_ccy: The non_scheme_transaction_limit_ccy of this PaymentResultAdditionalData.
        :type non_scheme_transaction_limit_ccy: str
        """

        self._non_scheme_transaction_limit_ccy = non_scheme_transaction_limit_ccy

    @property
    def owner_name(self):
        """Gets the owner_name of this PaymentResultAdditionalData.

        The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.

        :return: The owner_name of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this PaymentResultAdditionalData.

        The owner name of a bank account.  Only relevant for SEPA Direct Debit transactions.

        :param owner_name: The owner_name of this PaymentResultAdditionalData.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def payment_account_reference(self):
        """Gets the payment_account_reference of this PaymentResultAdditionalData.

        The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.

        :return: The payment_account_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._payment_account_reference

    @payment_account_reference.setter
    def payment_account_reference(self, payment_account_reference):
        """Sets the payment_account_reference of this PaymentResultAdditionalData.

        The Payment Account Reference (PAR) value links a network token with the underlying primary account number (PAN). The PAR value consists of 29 uppercase alphanumeric characters.

        :param payment_account_reference: The payment_account_reference of this PaymentResultAdditionalData.
        :type payment_account_reference: str
        """

        self._payment_account_reference = payment_account_reference

    @property
    def payment_method(self):
        """Gets the payment_method of this PaymentResultAdditionalData.

        The payment method used in the transaction.

        :return: The payment_method of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this PaymentResultAdditionalData.

        The payment method used in the transaction.

        :param payment_method: The payment_method of this PaymentResultAdditionalData.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payment_method_variant(self):
        """Gets the payment_method_variant of this PaymentResultAdditionalData.

        The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro

        :return: The payment_method_variant of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._payment_method_variant

    @payment_method_variant.setter
    def payment_method_variant(self, payment_method_variant):
        """Sets the payment_method_variant of this PaymentResultAdditionalData.

        The Adyen sub-variant of the payment method used for the payment request.  For more information, refer to [PaymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant).  Example: mcpro

        :param payment_method_variant: The payment_method_variant of this PaymentResultAdditionalData.
        :type payment_method_variant: str
        """

        self._payment_method_variant = payment_method_variant

    @property
    def payout_eligible(self):
        """Gets the payout_eligible of this PaymentResultAdditionalData.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)

        :return: The payout_eligible of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._payout_eligible

    @payout_eligible.setter
    def payout_eligible(self, payout_eligible):
        """Sets the payout_eligible of this PaymentResultAdditionalData.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border)  * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown)

        :param payout_eligible: The payout_eligible of this PaymentResultAdditionalData.
        :type payout_eligible: str
        """

        self._payout_eligible = payout_eligible

    @property
    def realtime_account_updater_status(self):
        """Gets the realtime_account_updater_status of this PaymentResultAdditionalData.

        The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder

        :return: The realtime_account_updater_status of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._realtime_account_updater_status

    @realtime_account_updater_status.setter
    def realtime_account_updater_status(self, realtime_account_updater_status):
        """Sets the realtime_account_updater_status of this PaymentResultAdditionalData.

        The response code from the Real Time Account Updater service.  Possible return values are: * CardChanged * CardExpiryChanged * CloseAccount  * ContactCardAccountHolder

        :param realtime_account_updater_status: The realtime_account_updater_status of this PaymentResultAdditionalData.
        :type realtime_account_updater_status: str
        """

        self._realtime_account_updater_status = realtime_account_updater_status

    @property
    def receipt_free_text(self):
        """Gets the receipt_free_text of this PaymentResultAdditionalData.

        Message to be displayed on the terminal.

        :return: The receipt_free_text of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._receipt_free_text

    @receipt_free_text.setter
    def receipt_free_text(self, receipt_free_text):
        """Sets the receipt_free_text of this PaymentResultAdditionalData.

        Message to be displayed on the terminal.

        :param receipt_free_text: The receipt_free_text of this PaymentResultAdditionalData.
        :type receipt_free_text: str
        """

        self._receipt_free_text = receipt_free_text

    @property
    def recurring_first_psp_reference(self):
        """Gets the recurring_first_psp_reference of this PaymentResultAdditionalData.

        The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.

        :return: The recurring_first_psp_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._recurring_first_psp_reference

    @recurring_first_psp_reference.setter
    def recurring_first_psp_reference(self, recurring_first_psp_reference):
        """Sets the recurring_first_psp_reference of this PaymentResultAdditionalData.

        The `pspReference`, of the first recurring payment that created the recurring detail.  This functionality requires additional configuration on Adyen's end. To enable it, contact the Support Team.

        :param recurring_first_psp_reference: The recurring_first_psp_reference of this PaymentResultAdditionalData.
        :type recurring_first_psp_reference: str
        """

        self._recurring_first_psp_reference = recurring_first_psp_reference

    @property
    def recurring_recurring_detail_reference(self):
        """Gets the recurring_recurring_detail_reference of this PaymentResultAdditionalData.

        The reference that uniquely identifies the recurring transaction.

        :return: The recurring_recurring_detail_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._recurring_recurring_detail_reference

    @recurring_recurring_detail_reference.setter
    def recurring_recurring_detail_reference(self, recurring_recurring_detail_reference):
        """Sets the recurring_recurring_detail_reference of this PaymentResultAdditionalData.

        The reference that uniquely identifies the recurring transaction.

        :param recurring_recurring_detail_reference: The recurring_recurring_detail_reference of this PaymentResultAdditionalData.
        :type recurring_recurring_detail_reference: str
        """

        self._recurring_recurring_detail_reference = recurring_recurring_detail_reference

    @property
    def referred(self):
        """Gets the referred of this PaymentResultAdditionalData.

        If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true

        :return: The referred of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._referred

    @referred.setter
    def referred(self, referred):
        """Sets the referred of this PaymentResultAdditionalData.

        If the payment is referred, this field is set to true.  This field is unavailable if the payment is referred and is usually not returned with ecommerce transactions.  Example: true

        :param referred: The referred of this PaymentResultAdditionalData.
        :type referred: str
        """

        self._referred = referred

    @property
    def refusal_reason_raw(self):
        """Gets the refusal_reason_raw of this PaymentResultAdditionalData.

        Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED

        :return: The refusal_reason_raw of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._refusal_reason_raw

    @refusal_reason_raw.setter
    def refusal_reason_raw(self, refusal_reason_raw):
        """Sets the refusal_reason_raw of this PaymentResultAdditionalData.

        Raw refusal reason received from the acquirer, where available.  Example: AUTHORISED

        :param refusal_reason_raw: The refusal_reason_raw of this PaymentResultAdditionalData.
        :type refusal_reason_raw: str
        """

        self._refusal_reason_raw = refusal_reason_raw

    @property
    def request_amount(self):
        """Gets the request_amount of this PaymentResultAdditionalData.

        The amount of the payment request.

        :return: The request_amount of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this PaymentResultAdditionalData.

        The amount of the payment request.

        :param request_amount: The request_amount of this PaymentResultAdditionalData.
        :type request_amount: str
        """

        self._request_amount = request_amount

    @property
    def request_currency_code(self):
        """Gets the request_currency_code of this PaymentResultAdditionalData.

        The currency of the payment request.

        :return: The request_currency_code of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._request_currency_code

    @request_currency_code.setter
    def request_currency_code(self, request_currency_code):
        """Sets the request_currency_code of this PaymentResultAdditionalData.

        The currency of the payment request.

        :param request_currency_code: The request_currency_code of this PaymentResultAdditionalData.
        :type request_currency_code: str
        """

        self._request_currency_code = request_currency_code

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this PaymentResultAdditionalData.

        The shopper interaction type of the payment request.  Example: Ecommerce

        :return: The shopper_interaction of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this PaymentResultAdditionalData.

        The shopper interaction type of the payment request.  Example: Ecommerce

        :param shopper_interaction: The shopper_interaction of this PaymentResultAdditionalData.
        :type shopper_interaction: str
        """

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PaymentResultAdditionalData.

        The shopperReference passed in the payment request.  Example: AdyenTestShopperXX

        :return: The shopper_reference of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PaymentResultAdditionalData.

        The shopperReference passed in the payment request.  Example: AdyenTestShopperXX

        :param shopper_reference: The shopper_reference of this PaymentResultAdditionalData.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def terminal_id(self):
        """Gets the terminal_id of this PaymentResultAdditionalData.

        The terminal ID used in a point-of-sale payment.  Example: 06022622

        :return: The terminal_id of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this PaymentResultAdditionalData.

        The terminal ID used in a point-of-sale payment.  Example: 06022622

        :param terminal_id: The terminal_id of this PaymentResultAdditionalData.
        :type terminal_id: str
        """

        self._terminal_id = terminal_id

    @property
    def three_d_authenticated(self):
        """Gets the three_d_authenticated of this PaymentResultAdditionalData.

        A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true

        :return: The three_d_authenticated of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._three_d_authenticated

    @three_d_authenticated.setter
    def three_d_authenticated(self, three_d_authenticated):
        """Sets the three_d_authenticated of this PaymentResultAdditionalData.

        A Boolean value indicating whether 3DS authentication was completed on this payment.  Example: true

        :param three_d_authenticated: The three_d_authenticated of this PaymentResultAdditionalData.
        :type three_d_authenticated: str
        """

        self._three_d_authenticated = three_d_authenticated

    @property
    def three_d_authenticated_response(self):
        """Gets the three_d_authenticated_response of this PaymentResultAdditionalData.

        The raw 3DS authentication result from the card issuer.  Example: N

        :return: The three_d_authenticated_response of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._three_d_authenticated_response

    @three_d_authenticated_response.setter
    def three_d_authenticated_response(self, three_d_authenticated_response):
        """Sets the three_d_authenticated_response of this PaymentResultAdditionalData.

        The raw 3DS authentication result from the card issuer.  Example: N

        :param three_d_authenticated_response: The three_d_authenticated_response of this PaymentResultAdditionalData.
        :type three_d_authenticated_response: str
        """

        self._three_d_authenticated_response = three_d_authenticated_response

    @property
    def three_d_offered(self):
        """Gets the three_d_offered of this PaymentResultAdditionalData.

        A Boolean value indicating whether 3DS was offered for this payment.  Example: true

        :return: The three_d_offered of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._three_d_offered

    @three_d_offered.setter
    def three_d_offered(self, three_d_offered):
        """Sets the three_d_offered of this PaymentResultAdditionalData.

        A Boolean value indicating whether 3DS was offered for this payment.  Example: true

        :param three_d_offered: The three_d_offered of this PaymentResultAdditionalData.
        :type three_d_offered: str
        """

        self._three_d_offered = three_d_offered

    @property
    def three_d_offered_response(self):
        """Gets the three_d_offered_response of this PaymentResultAdditionalData.

        The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y

        :return: The three_d_offered_response of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._three_d_offered_response

    @three_d_offered_response.setter
    def three_d_offered_response(self, three_d_offered_response):
        """Sets the three_d_offered_response of this PaymentResultAdditionalData.

        The raw enrollment result from the 3DS directory services of the card schemes.  Example: Y

        :param three_d_offered_response: The three_d_offered_response of this PaymentResultAdditionalData.
        :type three_d_offered_response: str
        """

        self._three_d_offered_response = three_d_offered_response

    @property
    def three_ds_version(self):
        """Gets the three_ds_version of this PaymentResultAdditionalData.

        The 3D Secure 2 version.

        :return: The three_ds_version of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._three_ds_version

    @three_ds_version.setter
    def three_ds_version(self, three_ds_version):
        """Sets the three_ds_version of this PaymentResultAdditionalData.

        The 3D Secure 2 version.

        :param three_ds_version: The three_ds_version of this PaymentResultAdditionalData.
        :type three_ds_version: str
        """

        self._three_ds_version = three_ds_version

    @property
    def visa_transaction_id(self):
        """Gets the visa_transaction_id of this PaymentResultAdditionalData.

        The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.

        :return: The visa_transaction_id of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._visa_transaction_id

    @visa_transaction_id.setter
    def visa_transaction_id(self, visa_transaction_id):
        """Sets the visa_transaction_id of this PaymentResultAdditionalData.

        The `visaTransactionId`, has a fixed length of 15 numeric characters.  > Contact Support Team to enable this field.

        :param visa_transaction_id: The visa_transaction_id of this PaymentResultAdditionalData.
        :type visa_transaction_id: str
        """

        self._visa_transaction_id = visa_transaction_id

    @property
    def xid(self):
        """Gets the xid of this PaymentResultAdditionalData.

        The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=

        :return: The xid of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this PaymentResultAdditionalData.

        The 3DS transaction ID of the 3DS session sent in notifications. The value is Base64-encoded and is returned for transactions with directoryResponse 'N' or 'Y'. If you want to submit the xid in your 3D Secure 1 request, use the `mpiData.xid`, field.  Example: ODgxNDc2MDg2MDExODk5MAAAAAA=

        :param xid: The xid of this PaymentResultAdditionalData.
        :type xid: str
        """

        self._xid = xid

    @property
    def domestic_refusal_reason_raw(self):
        """Gets the domestic_refusal_reason_raw of this PaymentResultAdditionalData.

        The reason the transaction was declined, given by the local issuer.  Currently available for merchants in Japan.

        :return: The domestic_refusal_reason_raw of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._domestic_refusal_reason_raw

    @domestic_refusal_reason_raw.setter
    def domestic_refusal_reason_raw(self, domestic_refusal_reason_raw):
        """Sets the domestic_refusal_reason_raw of this PaymentResultAdditionalData.

        The reason the transaction was declined, given by the local issuer.  Currently available for merchants in Japan.

        :param domestic_refusal_reason_raw: The domestic_refusal_reason_raw of this PaymentResultAdditionalData.
        :type domestic_refusal_reason_raw: str
        """

        self._domestic_refusal_reason_raw = domestic_refusal_reason_raw

    @property
    def domestic_shopper_advice(self):
        """Gets the domestic_shopper_advice of this PaymentResultAdditionalData.

        The action the shopper should take, in a local language.  Currently available in Japanese, for merchants in Japan.

        :return: The domestic_shopper_advice of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._domestic_shopper_advice

    @domestic_shopper_advice.setter
    def domestic_shopper_advice(self, domestic_shopper_advice):
        """Sets the domestic_shopper_advice of this PaymentResultAdditionalData.

        The action the shopper should take, in a local language.  Currently available in Japanese, for merchants in Japan.

        :param domestic_shopper_advice: The domestic_shopper_advice of this PaymentResultAdditionalData.
        :type domestic_shopper_advice: str
        """

        self._domestic_shopper_advice = domestic_shopper_advice

    @property
    def installment_payment_data_installment_type(self):
        """Gets the installment_payment_data_installment_type of this PaymentResultAdditionalData.

        Type of installment. The value of `installmentType` should be **IssuerFinanced**.

        :return: The installment_payment_data_installment_type of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_installment_type

    @installment_payment_data_installment_type.setter
    def installment_payment_data_installment_type(self, installment_payment_data_installment_type):
        """Sets the installment_payment_data_installment_type of this PaymentResultAdditionalData.

        Type of installment. The value of `installmentType` should be **IssuerFinanced**.

        :param installment_payment_data_installment_type: The installment_payment_data_installment_type of this PaymentResultAdditionalData.
        :type installment_payment_data_installment_type: str
        """

        self._installment_payment_data_installment_type = installment_payment_data_installment_type

    @property
    def installment_payment_data_option_item_nr_annual_percentage_rate(self):
        """Gets the installment_payment_data_option_item_nr_annual_percentage_rate of this PaymentResultAdditionalData.

        Annual interest rate.

        :return: The installment_payment_data_option_item_nr_annual_percentage_rate of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_annual_percentage_rate

    @installment_payment_data_option_item_nr_annual_percentage_rate.setter
    def installment_payment_data_option_item_nr_annual_percentage_rate(self, installment_payment_data_option_item_nr_annual_percentage_rate):
        """Sets the installment_payment_data_option_item_nr_annual_percentage_rate of this PaymentResultAdditionalData.

        Annual interest rate.

        :param installment_payment_data_option_item_nr_annual_percentage_rate: The installment_payment_data_option_item_nr_annual_percentage_rate of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_annual_percentage_rate: str
        """

        self._installment_payment_data_option_item_nr_annual_percentage_rate = installment_payment_data_option_item_nr_annual_percentage_rate

    @property
    def installment_payment_data_option_item_nr_first_installment_amount(self):
        """Gets the installment_payment_data_option_item_nr_first_installment_amount of this PaymentResultAdditionalData.

        First Installment Amount in minor units.

        :return: The installment_payment_data_option_item_nr_first_installment_amount of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_first_installment_amount

    @installment_payment_data_option_item_nr_first_installment_amount.setter
    def installment_payment_data_option_item_nr_first_installment_amount(self, installment_payment_data_option_item_nr_first_installment_amount):
        """Sets the installment_payment_data_option_item_nr_first_installment_amount of this PaymentResultAdditionalData.

        First Installment Amount in minor units.

        :param installment_payment_data_option_item_nr_first_installment_amount: The installment_payment_data_option_item_nr_first_installment_amount of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_first_installment_amount: str
        """

        self._installment_payment_data_option_item_nr_first_installment_amount = installment_payment_data_option_item_nr_first_installment_amount

    @property
    def installment_payment_data_option_item_nr_installment_fee(self):
        """Gets the installment_payment_data_option_item_nr_installment_fee of this PaymentResultAdditionalData.

        Installment fee amount in minor units.

        :return: The installment_payment_data_option_item_nr_installment_fee of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_installment_fee

    @installment_payment_data_option_item_nr_installment_fee.setter
    def installment_payment_data_option_item_nr_installment_fee(self, installment_payment_data_option_item_nr_installment_fee):
        """Sets the installment_payment_data_option_item_nr_installment_fee of this PaymentResultAdditionalData.

        Installment fee amount in minor units.

        :param installment_payment_data_option_item_nr_installment_fee: The installment_payment_data_option_item_nr_installment_fee of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_installment_fee: str
        """

        self._installment_payment_data_option_item_nr_installment_fee = installment_payment_data_option_item_nr_installment_fee

    @property
    def installment_payment_data_option_item_nr_interest_rate(self):
        """Gets the installment_payment_data_option_item_nr_interest_rate of this PaymentResultAdditionalData.

        Interest rate for the installment period.

        :return: The installment_payment_data_option_item_nr_interest_rate of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_interest_rate

    @installment_payment_data_option_item_nr_interest_rate.setter
    def installment_payment_data_option_item_nr_interest_rate(self, installment_payment_data_option_item_nr_interest_rate):
        """Sets the installment_payment_data_option_item_nr_interest_rate of this PaymentResultAdditionalData.

        Interest rate for the installment period.

        :param installment_payment_data_option_item_nr_interest_rate: The installment_payment_data_option_item_nr_interest_rate of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_interest_rate: str
        """

        self._installment_payment_data_option_item_nr_interest_rate = installment_payment_data_option_item_nr_interest_rate

    @property
    def installment_payment_data_option_item_nr_maximum_number_of_installments(self):
        """Gets the installment_payment_data_option_item_nr_maximum_number_of_installments of this PaymentResultAdditionalData.

        Maximum number of installments possible for this payment.

        :return: The installment_payment_data_option_item_nr_maximum_number_of_installments of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_maximum_number_of_installments

    @installment_payment_data_option_item_nr_maximum_number_of_installments.setter
    def installment_payment_data_option_item_nr_maximum_number_of_installments(self, installment_payment_data_option_item_nr_maximum_number_of_installments):
        """Sets the installment_payment_data_option_item_nr_maximum_number_of_installments of this PaymentResultAdditionalData.

        Maximum number of installments possible for this payment.

        :param installment_payment_data_option_item_nr_maximum_number_of_installments: The installment_payment_data_option_item_nr_maximum_number_of_installments of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_maximum_number_of_installments: str
        """

        self._installment_payment_data_option_item_nr_maximum_number_of_installments = installment_payment_data_option_item_nr_maximum_number_of_installments

    @property
    def installment_payment_data_option_item_nr_minimum_number_of_installments(self):
        """Gets the installment_payment_data_option_item_nr_minimum_number_of_installments of this PaymentResultAdditionalData.

        Minimum number of installments possible for this payment.

        :return: The installment_payment_data_option_item_nr_minimum_number_of_installments of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_minimum_number_of_installments

    @installment_payment_data_option_item_nr_minimum_number_of_installments.setter
    def installment_payment_data_option_item_nr_minimum_number_of_installments(self, installment_payment_data_option_item_nr_minimum_number_of_installments):
        """Sets the installment_payment_data_option_item_nr_minimum_number_of_installments of this PaymentResultAdditionalData.

        Minimum number of installments possible for this payment.

        :param installment_payment_data_option_item_nr_minimum_number_of_installments: The installment_payment_data_option_item_nr_minimum_number_of_installments of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_minimum_number_of_installments: str
        """

        self._installment_payment_data_option_item_nr_minimum_number_of_installments = installment_payment_data_option_item_nr_minimum_number_of_installments

    @property
    def installment_payment_data_option_item_nr_number_of_installments(self):
        """Gets the installment_payment_data_option_item_nr_number_of_installments of this PaymentResultAdditionalData.

        Total number of installments possible for this payment.

        :return: The installment_payment_data_option_item_nr_number_of_installments of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_number_of_installments

    @installment_payment_data_option_item_nr_number_of_installments.setter
    def installment_payment_data_option_item_nr_number_of_installments(self, installment_payment_data_option_item_nr_number_of_installments):
        """Sets the installment_payment_data_option_item_nr_number_of_installments of this PaymentResultAdditionalData.

        Total number of installments possible for this payment.

        :param installment_payment_data_option_item_nr_number_of_installments: The installment_payment_data_option_item_nr_number_of_installments of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_number_of_installments: str
        """

        self._installment_payment_data_option_item_nr_number_of_installments = installment_payment_data_option_item_nr_number_of_installments

    @property
    def installment_payment_data_option_item_nr_subsequent_installment_amount(self):
        """Gets the installment_payment_data_option_item_nr_subsequent_installment_amount of this PaymentResultAdditionalData.

        Subsequent Installment Amount in minor units.

        :return: The installment_payment_data_option_item_nr_subsequent_installment_amount of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_subsequent_installment_amount

    @installment_payment_data_option_item_nr_subsequent_installment_amount.setter
    def installment_payment_data_option_item_nr_subsequent_installment_amount(self, installment_payment_data_option_item_nr_subsequent_installment_amount):
        """Sets the installment_payment_data_option_item_nr_subsequent_installment_amount of this PaymentResultAdditionalData.

        Subsequent Installment Amount in minor units.

        :param installment_payment_data_option_item_nr_subsequent_installment_amount: The installment_payment_data_option_item_nr_subsequent_installment_amount of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_subsequent_installment_amount: str
        """

        self._installment_payment_data_option_item_nr_subsequent_installment_amount = installment_payment_data_option_item_nr_subsequent_installment_amount

    @property
    def installment_payment_data_option_item_nr_total_amount_due(self):
        """Gets the installment_payment_data_option_item_nr_total_amount_due of this PaymentResultAdditionalData.

        Total amount in minor units.

        :return: The installment_payment_data_option_item_nr_total_amount_due of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_option_item_nr_total_amount_due

    @installment_payment_data_option_item_nr_total_amount_due.setter
    def installment_payment_data_option_item_nr_total_amount_due(self, installment_payment_data_option_item_nr_total_amount_due):
        """Sets the installment_payment_data_option_item_nr_total_amount_due of this PaymentResultAdditionalData.

        Total amount in minor units.

        :param installment_payment_data_option_item_nr_total_amount_due: The installment_payment_data_option_item_nr_total_amount_due of this PaymentResultAdditionalData.
        :type installment_payment_data_option_item_nr_total_amount_due: str
        """

        self._installment_payment_data_option_item_nr_total_amount_due = installment_payment_data_option_item_nr_total_amount_due

    @property
    def installment_payment_data_payment_options(self):
        """Gets the installment_payment_data_payment_options of this PaymentResultAdditionalData.

        Possible values: * PayInInstallmentsOnly * PayInFullOnly * PayInFullOrInstallments

        :return: The installment_payment_data_payment_options of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installment_payment_data_payment_options

    @installment_payment_data_payment_options.setter
    def installment_payment_data_payment_options(self, installment_payment_data_payment_options):
        """Sets the installment_payment_data_payment_options of this PaymentResultAdditionalData.

        Possible values: * PayInInstallmentsOnly * PayInFullOnly * PayInFullOrInstallments

        :param installment_payment_data_payment_options: The installment_payment_data_payment_options of this PaymentResultAdditionalData.
        :type installment_payment_data_payment_options: str
        """

        self._installment_payment_data_payment_options = installment_payment_data_payment_options

    @property
    def installments_value(self):
        """Gets the installments_value of this PaymentResultAdditionalData.

        The number of installments that the payment amount should be charged with.  Example: 5 > Only relevant for card payments in countries that support installments.

        :return: The installments_value of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._installments_value

    @installments_value.setter
    def installments_value(self, installments_value):
        """Sets the installments_value of this PaymentResultAdditionalData.

        The number of installments that the payment amount should be charged with.  Example: 5 > Only relevant for card payments in countries that support installments.

        :param installments_value: The installments_value of this PaymentResultAdditionalData.
        :type installments_value: str
        """

        self._installments_value = installments_value

    @property
    def network_token_available(self):
        """Gets the network_token_available of this PaymentResultAdditionalData.

        Indicates whether a network token is available for the specified card.

        :return: The network_token_available of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._network_token_available

    @network_token_available.setter
    def network_token_available(self, network_token_available):
        """Sets the network_token_available of this PaymentResultAdditionalData.

        Indicates whether a network token is available for the specified card.

        :param network_token_available: The network_token_available of this PaymentResultAdditionalData.
        :type network_token_available: str
        """

        self._network_token_available = network_token_available

    @property
    def network_token_bin(self):
        """Gets the network_token_bin of this PaymentResultAdditionalData.

        The Bank Identification Number of a tokenized card, which is the first six digits of a card number.

        :return: The network_token_bin of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._network_token_bin

    @network_token_bin.setter
    def network_token_bin(self, network_token_bin):
        """Sets the network_token_bin of this PaymentResultAdditionalData.

        The Bank Identification Number of a tokenized card, which is the first six digits of a card number.

        :param network_token_bin: The network_token_bin of this PaymentResultAdditionalData.
        :type network_token_bin: str
        """

        self._network_token_bin = network_token_bin

    @property
    def network_token_token_summary(self):
        """Gets the network_token_token_summary of this PaymentResultAdditionalData.

        The last four digits of a network token.

        :return: The network_token_token_summary of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._network_token_token_summary

    @network_token_token_summary.setter
    def network_token_token_summary(self, network_token_token_summary):
        """Sets the network_token_token_summary of this PaymentResultAdditionalData.

        The last four digits of a network token.

        :param network_token_token_summary: The network_token_token_summary of this PaymentResultAdditionalData.
        :type network_token_token_summary: str
        """

        self._network_token_token_summary = network_token_token_summary

    @property
    def opi_trans_token(self):
        """Gets the opi_trans_token of this PaymentResultAdditionalData.

        Returned in the response if you included `opi.includeTransToken: true` in an ecommerce payment request. This contains an Oracle Payment Interface token that you can store in your Oracle Opera database to identify tokenized ecommerce transactions. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).

        :return: The opi_trans_token of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._opi_trans_token

    @opi_trans_token.setter
    def opi_trans_token(self, opi_trans_token):
        """Sets the opi_trans_token of this PaymentResultAdditionalData.

        Returned in the response if you included `opi.includeTransToken: true` in an ecommerce payment request. This contains an Oracle Payment Interface token that you can store in your Oracle Opera database to identify tokenized ecommerce transactions. For more information and required settings, see [Oracle Opera](https://docs.adyen.com/plugins/oracle-opera#opi-token-ecommerce).

        :param opi_trans_token: The opi_trans_token of this PaymentResultAdditionalData.
        :type opi_trans_token: str
        """

        self._opi_trans_token = opi_trans_token

    @property
    def sepadirectdebit_date_of_signature(self):
        """Gets the sepadirectdebit_date_of_signature of this PaymentResultAdditionalData.

        The transaction signature date.  Format: yyyy-MM-dd

        :return: The sepadirectdebit_date_of_signature of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._sepadirectdebit_date_of_signature

    @sepadirectdebit_date_of_signature.setter
    def sepadirectdebit_date_of_signature(self, sepadirectdebit_date_of_signature):
        """Sets the sepadirectdebit_date_of_signature of this PaymentResultAdditionalData.

        The transaction signature date.  Format: yyyy-MM-dd

        :param sepadirectdebit_date_of_signature: The sepadirectdebit_date_of_signature of this PaymentResultAdditionalData.
        :type sepadirectdebit_date_of_signature: str
        """

        self._sepadirectdebit_date_of_signature = sepadirectdebit_date_of_signature

    @property
    def sepadirectdebit_mandate_id(self):
        """Gets the sepadirectdebit_mandate_id of this PaymentResultAdditionalData.

        Its value corresponds to the pspReference value of the transaction.

        :return: The sepadirectdebit_mandate_id of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._sepadirectdebit_mandate_id

    @sepadirectdebit_mandate_id.setter
    def sepadirectdebit_mandate_id(self, sepadirectdebit_mandate_id):
        """Sets the sepadirectdebit_mandate_id of this PaymentResultAdditionalData.

        Its value corresponds to the pspReference value of the transaction.

        :param sepadirectdebit_mandate_id: The sepadirectdebit_mandate_id of this PaymentResultAdditionalData.
        :type sepadirectdebit_mandate_id: str
        """

        self._sepadirectdebit_mandate_id = sepadirectdebit_mandate_id

    @property
    def sepadirectdebit_sequence_type(self):
        """Gets the sepadirectdebit_sequence_type of this PaymentResultAdditionalData.

        This field can take one of the following values: * OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.  * First: (FRST) Initial/first collection in a series of direct debit instructions. * Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor. * Final: (FNAL) Last/final collection in a series of direct debit instructions.  Example: OOFF

        :return: The sepadirectdebit_sequence_type of this PaymentResultAdditionalData.
        :rtype: str
        """
        return self._sepadirectdebit_sequence_type

    @sepadirectdebit_sequence_type.setter
    def sepadirectdebit_sequence_type(self, sepadirectdebit_sequence_type):
        """Sets the sepadirectdebit_sequence_type of this PaymentResultAdditionalData.

        This field can take one of the following values: * OneOff: (OOFF) Direct debit instruction to initiate exactly one direct debit transaction.  * First: (FRST) Initial/first collection in a series of direct debit instructions. * Recurring: (RCUR) Direct debit instruction to carry out regular direct debit transactions initiated by the creditor. * Final: (FNAL) Last/final collection in a series of direct debit instructions.  Example: OOFF

        :param sepadirectdebit_sequence_type: The sepadirectdebit_sequence_type of this PaymentResultAdditionalData.
        :type sepadirectdebit_sequence_type: str
        """

        self._sepadirectdebit_sequence_type = sepadirectdebit_sequence_type
