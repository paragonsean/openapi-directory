/*
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v68/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DeviceRenderOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:07.700893-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DeviceRenderOptions {
  /**
   * Supported SDK interface types. Allowed values: * native * html * both
   */
  @JsonAdapter(SdkInterfaceEnum.Adapter.class)
  public enum SdkInterfaceEnum {
    NATIVE("native"),
    
    HTML("html"),
    
    BOTH("both");

    private String value;

    SdkInterfaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SdkInterfaceEnum fromValue(String value) {
      for (SdkInterfaceEnum b : SdkInterfaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SdkInterfaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SdkInterfaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SdkInterfaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SdkInterfaceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SdkInterfaceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SDK_INTERFACE = "sdkInterface";
  @SerializedName(SERIALIZED_NAME_SDK_INTERFACE)
  private SdkInterfaceEnum sdkInterface = SdkInterfaceEnum.BOTH;

  /**
   * Gets or Sets sdkUiType
   */
  @JsonAdapter(SdkUiTypeEnum.Adapter.class)
  public enum SdkUiTypeEnum {
    MULTI_SELECT("multiSelect"),
    
    OTHER_HTML("otherHtml"),
    
    OUT_OF_BAND("outOfBand"),
    
    SINGLE_SELECT("singleSelect"),
    
    TEXT("text");

    private String value;

    SdkUiTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SdkUiTypeEnum fromValue(String value) {
      for (SdkUiTypeEnum b : SdkUiTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SdkUiTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SdkUiTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SdkUiTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SdkUiTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SdkUiTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SDK_UI_TYPE = "sdkUiType";
  @SerializedName(SERIALIZED_NAME_SDK_UI_TYPE)
  private List<SdkUiTypeEnum> sdkUiType = new ArrayList<>();

  public DeviceRenderOptions() {
  }

  public DeviceRenderOptions sdkInterface(SdkInterfaceEnum sdkInterface) {
    this.sdkInterface = sdkInterface;
    return this;
  }

  /**
   * Supported SDK interface types. Allowed values: * native * html * both
   * @return sdkInterface
   */
  @javax.annotation.Nullable
  public SdkInterfaceEnum getSdkInterface() {
    return sdkInterface;
  }

  public void setSdkInterface(SdkInterfaceEnum sdkInterface) {
    this.sdkInterface = sdkInterface;
  }


  public DeviceRenderOptions sdkUiType(List<SdkUiTypeEnum> sdkUiType) {
    this.sdkUiType = sdkUiType;
    return this;
  }

  public DeviceRenderOptions addSdkUiTypeItem(SdkUiTypeEnum sdkUiTypeItem) {
    if (this.sdkUiType == null) {
      this.sdkUiType = new ArrayList<>();
    }
    this.sdkUiType.add(sdkUiTypeItem);
    return this;
  }

  /**
   * UI types supported for displaying specific challenges. Allowed values: * text * singleSelect * outOfBand * otherHtml * multiSelect
   * @return sdkUiType
   */
  @javax.annotation.Nullable
  public List<SdkUiTypeEnum> getSdkUiType() {
    return sdkUiType;
  }

  public void setSdkUiType(List<SdkUiTypeEnum> sdkUiType) {
    this.sdkUiType = sdkUiType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRenderOptions deviceRenderOptions = (DeviceRenderOptions) o;
    return Objects.equals(this.sdkInterface, deviceRenderOptions.sdkInterface) &&
        Objects.equals(this.sdkUiType, deviceRenderOptions.sdkUiType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sdkInterface, sdkUiType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRenderOptions {\n");
    sb.append("    sdkInterface: ").append(toIndentedString(sdkInterface)).append("\n");
    sb.append("    sdkUiType: ").append(toIndentedString(sdkUiType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sdkInterface");
    openapiFields.add("sdkUiType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeviceRenderOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DeviceRenderOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeviceRenderOptions is not found in the empty JSON string", DeviceRenderOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeviceRenderOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeviceRenderOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("sdkInterface") != null && !jsonObj.get("sdkInterface").isJsonNull()) && !jsonObj.get("sdkInterface").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkInterface` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sdkInterface").toString()));
      }
      // validate the optional field `sdkInterface`
      if (jsonObj.get("sdkInterface") != null && !jsonObj.get("sdkInterface").isJsonNull()) {
        SdkInterfaceEnum.validateJsonElement(jsonObj.get("sdkInterface"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sdkUiType") != null && !jsonObj.get("sdkUiType").isJsonNull() && !jsonObj.get("sdkUiType").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sdkUiType` to be an array in the JSON string but got `%s`", jsonObj.get("sdkUiType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeviceRenderOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeviceRenderOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeviceRenderOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeviceRenderOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<DeviceRenderOptions>() {
           @Override
           public void write(JsonWriter out, DeviceRenderOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeviceRenderOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeviceRenderOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeviceRenderOptions
   * @throws IOException if the JSON string is invalid with respect to DeviceRenderOptions
   */
  public static DeviceRenderOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeviceRenderOptions.class);
  }

  /**
   * Convert an instance of DeviceRenderOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

