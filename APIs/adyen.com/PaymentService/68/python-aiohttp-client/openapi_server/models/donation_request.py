# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.platform_chargeback_logic import PlatformChargebackLogic
from openapi_server import util


class DonationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, donation_account: str=None, merchant_account: str=None, modification_amount: Amount=None, original_reference: str=None, platform_chargeback_logic: PlatformChargebackLogic=None, reference: str=None):
        """DonationRequest - a model defined in OpenAPI

        :param donation_account: The donation_account of this DonationRequest.
        :param merchant_account: The merchant_account of this DonationRequest.
        :param modification_amount: The modification_amount of this DonationRequest.
        :param original_reference: The original_reference of this DonationRequest.
        :param platform_chargeback_logic: The platform_chargeback_logic of this DonationRequest.
        :param reference: The reference of this DonationRequest.
        """
        self.openapi_types = {
            'donation_account': str,
            'merchant_account': str,
            'modification_amount': Amount,
            'original_reference': str,
            'platform_chargeback_logic': PlatformChargebackLogic,
            'reference': str
        }

        self.attribute_map = {
            'donation_account': 'donationAccount',
            'merchant_account': 'merchantAccount',
            'modification_amount': 'modificationAmount',
            'original_reference': 'originalReference',
            'platform_chargeback_logic': 'platformChargebackLogic',
            'reference': 'reference'
        }

        self._donation_account = donation_account
        self._merchant_account = merchant_account
        self._modification_amount = modification_amount
        self._original_reference = original_reference
        self._platform_chargeback_logic = platform_chargeback_logic
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DonationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DonationRequest of this DonationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def donation_account(self):
        """Gets the donation_account of this DonationRequest.

        The Adyen account name of the charity.

        :return: The donation_account of this DonationRequest.
        :rtype: str
        """
        return self._donation_account

    @donation_account.setter
    def donation_account(self, donation_account):
        """Sets the donation_account of this DonationRequest.

        The Adyen account name of the charity.

        :param donation_account: The donation_account of this DonationRequest.
        :type donation_account: str
        """
        if donation_account is None:
            raise ValueError("Invalid value for `donation_account`, must not be `None`")

        self._donation_account = donation_account

    @property
    def merchant_account(self):
        """Gets the merchant_account of this DonationRequest.

        The merchant account that is used to process the payment.

        :return: The merchant_account of this DonationRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this DonationRequest.

        The merchant account that is used to process the payment.

        :param merchant_account: The merchant_account of this DonationRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def modification_amount(self):
        """Gets the modification_amount of this DonationRequest.

        The amount to be donated.The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :return: The modification_amount of this DonationRequest.
        :rtype: Amount
        """
        return self._modification_amount

    @modification_amount.setter
    def modification_amount(self, modification_amount):
        """Sets the modification_amount of this DonationRequest.

        The amount to be donated.The `currency` must match the currency used in authorisation, the `value` must be smaller than or equal to the authorised amount.

        :param modification_amount: The modification_amount of this DonationRequest.
        :type modification_amount: Amount
        """
        if modification_amount is None:
            raise ValueError("Invalid value for `modification_amount`, must not be `None`")

        self._modification_amount = modification_amount

    @property
    def original_reference(self):
        """Gets the original_reference of this DonationRequest.

        The original pspReference of the payment to modify. This reference is returned in: * authorisation response * authorisation notification  

        :return: The original_reference of this DonationRequest.
        :rtype: str
        """
        return self._original_reference

    @original_reference.setter
    def original_reference(self, original_reference):
        """Sets the original_reference of this DonationRequest.

        The original pspReference of the payment to modify. This reference is returned in: * authorisation response * authorisation notification  

        :param original_reference: The original_reference of this DonationRequest.
        :type original_reference: str
        """

        self._original_reference = original_reference

    @property
    def platform_chargeback_logic(self):
        """Gets the platform_chargeback_logic of this DonationRequest.

        Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#chargebacks-and-disputes).

        :return: The platform_chargeback_logic of this DonationRequest.
        :rtype: PlatformChargebackLogic
        """
        return self._platform_chargeback_logic

    @platform_chargeback_logic.setter
    def platform_chargeback_logic(self, platform_chargeback_logic):
        """Sets the platform_chargeback_logic of this DonationRequest.

        Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#chargebacks-and-disputes).

        :param platform_chargeback_logic: The platform_chargeback_logic of this DonationRequest.
        :type platform_chargeback_logic: PlatformChargebackLogic
        """

        self._platform_chargeback_logic = platform_chargeback_logic

    @property
    def reference(self):
        """Gets the reference of this DonationRequest.

        Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.

        :return: The reference of this DonationRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this DonationRequest.

        Your reference for the payment modification. This reference is visible in Customer Area and in reports. Maximum length: 80 characters.

        :param reference: The reference of this DonationRequest.
        :type reference: str
        """

        self._reference = reference
