# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSRequestorAuthenticationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, three_ds_req_auth_data: str=None, three_ds_req_auth_method: str=None, three_ds_req_auth_timestamp: str=None):
        """ThreeDSRequestorAuthenticationInfo - a model defined in OpenAPI

        :param three_ds_req_auth_data: The three_ds_req_auth_data of this ThreeDSRequestorAuthenticationInfo.
        :param three_ds_req_auth_method: The three_ds_req_auth_method of this ThreeDSRequestorAuthenticationInfo.
        :param three_ds_req_auth_timestamp: The three_ds_req_auth_timestamp of this ThreeDSRequestorAuthenticationInfo.
        """
        self.openapi_types = {
            'three_ds_req_auth_data': str,
            'three_ds_req_auth_method': str,
            'three_ds_req_auth_timestamp': str
        }

        self.attribute_map = {
            'three_ds_req_auth_data': 'threeDSReqAuthData',
            'three_ds_req_auth_method': 'threeDSReqAuthMethod',
            'three_ds_req_auth_timestamp': 'threeDSReqAuthTimestamp'
        }

        self._three_ds_req_auth_data = three_ds_req_auth_data
        self._three_ds_req_auth_method = three_ds_req_auth_method
        self._three_ds_req_auth_timestamp = three_ds_req_auth_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSRequestorAuthenticationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSRequestorAuthenticationInfo of this ThreeDSRequestorAuthenticationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def three_ds_req_auth_data(self):
        """Gets the three_ds_req_auth_data of this ThreeDSRequestorAuthenticationInfo.

        Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.

        :return: The three_ds_req_auth_data of this ThreeDSRequestorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_auth_data

    @three_ds_req_auth_data.setter
    def three_ds_req_auth_data(self, three_ds_req_auth_data):
        """Sets the three_ds_req_auth_data of this ThreeDSRequestorAuthenticationInfo.

        Data that documents and supports a specific authentication process. Maximum length: 2048 bytes.

        :param three_ds_req_auth_data: The three_ds_req_auth_data of this ThreeDSRequestorAuthenticationInfo.
        :type three_ds_req_auth_data: str
        """

        self._three_ds_req_auth_data = three_ds_req_auth_data

    @property
    def three_ds_req_auth_method(self):
        """Gets the three_ds_req_auth_method of this ThreeDSRequestorAuthenticationInfo.

        Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.

        :return: The three_ds_req_auth_method of this ThreeDSRequestorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_auth_method

    @three_ds_req_auth_method.setter
    def three_ds_req_auth_method(self, three_ds_req_auth_method):
        """Sets the three_ds_req_auth_method of this ThreeDSRequestorAuthenticationInfo.

        Mechanism used by the Cardholder to authenticate to the 3DS Requestor. Allowed values: * **01** — No 3DS Requestor authentication occurred (for example, cardholder “logged in” as guest). * **02** — Login to the cardholder account at the 3DS Requestor system using 3DS Requestor’s own credentials. * **03** — Login to the cardholder account at the 3DS Requestor system using federated ID. * **04** — Login to the cardholder account at the 3DS Requestor system using issuer credentials. * **05** — Login to the cardholder account at the 3DS Requestor system using third-party authentication. * **06** — Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator.

        :param three_ds_req_auth_method: The three_ds_req_auth_method of this ThreeDSRequestorAuthenticationInfo.
        :type three_ds_req_auth_method: str
        """
        allowed_values = ["01", "02", "03", "04", "05", "06"]  # noqa: E501
        if three_ds_req_auth_method not in allowed_values:
            raise ValueError(
                "Invalid value for `three_ds_req_auth_method` ({0}), must be one of {1}"
                .format(three_ds_req_auth_method, allowed_values)
            )

        self._three_ds_req_auth_method = three_ds_req_auth_method

    @property
    def three_ds_req_auth_timestamp(self):
        """Gets the three_ds_req_auth_timestamp of this ThreeDSRequestorAuthenticationInfo.

        Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM

        :return: The three_ds_req_auth_timestamp of this ThreeDSRequestorAuthenticationInfo.
        :rtype: str
        """
        return self._three_ds_req_auth_timestamp

    @three_ds_req_auth_timestamp.setter
    def three_ds_req_auth_timestamp(self, three_ds_req_auth_timestamp):
        """Sets the three_ds_req_auth_timestamp of this ThreeDSRequestorAuthenticationInfo.

        Date and time in UTC of the cardholder authentication. Format: YYYYMMDDHHMM

        :param three_ds_req_auth_timestamp: The three_ds_req_auth_timestamp of this ThreeDSRequestorAuthenticationInfo.
        :type three_ds_req_auth_timestamp: str
        """
        if three_ds_req_auth_timestamp is not None and len(three_ds_req_auth_timestamp) > 12:
            raise ValueError("Invalid value for `three_ds_req_auth_timestamp`, length must be less than or equal to `12`")
        if three_ds_req_auth_timestamp is not None and len(three_ds_req_auth_timestamp) < 12:
            raise ValueError("Invalid value for `three_ds_req_auth_timestamp`, length must be greater than or equal to `12`")

        self._three_ds_req_auth_timestamp = three_ds_req_auth_timestamp
