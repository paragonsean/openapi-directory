# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_info import AccountInfo
from openapi_server.models.address import Address
from openapi_server.models.amount import Amount
from openapi_server.models.application_info import ApplicationInfo
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.browser_info import BrowserInfo
from openapi_server.models.card import Card
from openapi_server.models.forex_quote import ForexQuote
from openapi_server.models.fund_destination import FundDestination
from openapi_server.models.fund_source import FundSource
from openapi_server.models.installments import Installments
from openapi_server.models.mandate import Mandate
from openapi_server.models.merchant_risk_indicator import MerchantRiskIndicator
from openapi_server.models.name import Name
from openapi_server.models.payment_request_additional_data import PaymentRequestAdditionalData
from openapi_server.models.platform_chargeback_logic import PlatformChargebackLogic
from openapi_server.models.recurring import Recurring
from openapi_server.models.split import Split
from openapi_server.models.three_ds2_request_data import ThreeDS2RequestData
from openapi_server.models.three_d_secure_data import ThreeDSecureData
from openapi_server import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_info: AccountInfo=None, additional_amount: Amount=None, additional_data: PaymentRequestAdditionalData=None, amount: Amount=None, application_info: ApplicationInfo=None, bank_account: BankAccount=None, billing_address: Address=None, browser_info: BrowserInfo=None, capture_delay_hours: int=None, card: Card=None, date_of_birth: date=None, dcc_quote: ForexQuote=None, delivery_address: Address=None, delivery_date: datetime=None, device_fingerprint: str=None, entity_type: str=None, fraud_offset: int=None, fund_destination: FundDestination=None, fund_source: FundSource=None, funding_source: str=None, installments: Installments=None, localized_shopper_statement: Dict[str, str]=None, mandate: Mandate=None, mcc: str=None, merchant_account: str=None, merchant_order_reference: str=None, merchant_risk_indicator: MerchantRiskIndicator=None, metadata: Dict[str, str]=None, mpi_data: ThreeDSecureData=None, nationality: str=None, order_reference: str=None, platform_chargeback_logic: PlatformChargebackLogic=None, recurring: Recurring=None, recurring_processing_model: str=None, reference: str=None, selected_brand: str=None, selected_recurring_detail_reference: str=None, session_id: str=None, shopper_email: str=None, shopper_ip: str=None, shopper_interaction: str=None, shopper_locale: str=None, shopper_name: Name=None, shopper_reference: str=None, shopper_statement: str=None, social_security_number: str=None, splits: List[Split]=None, store: str=None, telephone_number: str=None, three_ds2_request_data: ThreeDS2RequestData=None, three_ds_authentication_only: bool=False, totals_group: str=None, trusted_shopper: bool=None):
        """PaymentRequest - a model defined in OpenAPI

        :param account_info: The account_info of this PaymentRequest.
        :param additional_amount: The additional_amount of this PaymentRequest.
        :param additional_data: The additional_data of this PaymentRequest.
        :param amount: The amount of this PaymentRequest.
        :param application_info: The application_info of this PaymentRequest.
        :param bank_account: The bank_account of this PaymentRequest.
        :param billing_address: The billing_address of this PaymentRequest.
        :param browser_info: The browser_info of this PaymentRequest.
        :param capture_delay_hours: The capture_delay_hours of this PaymentRequest.
        :param card: The card of this PaymentRequest.
        :param date_of_birth: The date_of_birth of this PaymentRequest.
        :param dcc_quote: The dcc_quote of this PaymentRequest.
        :param delivery_address: The delivery_address of this PaymentRequest.
        :param delivery_date: The delivery_date of this PaymentRequest.
        :param device_fingerprint: The device_fingerprint of this PaymentRequest.
        :param entity_type: The entity_type of this PaymentRequest.
        :param fraud_offset: The fraud_offset of this PaymentRequest.
        :param fund_destination: The fund_destination of this PaymentRequest.
        :param fund_source: The fund_source of this PaymentRequest.
        :param funding_source: The funding_source of this PaymentRequest.
        :param installments: The installments of this PaymentRequest.
        :param localized_shopper_statement: The localized_shopper_statement of this PaymentRequest.
        :param mandate: The mandate of this PaymentRequest.
        :param mcc: The mcc of this PaymentRequest.
        :param merchant_account: The merchant_account of this PaymentRequest.
        :param merchant_order_reference: The merchant_order_reference of this PaymentRequest.
        :param merchant_risk_indicator: The merchant_risk_indicator of this PaymentRequest.
        :param metadata: The metadata of this PaymentRequest.
        :param mpi_data: The mpi_data of this PaymentRequest.
        :param nationality: The nationality of this PaymentRequest.
        :param order_reference: The order_reference of this PaymentRequest.
        :param platform_chargeback_logic: The platform_chargeback_logic of this PaymentRequest.
        :param recurring: The recurring of this PaymentRequest.
        :param recurring_processing_model: The recurring_processing_model of this PaymentRequest.
        :param reference: The reference of this PaymentRequest.
        :param selected_brand: The selected_brand of this PaymentRequest.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this PaymentRequest.
        :param session_id: The session_id of this PaymentRequest.
        :param shopper_email: The shopper_email of this PaymentRequest.
        :param shopper_ip: The shopper_ip of this PaymentRequest.
        :param shopper_interaction: The shopper_interaction of this PaymentRequest.
        :param shopper_locale: The shopper_locale of this PaymentRequest.
        :param shopper_name: The shopper_name of this PaymentRequest.
        :param shopper_reference: The shopper_reference of this PaymentRequest.
        :param shopper_statement: The shopper_statement of this PaymentRequest.
        :param social_security_number: The social_security_number of this PaymentRequest.
        :param splits: The splits of this PaymentRequest.
        :param store: The store of this PaymentRequest.
        :param telephone_number: The telephone_number of this PaymentRequest.
        :param three_ds2_request_data: The three_ds2_request_data of this PaymentRequest.
        :param three_ds_authentication_only: The three_ds_authentication_only of this PaymentRequest.
        :param totals_group: The totals_group of this PaymentRequest.
        :param trusted_shopper: The trusted_shopper of this PaymentRequest.
        """
        self.openapi_types = {
            'account_info': AccountInfo,
            'additional_amount': Amount,
            'additional_data': PaymentRequestAdditionalData,
            'amount': Amount,
            'application_info': ApplicationInfo,
            'bank_account': BankAccount,
            'billing_address': Address,
            'browser_info': BrowserInfo,
            'capture_delay_hours': int,
            'card': Card,
            'date_of_birth': date,
            'dcc_quote': ForexQuote,
            'delivery_address': Address,
            'delivery_date': datetime,
            'device_fingerprint': str,
            'entity_type': str,
            'fraud_offset': int,
            'fund_destination': FundDestination,
            'fund_source': FundSource,
            'funding_source': str,
            'installments': Installments,
            'localized_shopper_statement': Dict[str, str],
            'mandate': Mandate,
            'mcc': str,
            'merchant_account': str,
            'merchant_order_reference': str,
            'merchant_risk_indicator': MerchantRiskIndicator,
            'metadata': Dict[str, str],
            'mpi_data': ThreeDSecureData,
            'nationality': str,
            'order_reference': str,
            'platform_chargeback_logic': PlatformChargebackLogic,
            'recurring': Recurring,
            'recurring_processing_model': str,
            'reference': str,
            'selected_brand': str,
            'selected_recurring_detail_reference': str,
            'session_id': str,
            'shopper_email': str,
            'shopper_ip': str,
            'shopper_interaction': str,
            'shopper_locale': str,
            'shopper_name': Name,
            'shopper_reference': str,
            'shopper_statement': str,
            'social_security_number': str,
            'splits': List[Split],
            'store': str,
            'telephone_number': str,
            'three_ds2_request_data': ThreeDS2RequestData,
            'three_ds_authentication_only': bool,
            'totals_group': str,
            'trusted_shopper': bool
        }

        self.attribute_map = {
            'account_info': 'accountInfo',
            'additional_amount': 'additionalAmount',
            'additional_data': 'additionalData',
            'amount': 'amount',
            'application_info': 'applicationInfo',
            'bank_account': 'bankAccount',
            'billing_address': 'billingAddress',
            'browser_info': 'browserInfo',
            'capture_delay_hours': 'captureDelayHours',
            'card': 'card',
            'date_of_birth': 'dateOfBirth',
            'dcc_quote': 'dccQuote',
            'delivery_address': 'deliveryAddress',
            'delivery_date': 'deliveryDate',
            'device_fingerprint': 'deviceFingerprint',
            'entity_type': 'entityType',
            'fraud_offset': 'fraudOffset',
            'fund_destination': 'fundDestination',
            'fund_source': 'fundSource',
            'funding_source': 'fundingSource',
            'installments': 'installments',
            'localized_shopper_statement': 'localizedShopperStatement',
            'mandate': 'mandate',
            'mcc': 'mcc',
            'merchant_account': 'merchantAccount',
            'merchant_order_reference': 'merchantOrderReference',
            'merchant_risk_indicator': 'merchantRiskIndicator',
            'metadata': 'metadata',
            'mpi_data': 'mpiData',
            'nationality': 'nationality',
            'order_reference': 'orderReference',
            'platform_chargeback_logic': 'platformChargebackLogic',
            'recurring': 'recurring',
            'recurring_processing_model': 'recurringProcessingModel',
            'reference': 'reference',
            'selected_brand': 'selectedBrand',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'session_id': 'sessionId',
            'shopper_email': 'shopperEmail',
            'shopper_ip': 'shopperIP',
            'shopper_interaction': 'shopperInteraction',
            'shopper_locale': 'shopperLocale',
            'shopper_name': 'shopperName',
            'shopper_reference': 'shopperReference',
            'shopper_statement': 'shopperStatement',
            'social_security_number': 'socialSecurityNumber',
            'splits': 'splits',
            'store': 'store',
            'telephone_number': 'telephoneNumber',
            'three_ds2_request_data': 'threeDS2RequestData',
            'three_ds_authentication_only': 'threeDSAuthenticationOnly',
            'totals_group': 'totalsGroup',
            'trusted_shopper': 'trustedShopper'
        }

        self._account_info = account_info
        self._additional_amount = additional_amount
        self._additional_data = additional_data
        self._amount = amount
        self._application_info = application_info
        self._bank_account = bank_account
        self._billing_address = billing_address
        self._browser_info = browser_info
        self._capture_delay_hours = capture_delay_hours
        self._card = card
        self._date_of_birth = date_of_birth
        self._dcc_quote = dcc_quote
        self._delivery_address = delivery_address
        self._delivery_date = delivery_date
        self._device_fingerprint = device_fingerprint
        self._entity_type = entity_type
        self._fraud_offset = fraud_offset
        self._fund_destination = fund_destination
        self._fund_source = fund_source
        self._funding_source = funding_source
        self._installments = installments
        self._localized_shopper_statement = localized_shopper_statement
        self._mandate = mandate
        self._mcc = mcc
        self._merchant_account = merchant_account
        self._merchant_order_reference = merchant_order_reference
        self._merchant_risk_indicator = merchant_risk_indicator
        self._metadata = metadata
        self._mpi_data = mpi_data
        self._nationality = nationality
        self._order_reference = order_reference
        self._platform_chargeback_logic = platform_chargeback_logic
        self._recurring = recurring
        self._recurring_processing_model = recurring_processing_model
        self._reference = reference
        self._selected_brand = selected_brand
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._session_id = session_id
        self._shopper_email = shopper_email
        self._shopper_ip = shopper_ip
        self._shopper_interaction = shopper_interaction
        self._shopper_locale = shopper_locale
        self._shopper_name = shopper_name
        self._shopper_reference = shopper_reference
        self._shopper_statement = shopper_statement
        self._social_security_number = social_security_number
        self._splits = splits
        self._store = store
        self._telephone_number = telephone_number
        self._three_ds2_request_data = three_ds2_request_data
        self._three_ds_authentication_only = three_ds_authentication_only
        self._totals_group = totals_group
        self._trusted_shopper = trusted_shopper

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRequest of this PaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_info(self):
        """Gets the account_info of this PaymentRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :return: The account_info of this PaymentRequest.
        :rtype: AccountInfo
        """
        return self._account_info

    @account_info.setter
    def account_info(self, account_info):
        """Sets the account_info of this PaymentRequest.

        Shopper account information for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :param account_info: The account_info of this PaymentRequest.
        :type account_info: AccountInfo
        """

        self._account_info = account_info

    @property
    def additional_amount(self):
        """Gets the additional_amount of this PaymentRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :return: The additional_amount of this PaymentRequest.
        :rtype: Amount
        """
        return self._additional_amount

    @additional_amount.setter
    def additional_amount(self, additional_amount):
        """Sets the additional_amount of this PaymentRequest.

        If you want a [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) request to use a non-zero value, assign this value to `additionalAmount` (while the amount must be still set to 0 to trigger BIN or card verification). Required to be in the same currency as the `amount`. 

        :param additional_amount: The additional_amount of this PaymentRequest.
        :type additional_amount: Amount
        """

        self._additional_amount = additional_amount

    @property
    def additional_data(self):
        """Gets the additional_data of this PaymentRequest.


        :return: The additional_data of this PaymentRequest.
        :rtype: PaymentRequestAdditionalData
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this PaymentRequest.


        :param additional_data: The additional_data of this PaymentRequest.
        :type additional_data: PaymentRequestAdditionalData
        """

        self._additional_data = additional_data

    @property
    def amount(self):
        """Gets the amount of this PaymentRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :return: The amount of this PaymentRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentRequest.

        The amount information for the transaction (in [minor units](https://docs.adyen.com/development-resources/currency-codes)). For [BIN or card verification](https://docs.adyen.com/payment-methods/cards/bin-data-and-card-verification) requests, set amount to 0 (zero).

        :param amount: The amount of this PaymentRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def application_info(self):
        """Gets the application_info of this PaymentRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :return: The application_info of this PaymentRequest.
        :rtype: ApplicationInfo
        """
        return self._application_info

    @application_info.setter
    def application_info(self, application_info):
        """Sets the application_info of this PaymentRequest.

        Information about your application. For more details, see [Building Adyen solutions](https://docs.adyen.com/development-resources/building-adyen-solutions).

        :param application_info: The application_info of this PaymentRequest.
        :type application_info: ApplicationInfo
        """

        self._application_info = application_info

    @property
    def bank_account(self):
        """Gets the bank_account of this PaymentRequest.

        The details of the bank account, from which the payment should be made. > Either `bankAccount` or `card` field must be provided in a payment request.

        :return: The bank_account of this PaymentRequest.
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this PaymentRequest.

        The details of the bank account, from which the payment should be made. > Either `bankAccount` or `card` field must be provided in a payment request.

        :param bank_account: The bank_account of this PaymentRequest.
        :type bank_account: BankAccount
        """

        self._bank_account = bank_account

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :return: The billing_address of this PaymentRequest.
        :rtype: Address
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentRequest.

        The address where to send the invoice. > The `billingAddress` object is required in the following scenarios. Include all of the fields within this object. >* For 3D Secure 2 transactions in all browser-based and mobile implementations. >* For cross-border payouts to and from Canada.

        :param billing_address: The billing_address of this PaymentRequest.
        :type billing_address: Address
        """

        self._billing_address = billing_address

    @property
    def browser_info(self):
        """Gets the browser_info of this PaymentRequest.

        The shopper's browser information. > For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.

        :return: The browser_info of this PaymentRequest.
        :rtype: BrowserInfo
        """
        return self._browser_info

    @browser_info.setter
    def browser_info(self, browser_info):
        """Sets the browser_info of this PaymentRequest.

        The shopper's browser information. > For 3D Secure, the full object is required for web integrations. For mobile app integrations, include the `userAgent` and `acceptHeader` fields to indicate  that your integration can support a redirect in case a payment is routed to 3D Secure 1.

        :param browser_info: The browser_info of this PaymentRequest.
        :type browser_info: BrowserInfo
        """

        self._browser_info = browser_info

    @property
    def capture_delay_hours(self):
        """Gets the capture_delay_hours of this PaymentRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :return: The capture_delay_hours of this PaymentRequest.
        :rtype: int
        """
        return self._capture_delay_hours

    @capture_delay_hours.setter
    def capture_delay_hours(self, capture_delay_hours):
        """Sets the capture_delay_hours of this PaymentRequest.

        The delay between the authorisation and scheduled auto-capture, specified in hours.

        :param capture_delay_hours: The capture_delay_hours of this PaymentRequest.
        :type capture_delay_hours: int
        """

        self._capture_delay_hours = capture_delay_hours

    @property
    def card(self):
        """Gets the card of this PaymentRequest.

        A container for card data. > Either `bankAccount` or `card` field must be provided in a payment request.

        :return: The card of this PaymentRequest.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this PaymentRequest.

        A container for card data. > Either `bankAccount` or `card` field must be provided in a payment request.

        :param card: The card of this PaymentRequest.
        :type card: Card
        """

        self._card = card

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PaymentRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :return: The date_of_birth of this PaymentRequest.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PaymentRequest.

        The shopper's date of birth.  Format [ISO-8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DD

        :param date_of_birth: The date_of_birth of this PaymentRequest.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def dcc_quote(self):
        """Gets the dcc_quote of this PaymentRequest.

        The forex quote as returned in the response of the forex service.

        :return: The dcc_quote of this PaymentRequest.
        :rtype: ForexQuote
        """
        return self._dcc_quote

    @dcc_quote.setter
    def dcc_quote(self, dcc_quote):
        """Sets the dcc_quote of this PaymentRequest.

        The forex quote as returned in the response of the forex service.

        :param dcc_quote: The dcc_quote of this PaymentRequest.
        :type dcc_quote: ForexQuote
        """

        self._dcc_quote = dcc_quote

    @property
    def delivery_address(self):
        """Gets the delivery_address of this PaymentRequest.

        The address where the purchased goods should be delivered.

        :return: The delivery_address of this PaymentRequest.
        :rtype: Address
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this PaymentRequest.

        The address where the purchased goods should be delivered.

        :param delivery_address: The delivery_address of this PaymentRequest.
        :type delivery_address: Address
        """

        self._delivery_address = delivery_address

    @property
    def delivery_date(self):
        """Gets the delivery_date of this PaymentRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :return: The delivery_date of this PaymentRequest.
        :rtype: datetime
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this PaymentRequest.

        The date and time the purchased goods should be delivered.  Format [ISO 8601](https://www.w3.org/TR/NOTE-datetime): YYYY-MM-DDThh:mm:ss.sssTZD  Example: 2017-07-17T13:42:40.428+01:00

        :param delivery_date: The delivery_date of this PaymentRequest.
        :type delivery_date: datetime
        """

        self._delivery_date = delivery_date

    @property
    def device_fingerprint(self):
        """Gets the device_fingerprint of this PaymentRequest.

        A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).

        :return: The device_fingerprint of this PaymentRequest.
        :rtype: str
        """
        return self._device_fingerprint

    @device_fingerprint.setter
    def device_fingerprint(self, device_fingerprint):
        """Sets the device_fingerprint of this PaymentRequest.

        A string containing the shopper's device fingerprint. For more information, refer to [Device fingerprinting](https://docs.adyen.com/risk-management/device-fingerprinting).

        :param device_fingerprint: The device_fingerprint of this PaymentRequest.
        :type device_fingerprint: str
        """
        if device_fingerprint is not None and len(device_fingerprint) > 5000:
            raise ValueError("Invalid value for `device_fingerprint`, length must be less than or equal to `5000`")

        self._device_fingerprint = device_fingerprint

    @property
    def entity_type(self):
        """Gets the entity_type of this PaymentRequest.

        The type of the entity the payment is processed for.

        :return: The entity_type of this PaymentRequest.
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this PaymentRequest.

        The type of the entity the payment is processed for.

        :param entity_type: The entity_type of this PaymentRequest.
        :type entity_type: str
        """
        allowed_values = ["NaturalPerson", "CompanyName"]  # noqa: E501
        if entity_type not in allowed_values:
            raise ValueError(
                "Invalid value for `entity_type` ({0}), must be one of {1}"
                .format(entity_type, allowed_values)
            )

        self._entity_type = entity_type

    @property
    def fraud_offset(self):
        """Gets the fraud_offset of this PaymentRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :return: The fraud_offset of this PaymentRequest.
        :rtype: int
        """
        return self._fraud_offset

    @fraud_offset.setter
    def fraud_offset(self, fraud_offset):
        """Sets the fraud_offset of this PaymentRequest.

        An integer value that is added to the normal fraud score. The value can be either positive or negative.

        :param fraud_offset: The fraud_offset of this PaymentRequest.
        :type fraud_offset: int
        """

        self._fraud_offset = fraud_offset

    @property
    def fund_destination(self):
        """Gets the fund_destination of this PaymentRequest.

        the person or entity receiving the money

        :return: The fund_destination of this PaymentRequest.
        :rtype: FundDestination
        """
        return self._fund_destination

    @fund_destination.setter
    def fund_destination(self, fund_destination):
        """Sets the fund_destination of this PaymentRequest.

        the person or entity receiving the money

        :param fund_destination: The fund_destination of this PaymentRequest.
        :type fund_destination: FundDestination
        """

        self._fund_destination = fund_destination

    @property
    def fund_source(self):
        """Gets the fund_source of this PaymentRequest.

        The person or entity funding the money.

        :return: The fund_source of this PaymentRequest.
        :rtype: FundSource
        """
        return self._fund_source

    @fund_source.setter
    def fund_source(self, fund_source):
        """Sets the fund_source of this PaymentRequest.

        The person or entity funding the money.

        :param fund_source: The fund_source of this PaymentRequest.
        :type fund_source: FundSource
        """

        self._fund_source = fund_source

    @property
    def funding_source(self):
        """Gets the funding_source of this PaymentRequest.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :return: The funding_source of this PaymentRequest.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this PaymentRequest.

        The funding source that should be used when multiple sources are available. For Brazilian combo cards, by default the funding source is credit. To use debit, set this value to **debit**.

        :param funding_source: The funding_source of this PaymentRequest.
        :type funding_source: str
        """
        allowed_values = ["credit", "debit"]  # noqa: E501
        if funding_source not in allowed_values:
            raise ValueError(
                "Invalid value for `funding_source` ({0}), must be one of {1}"
                .format(funding_source, allowed_values)
            )

        self._funding_source = funding_source

    @property
    def installments(self):
        """Gets the installments of this PaymentRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :return: The installments of this PaymentRequest.
        :rtype: Installments
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this PaymentRequest.

        Contains installment settings. For more information, refer to [Installments](https://docs.adyen.com/payment-methods/cards/credit-card-installments).

        :param installments: The installments of this PaymentRequest.
        :type installments: Installments
        """

        self._installments = installments

    @property
    def localized_shopper_statement(self):
        """Gets the localized_shopper_statement of this PaymentRequest.

        The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.

        :return: The localized_shopper_statement of this PaymentRequest.
        :rtype: Dict[str, str]
        """
        return self._localized_shopper_statement

    @localized_shopper_statement.setter
    def localized_shopper_statement(self, localized_shopper_statement):
        """Sets the localized_shopper_statement of this PaymentRequest.

        The `localizedShopperStatement` field lets you use dynamic values for your shopper statement in a local character set. If not supplied, left empty, or for cross-border transactions, **shopperStatement** is used.  Adyen currently supports the ja-Kana character set for Visa and Mastercard payments in Japan using Japanese cards. This character set supports:  * UTF-8 based Katakana, capital letters, numbers and special characters.  * Half-width or full-width characters.

        :param localized_shopper_statement: The localized_shopper_statement of this PaymentRequest.
        :type localized_shopper_statement: Dict[str, str]
        """

        self._localized_shopper_statement = localized_shopper_statement

    @property
    def mandate(self):
        """Gets the mandate of this PaymentRequest.

        The mandate details to initiate recurring transaction.

        :return: The mandate of this PaymentRequest.
        :rtype: Mandate
        """
        return self._mandate

    @mandate.setter
    def mandate(self, mandate):
        """Sets the mandate of this PaymentRequest.

        The mandate details to initiate recurring transaction.

        :param mandate: The mandate of this PaymentRequest.
        :type mandate: Mandate
        """

        self._mandate = mandate

    @property
    def mcc(self):
        """Gets the mcc of this PaymentRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :return: The mcc of this PaymentRequest.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this PaymentRequest.

        The [merchant category code](https://en.wikipedia.org/wiki/Merchant_category_code) (MCC) is a four-digit number, which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.

        :param mcc: The mcc of this PaymentRequest.
        :type mcc: str
        """

        self._mcc = mcc

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PaymentRequest.

        The merchant account identifier, with which you want to process the transaction.

        :return: The merchant_account of this PaymentRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PaymentRequest.

        The merchant account identifier, with which you want to process the transaction.

        :param merchant_account: The merchant_account of this PaymentRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_order_reference(self):
        """Gets the merchant_order_reference of this PaymentRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :return: The merchant_order_reference of this PaymentRequest.
        :rtype: str
        """
        return self._merchant_order_reference

    @merchant_order_reference.setter
    def merchant_order_reference(self, merchant_order_reference):
        """Sets the merchant_order_reference of this PaymentRequest.

        This reference allows linking multiple transactions to each other for reporting purposes (i.e. order auth-rate). The reference should be unique per billing cycle. The same merchant order reference should never be reused after the first authorised attempt. If used, this field should be supplied for all incoming authorisations. > We strongly recommend you send the `merchantOrderReference` value to benefit from linking payment requests when authorisation retries take place. In addition, we recommend you provide `retry.orderAttemptNumber`, `retry.chainAttemptNumber`, and `retry.skipRetry` values in `PaymentRequest.additionalData`.

        :param merchant_order_reference: The merchant_order_reference of this PaymentRequest.
        :type merchant_order_reference: str
        """

        self._merchant_order_reference = merchant_order_reference

    @property
    def merchant_risk_indicator(self):
        """Gets the merchant_risk_indicator of this PaymentRequest.

        Additional risk fields for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :return: The merchant_risk_indicator of this PaymentRequest.
        :rtype: MerchantRiskIndicator
        """
        return self._merchant_risk_indicator

    @merchant_risk_indicator.setter
    def merchant_risk_indicator(self, merchant_risk_indicator):
        """Sets the merchant_risk_indicator of this PaymentRequest.

        Additional risk fields for 3D Secure 2. > For 3D Secure 2 transactions, we recommend that you include this object to increase the chances of achieving a frictionless flow.

        :param merchant_risk_indicator: The merchant_risk_indicator of this PaymentRequest.
        :type merchant_risk_indicator: MerchantRiskIndicator
        """

        self._merchant_risk_indicator = merchant_risk_indicator

    @property
    def metadata(self):
        """Gets the metadata of this PaymentRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :return: The metadata of this PaymentRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PaymentRequest.

        Metadata consists of entries, each of which includes a key and a value. Limits: * Maximum 20 key-value pairs per request. When exceeding, the \"177\" error occurs: \"Metadata size exceeds limit\". * Maximum 20 characters per key. * Maximum 80 characters per value. 

        :param metadata: The metadata of this PaymentRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def mpi_data(self):
        """Gets the mpi_data of this PaymentRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :return: The mpi_data of this PaymentRequest.
        :rtype: ThreeDSecureData
        """
        return self._mpi_data

    @mpi_data.setter
    def mpi_data(self, mpi_data):
        """Sets the mpi_data of this PaymentRequest.

        Authentication data produced by an MPI (Mastercard SecureCode, Visa Secure, or Cartes Bancaires).

        :param mpi_data: The mpi_data of this PaymentRequest.
        :type mpi_data: ThreeDSecureData
        """

        self._mpi_data = mpi_data

    @property
    def nationality(self):
        """Gets the nationality of this PaymentRequest.

        The two-character country code of the shopper's nationality.

        :return: The nationality of this PaymentRequest.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this PaymentRequest.

        The two-character country code of the shopper's nationality.

        :param nationality: The nationality of this PaymentRequest.
        :type nationality: str
        """
        if nationality is not None and len(nationality) > 2:
            raise ValueError("Invalid value for `nationality`, length must be less than or equal to `2`")

        self._nationality = nationality

    @property
    def order_reference(self):
        """Gets the order_reference of this PaymentRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :return: The order_reference of this PaymentRequest.
        :rtype: str
        """
        return self._order_reference

    @order_reference.setter
    def order_reference(self, order_reference):
        """Sets the order_reference of this PaymentRequest.

        When you are doing multiple partial (gift card) payments, this is the `pspReference` of the first payment. We use this to link the multiple payments to each other. As your own reference for linking multiple payments, use the `merchantOrderReference`instead.

        :param order_reference: The order_reference of this PaymentRequest.
        :type order_reference: str
        """

        self._order_reference = order_reference

    @property
    def platform_chargeback_logic(self):
        """Gets the platform_chargeback_logic of this PaymentRequest.

        Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#chargebacks-and-disputes).

        :return: The platform_chargeback_logic of this PaymentRequest.
        :rtype: PlatformChargebackLogic
        """
        return self._platform_chargeback_logic

    @platform_chargeback_logic.setter
    def platform_chargeback_logic(self, platform_chargeback_logic):
        """Sets the platform_chargeback_logic of this PaymentRequest.

        Defines how to book chargebacks when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#chargebacks-and-disputes).

        :param platform_chargeback_logic: The platform_chargeback_logic of this PaymentRequest.
        :type platform_chargeback_logic: PlatformChargebackLogic
        """

        self._platform_chargeback_logic = platform_chargeback_logic

    @property
    def recurring(self):
        """Gets the recurring of this PaymentRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).

        :return: The recurring of this PaymentRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this PaymentRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/classic-integration/recurring-payments).

        :param recurring: The recurring of this PaymentRequest.
        :type recurring: Recurring
        """

        self._recurring = recurring

    @property
    def recurring_processing_model(self):
        """Gets the recurring_processing_model of this PaymentRequest.

        Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :return: The recurring_processing_model of this PaymentRequest.
        :rtype: str
        """
        return self._recurring_processing_model

    @recurring_processing_model.setter
    def recurring_processing_model(self, recurring_processing_model):
        """Sets the recurring_processing_model of this PaymentRequest.

        Defines a recurring payment type. Required when creating a token to store payment details or using stored payment details. Allowed values: * `Subscription` – A transaction for a fixed or variable amount, which follows a fixed schedule. * `CardOnFile` – With a card-on-file (CoF) transaction, card details are stored to enable one-click or omnichannel journeys, or simply to streamline the checkout process. Any subscription not following a fixed schedule is also considered a card-on-file transaction. * `UnscheduledCardOnFile` – An unscheduled card-on-file (UCoF) transaction is a transaction that occurs on a non-fixed schedule and/or have variable amounts. For example, automatic top-ups when a cardholder's balance drops below a certain amount. 

        :param recurring_processing_model: The recurring_processing_model of this PaymentRequest.
        :type recurring_processing_model: str
        """
        allowed_values = ["CardOnFile", "Subscription", "UnscheduledCardOnFile"]  # noqa: E501
        if recurring_processing_model not in allowed_values:
            raise ValueError(
                "Invalid value for `recurring_processing_model` ({0}), must be one of {1}"
                .format(recurring_processing_model, allowed_values)
            )

        self._recurring_processing_model = recurring_processing_model

    @property
    def reference(self):
        """Gets the reference of this PaymentRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :return: The reference of this PaymentRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentRequest.

        The reference to uniquely identify a payment. This reference is used in all communication with you about the payment status. We recommend using a unique value per payment; however, it is not a requirement. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). Maximum length: 80 characters.

        :param reference: The reference of this PaymentRequest.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def selected_brand(self):
        """Gets the selected_brand of this PaymentRequest.

        Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * `maestro` (default), to be processed like a Maestro card, or * `bcmc`, to be processed like a Bancontact card.

        :return: The selected_brand of this PaymentRequest.
        :rtype: str
        """
        return self._selected_brand

    @selected_brand.setter
    def selected_brand(self, selected_brand):
        """Sets the selected_brand of this PaymentRequest.

        Some payment methods require defining a value for this field to specify how to process the transaction.  For the Bancontact payment method, it can be set to: * `maestro` (default), to be processed like a Maestro card, or * `bcmc`, to be processed like a Bancontact card.

        :param selected_brand: The selected_brand of this PaymentRequest.
        :type selected_brand: str
        """

        self._selected_brand = selected_brand

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this PaymentRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :return: The selected_recurring_detail_reference of this PaymentRequest.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this PaymentRequest.

        The `recurringDetailReference` you want to use for this payment. The value `LATEST` can be used to select the most recently stored recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this PaymentRequest.
        :type selected_recurring_detail_reference: str
        """

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def session_id(self):
        """Gets the session_id of this PaymentRequest.

        A session ID used to identify a payment session.

        :return: The session_id of this PaymentRequest.
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this PaymentRequest.

        A session ID used to identify a payment session.

        :param session_id: The session_id of this PaymentRequest.
        :type session_id: str
        """

        self._session_id = session_id

    @property
    def shopper_email(self):
        """Gets the shopper_email of this PaymentRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :return: The shopper_email of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_email

    @shopper_email.setter
    def shopper_email(self, shopper_email):
        """Sets the shopper_email of this PaymentRequest.

        The shopper's email address. We recommend that you provide this data, as it is used in velocity fraud checks. > For 3D Secure 2 transactions, schemes require `shopperEmail` for all browser-based and mobile implementations.

        :param shopper_email: The shopper_email of this PaymentRequest.
        :type shopper_email: str
        """

        self._shopper_email = shopper_email

    @property
    def shopper_ip(self):
        """Gets the shopper_ip of this PaymentRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The shopper_ip of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_ip

    @shopper_ip.setter
    def shopper_ip(self, shopper_ip):
        """Sets the shopper_ip of this PaymentRequest.

        The shopper's IP address. In general, we recommend that you provide this data, as it is used in a number of risk checks (for instance, number of payment attempts or location-based checks). > For 3D Secure 2 transactions, schemes require `shopperIP` for all browser-based implementations. This field is also mandatory for some merchants depending on your business model. For more information, [contact Support](https://www.adyen.help/hc/en-us/requests/new).

        :param shopper_ip: The shopper_ip of this PaymentRequest.
        :type shopper_ip: str
        """

        self._shopper_ip = shopper_ip

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this PaymentRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this PaymentRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the cardholder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this PaymentRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_locale(self):
        """Gets the shopper_locale of this PaymentRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :return: The shopper_locale of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_locale

    @shopper_locale.setter
    def shopper_locale(self, shopper_locale):
        """Sets the shopper_locale of this PaymentRequest.

        The combination of a language code and a country code to specify the language to be used in the payment.

        :param shopper_locale: The shopper_locale of this PaymentRequest.
        :type shopper_locale: str
        """

        self._shopper_locale = shopper_locale

    @property
    def shopper_name(self):
        """Gets the shopper_name of this PaymentRequest.

        The shopper's full name.

        :return: The shopper_name of this PaymentRequest.
        :rtype: Name
        """
        return self._shopper_name

    @shopper_name.setter
    def shopper_name(self, shopper_name):
        """Sets the shopper_name of this PaymentRequest.

        The shopper's full name.

        :param shopper_name: The shopper_name of this PaymentRequest.
        :type shopper_name: Name
        """

        self._shopper_name = shopper_name

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PaymentRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PaymentRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this PaymentRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference

    @property
    def shopper_statement(self):
        """Gets the shopper_statement of this PaymentRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :return: The shopper_statement of this PaymentRequest.
        :rtype: str
        """
        return self._shopper_statement

    @shopper_statement.setter
    def shopper_statement(self, shopper_statement):
        """Sets the shopper_statement of this PaymentRequest.

        The text to be shown on the shopper's bank statement.  We recommend sending a maximum of 22 characters, otherwise banks might truncate the string.  Allowed characters: **a-z**, **A-Z**, **0-9**, spaces, and special characters **. , ' _ - ? + * /**.

        :param shopper_statement: The shopper_statement of this PaymentRequest.
        :type shopper_statement: str
        """

        self._shopper_statement = shopper_statement

    @property
    def social_security_number(self):
        """Gets the social_security_number of this PaymentRequest.

        The shopper's social security number.

        :return: The social_security_number of this PaymentRequest.
        :rtype: str
        """
        return self._social_security_number

    @social_security_number.setter
    def social_security_number(self, social_security_number):
        """Sets the social_security_number of this PaymentRequest.

        The shopper's social security number.

        :param social_security_number: The social_security_number of this PaymentRequest.
        :type social_security_number: str
        """

        self._social_security_number = social_security_number

    @property
    def splits(self):
        """Gets the splits of this PaymentRequest.

        An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).

        :return: The splits of this PaymentRequest.
        :rtype: List[Split]
        """
        return self._splits

    @splits.setter
    def splits(self, splits):
        """Sets the splits of this PaymentRequest.

        An array of objects specifying how the payment should be split when using [Adyen for Platforms](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) or [Issuing](https://docs.adyen.com/issuing/add-manage-funds#split).

        :param splits: The splits of this PaymentRequest.
        :type splits: List[Split]
        """

        self._splits = splits

    @property
    def store(self):
        """Gets the store of this PaymentRequest.

        The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms).

        :return: The store of this PaymentRequest.
        :rtype: str
        """
        return self._store

    @store.setter
    def store(self, store):
        """Sets the store of this PaymentRequest.

        The ecommerce or point-of-sale store that is processing the payment. Used in:  * [Partner platform integrations](https://docs.adyen.com/marketplaces-and-platforms/classic/platforms-for-partners#route-payments) for the [Classic Platforms integration](https://docs.adyen.com/marketplaces-and-platforms/classic). * [Platform setup integrations](https://docs.adyen.com/marketplaces-and-platforms/additional-for-platform-setup/route-payment-to-store) for the [Balance Platform](https://docs.adyen.com/marketplaces-and-platforms).

        :param store: The store of this PaymentRequest.
        :type store: str
        """
        if store is not None and len(store) > 16:
            raise ValueError("Invalid value for `store`, length must be less than or equal to `16`")
        if store is not None and len(store) < 1:
            raise ValueError("Invalid value for `store`, length must be greater than or equal to `1`")

        self._store = store

    @property
    def telephone_number(self):
        """Gets the telephone_number of this PaymentRequest.

        The shopper's telephone number.

        :return: The telephone_number of this PaymentRequest.
        :rtype: str
        """
        return self._telephone_number

    @telephone_number.setter
    def telephone_number(self, telephone_number):
        """Sets the telephone_number of this PaymentRequest.

        The shopper's telephone number.

        :param telephone_number: The telephone_number of this PaymentRequest.
        :type telephone_number: str
        """

        self._telephone_number = telephone_number

    @property
    def three_ds2_request_data(self):
        """Gets the three_ds2_request_data of this PaymentRequest.

        Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.

        :return: The three_ds2_request_data of this PaymentRequest.
        :rtype: ThreeDS2RequestData
        """
        return self._three_ds2_request_data

    @three_ds2_request_data.setter
    def three_ds2_request_data(self, three_ds2_request_data):
        """Sets the three_ds2_request_data of this PaymentRequest.

        Request fields for 3D Secure 2. To check if any of the following fields are required for your integration, refer to [Online payments](https://docs.adyen.com/online-payments) or [Classic integration](https://docs.adyen.com/classic-integration) documentation.

        :param three_ds2_request_data: The three_ds2_request_data of this PaymentRequest.
        :type three_ds2_request_data: ThreeDS2RequestData
        """

        self._three_ds2_request_data = three_ds2_request_data

    @property
    def three_ds_authentication_only(self):
        """Gets the three_ds_authentication_only of this PaymentRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :return: The three_ds_authentication_only of this PaymentRequest.
        :rtype: bool
        """
        return self._three_ds_authentication_only

    @three_ds_authentication_only.setter
    def three_ds_authentication_only(self, three_ds_authentication_only):
        """Sets the three_ds_authentication_only of this PaymentRequest.

        If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.

        :param three_ds_authentication_only: The three_ds_authentication_only of this PaymentRequest.
        :type three_ds_authentication_only: bool
        """

        self._three_ds_authentication_only = three_ds_authentication_only

    @property
    def totals_group(self):
        """Gets the totals_group of this PaymentRequest.

        The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).

        :return: The totals_group of this PaymentRequest.
        :rtype: str
        """
        return self._totals_group

    @totals_group.setter
    def totals_group(self, totals_group):
        """Sets the totals_group of this PaymentRequest.

        The reference value to aggregate sales totals in reporting. When not specified, the store field is used (if available).

        :param totals_group: The totals_group of this PaymentRequest.
        :type totals_group: str
        """
        if totals_group is not None and len(totals_group) > 16:
            raise ValueError("Invalid value for `totals_group`, length must be less than or equal to `16`")
        if totals_group is not None and len(totals_group) < 1:
            raise ValueError("Invalid value for `totals_group`, length must be greater than or equal to `1`")

        self._totals_group = totals_group

    @property
    def trusted_shopper(self):
        """Gets the trusted_shopper of this PaymentRequest.

        Set to true if the payment should be routed to a trusted MID.

        :return: The trusted_shopper of this PaymentRequest.
        :rtype: bool
        """
        return self._trusted_shopper

    @trusted_shopper.setter
    def trusted_shopper(self, trusted_shopper):
        """Sets the trusted_shopper of this PaymentRequest.

        Set to true if the payment should be routed to a trusted MID.

        :param trusted_shopper: The trusted_shopper of this PaymentRequest.
        :type trusted_shopper: bool
        """

        self._trusted_shopper = trusted_shopper
