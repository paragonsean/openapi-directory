/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v68/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdjustAuthorisationRequest from '../model/AdjustAuthorisationRequest';
import CancelOrRefundRequest from '../model/CancelOrRefundRequest';
import CancelRequest from '../model/CancelRequest';
import CaptureRequest from '../model/CaptureRequest';
import DonationRequest from '../model/DonationRequest';
import ModificationResult from '../model/ModificationResult';
import RefundRequest from '../model/RefundRequest';
import ServiceError from '../model/ServiceError';
import TechnicalCancelRequest from '../model/TechnicalCancelRequest';
import VoidPendingRefundRequest from '../model/VoidPendingRefundRequest';

/**
* Modifications service.
* @module api/ModificationsApi
* @version 68
*/
export default class ModificationsApi {

    /**
    * Constructs a new ModificationsApi. 
    * @alias module:api/ModificationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postAdjustAuthorisation operation.
     * @callback module:api/ModificationsApi~postAdjustAuthorisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the authorised amount
     * Allows you to increase or decrease the authorised amount after the initial authorisation has taken place. This functionality enables for example tipping, improving the chances your authorisation will be valid, or charging the shopper when they have already left the merchant premises.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). > If you have a [newer integration](https://docs.adyen.com/online-payments), and are doing: > * [Asynchronous adjustments](https://docs.adyen.com/online-payments/adjust-authorisation#asynchronous-or-synchronous-adjustment), use the [`/payments/{paymentPspReference}/amountUpdates`](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/{paymentPspReference}/amountUpdates) endpoint on Checkout API. > * [Synchronous adjustments](https://docs.adyen.com/online-payments/adjust-authorisation#asynchronous-or-synchronous-adjustment), use this endpoint.
     * @param {Object} opts Optional parameters
     * @param {module:model/AdjustAuthorisationRequest} [adjustAuthorisationRequest] 
     * @param {module:api/ModificationsApi~postAdjustAuthorisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postAdjustAuthorisation(opts, callback) {
      opts = opts || {};
      let postBody = opts['adjustAuthorisationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/adjustAuthorisation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCancel operation.
     * @callback module:api/ModificationsApi~postCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an authorisation
     * Cancels the authorisation hold on a payment, returning a unique reference for this request. You can cancel payments after authorisation only for payment methods that support distinct authorisations and captures.  For more information, refer to [Cancel](https://docs.adyen.com/online-payments/classic-integrations/modify-payments/cancel).  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/{paymentPspReference}/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/{paymentPspReference}/cancels) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelRequest} [cancelRequest] 
     * @param {module:api/ModificationsApi~postCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postCancel(opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCancelOrRefund operation.
     * @callback module:api/ModificationsApi~postCancelOrRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel or refund a payment
     * Cancels a payment if it has not been captured yet, or refunds it if it has already been captured. This is useful when it is not certain if the payment has been captured or not (for example, when using auto-capture).  Do not use this endpoint for payments that involve:  * [Multiple partial captures](https://docs.adyen.com/online-payments/capture).  * [Split data](https://docs.adyen.com/marketplaces-and-platforms/processing-payments#providing-split-information) either at time of payment or capture for Adyen for Platforms.   Instead, check if the payment has been captured and make a corresponding [`/refund`](https://docs.adyen.com/api-explorer/#/Payment/refund) or [`/cancel`](https://docs.adyen.com/api-explorer/#/Payment/cancel) call.  For more information, refer to [Cancel or refund](https://docs.adyen.com/online-payments/classic-integrations/modify-payments/cancel-or-refund).  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/{paymentPspReference}/reversals`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/{paymentPspReference}/reversals) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/CancelOrRefundRequest} [cancelOrRefundRequest] 
     * @param {module:api/ModificationsApi~postCancelOrRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postCancelOrRefund(opts, callback) {
      opts = opts || {};
      let postBody = opts['cancelOrRefundRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/cancelOrRefund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCapture operation.
     * @callback module:api/ModificationsApi~postCaptureCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capture an authorisation
     * Captures the authorisation hold on a payment, returning a unique reference for this request. Usually the full authorisation amount is captured, however it's also possible to capture a smaller amount, which results in cancelling the remaining authorisation balance.  Payment methods that are captured automatically after authorisation don't need to be captured. However, submitting a capture request on these transactions will not result in double charges. If immediate or delayed auto-capture is enabled, calling the capture method is not neccessary.  For more information refer to [Capture](https://docs.adyen.com/online-payments/classic-integrations/modify-payments/capture).  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/{paymentPspReference}/captures`](https://docs.adyen.com/api-explorer/#/CheckoutService/v67/post/payments/{paymentPspReference}/captures) endpoint on Checkout API instead.  
     * @param {Object} opts Optional parameters
     * @param {module:model/CaptureRequest} [captureRequest] 
     * @param {module:api/ModificationsApi~postCaptureCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postCapture(opts, callback) {
      opts = opts || {};
      let postBody = opts['captureRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postDonate operation.
     * @callback module:api/ModificationsApi~postDonateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a donation
     * Schedules a new payment to be created (including a new authorisation request) for the specified donation using the payment details of the original payment.  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/donations`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/donations) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/DonationRequest} [donationRequest] 
     * @param {module:api/ModificationsApi~postDonateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postDonate(opts, callback) {
      opts = opts || {};
      let postBody = opts['donationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/donate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postRefund operation.
     * @callback module:api/ModificationsApi~postRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refund a captured payment
     * Refunds a payment that has previously been captured, returning a unique reference for this request. Refunding can be done on the full captured amount or a partial amount. Multiple (partial) refunds will be accepted as long as their sum doesn't exceed the captured amount. Payments which have been authorised, but not captured, cannot be refunded, use the /cancel method instead.  Some payment methods/gateways do not support partial/multiple refunds. A margin above the captured limit can be configured to cover shipping/handling costs.  For more information, refer to [Refund](https://docs.adyen.com/online-payments/classic-integrations/modify-payments/refund).  > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/payments/{paymentPspReference}/refunds`](https://docs.adyen.com/api-explorer/#/CheckoutService/payments/{paymentPspReference}/refunds) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/RefundRequest} [refundRequest] 
     * @param {module:api/ModificationsApi~postRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postRefund(opts, callback) {
      opts = opts || {};
      let postBody = opts['refundRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/refund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTechnicalCancel operation.
     * @callback module:api/ModificationsApi~postTechnicalCancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an authorisation using your reference
     * This endpoint allows you to cancel a payment if you do not have the PSP reference of the original payment request available.  In your call, refer to the original payment by using the `reference` that you specified in your payment request.  For more information, see [Technical cancel](https://docs.adyen.com/online-payments/classic-integrations/modify-payments/cancel#technical-cancel).   > This endpoint is part of our [classic API integration](https://docs.adyen.com/online-payments/classic-integrations/api-integration-ecommerce). If using a [newer integration](https://docs.adyen.com/online-payments), use the [`/cancels`](https://docs.adyen.com/api-explorer/#/CheckoutService/cancels) endpoint under Checkout API instead.
     * @param {Object} opts Optional parameters
     * @param {module:model/TechnicalCancelRequest} [technicalCancelRequest] 
     * @param {module:api/ModificationsApi~postTechnicalCancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postTechnicalCancel(opts, callback) {
      opts = opts || {};
      let postBody = opts['technicalCancelRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/technicalCancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postVoidPendingRefund operation.
     * @callback module:api/ModificationsApi~postVoidPendingRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModificationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel an in-person refund
     * This endpoint allows you to cancel an unreferenced refund request before it has been completed.  In your call, you can refer to the original refund request either by using the `tenderReference`, or the `pspReference`. We recommend implementing based on the `tenderReference`, as this is generated for both offline and online transactions.  For more information, refer to [Cancel an unreferenced refund](https://docs.adyen.com/point-of-sale/refund-payment/cancel-unreferenced).
     * @param {Object} opts Optional parameters
     * @param {module:model/VoidPendingRefundRequest} [voidPendingRefundRequest] 
     * @param {module:api/ModificationsApi~postVoidPendingRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModificationResult}
     */
    postVoidPendingRefund(opts, callback) {
      opts = opts || {};
      let postBody = opts['voidPendingRefundRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ModificationResult;
      return this.apiClient.callApi(
        '/voidPendingRefund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
