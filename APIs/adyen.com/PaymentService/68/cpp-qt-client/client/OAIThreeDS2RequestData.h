/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v68/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIThreeDS2RequestData.h
 *
 * 
 */

#ifndef OAIThreeDS2RequestData_H
#define OAIThreeDS2RequestData_H

#include <QJsonObject>

#include "OAIAcctInfo.h"
#include "OAIDeviceRenderOptions.h"
#include "OAIPhone.h"
#include "OAISDKEphemPubKey.h"
#include "OAIThreeDSRequestorAuthenticationInfo.h"
#include "OAIThreeDSRequestorPriorAuthenticationInfo.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAcctInfo;
class OAIDeviceRenderOptions;
class OAIPhone;
class OAISDKEphemPubKey;
class OAIThreeDSRequestorAuthenticationInfo;
class OAIThreeDSRequestorPriorAuthenticationInfo;

class OAIThreeDS2RequestData : public OAIObject {
public:
    OAIThreeDS2RequestData();
    OAIThreeDS2RequestData(QString json);
    ~OAIThreeDS2RequestData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAcctInfo getAcctInfo() const;
    void setAcctInfo(const OAIAcctInfo &acct_info);
    bool is_acct_info_Set() const;
    bool is_acct_info_Valid() const;

    QString getAcctType() const;
    void setAcctType(const QString &acct_type);
    bool is_acct_type_Set() const;
    bool is_acct_type_Valid() const;

    QString getAcquirerBin() const;
    void setAcquirerBin(const QString &acquirer_bin);
    bool is_acquirer_bin_Set() const;
    bool is_acquirer_bin_Valid() const;

    QString getAcquirerMerchantId() const;
    void setAcquirerMerchantId(const QString &acquirer_merchant_id);
    bool is_acquirer_merchant_id_Set() const;
    bool is_acquirer_merchant_id_Valid() const;

    QString getAddrMatch() const;
    void setAddrMatch(const QString &addr_match);
    bool is_addr_match_Set() const;
    bool is_addr_match_Valid() const;

    Q_DECL_DEPRECATED bool isAuthenticationOnly() const;
    Q_DECL_DEPRECATED void setAuthenticationOnly(const bool &authentication_only);
    Q_DECL_DEPRECATED bool is_authentication_only_Set() const;
    Q_DECL_DEPRECATED bool is_authentication_only_Valid() const;

    Q_DECL_DEPRECATED QString getChallengeIndicator() const;
    Q_DECL_DEPRECATED void setChallengeIndicator(const QString &challenge_indicator);
    Q_DECL_DEPRECATED bool is_challenge_indicator_Set() const;
    Q_DECL_DEPRECATED bool is_challenge_indicator_Valid() const;

    QString getDeviceChannel() const;
    void setDeviceChannel(const QString &device_channel);
    bool is_device_channel_Set() const;
    bool is_device_channel_Valid() const;

    OAIDeviceRenderOptions getDeviceRenderOptions() const;
    void setDeviceRenderOptions(const OAIDeviceRenderOptions &device_render_options);
    bool is_device_render_options_Set() const;
    bool is_device_render_options_Valid() const;

    OAIPhone getHomePhone() const;
    void setHomePhone(const OAIPhone &home_phone);
    bool is_home_phone_Set() const;
    bool is_home_phone_Valid() const;

    QString getMcc() const;
    void setMcc(const QString &mcc);
    bool is_mcc_Set() const;
    bool is_mcc_Valid() const;

    QString getMerchantName() const;
    void setMerchantName(const QString &merchant_name);
    bool is_merchant_name_Set() const;
    bool is_merchant_name_Valid() const;

    QString getMessageVersion() const;
    void setMessageVersion(const QString &message_version);
    bool is_message_version_Set() const;
    bool is_message_version_Valid() const;

    OAIPhone getMobilePhone() const;
    void setMobilePhone(const OAIPhone &mobile_phone);
    bool is_mobile_phone_Set() const;
    bool is_mobile_phone_Valid() const;

    QString getNotificationUrl() const;
    void setNotificationUrl(const QString &notification_url);
    bool is_notification_url_Set() const;
    bool is_notification_url_Valid() const;

    bool isPayTokenInd() const;
    void setPayTokenInd(const bool &pay_token_ind);
    bool is_pay_token_ind_Set() const;
    bool is_pay_token_ind_Valid() const;

    QString getPaymentAuthenticationUseCase() const;
    void setPaymentAuthenticationUseCase(const QString &payment_authentication_use_case);
    bool is_payment_authentication_use_case_Set() const;
    bool is_payment_authentication_use_case_Valid() const;

    QString getPurchaseInstalData() const;
    void setPurchaseInstalData(const QString &purchase_instal_data);
    bool is_purchase_instal_data_Set() const;
    bool is_purchase_instal_data_Valid() const;

    QString getRecurringExpiry() const;
    void setRecurringExpiry(const QString &recurring_expiry);
    bool is_recurring_expiry_Set() const;
    bool is_recurring_expiry_Valid() const;

    QString getRecurringFrequency() const;
    void setRecurringFrequency(const QString &recurring_frequency);
    bool is_recurring_frequency_Set() const;
    bool is_recurring_frequency_Valid() const;

    QString getSdkAppId() const;
    void setSdkAppId(const QString &sdk_app_id);
    bool is_sdk_app_id_Set() const;
    bool is_sdk_app_id_Valid() const;

    QString getSdkEncData() const;
    void setSdkEncData(const QString &sdk_enc_data);
    bool is_sdk_enc_data_Set() const;
    bool is_sdk_enc_data_Valid() const;

    OAISDKEphemPubKey getSdkEphemPubKey() const;
    void setSdkEphemPubKey(const OAISDKEphemPubKey &sdk_ephem_pub_key);
    bool is_sdk_ephem_pub_key_Set() const;
    bool is_sdk_ephem_pub_key_Valid() const;

    qint32 getSdkMaxTimeout() const;
    void setSdkMaxTimeout(const qint32 &sdk_max_timeout);
    bool is_sdk_max_timeout_Set() const;
    bool is_sdk_max_timeout_Valid() const;

    QString getSdkReferenceNumber() const;
    void setSdkReferenceNumber(const QString &sdk_reference_number);
    bool is_sdk_reference_number_Set() const;
    bool is_sdk_reference_number_Valid() const;

    QString getSdkTransId() const;
    void setSdkTransId(const QString &sdk_trans_id);
    bool is_sdk_trans_id_Set() const;
    bool is_sdk_trans_id_Valid() const;

    QString getSdkVersion() const;
    void setSdkVersion(const QString &sdk_version);
    bool is_sdk_version_Set() const;
    bool is_sdk_version_Valid() const;

    QString getThreeDsCompInd() const;
    void setThreeDsCompInd(const QString &three_ds_comp_ind);
    bool is_three_ds_comp_ind_Set() const;
    bool is_three_ds_comp_ind_Valid() const;

    QString getThreeDsRequestorAuthenticationInd() const;
    void setThreeDsRequestorAuthenticationInd(const QString &three_ds_requestor_authentication_ind);
    bool is_three_ds_requestor_authentication_ind_Set() const;
    bool is_three_ds_requestor_authentication_ind_Valid() const;

    OAIThreeDSRequestorAuthenticationInfo getThreeDsRequestorAuthenticationInfo() const;
    void setThreeDsRequestorAuthenticationInfo(const OAIThreeDSRequestorAuthenticationInfo &three_ds_requestor_authentication_info);
    bool is_three_ds_requestor_authentication_info_Set() const;
    bool is_three_ds_requestor_authentication_info_Valid() const;

    QString getThreeDsRequestorChallengeInd() const;
    void setThreeDsRequestorChallengeInd(const QString &three_ds_requestor_challenge_ind);
    bool is_three_ds_requestor_challenge_ind_Set() const;
    bool is_three_ds_requestor_challenge_ind_Valid() const;

    QString getThreeDsRequestorId() const;
    void setThreeDsRequestorId(const QString &three_ds_requestor_id);
    bool is_three_ds_requestor_id_Set() const;
    bool is_three_ds_requestor_id_Valid() const;

    QString getThreeDsRequestorName() const;
    void setThreeDsRequestorName(const QString &three_ds_requestor_name);
    bool is_three_ds_requestor_name_Set() const;
    bool is_three_ds_requestor_name_Valid() const;

    OAIThreeDSRequestorPriorAuthenticationInfo getThreeDsRequestorPriorAuthenticationInfo() const;
    void setThreeDsRequestorPriorAuthenticationInfo(const OAIThreeDSRequestorPriorAuthenticationInfo &three_ds_requestor_prior_authentication_info);
    bool is_three_ds_requestor_prior_authentication_info_Set() const;
    bool is_three_ds_requestor_prior_authentication_info_Valid() const;

    QString getThreeDsRequestorUrl() const;
    void setThreeDsRequestorUrl(const QString &three_ds_requestor_url);
    bool is_three_ds_requestor_url_Set() const;
    bool is_three_ds_requestor_url_Valid() const;

    QString getTransType() const;
    void setTransType(const QString &trans_type);
    bool is_trans_type_Set() const;
    bool is_trans_type_Valid() const;

    QString getTransactionType() const;
    void setTransactionType(const QString &transaction_type);
    bool is_transaction_type_Set() const;
    bool is_transaction_type_Valid() const;

    QString getWhiteListStatus() const;
    void setWhiteListStatus(const QString &white_list_status);
    bool is_white_list_status_Set() const;
    bool is_white_list_status_Valid() const;

    OAIPhone getWorkPhone() const;
    void setWorkPhone(const OAIPhone &work_phone);
    bool is_work_phone_Set() const;
    bool is_work_phone_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAcctInfo m_acct_info;
    bool m_acct_info_isSet;
    bool m_acct_info_isValid;

    QString m_acct_type;
    bool m_acct_type_isSet;
    bool m_acct_type_isValid;

    QString m_acquirer_bin;
    bool m_acquirer_bin_isSet;
    bool m_acquirer_bin_isValid;

    QString m_acquirer_merchant_id;
    bool m_acquirer_merchant_id_isSet;
    bool m_acquirer_merchant_id_isValid;

    QString m_addr_match;
    bool m_addr_match_isSet;
    bool m_addr_match_isValid;

    bool m_authentication_only;
    bool m_authentication_only_isSet;
    bool m_authentication_only_isValid;

    QString m_challenge_indicator;
    bool m_challenge_indicator_isSet;
    bool m_challenge_indicator_isValid;

    QString m_device_channel;
    bool m_device_channel_isSet;
    bool m_device_channel_isValid;

    OAIDeviceRenderOptions m_device_render_options;
    bool m_device_render_options_isSet;
    bool m_device_render_options_isValid;

    OAIPhone m_home_phone;
    bool m_home_phone_isSet;
    bool m_home_phone_isValid;

    QString m_mcc;
    bool m_mcc_isSet;
    bool m_mcc_isValid;

    QString m_merchant_name;
    bool m_merchant_name_isSet;
    bool m_merchant_name_isValid;

    QString m_message_version;
    bool m_message_version_isSet;
    bool m_message_version_isValid;

    OAIPhone m_mobile_phone;
    bool m_mobile_phone_isSet;
    bool m_mobile_phone_isValid;

    QString m_notification_url;
    bool m_notification_url_isSet;
    bool m_notification_url_isValid;

    bool m_pay_token_ind;
    bool m_pay_token_ind_isSet;
    bool m_pay_token_ind_isValid;

    QString m_payment_authentication_use_case;
    bool m_payment_authentication_use_case_isSet;
    bool m_payment_authentication_use_case_isValid;

    QString m_purchase_instal_data;
    bool m_purchase_instal_data_isSet;
    bool m_purchase_instal_data_isValid;

    QString m_recurring_expiry;
    bool m_recurring_expiry_isSet;
    bool m_recurring_expiry_isValid;

    QString m_recurring_frequency;
    bool m_recurring_frequency_isSet;
    bool m_recurring_frequency_isValid;

    QString m_sdk_app_id;
    bool m_sdk_app_id_isSet;
    bool m_sdk_app_id_isValid;

    QString m_sdk_enc_data;
    bool m_sdk_enc_data_isSet;
    bool m_sdk_enc_data_isValid;

    OAISDKEphemPubKey m_sdk_ephem_pub_key;
    bool m_sdk_ephem_pub_key_isSet;
    bool m_sdk_ephem_pub_key_isValid;

    qint32 m_sdk_max_timeout;
    bool m_sdk_max_timeout_isSet;
    bool m_sdk_max_timeout_isValid;

    QString m_sdk_reference_number;
    bool m_sdk_reference_number_isSet;
    bool m_sdk_reference_number_isValid;

    QString m_sdk_trans_id;
    bool m_sdk_trans_id_isSet;
    bool m_sdk_trans_id_isValid;

    QString m_sdk_version;
    bool m_sdk_version_isSet;
    bool m_sdk_version_isValid;

    QString m_three_ds_comp_ind;
    bool m_three_ds_comp_ind_isSet;
    bool m_three_ds_comp_ind_isValid;

    QString m_three_ds_requestor_authentication_ind;
    bool m_three_ds_requestor_authentication_ind_isSet;
    bool m_three_ds_requestor_authentication_ind_isValid;

    OAIThreeDSRequestorAuthenticationInfo m_three_ds_requestor_authentication_info;
    bool m_three_ds_requestor_authentication_info_isSet;
    bool m_three_ds_requestor_authentication_info_isValid;

    QString m_three_ds_requestor_challenge_ind;
    bool m_three_ds_requestor_challenge_ind_isSet;
    bool m_three_ds_requestor_challenge_ind_isValid;

    QString m_three_ds_requestor_id;
    bool m_three_ds_requestor_id_isSet;
    bool m_three_ds_requestor_id_isValid;

    QString m_three_ds_requestor_name;
    bool m_three_ds_requestor_name_isSet;
    bool m_three_ds_requestor_name_isValid;

    OAIThreeDSRequestorPriorAuthenticationInfo m_three_ds_requestor_prior_authentication_info;
    bool m_three_ds_requestor_prior_authentication_info_isSet;
    bool m_three_ds_requestor_prior_authentication_info_isValid;

    QString m_three_ds_requestor_url;
    bool m_three_ds_requestor_url_isSet;
    bool m_three_ds_requestor_url_isValid;

    QString m_trans_type;
    bool m_trans_type_isSet;
    bool m_trans_type_isValid;

    QString m_transaction_type;
    bool m_transaction_type_isSet;
    bool m_transaction_type_isValid;

    QString m_white_list_status;
    bool m_white_list_status_isSet;
    bool m_white_list_status_isValid;

    OAIPhone m_work_phone;
    bool m_work_phone_isSet;
    bool m_work_phone_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIThreeDS2RequestData)

#endif // OAIThreeDS2RequestData_H
