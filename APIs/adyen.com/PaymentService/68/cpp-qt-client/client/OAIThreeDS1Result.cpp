/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v68/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDS1Result.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDS1Result::OAIThreeDS1Result(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDS1Result::OAIThreeDS1Result() {
    this->initializeModel();
}

OAIThreeDS1Result::~OAIThreeDS1Result() {}

void OAIThreeDS1Result::initializeModel() {

    m_cavv_isSet = false;
    m_cavv_isValid = false;

    m_cavv_algorithm_isSet = false;
    m_cavv_algorithm_isValid = false;

    m_eci_isSet = false;
    m_eci_isValid = false;

    m_three_d_authenticated_response_isSet = false;
    m_three_d_authenticated_response_isValid = false;

    m_three_d_offered_response_isSet = false;
    m_three_d_offered_response_isValid = false;

    m_xid_isSet = false;
    m_xid_isValid = false;
}

void OAIThreeDS1Result::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDS1Result::fromJsonObject(QJsonObject json) {

    m_cavv_isValid = ::OpenAPI::fromJsonValue(m_cavv, json[QString("cavv")]);
    m_cavv_isSet = !json[QString("cavv")].isNull() && m_cavv_isValid;

    m_cavv_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cavv_algorithm, json[QString("cavvAlgorithm")]);
    m_cavv_algorithm_isSet = !json[QString("cavvAlgorithm")].isNull() && m_cavv_algorithm_isValid;

    m_eci_isValid = ::OpenAPI::fromJsonValue(m_eci, json[QString("eci")]);
    m_eci_isSet = !json[QString("eci")].isNull() && m_eci_isValid;

    m_three_d_authenticated_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_authenticated_response, json[QString("threeDAuthenticatedResponse")]);
    m_three_d_authenticated_response_isSet = !json[QString("threeDAuthenticatedResponse")].isNull() && m_three_d_authenticated_response_isValid;

    m_three_d_offered_response_isValid = ::OpenAPI::fromJsonValue(m_three_d_offered_response, json[QString("threeDOfferedResponse")]);
    m_three_d_offered_response_isSet = !json[QString("threeDOfferedResponse")].isNull() && m_three_d_offered_response_isValid;

    m_xid_isValid = ::OpenAPI::fromJsonValue(m_xid, json[QString("xid")]);
    m_xid_isSet = !json[QString("xid")].isNull() && m_xid_isValid;
}

QString OAIThreeDS1Result::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDS1Result::asJsonObject() const {
    QJsonObject obj;
    if (m_cavv_isSet) {
        obj.insert(QString("cavv"), ::OpenAPI::toJsonValue(m_cavv));
    }
    if (m_cavv_algorithm_isSet) {
        obj.insert(QString("cavvAlgorithm"), ::OpenAPI::toJsonValue(m_cavv_algorithm));
    }
    if (m_eci_isSet) {
        obj.insert(QString("eci"), ::OpenAPI::toJsonValue(m_eci));
    }
    if (m_three_d_authenticated_response_isSet) {
        obj.insert(QString("threeDAuthenticatedResponse"), ::OpenAPI::toJsonValue(m_three_d_authenticated_response));
    }
    if (m_three_d_offered_response_isSet) {
        obj.insert(QString("threeDOfferedResponse"), ::OpenAPI::toJsonValue(m_three_d_offered_response));
    }
    if (m_xid_isSet) {
        obj.insert(QString("xid"), ::OpenAPI::toJsonValue(m_xid));
    }
    return obj;
}

QString OAIThreeDS1Result::getCavv() const {
    return m_cavv;
}
void OAIThreeDS1Result::setCavv(const QString &cavv) {
    m_cavv = cavv;
    m_cavv_isSet = true;
}

bool OAIThreeDS1Result::is_cavv_Set() const{
    return m_cavv_isSet;
}

bool OAIThreeDS1Result::is_cavv_Valid() const{
    return m_cavv_isValid;
}

QString OAIThreeDS1Result::getCavvAlgorithm() const {
    return m_cavv_algorithm;
}
void OAIThreeDS1Result::setCavvAlgorithm(const QString &cavv_algorithm) {
    m_cavv_algorithm = cavv_algorithm;
    m_cavv_algorithm_isSet = true;
}

bool OAIThreeDS1Result::is_cavv_algorithm_Set() const{
    return m_cavv_algorithm_isSet;
}

bool OAIThreeDS1Result::is_cavv_algorithm_Valid() const{
    return m_cavv_algorithm_isValid;
}

QString OAIThreeDS1Result::getEci() const {
    return m_eci;
}
void OAIThreeDS1Result::setEci(const QString &eci) {
    m_eci = eci;
    m_eci_isSet = true;
}

bool OAIThreeDS1Result::is_eci_Set() const{
    return m_eci_isSet;
}

bool OAIThreeDS1Result::is_eci_Valid() const{
    return m_eci_isValid;
}

QString OAIThreeDS1Result::getThreeDAuthenticatedResponse() const {
    return m_three_d_authenticated_response;
}
void OAIThreeDS1Result::setThreeDAuthenticatedResponse(const QString &three_d_authenticated_response) {
    m_three_d_authenticated_response = three_d_authenticated_response;
    m_three_d_authenticated_response_isSet = true;
}

bool OAIThreeDS1Result::is_three_d_authenticated_response_Set() const{
    return m_three_d_authenticated_response_isSet;
}

bool OAIThreeDS1Result::is_three_d_authenticated_response_Valid() const{
    return m_three_d_authenticated_response_isValid;
}

QString OAIThreeDS1Result::getThreeDOfferedResponse() const {
    return m_three_d_offered_response;
}
void OAIThreeDS1Result::setThreeDOfferedResponse(const QString &three_d_offered_response) {
    m_three_d_offered_response = three_d_offered_response;
    m_three_d_offered_response_isSet = true;
}

bool OAIThreeDS1Result::is_three_d_offered_response_Set() const{
    return m_three_d_offered_response_isSet;
}

bool OAIThreeDS1Result::is_three_d_offered_response_Valid() const{
    return m_three_d_offered_response_isValid;
}

QString OAIThreeDS1Result::getXid() const {
    return m_xid;
}
void OAIThreeDS1Result::setXid(const QString &xid) {
    m_xid = xid;
    m_xid_isSet = true;
}

bool OAIThreeDS1Result::is_xid_Set() const{
    return m_xid_isSet;
}

bool OAIThreeDS1Result::is_xid_Valid() const{
    return m_xid_isValid;
}

bool OAIThreeDS1Result::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cavv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_authenticated_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_d_offered_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDS1Result::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
