/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v68/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v68/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 68
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhone::OAIPhone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhone::OAIPhone() {
    this->initializeModel();
}

OAIPhone::~OAIPhone() {}

void OAIPhone::initializeModel() {

    m_cc_isSet = false;
    m_cc_isValid = false;

    m_subscriber_isSet = false;
    m_subscriber_isValid = false;
}

void OAIPhone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhone::fromJsonObject(QJsonObject json) {

    m_cc_isValid = ::OpenAPI::fromJsonValue(m_cc, json[QString("cc")]);
    m_cc_isSet = !json[QString("cc")].isNull() && m_cc_isValid;

    m_subscriber_isValid = ::OpenAPI::fromJsonValue(m_subscriber, json[QString("subscriber")]);
    m_subscriber_isSet = !json[QString("subscriber")].isNull() && m_subscriber_isValid;
}

QString OAIPhone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhone::asJsonObject() const {
    QJsonObject obj;
    if (m_cc_isSet) {
        obj.insert(QString("cc"), ::OpenAPI::toJsonValue(m_cc));
    }
    if (m_subscriber_isSet) {
        obj.insert(QString("subscriber"), ::OpenAPI::toJsonValue(m_subscriber));
    }
    return obj;
}

QString OAIPhone::getCc() const {
    return m_cc;
}
void OAIPhone::setCc(const QString &cc) {
    m_cc = cc;
    m_cc_isSet = true;
}

bool OAIPhone::is_cc_Set() const{
    return m_cc_isSet;
}

bool OAIPhone::is_cc_Valid() const{
    return m_cc_isValid;
}

QString OAIPhone::getSubscriber() const {
    return m_subscriber;
}
void OAIPhone::setSubscriber(const QString &subscriber) {
    m_subscriber = subscriber;
    m_subscriber_isSet = true;
}

bool OAIPhone::is_subscriber_Set() const{
    return m_subscriber_isSet;
}

bool OAIPhone::is_subscriber_Valid() const{
    return m_subscriber_isValid;
}

bool OAIPhone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriber_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
