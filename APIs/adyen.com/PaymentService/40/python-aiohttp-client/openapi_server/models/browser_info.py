# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrowserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_header: str=None, color_depth: int=None, java_enabled: bool=None, java_script_enabled: bool=True, language: str=None, screen_height: int=None, screen_width: int=None, time_zone_offset: int=None, user_agent: str=None):
        """BrowserInfo - a model defined in OpenAPI

        :param accept_header: The accept_header of this BrowserInfo.
        :param color_depth: The color_depth of this BrowserInfo.
        :param java_enabled: The java_enabled of this BrowserInfo.
        :param java_script_enabled: The java_script_enabled of this BrowserInfo.
        :param language: The language of this BrowserInfo.
        :param screen_height: The screen_height of this BrowserInfo.
        :param screen_width: The screen_width of this BrowserInfo.
        :param time_zone_offset: The time_zone_offset of this BrowserInfo.
        :param user_agent: The user_agent of this BrowserInfo.
        """
        self.openapi_types = {
            'accept_header': str,
            'color_depth': int,
            'java_enabled': bool,
            'java_script_enabled': bool,
            'language': str,
            'screen_height': int,
            'screen_width': int,
            'time_zone_offset': int,
            'user_agent': str
        }

        self.attribute_map = {
            'accept_header': 'acceptHeader',
            'color_depth': 'colorDepth',
            'java_enabled': 'javaEnabled',
            'java_script_enabled': 'javaScriptEnabled',
            'language': 'language',
            'screen_height': 'screenHeight',
            'screen_width': 'screenWidth',
            'time_zone_offset': 'timeZoneOffset',
            'user_agent': 'userAgent'
        }

        self._accept_header = accept_header
        self._color_depth = color_depth
        self._java_enabled = java_enabled
        self._java_script_enabled = java_script_enabled
        self._language = language
        self._screen_height = screen_height
        self._screen_width = screen_width
        self._time_zone_offset = time_zone_offset
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrowserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrowserInfo of this BrowserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_header(self):
        """Gets the accept_header of this BrowserInfo.

        The accept header value of the shopper's browser.

        :return: The accept_header of this BrowserInfo.
        :rtype: str
        """
        return self._accept_header

    @accept_header.setter
    def accept_header(self, accept_header):
        """Sets the accept_header of this BrowserInfo.

        The accept header value of the shopper's browser.

        :param accept_header: The accept_header of this BrowserInfo.
        :type accept_header: str
        """
        if accept_header is None:
            raise ValueError("Invalid value for `accept_header`, must not be `None`")

        self._accept_header = accept_header

    @property
    def color_depth(self):
        """Gets the color_depth of this BrowserInfo.

        The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.

        :return: The color_depth of this BrowserInfo.
        :rtype: int
        """
        return self._color_depth

    @color_depth.setter
    def color_depth(self, color_depth):
        """Sets the color_depth of this BrowserInfo.

        The color depth of the shopper's browser in bits per pixel. This should be obtained by using the browser's `screen.colorDepth` property. Accepted values: 1, 4, 8, 15, 16, 24, 30, 32 or 48 bit color depth.

        :param color_depth: The color_depth of this BrowserInfo.
        :type color_depth: int
        """
        if color_depth is None:
            raise ValueError("Invalid value for `color_depth`, must not be `None`")

        self._color_depth = color_depth

    @property
    def java_enabled(self):
        """Gets the java_enabled of this BrowserInfo.

        Boolean value indicating if the shopper's browser is able to execute Java.

        :return: The java_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._java_enabled

    @java_enabled.setter
    def java_enabled(self, java_enabled):
        """Sets the java_enabled of this BrowserInfo.

        Boolean value indicating if the shopper's browser is able to execute Java.

        :param java_enabled: The java_enabled of this BrowserInfo.
        :type java_enabled: bool
        """
        if java_enabled is None:
            raise ValueError("Invalid value for `java_enabled`, must not be `None`")

        self._java_enabled = java_enabled

    @property
    def java_script_enabled(self):
        """Gets the java_script_enabled of this BrowserInfo.

        Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.

        :return: The java_script_enabled of this BrowserInfo.
        :rtype: bool
        """
        return self._java_script_enabled

    @java_script_enabled.setter
    def java_script_enabled(self, java_script_enabled):
        """Sets the java_script_enabled of this BrowserInfo.

        Boolean value indicating if the shopper's browser is able to execute JavaScript. A default 'true' value is assumed if the field is not present.

        :param java_script_enabled: The java_script_enabled of this BrowserInfo.
        :type java_script_enabled: bool
        """

        self._java_script_enabled = java_script_enabled

    @property
    def language(self):
        """Gets the language of this BrowserInfo.

        The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).

        :return: The language of this BrowserInfo.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BrowserInfo.

        The `navigator.language` value of the shopper's browser (as defined in IETF BCP 47).

        :param language: The language of this BrowserInfo.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def screen_height(self):
        """Gets the screen_height of this BrowserInfo.

        The total height of the shopper's device screen in pixels.

        :return: The screen_height of this BrowserInfo.
        :rtype: int
        """
        return self._screen_height

    @screen_height.setter
    def screen_height(self, screen_height):
        """Sets the screen_height of this BrowserInfo.

        The total height of the shopper's device screen in pixels.

        :param screen_height: The screen_height of this BrowserInfo.
        :type screen_height: int
        """
        if screen_height is None:
            raise ValueError("Invalid value for `screen_height`, must not be `None`")

        self._screen_height = screen_height

    @property
    def screen_width(self):
        """Gets the screen_width of this BrowserInfo.

        The total width of the shopper's device screen in pixels.

        :return: The screen_width of this BrowserInfo.
        :rtype: int
        """
        return self._screen_width

    @screen_width.setter
    def screen_width(self, screen_width):
        """Sets the screen_width of this BrowserInfo.

        The total width of the shopper's device screen in pixels.

        :param screen_width: The screen_width of this BrowserInfo.
        :type screen_width: int
        """
        if screen_width is None:
            raise ValueError("Invalid value for `screen_width`, must not be `None`")

        self._screen_width = screen_width

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this BrowserInfo.

        Time difference between UTC time and the shopper's browser local time, in minutes.

        :return: The time_zone_offset of this BrowserInfo.
        :rtype: int
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this BrowserInfo.

        Time difference between UTC time and the shopper's browser local time, in minutes.

        :param time_zone_offset: The time_zone_offset of this BrowserInfo.
        :type time_zone_offset: int
        """
        if time_zone_offset is None:
            raise ValueError("Invalid value for `time_zone_offset`, must not be `None`")

        self._time_zone_offset = time_zone_offset

    @property
    def user_agent(self):
        """Gets the user_agent of this BrowserInfo.

        The user agent value of the shopper's browser.

        :return: The user_agent of this BrowserInfo.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this BrowserInfo.

        The user agent value of the shopper's browser.

        :param user_agent: The user_agent of this BrowserInfo.
        :type user_agent: str
        """
        if user_agent is None:
            raise ValueError("Invalid value for `user_agent`, must not be `None`")

        self._user_agent = user_agent
