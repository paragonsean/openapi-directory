# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalDataCommon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, requested_test_error_response_code: str=None, allow_partial_auth: str=None, authorisation_type: str=None, custom_routing_flag: str=None, industry_usage: str=None, manual_capture: str=None, network_tx_reference: str=None, overwrite_brand: str=None, sub_merchant_city: str=None, sub_merchant_country: str=None, sub_merchant_id: str=None, sub_merchant_name: str=None, sub_merchant_postal_code: str=None, sub_merchant_state: str=None, sub_merchant_street: str=None, sub_merchant_tax_id: str=None):
        """AdditionalDataCommon - a model defined in OpenAPI

        :param requested_test_error_response_code: The requested_test_error_response_code of this AdditionalDataCommon.
        :param allow_partial_auth: The allow_partial_auth of this AdditionalDataCommon.
        :param authorisation_type: The authorisation_type of this AdditionalDataCommon.
        :param custom_routing_flag: The custom_routing_flag of this AdditionalDataCommon.
        :param industry_usage: The industry_usage of this AdditionalDataCommon.
        :param manual_capture: The manual_capture of this AdditionalDataCommon.
        :param network_tx_reference: The network_tx_reference of this AdditionalDataCommon.
        :param overwrite_brand: The overwrite_brand of this AdditionalDataCommon.
        :param sub_merchant_city: The sub_merchant_city of this AdditionalDataCommon.
        :param sub_merchant_country: The sub_merchant_country of this AdditionalDataCommon.
        :param sub_merchant_id: The sub_merchant_id of this AdditionalDataCommon.
        :param sub_merchant_name: The sub_merchant_name of this AdditionalDataCommon.
        :param sub_merchant_postal_code: The sub_merchant_postal_code of this AdditionalDataCommon.
        :param sub_merchant_state: The sub_merchant_state of this AdditionalDataCommon.
        :param sub_merchant_street: The sub_merchant_street of this AdditionalDataCommon.
        :param sub_merchant_tax_id: The sub_merchant_tax_id of this AdditionalDataCommon.
        """
        self.openapi_types = {
            'requested_test_error_response_code': str,
            'allow_partial_auth': str,
            'authorisation_type': str,
            'custom_routing_flag': str,
            'industry_usage': str,
            'manual_capture': str,
            'network_tx_reference': str,
            'overwrite_brand': str,
            'sub_merchant_city': str,
            'sub_merchant_country': str,
            'sub_merchant_id': str,
            'sub_merchant_name': str,
            'sub_merchant_postal_code': str,
            'sub_merchant_state': str,
            'sub_merchant_street': str,
            'sub_merchant_tax_id': str
        }

        self.attribute_map = {
            'requested_test_error_response_code': 'RequestedTestErrorResponseCode',
            'allow_partial_auth': 'allowPartialAuth',
            'authorisation_type': 'authorisationType',
            'custom_routing_flag': 'customRoutingFlag',
            'industry_usage': 'industryUsage',
            'manual_capture': 'manualCapture',
            'network_tx_reference': 'networkTxReference',
            'overwrite_brand': 'overwriteBrand',
            'sub_merchant_city': 'subMerchantCity',
            'sub_merchant_country': 'subMerchantCountry',
            'sub_merchant_id': 'subMerchantID',
            'sub_merchant_name': 'subMerchantName',
            'sub_merchant_postal_code': 'subMerchantPostalCode',
            'sub_merchant_state': 'subMerchantState',
            'sub_merchant_street': 'subMerchantStreet',
            'sub_merchant_tax_id': 'subMerchantTaxId'
        }

        self._requested_test_error_response_code = requested_test_error_response_code
        self._allow_partial_auth = allow_partial_auth
        self._authorisation_type = authorisation_type
        self._custom_routing_flag = custom_routing_flag
        self._industry_usage = industry_usage
        self._manual_capture = manual_capture
        self._network_tx_reference = network_tx_reference
        self._overwrite_brand = overwrite_brand
        self._sub_merchant_city = sub_merchant_city
        self._sub_merchant_country = sub_merchant_country
        self._sub_merchant_id = sub_merchant_id
        self._sub_merchant_name = sub_merchant_name
        self._sub_merchant_postal_code = sub_merchant_postal_code
        self._sub_merchant_state = sub_merchant_state
        self._sub_merchant_street = sub_merchant_street
        self._sub_merchant_tax_id = sub_merchant_tax_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalDataCommon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdditionalDataCommon of this AdditionalDataCommon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def requested_test_error_response_code(self):
        """Gets the requested_test_error_response_code of this AdditionalDataCommon.

        Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.

        :return: The requested_test_error_response_code of this AdditionalDataCommon.
        :rtype: str
        """
        return self._requested_test_error_response_code

    @requested_test_error_response_code.setter
    def requested_test_error_response_code(self, requested_test_error_response_code):
        """Sets the requested_test_error_response_code of this AdditionalDataCommon.

        Triggers test scenarios that allow to replicate certain communication errors.  Allowed values: * **NO_CONNECTION_AVAILABLE** – There wasn't a connection available to service the outgoing communication. This is a transient, retriable error since no messaging could be initiated to an issuing system (or third-party acquiring system). Therefore, the header Transient-Error: true is returned in the response. A subsequent request using the same idempotency key will be processed as if it was the first request. * **IOEXCEPTION_RECEIVED** – Something went wrong during transmission of the message or receiving the response. This is a classified as non-transient because the message could have been received by the issuing party and been acted upon. No transient error header is returned. If using idempotency, the (error) response is stored as the final result for the idempotency key. Subsequent messages with the same idempotency key not be processed beyond returning the stored response.

        :param requested_test_error_response_code: The requested_test_error_response_code of this AdditionalDataCommon.
        :type requested_test_error_response_code: str
        """

        self._requested_test_error_response_code = requested_test_error_response_code

    @property
    def allow_partial_auth(self):
        """Gets the allow_partial_auth of this AdditionalDataCommon.

        Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team.

        :return: The allow_partial_auth of this AdditionalDataCommon.
        :rtype: str
        """
        return self._allow_partial_auth

    @allow_partial_auth.setter
    def allow_partial_auth(self, allow_partial_auth):
        """Sets the allow_partial_auth of this AdditionalDataCommon.

        Set to true to authorise a part of the requested amount in case the cardholder does not have enough funds on their account.  If a payment was partially authorised, the response includes resultCode: PartiallyAuthorised and the authorised amount in additionalData.authorisedAmountValue. To enable this functionality, contact our Support Team.

        :param allow_partial_auth: The allow_partial_auth of this AdditionalDataCommon.
        :type allow_partial_auth: str
        """

        self._allow_partial_auth = allow_partial_auth

    @property
    def authorisation_type(self):
        """Gets the authorisation_type of this AdditionalDataCommon.

        Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation.

        :return: The authorisation_type of this AdditionalDataCommon.
        :rtype: str
        """
        return self._authorisation_type

    @authorisation_type.setter
    def authorisation_type(self, authorisation_type):
        """Sets the authorisation_type of this AdditionalDataCommon.

        Flags a card payment request for either pre-authorisation or final authorisation. For more information, refer to [Authorisation types](https://docs.adyen.com/online-payments/adjust-authorisation#authorisation-types).  Allowed values: * **PreAuth** – flags the payment request to be handled as a pre-authorisation. * **FinalAuth** – flags the payment request to be handled as a final authorisation.

        :param authorisation_type: The authorisation_type of this AdditionalDataCommon.
        :type authorisation_type: str
        """

        self._authorisation_type = authorisation_type

    @property
    def custom_routing_flag(self):
        """Gets the custom_routing_flag of this AdditionalDataCommon.

        Allows you to determine or override the acquirer account that should be used for the transaction.  If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.  To enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).

        :return: The custom_routing_flag of this AdditionalDataCommon.
        :rtype: str
        """
        return self._custom_routing_flag

    @custom_routing_flag.setter
    def custom_routing_flag(self, custom_routing_flag):
        """Sets the custom_routing_flag of this AdditionalDataCommon.

        Allows you to determine or override the acquirer account that should be used for the transaction.  If you need to process a payment with an acquirer different from a default one, you can set up a corresponding configuration on the Adyen payments platform. Then you can pass a custom routing flag in a payment request's additional data to target a specific acquirer.  To enable this functionality, contact [Support](https://www.adyen.help/hc/en-us/requests/new).

        :param custom_routing_flag: The custom_routing_flag of this AdditionalDataCommon.
        :type custom_routing_flag: str
        """

        self._custom_routing_flag = custom_routing_flag

    @property
    def industry_usage(self):
        """Gets the industry_usage of this AdditionalDataCommon.

        In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.

        :return: The industry_usage of this AdditionalDataCommon.
        :rtype: str
        """
        return self._industry_usage

    @industry_usage.setter
    def industry_usage(self, industry_usage):
        """Sets the industry_usage of this AdditionalDataCommon.

        In case of [asynchronous authorisation adjustment](https://docs.adyen.com/online-payments/adjust-authorisation#adjust-authorisation), this field denotes why the additional payment is made.  Possible values:   * **NoShow**: An incremental charge is carried out because of a no-show for a guaranteed reservation.   * **DelayedCharge**: An incremental charge is carried out to process an additional payment after the original services have been rendered and the respective payment has been processed.

        :param industry_usage: The industry_usage of this AdditionalDataCommon.
        :type industry_usage: str
        """
        allowed_values = ["NoShow", "DelayedCharge"]  # noqa: E501
        if industry_usage not in allowed_values:
            raise ValueError(
                "Invalid value for `industry_usage` ({0}), must be one of {1}"
                .format(industry_usage, allowed_values)
            )

        self._industry_usage = industry_usage

    @property
    def manual_capture(self):
        """Gets the manual_capture of this AdditionalDataCommon.

        Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.

        :return: The manual_capture of this AdditionalDataCommon.
        :rtype: str
        """
        return self._manual_capture

    @manual_capture.setter
    def manual_capture(self, manual_capture):
        """Sets the manual_capture of this AdditionalDataCommon.

        Set to **true** to require [manual capture](https://docs.adyen.com/online-payments/capture) for the transaction.

        :param manual_capture: The manual_capture of this AdditionalDataCommon.
        :type manual_capture: str
        """

        self._manual_capture = manual_capture

    @property
    def network_tx_reference(self):
        """Gets the network_tx_reference of this AdditionalDataCommon.

        Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.  Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.  Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.  Make sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.

        :return: The network_tx_reference of this AdditionalDataCommon.
        :rtype: str
        """
        return self._network_tx_reference

    @network_tx_reference.setter
    def network_tx_reference(self, network_tx_reference):
        """Sets the network_tx_reference of this AdditionalDataCommon.

        Allows you to link the transaction to the original or previous one in a subscription/card-on-file chain. This field is required for token-based transactions where Adyen does not tokenize the card.  Transaction identifier from card schemes, for example, Mastercard Trace ID or the Visa Transaction ID.  Submit the original transaction ID of the contract in your payment request if you are not tokenizing card details with Adyen and are making a merchant-initiated transaction (MIT) for subsequent charges.  Make sure you are sending `shopperInteraction` **ContAuth** and `recurringProcessingModel` **Subscription** or **UnscheduledCardOnFile** to ensure that the transaction is classified as MIT.

        :param network_tx_reference: The network_tx_reference of this AdditionalDataCommon.
        :type network_tx_reference: str
        """

        self._network_tx_reference = network_tx_reference

    @property
    def overwrite_brand(self):
        """Gets the overwrite_brand of this AdditionalDataCommon.

        Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.

        :return: The overwrite_brand of this AdditionalDataCommon.
        :rtype: str
        """
        return self._overwrite_brand

    @overwrite_brand.setter
    def overwrite_brand(self, overwrite_brand):
        """Sets the overwrite_brand of this AdditionalDataCommon.

        Boolean indicator that can be optionally used for performing debit transactions on combo cards (for example, combo cards in Brazil). This is not mandatory but we recommend that you set this to true if you want to use the `selectedBrand` value to specify how to process the transaction.

        :param overwrite_brand: The overwrite_brand of this AdditionalDataCommon.
        :type overwrite_brand: str
        """

        self._overwrite_brand = overwrite_brand

    @property
    def sub_merchant_city(self):
        """Gets the sub_merchant_city of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 13 characters.

        :return: The sub_merchant_city of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_city

    @sub_merchant_city.setter
    def sub_merchant_city(self, sub_merchant_city):
        """Sets the sub_merchant_city of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the city of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 13 characters.

        :param sub_merchant_city: The sub_merchant_city of this AdditionalDataCommon.
        :type sub_merchant_city: str
        """

        self._sub_merchant_city = sub_merchant_city

    @property
    def sub_merchant_country(self):
        """Gets the sub_merchant_country of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant's address. * Format: alpha-numeric. * Fixed length: 3 characters.

        :return: The sub_merchant_country of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_country

    @sub_merchant_country.setter
    def sub_merchant_country(self, sub_merchant_country):
        """Sets the sub_merchant_country of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the three-letter country code of the actual merchant's address. * Format: alpha-numeric. * Fixed length: 3 characters.

        :param sub_merchant_country: The sub_merchant_country of this AdditionalDataCommon.
        :type sub_merchant_country: str
        """

        self._sub_merchant_country = sub_merchant_country

    @property
    def sub_merchant_id(self):
        """Gets the sub_merchant_id of this AdditionalDataCommon.

        This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.

        :return: The sub_merchant_id of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_id

    @sub_merchant_id.setter
    def sub_merchant_id(self, sub_merchant_id):
        """Sets the sub_merchant_id of this AdditionalDataCommon.

        This field contains an identifier of the actual merchant when a transaction is submitted via a payment facilitator. The payment facilitator must send in this unique ID.  A unique identifier per submerchant that is required if the transaction is performed by a registered payment facilitator. * Format: alpha-numeric. * Fixed length: 15 characters.

        :param sub_merchant_id: The sub_merchant_id of this AdditionalDataCommon.
        :type sub_merchant_id: str
        """

        self._sub_merchant_id = sub_merchant_id

    @property
    def sub_merchant_name(self):
        """Gets the sub_merchant_name of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters.

        :return: The sub_merchant_name of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_name

    @sub_merchant_name.setter
    def sub_merchant_name(self, sub_merchant_name):
        """Sets the sub_merchant_name of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the name of the actual merchant. * Format: alpha-numeric. * Maximum length: 22 characters.

        :param sub_merchant_name: The sub_merchant_name of this AdditionalDataCommon.
        :type sub_merchant_name: str
        """

        self._sub_merchant_name = sub_merchant_name

    @property
    def sub_merchant_postal_code(self):
        """Gets the sub_merchant_postal_code of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 10 characters.

        :return: The sub_merchant_postal_code of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_postal_code

    @sub_merchant_postal_code.setter
    def sub_merchant_postal_code(self, sub_merchant_postal_code):
        """Sets the sub_merchant_postal_code of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the postal code of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 10 characters.

        :param sub_merchant_postal_code: The sub_merchant_postal_code of this AdditionalDataCommon.
        :type sub_merchant_postal_code: str
        """

        self._sub_merchant_postal_code = sub_merchant_postal_code

    @property
    def sub_merchant_state(self):
        """Gets the sub_merchant_state of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 3 characters.

        :return: The sub_merchant_state of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_state

    @sub_merchant_state.setter
    def sub_merchant_state(self, sub_merchant_state):
        """Sets the sub_merchant_state of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator, and if applicable to the country. This field must contain the state code of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 3 characters.

        :param sub_merchant_state: The sub_merchant_state of this AdditionalDataCommon.
        :type sub_merchant_state: str
        """

        self._sub_merchant_state = sub_merchant_state

    @property
    def sub_merchant_street(self):
        """Gets the sub_merchant_street of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 60 characters.

        :return: The sub_merchant_street of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_street

    @sub_merchant_street.setter
    def sub_merchant_street(self, sub_merchant_street):
        """Sets the sub_merchant_street of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the street of the actual merchant's address. * Format: alpha-numeric. * Maximum length: 60 characters.

        :param sub_merchant_street: The sub_merchant_street of this AdditionalDataCommon.
        :type sub_merchant_street: str
        """

        self._sub_merchant_street = sub_merchant_street

    @property
    def sub_merchant_tax_id(self):
        """Gets the sub_merchant_tax_id of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters.

        :return: The sub_merchant_tax_id of this AdditionalDataCommon.
        :rtype: str
        """
        return self._sub_merchant_tax_id

    @sub_merchant_tax_id.setter
    def sub_merchant_tax_id(self, sub_merchant_tax_id):
        """Sets the sub_merchant_tax_id of this AdditionalDataCommon.

        This field is required if the transaction is performed by a registered payment facilitator. This field must contain the tax ID of the actual merchant. * Format: alpha-numeric. * Fixed length: 11 or 14 characters.

        :param sub_merchant_tax_id: The sub_merchant_tax_id of this AdditionalDataCommon.
        :type sub_merchant_tax_id: str
        """

        self._sub_merchant_tax_id = sub_merchant_tax_id
