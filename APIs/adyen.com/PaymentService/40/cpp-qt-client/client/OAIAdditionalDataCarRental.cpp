/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v40/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v40/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalDataCarRental.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalDataCarRental::OAIAdditionalDataCarRental(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalDataCarRental::OAIAdditionalDataCarRental() {
    this->initializeModel();
}

OAIAdditionalDataCarRental::~OAIAdditionalDataCarRental() {}

void OAIAdditionalDataCarRental::initializeModel() {

    m_car_rental_check_out_date_isSet = false;
    m_car_rental_check_out_date_isValid = false;

    m_car_rental_customer_service_toll_free_number_isSet = false;
    m_car_rental_customer_service_toll_free_number_isValid = false;

    m_car_rental_days_rented_isSet = false;
    m_car_rental_days_rented_isValid = false;

    m_car_rental_fuel_charges_isSet = false;
    m_car_rental_fuel_charges_isValid = false;

    m_car_rental_insurance_charges_isSet = false;
    m_car_rental_insurance_charges_isValid = false;

    m_car_rental_location_city_isSet = false;
    m_car_rental_location_city_isValid = false;

    m_car_rental_location_country_isSet = false;
    m_car_rental_location_country_isValid = false;

    m_car_rental_location_state_province_isSet = false;
    m_car_rental_location_state_province_isValid = false;

    m_car_rental_no_show_indicator_isSet = false;
    m_car_rental_no_show_indicator_isValid = false;

    m_car_rental_one_way_drop_off_charges_isSet = false;
    m_car_rental_one_way_drop_off_charges_isValid = false;

    m_car_rental_rate_isSet = false;
    m_car_rental_rate_isValid = false;

    m_car_rental_rate_indicator_isSet = false;
    m_car_rental_rate_indicator_isValid = false;

    m_car_rental_rental_agreement_number_isSet = false;
    m_car_rental_rental_agreement_number_isValid = false;

    m_car_rental_rental_class_id_isSet = false;
    m_car_rental_rental_class_id_isValid = false;

    m_car_rental_renter_name_isSet = false;
    m_car_rental_renter_name_isValid = false;

    m_car_rental_return_city_isSet = false;
    m_car_rental_return_city_isValid = false;

    m_car_rental_return_country_isSet = false;
    m_car_rental_return_country_isValid = false;

    m_car_rental_return_date_isSet = false;
    m_car_rental_return_date_isValid = false;

    m_car_rental_return_location_id_isSet = false;
    m_car_rental_return_location_id_isValid = false;

    m_car_rental_return_state_province_isSet = false;
    m_car_rental_return_state_province_isValid = false;

    m_car_rental_tax_exempt_indicator_isSet = false;
    m_car_rental_tax_exempt_indicator_isValid = false;

    m_travel_entertainment_auth_data_duration_isSet = false;
    m_travel_entertainment_auth_data_duration_isValid = false;

    m_travel_entertainment_auth_data_market_isSet = false;
    m_travel_entertainment_auth_data_market_isValid = false;
}

void OAIAdditionalDataCarRental::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalDataCarRental::fromJsonObject(QJsonObject json) {

    m_car_rental_check_out_date_isValid = ::OpenAPI::fromJsonValue(m_car_rental_check_out_date, json[QString("carRental.checkOutDate")]);
    m_car_rental_check_out_date_isSet = !json[QString("carRental.checkOutDate")].isNull() && m_car_rental_check_out_date_isValid;

    m_car_rental_customer_service_toll_free_number_isValid = ::OpenAPI::fromJsonValue(m_car_rental_customer_service_toll_free_number, json[QString("carRental.customerServiceTollFreeNumber")]);
    m_car_rental_customer_service_toll_free_number_isSet = !json[QString("carRental.customerServiceTollFreeNumber")].isNull() && m_car_rental_customer_service_toll_free_number_isValid;

    m_car_rental_days_rented_isValid = ::OpenAPI::fromJsonValue(m_car_rental_days_rented, json[QString("carRental.daysRented")]);
    m_car_rental_days_rented_isSet = !json[QString("carRental.daysRented")].isNull() && m_car_rental_days_rented_isValid;

    m_car_rental_fuel_charges_isValid = ::OpenAPI::fromJsonValue(m_car_rental_fuel_charges, json[QString("carRental.fuelCharges")]);
    m_car_rental_fuel_charges_isSet = !json[QString("carRental.fuelCharges")].isNull() && m_car_rental_fuel_charges_isValid;

    m_car_rental_insurance_charges_isValid = ::OpenAPI::fromJsonValue(m_car_rental_insurance_charges, json[QString("carRental.insuranceCharges")]);
    m_car_rental_insurance_charges_isSet = !json[QString("carRental.insuranceCharges")].isNull() && m_car_rental_insurance_charges_isValid;

    m_car_rental_location_city_isValid = ::OpenAPI::fromJsonValue(m_car_rental_location_city, json[QString("carRental.locationCity")]);
    m_car_rental_location_city_isSet = !json[QString("carRental.locationCity")].isNull() && m_car_rental_location_city_isValid;

    m_car_rental_location_country_isValid = ::OpenAPI::fromJsonValue(m_car_rental_location_country, json[QString("carRental.locationCountry")]);
    m_car_rental_location_country_isSet = !json[QString("carRental.locationCountry")].isNull() && m_car_rental_location_country_isValid;

    m_car_rental_location_state_province_isValid = ::OpenAPI::fromJsonValue(m_car_rental_location_state_province, json[QString("carRental.locationStateProvince")]);
    m_car_rental_location_state_province_isSet = !json[QString("carRental.locationStateProvince")].isNull() && m_car_rental_location_state_province_isValid;

    m_car_rental_no_show_indicator_isValid = ::OpenAPI::fromJsonValue(m_car_rental_no_show_indicator, json[QString("carRental.noShowIndicator")]);
    m_car_rental_no_show_indicator_isSet = !json[QString("carRental.noShowIndicator")].isNull() && m_car_rental_no_show_indicator_isValid;

    m_car_rental_one_way_drop_off_charges_isValid = ::OpenAPI::fromJsonValue(m_car_rental_one_way_drop_off_charges, json[QString("carRental.oneWayDropOffCharges")]);
    m_car_rental_one_way_drop_off_charges_isSet = !json[QString("carRental.oneWayDropOffCharges")].isNull() && m_car_rental_one_way_drop_off_charges_isValid;

    m_car_rental_rate_isValid = ::OpenAPI::fromJsonValue(m_car_rental_rate, json[QString("carRental.rate")]);
    m_car_rental_rate_isSet = !json[QString("carRental.rate")].isNull() && m_car_rental_rate_isValid;

    m_car_rental_rate_indicator_isValid = ::OpenAPI::fromJsonValue(m_car_rental_rate_indicator, json[QString("carRental.rateIndicator")]);
    m_car_rental_rate_indicator_isSet = !json[QString("carRental.rateIndicator")].isNull() && m_car_rental_rate_indicator_isValid;

    m_car_rental_rental_agreement_number_isValid = ::OpenAPI::fromJsonValue(m_car_rental_rental_agreement_number, json[QString("carRental.rentalAgreementNumber")]);
    m_car_rental_rental_agreement_number_isSet = !json[QString("carRental.rentalAgreementNumber")].isNull() && m_car_rental_rental_agreement_number_isValid;

    m_car_rental_rental_class_id_isValid = ::OpenAPI::fromJsonValue(m_car_rental_rental_class_id, json[QString("carRental.rentalClassId")]);
    m_car_rental_rental_class_id_isSet = !json[QString("carRental.rentalClassId")].isNull() && m_car_rental_rental_class_id_isValid;

    m_car_rental_renter_name_isValid = ::OpenAPI::fromJsonValue(m_car_rental_renter_name, json[QString("carRental.renterName")]);
    m_car_rental_renter_name_isSet = !json[QString("carRental.renterName")].isNull() && m_car_rental_renter_name_isValid;

    m_car_rental_return_city_isValid = ::OpenAPI::fromJsonValue(m_car_rental_return_city, json[QString("carRental.returnCity")]);
    m_car_rental_return_city_isSet = !json[QString("carRental.returnCity")].isNull() && m_car_rental_return_city_isValid;

    m_car_rental_return_country_isValid = ::OpenAPI::fromJsonValue(m_car_rental_return_country, json[QString("carRental.returnCountry")]);
    m_car_rental_return_country_isSet = !json[QString("carRental.returnCountry")].isNull() && m_car_rental_return_country_isValid;

    m_car_rental_return_date_isValid = ::OpenAPI::fromJsonValue(m_car_rental_return_date, json[QString("carRental.returnDate")]);
    m_car_rental_return_date_isSet = !json[QString("carRental.returnDate")].isNull() && m_car_rental_return_date_isValid;

    m_car_rental_return_location_id_isValid = ::OpenAPI::fromJsonValue(m_car_rental_return_location_id, json[QString("carRental.returnLocationId")]);
    m_car_rental_return_location_id_isSet = !json[QString("carRental.returnLocationId")].isNull() && m_car_rental_return_location_id_isValid;

    m_car_rental_return_state_province_isValid = ::OpenAPI::fromJsonValue(m_car_rental_return_state_province, json[QString("carRental.returnStateProvince")]);
    m_car_rental_return_state_province_isSet = !json[QString("carRental.returnStateProvince")].isNull() && m_car_rental_return_state_province_isValid;

    m_car_rental_tax_exempt_indicator_isValid = ::OpenAPI::fromJsonValue(m_car_rental_tax_exempt_indicator, json[QString("carRental.taxExemptIndicator")]);
    m_car_rental_tax_exempt_indicator_isSet = !json[QString("carRental.taxExemptIndicator")].isNull() && m_car_rental_tax_exempt_indicator_isValid;

    m_travel_entertainment_auth_data_duration_isValid = ::OpenAPI::fromJsonValue(m_travel_entertainment_auth_data_duration, json[QString("travelEntertainmentAuthData.duration")]);
    m_travel_entertainment_auth_data_duration_isSet = !json[QString("travelEntertainmentAuthData.duration")].isNull() && m_travel_entertainment_auth_data_duration_isValid;

    m_travel_entertainment_auth_data_market_isValid = ::OpenAPI::fromJsonValue(m_travel_entertainment_auth_data_market, json[QString("travelEntertainmentAuthData.market")]);
    m_travel_entertainment_auth_data_market_isSet = !json[QString("travelEntertainmentAuthData.market")].isNull() && m_travel_entertainment_auth_data_market_isValid;
}

QString OAIAdditionalDataCarRental::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalDataCarRental::asJsonObject() const {
    QJsonObject obj;
    if (m_car_rental_check_out_date_isSet) {
        obj.insert(QString("carRental.checkOutDate"), ::OpenAPI::toJsonValue(m_car_rental_check_out_date));
    }
    if (m_car_rental_customer_service_toll_free_number_isSet) {
        obj.insert(QString("carRental.customerServiceTollFreeNumber"), ::OpenAPI::toJsonValue(m_car_rental_customer_service_toll_free_number));
    }
    if (m_car_rental_days_rented_isSet) {
        obj.insert(QString("carRental.daysRented"), ::OpenAPI::toJsonValue(m_car_rental_days_rented));
    }
    if (m_car_rental_fuel_charges_isSet) {
        obj.insert(QString("carRental.fuelCharges"), ::OpenAPI::toJsonValue(m_car_rental_fuel_charges));
    }
    if (m_car_rental_insurance_charges_isSet) {
        obj.insert(QString("carRental.insuranceCharges"), ::OpenAPI::toJsonValue(m_car_rental_insurance_charges));
    }
    if (m_car_rental_location_city_isSet) {
        obj.insert(QString("carRental.locationCity"), ::OpenAPI::toJsonValue(m_car_rental_location_city));
    }
    if (m_car_rental_location_country_isSet) {
        obj.insert(QString("carRental.locationCountry"), ::OpenAPI::toJsonValue(m_car_rental_location_country));
    }
    if (m_car_rental_location_state_province_isSet) {
        obj.insert(QString("carRental.locationStateProvince"), ::OpenAPI::toJsonValue(m_car_rental_location_state_province));
    }
    if (m_car_rental_no_show_indicator_isSet) {
        obj.insert(QString("carRental.noShowIndicator"), ::OpenAPI::toJsonValue(m_car_rental_no_show_indicator));
    }
    if (m_car_rental_one_way_drop_off_charges_isSet) {
        obj.insert(QString("carRental.oneWayDropOffCharges"), ::OpenAPI::toJsonValue(m_car_rental_one_way_drop_off_charges));
    }
    if (m_car_rental_rate_isSet) {
        obj.insert(QString("carRental.rate"), ::OpenAPI::toJsonValue(m_car_rental_rate));
    }
    if (m_car_rental_rate_indicator_isSet) {
        obj.insert(QString("carRental.rateIndicator"), ::OpenAPI::toJsonValue(m_car_rental_rate_indicator));
    }
    if (m_car_rental_rental_agreement_number_isSet) {
        obj.insert(QString("carRental.rentalAgreementNumber"), ::OpenAPI::toJsonValue(m_car_rental_rental_agreement_number));
    }
    if (m_car_rental_rental_class_id_isSet) {
        obj.insert(QString("carRental.rentalClassId"), ::OpenAPI::toJsonValue(m_car_rental_rental_class_id));
    }
    if (m_car_rental_renter_name_isSet) {
        obj.insert(QString("carRental.renterName"), ::OpenAPI::toJsonValue(m_car_rental_renter_name));
    }
    if (m_car_rental_return_city_isSet) {
        obj.insert(QString("carRental.returnCity"), ::OpenAPI::toJsonValue(m_car_rental_return_city));
    }
    if (m_car_rental_return_country_isSet) {
        obj.insert(QString("carRental.returnCountry"), ::OpenAPI::toJsonValue(m_car_rental_return_country));
    }
    if (m_car_rental_return_date_isSet) {
        obj.insert(QString("carRental.returnDate"), ::OpenAPI::toJsonValue(m_car_rental_return_date));
    }
    if (m_car_rental_return_location_id_isSet) {
        obj.insert(QString("carRental.returnLocationId"), ::OpenAPI::toJsonValue(m_car_rental_return_location_id));
    }
    if (m_car_rental_return_state_province_isSet) {
        obj.insert(QString("carRental.returnStateProvince"), ::OpenAPI::toJsonValue(m_car_rental_return_state_province));
    }
    if (m_car_rental_tax_exempt_indicator_isSet) {
        obj.insert(QString("carRental.taxExemptIndicator"), ::OpenAPI::toJsonValue(m_car_rental_tax_exempt_indicator));
    }
    if (m_travel_entertainment_auth_data_duration_isSet) {
        obj.insert(QString("travelEntertainmentAuthData.duration"), ::OpenAPI::toJsonValue(m_travel_entertainment_auth_data_duration));
    }
    if (m_travel_entertainment_auth_data_market_isSet) {
        obj.insert(QString("travelEntertainmentAuthData.market"), ::OpenAPI::toJsonValue(m_travel_entertainment_auth_data_market));
    }
    return obj;
}

QString OAIAdditionalDataCarRental::getCarRentalCheckOutDate() const {
    return m_car_rental_check_out_date;
}
void OAIAdditionalDataCarRental::setCarRentalCheckOutDate(const QString &car_rental_check_out_date) {
    m_car_rental_check_out_date = car_rental_check_out_date;
    m_car_rental_check_out_date_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_check_out_date_Set() const{
    return m_car_rental_check_out_date_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_check_out_date_Valid() const{
    return m_car_rental_check_out_date_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalCustomerServiceTollFreeNumber() const {
    return m_car_rental_customer_service_toll_free_number;
}
void OAIAdditionalDataCarRental::setCarRentalCustomerServiceTollFreeNumber(const QString &car_rental_customer_service_toll_free_number) {
    m_car_rental_customer_service_toll_free_number = car_rental_customer_service_toll_free_number;
    m_car_rental_customer_service_toll_free_number_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_customer_service_toll_free_number_Set() const{
    return m_car_rental_customer_service_toll_free_number_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_customer_service_toll_free_number_Valid() const{
    return m_car_rental_customer_service_toll_free_number_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalDaysRented() const {
    return m_car_rental_days_rented;
}
void OAIAdditionalDataCarRental::setCarRentalDaysRented(const QString &car_rental_days_rented) {
    m_car_rental_days_rented = car_rental_days_rented;
    m_car_rental_days_rented_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_days_rented_Set() const{
    return m_car_rental_days_rented_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_days_rented_Valid() const{
    return m_car_rental_days_rented_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalFuelCharges() const {
    return m_car_rental_fuel_charges;
}
void OAIAdditionalDataCarRental::setCarRentalFuelCharges(const QString &car_rental_fuel_charges) {
    m_car_rental_fuel_charges = car_rental_fuel_charges;
    m_car_rental_fuel_charges_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_fuel_charges_Set() const{
    return m_car_rental_fuel_charges_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_fuel_charges_Valid() const{
    return m_car_rental_fuel_charges_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalInsuranceCharges() const {
    return m_car_rental_insurance_charges;
}
void OAIAdditionalDataCarRental::setCarRentalInsuranceCharges(const QString &car_rental_insurance_charges) {
    m_car_rental_insurance_charges = car_rental_insurance_charges;
    m_car_rental_insurance_charges_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_insurance_charges_Set() const{
    return m_car_rental_insurance_charges_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_insurance_charges_Valid() const{
    return m_car_rental_insurance_charges_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalLocationCity() const {
    return m_car_rental_location_city;
}
void OAIAdditionalDataCarRental::setCarRentalLocationCity(const QString &car_rental_location_city) {
    m_car_rental_location_city = car_rental_location_city;
    m_car_rental_location_city_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_city_Set() const{
    return m_car_rental_location_city_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_city_Valid() const{
    return m_car_rental_location_city_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalLocationCountry() const {
    return m_car_rental_location_country;
}
void OAIAdditionalDataCarRental::setCarRentalLocationCountry(const QString &car_rental_location_country) {
    m_car_rental_location_country = car_rental_location_country;
    m_car_rental_location_country_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_country_Set() const{
    return m_car_rental_location_country_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_country_Valid() const{
    return m_car_rental_location_country_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalLocationStateProvince() const {
    return m_car_rental_location_state_province;
}
void OAIAdditionalDataCarRental::setCarRentalLocationStateProvince(const QString &car_rental_location_state_province) {
    m_car_rental_location_state_province = car_rental_location_state_province;
    m_car_rental_location_state_province_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_state_province_Set() const{
    return m_car_rental_location_state_province_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_location_state_province_Valid() const{
    return m_car_rental_location_state_province_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalNoShowIndicator() const {
    return m_car_rental_no_show_indicator;
}
void OAIAdditionalDataCarRental::setCarRentalNoShowIndicator(const QString &car_rental_no_show_indicator) {
    m_car_rental_no_show_indicator = car_rental_no_show_indicator;
    m_car_rental_no_show_indicator_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_no_show_indicator_Set() const{
    return m_car_rental_no_show_indicator_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_no_show_indicator_Valid() const{
    return m_car_rental_no_show_indicator_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalOneWayDropOffCharges() const {
    return m_car_rental_one_way_drop_off_charges;
}
void OAIAdditionalDataCarRental::setCarRentalOneWayDropOffCharges(const QString &car_rental_one_way_drop_off_charges) {
    m_car_rental_one_way_drop_off_charges = car_rental_one_way_drop_off_charges;
    m_car_rental_one_way_drop_off_charges_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_one_way_drop_off_charges_Set() const{
    return m_car_rental_one_way_drop_off_charges_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_one_way_drop_off_charges_Valid() const{
    return m_car_rental_one_way_drop_off_charges_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalRate() const {
    return m_car_rental_rate;
}
void OAIAdditionalDataCarRental::setCarRentalRate(const QString &car_rental_rate) {
    m_car_rental_rate = car_rental_rate;
    m_car_rental_rate_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_rate_Set() const{
    return m_car_rental_rate_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_rate_Valid() const{
    return m_car_rental_rate_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalRateIndicator() const {
    return m_car_rental_rate_indicator;
}
void OAIAdditionalDataCarRental::setCarRentalRateIndicator(const QString &car_rental_rate_indicator) {
    m_car_rental_rate_indicator = car_rental_rate_indicator;
    m_car_rental_rate_indicator_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_rate_indicator_Set() const{
    return m_car_rental_rate_indicator_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_rate_indicator_Valid() const{
    return m_car_rental_rate_indicator_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalRentalAgreementNumber() const {
    return m_car_rental_rental_agreement_number;
}
void OAIAdditionalDataCarRental::setCarRentalRentalAgreementNumber(const QString &car_rental_rental_agreement_number) {
    m_car_rental_rental_agreement_number = car_rental_rental_agreement_number;
    m_car_rental_rental_agreement_number_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_rental_agreement_number_Set() const{
    return m_car_rental_rental_agreement_number_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_rental_agreement_number_Valid() const{
    return m_car_rental_rental_agreement_number_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalRentalClassId() const {
    return m_car_rental_rental_class_id;
}
void OAIAdditionalDataCarRental::setCarRentalRentalClassId(const QString &car_rental_rental_class_id) {
    m_car_rental_rental_class_id = car_rental_rental_class_id;
    m_car_rental_rental_class_id_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_rental_class_id_Set() const{
    return m_car_rental_rental_class_id_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_rental_class_id_Valid() const{
    return m_car_rental_rental_class_id_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalRenterName() const {
    return m_car_rental_renter_name;
}
void OAIAdditionalDataCarRental::setCarRentalRenterName(const QString &car_rental_renter_name) {
    m_car_rental_renter_name = car_rental_renter_name;
    m_car_rental_renter_name_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_renter_name_Set() const{
    return m_car_rental_renter_name_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_renter_name_Valid() const{
    return m_car_rental_renter_name_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalReturnCity() const {
    return m_car_rental_return_city;
}
void OAIAdditionalDataCarRental::setCarRentalReturnCity(const QString &car_rental_return_city) {
    m_car_rental_return_city = car_rental_return_city;
    m_car_rental_return_city_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_city_Set() const{
    return m_car_rental_return_city_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_city_Valid() const{
    return m_car_rental_return_city_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalReturnCountry() const {
    return m_car_rental_return_country;
}
void OAIAdditionalDataCarRental::setCarRentalReturnCountry(const QString &car_rental_return_country) {
    m_car_rental_return_country = car_rental_return_country;
    m_car_rental_return_country_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_country_Set() const{
    return m_car_rental_return_country_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_country_Valid() const{
    return m_car_rental_return_country_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalReturnDate() const {
    return m_car_rental_return_date;
}
void OAIAdditionalDataCarRental::setCarRentalReturnDate(const QString &car_rental_return_date) {
    m_car_rental_return_date = car_rental_return_date;
    m_car_rental_return_date_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_date_Set() const{
    return m_car_rental_return_date_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_date_Valid() const{
    return m_car_rental_return_date_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalReturnLocationId() const {
    return m_car_rental_return_location_id;
}
void OAIAdditionalDataCarRental::setCarRentalReturnLocationId(const QString &car_rental_return_location_id) {
    m_car_rental_return_location_id = car_rental_return_location_id;
    m_car_rental_return_location_id_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_location_id_Set() const{
    return m_car_rental_return_location_id_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_location_id_Valid() const{
    return m_car_rental_return_location_id_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalReturnStateProvince() const {
    return m_car_rental_return_state_province;
}
void OAIAdditionalDataCarRental::setCarRentalReturnStateProvince(const QString &car_rental_return_state_province) {
    m_car_rental_return_state_province = car_rental_return_state_province;
    m_car_rental_return_state_province_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_state_province_Set() const{
    return m_car_rental_return_state_province_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_return_state_province_Valid() const{
    return m_car_rental_return_state_province_isValid;
}

QString OAIAdditionalDataCarRental::getCarRentalTaxExemptIndicator() const {
    return m_car_rental_tax_exempt_indicator;
}
void OAIAdditionalDataCarRental::setCarRentalTaxExemptIndicator(const QString &car_rental_tax_exempt_indicator) {
    m_car_rental_tax_exempt_indicator = car_rental_tax_exempt_indicator;
    m_car_rental_tax_exempt_indicator_isSet = true;
}

bool OAIAdditionalDataCarRental::is_car_rental_tax_exempt_indicator_Set() const{
    return m_car_rental_tax_exempt_indicator_isSet;
}

bool OAIAdditionalDataCarRental::is_car_rental_tax_exempt_indicator_Valid() const{
    return m_car_rental_tax_exempt_indicator_isValid;
}

QString OAIAdditionalDataCarRental::getTravelEntertainmentAuthDataDuration() const {
    return m_travel_entertainment_auth_data_duration;
}
void OAIAdditionalDataCarRental::setTravelEntertainmentAuthDataDuration(const QString &travel_entertainment_auth_data_duration) {
    m_travel_entertainment_auth_data_duration = travel_entertainment_auth_data_duration;
    m_travel_entertainment_auth_data_duration_isSet = true;
}

bool OAIAdditionalDataCarRental::is_travel_entertainment_auth_data_duration_Set() const{
    return m_travel_entertainment_auth_data_duration_isSet;
}

bool OAIAdditionalDataCarRental::is_travel_entertainment_auth_data_duration_Valid() const{
    return m_travel_entertainment_auth_data_duration_isValid;
}

QString OAIAdditionalDataCarRental::getTravelEntertainmentAuthDataMarket() const {
    return m_travel_entertainment_auth_data_market;
}
void OAIAdditionalDataCarRental::setTravelEntertainmentAuthDataMarket(const QString &travel_entertainment_auth_data_market) {
    m_travel_entertainment_auth_data_market = travel_entertainment_auth_data_market;
    m_travel_entertainment_auth_data_market_isSet = true;
}

bool OAIAdditionalDataCarRental::is_travel_entertainment_auth_data_market_Set() const{
    return m_travel_entertainment_auth_data_market_isSet;
}

bool OAIAdditionalDataCarRental::is_travel_entertainment_auth_data_market_Valid() const{
    return m_travel_entertainment_auth_data_market_isValid;
}

bool OAIAdditionalDataCarRental::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_car_rental_check_out_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_customer_service_toll_free_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_days_rented_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_fuel_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_insurance_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_location_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_location_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_location_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_no_show_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_one_way_drop_off_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_rate_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_rental_agreement_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_rental_class_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_renter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_return_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_return_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_return_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_return_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_return_state_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_car_rental_tax_exempt_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_entertainment_auth_data_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_travel_entertainment_auth_data_market_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalDataCarRental::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
