/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v40/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v40/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DeviceRenderOptions from './DeviceRenderOptions';
import SDKEphemPubKey from './SDKEphemPubKey';

/**
 * The ThreeDS2RequestData model module.
 * @module model/ThreeDS2RequestData
 * @version 40
 */
class ThreeDS2RequestData {
    /**
     * Constructs a new <code>ThreeDS2RequestData</code>.
     * @alias module:model/ThreeDS2RequestData
     * @param deviceChannel {String} The environment of the shopper. Allowed values: * `app` * `browser`
     */
    constructor(deviceChannel) { 
        
        ThreeDS2RequestData.initialize(this, deviceChannel);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, deviceChannel) { 
        obj['authenticationOnly'] = false;
        obj['deviceChannel'] = deviceChannel;
        obj['sdkMaxTimeout'] = 60;
    }

    /**
     * Constructs a <code>ThreeDS2RequestData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThreeDS2RequestData} obj Optional instance to populate.
     * @return {module:model/ThreeDS2RequestData} The populated <code>ThreeDS2RequestData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThreeDS2RequestData();

            if (data.hasOwnProperty('authenticationOnly')) {
                obj['authenticationOnly'] = ApiClient.convertToType(data['authenticationOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('challengeIndicator')) {
                obj['challengeIndicator'] = ApiClient.convertToType(data['challengeIndicator'], 'String');
            }
            if (data.hasOwnProperty('deviceChannel')) {
                obj['deviceChannel'] = ApiClient.convertToType(data['deviceChannel'], 'String');
            }
            if (data.hasOwnProperty('deviceRenderOptions')) {
                obj['deviceRenderOptions'] = DeviceRenderOptions.constructFromObject(data['deviceRenderOptions']);
            }
            if (data.hasOwnProperty('messageVersion')) {
                obj['messageVersion'] = ApiClient.convertToType(data['messageVersion'], 'String');
            }
            if (data.hasOwnProperty('notificationURL')) {
                obj['notificationURL'] = ApiClient.convertToType(data['notificationURL'], 'String');
            }
            if (data.hasOwnProperty('sdkAppID')) {
                obj['sdkAppID'] = ApiClient.convertToType(data['sdkAppID'], 'String');
            }
            if (data.hasOwnProperty('sdkEncData')) {
                obj['sdkEncData'] = ApiClient.convertToType(data['sdkEncData'], 'String');
            }
            if (data.hasOwnProperty('sdkEphemPubKey')) {
                obj['sdkEphemPubKey'] = SDKEphemPubKey.constructFromObject(data['sdkEphemPubKey']);
            }
            if (data.hasOwnProperty('sdkMaxTimeout')) {
                obj['sdkMaxTimeout'] = ApiClient.convertToType(data['sdkMaxTimeout'], 'Number');
            }
            if (data.hasOwnProperty('sdkReferenceNumber')) {
                obj['sdkReferenceNumber'] = ApiClient.convertToType(data['sdkReferenceNumber'], 'String');
            }
            if (data.hasOwnProperty('sdkTransID')) {
                obj['sdkTransID'] = ApiClient.convertToType(data['sdkTransID'], 'String');
            }
            if (data.hasOwnProperty('sdkVersion')) {
                obj['sdkVersion'] = ApiClient.convertToType(data['sdkVersion'], 'String');
            }
            if (data.hasOwnProperty('threeDSCompInd')) {
                obj['threeDSCompInd'] = ApiClient.convertToType(data['threeDSCompInd'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorID')) {
                obj['threeDSRequestorID'] = ApiClient.convertToType(data['threeDSRequestorID'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorName')) {
                obj['threeDSRequestorName'] = ApiClient.convertToType(data['threeDSRequestorName'], 'String');
            }
            if (data.hasOwnProperty('threeDSRequestorURL')) {
                obj['threeDSRequestorURL'] = ApiClient.convertToType(data['threeDSRequestorURL'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThreeDS2RequestData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThreeDS2RequestData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ThreeDS2RequestData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['challengeIndicator'] && !(typeof data['challengeIndicator'] === 'string' || data['challengeIndicator'] instanceof String)) {
            throw new Error("Expected the field `challengeIndicator` to be a primitive type in the JSON string but got " + data['challengeIndicator']);
        }
        // ensure the json data is a string
        if (data['deviceChannel'] && !(typeof data['deviceChannel'] === 'string' || data['deviceChannel'] instanceof String)) {
            throw new Error("Expected the field `deviceChannel` to be a primitive type in the JSON string but got " + data['deviceChannel']);
        }
        // validate the optional field `deviceRenderOptions`
        if (data['deviceRenderOptions']) { // data not null
          DeviceRenderOptions.validateJSON(data['deviceRenderOptions']);
        }
        // ensure the json data is a string
        if (data['messageVersion'] && !(typeof data['messageVersion'] === 'string' || data['messageVersion'] instanceof String)) {
            throw new Error("Expected the field `messageVersion` to be a primitive type in the JSON string but got " + data['messageVersion']);
        }
        // ensure the json data is a string
        if (data['notificationURL'] && !(typeof data['notificationURL'] === 'string' || data['notificationURL'] instanceof String)) {
            throw new Error("Expected the field `notificationURL` to be a primitive type in the JSON string but got " + data['notificationURL']);
        }
        // ensure the json data is a string
        if (data['sdkAppID'] && !(typeof data['sdkAppID'] === 'string' || data['sdkAppID'] instanceof String)) {
            throw new Error("Expected the field `sdkAppID` to be a primitive type in the JSON string but got " + data['sdkAppID']);
        }
        // ensure the json data is a string
        if (data['sdkEncData'] && !(typeof data['sdkEncData'] === 'string' || data['sdkEncData'] instanceof String)) {
            throw new Error("Expected the field `sdkEncData` to be a primitive type in the JSON string but got " + data['sdkEncData']);
        }
        // validate the optional field `sdkEphemPubKey`
        if (data['sdkEphemPubKey']) { // data not null
          SDKEphemPubKey.validateJSON(data['sdkEphemPubKey']);
        }
        // ensure the json data is a string
        if (data['sdkReferenceNumber'] && !(typeof data['sdkReferenceNumber'] === 'string' || data['sdkReferenceNumber'] instanceof String)) {
            throw new Error("Expected the field `sdkReferenceNumber` to be a primitive type in the JSON string but got " + data['sdkReferenceNumber']);
        }
        // ensure the json data is a string
        if (data['sdkTransID'] && !(typeof data['sdkTransID'] === 'string' || data['sdkTransID'] instanceof String)) {
            throw new Error("Expected the field `sdkTransID` to be a primitive type in the JSON string but got " + data['sdkTransID']);
        }
        // ensure the json data is a string
        if (data['sdkVersion'] && !(typeof data['sdkVersion'] === 'string' || data['sdkVersion'] instanceof String)) {
            throw new Error("Expected the field `sdkVersion` to be a primitive type in the JSON string but got " + data['sdkVersion']);
        }
        // ensure the json data is a string
        if (data['threeDSCompInd'] && !(typeof data['threeDSCompInd'] === 'string' || data['threeDSCompInd'] instanceof String)) {
            throw new Error("Expected the field `threeDSCompInd` to be a primitive type in the JSON string but got " + data['threeDSCompInd']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorID'] && !(typeof data['threeDSRequestorID'] === 'string' || data['threeDSRequestorID'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorID` to be a primitive type in the JSON string but got " + data['threeDSRequestorID']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorName'] && !(typeof data['threeDSRequestorName'] === 'string' || data['threeDSRequestorName'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorName` to be a primitive type in the JSON string but got " + data['threeDSRequestorName']);
        }
        // ensure the json data is a string
        if (data['threeDSRequestorURL'] && !(typeof data['threeDSRequestorURL'] === 'string' || data['threeDSRequestorURL'] instanceof String)) {
            throw new Error("Expected the field `threeDSRequestorURL` to be a primitive type in the JSON string but got " + data['threeDSRequestorURL']);
        }

        return true;
    }


}

ThreeDS2RequestData.RequiredProperties = ["deviceChannel"];

/**
 * If set to true, you will only perform the [3D Secure 2 authentication](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only), and not the payment authorisation.
 * @member {Boolean} authenticationOnly
 * @default false
 */
ThreeDS2RequestData.prototype['authenticationOnly'] = false;

/**
 * Possibility to specify a preference for receiving a challenge from the issuer. Allowed values: * `noPreference` * `requestNoChallenge` * `requestChallenge` * `requestChallengeAsMandate` 
 * @member {module:model/ThreeDS2RequestData.ChallengeIndicatorEnum} challengeIndicator
 */
ThreeDS2RequestData.prototype['challengeIndicator'] = undefined;

/**
 * The environment of the shopper. Allowed values: * `app` * `browser`
 * @member {String} deviceChannel
 */
ThreeDS2RequestData.prototype['deviceChannel'] = undefined;

/**
 * Display options for the 3D Secure 2 SDK. Optional and only for `deviceChannel` **app**.
 * @member {module:model/DeviceRenderOptions} deviceRenderOptions
 */
ThreeDS2RequestData.prototype['deviceRenderOptions'] = undefined;

/**
 * The `messageVersion` value indicating the 3D Secure 2 protocol version.
 * @member {String} messageVersion
 */
ThreeDS2RequestData.prototype['messageVersion'] = undefined;

/**
 * URL to where the issuer should send the `CRes`. Required if you are not using components for `channel` **Web** or if you are using classic integration `deviceChannel` **browser**.
 * @member {String} notificationURL
 */
ThreeDS2RequestData.prototype['notificationURL'] = undefined;

/**
 * The `sdkAppID` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.
 * @member {String} sdkAppID
 */
ThreeDS2RequestData.prototype['sdkAppID'] = undefined;

/**
 * The `sdkEncData` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.
 * @member {String} sdkEncData
 */
ThreeDS2RequestData.prototype['sdkEncData'] = undefined;

/**
 * The `sdkEphemPubKey` value as received from the 3D Secure 2 SDK. Required for `deviceChannel` set to **app**.
 * @member {module:model/SDKEphemPubKey} sdkEphemPubKey
 */
ThreeDS2RequestData.prototype['sdkEphemPubKey'] = undefined;

/**
 * The maximum amount of time in minutes for the 3D Secure 2 authentication process. Optional and only for `deviceChannel` set to **app**. Defaults to **60** minutes.
 * @member {Number} sdkMaxTimeout
 * @default 60
 */
ThreeDS2RequestData.prototype['sdkMaxTimeout'] = 60;

/**
 * The `sdkReferenceNumber` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.
 * @member {String} sdkReferenceNumber
 */
ThreeDS2RequestData.prototype['sdkReferenceNumber'] = undefined;

/**
 * The `sdkTransID` value as received from the 3D Secure 2 SDK. Only for `deviceChannel` set to **app**.
 * @member {String} sdkTransID
 */
ThreeDS2RequestData.prototype['sdkTransID'] = undefined;

/**
 * Version of the 3D Secure 2 mobile SDK.  Only for `deviceChannel` set to **app**.
 * @member {String} sdkVersion
 */
ThreeDS2RequestData.prototype['sdkVersion'] = undefined;

/**
 * Completion indicator for the device fingerprinting.
 * @member {String} threeDSCompInd
 */
ThreeDS2RequestData.prototype['threeDSCompInd'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor identifier assigned by the Directory Server when you enrol for 3D Secure 2.
 * @member {String} threeDSRequestorID
 */
ThreeDS2RequestData.prototype['threeDSRequestorID'] = undefined;

/**
 * Required for [authentication-only integration](https://docs.adyen.com/online-payments/3d-secure/other-3ds-flows/authentication-only) for Visa. Unique 3D Secure requestor name assigned by the Directory Server when you enrol for 3D Secure 2.
 * @member {String} threeDSRequestorName
 */
ThreeDS2RequestData.prototype['threeDSRequestorName'] = undefined;

/**
 * URL of the (customer service) website that will be shown to the shopper in case of technical errors during the 3D Secure 2 process.
 * @member {String} threeDSRequestorURL
 */
ThreeDS2RequestData.prototype['threeDSRequestorURL'] = undefined;





/**
 * Allowed values for the <code>challengeIndicator</code> property.
 * @enum {String}
 * @readonly
 */
ThreeDS2RequestData['ChallengeIndicatorEnum'] = {

    /**
     * value: "noPreference"
     * @const
     */
    "noPreference": "noPreference",

    /**
     * value: "requestNoChallenge"
     * @const
     */
    "requestNoChallenge": "requestNoChallenge",

    /**
     * value: "requestChallenge"
     * @const
     */
    "requestChallenge": "requestChallenge",

    /**
     * value: "requestChallengeAsMandate"
     * @const
     */
    "requestChallengeAsMandate": "requestChallengeAsMandate"
};



export default ThreeDS2RequestData;

