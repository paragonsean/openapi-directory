/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v40/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v40/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdditionalDataAirline model module.
 * @module model/AdditionalDataAirline
 * @version 40
 */
class AdditionalDataAirline {
    /**
     * Constructs a new <code>AdditionalDataAirline</code>.
     * @alias module:model/AdditionalDataAirline
     * @param airlinePassengerName {String} The passenger's name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.
     */
    constructor(airlinePassengerName) { 
        
        AdditionalDataAirline.initialize(this, airlinePassengerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, airlinePassengerName) { 
        obj['airline.passenger_name'] = airlinePassengerName;
    }

    /**
     * Constructs a <code>AdditionalDataAirline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdditionalDataAirline} obj Optional instance to populate.
     * @return {module:model/AdditionalDataAirline} The populated <code>AdditionalDataAirline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdditionalDataAirline();

            if (data.hasOwnProperty('airline.agency_invoice_number')) {
                obj['airline.agency_invoice_number'] = ApiClient.convertToType(data['airline.agency_invoice_number'], 'String');
            }
            if (data.hasOwnProperty('airline.agency_plan_name')) {
                obj['airline.agency_plan_name'] = ApiClient.convertToType(data['airline.agency_plan_name'], 'String');
            }
            if (data.hasOwnProperty('airline.airline_code')) {
                obj['airline.airline_code'] = ApiClient.convertToType(data['airline.airline_code'], 'String');
            }
            if (data.hasOwnProperty('airline.airline_designator_code')) {
                obj['airline.airline_designator_code'] = ApiClient.convertToType(data['airline.airline_designator_code'], 'String');
            }
            if (data.hasOwnProperty('airline.boarding_fee')) {
                obj['airline.boarding_fee'] = ApiClient.convertToType(data['airline.boarding_fee'], 'String');
            }
            if (data.hasOwnProperty('airline.computerized_reservation_system')) {
                obj['airline.computerized_reservation_system'] = ApiClient.convertToType(data['airline.computerized_reservation_system'], 'String');
            }
            if (data.hasOwnProperty('airline.customer_reference_number')) {
                obj['airline.customer_reference_number'] = ApiClient.convertToType(data['airline.customer_reference_number'], 'String');
            }
            if (data.hasOwnProperty('airline.document_type')) {
                obj['airline.document_type'] = ApiClient.convertToType(data['airline.document_type'], 'String');
            }
            if (data.hasOwnProperty('airline.flight_date')) {
                obj['airline.flight_date'] = ApiClient.convertToType(data['airline.flight_date'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.carrier_code')) {
                obj['airline.leg.carrier_code'] = ApiClient.convertToType(data['airline.leg.carrier_code'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.class_of_travel')) {
                obj['airline.leg.class_of_travel'] = ApiClient.convertToType(data['airline.leg.class_of_travel'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.date_of_travel')) {
                obj['airline.leg.date_of_travel'] = ApiClient.convertToType(data['airline.leg.date_of_travel'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.depart_airport')) {
                obj['airline.leg.depart_airport'] = ApiClient.convertToType(data['airline.leg.depart_airport'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.depart_tax')) {
                obj['airline.leg.depart_tax'] = ApiClient.convertToType(data['airline.leg.depart_tax'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.destination_code')) {
                obj['airline.leg.destination_code'] = ApiClient.convertToType(data['airline.leg.destination_code'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.fare_base_code')) {
                obj['airline.leg.fare_base_code'] = ApiClient.convertToType(data['airline.leg.fare_base_code'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.flight_number')) {
                obj['airline.leg.flight_number'] = ApiClient.convertToType(data['airline.leg.flight_number'], 'String');
            }
            if (data.hasOwnProperty('airline.leg.stop_over_code')) {
                obj['airline.leg.stop_over_code'] = ApiClient.convertToType(data['airline.leg.stop_over_code'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger.date_of_birth')) {
                obj['airline.passenger.date_of_birth'] = ApiClient.convertToType(data['airline.passenger.date_of_birth'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger.first_name')) {
                obj['airline.passenger.first_name'] = ApiClient.convertToType(data['airline.passenger.first_name'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger.last_name')) {
                obj['airline.passenger.last_name'] = ApiClient.convertToType(data['airline.passenger.last_name'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger.telephone_number')) {
                obj['airline.passenger.telephone_number'] = ApiClient.convertToType(data['airline.passenger.telephone_number'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger.traveller_type')) {
                obj['airline.passenger.traveller_type'] = ApiClient.convertToType(data['airline.passenger.traveller_type'], 'String');
            }
            if (data.hasOwnProperty('airline.passenger_name')) {
                obj['airline.passenger_name'] = ApiClient.convertToType(data['airline.passenger_name'], 'String');
            }
            if (data.hasOwnProperty('airline.ticket_issue_address')) {
                obj['airline.ticket_issue_address'] = ApiClient.convertToType(data['airline.ticket_issue_address'], 'String');
            }
            if (data.hasOwnProperty('airline.ticket_number')) {
                obj['airline.ticket_number'] = ApiClient.convertToType(data['airline.ticket_number'], 'String');
            }
            if (data.hasOwnProperty('airline.travel_agency_code')) {
                obj['airline.travel_agency_code'] = ApiClient.convertToType(data['airline.travel_agency_code'], 'String');
            }
            if (data.hasOwnProperty('airline.travel_agency_name')) {
                obj['airline.travel_agency_name'] = ApiClient.convertToType(data['airline.travel_agency_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdditionalDataAirline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdditionalDataAirline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AdditionalDataAirline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['airline.agency_invoice_number'] && !(typeof data['airline.agency_invoice_number'] === 'string' || data['airline.agency_invoice_number'] instanceof String)) {
            throw new Error("Expected the field `airline.agency_invoice_number` to be a primitive type in the JSON string but got " + data['airline.agency_invoice_number']);
        }
        // ensure the json data is a string
        if (data['airline.agency_plan_name'] && !(typeof data['airline.agency_plan_name'] === 'string' || data['airline.agency_plan_name'] instanceof String)) {
            throw new Error("Expected the field `airline.agency_plan_name` to be a primitive type in the JSON string but got " + data['airline.agency_plan_name']);
        }
        // ensure the json data is a string
        if (data['airline.airline_code'] && !(typeof data['airline.airline_code'] === 'string' || data['airline.airline_code'] instanceof String)) {
            throw new Error("Expected the field `airline.airline_code` to be a primitive type in the JSON string but got " + data['airline.airline_code']);
        }
        // ensure the json data is a string
        if (data['airline.airline_designator_code'] && !(typeof data['airline.airline_designator_code'] === 'string' || data['airline.airline_designator_code'] instanceof String)) {
            throw new Error("Expected the field `airline.airline_designator_code` to be a primitive type in the JSON string but got " + data['airline.airline_designator_code']);
        }
        // ensure the json data is a string
        if (data['airline.boarding_fee'] && !(typeof data['airline.boarding_fee'] === 'string' || data['airline.boarding_fee'] instanceof String)) {
            throw new Error("Expected the field `airline.boarding_fee` to be a primitive type in the JSON string but got " + data['airline.boarding_fee']);
        }
        // ensure the json data is a string
        if (data['airline.computerized_reservation_system'] && !(typeof data['airline.computerized_reservation_system'] === 'string' || data['airline.computerized_reservation_system'] instanceof String)) {
            throw new Error("Expected the field `airline.computerized_reservation_system` to be a primitive type in the JSON string but got " + data['airline.computerized_reservation_system']);
        }
        // ensure the json data is a string
        if (data['airline.customer_reference_number'] && !(typeof data['airline.customer_reference_number'] === 'string' || data['airline.customer_reference_number'] instanceof String)) {
            throw new Error("Expected the field `airline.customer_reference_number` to be a primitive type in the JSON string but got " + data['airline.customer_reference_number']);
        }
        // ensure the json data is a string
        if (data['airline.document_type'] && !(typeof data['airline.document_type'] === 'string' || data['airline.document_type'] instanceof String)) {
            throw new Error("Expected the field `airline.document_type` to be a primitive type in the JSON string but got " + data['airline.document_type']);
        }
        // ensure the json data is a string
        if (data['airline.flight_date'] && !(typeof data['airline.flight_date'] === 'string' || data['airline.flight_date'] instanceof String)) {
            throw new Error("Expected the field `airline.flight_date` to be a primitive type in the JSON string but got " + data['airline.flight_date']);
        }
        // ensure the json data is a string
        if (data['airline.leg.carrier_code'] && !(typeof data['airline.leg.carrier_code'] === 'string' || data['airline.leg.carrier_code'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.carrier_code` to be a primitive type in the JSON string but got " + data['airline.leg.carrier_code']);
        }
        // ensure the json data is a string
        if (data['airline.leg.class_of_travel'] && !(typeof data['airline.leg.class_of_travel'] === 'string' || data['airline.leg.class_of_travel'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.class_of_travel` to be a primitive type in the JSON string but got " + data['airline.leg.class_of_travel']);
        }
        // ensure the json data is a string
        if (data['airline.leg.date_of_travel'] && !(typeof data['airline.leg.date_of_travel'] === 'string' || data['airline.leg.date_of_travel'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.date_of_travel` to be a primitive type in the JSON string but got " + data['airline.leg.date_of_travel']);
        }
        // ensure the json data is a string
        if (data['airline.leg.depart_airport'] && !(typeof data['airline.leg.depart_airport'] === 'string' || data['airline.leg.depart_airport'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.depart_airport` to be a primitive type in the JSON string but got " + data['airline.leg.depart_airport']);
        }
        // ensure the json data is a string
        if (data['airline.leg.depart_tax'] && !(typeof data['airline.leg.depart_tax'] === 'string' || data['airline.leg.depart_tax'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.depart_tax` to be a primitive type in the JSON string but got " + data['airline.leg.depart_tax']);
        }
        // ensure the json data is a string
        if (data['airline.leg.destination_code'] && !(typeof data['airline.leg.destination_code'] === 'string' || data['airline.leg.destination_code'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.destination_code` to be a primitive type in the JSON string but got " + data['airline.leg.destination_code']);
        }
        // ensure the json data is a string
        if (data['airline.leg.fare_base_code'] && !(typeof data['airline.leg.fare_base_code'] === 'string' || data['airline.leg.fare_base_code'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.fare_base_code` to be a primitive type in the JSON string but got " + data['airline.leg.fare_base_code']);
        }
        // ensure the json data is a string
        if (data['airline.leg.flight_number'] && !(typeof data['airline.leg.flight_number'] === 'string' || data['airline.leg.flight_number'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.flight_number` to be a primitive type in the JSON string but got " + data['airline.leg.flight_number']);
        }
        // ensure the json data is a string
        if (data['airline.leg.stop_over_code'] && !(typeof data['airline.leg.stop_over_code'] === 'string' || data['airline.leg.stop_over_code'] instanceof String)) {
            throw new Error("Expected the field `airline.leg.stop_over_code` to be a primitive type in the JSON string but got " + data['airline.leg.stop_over_code']);
        }
        // ensure the json data is a string
        if (data['airline.passenger.date_of_birth'] && !(typeof data['airline.passenger.date_of_birth'] === 'string' || data['airline.passenger.date_of_birth'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger.date_of_birth` to be a primitive type in the JSON string but got " + data['airline.passenger.date_of_birth']);
        }
        // ensure the json data is a string
        if (data['airline.passenger.first_name'] && !(typeof data['airline.passenger.first_name'] === 'string' || data['airline.passenger.first_name'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger.first_name` to be a primitive type in the JSON string but got " + data['airline.passenger.first_name']);
        }
        // ensure the json data is a string
        if (data['airline.passenger.last_name'] && !(typeof data['airline.passenger.last_name'] === 'string' || data['airline.passenger.last_name'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger.last_name` to be a primitive type in the JSON string but got " + data['airline.passenger.last_name']);
        }
        // ensure the json data is a string
        if (data['airline.passenger.telephone_number'] && !(typeof data['airline.passenger.telephone_number'] === 'string' || data['airline.passenger.telephone_number'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger.telephone_number` to be a primitive type in the JSON string but got " + data['airline.passenger.telephone_number']);
        }
        // ensure the json data is a string
        if (data['airline.passenger.traveller_type'] && !(typeof data['airline.passenger.traveller_type'] === 'string' || data['airline.passenger.traveller_type'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger.traveller_type` to be a primitive type in the JSON string but got " + data['airline.passenger.traveller_type']);
        }
        // ensure the json data is a string
        if (data['airline.passenger_name'] && !(typeof data['airline.passenger_name'] === 'string' || data['airline.passenger_name'] instanceof String)) {
            throw new Error("Expected the field `airline.passenger_name` to be a primitive type in the JSON string but got " + data['airline.passenger_name']);
        }
        // ensure the json data is a string
        if (data['airline.ticket_issue_address'] && !(typeof data['airline.ticket_issue_address'] === 'string' || data['airline.ticket_issue_address'] instanceof String)) {
            throw new Error("Expected the field `airline.ticket_issue_address` to be a primitive type in the JSON string but got " + data['airline.ticket_issue_address']);
        }
        // ensure the json data is a string
        if (data['airline.ticket_number'] && !(typeof data['airline.ticket_number'] === 'string' || data['airline.ticket_number'] instanceof String)) {
            throw new Error("Expected the field `airline.ticket_number` to be a primitive type in the JSON string but got " + data['airline.ticket_number']);
        }
        // ensure the json data is a string
        if (data['airline.travel_agency_code'] && !(typeof data['airline.travel_agency_code'] === 'string' || data['airline.travel_agency_code'] instanceof String)) {
            throw new Error("Expected the field `airline.travel_agency_code` to be a primitive type in the JSON string but got " + data['airline.travel_agency_code']);
        }
        // ensure the json data is a string
        if (data['airline.travel_agency_name'] && !(typeof data['airline.travel_agency_name'] === 'string' || data['airline.travel_agency_name'] instanceof String)) {
            throw new Error("Expected the field `airline.travel_agency_name` to be a primitive type in the JSON string but got " + data['airline.travel_agency_name']);
        }

        return true;
    }


}

AdditionalDataAirline.RequiredProperties = ["airline.passenger_name"];

/**
 * The reference number for the invoice, issued by the agency. * Encoding: ASCII * minLength: 1 character * maxLength: 6 characters
 * @member {String} airline.agency_invoice_number
 */
AdditionalDataAirline.prototype['airline.agency_invoice_number'] = undefined;

/**
 * The two-letter agency plan identifier. * Encoding: ASCII * minLength: 2 characters * maxLength: 2 characters
 * @member {String} airline.agency_plan_name
 */
AdditionalDataAirline.prototype['airline.agency_plan_name'] = undefined;

/**
 * The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-digit accounting code (PAX) that identifies the carrier. * Format: IATA 3-digit accounting code (PAX) * Example: KLM = 074 * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.airline_code
 */
AdditionalDataAirline.prototype['airline.airline_code'] = undefined;

/**
 * The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. * Encoding: ASCII * Example: KLM = KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.airline_designator_code
 */
AdditionalDataAirline.prototype['airline.airline_designator_code'] = undefined;

/**
 * The amount charged for boarding the plane, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 character * maxLength: 18 characters
 * @member {String} airline.boarding_fee
 */
AdditionalDataAirline.prototype['airline.boarding_fee'] = undefined;

/**
 * The [CRS](https://en.wikipedia.org/wiki/Computer_reservation_system) used to make the reservation and purchase the ticket. * Encoding: ASCII * minLength: 4 characters * maxLength: 4 characters
 * @member {String} airline.computerized_reservation_system
 */
AdditionalDataAirline.prototype['airline.computerized_reservation_system'] = undefined;

/**
 * The alphanumeric customer reference number. * Encoding: ASCII * maxLength: 20 characters * If you send more than 20 characters, the customer reference number is truncated * Must not be all spaces
 * @member {String} airline.customer_reference_number
 */
AdditionalDataAirline.prototype['airline.customer_reference_number'] = undefined;

/**
 * A code that identifies the type of item bought. The description of the code can appear on credit card statements. * Encoding: ASCII * Example: Passenger ticket = 01 * minLength: 2 characters * maxLength: 2 characters
 * @member {String} airline.document_type
 */
AdditionalDataAirline.prototype['airline.document_type'] = undefined;

/**
 * The flight departure date. Local time `(HH:mm)` is optional. * Date format: `yyyy-MM-dd` * Date and time format: `yyyy-MM-dd HH:mm` * minLength: 10 characters * maxLength: 16 characters
 * @member {String} airline.flight_date
 */
AdditionalDataAirline.prototype['airline.flight_date'] = undefined;

/**
 * The [IATA](https://www.iata.org/services/pages/codes.aspx) 2-letter accounting code (PAX) that identifies the carrier. This field is required if the airline data includes leg details. * Example: KLM = KL * minLength: 2 characters * maxLength: 2 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.carrier_code
 */
AdditionalDataAirline.prototype['airline.leg.carrier_code'] = undefined;

/**
 * A one-letter travel class identifier.  The following are common:  * F: first class * J: business class * Y: economy class * W: premium economy  * Encoding: ASCII * minLength: 1 character * maxLength: 1 character * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.class_of_travel
 */
AdditionalDataAirline.prototype['airline.leg.class_of_travel'] = undefined;

/**
 *   Date and time of travel in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format `yyyy-MM-dd HH:mm`. * Encoding: ASCII * minLength: 16 characters * maxLength: 16 characters
 * @member {String} airline.leg.date_of_travel
 */
AdditionalDataAirline.prototype['airline.leg.date_of_travel'] = undefined;

/**
 * The [IATA](https://www.iata.org/services/pages/codes.aspx) three-letter airport code of the departure airport. This field is required if the airline data includes leg details.  * Encoding: ASCII * Example: Amsterdam = AMS * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.depart_airport
 */
AdditionalDataAirline.prototype['airline.leg.depart_airport'] = undefined;

/**
 * The amount of [departure tax](https://en.wikipedia.org/wiki/Departure_tax) charged, in [minor units](https://docs.adyen.com/development-resources/currency-codes). * Encoding: Numeric * minLength: 1 * maxLength: 12 *Must not be all zeros.
 * @member {String} airline.leg.depart_tax
 */
AdditionalDataAirline.prototype['airline.leg.depart_tax'] = undefined;

/**
 * The [IATA](https://www.iata.org/services/pages/codes.aspx) 3-letter airport code of the destination airport. This field is required if the airline data includes leg details. * Example: Amsterdam = AMS * Encoding: ASCII * minLength: 3 characters * maxLength: 3 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.destination_code
 */
AdditionalDataAirline.prototype['airline.leg.destination_code'] = undefined;

/**
 * The [fare basis code](https://en.wikipedia.org/wiki/Fare_basis_code), alphanumeric. * minLength: 1 character * maxLength: 6 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.fare_base_code
 */
AdditionalDataAirline.prototype['airline.leg.fare_base_code'] = undefined;

/**
 * The flight identifier. * minLength: 1 character * maxLength: 5 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.leg.flight_number
 */
AdditionalDataAirline.prototype['airline.leg.flight_number'] = undefined;

/**
 * A one-letter code that indicates whether the passenger is entitled to make a stopover. Can be a space, O if the passenger is entitled to make a stopover, or X if they are not. * Encoding: ASCII * minLength: 1 character * maxLength: 1 character
 * @member {String} airline.leg.stop_over_code
 */
AdditionalDataAirline.prototype['airline.leg.stop_over_code'] = undefined;

/**
 * The passenger's date of birth.  Date format: `yyyy-MM-dd` * minLength: 10 * maxLength: 10
 * @member {String} airline.passenger.date_of_birth
 */
AdditionalDataAirline.prototype['airline.passenger.date_of_birth'] = undefined;

/**
 * The passenger's first name. > This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
 * @member {String} airline.passenger.first_name
 */
AdditionalDataAirline.prototype['airline.passenger.first_name'] = undefined;

/**
 * The passenger's last name. > This field is required if the airline data includes passenger details or leg details. * Encoding: ASCII
 * @member {String} airline.passenger.last_name
 */
AdditionalDataAirline.prototype['airline.passenger.last_name'] = undefined;

/**
 * The passenger's telephone number, including country code. This is an alphanumeric field that can include the '+' and '-' signs. * Encoding: ASCII * minLength: 3 characters * maxLength: 30 characters
 * @member {String} airline.passenger.telephone_number
 */
AdditionalDataAirline.prototype['airline.passenger.telephone_number'] = undefined;

/**
 * The IATA passenger type code (PTC). * Encoding: ASCII * minLength: 3 characters * maxLength: 6 characters
 * @member {String} airline.passenger.traveller_type
 */
AdditionalDataAirline.prototype['airline.passenger.traveller_type'] = undefined;

/**
 * The passenger's name, initials, and title. * Format: last name + first name or initials + title * Example: *FLYER / MARY MS* * minLength: 1 character * maxLength: 20 characters * If you send more than 20 characters, the name is truncated * Must not be all spaces  *Must not be all zeros.
 * @member {String} airline.passenger_name
 */
AdditionalDataAirline.prototype['airline.passenger_name'] = undefined;

/**
 * The address of the organization that issued the ticket. * minLength: 0 characters * maxLength: 16 characters
 * @member {String} airline.ticket_issue_address
 */
AdditionalDataAirline.prototype['airline.ticket_issue_address'] = undefined;

/**
 * The ticket's unique identifier. * minLength: 1 character * maxLength: 15 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.ticket_number
 */
AdditionalDataAirline.prototype['airline.ticket_number'] = undefined;

/**
 * The unique identifier from IATA or ARC for the travel agency that issues the ticket. * Encoding: ASCII * minLength: 1 character * maxLength: 8 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.travel_agency_code
 */
AdditionalDataAirline.prototype['airline.travel_agency_code'] = undefined;

/**
 * The name of the travel agency.  * Encoding: ASCII * minLength: 1 character * maxLength: 25 characters * Must not be all spaces *Must not be all zeros.
 * @member {String} airline.travel_agency_name
 */
AdditionalDataAirline.prototype['airline.travel_agency_name'] = undefined;






export default AdditionalDataAirline;

