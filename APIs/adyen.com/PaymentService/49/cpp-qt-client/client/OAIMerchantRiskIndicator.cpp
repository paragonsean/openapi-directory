/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v49/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v49/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantRiskIndicator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantRiskIndicator::OAIMerchantRiskIndicator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantRiskIndicator::OAIMerchantRiskIndicator() {
    this->initializeModel();
}

OAIMerchantRiskIndicator::~OAIMerchantRiskIndicator() {}

void OAIMerchantRiskIndicator::initializeModel() {

    m_address_match_isSet = false;
    m_address_match_isValid = false;

    m_delivery_address_indicator_isSet = false;
    m_delivery_address_indicator_isValid = false;

    m_delivery_email_isSet = false;
    m_delivery_email_isValid = false;

    m_delivery_timeframe_isSet = false;
    m_delivery_timeframe_isValid = false;

    m_gift_card_amount_isSet = false;
    m_gift_card_amount_isValid = false;

    m_gift_card_count_isSet = false;
    m_gift_card_count_isValid = false;

    m_pre_order_date_isSet = false;
    m_pre_order_date_isValid = false;

    m_pre_order_purchase_isSet = false;
    m_pre_order_purchase_isValid = false;

    m_reorder_items_isSet = false;
    m_reorder_items_isValid = false;
}

void OAIMerchantRiskIndicator::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantRiskIndicator::fromJsonObject(QJsonObject json) {

    m_address_match_isValid = ::OpenAPI::fromJsonValue(m_address_match, json[QString("addressMatch")]);
    m_address_match_isSet = !json[QString("addressMatch")].isNull() && m_address_match_isValid;

    m_delivery_address_indicator_isValid = ::OpenAPI::fromJsonValue(m_delivery_address_indicator, json[QString("deliveryAddressIndicator")]);
    m_delivery_address_indicator_isSet = !json[QString("deliveryAddressIndicator")].isNull() && m_delivery_address_indicator_isValid;

    m_delivery_email_isValid = ::OpenAPI::fromJsonValue(m_delivery_email, json[QString("deliveryEmail")]);
    m_delivery_email_isSet = !json[QString("deliveryEmail")].isNull() && m_delivery_email_isValid;

    m_delivery_timeframe_isValid = ::OpenAPI::fromJsonValue(m_delivery_timeframe, json[QString("deliveryTimeframe")]);
    m_delivery_timeframe_isSet = !json[QString("deliveryTimeframe")].isNull() && m_delivery_timeframe_isValid;

    m_gift_card_amount_isValid = ::OpenAPI::fromJsonValue(m_gift_card_amount, json[QString("giftCardAmount")]);
    m_gift_card_amount_isSet = !json[QString("giftCardAmount")].isNull() && m_gift_card_amount_isValid;

    m_gift_card_count_isValid = ::OpenAPI::fromJsonValue(m_gift_card_count, json[QString("giftCardCount")]);
    m_gift_card_count_isSet = !json[QString("giftCardCount")].isNull() && m_gift_card_count_isValid;

    m_pre_order_date_isValid = ::OpenAPI::fromJsonValue(m_pre_order_date, json[QString("preOrderDate")]);
    m_pre_order_date_isSet = !json[QString("preOrderDate")].isNull() && m_pre_order_date_isValid;

    m_pre_order_purchase_isValid = ::OpenAPI::fromJsonValue(m_pre_order_purchase, json[QString("preOrderPurchase")]);
    m_pre_order_purchase_isSet = !json[QString("preOrderPurchase")].isNull() && m_pre_order_purchase_isValid;

    m_reorder_items_isValid = ::OpenAPI::fromJsonValue(m_reorder_items, json[QString("reorderItems")]);
    m_reorder_items_isSet = !json[QString("reorderItems")].isNull() && m_reorder_items_isValid;
}

QString OAIMerchantRiskIndicator::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantRiskIndicator::asJsonObject() const {
    QJsonObject obj;
    if (m_address_match_isSet) {
        obj.insert(QString("addressMatch"), ::OpenAPI::toJsonValue(m_address_match));
    }
    if (m_delivery_address_indicator_isSet) {
        obj.insert(QString("deliveryAddressIndicator"), ::OpenAPI::toJsonValue(m_delivery_address_indicator));
    }
    if (m_delivery_email_isSet) {
        obj.insert(QString("deliveryEmail"), ::OpenAPI::toJsonValue(m_delivery_email));
    }
    if (m_delivery_timeframe_isSet) {
        obj.insert(QString("deliveryTimeframe"), ::OpenAPI::toJsonValue(m_delivery_timeframe));
    }
    if (m_gift_card_amount.isSet()) {
        obj.insert(QString("giftCardAmount"), ::OpenAPI::toJsonValue(m_gift_card_amount));
    }
    if (m_gift_card_count_isSet) {
        obj.insert(QString("giftCardCount"), ::OpenAPI::toJsonValue(m_gift_card_count));
    }
    if (m_pre_order_date_isSet) {
        obj.insert(QString("preOrderDate"), ::OpenAPI::toJsonValue(m_pre_order_date));
    }
    if (m_pre_order_purchase_isSet) {
        obj.insert(QString("preOrderPurchase"), ::OpenAPI::toJsonValue(m_pre_order_purchase));
    }
    if (m_reorder_items_isSet) {
        obj.insert(QString("reorderItems"), ::OpenAPI::toJsonValue(m_reorder_items));
    }
    return obj;
}

bool OAIMerchantRiskIndicator::isAddressMatch() const {
    return m_address_match;
}
void OAIMerchantRiskIndicator::setAddressMatch(const bool &address_match) {
    m_address_match = address_match;
    m_address_match_isSet = true;
}

bool OAIMerchantRiskIndicator::is_address_match_Set() const{
    return m_address_match_isSet;
}

bool OAIMerchantRiskIndicator::is_address_match_Valid() const{
    return m_address_match_isValid;
}

QString OAIMerchantRiskIndicator::getDeliveryAddressIndicator() const {
    return m_delivery_address_indicator;
}
void OAIMerchantRiskIndicator::setDeliveryAddressIndicator(const QString &delivery_address_indicator) {
    m_delivery_address_indicator = delivery_address_indicator;
    m_delivery_address_indicator_isSet = true;
}

bool OAIMerchantRiskIndicator::is_delivery_address_indicator_Set() const{
    return m_delivery_address_indicator_isSet;
}

bool OAIMerchantRiskIndicator::is_delivery_address_indicator_Valid() const{
    return m_delivery_address_indicator_isValid;
}

QString OAIMerchantRiskIndicator::getDeliveryEmail() const {
    return m_delivery_email;
}
void OAIMerchantRiskIndicator::setDeliveryEmail(const QString &delivery_email) {
    m_delivery_email = delivery_email;
    m_delivery_email_isSet = true;
}

bool OAIMerchantRiskIndicator::is_delivery_email_Set() const{
    return m_delivery_email_isSet;
}

bool OAIMerchantRiskIndicator::is_delivery_email_Valid() const{
    return m_delivery_email_isValid;
}

QString OAIMerchantRiskIndicator::getDeliveryTimeframe() const {
    return m_delivery_timeframe;
}
void OAIMerchantRiskIndicator::setDeliveryTimeframe(const QString &delivery_timeframe) {
    m_delivery_timeframe = delivery_timeframe;
    m_delivery_timeframe_isSet = true;
}

bool OAIMerchantRiskIndicator::is_delivery_timeframe_Set() const{
    return m_delivery_timeframe_isSet;
}

bool OAIMerchantRiskIndicator::is_delivery_timeframe_Valid() const{
    return m_delivery_timeframe_isValid;
}

OAIAmount OAIMerchantRiskIndicator::getGiftCardAmount() const {
    return m_gift_card_amount;
}
void OAIMerchantRiskIndicator::setGiftCardAmount(const OAIAmount &gift_card_amount) {
    m_gift_card_amount = gift_card_amount;
    m_gift_card_amount_isSet = true;
}

bool OAIMerchantRiskIndicator::is_gift_card_amount_Set() const{
    return m_gift_card_amount_isSet;
}

bool OAIMerchantRiskIndicator::is_gift_card_amount_Valid() const{
    return m_gift_card_amount_isValid;
}

qint32 OAIMerchantRiskIndicator::getGiftCardCount() const {
    return m_gift_card_count;
}
void OAIMerchantRiskIndicator::setGiftCardCount(const qint32 &gift_card_count) {
    m_gift_card_count = gift_card_count;
    m_gift_card_count_isSet = true;
}

bool OAIMerchantRiskIndicator::is_gift_card_count_Set() const{
    return m_gift_card_count_isSet;
}

bool OAIMerchantRiskIndicator::is_gift_card_count_Valid() const{
    return m_gift_card_count_isValid;
}

QDateTime OAIMerchantRiskIndicator::getPreOrderDate() const {
    return m_pre_order_date;
}
void OAIMerchantRiskIndicator::setPreOrderDate(const QDateTime &pre_order_date) {
    m_pre_order_date = pre_order_date;
    m_pre_order_date_isSet = true;
}

bool OAIMerchantRiskIndicator::is_pre_order_date_Set() const{
    return m_pre_order_date_isSet;
}

bool OAIMerchantRiskIndicator::is_pre_order_date_Valid() const{
    return m_pre_order_date_isValid;
}

bool OAIMerchantRiskIndicator::isPreOrderPurchase() const {
    return m_pre_order_purchase;
}
void OAIMerchantRiskIndicator::setPreOrderPurchase(const bool &pre_order_purchase) {
    m_pre_order_purchase = pre_order_purchase;
    m_pre_order_purchase_isSet = true;
}

bool OAIMerchantRiskIndicator::is_pre_order_purchase_Set() const{
    return m_pre_order_purchase_isSet;
}

bool OAIMerchantRiskIndicator::is_pre_order_purchase_Valid() const{
    return m_pre_order_purchase_isValid;
}

bool OAIMerchantRiskIndicator::isReorderItems() const {
    return m_reorder_items;
}
void OAIMerchantRiskIndicator::setReorderItems(const bool &reorder_items) {
    m_reorder_items = reorder_items;
    m_reorder_items_isSet = true;
}

bool OAIMerchantRiskIndicator::is_reorder_items_Set() const{
    return m_reorder_items_isSet;
}

bool OAIMerchantRiskIndicator::is_reorder_items_Valid() const{
    return m_reorder_items_isValid;
}

bool OAIMerchantRiskIndicator::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_timeframe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gift_card_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pre_order_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reorder_items_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantRiskIndicator::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
