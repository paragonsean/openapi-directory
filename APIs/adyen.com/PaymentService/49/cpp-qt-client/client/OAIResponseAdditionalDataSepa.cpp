/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v49/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v49/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponseAdditionalDataSepa.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponseAdditionalDataSepa::OAIResponseAdditionalDataSepa(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponseAdditionalDataSepa::OAIResponseAdditionalDataSepa() {
    this->initializeModel();
}

OAIResponseAdditionalDataSepa::~OAIResponseAdditionalDataSepa() {}

void OAIResponseAdditionalDataSepa::initializeModel() {

    m_sepadirectdebit_date_of_signature_isSet = false;
    m_sepadirectdebit_date_of_signature_isValid = false;

    m_sepadirectdebit_mandate_id_isSet = false;
    m_sepadirectdebit_mandate_id_isValid = false;

    m_sepadirectdebit_sequence_type_isSet = false;
    m_sepadirectdebit_sequence_type_isValid = false;
}

void OAIResponseAdditionalDataSepa::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponseAdditionalDataSepa::fromJsonObject(QJsonObject json) {

    m_sepadirectdebit_date_of_signature_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_date_of_signature, json[QString("sepadirectdebit.dateOfSignature")]);
    m_sepadirectdebit_date_of_signature_isSet = !json[QString("sepadirectdebit.dateOfSignature")].isNull() && m_sepadirectdebit_date_of_signature_isValid;

    m_sepadirectdebit_mandate_id_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_mandate_id, json[QString("sepadirectdebit.mandateId")]);
    m_sepadirectdebit_mandate_id_isSet = !json[QString("sepadirectdebit.mandateId")].isNull() && m_sepadirectdebit_mandate_id_isValid;

    m_sepadirectdebit_sequence_type_isValid = ::OpenAPI::fromJsonValue(m_sepadirectdebit_sequence_type, json[QString("sepadirectdebit.sequenceType")]);
    m_sepadirectdebit_sequence_type_isSet = !json[QString("sepadirectdebit.sequenceType")].isNull() && m_sepadirectdebit_sequence_type_isValid;
}

QString OAIResponseAdditionalDataSepa::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponseAdditionalDataSepa::asJsonObject() const {
    QJsonObject obj;
    if (m_sepadirectdebit_date_of_signature_isSet) {
        obj.insert(QString("sepadirectdebit.dateOfSignature"), ::OpenAPI::toJsonValue(m_sepadirectdebit_date_of_signature));
    }
    if (m_sepadirectdebit_mandate_id_isSet) {
        obj.insert(QString("sepadirectdebit.mandateId"), ::OpenAPI::toJsonValue(m_sepadirectdebit_mandate_id));
    }
    if (m_sepadirectdebit_sequence_type_isSet) {
        obj.insert(QString("sepadirectdebit.sequenceType"), ::OpenAPI::toJsonValue(m_sepadirectdebit_sequence_type));
    }
    return obj;
}

QString OAIResponseAdditionalDataSepa::getSepadirectdebitDateOfSignature() const {
    return m_sepadirectdebit_date_of_signature;
}
void OAIResponseAdditionalDataSepa::setSepadirectdebitDateOfSignature(const QString &sepadirectdebit_date_of_signature) {
    m_sepadirectdebit_date_of_signature = sepadirectdebit_date_of_signature;
    m_sepadirectdebit_date_of_signature_isSet = true;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_date_of_signature_Set() const{
    return m_sepadirectdebit_date_of_signature_isSet;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_date_of_signature_Valid() const{
    return m_sepadirectdebit_date_of_signature_isValid;
}

QString OAIResponseAdditionalDataSepa::getSepadirectdebitMandateId() const {
    return m_sepadirectdebit_mandate_id;
}
void OAIResponseAdditionalDataSepa::setSepadirectdebitMandateId(const QString &sepadirectdebit_mandate_id) {
    m_sepadirectdebit_mandate_id = sepadirectdebit_mandate_id;
    m_sepadirectdebit_mandate_id_isSet = true;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_mandate_id_Set() const{
    return m_sepadirectdebit_mandate_id_isSet;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_mandate_id_Valid() const{
    return m_sepadirectdebit_mandate_id_isValid;
}

QString OAIResponseAdditionalDataSepa::getSepadirectdebitSequenceType() const {
    return m_sepadirectdebit_sequence_type;
}
void OAIResponseAdditionalDataSepa::setSepadirectdebitSequenceType(const QString &sepadirectdebit_sequence_type) {
    m_sepadirectdebit_sequence_type = sepadirectdebit_sequence_type;
    m_sepadirectdebit_sequence_type_isSet = true;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_sequence_type_Set() const{
    return m_sepadirectdebit_sequence_type_isSet;
}

bool OAIResponseAdditionalDataSepa::is_sepadirectdebit_sequence_type_Valid() const{
    return m_sepadirectdebit_sequence_type_isValid;
}

bool OAIResponseAdditionalDataSepa::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sepadirectdebit_date_of_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepadirectdebit_mandate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sepadirectdebit_sequence_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponseAdditionalDataSepa::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
