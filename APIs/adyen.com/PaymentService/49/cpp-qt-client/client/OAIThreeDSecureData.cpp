/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v49/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v49/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDSecureData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDSecureData::OAIThreeDSecureData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDSecureData::OAIThreeDSecureData() {
    this->initializeModel();
}

OAIThreeDSecureData::~OAIThreeDSecureData() {}

void OAIThreeDSecureData::initializeModel() {

    m_authentication_response_isSet = false;
    m_authentication_response_isValid = false;

    m_cavv_isSet = false;
    m_cavv_isValid = false;

    m_cavv_algorithm_isSet = false;
    m_cavv_algorithm_isValid = false;

    m_directory_response_isSet = false;
    m_directory_response_isValid = false;

    m_ds_trans_id_isSet = false;
    m_ds_trans_id_isValid = false;

    m_eci_isSet = false;
    m_eci_isValid = false;

    m_three_ds_version_isSet = false;
    m_three_ds_version_isValid = false;

    m_xid_isSet = false;
    m_xid_isValid = false;
}

void OAIThreeDSecureData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDSecureData::fromJsonObject(QJsonObject json) {

    m_authentication_response_isValid = ::OpenAPI::fromJsonValue(m_authentication_response, json[QString("authenticationResponse")]);
    m_authentication_response_isSet = !json[QString("authenticationResponse")].isNull() && m_authentication_response_isValid;

    m_cavv_isValid = ::OpenAPI::fromJsonValue(m_cavv, json[QString("cavv")]);
    m_cavv_isSet = !json[QString("cavv")].isNull() && m_cavv_isValid;

    m_cavv_algorithm_isValid = ::OpenAPI::fromJsonValue(m_cavv_algorithm, json[QString("cavvAlgorithm")]);
    m_cavv_algorithm_isSet = !json[QString("cavvAlgorithm")].isNull() && m_cavv_algorithm_isValid;

    m_directory_response_isValid = ::OpenAPI::fromJsonValue(m_directory_response, json[QString("directoryResponse")]);
    m_directory_response_isSet = !json[QString("directoryResponse")].isNull() && m_directory_response_isValid;

    m_ds_trans_id_isValid = ::OpenAPI::fromJsonValue(m_ds_trans_id, json[QString("dsTransID")]);
    m_ds_trans_id_isSet = !json[QString("dsTransID")].isNull() && m_ds_trans_id_isValid;

    m_eci_isValid = ::OpenAPI::fromJsonValue(m_eci, json[QString("eci")]);
    m_eci_isSet = !json[QString("eci")].isNull() && m_eci_isValid;

    m_three_ds_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds_version, json[QString("threeDSVersion")]);
    m_three_ds_version_isSet = !json[QString("threeDSVersion")].isNull() && m_three_ds_version_isValid;

    m_xid_isValid = ::OpenAPI::fromJsonValue(m_xid, json[QString("xid")]);
    m_xid_isSet = !json[QString("xid")].isNull() && m_xid_isValid;
}

QString OAIThreeDSecureData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDSecureData::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_response_isSet) {
        obj.insert(QString("authenticationResponse"), ::OpenAPI::toJsonValue(m_authentication_response));
    }
    if (m_cavv_isSet) {
        obj.insert(QString("cavv"), ::OpenAPI::toJsonValue(m_cavv));
    }
    if (m_cavv_algorithm_isSet) {
        obj.insert(QString("cavvAlgorithm"), ::OpenAPI::toJsonValue(m_cavv_algorithm));
    }
    if (m_directory_response_isSet) {
        obj.insert(QString("directoryResponse"), ::OpenAPI::toJsonValue(m_directory_response));
    }
    if (m_ds_trans_id_isSet) {
        obj.insert(QString("dsTransID"), ::OpenAPI::toJsonValue(m_ds_trans_id));
    }
    if (m_eci_isSet) {
        obj.insert(QString("eci"), ::OpenAPI::toJsonValue(m_eci));
    }
    if (m_three_ds_version_isSet) {
        obj.insert(QString("threeDSVersion"), ::OpenAPI::toJsonValue(m_three_ds_version));
    }
    if (m_xid_isSet) {
        obj.insert(QString("xid"), ::OpenAPI::toJsonValue(m_xid));
    }
    return obj;
}

QString OAIThreeDSecureData::getAuthenticationResponse() const {
    return m_authentication_response;
}
void OAIThreeDSecureData::setAuthenticationResponse(const QString &authentication_response) {
    m_authentication_response = authentication_response;
    m_authentication_response_isSet = true;
}

bool OAIThreeDSecureData::is_authentication_response_Set() const{
    return m_authentication_response_isSet;
}

bool OAIThreeDSecureData::is_authentication_response_Valid() const{
    return m_authentication_response_isValid;
}

QString OAIThreeDSecureData::getCavv() const {
    return m_cavv;
}
void OAIThreeDSecureData::setCavv(const QString &cavv) {
    m_cavv = cavv;
    m_cavv_isSet = true;
}

bool OAIThreeDSecureData::is_cavv_Set() const{
    return m_cavv_isSet;
}

bool OAIThreeDSecureData::is_cavv_Valid() const{
    return m_cavv_isValid;
}

QString OAIThreeDSecureData::getCavvAlgorithm() const {
    return m_cavv_algorithm;
}
void OAIThreeDSecureData::setCavvAlgorithm(const QString &cavv_algorithm) {
    m_cavv_algorithm = cavv_algorithm;
    m_cavv_algorithm_isSet = true;
}

bool OAIThreeDSecureData::is_cavv_algorithm_Set() const{
    return m_cavv_algorithm_isSet;
}

bool OAIThreeDSecureData::is_cavv_algorithm_Valid() const{
    return m_cavv_algorithm_isValid;
}

QString OAIThreeDSecureData::getDirectoryResponse() const {
    return m_directory_response;
}
void OAIThreeDSecureData::setDirectoryResponse(const QString &directory_response) {
    m_directory_response = directory_response;
    m_directory_response_isSet = true;
}

bool OAIThreeDSecureData::is_directory_response_Set() const{
    return m_directory_response_isSet;
}

bool OAIThreeDSecureData::is_directory_response_Valid() const{
    return m_directory_response_isValid;
}

QString OAIThreeDSecureData::getDsTransId() const {
    return m_ds_trans_id;
}
void OAIThreeDSecureData::setDsTransId(const QString &ds_trans_id) {
    m_ds_trans_id = ds_trans_id;
    m_ds_trans_id_isSet = true;
}

bool OAIThreeDSecureData::is_ds_trans_id_Set() const{
    return m_ds_trans_id_isSet;
}

bool OAIThreeDSecureData::is_ds_trans_id_Valid() const{
    return m_ds_trans_id_isValid;
}

QString OAIThreeDSecureData::getEci() const {
    return m_eci;
}
void OAIThreeDSecureData::setEci(const QString &eci) {
    m_eci = eci;
    m_eci_isSet = true;
}

bool OAIThreeDSecureData::is_eci_Set() const{
    return m_eci_isSet;
}

bool OAIThreeDSecureData::is_eci_Valid() const{
    return m_eci_isValid;
}

QString OAIThreeDSecureData::getThreeDsVersion() const {
    return m_three_ds_version;
}
void OAIThreeDSecureData::setThreeDsVersion(const QString &three_ds_version) {
    m_three_ds_version = three_ds_version;
    m_three_ds_version_isSet = true;
}

bool OAIThreeDSecureData::is_three_ds_version_Set() const{
    return m_three_ds_version_isSet;
}

bool OAIThreeDSecureData::is_three_ds_version_Valid() const{
    return m_three_ds_version_isValid;
}

QString OAIThreeDSecureData::getXid() const {
    return m_xid;
}
void OAIThreeDSecureData::setXid(const QString &xid) {
    m_xid = xid;
    m_xid_isSet = true;
}

bool OAIThreeDSecureData::is_xid_Set() const{
    return m_xid_isSet;
}

bool OAIThreeDSecureData::is_xid_Valid() const{
    return m_xid_isValid;
}

bool OAIThreeDSecureData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cavv_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_trans_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eci_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_xid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDSecureData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
