/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v49/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v49/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 49
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICancelRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICancelRequest::OAICancelRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICancelRequest::OAICancelRequest() {
    this->initializeModel();
}

OAICancelRequest::~OAICancelRequest() {}

void OAICancelRequest::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_mpi_data_isSet = false;
    m_mpi_data_isValid = false;

    m_original_merchant_reference_isSet = false;
    m_original_merchant_reference_isValid = false;

    m_original_reference_isSet = false;
    m_original_reference_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_splits_isSet = false;
    m_splits_isValid = false;

    m_tender_reference_isSet = false;
    m_tender_reference_isValid = false;

    m_unique_terminal_id_isSet = false;
    m_unique_terminal_id_isValid = false;
}

void OAICancelRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICancelRequest::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_mpi_data_isValid = ::OpenAPI::fromJsonValue(m_mpi_data, json[QString("mpiData")]);
    m_mpi_data_isSet = !json[QString("mpiData")].isNull() && m_mpi_data_isValid;

    m_original_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_original_merchant_reference, json[QString("originalMerchantReference")]);
    m_original_merchant_reference_isSet = !json[QString("originalMerchantReference")].isNull() && m_original_merchant_reference_isValid;

    m_original_reference_isValid = ::OpenAPI::fromJsonValue(m_original_reference, json[QString("originalReference")]);
    m_original_reference_isSet = !json[QString("originalReference")].isNull() && m_original_reference_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_splits_isValid = ::OpenAPI::fromJsonValue(m_splits, json[QString("splits")]);
    m_splits_isSet = !json[QString("splits")].isNull() && m_splits_isValid;

    m_tender_reference_isValid = ::OpenAPI::fromJsonValue(m_tender_reference, json[QString("tenderReference")]);
    m_tender_reference_isSet = !json[QString("tenderReference")].isNull() && m_tender_reference_isValid;

    m_unique_terminal_id_isValid = ::OpenAPI::fromJsonValue(m_unique_terminal_id, json[QString("uniqueTerminalId")]);
    m_unique_terminal_id_isSet = !json[QString("uniqueTerminalId")].isNull() && m_unique_terminal_id_isValid;
}

QString OAICancelRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICancelRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.isSet()) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_mpi_data.isSet()) {
        obj.insert(QString("mpiData"), ::OpenAPI::toJsonValue(m_mpi_data));
    }
    if (m_original_merchant_reference_isSet) {
        obj.insert(QString("originalMerchantReference"), ::OpenAPI::toJsonValue(m_original_merchant_reference));
    }
    if (m_original_reference_isSet) {
        obj.insert(QString("originalReference"), ::OpenAPI::toJsonValue(m_original_reference));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_splits.size() > 0) {
        obj.insert(QString("splits"), ::OpenAPI::toJsonValue(m_splits));
    }
    if (m_tender_reference_isSet) {
        obj.insert(QString("tenderReference"), ::OpenAPI::toJsonValue(m_tender_reference));
    }
    if (m_unique_terminal_id_isSet) {
        obj.insert(QString("uniqueTerminalId"), ::OpenAPI::toJsonValue(m_unique_terminal_id));
    }
    return obj;
}

OAIAdjustAuthorisationRequest_additionalData OAICancelRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAICancelRequest::setAdditionalData(const OAIAdjustAuthorisationRequest_additionalData &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAICancelRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAICancelRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QString OAICancelRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAICancelRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAICancelRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAICancelRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

OAIThreeDSecureData OAICancelRequest::getMpiData() const {
    return m_mpi_data;
}
void OAICancelRequest::setMpiData(const OAIThreeDSecureData &mpi_data) {
    m_mpi_data = mpi_data;
    m_mpi_data_isSet = true;
}

bool OAICancelRequest::is_mpi_data_Set() const{
    return m_mpi_data_isSet;
}

bool OAICancelRequest::is_mpi_data_Valid() const{
    return m_mpi_data_isValid;
}

QString OAICancelRequest::getOriginalMerchantReference() const {
    return m_original_merchant_reference;
}
void OAICancelRequest::setOriginalMerchantReference(const QString &original_merchant_reference) {
    m_original_merchant_reference = original_merchant_reference;
    m_original_merchant_reference_isSet = true;
}

bool OAICancelRequest::is_original_merchant_reference_Set() const{
    return m_original_merchant_reference_isSet;
}

bool OAICancelRequest::is_original_merchant_reference_Valid() const{
    return m_original_merchant_reference_isValid;
}

QString OAICancelRequest::getOriginalReference() const {
    return m_original_reference;
}
void OAICancelRequest::setOriginalReference(const QString &original_reference) {
    m_original_reference = original_reference;
    m_original_reference_isSet = true;
}

bool OAICancelRequest::is_original_reference_Set() const{
    return m_original_reference_isSet;
}

bool OAICancelRequest::is_original_reference_Valid() const{
    return m_original_reference_isValid;
}

QString OAICancelRequest::getReference() const {
    return m_reference;
}
void OAICancelRequest::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAICancelRequest::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAICancelRequest::is_reference_Valid() const{
    return m_reference_isValid;
}

QList<OAISplit> OAICancelRequest::getSplits() const {
    return m_splits;
}
void OAICancelRequest::setSplits(const QList<OAISplit> &splits) {
    m_splits = splits;
    m_splits_isSet = true;
}

bool OAICancelRequest::is_splits_Set() const{
    return m_splits_isSet;
}

bool OAICancelRequest::is_splits_Valid() const{
    return m_splits_isValid;
}

QString OAICancelRequest::getTenderReference() const {
    return m_tender_reference;
}
void OAICancelRequest::setTenderReference(const QString &tender_reference) {
    m_tender_reference = tender_reference;
    m_tender_reference_isSet = true;
}

bool OAICancelRequest::is_tender_reference_Set() const{
    return m_tender_reference_isSet;
}

bool OAICancelRequest::is_tender_reference_Valid() const{
    return m_tender_reference_isValid;
}

QString OAICancelRequest::getUniqueTerminalId() const {
    return m_unique_terminal_id;
}
void OAICancelRequest::setUniqueTerminalId(const QString &unique_terminal_id) {
    m_unique_terminal_id = unique_terminal_id;
    m_unique_terminal_id_isSet = true;
}

bool OAICancelRequest::is_unique_terminal_id_Set() const{
    return m_unique_terminal_id_isSet;
}

bool OAICancelRequest::is_unique_terminal_id_Valid() const{
    return m_unique_terminal_id_isValid;
}

bool OAICancelRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_splits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tender_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_terminal_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICancelRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_account_isValid && m_original_reference_isValid && true;
}

} // namespace OpenAPI
