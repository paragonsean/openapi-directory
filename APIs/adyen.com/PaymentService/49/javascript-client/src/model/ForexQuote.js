/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v49/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v49/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';

/**
 * The ForexQuote model module.
 * @module model/ForexQuote
 * @version 49
 */
class ForexQuote {
    /**
     * Constructs a new <code>ForexQuote</code>.
     * @alias module:model/ForexQuote
     * @param basePoints {Number} The base points.
     * @param validTill {Date} The date until which the forex quote is valid.
     */
    constructor(basePoints, validTill) { 
        
        ForexQuote.initialize(this, basePoints, validTill);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, basePoints, validTill) { 
        obj['basePoints'] = basePoints;
        obj['validTill'] = validTill;
    }

    /**
     * Constructs a <code>ForexQuote</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ForexQuote} obj Optional instance to populate.
     * @return {module:model/ForexQuote} The populated <code>ForexQuote</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ForexQuote();

            if (data.hasOwnProperty('account')) {
                obj['account'] = ApiClient.convertToType(data['account'], 'String');
            }
            if (data.hasOwnProperty('accountType')) {
                obj['accountType'] = ApiClient.convertToType(data['accountType'], 'String');
            }
            if (data.hasOwnProperty('baseAmount')) {
                obj['baseAmount'] = Amount.constructFromObject(data['baseAmount']);
            }
            if (data.hasOwnProperty('basePoints')) {
                obj['basePoints'] = ApiClient.convertToType(data['basePoints'], 'Number');
            }
            if (data.hasOwnProperty('buy')) {
                obj['buy'] = Amount.constructFromObject(data['buy']);
            }
            if (data.hasOwnProperty('interbank')) {
                obj['interbank'] = Amount.constructFromObject(data['interbank']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('sell')) {
                obj['sell'] = Amount.constructFromObject(data['sell']);
            }
            if (data.hasOwnProperty('signature')) {
                obj['signature'] = ApiClient.convertToType(data['signature'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('validTill')) {
                obj['validTill'] = ApiClient.convertToType(data['validTill'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ForexQuote</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ForexQuote</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ForexQuote.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['account'] && !(typeof data['account'] === 'string' || data['account'] instanceof String)) {
            throw new Error("Expected the field `account` to be a primitive type in the JSON string but got " + data['account']);
        }
        // ensure the json data is a string
        if (data['accountType'] && !(typeof data['accountType'] === 'string' || data['accountType'] instanceof String)) {
            throw new Error("Expected the field `accountType` to be a primitive type in the JSON string but got " + data['accountType']);
        }
        // validate the optional field `baseAmount`
        if (data['baseAmount']) { // data not null
          Amount.validateJSON(data['baseAmount']);
        }
        // validate the optional field `buy`
        if (data['buy']) { // data not null
          Amount.validateJSON(data['buy']);
        }
        // validate the optional field `interbank`
        if (data['interbank']) { // data not null
          Amount.validateJSON(data['interbank']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // validate the optional field `sell`
        if (data['sell']) { // data not null
          Amount.validateJSON(data['sell']);
        }
        // ensure the json data is a string
        if (data['signature'] && !(typeof data['signature'] === 'string' || data['signature'] instanceof String)) {
            throw new Error("Expected the field `signature` to be a primitive type in the JSON string but got " + data['signature']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

ForexQuote.RequiredProperties = ["basePoints", "validTill"];

/**
 * The account name.
 * @member {String} account
 */
ForexQuote.prototype['account'] = undefined;

/**
 * The account type.
 * @member {String} accountType
 */
ForexQuote.prototype['accountType'] = undefined;

/**
 * The base amount.
 * @member {module:model/Amount} baseAmount
 */
ForexQuote.prototype['baseAmount'] = undefined;

/**
 * The base points.
 * @member {Number} basePoints
 */
ForexQuote.prototype['basePoints'] = undefined;

/**
 * The buy rate.
 * @member {module:model/Amount} buy
 */
ForexQuote.prototype['buy'] = undefined;

/**
 * The interbank amount.
 * @member {module:model/Amount} interbank
 */
ForexQuote.prototype['interbank'] = undefined;

/**
 * The reference assigned to the forex quote request.
 * @member {String} reference
 */
ForexQuote.prototype['reference'] = undefined;

/**
 * The sell rate.
 * @member {module:model/Amount} sell
 */
ForexQuote.prototype['sell'] = undefined;

/**
 * The signature to validate the integrity.
 * @member {String} signature
 */
ForexQuote.prototype['signature'] = undefined;

/**
 * The source of the forex quote.
 * @member {String} source
 */
ForexQuote.prototype['source'] = undefined;

/**
 * The type of forex.
 * @member {String} type
 */
ForexQuote.prototype['type'] = undefined;

/**
 * The date until which the forex quote is valid.
 * @member {Date} validTill
 */
ForexQuote.prototype['validTill'] = undefined;






export default ForexQuote;

