/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v46/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Recurring model module.
 * @module model/Recurring
 * @version 46
 */
class Recurring {
    /**
     * Constructs a new <code>Recurring</code>.
     * @alias module:model/Recurring
     */
    constructor() { 
        
        Recurring.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Recurring</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Recurring} obj Optional instance to populate.
     * @return {module:model/Recurring} The populated <code>Recurring</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Recurring();

            if (data.hasOwnProperty('contract')) {
                obj['contract'] = ApiClient.convertToType(data['contract'], 'String');
            }
            if (data.hasOwnProperty('recurringDetailName')) {
                obj['recurringDetailName'] = ApiClient.convertToType(data['recurringDetailName'], 'String');
            }
            if (data.hasOwnProperty('recurringExpiry')) {
                obj['recurringExpiry'] = ApiClient.convertToType(data['recurringExpiry'], 'Date');
            }
            if (data.hasOwnProperty('recurringFrequency')) {
                obj['recurringFrequency'] = ApiClient.convertToType(data['recurringFrequency'], 'String');
            }
            if (data.hasOwnProperty('tokenService')) {
                obj['tokenService'] = ApiClient.convertToType(data['tokenService'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Recurring</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Recurring</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['contract'] && !(typeof data['contract'] === 'string' || data['contract'] instanceof String)) {
            throw new Error("Expected the field `contract` to be a primitive type in the JSON string but got " + data['contract']);
        }
        // ensure the json data is a string
        if (data['recurringDetailName'] && !(typeof data['recurringDetailName'] === 'string' || data['recurringDetailName'] instanceof String)) {
            throw new Error("Expected the field `recurringDetailName` to be a primitive type in the JSON string but got " + data['recurringDetailName']);
        }
        // ensure the json data is a string
        if (data['recurringFrequency'] && !(typeof data['recurringFrequency'] === 'string' || data['recurringFrequency'] instanceof String)) {
            throw new Error("Expected the field `recurringFrequency` to be a primitive type in the JSON string but got " + data['recurringFrequency']);
        }
        // ensure the json data is a string
        if (data['tokenService'] && !(typeof data['tokenService'] === 'string' || data['tokenService'] instanceof String)) {
            throw new Error("Expected the field `tokenService` to be a primitive type in the JSON string but got " + data['tokenService']);
        }

        return true;
    }


}



/**
 * The type of recurring contract to be used. Possible values: * `ONECLICK` – Payment details can be used to initiate a one-click payment, where the shopper enters the [card security code (CVC/CVV)](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-security-code-cvc-cvv-cid). * `RECURRING` – Payment details can be used without the card security code to initiate [card-not-present transactions](https://docs.adyen.com/payments-fundamentals/payment-glossary#card-not-present-cnp). * `ONECLICK,RECURRING` – Payment details can be used regardless of whether the shopper is on your site or not. * `PAYOUT` – Payment details can be used to [make a payout](https://docs.adyen.com/online-payments/online-payouts).
 * @member {module:model/Recurring.ContractEnum} contract
 */
Recurring.prototype['contract'] = undefined;

/**
 * A descriptive name for this detail.
 * @member {String} recurringDetailName
 */
Recurring.prototype['recurringDetailName'] = undefined;

/**
 * Date after which no further authorisations shall be performed. Only for 3D Secure 2.
 * @member {Date} recurringExpiry
 */
Recurring.prototype['recurringExpiry'] = undefined;

/**
 * Minimum number of days between authorisations. Only for 3D Secure 2.
 * @member {String} recurringFrequency
 */
Recurring.prototype['recurringFrequency'] = undefined;

/**
 * The name of the token service.
 * @member {module:model/Recurring.TokenServiceEnum} tokenService
 */
Recurring.prototype['tokenService'] = undefined;





/**
 * Allowed values for the <code>contract</code> property.
 * @enum {String}
 * @readonly
 */
Recurring['ContractEnum'] = {

    /**
     * value: "ONECLICK"
     * @const
     */
    "ONECLICK": "ONECLICK",

    /**
     * value: "RECURRING"
     * @const
     */
    "RECURRING": "RECURRING",

    /**
     * value: "PAYOUT"
     * @const
     */
    "PAYOUT": "PAYOUT"
};


/**
 * Allowed values for the <code>tokenService</code> property.
 * @enum {String}
 * @readonly
 */
Recurring['TokenServiceEnum'] = {

    /**
     * value: "VISATOKENSERVICE"
     * @const
     */
    "VISATOKENSERVICE": "VISATOKENSERVICE",

    /**
     * value: "MCTOKENSERVICE"
     * @const
     */
    "MCTOKENSERVICE": "MCTOKENSERVICE",

    /**
     * value: "AMEXTOKENSERVICE"
     * @const
     */
    "AMEXTOKENSERVICE": "AMEXTOKENSERVICE",

    /**
     * value: "TOKEN_SHARING"
     * @const
     */
    "TOKEN_SHARING": "TOKEN_SHARING"
};



export default Recurring;

