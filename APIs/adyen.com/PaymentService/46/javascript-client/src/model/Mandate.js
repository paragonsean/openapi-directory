/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v46/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 46
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Mandate model module.
 * @module model/Mandate
 * @version 46
 */
class Mandate {
    /**
     * Constructs a new <code>Mandate</code>.
     * @alias module:model/Mandate
     * @param amount {String} The billing amount (in minor units) of the recurring transactions.
     * @param endsAt {String} End date of the billing plan, in YYYY-MM-DD format.
     * @param frequency {module:model/Mandate.FrequencyEnum} The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
     */
    constructor(amount, endsAt, frequency) { 
        
        Mandate.initialize(this, amount, endsAt, frequency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, endsAt, frequency) { 
        obj['amount'] = amount;
        obj['endsAt'] = endsAt;
        obj['frequency'] = frequency;
    }

    /**
     * Constructs a <code>Mandate</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Mandate} obj Optional instance to populate.
     * @return {module:model/Mandate} The populated <code>Mandate</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Mandate();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'String');
            }
            if (data.hasOwnProperty('amountRule')) {
                obj['amountRule'] = ApiClient.convertToType(data['amountRule'], 'String');
            }
            if (data.hasOwnProperty('billingAttemptsRule')) {
                obj['billingAttemptsRule'] = ApiClient.convertToType(data['billingAttemptsRule'], 'String');
            }
            if (data.hasOwnProperty('billingDay')) {
                obj['billingDay'] = ApiClient.convertToType(data['billingDay'], 'String');
            }
            if (data.hasOwnProperty('endsAt')) {
                obj['endsAt'] = ApiClient.convertToType(data['endsAt'], 'String');
            }
            if (data.hasOwnProperty('frequency')) {
                obj['frequency'] = ApiClient.convertToType(data['frequency'], 'String');
            }
            if (data.hasOwnProperty('remarks')) {
                obj['remarks'] = ApiClient.convertToType(data['remarks'], 'String');
            }
            if (data.hasOwnProperty('startsAt')) {
                obj['startsAt'] = ApiClient.convertToType(data['startsAt'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Mandate</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Mandate</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Mandate.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['amount'] && !(typeof data['amount'] === 'string' || data['amount'] instanceof String)) {
            throw new Error("Expected the field `amount` to be a primitive type in the JSON string but got " + data['amount']);
        }
        // ensure the json data is a string
        if (data['amountRule'] && !(typeof data['amountRule'] === 'string' || data['amountRule'] instanceof String)) {
            throw new Error("Expected the field `amountRule` to be a primitive type in the JSON string but got " + data['amountRule']);
        }
        // ensure the json data is a string
        if (data['billingAttemptsRule'] && !(typeof data['billingAttemptsRule'] === 'string' || data['billingAttemptsRule'] instanceof String)) {
            throw new Error("Expected the field `billingAttemptsRule` to be a primitive type in the JSON string but got " + data['billingAttemptsRule']);
        }
        // ensure the json data is a string
        if (data['billingDay'] && !(typeof data['billingDay'] === 'string' || data['billingDay'] instanceof String)) {
            throw new Error("Expected the field `billingDay` to be a primitive type in the JSON string but got " + data['billingDay']);
        }
        // ensure the json data is a string
        if (data['endsAt'] && !(typeof data['endsAt'] === 'string' || data['endsAt'] instanceof String)) {
            throw new Error("Expected the field `endsAt` to be a primitive type in the JSON string but got " + data['endsAt']);
        }
        // ensure the json data is a string
        if (data['frequency'] && !(typeof data['frequency'] === 'string' || data['frequency'] instanceof String)) {
            throw new Error("Expected the field `frequency` to be a primitive type in the JSON string but got " + data['frequency']);
        }
        // ensure the json data is a string
        if (data['remarks'] && !(typeof data['remarks'] === 'string' || data['remarks'] instanceof String)) {
            throw new Error("Expected the field `remarks` to be a primitive type in the JSON string but got " + data['remarks']);
        }
        // ensure the json data is a string
        if (data['startsAt'] && !(typeof data['startsAt'] === 'string' || data['startsAt'] instanceof String)) {
            throw new Error("Expected the field `startsAt` to be a primitive type in the JSON string but got " + data['startsAt']);
        }

        return true;
    }


}

Mandate.RequiredProperties = ["amount", "endsAt", "frequency"];

/**
 * The billing amount (in minor units) of the recurring transactions.
 * @member {String} amount
 */
Mandate.prototype['amount'] = undefined;

/**
 * The limitation rule of the billing amount.  Possible values:  * **max**: The transaction amount can not exceed the `amount`.   * **exact**: The transaction amount should be the same as the `amount`.  
 * @member {module:model/Mandate.AmountRuleEnum} amountRule
 */
Mandate.prototype['amountRule'] = undefined;

/**
 * The rule to specify the period, within which the recurring debit can happen, relative to the mandate recurring date.  Possible values:   * **on**: On a specific date.   * **before**:  Before and on a specific date.   * **after**: On and after a specific date.  
 * @member {module:model/Mandate.BillingAttemptsRuleEnum} billingAttemptsRule
 */
Mandate.prototype['billingAttemptsRule'] = undefined;

/**
 * The number of the day, on which the recurring debit can happen. Should be within the same calendar month as the mandate recurring date.  Possible values: 1-31 based on the `frequency`.
 * @member {String} billingDay
 */
Mandate.prototype['billingDay'] = undefined;

/**
 * End date of the billing plan, in YYYY-MM-DD format.
 * @member {String} endsAt
 */
Mandate.prototype['endsAt'] = undefined;

/**
 * The frequency with which a shopper should be charged.  Possible values: **daily**, **weekly**, **biWeekly**, **monthly**, **quarterly**, **halfYearly**, **yearly**.
 * @member {module:model/Mandate.FrequencyEnum} frequency
 */
Mandate.prototype['frequency'] = undefined;

/**
 * The message shown by UPI to the shopper on the approval screen.
 * @member {String} remarks
 */
Mandate.prototype['remarks'] = undefined;

/**
 * Start date of the billing plan, in YYYY-MM-DD format. By default, the transaction date.
 * @member {String} startsAt
 */
Mandate.prototype['startsAt'] = undefined;





/**
 * Allowed values for the <code>amountRule</code> property.
 * @enum {String}
 * @readonly
 */
Mandate['AmountRuleEnum'] = {

    /**
     * value: "max"
     * @const
     */
    "max": "max",

    /**
     * value: "exact"
     * @const
     */
    "exact": "exact"
};


/**
 * Allowed values for the <code>billingAttemptsRule</code> property.
 * @enum {String}
 * @readonly
 */
Mandate['BillingAttemptsRuleEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "before"
     * @const
     */
    "before": "before",

    /**
     * value: "after"
     * @const
     */
    "after": "after"
};


/**
 * Allowed values for the <code>frequency</code> property.
 * @enum {String}
 * @readonly
 */
Mandate['FrequencyEnum'] = {

    /**
     * value: "adhoc"
     * @const
     */
    "adhoc": "adhoc",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "biWeekly"
     * @const
     */
    "biWeekly": "biWeekly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "quarterly"
     * @const
     */
    "quarterly": "quarterly",

    /**
     * value: "halfYearly"
     * @const
     */
    "halfYearly": "halfYearly",

    /**
     * value: "yearly"
     * @const
     */
    "yearly": "yearly"
};



export default Mandate;

