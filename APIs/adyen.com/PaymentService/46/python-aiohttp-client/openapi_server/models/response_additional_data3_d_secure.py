# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseAdditionalData3DSecure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_holder_info: str=None, cavv: str=None, cavv_algorithm: str=None, sca_exemption_requested: str=None, threeds2_card_enrolled: bool=None):
        """ResponseAdditionalData3DSecure - a model defined in OpenAPI

        :param card_holder_info: The card_holder_info of this ResponseAdditionalData3DSecure.
        :param cavv: The cavv of this ResponseAdditionalData3DSecure.
        :param cavv_algorithm: The cavv_algorithm of this ResponseAdditionalData3DSecure.
        :param sca_exemption_requested: The sca_exemption_requested of this ResponseAdditionalData3DSecure.
        :param threeds2_card_enrolled: The threeds2_card_enrolled of this ResponseAdditionalData3DSecure.
        """
        self.openapi_types = {
            'card_holder_info': str,
            'cavv': str,
            'cavv_algorithm': str,
            'sca_exemption_requested': str,
            'threeds2_card_enrolled': bool
        }

        self.attribute_map = {
            'card_holder_info': 'cardHolderInfo',
            'cavv': 'cavv',
            'cavv_algorithm': 'cavvAlgorithm',
            'sca_exemption_requested': 'scaExemptionRequested',
            'threeds2_card_enrolled': 'threeds2.cardEnrolled'
        }

        self._card_holder_info = card_holder_info
        self._cavv = cavv
        self._cavv_algorithm = cavv_algorithm
        self._sca_exemption_requested = sca_exemption_requested
        self._threeds2_card_enrolled = threeds2_card_enrolled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseAdditionalData3DSecure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseAdditionalData3DSecure of this ResponseAdditionalData3DSecure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this ResponseAdditionalData3DSecure.

        Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. 

        :return: The card_holder_info of this ResponseAdditionalData3DSecure.
        :rtype: str
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this ResponseAdditionalData3DSecure.

        Information provided by the issuer to the cardholder. If this field is present, you need to display this information to the cardholder. 

        :param card_holder_info: The card_holder_info of this ResponseAdditionalData3DSecure.
        :type card_holder_info: str
        """

        self._card_holder_info = card_holder_info

    @property
    def cavv(self):
        """Gets the cavv of this ResponseAdditionalData3DSecure.

        The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.

        :return: The cavv of this ResponseAdditionalData3DSecure.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this ResponseAdditionalData3DSecure.

        The Cardholder Authentication Verification Value (CAVV) for the 3D Secure authentication session, as a Base64-encoded 20-byte array.

        :param cavv: The cavv of this ResponseAdditionalData3DSecure.
        :type cavv: str
        """

        self._cavv = cavv

    @property
    def cavv_algorithm(self):
        """Gets the cavv_algorithm of this ResponseAdditionalData3DSecure.

        The CAVV algorithm used.

        :return: The cavv_algorithm of this ResponseAdditionalData3DSecure.
        :rtype: str
        """
        return self._cavv_algorithm

    @cavv_algorithm.setter
    def cavv_algorithm(self, cavv_algorithm):
        """Sets the cavv_algorithm of this ResponseAdditionalData3DSecure.

        The CAVV algorithm used.

        :param cavv_algorithm: The cavv_algorithm of this ResponseAdditionalData3DSecure.
        :type cavv_algorithm: str
        """

        self._cavv_algorithm = cavv_algorithm

    @property
    def sca_exemption_requested(self):
        """Gets the sca_exemption_requested of this ResponseAdditionalData3DSecure.

        Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :return: The sca_exemption_requested of this ResponseAdditionalData3DSecure.
        :rtype: str
        """
        return self._sca_exemption_requested

    @sca_exemption_requested.setter
    def sca_exemption_requested(self, sca_exemption_requested):
        """Sets the sca_exemption_requested of this ResponseAdditionalData3DSecure.

        Shows the [exemption type](https://docs.adyen.com/payments-fundamentals/psd2-sca-compliance-and-implementation-guide#specifypreferenceinyourapirequest) that Adyen requested for the payment.   Possible values: * **lowValue**  * **secureCorporate**  * **trustedBeneficiary**  * **transactionRiskAnalysis** 

        :param sca_exemption_requested: The sca_exemption_requested of this ResponseAdditionalData3DSecure.
        :type sca_exemption_requested: str
        """

        self._sca_exemption_requested = sca_exemption_requested

    @property
    def threeds2_card_enrolled(self):
        """Gets the threeds2_card_enrolled of this ResponseAdditionalData3DSecure.

        Indicates whether a card is enrolled for 3D Secure 2.

        :return: The threeds2_card_enrolled of this ResponseAdditionalData3DSecure.
        :rtype: bool
        """
        return self._threeds2_card_enrolled

    @threeds2_card_enrolled.setter
    def threeds2_card_enrolled(self, threeds2_card_enrolled):
        """Sets the threeds2_card_enrolled of this ResponseAdditionalData3DSecure.

        Indicates whether a card is enrolled for 3D Secure 2.

        :param threeds2_card_enrolled: The threeds2_card_enrolled of this ResponseAdditionalData3DSecure.
        :type threeds2_card_enrolled: bool
        """

        self._threeds2_card_enrolled = threeds2_card_enrolled
