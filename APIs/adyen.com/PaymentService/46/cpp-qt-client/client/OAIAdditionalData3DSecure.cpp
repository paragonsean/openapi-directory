/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v46/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdditionalData3DSecure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdditionalData3DSecure::OAIAdditionalData3DSecure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdditionalData3DSecure::OAIAdditionalData3DSecure() {
    this->initializeModel();
}

OAIAdditionalData3DSecure::~OAIAdditionalData3DSecure() {}

void OAIAdditionalData3DSecure::initializeModel() {

    m_allow3_ds2_isSet = false;
    m_allow3_ds2_isValid = false;

    m_challenge_window_size_isSet = false;
    m_challenge_window_size_isValid = false;

    m_execute_three_d_isSet = false;
    m_execute_three_d_isValid = false;

    m_mpi_implementation_type_isSet = false;
    m_mpi_implementation_type_isValid = false;

    m_sca_exemption_isSet = false;
    m_sca_exemption_isValid = false;

    m_three_ds_version_isSet = false;
    m_three_ds_version_isValid = false;
}

void OAIAdditionalData3DSecure::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdditionalData3DSecure::fromJsonObject(QJsonObject json) {

    m_allow3_ds2_isValid = ::OpenAPI::fromJsonValue(m_allow3_ds2, json[QString("allow3DS2")]);
    m_allow3_ds2_isSet = !json[QString("allow3DS2")].isNull() && m_allow3_ds2_isValid;

    m_challenge_window_size_isValid = ::OpenAPI::fromJsonValue(m_challenge_window_size, json[QString("challengeWindowSize")]);
    m_challenge_window_size_isSet = !json[QString("challengeWindowSize")].isNull() && m_challenge_window_size_isValid;

    m_execute_three_d_isValid = ::OpenAPI::fromJsonValue(m_execute_three_d, json[QString("executeThreeD")]);
    m_execute_three_d_isSet = !json[QString("executeThreeD")].isNull() && m_execute_three_d_isValid;

    m_mpi_implementation_type_isValid = ::OpenAPI::fromJsonValue(m_mpi_implementation_type, json[QString("mpiImplementationType")]);
    m_mpi_implementation_type_isSet = !json[QString("mpiImplementationType")].isNull() && m_mpi_implementation_type_isValid;

    m_sca_exemption_isValid = ::OpenAPI::fromJsonValue(m_sca_exemption, json[QString("scaExemption")]);
    m_sca_exemption_isSet = !json[QString("scaExemption")].isNull() && m_sca_exemption_isValid;

    m_three_ds_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds_version, json[QString("threeDSVersion")]);
    m_three_ds_version_isSet = !json[QString("threeDSVersion")].isNull() && m_three_ds_version_isValid;
}

QString OAIAdditionalData3DSecure::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdditionalData3DSecure::asJsonObject() const {
    QJsonObject obj;
    if (m_allow3_ds2_isSet) {
        obj.insert(QString("allow3DS2"), ::OpenAPI::toJsonValue(m_allow3_ds2));
    }
    if (m_challenge_window_size_isSet) {
        obj.insert(QString("challengeWindowSize"), ::OpenAPI::toJsonValue(m_challenge_window_size));
    }
    if (m_execute_three_d_isSet) {
        obj.insert(QString("executeThreeD"), ::OpenAPI::toJsonValue(m_execute_three_d));
    }
    if (m_mpi_implementation_type_isSet) {
        obj.insert(QString("mpiImplementationType"), ::OpenAPI::toJsonValue(m_mpi_implementation_type));
    }
    if (m_sca_exemption_isSet) {
        obj.insert(QString("scaExemption"), ::OpenAPI::toJsonValue(m_sca_exemption));
    }
    if (m_three_ds_version_isSet) {
        obj.insert(QString("threeDSVersion"), ::OpenAPI::toJsonValue(m_three_ds_version));
    }
    return obj;
}

QString OAIAdditionalData3DSecure::getAllow3Ds2() const {
    return m_allow3_ds2;
}
void OAIAdditionalData3DSecure::setAllow3Ds2(const QString &allow3_ds2) {
    m_allow3_ds2 = allow3_ds2;
    m_allow3_ds2_isSet = true;
}

bool OAIAdditionalData3DSecure::is_allow3_ds2_Set() const{
    return m_allow3_ds2_isSet;
}

bool OAIAdditionalData3DSecure::is_allow3_ds2_Valid() const{
    return m_allow3_ds2_isValid;
}

QString OAIAdditionalData3DSecure::getChallengeWindowSize() const {
    return m_challenge_window_size;
}
void OAIAdditionalData3DSecure::setChallengeWindowSize(const QString &challenge_window_size) {
    m_challenge_window_size = challenge_window_size;
    m_challenge_window_size_isSet = true;
}

bool OAIAdditionalData3DSecure::is_challenge_window_size_Set() const{
    return m_challenge_window_size_isSet;
}

bool OAIAdditionalData3DSecure::is_challenge_window_size_Valid() const{
    return m_challenge_window_size_isValid;
}

QString OAIAdditionalData3DSecure::getExecuteThreeD() const {
    return m_execute_three_d;
}
void OAIAdditionalData3DSecure::setExecuteThreeD(const QString &execute_three_d) {
    m_execute_three_d = execute_three_d;
    m_execute_three_d_isSet = true;
}

bool OAIAdditionalData3DSecure::is_execute_three_d_Set() const{
    return m_execute_three_d_isSet;
}

bool OAIAdditionalData3DSecure::is_execute_three_d_Valid() const{
    return m_execute_three_d_isValid;
}

QString OAIAdditionalData3DSecure::getMpiImplementationType() const {
    return m_mpi_implementation_type;
}
void OAIAdditionalData3DSecure::setMpiImplementationType(const QString &mpi_implementation_type) {
    m_mpi_implementation_type = mpi_implementation_type;
    m_mpi_implementation_type_isSet = true;
}

bool OAIAdditionalData3DSecure::is_mpi_implementation_type_Set() const{
    return m_mpi_implementation_type_isSet;
}

bool OAIAdditionalData3DSecure::is_mpi_implementation_type_Valid() const{
    return m_mpi_implementation_type_isValid;
}

QString OAIAdditionalData3DSecure::getScaExemption() const {
    return m_sca_exemption;
}
void OAIAdditionalData3DSecure::setScaExemption(const QString &sca_exemption) {
    m_sca_exemption = sca_exemption;
    m_sca_exemption_isSet = true;
}

bool OAIAdditionalData3DSecure::is_sca_exemption_Set() const{
    return m_sca_exemption_isSet;
}

bool OAIAdditionalData3DSecure::is_sca_exemption_Valid() const{
    return m_sca_exemption_isValid;
}

QString OAIAdditionalData3DSecure::getThreeDsVersion() const {
    return m_three_ds_version;
}
void OAIAdditionalData3DSecure::setThreeDsVersion(const QString &three_ds_version) {
    m_three_ds_version = three_ds_version;
    m_three_ds_version_isSet = true;
}

bool OAIAdditionalData3DSecure::is_three_ds_version_Set() const{
    return m_three_ds_version_isSet;
}

bool OAIAdditionalData3DSecure::is_three_ds_version_Valid() const{
    return m_three_ds_version_isValid;
}

bool OAIAdditionalData3DSecure::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow3_ds2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_challenge_window_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execute_three_d_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpi_implementation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sca_exemption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdditionalData3DSecure::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
