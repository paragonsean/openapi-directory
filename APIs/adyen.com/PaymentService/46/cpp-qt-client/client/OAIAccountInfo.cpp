/**
 * Adyen Payment API
 * A set of API endpoints that allow you to initiate, settle, and modify payments on the Adyen payments platform. You can use the API to accept card payments (including One-Click and 3D Secure), bank transfers, ewallets, and many other payment methods.  To learn more about the API, visit [Classic integration](https://docs.adyen.com/classic-integration).  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning Payments API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/Payment/v46/authorise ```  ## Going live  To authenticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/Payment/v46/authorise ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 46
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountInfo::OAIAccountInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountInfo::OAIAccountInfo() {
    this->initializeModel();
}

OAIAccountInfo::~OAIAccountInfo() {}

void OAIAccountInfo::initializeModel() {

    m_account_age_indicator_isSet = false;
    m_account_age_indicator_isValid = false;

    m_account_change_date_isSet = false;
    m_account_change_date_isValid = false;

    m_account_change_indicator_isSet = false;
    m_account_change_indicator_isValid = false;

    m_account_creation_date_isSet = false;
    m_account_creation_date_isValid = false;

    m_add_card_attempts_day_isSet = false;
    m_add_card_attempts_day_isValid = false;

    m_delivery_address_usage_date_isSet = false;
    m_delivery_address_usage_date_isValid = false;

    m_delivery_address_usage_indicator_isSet = false;
    m_delivery_address_usage_indicator_isValid = false;

    m_home_phone_isSet = false;
    m_home_phone_isValid = false;

    m_mobile_phone_isSet = false;
    m_mobile_phone_isValid = false;

    m_password_change_date_isSet = false;
    m_password_change_date_isValid = false;

    m_password_change_indicator_isSet = false;
    m_password_change_indicator_isValid = false;

    m_past_transactions_day_isSet = false;
    m_past_transactions_day_isValid = false;

    m_past_transactions_year_isSet = false;
    m_past_transactions_year_isValid = false;

    m_payment_account_age_isSet = false;
    m_payment_account_age_isValid = false;

    m_payment_account_indicator_isSet = false;
    m_payment_account_indicator_isValid = false;

    m_purchases_last6_months_isSet = false;
    m_purchases_last6_months_isValid = false;

    m_suspicious_activity_isSet = false;
    m_suspicious_activity_isValid = false;

    m_work_phone_isSet = false;
    m_work_phone_isValid = false;
}

void OAIAccountInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountInfo::fromJsonObject(QJsonObject json) {

    m_account_age_indicator_isValid = ::OpenAPI::fromJsonValue(m_account_age_indicator, json[QString("accountAgeIndicator")]);
    m_account_age_indicator_isSet = !json[QString("accountAgeIndicator")].isNull() && m_account_age_indicator_isValid;

    m_account_change_date_isValid = ::OpenAPI::fromJsonValue(m_account_change_date, json[QString("accountChangeDate")]);
    m_account_change_date_isSet = !json[QString("accountChangeDate")].isNull() && m_account_change_date_isValid;

    m_account_change_indicator_isValid = ::OpenAPI::fromJsonValue(m_account_change_indicator, json[QString("accountChangeIndicator")]);
    m_account_change_indicator_isSet = !json[QString("accountChangeIndicator")].isNull() && m_account_change_indicator_isValid;

    m_account_creation_date_isValid = ::OpenAPI::fromJsonValue(m_account_creation_date, json[QString("accountCreationDate")]);
    m_account_creation_date_isSet = !json[QString("accountCreationDate")].isNull() && m_account_creation_date_isValid;

    m_add_card_attempts_day_isValid = ::OpenAPI::fromJsonValue(m_add_card_attempts_day, json[QString("addCardAttemptsDay")]);
    m_add_card_attempts_day_isSet = !json[QString("addCardAttemptsDay")].isNull() && m_add_card_attempts_day_isValid;

    m_delivery_address_usage_date_isValid = ::OpenAPI::fromJsonValue(m_delivery_address_usage_date, json[QString("deliveryAddressUsageDate")]);
    m_delivery_address_usage_date_isSet = !json[QString("deliveryAddressUsageDate")].isNull() && m_delivery_address_usage_date_isValid;

    m_delivery_address_usage_indicator_isValid = ::OpenAPI::fromJsonValue(m_delivery_address_usage_indicator, json[QString("deliveryAddressUsageIndicator")]);
    m_delivery_address_usage_indicator_isSet = !json[QString("deliveryAddressUsageIndicator")].isNull() && m_delivery_address_usage_indicator_isValid;

    m_home_phone_isValid = ::OpenAPI::fromJsonValue(m_home_phone, json[QString("homePhone")]);
    m_home_phone_isSet = !json[QString("homePhone")].isNull() && m_home_phone_isValid;

    m_mobile_phone_isValid = ::OpenAPI::fromJsonValue(m_mobile_phone, json[QString("mobilePhone")]);
    m_mobile_phone_isSet = !json[QString("mobilePhone")].isNull() && m_mobile_phone_isValid;

    m_password_change_date_isValid = ::OpenAPI::fromJsonValue(m_password_change_date, json[QString("passwordChangeDate")]);
    m_password_change_date_isSet = !json[QString("passwordChangeDate")].isNull() && m_password_change_date_isValid;

    m_password_change_indicator_isValid = ::OpenAPI::fromJsonValue(m_password_change_indicator, json[QString("passwordChangeIndicator")]);
    m_password_change_indicator_isSet = !json[QString("passwordChangeIndicator")].isNull() && m_password_change_indicator_isValid;

    m_past_transactions_day_isValid = ::OpenAPI::fromJsonValue(m_past_transactions_day, json[QString("pastTransactionsDay")]);
    m_past_transactions_day_isSet = !json[QString("pastTransactionsDay")].isNull() && m_past_transactions_day_isValid;

    m_past_transactions_year_isValid = ::OpenAPI::fromJsonValue(m_past_transactions_year, json[QString("pastTransactionsYear")]);
    m_past_transactions_year_isSet = !json[QString("pastTransactionsYear")].isNull() && m_past_transactions_year_isValid;

    m_payment_account_age_isValid = ::OpenAPI::fromJsonValue(m_payment_account_age, json[QString("paymentAccountAge")]);
    m_payment_account_age_isSet = !json[QString("paymentAccountAge")].isNull() && m_payment_account_age_isValid;

    m_payment_account_indicator_isValid = ::OpenAPI::fromJsonValue(m_payment_account_indicator, json[QString("paymentAccountIndicator")]);
    m_payment_account_indicator_isSet = !json[QString("paymentAccountIndicator")].isNull() && m_payment_account_indicator_isValid;

    m_purchases_last6_months_isValid = ::OpenAPI::fromJsonValue(m_purchases_last6_months, json[QString("purchasesLast6Months")]);
    m_purchases_last6_months_isSet = !json[QString("purchasesLast6Months")].isNull() && m_purchases_last6_months_isValid;

    m_suspicious_activity_isValid = ::OpenAPI::fromJsonValue(m_suspicious_activity, json[QString("suspiciousActivity")]);
    m_suspicious_activity_isSet = !json[QString("suspiciousActivity")].isNull() && m_suspicious_activity_isValid;

    m_work_phone_isValid = ::OpenAPI::fromJsonValue(m_work_phone, json[QString("workPhone")]);
    m_work_phone_isSet = !json[QString("workPhone")].isNull() && m_work_phone_isValid;
}

QString OAIAccountInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_account_age_indicator_isSet) {
        obj.insert(QString("accountAgeIndicator"), ::OpenAPI::toJsonValue(m_account_age_indicator));
    }
    if (m_account_change_date_isSet) {
        obj.insert(QString("accountChangeDate"), ::OpenAPI::toJsonValue(m_account_change_date));
    }
    if (m_account_change_indicator_isSet) {
        obj.insert(QString("accountChangeIndicator"), ::OpenAPI::toJsonValue(m_account_change_indicator));
    }
    if (m_account_creation_date_isSet) {
        obj.insert(QString("accountCreationDate"), ::OpenAPI::toJsonValue(m_account_creation_date));
    }
    if (m_add_card_attempts_day_isSet) {
        obj.insert(QString("addCardAttemptsDay"), ::OpenAPI::toJsonValue(m_add_card_attempts_day));
    }
    if (m_delivery_address_usage_date_isSet) {
        obj.insert(QString("deliveryAddressUsageDate"), ::OpenAPI::toJsonValue(m_delivery_address_usage_date));
    }
    if (m_delivery_address_usage_indicator_isSet) {
        obj.insert(QString("deliveryAddressUsageIndicator"), ::OpenAPI::toJsonValue(m_delivery_address_usage_indicator));
    }
    if (m_home_phone_isSet) {
        obj.insert(QString("homePhone"), ::OpenAPI::toJsonValue(m_home_phone));
    }
    if (m_mobile_phone_isSet) {
        obj.insert(QString("mobilePhone"), ::OpenAPI::toJsonValue(m_mobile_phone));
    }
    if (m_password_change_date_isSet) {
        obj.insert(QString("passwordChangeDate"), ::OpenAPI::toJsonValue(m_password_change_date));
    }
    if (m_password_change_indicator_isSet) {
        obj.insert(QString("passwordChangeIndicator"), ::OpenAPI::toJsonValue(m_password_change_indicator));
    }
    if (m_past_transactions_day_isSet) {
        obj.insert(QString("pastTransactionsDay"), ::OpenAPI::toJsonValue(m_past_transactions_day));
    }
    if (m_past_transactions_year_isSet) {
        obj.insert(QString("pastTransactionsYear"), ::OpenAPI::toJsonValue(m_past_transactions_year));
    }
    if (m_payment_account_age_isSet) {
        obj.insert(QString("paymentAccountAge"), ::OpenAPI::toJsonValue(m_payment_account_age));
    }
    if (m_payment_account_indicator_isSet) {
        obj.insert(QString("paymentAccountIndicator"), ::OpenAPI::toJsonValue(m_payment_account_indicator));
    }
    if (m_purchases_last6_months_isSet) {
        obj.insert(QString("purchasesLast6Months"), ::OpenAPI::toJsonValue(m_purchases_last6_months));
    }
    if (m_suspicious_activity_isSet) {
        obj.insert(QString("suspiciousActivity"), ::OpenAPI::toJsonValue(m_suspicious_activity));
    }
    if (m_work_phone_isSet) {
        obj.insert(QString("workPhone"), ::OpenAPI::toJsonValue(m_work_phone));
    }
    return obj;
}

QString OAIAccountInfo::getAccountAgeIndicator() const {
    return m_account_age_indicator;
}
void OAIAccountInfo::setAccountAgeIndicator(const QString &account_age_indicator) {
    m_account_age_indicator = account_age_indicator;
    m_account_age_indicator_isSet = true;
}

bool OAIAccountInfo::is_account_age_indicator_Set() const{
    return m_account_age_indicator_isSet;
}

bool OAIAccountInfo::is_account_age_indicator_Valid() const{
    return m_account_age_indicator_isValid;
}

QDateTime OAIAccountInfo::getAccountChangeDate() const {
    return m_account_change_date;
}
void OAIAccountInfo::setAccountChangeDate(const QDateTime &account_change_date) {
    m_account_change_date = account_change_date;
    m_account_change_date_isSet = true;
}

bool OAIAccountInfo::is_account_change_date_Set() const{
    return m_account_change_date_isSet;
}

bool OAIAccountInfo::is_account_change_date_Valid() const{
    return m_account_change_date_isValid;
}

QString OAIAccountInfo::getAccountChangeIndicator() const {
    return m_account_change_indicator;
}
void OAIAccountInfo::setAccountChangeIndicator(const QString &account_change_indicator) {
    m_account_change_indicator = account_change_indicator;
    m_account_change_indicator_isSet = true;
}

bool OAIAccountInfo::is_account_change_indicator_Set() const{
    return m_account_change_indicator_isSet;
}

bool OAIAccountInfo::is_account_change_indicator_Valid() const{
    return m_account_change_indicator_isValid;
}

QDateTime OAIAccountInfo::getAccountCreationDate() const {
    return m_account_creation_date;
}
void OAIAccountInfo::setAccountCreationDate(const QDateTime &account_creation_date) {
    m_account_creation_date = account_creation_date;
    m_account_creation_date_isSet = true;
}

bool OAIAccountInfo::is_account_creation_date_Set() const{
    return m_account_creation_date_isSet;
}

bool OAIAccountInfo::is_account_creation_date_Valid() const{
    return m_account_creation_date_isValid;
}

qint32 OAIAccountInfo::getAddCardAttemptsDay() const {
    return m_add_card_attempts_day;
}
void OAIAccountInfo::setAddCardAttemptsDay(const qint32 &add_card_attempts_day) {
    m_add_card_attempts_day = add_card_attempts_day;
    m_add_card_attempts_day_isSet = true;
}

bool OAIAccountInfo::is_add_card_attempts_day_Set() const{
    return m_add_card_attempts_day_isSet;
}

bool OAIAccountInfo::is_add_card_attempts_day_Valid() const{
    return m_add_card_attempts_day_isValid;
}

QDateTime OAIAccountInfo::getDeliveryAddressUsageDate() const {
    return m_delivery_address_usage_date;
}
void OAIAccountInfo::setDeliveryAddressUsageDate(const QDateTime &delivery_address_usage_date) {
    m_delivery_address_usage_date = delivery_address_usage_date;
    m_delivery_address_usage_date_isSet = true;
}

bool OAIAccountInfo::is_delivery_address_usage_date_Set() const{
    return m_delivery_address_usage_date_isSet;
}

bool OAIAccountInfo::is_delivery_address_usage_date_Valid() const{
    return m_delivery_address_usage_date_isValid;
}

QString OAIAccountInfo::getDeliveryAddressUsageIndicator() const {
    return m_delivery_address_usage_indicator;
}
void OAIAccountInfo::setDeliveryAddressUsageIndicator(const QString &delivery_address_usage_indicator) {
    m_delivery_address_usage_indicator = delivery_address_usage_indicator;
    m_delivery_address_usage_indicator_isSet = true;
}

bool OAIAccountInfo::is_delivery_address_usage_indicator_Set() const{
    return m_delivery_address_usage_indicator_isSet;
}

bool OAIAccountInfo::is_delivery_address_usage_indicator_Valid() const{
    return m_delivery_address_usage_indicator_isValid;
}

QString OAIAccountInfo::getHomePhone() const {
    return m_home_phone;
}
void OAIAccountInfo::setHomePhone(const QString &home_phone) {
    m_home_phone = home_phone;
    m_home_phone_isSet = true;
}

bool OAIAccountInfo::is_home_phone_Set() const{
    return m_home_phone_isSet;
}

bool OAIAccountInfo::is_home_phone_Valid() const{
    return m_home_phone_isValid;
}

QString OAIAccountInfo::getMobilePhone() const {
    return m_mobile_phone;
}
void OAIAccountInfo::setMobilePhone(const QString &mobile_phone) {
    m_mobile_phone = mobile_phone;
    m_mobile_phone_isSet = true;
}

bool OAIAccountInfo::is_mobile_phone_Set() const{
    return m_mobile_phone_isSet;
}

bool OAIAccountInfo::is_mobile_phone_Valid() const{
    return m_mobile_phone_isValid;
}

QDateTime OAIAccountInfo::getPasswordChangeDate() const {
    return m_password_change_date;
}
void OAIAccountInfo::setPasswordChangeDate(const QDateTime &password_change_date) {
    m_password_change_date = password_change_date;
    m_password_change_date_isSet = true;
}

bool OAIAccountInfo::is_password_change_date_Set() const{
    return m_password_change_date_isSet;
}

bool OAIAccountInfo::is_password_change_date_Valid() const{
    return m_password_change_date_isValid;
}

QString OAIAccountInfo::getPasswordChangeIndicator() const {
    return m_password_change_indicator;
}
void OAIAccountInfo::setPasswordChangeIndicator(const QString &password_change_indicator) {
    m_password_change_indicator = password_change_indicator;
    m_password_change_indicator_isSet = true;
}

bool OAIAccountInfo::is_password_change_indicator_Set() const{
    return m_password_change_indicator_isSet;
}

bool OAIAccountInfo::is_password_change_indicator_Valid() const{
    return m_password_change_indicator_isValid;
}

qint32 OAIAccountInfo::getPastTransactionsDay() const {
    return m_past_transactions_day;
}
void OAIAccountInfo::setPastTransactionsDay(const qint32 &past_transactions_day) {
    m_past_transactions_day = past_transactions_day;
    m_past_transactions_day_isSet = true;
}

bool OAIAccountInfo::is_past_transactions_day_Set() const{
    return m_past_transactions_day_isSet;
}

bool OAIAccountInfo::is_past_transactions_day_Valid() const{
    return m_past_transactions_day_isValid;
}

qint32 OAIAccountInfo::getPastTransactionsYear() const {
    return m_past_transactions_year;
}
void OAIAccountInfo::setPastTransactionsYear(const qint32 &past_transactions_year) {
    m_past_transactions_year = past_transactions_year;
    m_past_transactions_year_isSet = true;
}

bool OAIAccountInfo::is_past_transactions_year_Set() const{
    return m_past_transactions_year_isSet;
}

bool OAIAccountInfo::is_past_transactions_year_Valid() const{
    return m_past_transactions_year_isValid;
}

QDateTime OAIAccountInfo::getPaymentAccountAge() const {
    return m_payment_account_age;
}
void OAIAccountInfo::setPaymentAccountAge(const QDateTime &payment_account_age) {
    m_payment_account_age = payment_account_age;
    m_payment_account_age_isSet = true;
}

bool OAIAccountInfo::is_payment_account_age_Set() const{
    return m_payment_account_age_isSet;
}

bool OAIAccountInfo::is_payment_account_age_Valid() const{
    return m_payment_account_age_isValid;
}

QString OAIAccountInfo::getPaymentAccountIndicator() const {
    return m_payment_account_indicator;
}
void OAIAccountInfo::setPaymentAccountIndicator(const QString &payment_account_indicator) {
    m_payment_account_indicator = payment_account_indicator;
    m_payment_account_indicator_isSet = true;
}

bool OAIAccountInfo::is_payment_account_indicator_Set() const{
    return m_payment_account_indicator_isSet;
}

bool OAIAccountInfo::is_payment_account_indicator_Valid() const{
    return m_payment_account_indicator_isValid;
}

qint32 OAIAccountInfo::getPurchasesLast6Months() const {
    return m_purchases_last6_months;
}
void OAIAccountInfo::setPurchasesLast6Months(const qint32 &purchases_last6_months) {
    m_purchases_last6_months = purchases_last6_months;
    m_purchases_last6_months_isSet = true;
}

bool OAIAccountInfo::is_purchases_last6_months_Set() const{
    return m_purchases_last6_months_isSet;
}

bool OAIAccountInfo::is_purchases_last6_months_Valid() const{
    return m_purchases_last6_months_isValid;
}

bool OAIAccountInfo::isSuspiciousActivity() const {
    return m_suspicious_activity;
}
void OAIAccountInfo::setSuspiciousActivity(const bool &suspicious_activity) {
    m_suspicious_activity = suspicious_activity;
    m_suspicious_activity_isSet = true;
}

bool OAIAccountInfo::is_suspicious_activity_Set() const{
    return m_suspicious_activity_isSet;
}

bool OAIAccountInfo::is_suspicious_activity_Valid() const{
    return m_suspicious_activity_isValid;
}

QString OAIAccountInfo::getWorkPhone() const {
    return m_work_phone;
}
void OAIAccountInfo::setWorkPhone(const QString &work_phone) {
    m_work_phone = work_phone;
    m_work_phone_isSet = true;
}

bool OAIAccountInfo::is_work_phone_Set() const{
    return m_work_phone_isSet;
}

bool OAIAccountInfo::is_work_phone_Valid() const{
    return m_work_phone_isValid;
}

bool OAIAccountInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_age_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_change_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_add_card_attempts_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address_usage_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delivery_address_usage_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_phone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_change_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_transactions_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_past_transactions_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_indicator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchases_last6_months_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspicious_activity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_phone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
