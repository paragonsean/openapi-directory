/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v52/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v52/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 52
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DSPublicKeyDetail model module.
 * @module model/DSPublicKeyDetail
 * @version 52
 */
class DSPublicKeyDetail {
    /**
     * Constructs a new <code>DSPublicKeyDetail</code>.
     * @alias module:model/DSPublicKeyDetail
     */
    constructor() { 
        
        DSPublicKeyDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DSPublicKeyDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DSPublicKeyDetail} obj Optional instance to populate.
     * @return {module:model/DSPublicKeyDetail} The populated <code>DSPublicKeyDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DSPublicKeyDetail();

            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('directoryServerId')) {
                obj['directoryServerId'] = ApiClient.convertToType(data['directoryServerId'], 'String');
            }
            if (data.hasOwnProperty('fromSDKVersion')) {
                obj['fromSDKVersion'] = ApiClient.convertToType(data['fromSDKVersion'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('rootCertificates')) {
                obj['rootCertificates'] = ApiClient.convertToType(data['rootCertificates'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DSPublicKeyDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DSPublicKeyDetail</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['directoryServerId'] && !(typeof data['directoryServerId'] === 'string' || data['directoryServerId'] instanceof String)) {
            throw new Error("Expected the field `directoryServerId` to be a primitive type in the JSON string but got " + data['directoryServerId']);
        }
        // ensure the json data is a string
        if (data['fromSDKVersion'] && !(typeof data['fromSDKVersion'] === 'string' || data['fromSDKVersion'] instanceof String)) {
            throw new Error("Expected the field `fromSDKVersion` to be a primitive type in the JSON string but got " + data['fromSDKVersion']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // ensure the json data is a string
        if (data['rootCertificates'] && !(typeof data['rootCertificates'] === 'string' || data['rootCertificates'] instanceof String)) {
            throw new Error("Expected the field `rootCertificates` to be a primitive type in the JSON string but got " + data['rootCertificates']);
        }

        return true;
    }


}



/**
 * Card brand.
 * @member {String} brand
 */
DSPublicKeyDetail.prototype['brand'] = undefined;

/**
 * Directory Server (DS) identifier.
 * @member {String} directoryServerId
 */
DSPublicKeyDetail.prototype['directoryServerId'] = undefined;

/**
 * The version of the mobile 3D Secure 2 SDK. For the possible values, refer to the versions in [Adyen 3DS2 Android](https://github.com/Adyen/adyen-3ds2-android/releases) and [Adyen 3DS2 iOS](https://github.com/Adyen/adyen-3ds2-ios/releases).
 * @member {String} fromSDKVersion
 */
DSPublicKeyDetail.prototype['fromSDKVersion'] = undefined;

/**
 * Public key. The 3D Secure 2 SDK encrypts the device information by using the DS public key.
 * @member {String} publicKey
 */
DSPublicKeyDetail.prototype['publicKey'] = undefined;

/**
 * Directory Server root certificates. The 3D Secure 2 SDK verifies the ACS signed content using the rootCertificates.
 * @member {String} rootCertificates
 */
DSPublicKeyDetail.prototype['rootCertificates'] = undefined;






export default DSPublicKeyDetail;

