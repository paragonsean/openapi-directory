# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardBin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bin: str=None, commercial: bool=None, funding_source: str=None, funds_availability: str=None, issuer_bin: str=None, issuing_bank: str=None, issuing_country: str=None, issuing_currency: str=None, payment_method: str=None, payout_eligible: str=None, summary: str=None):
        """CardBin - a model defined in OpenAPI

        :param bin: The bin of this CardBin.
        :param commercial: The commercial of this CardBin.
        :param funding_source: The funding_source of this CardBin.
        :param funds_availability: The funds_availability of this CardBin.
        :param issuer_bin: The issuer_bin of this CardBin.
        :param issuing_bank: The issuing_bank of this CardBin.
        :param issuing_country: The issuing_country of this CardBin.
        :param issuing_currency: The issuing_currency of this CardBin.
        :param payment_method: The payment_method of this CardBin.
        :param payout_eligible: The payout_eligible of this CardBin.
        :param summary: The summary of this CardBin.
        """
        self.openapi_types = {
            'bin': str,
            'commercial': bool,
            'funding_source': str,
            'funds_availability': str,
            'issuer_bin': str,
            'issuing_bank': str,
            'issuing_country': str,
            'issuing_currency': str,
            'payment_method': str,
            'payout_eligible': str,
            'summary': str
        }

        self.attribute_map = {
            'bin': 'bin',
            'commercial': 'commercial',
            'funding_source': 'fundingSource',
            'funds_availability': 'fundsAvailability',
            'issuer_bin': 'issuerBin',
            'issuing_bank': 'issuingBank',
            'issuing_country': 'issuingCountry',
            'issuing_currency': 'issuingCurrency',
            'payment_method': 'paymentMethod',
            'payout_eligible': 'payoutEligible',
            'summary': 'summary'
        }

        self._bin = bin
        self._commercial = commercial
        self._funding_source = funding_source
        self._funds_availability = funds_availability
        self._issuer_bin = issuer_bin
        self._issuing_bank = issuing_bank
        self._issuing_country = issuing_country
        self._issuing_currency = issuing_currency
        self._payment_method = payment_method
        self._payout_eligible = payout_eligible
        self._summary = summary

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardBin':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardBin of this CardBin.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bin(self):
        """Gets the bin of this CardBin.

        The first 6 digit of the card number. Enable this field via merchant account settings.

        :return: The bin of this CardBin.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this CardBin.

        The first 6 digit of the card number. Enable this field via merchant account settings.

        :param bin: The bin of this CardBin.
        :type bin: str
        """

        self._bin = bin

    @property
    def commercial(self):
        """Gets the commercial of this CardBin.

        If true, it indicates a commercial card. Enable this field via merchant account settings.

        :return: The commercial of this CardBin.
        :rtype: bool
        """
        return self._commercial

    @commercial.setter
    def commercial(self, commercial):
        """Sets the commercial of this CardBin.

        If true, it indicates a commercial card. Enable this field via merchant account settings.

        :param commercial: The commercial of this CardBin.
        :type commercial: bool
        """

        self._commercial = commercial

    @property
    def funding_source(self):
        """Gets the funding_source of this CardBin.

        The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE > Enable this field via merchant account settings.

        :return: The funding_source of this CardBin.
        :rtype: str
        """
        return self._funding_source

    @funding_source.setter
    def funding_source(self, funding_source):
        """Sets the funding_source of this CardBin.

        The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE > Enable this field via merchant account settings.

        :param funding_source: The funding_source of this CardBin.
        :type funding_source: str
        """

        self._funding_source = funding_source

    @property
    def funds_availability(self):
        """Gets the funds_availability of this CardBin.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".

        :return: The funds_availability of this CardBin.
        :rtype: str
        """
        return self._funds_availability

    @funds_availability.setter
    def funds_availability(self, funds_availability):
        """Sets the funds_availability of this CardBin.

        Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".

        :param funds_availability: The funds_availability of this CardBin.
        :type funds_availability: str
        """

        self._funds_availability = funds_availability

    @property
    def issuer_bin(self):
        """Gets the issuer_bin of this CardBin.

        The first 8 digit of the card number. Enable this field via merchant account settings.

        :return: The issuer_bin of this CardBin.
        :rtype: str
        """
        return self._issuer_bin

    @issuer_bin.setter
    def issuer_bin(self, issuer_bin):
        """Sets the issuer_bin of this CardBin.

        The first 8 digit of the card number. Enable this field via merchant account settings.

        :param issuer_bin: The issuer_bin of this CardBin.
        :type issuer_bin: str
        """

        self._issuer_bin = issuer_bin

    @property
    def issuing_bank(self):
        """Gets the issuing_bank of this CardBin.

        The issuing bank of the card.

        :return: The issuing_bank of this CardBin.
        :rtype: str
        """
        return self._issuing_bank

    @issuing_bank.setter
    def issuing_bank(self, issuing_bank):
        """Sets the issuing_bank of this CardBin.

        The issuing bank of the card.

        :param issuing_bank: The issuing_bank of this CardBin.
        :type issuing_bank: str
        """

        self._issuing_bank = issuing_bank

    @property
    def issuing_country(self):
        """Gets the issuing_country of this CardBin.

        The country where the card was issued from.

        :return: The issuing_country of this CardBin.
        :rtype: str
        """
        return self._issuing_country

    @issuing_country.setter
    def issuing_country(self, issuing_country):
        """Sets the issuing_country of this CardBin.

        The country where the card was issued from.

        :param issuing_country: The issuing_country of this CardBin.
        :type issuing_country: str
        """

        self._issuing_country = issuing_country

    @property
    def issuing_currency(self):
        """Gets the issuing_currency of this CardBin.

        The currency of the card.

        :return: The issuing_currency of this CardBin.
        :rtype: str
        """
        return self._issuing_currency

    @issuing_currency.setter
    def issuing_currency(self, issuing_currency):
        """Sets the issuing_currency of this CardBin.

        The currency of the card.

        :param issuing_currency: The issuing_currency of this CardBin.
        :type issuing_currency: str
        """

        self._issuing_currency = issuing_currency

    @property
    def payment_method(self):
        """Gets the payment_method of this CardBin.

        The payment method associated with the card (e.g. visa, mc, or amex).

        :return: The payment_method of this CardBin.
        :rtype: str
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CardBin.

        The payment method associated with the card (e.g. visa, mc, or amex).

        :param payment_method: The payment_method of this CardBin.
        :type payment_method: str
        """

        self._payment_method = payment_method

    @property
    def payout_eligible(self):
        """Gets the payout_eligible of this CardBin.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border) * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".

        :return: The payout_eligible of this CardBin.
        :rtype: str
        """
        return self._payout_eligible

    @payout_eligible.setter
    def payout_eligible(self, payout_eligible):
        """Sets the payout_eligible of this CardBin.

        Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border) * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".

        :param payout_eligible: The payout_eligible of this CardBin.
        :type payout_eligible: str
        """

        self._payout_eligible = payout_eligible

    @property
    def summary(self):
        """Gets the summary of this CardBin.

        The last four digits of the card number.

        :return: The summary of this CardBin.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this CardBin.

        The last four digits of the card number.

        :param summary: The summary of this CardBin.
        :type summary: str
        """

        self._summary = summary
