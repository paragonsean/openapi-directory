/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v54/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v54/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 54
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDSAvailabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDSAvailabilityResponse::OAIThreeDSAvailabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDSAvailabilityResponse::OAIThreeDSAvailabilityResponse() {
    this->initializeModel();
}

OAIThreeDSAvailabilityResponse::~OAIThreeDSAvailabilityResponse() {}

void OAIThreeDSAvailabilityResponse::initializeModel() {

    m_bin_details_isSet = false;
    m_bin_details_isValid = false;

    m_ds_public_keys_isSet = false;
    m_ds_public_keys_isValid = false;

    m_three_ds1_supported_isSet = false;
    m_three_ds1_supported_isValid = false;

    m_three_ds2_card_range_details_isSet = false;
    m_three_ds2_card_range_details_isValid = false;

    m_three_ds2supported_isSet = false;
    m_three_ds2supported_isValid = false;
}

void OAIThreeDSAvailabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDSAvailabilityResponse::fromJsonObject(QJsonObject json) {

    m_bin_details_isValid = ::OpenAPI::fromJsonValue(m_bin_details, json[QString("binDetails")]);
    m_bin_details_isSet = !json[QString("binDetails")].isNull() && m_bin_details_isValid;

    m_ds_public_keys_isValid = ::OpenAPI::fromJsonValue(m_ds_public_keys, json[QString("dsPublicKeys")]);
    m_ds_public_keys_isSet = !json[QString("dsPublicKeys")].isNull() && m_ds_public_keys_isValid;

    m_three_ds1_supported_isValid = ::OpenAPI::fromJsonValue(m_three_ds1_supported, json[QString("threeDS1Supported")]);
    m_three_ds1_supported_isSet = !json[QString("threeDS1Supported")].isNull() && m_three_ds1_supported_isValid;

    m_three_ds2_card_range_details_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_card_range_details, json[QString("threeDS2CardRangeDetails")]);
    m_three_ds2_card_range_details_isSet = !json[QString("threeDS2CardRangeDetails")].isNull() && m_three_ds2_card_range_details_isValid;

    m_three_ds2supported_isValid = ::OpenAPI::fromJsonValue(m_three_ds2supported, json[QString("threeDS2supported")]);
    m_three_ds2supported_isSet = !json[QString("threeDS2supported")].isNull() && m_three_ds2supported_isValid;
}

QString OAIThreeDSAvailabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDSAvailabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_details.isSet()) {
        obj.insert(QString("binDetails"), ::OpenAPI::toJsonValue(m_bin_details));
    }
    if (m_ds_public_keys.size() > 0) {
        obj.insert(QString("dsPublicKeys"), ::OpenAPI::toJsonValue(m_ds_public_keys));
    }
    if (m_three_ds1_supported_isSet) {
        obj.insert(QString("threeDS1Supported"), ::OpenAPI::toJsonValue(m_three_ds1_supported));
    }
    if (m_three_ds2_card_range_details.size() > 0) {
        obj.insert(QString("threeDS2CardRangeDetails"), ::OpenAPI::toJsonValue(m_three_ds2_card_range_details));
    }
    if (m_three_ds2supported_isSet) {
        obj.insert(QString("threeDS2supported"), ::OpenAPI::toJsonValue(m_three_ds2supported));
    }
    return obj;
}

OAIBinDetail OAIThreeDSAvailabilityResponse::getBinDetails() const {
    return m_bin_details;
}
void OAIThreeDSAvailabilityResponse::setBinDetails(const OAIBinDetail &bin_details) {
    m_bin_details = bin_details;
    m_bin_details_isSet = true;
}

bool OAIThreeDSAvailabilityResponse::is_bin_details_Set() const{
    return m_bin_details_isSet;
}

bool OAIThreeDSAvailabilityResponse::is_bin_details_Valid() const{
    return m_bin_details_isValid;
}

QList<OAIDSPublicKeyDetail> OAIThreeDSAvailabilityResponse::getDsPublicKeys() const {
    return m_ds_public_keys;
}
void OAIThreeDSAvailabilityResponse::setDsPublicKeys(const QList<OAIDSPublicKeyDetail> &ds_public_keys) {
    m_ds_public_keys = ds_public_keys;
    m_ds_public_keys_isSet = true;
}

bool OAIThreeDSAvailabilityResponse::is_ds_public_keys_Set() const{
    return m_ds_public_keys_isSet;
}

bool OAIThreeDSAvailabilityResponse::is_ds_public_keys_Valid() const{
    return m_ds_public_keys_isValid;
}

bool OAIThreeDSAvailabilityResponse::isThreeDs1Supported() const {
    return m_three_ds1_supported;
}
void OAIThreeDSAvailabilityResponse::setThreeDs1Supported(const bool &three_ds1_supported) {
    m_three_ds1_supported = three_ds1_supported;
    m_three_ds1_supported_isSet = true;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds1_supported_Set() const{
    return m_three_ds1_supported_isSet;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds1_supported_Valid() const{
    return m_three_ds1_supported_isValid;
}

QList<OAIThreeDS2CardRangeDetail> OAIThreeDSAvailabilityResponse::getThreeDs2CardRangeDetails() const {
    return m_three_ds2_card_range_details;
}
void OAIThreeDSAvailabilityResponse::setThreeDs2CardRangeDetails(const QList<OAIThreeDS2CardRangeDetail> &three_ds2_card_range_details) {
    m_three_ds2_card_range_details = three_ds2_card_range_details;
    m_three_ds2_card_range_details_isSet = true;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds2_card_range_details_Set() const{
    return m_three_ds2_card_range_details_isSet;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds2_card_range_details_Valid() const{
    return m_three_ds2_card_range_details_isValid;
}

bool OAIThreeDSAvailabilityResponse::isThreeDs2supported() const {
    return m_three_ds2supported;
}
void OAIThreeDSAvailabilityResponse::setThreeDs2supported(const bool &three_ds2supported) {
    m_three_ds2supported = three_ds2supported;
    m_three_ds2supported_isSet = true;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds2supported_Set() const{
    return m_three_ds2supported_isSet;
}

bool OAIThreeDSAvailabilityResponse::is_three_ds2supported_Valid() const{
    return m_three_ds2supported_isValid;
}

bool OAIThreeDSAvailabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ds_public_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds1_supported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_card_range_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDSAvailabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
