/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v54/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v54/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 54
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostEstimateRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostEstimateRequest::OAICostEstimateRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostEstimateRequest::OAICostEstimateRequest() {
    this->initializeModel();
}

OAICostEstimateRequest::~OAICostEstimateRequest() {}

void OAICostEstimateRequest::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_assumptions_isSet = false;
    m_assumptions_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_encrypted_card_number_isSet = false;
    m_encrypted_card_number_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_merchant_details_isSet = false;
    m_merchant_details_isValid = false;

    m_recurring_isSet = false;
    m_recurring_isValid = false;

    m_selected_recurring_detail_reference_isSet = false;
    m_selected_recurring_detail_reference_isValid = false;

    m_shopper_interaction_isSet = false;
    m_shopper_interaction_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;
}

void OAICostEstimateRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostEstimateRequest::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_assumptions_isValid = ::OpenAPI::fromJsonValue(m_assumptions, json[QString("assumptions")]);
    m_assumptions_isSet = !json[QString("assumptions")].isNull() && m_assumptions_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_encrypted_card_number_isValid = ::OpenAPI::fromJsonValue(m_encrypted_card_number, json[QString("encryptedCardNumber")]);
    m_encrypted_card_number_isSet = !json[QString("encryptedCardNumber")].isNull() && m_encrypted_card_number_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_merchant_details_isValid = ::OpenAPI::fromJsonValue(m_merchant_details, json[QString("merchantDetails")]);
    m_merchant_details_isSet = !json[QString("merchantDetails")].isNull() && m_merchant_details_isValid;

    m_recurring_isValid = ::OpenAPI::fromJsonValue(m_recurring, json[QString("recurring")]);
    m_recurring_isSet = !json[QString("recurring")].isNull() && m_recurring_isValid;

    m_selected_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_selected_recurring_detail_reference, json[QString("selectedRecurringDetailReference")]);
    m_selected_recurring_detail_reference_isSet = !json[QString("selectedRecurringDetailReference")].isNull() && m_selected_recurring_detail_reference_isValid;

    m_shopper_interaction_isValid = ::OpenAPI::fromJsonValue(m_shopper_interaction, json[QString("shopperInteraction")]);
    m_shopper_interaction_isSet = !json[QString("shopperInteraction")].isNull() && m_shopper_interaction_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;
}

QString OAICostEstimateRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostEstimateRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_assumptions.isSet()) {
        obj.insert(QString("assumptions"), ::OpenAPI::toJsonValue(m_assumptions));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_encrypted_card_number_isSet) {
        obj.insert(QString("encryptedCardNumber"), ::OpenAPI::toJsonValue(m_encrypted_card_number));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_merchant_details.isSet()) {
        obj.insert(QString("merchantDetails"), ::OpenAPI::toJsonValue(m_merchant_details));
    }
    if (m_recurring.isSet()) {
        obj.insert(QString("recurring"), ::OpenAPI::toJsonValue(m_recurring));
    }
    if (m_selected_recurring_detail_reference_isSet) {
        obj.insert(QString("selectedRecurringDetailReference"), ::OpenAPI::toJsonValue(m_selected_recurring_detail_reference));
    }
    if (m_shopper_interaction_isSet) {
        obj.insert(QString("shopperInteraction"), ::OpenAPI::toJsonValue(m_shopper_interaction));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    return obj;
}

OAIAmount OAICostEstimateRequest::getAmount() const {
    return m_amount;
}
void OAICostEstimateRequest::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICostEstimateRequest::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICostEstimateRequest::is_amount_Valid() const{
    return m_amount_isValid;
}

OAICostEstimateAssumptions OAICostEstimateRequest::getAssumptions() const {
    return m_assumptions;
}
void OAICostEstimateRequest::setAssumptions(const OAICostEstimateAssumptions &assumptions) {
    m_assumptions = assumptions;
    m_assumptions_isSet = true;
}

bool OAICostEstimateRequest::is_assumptions_Set() const{
    return m_assumptions_isSet;
}

bool OAICostEstimateRequest::is_assumptions_Valid() const{
    return m_assumptions_isValid;
}

QString OAICostEstimateRequest::getCardNumber() const {
    return m_card_number;
}
void OAICostEstimateRequest::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAICostEstimateRequest::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAICostEstimateRequest::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAICostEstimateRequest::getEncryptedCardNumber() const {
    return m_encrypted_card_number;
}
void OAICostEstimateRequest::setEncryptedCardNumber(const QString &encrypted_card_number) {
    m_encrypted_card_number = encrypted_card_number;
    m_encrypted_card_number_isSet = true;
}

bool OAICostEstimateRequest::is_encrypted_card_number_Set() const{
    return m_encrypted_card_number_isSet;
}

bool OAICostEstimateRequest::is_encrypted_card_number_Valid() const{
    return m_encrypted_card_number_isValid;
}

QString OAICostEstimateRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAICostEstimateRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAICostEstimateRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAICostEstimateRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

OAIMerchantDetails OAICostEstimateRequest::getMerchantDetails() const {
    return m_merchant_details;
}
void OAICostEstimateRequest::setMerchantDetails(const OAIMerchantDetails &merchant_details) {
    m_merchant_details = merchant_details;
    m_merchant_details_isSet = true;
}

bool OAICostEstimateRequest::is_merchant_details_Set() const{
    return m_merchant_details_isSet;
}

bool OAICostEstimateRequest::is_merchant_details_Valid() const{
    return m_merchant_details_isValid;
}

OAIRecurring OAICostEstimateRequest::getRecurring() const {
    return m_recurring;
}
void OAICostEstimateRequest::setRecurring(const OAIRecurring &recurring) {
    m_recurring = recurring;
    m_recurring_isSet = true;
}

bool OAICostEstimateRequest::is_recurring_Set() const{
    return m_recurring_isSet;
}

bool OAICostEstimateRequest::is_recurring_Valid() const{
    return m_recurring_isValid;
}

QString OAICostEstimateRequest::getSelectedRecurringDetailReference() const {
    return m_selected_recurring_detail_reference;
}
void OAICostEstimateRequest::setSelectedRecurringDetailReference(const QString &selected_recurring_detail_reference) {
    m_selected_recurring_detail_reference = selected_recurring_detail_reference;
    m_selected_recurring_detail_reference_isSet = true;
}

bool OAICostEstimateRequest::is_selected_recurring_detail_reference_Set() const{
    return m_selected_recurring_detail_reference_isSet;
}

bool OAICostEstimateRequest::is_selected_recurring_detail_reference_Valid() const{
    return m_selected_recurring_detail_reference_isValid;
}

QString OAICostEstimateRequest::getShopperInteraction() const {
    return m_shopper_interaction;
}
void OAICostEstimateRequest::setShopperInteraction(const QString &shopper_interaction) {
    m_shopper_interaction = shopper_interaction;
    m_shopper_interaction_isSet = true;
}

bool OAICostEstimateRequest::is_shopper_interaction_Set() const{
    return m_shopper_interaction_isSet;
}

bool OAICostEstimateRequest::is_shopper_interaction_Valid() const{
    return m_shopper_interaction_isValid;
}

QString OAICostEstimateRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAICostEstimateRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAICostEstimateRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAICostEstimateRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAICostEstimateRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_assumptions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_interaction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostEstimateRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_merchant_account_isValid && true;
}

} // namespace OpenAPI
