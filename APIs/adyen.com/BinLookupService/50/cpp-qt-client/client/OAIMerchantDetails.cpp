/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v50/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v50/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMerchantDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMerchantDetails::OAIMerchantDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMerchantDetails::OAIMerchantDetails() {
    this->initializeModel();
}

OAIMerchantDetails::~OAIMerchantDetails() {}

void OAIMerchantDetails::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_enrolled_in3_d_secure_isSet = false;
    m_enrolled_in3_d_secure_isValid = false;

    m_mcc_isSet = false;
    m_mcc_isValid = false;
}

void OAIMerchantDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMerchantDetails::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("countryCode")]);
    m_country_code_isSet = !json[QString("countryCode")].isNull() && m_country_code_isValid;

    m_enrolled_in3_d_secure_isValid = ::OpenAPI::fromJsonValue(m_enrolled_in3_d_secure, json[QString("enrolledIn3DSecure")]);
    m_enrolled_in3_d_secure_isSet = !json[QString("enrolledIn3DSecure")].isNull() && m_enrolled_in3_d_secure_isValid;

    m_mcc_isValid = ::OpenAPI::fromJsonValue(m_mcc, json[QString("mcc")]);
    m_mcc_isSet = !json[QString("mcc")].isNull() && m_mcc_isValid;
}

QString OAIMerchantDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMerchantDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("countryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_enrolled_in3_d_secure_isSet) {
        obj.insert(QString("enrolledIn3DSecure"), ::OpenAPI::toJsonValue(m_enrolled_in3_d_secure));
    }
    if (m_mcc_isSet) {
        obj.insert(QString("mcc"), ::OpenAPI::toJsonValue(m_mcc));
    }
    return obj;
}

QString OAIMerchantDetails::getCountryCode() const {
    return m_country_code;
}
void OAIMerchantDetails::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIMerchantDetails::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIMerchantDetails::is_country_code_Valid() const{
    return m_country_code_isValid;
}

bool OAIMerchantDetails::isEnrolledIn3DSecure() const {
    return m_enrolled_in3_d_secure;
}
void OAIMerchantDetails::setEnrolledIn3DSecure(const bool &enrolled_in3_d_secure) {
    m_enrolled_in3_d_secure = enrolled_in3_d_secure;
    m_enrolled_in3_d_secure_isSet = true;
}

bool OAIMerchantDetails::is_enrolled_in3_d_secure_Set() const{
    return m_enrolled_in3_d_secure_isSet;
}

bool OAIMerchantDetails::is_enrolled_in3_d_secure_Valid() const{
    return m_enrolled_in3_d_secure_isValid;
}

QString OAIMerchantDetails::getMcc() const {
    return m_mcc;
}
void OAIMerchantDetails::setMcc(const QString &mcc) {
    m_mcc = mcc;
    m_mcc_isSet = true;
}

bool OAIMerchantDetails::is_mcc_Set() const{
    return m_mcc_isSet;
}

bool OAIMerchantDetails::is_mcc_Valid() const{
    return m_mcc_isValid;
}

bool OAIMerchantDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrolled_in3_d_secure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mcc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMerchantDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
