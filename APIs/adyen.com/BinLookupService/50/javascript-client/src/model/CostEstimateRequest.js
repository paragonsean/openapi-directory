/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v50/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v50/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 50
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CostEstimateAssumptions from './CostEstimateAssumptions';
import MerchantDetails from './MerchantDetails';
import Recurring from './Recurring';

/**
 * The CostEstimateRequest model module.
 * @module model/CostEstimateRequest
 * @version 50
 */
class CostEstimateRequest {
    /**
     * Constructs a new <code>CostEstimateRequest</code>.
     * @alias module:model/CostEstimateRequest
     * @param amount {module:model/Amount} The transaction amount used as a base for the cost estimation.
     * @param merchantAccount {String} The merchant account identifier you want to process the (transaction) request with.
     */
    constructor(amount, merchantAccount) { 
        
        CostEstimateRequest.initialize(this, amount, merchantAccount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, merchantAccount) { 
        obj['amount'] = amount;
        obj['merchantAccount'] = merchantAccount;
    }

    /**
     * Constructs a <code>CostEstimateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostEstimateRequest} obj Optional instance to populate.
     * @return {module:model/CostEstimateRequest} The populated <code>CostEstimateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostEstimateRequest();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('assumptions')) {
                obj['assumptions'] = CostEstimateAssumptions.constructFromObject(data['assumptions']);
            }
            if (data.hasOwnProperty('cardNumber')) {
                obj['cardNumber'] = ApiClient.convertToType(data['cardNumber'], 'String');
            }
            if (data.hasOwnProperty('encryptedCardNumber')) {
                obj['encryptedCardNumber'] = ApiClient.convertToType(data['encryptedCardNumber'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantDetails')) {
                obj['merchantDetails'] = MerchantDetails.constructFromObject(data['merchantDetails']);
            }
            if (data.hasOwnProperty('recurring')) {
                obj['recurring'] = Recurring.constructFromObject(data['recurring']);
            }
            if (data.hasOwnProperty('selectedRecurringDetailReference')) {
                obj['selectedRecurringDetailReference'] = ApiClient.convertToType(data['selectedRecurringDetailReference'], 'String');
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('shopperReference')) {
                obj['shopperReference'] = ApiClient.convertToType(data['shopperReference'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CostEstimateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CostEstimateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CostEstimateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `assumptions`
        if (data['assumptions']) { // data not null
          CostEstimateAssumptions.validateJSON(data['assumptions']);
        }
        // ensure the json data is a string
        if (data['cardNumber'] && !(typeof data['cardNumber'] === 'string' || data['cardNumber'] instanceof String)) {
            throw new Error("Expected the field `cardNumber` to be a primitive type in the JSON string but got " + data['cardNumber']);
        }
        // ensure the json data is a string
        if (data['encryptedCardNumber'] && !(typeof data['encryptedCardNumber'] === 'string' || data['encryptedCardNumber'] instanceof String)) {
            throw new Error("Expected the field `encryptedCardNumber` to be a primitive type in the JSON string but got " + data['encryptedCardNumber']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // validate the optional field `merchantDetails`
        if (data['merchantDetails']) { // data not null
          MerchantDetails.validateJSON(data['merchantDetails']);
        }
        // validate the optional field `recurring`
        if (data['recurring']) { // data not null
          Recurring.validateJSON(data['recurring']);
        }
        // ensure the json data is a string
        if (data['selectedRecurringDetailReference'] && !(typeof data['selectedRecurringDetailReference'] === 'string' || data['selectedRecurringDetailReference'] instanceof String)) {
            throw new Error("Expected the field `selectedRecurringDetailReference` to be a primitive type in the JSON string but got " + data['selectedRecurringDetailReference']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // ensure the json data is a string
        if (data['shopperReference'] && !(typeof data['shopperReference'] === 'string' || data['shopperReference'] instanceof String)) {
            throw new Error("Expected the field `shopperReference` to be a primitive type in the JSON string but got " + data['shopperReference']);
        }

        return true;
    }


}

CostEstimateRequest.RequiredProperties = ["amount", "merchantAccount"];

/**
 * The transaction amount used as a base for the cost estimation.
 * @member {module:model/Amount} amount
 */
CostEstimateRequest.prototype['amount'] = undefined;

/**
 * Assumptions made for the expected characteristics of the transaction, for which the charges are being estimated.
 * @member {module:model/CostEstimateAssumptions} assumptions
 */
CostEstimateRequest.prototype['assumptions'] = undefined;

/**
 * The card number (4-19 characters) for PCI compliant use cases. Do not use any separators.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.
 * @member {String} cardNumber
 */
CostEstimateRequest.prototype['cardNumber'] = undefined;

/**
 * Encrypted data that stores card information for non PCI-compliant use cases. The encrypted data must be created with the Checkout Card Component or Secured Fields Component, and must contain the `encryptedCardNumber` field.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.
 * @member {String} encryptedCardNumber
 */
CostEstimateRequest.prototype['encryptedCardNumber'] = undefined;

/**
 * The merchant account identifier you want to process the (transaction) request with.
 * @member {String} merchantAccount
 */
CostEstimateRequest.prototype['merchantAccount'] = undefined;

/**
 * Additional data for merchants who don't use Adyen as the payment authorisation gateway.
 * @member {module:model/MerchantDetails} merchantDetails
 */
CostEstimateRequest.prototype['merchantDetails'] = undefined;

/**
 * The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/online-payments/tokenization).
 * @member {module:model/Recurring} recurring
 */
CostEstimateRequest.prototype['recurring'] = undefined;

/**
 * The `recurringDetailReference` you want to use for this cost estimate. The value `LATEST` can be used to select the most recently stored recurring detail.
 * @member {String} selectedRecurringDetailReference
 */
CostEstimateRequest.prototype['selectedRecurringDetailReference'] = undefined;

/**
 * Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the card holder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.
 * @member {module:model/CostEstimateRequest.ShopperInteractionEnum} shopperInteraction
 */
CostEstimateRequest.prototype['shopperInteraction'] = undefined;

/**
 * Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.
 * @member {String} shopperReference
 */
CostEstimateRequest.prototype['shopperReference'] = undefined;





/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
CostEstimateRequest['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "ContAuth"
     * @const
     */
    "ContAuth": "ContAuth",

    /**
     * value: "Moto"
     * @const
     */
    "Moto": "Moto",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};



export default CostEstimateRequest;

