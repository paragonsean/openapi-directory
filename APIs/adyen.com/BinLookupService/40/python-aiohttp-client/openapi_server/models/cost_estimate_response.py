# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.card_bin import CardBin
from openapi_server import util


class CostEstimateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_bin: CardBin=None, cost_estimate_amount: Amount=None, result_code: str=None, surcharge_type: str=None):
        """CostEstimateResponse - a model defined in OpenAPI

        :param card_bin: The card_bin of this CostEstimateResponse.
        :param cost_estimate_amount: The cost_estimate_amount of this CostEstimateResponse.
        :param result_code: The result_code of this CostEstimateResponse.
        :param surcharge_type: The surcharge_type of this CostEstimateResponse.
        """
        self.openapi_types = {
            'card_bin': CardBin,
            'cost_estimate_amount': Amount,
            'result_code': str,
            'surcharge_type': str
        }

        self.attribute_map = {
            'card_bin': 'cardBin',
            'cost_estimate_amount': 'costEstimateAmount',
            'result_code': 'resultCode',
            'surcharge_type': 'surchargeType'
        }

        self._card_bin = card_bin
        self._cost_estimate_amount = cost_estimate_amount
        self._result_code = result_code
        self._surcharge_type = surcharge_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostEstimateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostEstimateResponse of this CostEstimateResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_bin(self):
        """Gets the card_bin of this CostEstimateResponse.

        Card BIN details.

        :return: The card_bin of this CostEstimateResponse.
        :rtype: CardBin
        """
        return self._card_bin

    @card_bin.setter
    def card_bin(self, card_bin):
        """Sets the card_bin of this CostEstimateResponse.

        Card BIN details.

        :param card_bin: The card_bin of this CostEstimateResponse.
        :type card_bin: CardBin
        """

        self._card_bin = card_bin

    @property
    def cost_estimate_amount(self):
        """Gets the cost_estimate_amount of this CostEstimateResponse.

        The estimated cost (scheme fee + interchange) in the settlement currency. If the settlement currency cannot be determined, the fee in EUR is returned.

        :return: The cost_estimate_amount of this CostEstimateResponse.
        :rtype: Amount
        """
        return self._cost_estimate_amount

    @cost_estimate_amount.setter
    def cost_estimate_amount(self, cost_estimate_amount):
        """Sets the cost_estimate_amount of this CostEstimateResponse.

        The estimated cost (scheme fee + interchange) in the settlement currency. If the settlement currency cannot be determined, the fee in EUR is returned.

        :param cost_estimate_amount: The cost_estimate_amount of this CostEstimateResponse.
        :type cost_estimate_amount: Amount
        """

        self._cost_estimate_amount = cost_estimate_amount

    @property
    def result_code(self):
        """Gets the result_code of this CostEstimateResponse.

        The result of the cost estimation.

        :return: The result_code of this CostEstimateResponse.
        :rtype: str
        """
        return self._result_code

    @result_code.setter
    def result_code(self, result_code):
        """Sets the result_code of this CostEstimateResponse.

        The result of the cost estimation.

        :param result_code: The result_code of this CostEstimateResponse.
        :type result_code: str
        """

        self._result_code = result_code

    @property
    def surcharge_type(self):
        """Gets the surcharge_type of this CostEstimateResponse.

        Indicates the way the charges can be passed on to the cardholder. The following values are possible: * `ZERO` - the charges are not allowed to pass on * `PASSTHROUGH` - the charges can be passed on * `UNLIMITED` - there is no limit on how much surcharge is passed on

        :return: The surcharge_type of this CostEstimateResponse.
        :rtype: str
        """
        return self._surcharge_type

    @surcharge_type.setter
    def surcharge_type(self, surcharge_type):
        """Sets the surcharge_type of this CostEstimateResponse.

        Indicates the way the charges can be passed on to the cardholder. The following values are possible: * `ZERO` - the charges are not allowed to pass on * `PASSTHROUGH` - the charges can be passed on * `UNLIMITED` - there is no limit on how much surcharge is passed on

        :param surcharge_type: The surcharge_type of this CostEstimateResponse.
        :type surcharge_type: str
        """

        self._surcharge_type = surcharge_type
