# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ds_public_key_detail import DSPublicKeyDetail
from openapi_server.models.three_ds2_card_range_detail import ThreeDS2CardRangeDetail
from openapi_server import util


class ThreeDSAvailabilityResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ds_public_keys: List[DSPublicKeyDetail]=None, three_ds1_supported: bool=None, three_ds2_card_range_details: List[ThreeDS2CardRangeDetail]=None, three_ds2supported: bool=None):
        """ThreeDSAvailabilityResponse - a model defined in OpenAPI

        :param ds_public_keys: The ds_public_keys of this ThreeDSAvailabilityResponse.
        :param three_ds1_supported: The three_ds1_supported of this ThreeDSAvailabilityResponse.
        :param three_ds2_card_range_details: The three_ds2_card_range_details of this ThreeDSAvailabilityResponse.
        :param three_ds2supported: The three_ds2supported of this ThreeDSAvailabilityResponse.
        """
        self.openapi_types = {
            'ds_public_keys': List[DSPublicKeyDetail],
            'three_ds1_supported': bool,
            'three_ds2_card_range_details': List[ThreeDS2CardRangeDetail],
            'three_ds2supported': bool
        }

        self.attribute_map = {
            'ds_public_keys': 'dsPublicKeys',
            'three_ds1_supported': 'threeDS1Supported',
            'three_ds2_card_range_details': 'threeDS2CardRangeDetails',
            'three_ds2supported': 'threeDS2supported'
        }

        self._ds_public_keys = ds_public_keys
        self._three_ds1_supported = three_ds1_supported
        self._three_ds2_card_range_details = three_ds2_card_range_details
        self._three_ds2supported = three_ds2supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSAvailabilityResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSAvailabilityResponse of this ThreeDSAvailabilityResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ds_public_keys(self):
        """Gets the ds_public_keys of this ThreeDSAvailabilityResponse.

        List of Directory Server (DS) public keys.

        :return: The ds_public_keys of this ThreeDSAvailabilityResponse.
        :rtype: List[DSPublicKeyDetail]
        """
        return self._ds_public_keys

    @ds_public_keys.setter
    def ds_public_keys(self, ds_public_keys):
        """Sets the ds_public_keys of this ThreeDSAvailabilityResponse.

        List of Directory Server (DS) public keys.

        :param ds_public_keys: The ds_public_keys of this ThreeDSAvailabilityResponse.
        :type ds_public_keys: List[DSPublicKeyDetail]
        """

        self._ds_public_keys = ds_public_keys

    @property
    def three_ds1_supported(self):
        """Gets the three_ds1_supported of this ThreeDSAvailabilityResponse.

        Indicator if 3D Secure 1 is supported.

        :return: The three_ds1_supported of this ThreeDSAvailabilityResponse.
        :rtype: bool
        """
        return self._three_ds1_supported

    @three_ds1_supported.setter
    def three_ds1_supported(self, three_ds1_supported):
        """Sets the three_ds1_supported of this ThreeDSAvailabilityResponse.

        Indicator if 3D Secure 1 is supported.

        :param three_ds1_supported: The three_ds1_supported of this ThreeDSAvailabilityResponse.
        :type three_ds1_supported: bool
        """

        self._three_ds1_supported = three_ds1_supported

    @property
    def three_ds2_card_range_details(self):
        """Gets the three_ds2_card_range_details of this ThreeDSAvailabilityResponse.

        List of brand and card range pairs.

        :return: The three_ds2_card_range_details of this ThreeDSAvailabilityResponse.
        :rtype: List[ThreeDS2CardRangeDetail]
        """
        return self._three_ds2_card_range_details

    @three_ds2_card_range_details.setter
    def three_ds2_card_range_details(self, three_ds2_card_range_details):
        """Sets the three_ds2_card_range_details of this ThreeDSAvailabilityResponse.

        List of brand and card range pairs.

        :param three_ds2_card_range_details: The three_ds2_card_range_details of this ThreeDSAvailabilityResponse.
        :type three_ds2_card_range_details: List[ThreeDS2CardRangeDetail]
        """

        self._three_ds2_card_range_details = three_ds2_card_range_details

    @property
    def three_ds2supported(self):
        """Gets the three_ds2supported of this ThreeDSAvailabilityResponse.

        Indicator if 3D Secure 2 is supported.

        :return: The three_ds2supported of this ThreeDSAvailabilityResponse.
        :rtype: bool
        """
        return self._three_ds2supported

    @three_ds2supported.setter
    def three_ds2supported(self, three_ds2supported):
        """Sets the three_ds2supported of this ThreeDSAvailabilityResponse.

        Indicator if 3D Secure 2 is supported.

        :param three_ds2supported: The three_ds2supported of this ThreeDSAvailabilityResponse.
        :type three_ds2supported: bool
        """

        self._three_ds2supported = three_ds2supported
