# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSAvailabilityRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_data: Dict[str, str]=None, brands: List[str]=None, card_number: str=None, merchant_account: str=None, recurring_detail_reference: str=None, shopper_reference: str=None):
        """ThreeDSAvailabilityRequest - a model defined in OpenAPI

        :param additional_data: The additional_data of this ThreeDSAvailabilityRequest.
        :param brands: The brands of this ThreeDSAvailabilityRequest.
        :param card_number: The card_number of this ThreeDSAvailabilityRequest.
        :param merchant_account: The merchant_account of this ThreeDSAvailabilityRequest.
        :param recurring_detail_reference: The recurring_detail_reference of this ThreeDSAvailabilityRequest.
        :param shopper_reference: The shopper_reference of this ThreeDSAvailabilityRequest.
        """
        self.openapi_types = {
            'additional_data': Dict[str, str],
            'brands': List[str],
            'card_number': str,
            'merchant_account': str,
            'recurring_detail_reference': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'additional_data': 'additionalData',
            'brands': 'brands',
            'card_number': 'cardNumber',
            'merchant_account': 'merchantAccount',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_reference': 'shopperReference'
        }

        self._additional_data = additional_data
        self._brands = brands
        self._card_number = card_number
        self._merchant_account = merchant_account
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSAvailabilityRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSAvailabilityRequest of this ThreeDSAvailabilityRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_data(self):
        """Gets the additional_data of this ThreeDSAvailabilityRequest.

        This field contains additional data, which may be required for a particular request.  The `additionalData` object consists of entries, each of which includes the key and value.

        :return: The additional_data of this ThreeDSAvailabilityRequest.
        :rtype: Dict[str, str]
        """
        return self._additional_data

    @additional_data.setter
    def additional_data(self, additional_data):
        """Sets the additional_data of this ThreeDSAvailabilityRequest.

        This field contains additional data, which may be required for a particular request.  The `additionalData` object consists of entries, each of which includes the key and value.

        :param additional_data: The additional_data of this ThreeDSAvailabilityRequest.
        :type additional_data: Dict[str, str]
        """

        self._additional_data = additional_data

    @property
    def brands(self):
        """Gets the brands of this ThreeDSAvailabilityRequest.

        List of brands.

        :return: The brands of this ThreeDSAvailabilityRequest.
        :rtype: List[str]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this ThreeDSAvailabilityRequest.

        List of brands.

        :param brands: The brands of this ThreeDSAvailabilityRequest.
        :type brands: List[str]
        """

        self._brands = brands

    @property
    def card_number(self):
        """Gets the card_number of this ThreeDSAvailabilityRequest.

        Card number or BIN.

        :return: The card_number of this ThreeDSAvailabilityRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this ThreeDSAvailabilityRequest.

        Card number or BIN.

        :param card_number: The card_number of this ThreeDSAvailabilityRequest.
        :type card_number: str
        """

        self._card_number = card_number

    @property
    def merchant_account(self):
        """Gets the merchant_account of this ThreeDSAvailabilityRequest.

        The merchant account identifier.

        :return: The merchant_account of this ThreeDSAvailabilityRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this ThreeDSAvailabilityRequest.

        The merchant account identifier.

        :param merchant_account: The merchant_account of this ThreeDSAvailabilityRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this ThreeDSAvailabilityRequest.

        A recurring detail reference corresponding to a card.

        :return: The recurring_detail_reference of this ThreeDSAvailabilityRequest.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this ThreeDSAvailabilityRequest.

        A recurring detail reference corresponding to a card.

        :param recurring_detail_reference: The recurring_detail_reference of this ThreeDSAvailabilityRequest.
        :type recurring_detail_reference: str
        """

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this ThreeDSAvailabilityRequest.

        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).

        :return: The shopper_reference of this ThreeDSAvailabilityRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this ThreeDSAvailabilityRequest.

        The shopper's reference to uniquely identify this shopper (e.g. user ID or account ID).

        :param shopper_reference: The shopper_reference of this ThreeDSAvailabilityRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference
