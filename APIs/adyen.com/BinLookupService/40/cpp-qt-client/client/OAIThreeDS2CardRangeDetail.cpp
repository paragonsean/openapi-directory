/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v40/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v40/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDS2CardRangeDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDS2CardRangeDetail::OAIThreeDS2CardRangeDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDS2CardRangeDetail::OAIThreeDS2CardRangeDetail() {
    this->initializeModel();
}

OAIThreeDS2CardRangeDetail::~OAIThreeDS2CardRangeDetail() {}

void OAIThreeDS2CardRangeDetail::initializeModel() {

    m_brand_code_isSet = false;
    m_brand_code_isValid = false;

    m_end_range_isSet = false;
    m_end_range_isValid = false;

    m_start_range_isSet = false;
    m_start_range_isValid = false;

    m_three_ds2_version_isSet = false;
    m_three_ds2_version_isValid = false;

    m_three_ds_method_url_isSet = false;
    m_three_ds_method_url_isValid = false;
}

void OAIThreeDS2CardRangeDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDS2CardRangeDetail::fromJsonObject(QJsonObject json) {

    m_brand_code_isValid = ::OpenAPI::fromJsonValue(m_brand_code, json[QString("brandCode")]);
    m_brand_code_isSet = !json[QString("brandCode")].isNull() && m_brand_code_isValid;

    m_end_range_isValid = ::OpenAPI::fromJsonValue(m_end_range, json[QString("endRange")]);
    m_end_range_isSet = !json[QString("endRange")].isNull() && m_end_range_isValid;

    m_start_range_isValid = ::OpenAPI::fromJsonValue(m_start_range, json[QString("startRange")]);
    m_start_range_isSet = !json[QString("startRange")].isNull() && m_start_range_isValid;

    m_three_ds2_version_isValid = ::OpenAPI::fromJsonValue(m_three_ds2_version, json[QString("threeDS2Version")]);
    m_three_ds2_version_isSet = !json[QString("threeDS2Version")].isNull() && m_three_ds2_version_isValid;

    m_three_ds_method_url_isValid = ::OpenAPI::fromJsonValue(m_three_ds_method_url, json[QString("threeDSMethodURL")]);
    m_three_ds_method_url_isSet = !json[QString("threeDSMethodURL")].isNull() && m_three_ds_method_url_isValid;
}

QString OAIThreeDS2CardRangeDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDS2CardRangeDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_code_isSet) {
        obj.insert(QString("brandCode"), ::OpenAPI::toJsonValue(m_brand_code));
    }
    if (m_end_range_isSet) {
        obj.insert(QString("endRange"), ::OpenAPI::toJsonValue(m_end_range));
    }
    if (m_start_range_isSet) {
        obj.insert(QString("startRange"), ::OpenAPI::toJsonValue(m_start_range));
    }
    if (m_three_ds2_version_isSet) {
        obj.insert(QString("threeDS2Version"), ::OpenAPI::toJsonValue(m_three_ds2_version));
    }
    if (m_three_ds_method_url_isSet) {
        obj.insert(QString("threeDSMethodURL"), ::OpenAPI::toJsonValue(m_three_ds_method_url));
    }
    return obj;
}

QString OAIThreeDS2CardRangeDetail::getBrandCode() const {
    return m_brand_code;
}
void OAIThreeDS2CardRangeDetail::setBrandCode(const QString &brand_code) {
    m_brand_code = brand_code;
    m_brand_code_isSet = true;
}

bool OAIThreeDS2CardRangeDetail::is_brand_code_Set() const{
    return m_brand_code_isSet;
}

bool OAIThreeDS2CardRangeDetail::is_brand_code_Valid() const{
    return m_brand_code_isValid;
}

QString OAIThreeDS2CardRangeDetail::getEndRange() const {
    return m_end_range;
}
void OAIThreeDS2CardRangeDetail::setEndRange(const QString &end_range) {
    m_end_range = end_range;
    m_end_range_isSet = true;
}

bool OAIThreeDS2CardRangeDetail::is_end_range_Set() const{
    return m_end_range_isSet;
}

bool OAIThreeDS2CardRangeDetail::is_end_range_Valid() const{
    return m_end_range_isValid;
}

QString OAIThreeDS2CardRangeDetail::getStartRange() const {
    return m_start_range;
}
void OAIThreeDS2CardRangeDetail::setStartRange(const QString &start_range) {
    m_start_range = start_range;
    m_start_range_isSet = true;
}

bool OAIThreeDS2CardRangeDetail::is_start_range_Set() const{
    return m_start_range_isSet;
}

bool OAIThreeDS2CardRangeDetail::is_start_range_Valid() const{
    return m_start_range_isValid;
}

QString OAIThreeDS2CardRangeDetail::getThreeDs2Version() const {
    return m_three_ds2_version;
}
void OAIThreeDS2CardRangeDetail::setThreeDs2Version(const QString &three_ds2_version) {
    m_three_ds2_version = three_ds2_version;
    m_three_ds2_version_isSet = true;
}

bool OAIThreeDS2CardRangeDetail::is_three_ds2_version_Set() const{
    return m_three_ds2_version_isSet;
}

bool OAIThreeDS2CardRangeDetail::is_three_ds2_version_Valid() const{
    return m_three_ds2_version_isValid;
}

QString OAIThreeDS2CardRangeDetail::getThreeDsMethodUrl() const {
    return m_three_ds_method_url;
}
void OAIThreeDS2CardRangeDetail::setThreeDsMethodUrl(const QString &three_ds_method_url) {
    m_three_ds_method_url = three_ds_method_url;
    m_three_ds_method_url_isSet = true;
}

bool OAIThreeDS2CardRangeDetail::is_three_ds_method_url_Set() const{
    return m_three_ds_method_url_isSet;
}

bool OAIThreeDS2CardRangeDetail::is_three_ds_method_url_Valid() const{
    return m_three_ds_method_url_isValid;
}

bool OAIThreeDS2CardRangeDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds2_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_three_ds_method_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDS2CardRangeDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
