/*
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v40/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v40/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DSPublicKeyDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:50.832524-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DSPublicKeyDetail {
  public static final String SERIALIZED_NAME_BRAND = "brand";
  @SerializedName(SERIALIZED_NAME_BRAND)
  private String brand;

  public static final String SERIALIZED_NAME_DIRECTORY_SERVER_ID = "directoryServerId";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_SERVER_ID)
  private String directoryServerId;

  public static final String SERIALIZED_NAME_FROM_S_D_K_VERSION = "fromSDKVersion";
  @SerializedName(SERIALIZED_NAME_FROM_S_D_K_VERSION)
  private String fromSDKVersion;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "publicKey";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  private String publicKey;

  public static final String SERIALIZED_NAME_ROOT_CERTIFICATES = "rootCertificates";
  @SerializedName(SERIALIZED_NAME_ROOT_CERTIFICATES)
  private String rootCertificates;

  public DSPublicKeyDetail() {
  }

  public DSPublicKeyDetail brand(String brand) {
    this.brand = brand;
    return this;
  }

  /**
   * Card brand.
   * @return brand
   */
  @javax.annotation.Nullable
  public String getBrand() {
    return brand;
  }

  public void setBrand(String brand) {
    this.brand = brand;
  }


  public DSPublicKeyDetail directoryServerId(String directoryServerId) {
    this.directoryServerId = directoryServerId;
    return this;
  }

  /**
   * Directory Server (DS) identifier.
   * @return directoryServerId
   */
  @javax.annotation.Nullable
  public String getDirectoryServerId() {
    return directoryServerId;
  }

  public void setDirectoryServerId(String directoryServerId) {
    this.directoryServerId = directoryServerId;
  }


  public DSPublicKeyDetail fromSDKVersion(String fromSDKVersion) {
    this.fromSDKVersion = fromSDKVersion;
    return this;
  }

  /**
   * The version of the mobile 3D Secure 2 SDK. For the possible values, refer to the versions in [Adyen 3DS2 Android](https://github.com/Adyen/adyen-3ds2-android/releases) and [Adyen 3DS2 iOS](https://github.com/Adyen/adyen-3ds2-ios/releases).
   * @return fromSDKVersion
   */
  @javax.annotation.Nullable
  public String getFromSDKVersion() {
    return fromSDKVersion;
  }

  public void setFromSDKVersion(String fromSDKVersion) {
    this.fromSDKVersion = fromSDKVersion;
  }


  public DSPublicKeyDetail publicKey(String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Public key. The 3D Secure 2 SDK encrypts the device information by using the DS public key.
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(String publicKey) {
    this.publicKey = publicKey;
  }


  public DSPublicKeyDetail rootCertificates(String rootCertificates) {
    this.rootCertificates = rootCertificates;
    return this;
  }

  /**
   * Directory Server root certificates. The 3D Secure 2 SDK verifies the ACS signed content using the rootCertificates.
   * @return rootCertificates
   */
  @javax.annotation.Nullable
  public String getRootCertificates() {
    return rootCertificates;
  }

  public void setRootCertificates(String rootCertificates) {
    this.rootCertificates = rootCertificates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DSPublicKeyDetail dsPublicKeyDetail = (DSPublicKeyDetail) o;
    return Objects.equals(this.brand, dsPublicKeyDetail.brand) &&
        Objects.equals(this.directoryServerId, dsPublicKeyDetail.directoryServerId) &&
        Objects.equals(this.fromSDKVersion, dsPublicKeyDetail.fromSDKVersion) &&
        Objects.equals(this.publicKey, dsPublicKeyDetail.publicKey) &&
        Objects.equals(this.rootCertificates, dsPublicKeyDetail.rootCertificates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, directoryServerId, fromSDKVersion, publicKey, rootCertificates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DSPublicKeyDetail {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    directoryServerId: ").append(toIndentedString(directoryServerId)).append("\n");
    sb.append("    fromSDKVersion: ").append(toIndentedString(fromSDKVersion)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    rootCertificates: ").append(toIndentedString(rootCertificates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brand");
    openapiFields.add("directoryServerId");
    openapiFields.add("fromSDKVersion");
    openapiFields.add("publicKey");
    openapiFields.add("rootCertificates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DSPublicKeyDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DSPublicKeyDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DSPublicKeyDetail is not found in the empty JSON string", DSPublicKeyDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DSPublicKeyDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DSPublicKeyDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("brand") != null && !jsonObj.get("brand").isJsonNull()) && !jsonObj.get("brand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brand").toString()));
      }
      if ((jsonObj.get("directoryServerId") != null && !jsonObj.get("directoryServerId").isJsonNull()) && !jsonObj.get("directoryServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directoryServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directoryServerId").toString()));
      }
      if ((jsonObj.get("fromSDKVersion") != null && !jsonObj.get("fromSDKVersion").isJsonNull()) && !jsonObj.get("fromSDKVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromSDKVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromSDKVersion").toString()));
      }
      if ((jsonObj.get("publicKey") != null && !jsonObj.get("publicKey").isJsonNull()) && !jsonObj.get("publicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicKey").toString()));
      }
      if ((jsonObj.get("rootCertificates") != null && !jsonObj.get("rootCertificates").isJsonNull()) && !jsonObj.get("rootCertificates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootCertificates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootCertificates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DSPublicKeyDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DSPublicKeyDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DSPublicKeyDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DSPublicKeyDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DSPublicKeyDetail>() {
           @Override
           public void write(JsonWriter out, DSPublicKeyDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DSPublicKeyDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DSPublicKeyDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DSPublicKeyDetail
   * @throws IOException if the JSON string is invalid with respect to DSPublicKeyDetail
   */
  public static DSPublicKeyDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DSPublicKeyDetail.class);
  }

  /**
   * Convert an instance of DSPublicKeyDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

