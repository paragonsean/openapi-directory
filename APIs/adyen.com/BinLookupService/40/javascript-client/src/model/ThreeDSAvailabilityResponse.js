/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v40/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v40/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 40
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DSPublicKeyDetail from './DSPublicKeyDetail';
import ThreeDS2CardRangeDetail from './ThreeDS2CardRangeDetail';

/**
 * The ThreeDSAvailabilityResponse model module.
 * @module model/ThreeDSAvailabilityResponse
 * @version 40
 */
class ThreeDSAvailabilityResponse {
    /**
     * Constructs a new <code>ThreeDSAvailabilityResponse</code>.
     * @alias module:model/ThreeDSAvailabilityResponse
     */
    constructor() { 
        
        ThreeDSAvailabilityResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ThreeDSAvailabilityResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ThreeDSAvailabilityResponse} obj Optional instance to populate.
     * @return {module:model/ThreeDSAvailabilityResponse} The populated <code>ThreeDSAvailabilityResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ThreeDSAvailabilityResponse();

            if (data.hasOwnProperty('dsPublicKeys')) {
                obj['dsPublicKeys'] = ApiClient.convertToType(data['dsPublicKeys'], [DSPublicKeyDetail]);
            }
            if (data.hasOwnProperty('threeDS1Supported')) {
                obj['threeDS1Supported'] = ApiClient.convertToType(data['threeDS1Supported'], 'Boolean');
            }
            if (data.hasOwnProperty('threeDS2CardRangeDetails')) {
                obj['threeDS2CardRangeDetails'] = ApiClient.convertToType(data['threeDS2CardRangeDetails'], [ThreeDS2CardRangeDetail]);
            }
            if (data.hasOwnProperty('threeDS2supported')) {
                obj['threeDS2supported'] = ApiClient.convertToType(data['threeDS2supported'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ThreeDSAvailabilityResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ThreeDSAvailabilityResponse</code>.
     */
    static validateJSON(data) {
        if (data['dsPublicKeys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dsPublicKeys'])) {
                throw new Error("Expected the field `dsPublicKeys` to be an array in the JSON data but got " + data['dsPublicKeys']);
            }
            // validate the optional field `dsPublicKeys` (array)
            for (const item of data['dsPublicKeys']) {
                DSPublicKeyDetail.validateJSON(item);
            };
        }
        if (data['threeDS2CardRangeDetails']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['threeDS2CardRangeDetails'])) {
                throw new Error("Expected the field `threeDS2CardRangeDetails` to be an array in the JSON data but got " + data['threeDS2CardRangeDetails']);
            }
            // validate the optional field `threeDS2CardRangeDetails` (array)
            for (const item of data['threeDS2CardRangeDetails']) {
                ThreeDS2CardRangeDetail.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * List of Directory Server (DS) public keys.
 * @member {Array.<module:model/DSPublicKeyDetail>} dsPublicKeys
 */
ThreeDSAvailabilityResponse.prototype['dsPublicKeys'] = undefined;

/**
 * Indicator if 3D Secure 1 is supported.
 * @member {Boolean} threeDS1Supported
 */
ThreeDSAvailabilityResponse.prototype['threeDS1Supported'] = undefined;

/**
 * List of brand and card range pairs.
 * @member {Array.<module:model/ThreeDS2CardRangeDetail>} threeDS2CardRangeDetails
 */
ThreeDSAvailabilityResponse.prototype['threeDS2CardRangeDetails'] = undefined;

/**
 * Indicator if 3D Secure 2 is supported.
 * @member {Boolean} threeDS2supported
 */
ThreeDSAvailabilityResponse.prototype['threeDS2supported'] = undefined;






export default ThreeDSAvailabilityResponse;

