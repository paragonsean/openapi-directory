# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MerchantDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, enrolled_in3_d_secure: bool=None, mcc: str=None):
        """MerchantDetails - a model defined in OpenAPI

        :param country_code: The country_code of this MerchantDetails.
        :param enrolled_in3_d_secure: The enrolled_in3_d_secure of this MerchantDetails.
        :param mcc: The mcc of this MerchantDetails.
        """
        self.openapi_types = {
            'country_code': str,
            'enrolled_in3_d_secure': bool,
            'mcc': str
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'enrolled_in3_d_secure': 'enrolledIn3DSecure',
            'mcc': 'mcc'
        }

        self._country_code = country_code
        self._enrolled_in3_d_secure = enrolled_in3_d_secure
        self._mcc = mcc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MerchantDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MerchantDetails of this MerchantDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this MerchantDetails.

        2-letter ISO 3166 country code of the card acceptor location. > This parameter is required for the merchants who don't use Adyen as the payment authorisation gateway.

        :return: The country_code of this MerchantDetails.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this MerchantDetails.

        2-letter ISO 3166 country code of the card acceptor location. > This parameter is required for the merchants who don't use Adyen as the payment authorisation gateway.

        :param country_code: The country_code of this MerchantDetails.
        :type country_code: str
        """
        if country_code is not None and len(country_code) > 2:
            raise ValueError("Invalid value for `country_code`, length must be less than or equal to `2`")
        if country_code is not None and len(country_code) < 2:
            raise ValueError("Invalid value for `country_code`, length must be greater than or equal to `2`")

        self._country_code = country_code

    @property
    def enrolled_in3_d_secure(self):
        """Gets the enrolled_in3_d_secure of this MerchantDetails.

        If true, indicates that the merchant is enrolled in 3D Secure for the card network.

        :return: The enrolled_in3_d_secure of this MerchantDetails.
        :rtype: bool
        """
        return self._enrolled_in3_d_secure

    @enrolled_in3_d_secure.setter
    def enrolled_in3_d_secure(self, enrolled_in3_d_secure):
        """Sets the enrolled_in3_d_secure of this MerchantDetails.

        If true, indicates that the merchant is enrolled in 3D Secure for the card network.

        :param enrolled_in3_d_secure: The enrolled_in3_d_secure of this MerchantDetails.
        :type enrolled_in3_d_secure: bool
        """

        self._enrolled_in3_d_secure = enrolled_in3_d_secure

    @property
    def mcc(self):
        """Gets the mcc of this MerchantDetails.

        The merchant category code (MCC) is a four-digit number which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.  The list of MCCs can be found [here](https://en.wikipedia.org/wiki/Merchant_category_code).

        :return: The mcc of this MerchantDetails.
        :rtype: str
        """
        return self._mcc

    @mcc.setter
    def mcc(self, mcc):
        """Sets the mcc of this MerchantDetails.

        The merchant category code (MCC) is a four-digit number which relates to a particular market segment. This code reflects the predominant activity that is conducted by the merchant.  The list of MCCs can be found [here](https://en.wikipedia.org/wiki/Merchant_category_code).

        :param mcc: The mcc of this MerchantDetails.
        :type mcc: str
        """

        self._mcc = mcc
