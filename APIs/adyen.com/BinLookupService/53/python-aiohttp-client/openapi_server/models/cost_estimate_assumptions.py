# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CostEstimateAssumptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assume3_d_secure_authenticated: bool=None, assume_level3_data: bool=None, installments: int=None):
        """CostEstimateAssumptions - a model defined in OpenAPI

        :param assume3_d_secure_authenticated: The assume3_d_secure_authenticated of this CostEstimateAssumptions.
        :param assume_level3_data: The assume_level3_data of this CostEstimateAssumptions.
        :param installments: The installments of this CostEstimateAssumptions.
        """
        self.openapi_types = {
            'assume3_d_secure_authenticated': bool,
            'assume_level3_data': bool,
            'installments': int
        }

        self.attribute_map = {
            'assume3_d_secure_authenticated': 'assume3DSecureAuthenticated',
            'assume_level3_data': 'assumeLevel3Data',
            'installments': 'installments'
        }

        self._assume3_d_secure_authenticated = assume3_d_secure_authenticated
        self._assume_level3_data = assume_level3_data
        self._installments = installments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostEstimateAssumptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostEstimateAssumptions of this CostEstimateAssumptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assume3_d_secure_authenticated(self):
        """Gets the assume3_d_secure_authenticated of this CostEstimateAssumptions.

        If true, the cardholder is expected to successfully authorise via 3D Secure.

        :return: The assume3_d_secure_authenticated of this CostEstimateAssumptions.
        :rtype: bool
        """
        return self._assume3_d_secure_authenticated

    @assume3_d_secure_authenticated.setter
    def assume3_d_secure_authenticated(self, assume3_d_secure_authenticated):
        """Sets the assume3_d_secure_authenticated of this CostEstimateAssumptions.

        If true, the cardholder is expected to successfully authorise via 3D Secure.

        :param assume3_d_secure_authenticated: The assume3_d_secure_authenticated of this CostEstimateAssumptions.
        :type assume3_d_secure_authenticated: bool
        """

        self._assume3_d_secure_authenticated = assume3_d_secure_authenticated

    @property
    def assume_level3_data(self):
        """Gets the assume_level3_data of this CostEstimateAssumptions.

        If true, the transaction is expected to have valid Level 3 data.

        :return: The assume_level3_data of this CostEstimateAssumptions.
        :rtype: bool
        """
        return self._assume_level3_data

    @assume_level3_data.setter
    def assume_level3_data(self, assume_level3_data):
        """Sets the assume_level3_data of this CostEstimateAssumptions.

        If true, the transaction is expected to have valid Level 3 data.

        :param assume_level3_data: The assume_level3_data of this CostEstimateAssumptions.
        :type assume_level3_data: bool
        """

        self._assume_level3_data = assume_level3_data

    @property
    def installments(self):
        """Gets the installments of this CostEstimateAssumptions.

        If not zero, the number of installments.

        :return: The installments of this CostEstimateAssumptions.
        :rtype: int
        """
        return self._installments

    @installments.setter
    def installments(self, installments):
        """Sets the installments of this CostEstimateAssumptions.

        If not zero, the number of installments.

        :param installments: The installments of this CostEstimateAssumptions.
        :type installments: int
        """

        self._installments = installments
