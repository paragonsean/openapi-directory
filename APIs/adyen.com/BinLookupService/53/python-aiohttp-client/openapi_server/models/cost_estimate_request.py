# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.cost_estimate_assumptions import CostEstimateAssumptions
from openapi_server.models.merchant_details import MerchantDetails
from openapi_server.models.recurring import Recurring
from openapi_server import util


class CostEstimateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, assumptions: CostEstimateAssumptions=None, card_number: str=None, encrypted_card_number: str=None, merchant_account: str=None, merchant_details: MerchantDetails=None, recurring: Recurring=None, selected_recurring_detail_reference: str=None, shopper_interaction: str=None, shopper_reference: str=None):
        """CostEstimateRequest - a model defined in OpenAPI

        :param amount: The amount of this CostEstimateRequest.
        :param assumptions: The assumptions of this CostEstimateRequest.
        :param card_number: The card_number of this CostEstimateRequest.
        :param encrypted_card_number: The encrypted_card_number of this CostEstimateRequest.
        :param merchant_account: The merchant_account of this CostEstimateRequest.
        :param merchant_details: The merchant_details of this CostEstimateRequest.
        :param recurring: The recurring of this CostEstimateRequest.
        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this CostEstimateRequest.
        :param shopper_interaction: The shopper_interaction of this CostEstimateRequest.
        :param shopper_reference: The shopper_reference of this CostEstimateRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'assumptions': CostEstimateAssumptions,
            'card_number': str,
            'encrypted_card_number': str,
            'merchant_account': str,
            'merchant_details': MerchantDetails,
            'recurring': Recurring,
            'selected_recurring_detail_reference': str,
            'shopper_interaction': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'assumptions': 'assumptions',
            'card_number': 'cardNumber',
            'encrypted_card_number': 'encryptedCardNumber',
            'merchant_account': 'merchantAccount',
            'merchant_details': 'merchantDetails',
            'recurring': 'recurring',
            'selected_recurring_detail_reference': 'selectedRecurringDetailReference',
            'shopper_interaction': 'shopperInteraction',
            'shopper_reference': 'shopperReference'
        }

        self._amount = amount
        self._assumptions = assumptions
        self._card_number = card_number
        self._encrypted_card_number = encrypted_card_number
        self._merchant_account = merchant_account
        self._merchant_details = merchant_details
        self._recurring = recurring
        self._selected_recurring_detail_reference = selected_recurring_detail_reference
        self._shopper_interaction = shopper_interaction
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostEstimateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostEstimateRequest of this CostEstimateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CostEstimateRequest.

        The transaction amount used as a base for the cost estimation.

        :return: The amount of this CostEstimateRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CostEstimateRequest.

        The transaction amount used as a base for the cost estimation.

        :param amount: The amount of this CostEstimateRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def assumptions(self):
        """Gets the assumptions of this CostEstimateRequest.

        Assumptions made for the expected characteristics of the transaction, for which the charges are being estimated.

        :return: The assumptions of this CostEstimateRequest.
        :rtype: CostEstimateAssumptions
        """
        return self._assumptions

    @assumptions.setter
    def assumptions(self, assumptions):
        """Sets the assumptions of this CostEstimateRequest.

        Assumptions made for the expected characteristics of the transaction, for which the charges are being estimated.

        :param assumptions: The assumptions of this CostEstimateRequest.
        :type assumptions: CostEstimateAssumptions
        """

        self._assumptions = assumptions

    @property
    def card_number(self):
        """Gets the card_number of this CostEstimateRequest.

        The card number (4-19 characters) for PCI compliant use cases. Do not use any separators.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.

        :return: The card_number of this CostEstimateRequest.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CostEstimateRequest.

        The card number (4-19 characters) for PCI compliant use cases. Do not use any separators.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.

        :param card_number: The card_number of this CostEstimateRequest.
        :type card_number: str
        """
        if card_number is not None and len(card_number) > 19:
            raise ValueError("Invalid value for `card_number`, length must be less than or equal to `19`")
        if card_number is not None and len(card_number) < 4:
            raise ValueError("Invalid value for `card_number`, length must be greater than or equal to `4`")

        self._card_number = card_number

    @property
    def encrypted_card_number(self):
        """Gets the encrypted_card_number of this CostEstimateRequest.

        Encrypted data that stores card information for non PCI-compliant use cases. The encrypted data must be created with the Checkout Card Component or Secured Fields Component, and must contain the `encryptedCardNumber` field.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.

        :return: The encrypted_card_number of this CostEstimateRequest.
        :rtype: str
        """
        return self._encrypted_card_number

    @encrypted_card_number.setter
    def encrypted_card_number(self, encrypted_card_number):
        """Sets the encrypted_card_number of this CostEstimateRequest.

        Encrypted data that stores card information for non PCI-compliant use cases. The encrypted data must be created with the Checkout Card Component or Secured Fields Component, and must contain the `encryptedCardNumber` field.  > Either the `cardNumber` or `encryptedCardNumber` field must be provided in a payment request.

        :param encrypted_card_number: The encrypted_card_number of this CostEstimateRequest.
        :type encrypted_card_number: str
        """

        self._encrypted_card_number = encrypted_card_number

    @property
    def merchant_account(self):
        """Gets the merchant_account of this CostEstimateRequest.

        The merchant account identifier you want to process the (transaction) request with.

        :return: The merchant_account of this CostEstimateRequest.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this CostEstimateRequest.

        The merchant account identifier you want to process the (transaction) request with.

        :param merchant_account: The merchant_account of this CostEstimateRequest.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def merchant_details(self):
        """Gets the merchant_details of this CostEstimateRequest.

        Additional data for merchants who don't use Adyen as the payment authorisation gateway.

        :return: The merchant_details of this CostEstimateRequest.
        :rtype: MerchantDetails
        """
        return self._merchant_details

    @merchant_details.setter
    def merchant_details(self, merchant_details):
        """Sets the merchant_details of this CostEstimateRequest.

        Additional data for merchants who don't use Adyen as the payment authorisation gateway.

        :param merchant_details: The merchant_details of this CostEstimateRequest.
        :type merchant_details: MerchantDetails
        """

        self._merchant_details = merchant_details

    @property
    def recurring(self):
        """Gets the recurring of this CostEstimateRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/online-payments/tokenization).

        :return: The recurring of this CostEstimateRequest.
        :rtype: Recurring
        """
        return self._recurring

    @recurring.setter
    def recurring(self, recurring):
        """Sets the recurring of this CostEstimateRequest.

        The recurring settings for the payment. Use this property when you want to enable [recurring payments](https://docs.adyen.com/online-payments/tokenization).

        :param recurring: The recurring of this CostEstimateRequest.
        :type recurring: Recurring
        """

        self._recurring = recurring

    @property
    def selected_recurring_detail_reference(self):
        """Gets the selected_recurring_detail_reference of this CostEstimateRequest.

        The `recurringDetailReference` you want to use for this cost estimate. The value `LATEST` can be used to select the most recently stored recurring detail.

        :return: The selected_recurring_detail_reference of this CostEstimateRequest.
        :rtype: str
        """
        return self._selected_recurring_detail_reference

    @selected_recurring_detail_reference.setter
    def selected_recurring_detail_reference(self, selected_recurring_detail_reference):
        """Sets the selected_recurring_detail_reference of this CostEstimateRequest.

        The `recurringDetailReference` you want to use for this cost estimate. The value `LATEST` can be used to select the most recently stored recurring detail.

        :param selected_recurring_detail_reference: The selected_recurring_detail_reference of this CostEstimateRequest.
        :type selected_recurring_detail_reference: str
        """

        self._selected_recurring_detail_reference = selected_recurring_detail_reference

    @property
    def shopper_interaction(self):
        """Gets the shopper_interaction of this CostEstimateRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the card holder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :return: The shopper_interaction of this CostEstimateRequest.
        :rtype: str
        """
        return self._shopper_interaction

    @shopper_interaction.setter
    def shopper_interaction(self, shopper_interaction):
        """Sets the shopper_interaction of this CostEstimateRequest.

        Specifies the sales channel, through which the shopper gives their card details, and whether the shopper is a returning customer. For the web service API, Adyen assumes Ecommerce shopper interaction by default.  This field has the following possible values: * `Ecommerce` - Online transactions where the cardholder is present (online). For better authorisation rates, we recommend sending the card security code (CSC) along with the request. * `ContAuth` - Card on file and/or subscription transactions, where the card holder is known to the merchant (returning customer). If the shopper is present (online), you can supply also the CSC to improve authorisation (one-click payment). * `Moto` - Mail-order and telephone-order transactions where the shopper is in contact with the merchant via email or telephone. * `POS` - Point-of-sale transactions where the shopper is physically present to make a payment using a secure payment terminal.

        :param shopper_interaction: The shopper_interaction of this CostEstimateRequest.
        :type shopper_interaction: str
        """
        allowed_values = ["Ecommerce", "ContAuth", "Moto", "POS"]  # noqa: E501
        if shopper_interaction not in allowed_values:
            raise ValueError(
                "Invalid value for `shopper_interaction` ({0}), must be one of {1}"
                .format(shopper_interaction, allowed_values)
            )

        self._shopper_interaction = shopper_interaction

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this CostEstimateRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :return: The shopper_reference of this CostEstimateRequest.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this CostEstimateRequest.

        Required for recurring payments.  Your reference to uniquely identify this shopper, for example user ID or account ID. Minimum length: 3 characters. > Your reference must not include personally identifiable information (PII), for example name or email address.

        :param shopper_reference: The shopper_reference of this CostEstimateRequest.
        :type shopper_reference: str
        """

        self._shopper_reference = shopper_reference
