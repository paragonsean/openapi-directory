/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDSPublicKeyDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDSPublicKeyDetail::OAIDSPublicKeyDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDSPublicKeyDetail::OAIDSPublicKeyDetail() {
    this->initializeModel();
}

OAIDSPublicKeyDetail::~OAIDSPublicKeyDetail() {}

void OAIDSPublicKeyDetail::initializeModel() {

    m_brand_isSet = false;
    m_brand_isValid = false;

    m_directory_server_id_isSet = false;
    m_directory_server_id_isValid = false;

    m_from_sdk_version_isSet = false;
    m_from_sdk_version_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_root_certificates_isSet = false;
    m_root_certificates_isValid = false;
}

void OAIDSPublicKeyDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDSPublicKeyDetail::fromJsonObject(QJsonObject json) {

    m_brand_isValid = ::OpenAPI::fromJsonValue(m_brand, json[QString("brand")]);
    m_brand_isSet = !json[QString("brand")].isNull() && m_brand_isValid;

    m_directory_server_id_isValid = ::OpenAPI::fromJsonValue(m_directory_server_id, json[QString("directoryServerId")]);
    m_directory_server_id_isSet = !json[QString("directoryServerId")].isNull() && m_directory_server_id_isValid;

    m_from_sdk_version_isValid = ::OpenAPI::fromJsonValue(m_from_sdk_version, json[QString("fromSDKVersion")]);
    m_from_sdk_version_isSet = !json[QString("fromSDKVersion")].isNull() && m_from_sdk_version_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_root_certificates_isValid = ::OpenAPI::fromJsonValue(m_root_certificates, json[QString("rootCertificates")]);
    m_root_certificates_isSet = !json[QString("rootCertificates")].isNull() && m_root_certificates_isValid;
}

QString OAIDSPublicKeyDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDSPublicKeyDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_brand_isSet) {
        obj.insert(QString("brand"), ::OpenAPI::toJsonValue(m_brand));
    }
    if (m_directory_server_id_isSet) {
        obj.insert(QString("directoryServerId"), ::OpenAPI::toJsonValue(m_directory_server_id));
    }
    if (m_from_sdk_version_isSet) {
        obj.insert(QString("fromSDKVersion"), ::OpenAPI::toJsonValue(m_from_sdk_version));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_root_certificates_isSet) {
        obj.insert(QString("rootCertificates"), ::OpenAPI::toJsonValue(m_root_certificates));
    }
    return obj;
}

QString OAIDSPublicKeyDetail::getBrand() const {
    return m_brand;
}
void OAIDSPublicKeyDetail::setBrand(const QString &brand) {
    m_brand = brand;
    m_brand_isSet = true;
}

bool OAIDSPublicKeyDetail::is_brand_Set() const{
    return m_brand_isSet;
}

bool OAIDSPublicKeyDetail::is_brand_Valid() const{
    return m_brand_isValid;
}

QString OAIDSPublicKeyDetail::getDirectoryServerId() const {
    return m_directory_server_id;
}
void OAIDSPublicKeyDetail::setDirectoryServerId(const QString &directory_server_id) {
    m_directory_server_id = directory_server_id;
    m_directory_server_id_isSet = true;
}

bool OAIDSPublicKeyDetail::is_directory_server_id_Set() const{
    return m_directory_server_id_isSet;
}

bool OAIDSPublicKeyDetail::is_directory_server_id_Valid() const{
    return m_directory_server_id_isValid;
}

QString OAIDSPublicKeyDetail::getFromSdkVersion() const {
    return m_from_sdk_version;
}
void OAIDSPublicKeyDetail::setFromSdkVersion(const QString &from_sdk_version) {
    m_from_sdk_version = from_sdk_version;
    m_from_sdk_version_isSet = true;
}

bool OAIDSPublicKeyDetail::is_from_sdk_version_Set() const{
    return m_from_sdk_version_isSet;
}

bool OAIDSPublicKeyDetail::is_from_sdk_version_Valid() const{
    return m_from_sdk_version_isValid;
}

QString OAIDSPublicKeyDetail::getPublicKey() const {
    return m_public_key;
}
void OAIDSPublicKeyDetail::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAIDSPublicKeyDetail::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAIDSPublicKeyDetail::is_public_key_Valid() const{
    return m_public_key_isValid;
}

QString OAIDSPublicKeyDetail::getRootCertificates() const {
    return m_root_certificates;
}
void OAIDSPublicKeyDetail::setRootCertificates(const QString &root_certificates) {
    m_root_certificates = root_certificates;
    m_root_certificates_isSet = true;
}

bool OAIDSPublicKeyDetail::is_root_certificates_Set() const{
    return m_root_certificates_isSet;
}

bool OAIDSPublicKeyDetail::is_root_certificates_Valid() const{
    return m_root_certificates_isValid;
}

bool OAIDSPublicKeyDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_directory_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_sdk_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_certificates_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDSPublicKeyDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
