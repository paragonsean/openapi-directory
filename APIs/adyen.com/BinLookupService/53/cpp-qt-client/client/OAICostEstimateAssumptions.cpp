/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostEstimateAssumptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostEstimateAssumptions::OAICostEstimateAssumptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostEstimateAssumptions::OAICostEstimateAssumptions() {
    this->initializeModel();
}

OAICostEstimateAssumptions::~OAICostEstimateAssumptions() {}

void OAICostEstimateAssumptions::initializeModel() {

    m_assume3_d_secure_authenticated_isSet = false;
    m_assume3_d_secure_authenticated_isValid = false;

    m_assume_level3_data_isSet = false;
    m_assume_level3_data_isValid = false;

    m_installments_isSet = false;
    m_installments_isValid = false;
}

void OAICostEstimateAssumptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostEstimateAssumptions::fromJsonObject(QJsonObject json) {

    m_assume3_d_secure_authenticated_isValid = ::OpenAPI::fromJsonValue(m_assume3_d_secure_authenticated, json[QString("assume3DSecureAuthenticated")]);
    m_assume3_d_secure_authenticated_isSet = !json[QString("assume3DSecureAuthenticated")].isNull() && m_assume3_d_secure_authenticated_isValid;

    m_assume_level3_data_isValid = ::OpenAPI::fromJsonValue(m_assume_level3_data, json[QString("assumeLevel3Data")]);
    m_assume_level3_data_isSet = !json[QString("assumeLevel3Data")].isNull() && m_assume_level3_data_isValid;

    m_installments_isValid = ::OpenAPI::fromJsonValue(m_installments, json[QString("installments")]);
    m_installments_isSet = !json[QString("installments")].isNull() && m_installments_isValid;
}

QString OAICostEstimateAssumptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostEstimateAssumptions::asJsonObject() const {
    QJsonObject obj;
    if (m_assume3_d_secure_authenticated_isSet) {
        obj.insert(QString("assume3DSecureAuthenticated"), ::OpenAPI::toJsonValue(m_assume3_d_secure_authenticated));
    }
    if (m_assume_level3_data_isSet) {
        obj.insert(QString("assumeLevel3Data"), ::OpenAPI::toJsonValue(m_assume_level3_data));
    }
    if (m_installments_isSet) {
        obj.insert(QString("installments"), ::OpenAPI::toJsonValue(m_installments));
    }
    return obj;
}

bool OAICostEstimateAssumptions::isAssume3DSecureAuthenticated() const {
    return m_assume3_d_secure_authenticated;
}
void OAICostEstimateAssumptions::setAssume3DSecureAuthenticated(const bool &assume3_d_secure_authenticated) {
    m_assume3_d_secure_authenticated = assume3_d_secure_authenticated;
    m_assume3_d_secure_authenticated_isSet = true;
}

bool OAICostEstimateAssumptions::is_assume3_d_secure_authenticated_Set() const{
    return m_assume3_d_secure_authenticated_isSet;
}

bool OAICostEstimateAssumptions::is_assume3_d_secure_authenticated_Valid() const{
    return m_assume3_d_secure_authenticated_isValid;
}

bool OAICostEstimateAssumptions::isAssumeLevel3Data() const {
    return m_assume_level3_data;
}
void OAICostEstimateAssumptions::setAssumeLevel3Data(const bool &assume_level3_data) {
    m_assume_level3_data = assume_level3_data;
    m_assume_level3_data_isSet = true;
}

bool OAICostEstimateAssumptions::is_assume_level3_data_Set() const{
    return m_assume_level3_data_isSet;
}

bool OAICostEstimateAssumptions::is_assume_level3_data_Valid() const{
    return m_assume_level3_data_isValid;
}

qint32 OAICostEstimateAssumptions::getInstallments() const {
    return m_installments;
}
void OAICostEstimateAssumptions::setInstallments(const qint32 &installments) {
    m_installments = installments;
    m_installments_isSet = true;
}

bool OAICostEstimateAssumptions::is_installments_Set() const{
    return m_installments_isSet;
}

bool OAICostEstimateAssumptions::is_installments_Valid() const{
    return m_installments_isValid;
}

bool OAICostEstimateAssumptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_assume3_d_secure_authenticated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assume_level3_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostEstimateAssumptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
