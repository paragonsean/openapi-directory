/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICostEstimateResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICostEstimateResponse::OAICostEstimateResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICostEstimateResponse::OAICostEstimateResponse() {
    this->initializeModel();
}

OAICostEstimateResponse::~OAICostEstimateResponse() {}

void OAICostEstimateResponse::initializeModel() {

    m_card_bin_isSet = false;
    m_card_bin_isValid = false;

    m_cost_estimate_amount_isSet = false;
    m_cost_estimate_amount_isValid = false;

    m_cost_estimate_reference_isSet = false;
    m_cost_estimate_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_surcharge_type_isSet = false;
    m_surcharge_type_isValid = false;
}

void OAICostEstimateResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICostEstimateResponse::fromJsonObject(QJsonObject json) {

    m_card_bin_isValid = ::OpenAPI::fromJsonValue(m_card_bin, json[QString("cardBin")]);
    m_card_bin_isSet = !json[QString("cardBin")].isNull() && m_card_bin_isValid;

    m_cost_estimate_amount_isValid = ::OpenAPI::fromJsonValue(m_cost_estimate_amount, json[QString("costEstimateAmount")]);
    m_cost_estimate_amount_isSet = !json[QString("costEstimateAmount")].isNull() && m_cost_estimate_amount_isValid;

    m_cost_estimate_reference_isValid = ::OpenAPI::fromJsonValue(m_cost_estimate_reference, json[QString("costEstimateReference")]);
    m_cost_estimate_reference_isSet = !json[QString("costEstimateReference")].isNull() && m_cost_estimate_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_surcharge_type_isValid = ::OpenAPI::fromJsonValue(m_surcharge_type, json[QString("surchargeType")]);
    m_surcharge_type_isSet = !json[QString("surchargeType")].isNull() && m_surcharge_type_isValid;
}

QString OAICostEstimateResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICostEstimateResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_card_bin.isSet()) {
        obj.insert(QString("cardBin"), ::OpenAPI::toJsonValue(m_card_bin));
    }
    if (m_cost_estimate_amount.isSet()) {
        obj.insert(QString("costEstimateAmount"), ::OpenAPI::toJsonValue(m_cost_estimate_amount));
    }
    if (m_cost_estimate_reference_isSet) {
        obj.insert(QString("costEstimateReference"), ::OpenAPI::toJsonValue(m_cost_estimate_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_surcharge_type_isSet) {
        obj.insert(QString("surchargeType"), ::OpenAPI::toJsonValue(m_surcharge_type));
    }
    return obj;
}

OAICardBin OAICostEstimateResponse::getCardBin() const {
    return m_card_bin;
}
void OAICostEstimateResponse::setCardBin(const OAICardBin &card_bin) {
    m_card_bin = card_bin;
    m_card_bin_isSet = true;
}

bool OAICostEstimateResponse::is_card_bin_Set() const{
    return m_card_bin_isSet;
}

bool OAICostEstimateResponse::is_card_bin_Valid() const{
    return m_card_bin_isValid;
}

OAIAmount OAICostEstimateResponse::getCostEstimateAmount() const {
    return m_cost_estimate_amount;
}
void OAICostEstimateResponse::setCostEstimateAmount(const OAIAmount &cost_estimate_amount) {
    m_cost_estimate_amount = cost_estimate_amount;
    m_cost_estimate_amount_isSet = true;
}

bool OAICostEstimateResponse::is_cost_estimate_amount_Set() const{
    return m_cost_estimate_amount_isSet;
}

bool OAICostEstimateResponse::is_cost_estimate_amount_Valid() const{
    return m_cost_estimate_amount_isValid;
}

QString OAICostEstimateResponse::getCostEstimateReference() const {
    return m_cost_estimate_reference;
}
void OAICostEstimateResponse::setCostEstimateReference(const QString &cost_estimate_reference) {
    m_cost_estimate_reference = cost_estimate_reference;
    m_cost_estimate_reference_isSet = true;
}

bool OAICostEstimateResponse::is_cost_estimate_reference_Set() const{
    return m_cost_estimate_reference_isSet;
}

bool OAICostEstimateResponse::is_cost_estimate_reference_Valid() const{
    return m_cost_estimate_reference_isValid;
}

QString OAICostEstimateResponse::getResultCode() const {
    return m_result_code;
}
void OAICostEstimateResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAICostEstimateResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAICostEstimateResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

QString OAICostEstimateResponse::getSurchargeType() const {
    return m_surcharge_type;
}
void OAICostEstimateResponse::setSurchargeType(const QString &surcharge_type) {
    m_surcharge_type = surcharge_type;
    m_surcharge_type_isSet = true;
}

bool OAICostEstimateResponse::is_surcharge_type_Set() const{
    return m_surcharge_type_isSet;
}

bool OAICostEstimateResponse::is_surcharge_type_Valid() const{
    return m_surcharge_type_isValid;
}

bool OAICostEstimateResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_bin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_estimate_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_estimate_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surcharge_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICostEstimateResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
