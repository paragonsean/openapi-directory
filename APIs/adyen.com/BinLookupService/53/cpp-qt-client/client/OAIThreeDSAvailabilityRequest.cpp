/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThreeDSAvailabilityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThreeDSAvailabilityRequest::OAIThreeDSAvailabilityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThreeDSAvailabilityRequest::OAIThreeDSAvailabilityRequest() {
    this->initializeModel();
}

OAIThreeDSAvailabilityRequest::~OAIThreeDSAvailabilityRequest() {}

void OAIThreeDSAvailabilityRequest::initializeModel() {

    m_additional_data_isSet = false;
    m_additional_data_isValid = false;

    m_brands_isSet = false;
    m_brands_isValid = false;

    m_card_number_isSet = false;
    m_card_number_isValid = false;

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;
}

void OAIThreeDSAvailabilityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThreeDSAvailabilityRequest::fromJsonObject(QJsonObject json) {

    m_additional_data_isValid = ::OpenAPI::fromJsonValue(m_additional_data, json[QString("additionalData")]);
    m_additional_data_isSet = !json[QString("additionalData")].isNull() && m_additional_data_isValid;

    m_brands_isValid = ::OpenAPI::fromJsonValue(m_brands, json[QString("brands")]);
    m_brands_isSet = !json[QString("brands")].isNull() && m_brands_isValid;

    m_card_number_isValid = ::OpenAPI::fromJsonValue(m_card_number, json[QString("cardNumber")]);
    m_card_number_isSet = !json[QString("cardNumber")].isNull() && m_card_number_isValid;

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;
}

QString OAIThreeDSAvailabilityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThreeDSAvailabilityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_data.size() > 0) {
        obj.insert(QString("additionalData"), ::OpenAPI::toJsonValue(m_additional_data));
    }
    if (m_brands.size() > 0) {
        obj.insert(QString("brands"), ::OpenAPI::toJsonValue(m_brands));
    }
    if (m_card_number_isSet) {
        obj.insert(QString("cardNumber"), ::OpenAPI::toJsonValue(m_card_number));
    }
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    return obj;
}

QMap<QString, QString> OAIThreeDSAvailabilityRequest::getAdditionalData() const {
    return m_additional_data;
}
void OAIThreeDSAvailabilityRequest::setAdditionalData(const QMap<QString, QString> &additional_data) {
    m_additional_data = additional_data;
    m_additional_data_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_additional_data_Set() const{
    return m_additional_data_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_additional_data_Valid() const{
    return m_additional_data_isValid;
}

QList<QString> OAIThreeDSAvailabilityRequest::getBrands() const {
    return m_brands;
}
void OAIThreeDSAvailabilityRequest::setBrands(const QList<QString> &brands) {
    m_brands = brands;
    m_brands_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_brands_Set() const{
    return m_brands_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_brands_Valid() const{
    return m_brands_isValid;
}

QString OAIThreeDSAvailabilityRequest::getCardNumber() const {
    return m_card_number;
}
void OAIThreeDSAvailabilityRequest::setCardNumber(const QString &card_number) {
    m_card_number = card_number;
    m_card_number_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_card_number_Set() const{
    return m_card_number_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_card_number_Valid() const{
    return m_card_number_isValid;
}

QString OAIThreeDSAvailabilityRequest::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIThreeDSAvailabilityRequest::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIThreeDSAvailabilityRequest::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIThreeDSAvailabilityRequest::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIThreeDSAvailabilityRequest::getShopperReference() const {
    return m_shopper_reference;
}
void OAIThreeDSAvailabilityRequest::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIThreeDSAvailabilityRequest::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIThreeDSAvailabilityRequest::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAIThreeDSAvailabilityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_brands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThreeDSAvailabilityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_account_isValid && true;
}

} // namespace OpenAPI
