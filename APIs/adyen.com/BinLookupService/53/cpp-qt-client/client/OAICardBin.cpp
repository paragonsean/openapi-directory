/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardBin.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardBin::OAICardBin(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardBin::OAICardBin() {
    this->initializeModel();
}

OAICardBin::~OAICardBin() {}

void OAICardBin::initializeModel() {

    m_bin_isSet = false;
    m_bin_isValid = false;

    m_commercial_isSet = false;
    m_commercial_isValid = false;

    m_funding_source_isSet = false;
    m_funding_source_isValid = false;

    m_funds_availability_isSet = false;
    m_funds_availability_isValid = false;

    m_issuing_bank_isSet = false;
    m_issuing_bank_isValid = false;

    m_issuing_country_isSet = false;
    m_issuing_country_isValid = false;

    m_issuing_currency_isSet = false;
    m_issuing_currency_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_payout_eligible_isSet = false;
    m_payout_eligible_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAICardBin::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardBin::fromJsonObject(QJsonObject json) {

    m_bin_isValid = ::OpenAPI::fromJsonValue(m_bin, json[QString("bin")]);
    m_bin_isSet = !json[QString("bin")].isNull() && m_bin_isValid;

    m_commercial_isValid = ::OpenAPI::fromJsonValue(m_commercial, json[QString("commercial")]);
    m_commercial_isSet = !json[QString("commercial")].isNull() && m_commercial_isValid;

    m_funding_source_isValid = ::OpenAPI::fromJsonValue(m_funding_source, json[QString("fundingSource")]);
    m_funding_source_isSet = !json[QString("fundingSource")].isNull() && m_funding_source_isValid;

    m_funds_availability_isValid = ::OpenAPI::fromJsonValue(m_funds_availability, json[QString("fundsAvailability")]);
    m_funds_availability_isSet = !json[QString("fundsAvailability")].isNull() && m_funds_availability_isValid;

    m_issuing_bank_isValid = ::OpenAPI::fromJsonValue(m_issuing_bank, json[QString("issuingBank")]);
    m_issuing_bank_isSet = !json[QString("issuingBank")].isNull() && m_issuing_bank_isValid;

    m_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_issuing_country, json[QString("issuingCountry")]);
    m_issuing_country_isSet = !json[QString("issuingCountry")].isNull() && m_issuing_country_isValid;

    m_issuing_currency_isValid = ::OpenAPI::fromJsonValue(m_issuing_currency, json[QString("issuingCurrency")]);
    m_issuing_currency_isSet = !json[QString("issuingCurrency")].isNull() && m_issuing_currency_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("paymentMethod")]);
    m_payment_method_isSet = !json[QString("paymentMethod")].isNull() && m_payment_method_isValid;

    m_payout_eligible_isValid = ::OpenAPI::fromJsonValue(m_payout_eligible, json[QString("payoutEligible")]);
    m_payout_eligible_isSet = !json[QString("payoutEligible")].isNull() && m_payout_eligible_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAICardBin::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardBin::asJsonObject() const {
    QJsonObject obj;
    if (m_bin_isSet) {
        obj.insert(QString("bin"), ::OpenAPI::toJsonValue(m_bin));
    }
    if (m_commercial_isSet) {
        obj.insert(QString("commercial"), ::OpenAPI::toJsonValue(m_commercial));
    }
    if (m_funding_source_isSet) {
        obj.insert(QString("fundingSource"), ::OpenAPI::toJsonValue(m_funding_source));
    }
    if (m_funds_availability_isSet) {
        obj.insert(QString("fundsAvailability"), ::OpenAPI::toJsonValue(m_funds_availability));
    }
    if (m_issuing_bank_isSet) {
        obj.insert(QString("issuingBank"), ::OpenAPI::toJsonValue(m_issuing_bank));
    }
    if (m_issuing_country_isSet) {
        obj.insert(QString("issuingCountry"), ::OpenAPI::toJsonValue(m_issuing_country));
    }
    if (m_issuing_currency_isSet) {
        obj.insert(QString("issuingCurrency"), ::OpenAPI::toJsonValue(m_issuing_currency));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("paymentMethod"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_payout_eligible_isSet) {
        obj.insert(QString("payoutEligible"), ::OpenAPI::toJsonValue(m_payout_eligible));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAICardBin::getBin() const {
    return m_bin;
}
void OAICardBin::setBin(const QString &bin) {
    m_bin = bin;
    m_bin_isSet = true;
}

bool OAICardBin::is_bin_Set() const{
    return m_bin_isSet;
}

bool OAICardBin::is_bin_Valid() const{
    return m_bin_isValid;
}

bool OAICardBin::isCommercial() const {
    return m_commercial;
}
void OAICardBin::setCommercial(const bool &commercial) {
    m_commercial = commercial;
    m_commercial_isSet = true;
}

bool OAICardBin::is_commercial_Set() const{
    return m_commercial_isSet;
}

bool OAICardBin::is_commercial_Valid() const{
    return m_commercial_isValid;
}

QString OAICardBin::getFundingSource() const {
    return m_funding_source;
}
void OAICardBin::setFundingSource(const QString &funding_source) {
    m_funding_source = funding_source;
    m_funding_source_isSet = true;
}

bool OAICardBin::is_funding_source_Set() const{
    return m_funding_source_isSet;
}

bool OAICardBin::is_funding_source_Valid() const{
    return m_funding_source_isValid;
}

QString OAICardBin::getFundsAvailability() const {
    return m_funds_availability;
}
void OAICardBin::setFundsAvailability(const QString &funds_availability) {
    m_funds_availability = funds_availability;
    m_funds_availability_isSet = true;
}

bool OAICardBin::is_funds_availability_Set() const{
    return m_funds_availability_isSet;
}

bool OAICardBin::is_funds_availability_Valid() const{
    return m_funds_availability_isValid;
}

QString OAICardBin::getIssuingBank() const {
    return m_issuing_bank;
}
void OAICardBin::setIssuingBank(const QString &issuing_bank) {
    m_issuing_bank = issuing_bank;
    m_issuing_bank_isSet = true;
}

bool OAICardBin::is_issuing_bank_Set() const{
    return m_issuing_bank_isSet;
}

bool OAICardBin::is_issuing_bank_Valid() const{
    return m_issuing_bank_isValid;
}

QString OAICardBin::getIssuingCountry() const {
    return m_issuing_country;
}
void OAICardBin::setIssuingCountry(const QString &issuing_country) {
    m_issuing_country = issuing_country;
    m_issuing_country_isSet = true;
}

bool OAICardBin::is_issuing_country_Set() const{
    return m_issuing_country_isSet;
}

bool OAICardBin::is_issuing_country_Valid() const{
    return m_issuing_country_isValid;
}

QString OAICardBin::getIssuingCurrency() const {
    return m_issuing_currency;
}
void OAICardBin::setIssuingCurrency(const QString &issuing_currency) {
    m_issuing_currency = issuing_currency;
    m_issuing_currency_isSet = true;
}

bool OAICardBin::is_issuing_currency_Set() const{
    return m_issuing_currency_isSet;
}

bool OAICardBin::is_issuing_currency_Valid() const{
    return m_issuing_currency_isValid;
}

QString OAICardBin::getPaymentMethod() const {
    return m_payment_method;
}
void OAICardBin::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAICardBin::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAICardBin::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAICardBin::getPayoutEligible() const {
    return m_payout_eligible;
}
void OAICardBin::setPayoutEligible(const QString &payout_eligible) {
    m_payout_eligible = payout_eligible;
    m_payout_eligible_isSet = true;
}

bool OAICardBin::is_payout_eligible_Set() const{
    return m_payout_eligible_isSet;
}

bool OAICardBin::is_payout_eligible_Valid() const{
    return m_payout_eligible_isValid;
}

QString OAICardBin::getSummary() const {
    return m_summary;
}
void OAICardBin::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAICardBin::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAICardBin::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAICardBin::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funding_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_funds_availability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_bank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardBin::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
