/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CardBin model module.
 * @module model/CardBin
 * @version 53
 */
class CardBin {
    /**
     * Constructs a new <code>CardBin</code>.
     * @alias module:model/CardBin
     */
    constructor() { 
        
        CardBin.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardBin</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardBin} obj Optional instance to populate.
     * @return {module:model/CardBin} The populated <code>CardBin</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardBin();

            if (data.hasOwnProperty('bin')) {
                obj['bin'] = ApiClient.convertToType(data['bin'], 'String');
            }
            if (data.hasOwnProperty('commercial')) {
                obj['commercial'] = ApiClient.convertToType(data['commercial'], 'Boolean');
            }
            if (data.hasOwnProperty('fundingSource')) {
                obj['fundingSource'] = ApiClient.convertToType(data['fundingSource'], 'String');
            }
            if (data.hasOwnProperty('fundsAvailability')) {
                obj['fundsAvailability'] = ApiClient.convertToType(data['fundsAvailability'], 'String');
            }
            if (data.hasOwnProperty('issuingBank')) {
                obj['issuingBank'] = ApiClient.convertToType(data['issuingBank'], 'String');
            }
            if (data.hasOwnProperty('issuingCountry')) {
                obj['issuingCountry'] = ApiClient.convertToType(data['issuingCountry'], 'String');
            }
            if (data.hasOwnProperty('issuingCurrency')) {
                obj['issuingCurrency'] = ApiClient.convertToType(data['issuingCurrency'], 'String');
            }
            if (data.hasOwnProperty('paymentMethod')) {
                obj['paymentMethod'] = ApiClient.convertToType(data['paymentMethod'], 'String');
            }
            if (data.hasOwnProperty('payoutEligible')) {
                obj['payoutEligible'] = ApiClient.convertToType(data['payoutEligible'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardBin</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardBin</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bin'] && !(typeof data['bin'] === 'string' || data['bin'] instanceof String)) {
            throw new Error("Expected the field `bin` to be a primitive type in the JSON string but got " + data['bin']);
        }
        // ensure the json data is a string
        if (data['fundingSource'] && !(typeof data['fundingSource'] === 'string' || data['fundingSource'] instanceof String)) {
            throw new Error("Expected the field `fundingSource` to be a primitive type in the JSON string but got " + data['fundingSource']);
        }
        // ensure the json data is a string
        if (data['fundsAvailability'] && !(typeof data['fundsAvailability'] === 'string' || data['fundsAvailability'] instanceof String)) {
            throw new Error("Expected the field `fundsAvailability` to be a primitive type in the JSON string but got " + data['fundsAvailability']);
        }
        // ensure the json data is a string
        if (data['issuingBank'] && !(typeof data['issuingBank'] === 'string' || data['issuingBank'] instanceof String)) {
            throw new Error("Expected the field `issuingBank` to be a primitive type in the JSON string but got " + data['issuingBank']);
        }
        // ensure the json data is a string
        if (data['issuingCountry'] && !(typeof data['issuingCountry'] === 'string' || data['issuingCountry'] instanceof String)) {
            throw new Error("Expected the field `issuingCountry` to be a primitive type in the JSON string but got " + data['issuingCountry']);
        }
        // ensure the json data is a string
        if (data['issuingCurrency'] && !(typeof data['issuingCurrency'] === 'string' || data['issuingCurrency'] instanceof String)) {
            throw new Error("Expected the field `issuingCurrency` to be a primitive type in the JSON string but got " + data['issuingCurrency']);
        }
        // ensure the json data is a string
        if (data['paymentMethod'] && !(typeof data['paymentMethod'] === 'string' || data['paymentMethod'] instanceof String)) {
            throw new Error("Expected the field `paymentMethod` to be a primitive type in the JSON string but got " + data['paymentMethod']);
        }
        // ensure the json data is a string
        if (data['payoutEligible'] && !(typeof data['payoutEligible'] === 'string' || data['payoutEligible'] instanceof String)) {
            throw new Error("Expected the field `payoutEligible` to be a primitive type in the JSON string but got " + data['payoutEligible']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }

        return true;
    }


}



/**
 * The first 6 digit of the card number. Enable this field via merchant account settings.
 * @member {String} bin
 */
CardBin.prototype['bin'] = undefined;

/**
 * If true, it indicates a commercial card. Enable this field via merchant account settings.
 * @member {Boolean} commercial
 */
CardBin.prototype['commercial'] = undefined;

/**
 * The card funding source. Valid values are: * CHARGE * CREDIT * DEBIT * DEFERRED_DEBIT * PREPAID * PREPAID_RELOADABLE * PREPAID_NONRELOADABLE > Enable this field via merchant account settings.
 * @member {String} fundingSource
 */
CardBin.prototype['fundingSource'] = undefined;

/**
 * Indicates availability of funds.  Visa: * \"I\" (fast funds are supported) * \"N\" (otherwise)  Mastercard: * \"I\" (product type is Prepaid or Debit, or issuing country is in CEE/HGEM list) * \"N\" (otherwise) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".
 * @member {String} fundsAvailability
 */
CardBin.prototype['fundsAvailability'] = undefined;

/**
 * The issuing bank of the card.
 * @member {String} issuingBank
 */
CardBin.prototype['issuingBank'] = undefined;

/**
 * The country where the card was issued from.
 * @member {String} issuingCountry
 */
CardBin.prototype['issuingCountry'] = undefined;

/**
 * The currency of the card.
 * @member {String} issuingCurrency
 */
CardBin.prototype['issuingCurrency'] = undefined;

/**
 * The payment method associated with the card (e.g. visa, mc, or amex).
 * @member {String} paymentMethod
 */
CardBin.prototype['paymentMethod'] = undefined;

/**
 * Indicates whether a payout is eligible or not for this card.  Visa: * \"Y\" * \"N\"  Mastercard: * \"Y\" (domestic and cross-border) * \"D\" (only domestic) * \"N\" (no MoneySend) * \"U\" (unknown) > Returned when you verify a card BIN or estimate costs, and only if `payoutEligible` is different from \"N\" or \"U\".
 * @member {String} payoutEligible
 */
CardBin.prototype['payoutEligible'] = undefined;

/**
 * The last four digits of the card number.
 * @member {String} summary
 */
CardBin.prototype['summary'] = undefined;






export default CardBin;

