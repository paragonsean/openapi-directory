/**
 * Adyen BinLookup API
 * The BIN Lookup API provides endpoints for retrieving information, such as cost estimates, and 3D Secure supported version based on a given BIN.  ## Authentication You need an [API credential](https://docs.adyen.com/development-resources/api-credentials) to authenticate to the API.  If using an API key, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication, for example:  ``` curl -U \"ws@Company.YOUR_COMPANY_ACCOUNT\":\"YOUR_BASIC_AUTHENTICATION_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ```  ## Versioning The BinLookup API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://pal-test.adyen.com/pal/servlet/BinLookup/v53/get3dsAvailability ```## Going live  To authneticate to the live endpoints, you need an [API credential](https://docs.adyen.com/development-resources/api-credentials) from your live Customer Area.  The live endpoint URLs contain a prefix which is unique to your company account: ```  https://{PREFIX}-pal-live.adyenpayments.com/pal/servlet/BinLookup/v53/get3dsAvailability ```  Get your `{PREFIX}` from your live Customer Area under **Developers** > **API URLs** > **Prefix**.
 *
 * The version of the OpenAPI document: 53
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CostEstimateAssumptions model module.
 * @module model/CostEstimateAssumptions
 * @version 53
 */
class CostEstimateAssumptions {
    /**
     * Constructs a new <code>CostEstimateAssumptions</code>.
     * @alias module:model/CostEstimateAssumptions
     */
    constructor() { 
        
        CostEstimateAssumptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CostEstimateAssumptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CostEstimateAssumptions} obj Optional instance to populate.
     * @return {module:model/CostEstimateAssumptions} The populated <code>CostEstimateAssumptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CostEstimateAssumptions();

            if (data.hasOwnProperty('assume3DSecureAuthenticated')) {
                obj['assume3DSecureAuthenticated'] = ApiClient.convertToType(data['assume3DSecureAuthenticated'], 'Boolean');
            }
            if (data.hasOwnProperty('assumeLevel3Data')) {
                obj['assumeLevel3Data'] = ApiClient.convertToType(data['assumeLevel3Data'], 'Boolean');
            }
            if (data.hasOwnProperty('installments')) {
                obj['installments'] = ApiClient.convertToType(data['installments'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CostEstimateAssumptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CostEstimateAssumptions</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * If true, the cardholder is expected to successfully authorise via 3D Secure.
 * @member {Boolean} assume3DSecureAuthenticated
 */
CostEstimateAssumptions.prototype['assume3DSecureAuthenticated'] = undefined;

/**
 * If true, the transaction is expected to have valid Level 3 data.
 * @member {Boolean} assumeLevel3Data
 */
CostEstimateAssumptions.prototype['assumeLevel3Data'] = undefined;

/**
 * If not zero, the number of installments.
 * @member {Number} installments
 */
CostEstimateAssumptions.prototype['installments'] = undefined;






export default CostEstimateAssumptions;

