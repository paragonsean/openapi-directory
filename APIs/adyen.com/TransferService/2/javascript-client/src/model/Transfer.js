/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v2/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v2`.  
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import Bank from './Bank';
import Counterparty from './Counterparty';

/**
 * The Transfer model module.
 * @module model/Transfer
 * @version 2
 */
class Transfer {
    /**
     * Constructs a new <code>Transfer</code>.
     * @alias module:model/Transfer
     * @param amount {module:model/Amount} The amount of the transfer.
     * @param counterparty {module:model/Counterparty} The other party in the transfer.
     * @param status {module:model/Transfer.StatusEnum} The result of the transfer.   For example, **authorised**, **refused**, or **error**.
     */
    constructor(amount, counterparty, status) { 
        
        Transfer.initialize(this, amount, counterparty, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount, counterparty, status) { 
        obj['amount'] = amount;
        obj['counterparty'] = counterparty;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Transfer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transfer} obj Optional instance to populate.
     * @return {module:model/Transfer} The populated <code>Transfer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transfer();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('balanceAccountId')) {
                obj['balanceAccountId'] = ApiClient.convertToType(data['balanceAccountId'], 'String');
            }
            if (data.hasOwnProperty('bank')) {
                obj['bank'] = Bank.constructFromObject(data['bank']);
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = Counterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('direction')) {
                obj['direction'] = ApiClient.convertToType(data['direction'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('paymentInstrumentId')) {
                obj['paymentInstrumentId'] = ApiClient.convertToType(data['paymentInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('referenceForBeneficiary')) {
                obj['referenceForBeneficiary'] = ApiClient.convertToType(data['referenceForBeneficiary'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transfer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transfer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transfer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['balanceAccountId'] && !(typeof data['balanceAccountId'] === 'string' || data['balanceAccountId'] instanceof String)) {
            throw new Error("Expected the field `balanceAccountId` to be a primitive type in the JSON string but got " + data['balanceAccountId']);
        }
        // validate the optional field `bank`
        if (data['bank']) { // data not null
          Bank.validateJSON(data['bank']);
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          Counterparty.validateJSON(data['counterparty']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['direction'] && !(typeof data['direction'] === 'string' || data['direction'] instanceof String)) {
            throw new Error("Expected the field `direction` to be a primitive type in the JSON string but got " + data['direction']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['paymentInstrumentId'] && !(typeof data['paymentInstrumentId'] === 'string' || data['paymentInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `paymentInstrumentId` to be a primitive type in the JSON string but got " + data['paymentInstrumentId']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['referenceForBeneficiary'] && !(typeof data['referenceForBeneficiary'] === 'string' || data['referenceForBeneficiary'] instanceof String)) {
            throw new Error("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got " + data['referenceForBeneficiary']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

Transfer.RequiredProperties = ["amount", "counterparty", "status"];

/**
 * The amount of the transfer.
 * @member {module:model/Amount} amount
 */
Transfer.prototype['amount'] = undefined;

/**
 * The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).
 * @member {String} balanceAccountId
 */
Transfer.prototype['balanceAccountId'] = undefined;

/**
 * Contains settings for bank transfers. If you are transferring funds to bank accounts and you don't provide this object, Adyen applies default settings.
 * @member {module:model/Bank} bank
 */
Transfer.prototype['bank'] = undefined;

/**
 * The other party in the transfer.
 * @member {module:model/Counterparty} counterparty
 */
Transfer.prototype['counterparty'] = undefined;

/**
 * Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**
 * @member {String} description
 */
Transfer.prototype['description'] = undefined;

/**
 * The direction of the transfer.  Possible values: **incoming**, **outgoing**.
 * @member {module:model/Transfer.DirectionEnum} direction
 */
Transfer.prototype['direction'] = undefined;

/**
 * The ID of the resource.
 * @member {String} id
 */
Transfer.prototype['id'] = undefined;

/**
 * The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.
 * @member {String} paymentInstrumentId
 */
Transfer.prototype['paymentInstrumentId'] = undefined;

/**
 * Additional information about the status of the transfer.
 * @member {module:model/Transfer.ReasonEnum} reason
 */
Transfer.prototype['reason'] = undefined;

/**
 * Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.
 * @member {String} reference
 */
Transfer.prototype['reference'] = undefined;

/**
 *  A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. Maximum length: 80 characters.
 * @member {String} referenceForBeneficiary
 */
Transfer.prototype['referenceForBeneficiary'] = undefined;

/**
 * The result of the transfer.   For example, **authorised**, **refused**, or **error**.
 * @member {module:model/Transfer.StatusEnum} status
 */
Transfer.prototype['status'] = undefined;





/**
 * Allowed values for the <code>direction</code> property.
 * @enum {String}
 * @readonly
 */
Transfer['DirectionEnum'] = {

    /**
     * value: "incoming"
     * @const
     */
    "incoming": "incoming",

    /**
     * value: "outgoing"
     * @const
     */
    "outgoing": "outgoing"
};


/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
Transfer['ReasonEnum'] = {

    /**
     * value: "amountLimitExceeded"
     * @const
     */
    "amountLimitExceeded": "amountLimitExceeded",

    /**
     * value: "approved"
     * @const
     */
    "approved": "approved",

    /**
     * value: "balanceAccountTemporarilyBlockedByTransactionRule"
     * @const
     */
    "balanceAccountTemporarilyBlockedByTransactionRule": "balanceAccountTemporarilyBlockedByTransactionRule",

    /**
     * value: "counterpartyAccountBlocked"
     * @const
     */
    "counterpartyAccountBlocked": "counterpartyAccountBlocked",

    /**
     * value: "counterpartyAccountClosed"
     * @const
     */
    "counterpartyAccountClosed": "counterpartyAccountClosed",

    /**
     * value: "counterpartyAccountNotFound"
     * @const
     */
    "counterpartyAccountNotFound": "counterpartyAccountNotFound",

    /**
     * value: "counterpartyAddressRequired"
     * @const
     */
    "counterpartyAddressRequired": "counterpartyAddressRequired",

    /**
     * value: "counterpartyBankTimedOut"
     * @const
     */
    "counterpartyBankTimedOut": "counterpartyBankTimedOut",

    /**
     * value: "counterpartyBankUnavailable"
     * @const
     */
    "counterpartyBankUnavailable": "counterpartyBankUnavailable",

    /**
     * value: "declinedByTransactionRule"
     * @const
     */
    "declinedByTransactionRule": "declinedByTransactionRule",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "notEnoughBalance"
     * @const
     */
    "notEnoughBalance": "notEnoughBalance",

    /**
     * value: "refusedByCounterpartyBank"
     * @const
     */
    "refusedByCounterpartyBank": "refusedByCounterpartyBank",

    /**
     * value: "routeNotFound"
     * @const
     */
    "routeNotFound": "routeNotFound",

    /**
     * value: "scaFailed"
     * @const
     */
    "scaFailed": "scaFailed",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Transfer['StatusEnum'] = {

    /**
     * value: "approvalPending"
     * @const
     */
    "approvalPending": "approvalPending",

    /**
     * value: "atmWithdrawal"
     * @const
     */
    "atmWithdrawal": "atmWithdrawal",

    /**
     * value: "atmWithdrawalReversalPending"
     * @const
     */
    "atmWithdrawalReversalPending": "atmWithdrawalReversalPending",

    /**
     * value: "atmWithdrawalReversed"
     * @const
     */
    "atmWithdrawalReversed": "atmWithdrawalReversed",

    /**
     * value: "authAdjustmentAuthorised"
     * @const
     */
    "authAdjustmentAuthorised": "authAdjustmentAuthorised",

    /**
     * value: "authAdjustmentError"
     * @const
     */
    "authAdjustmentError": "authAdjustmentError",

    /**
     * value: "authAdjustmentRefused"
     * @const
     */
    "authAdjustmentRefused": "authAdjustmentRefused",

    /**
     * value: "authorised"
     * @const
     */
    "authorised": "authorised",

    /**
     * value: "bankTransfer"
     * @const
     */
    "bankTransfer": "bankTransfer",

    /**
     * value: "bankTransferPending"
     * @const
     */
    "bankTransferPending": "bankTransferPending",

    /**
     * value: "booked"
     * @const
     */
    "booked": "booked",

    /**
     * value: "bookingPending"
     * @const
     */
    "bookingPending": "bookingPending",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled",

    /**
     * value: "capturePending"
     * @const
     */
    "capturePending": "capturePending",

    /**
     * value: "captureReversalPending"
     * @const
     */
    "captureReversalPending": "captureReversalPending",

    /**
     * value: "captureReversed"
     * @const
     */
    "captureReversed": "captureReversed",

    /**
     * value: "captured"
     * @const
     */
    "captured": "captured",

    /**
     * value: "capturedExternally"
     * @const
     */
    "capturedExternally": "capturedExternally",

    /**
     * value: "chargeback"
     * @const
     */
    "chargeback": "chargeback",

    /**
     * value: "chargebackExternally"
     * @const
     */
    "chargebackExternally": "chargebackExternally",

    /**
     * value: "chargebackPending"
     * @const
     */
    "chargebackPending": "chargebackPending",

    /**
     * value: "chargebackReversalPending"
     * @const
     */
    "chargebackReversalPending": "chargebackReversalPending",

    /**
     * value: "chargebackReversed"
     * @const
     */
    "chargebackReversed": "chargebackReversed",

    /**
     * value: "credited"
     * @const
     */
    "credited": "credited",

    /**
     * value: "depositCorrection"
     * @const
     */
    "depositCorrection": "depositCorrection",

    /**
     * value: "depositCorrectionPending"
     * @const
     */
    "depositCorrectionPending": "depositCorrectionPending",

    /**
     * value: "dispute"
     * @const
     */
    "dispute": "dispute",

    /**
     * value: "disputeClosed"
     * @const
     */
    "disputeClosed": "disputeClosed",

    /**
     * value: "disputeExpired"
     * @const
     */
    "disputeExpired": "disputeExpired",

    /**
     * value: "disputeNeedsReview"
     * @const
     */
    "disputeNeedsReview": "disputeNeedsReview",

    /**
     * value: "error"
     * @const
     */
    "error": "error",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "failed"
     * @const
     */
    "failed": "failed",

    /**
     * value: "fee"
     * @const
     */
    "fee": "fee",

    /**
     * value: "feePending"
     * @const
     */
    "feePending": "feePending",

    /**
     * value: "internalTransfer"
     * @const
     */
    "internalTransfer": "internalTransfer",

    /**
     * value: "internalTransferPending"
     * @const
     */
    "internalTransferPending": "internalTransferPending",

    /**
     * value: "invoiceDeduction"
     * @const
     */
    "invoiceDeduction": "invoiceDeduction",

    /**
     * value: "invoiceDeductionPending"
     * @const
     */
    "invoiceDeductionPending": "invoiceDeductionPending",

    /**
     * value: "manualCorrectionPending"
     * @const
     */
    "manualCorrectionPending": "manualCorrectionPending",

    /**
     * value: "manuallyCorrected"
     * @const
     */
    "manuallyCorrected": "manuallyCorrected",

    /**
     * value: "matchedStatement"
     * @const
     */
    "matchedStatement": "matchedStatement",

    /**
     * value: "matchedStatementPending"
     * @const
     */
    "matchedStatementPending": "matchedStatementPending",

    /**
     * value: "merchantPayin"
     * @const
     */
    "merchantPayin": "merchantPayin",

    /**
     * value: "merchantPayinPending"
     * @const
     */
    "merchantPayinPending": "merchantPayinPending",

    /**
     * value: "merchantPayinReversed"
     * @const
     */
    "merchantPayinReversed": "merchantPayinReversed",

    /**
     * value: "merchantPayinReversedPending"
     * @const
     */
    "merchantPayinReversedPending": "merchantPayinReversedPending",

    /**
     * value: "miscCost"
     * @const
     */
    "miscCost": "miscCost",

    /**
     * value: "miscCostPending"
     * @const
     */
    "miscCostPending": "miscCostPending",

    /**
     * value: "paymentCost"
     * @const
     */
    "paymentCost": "paymentCost",

    /**
     * value: "paymentCostPending"
     * @const
     */
    "paymentCostPending": "paymentCostPending",

    /**
     * value: "received"
     * @const
     */
    "received": "received",

    /**
     * value: "refundPending"
     * @const
     */
    "refundPending": "refundPending",

    /**
     * value: "refundReversalPending"
     * @const
     */
    "refundReversalPending": "refundReversalPending",

    /**
     * value: "refundReversed"
     * @const
     */
    "refundReversed": "refundReversed",

    /**
     * value: "refunded"
     * @const
     */
    "refunded": "refunded",

    /**
     * value: "refundedExternally"
     * @const
     */
    "refundedExternally": "refundedExternally",

    /**
     * value: "refused"
     * @const
     */
    "refused": "refused",

    /**
     * value: "reserveAdjustment"
     * @const
     */
    "reserveAdjustment": "reserveAdjustment",

    /**
     * value: "reserveAdjustmentPending"
     * @const
     */
    "reserveAdjustmentPending": "reserveAdjustmentPending",

    /**
     * value: "returned"
     * @const
     */
    "returned": "returned",

    /**
     * value: "secondChargeback"
     * @const
     */
    "secondChargeback": "secondChargeback",

    /**
     * value: "secondChargebackPending"
     * @const
     */
    "secondChargebackPending": "secondChargebackPending",

    /**
     * value: "undefined"
     * @const
     */
    "undefined": "undefined"
};



export default Transfer;

