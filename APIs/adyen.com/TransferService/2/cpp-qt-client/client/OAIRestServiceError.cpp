/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v2/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v2`.  
 *
 * The version of the OpenAPI document: 2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestServiceError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestServiceError::OAIRestServiceError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestServiceError::OAIRestServiceError() {
    this->initializeModel();
}

OAIRestServiceError::~OAIRestServiceError() {}

void OAIRestServiceError::initializeModel() {

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_error_code_isSet = false;
    m_error_code_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_invalid_fields_isSet = false;
    m_invalid_fields_isValid = false;

    m_request_id_isSet = false;
    m_request_id_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRestServiceError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestServiceError::fromJsonObject(QJsonObject json) {

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_error_code_isValid = ::OpenAPI::fromJsonValue(m_error_code, json[QString("errorCode")]);
    m_error_code_isSet = !json[QString("errorCode")].isNull() && m_error_code_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_invalid_fields_isValid = ::OpenAPI::fromJsonValue(m_invalid_fields, json[QString("invalidFields")]);
    m_invalid_fields_isSet = !json[QString("invalidFields")].isNull() && m_invalid_fields_isValid;

    m_request_id_isValid = ::OpenAPI::fromJsonValue(m_request_id, json[QString("requestId")]);
    m_request_id_isSet = !json[QString("requestId")].isNull() && m_request_id_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRestServiceError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestServiceError::asJsonObject() const {
    QJsonObject obj;
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_error_code_isSet) {
        obj.insert(QString("errorCode"), ::OpenAPI::toJsonValue(m_error_code));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_invalid_fields.size() > 0) {
        obj.insert(QString("invalidFields"), ::OpenAPI::toJsonValue(m_invalid_fields));
    }
    if (m_request_id_isSet) {
        obj.insert(QString("requestId"), ::OpenAPI::toJsonValue(m_request_id));
    }
    if (m_response_isSet) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIRestServiceError::getDetail() const {
    return m_detail;
}
void OAIRestServiceError::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIRestServiceError::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIRestServiceError::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIRestServiceError::getErrorCode() const {
    return m_error_code;
}
void OAIRestServiceError::setErrorCode(const QString &error_code) {
    m_error_code = error_code;
    m_error_code_isSet = true;
}

bool OAIRestServiceError::is_error_code_Set() const{
    return m_error_code_isSet;
}

bool OAIRestServiceError::is_error_code_Valid() const{
    return m_error_code_isValid;
}

QString OAIRestServiceError::getInstance() const {
    return m_instance;
}
void OAIRestServiceError::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIRestServiceError::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIRestServiceError::is_instance_Valid() const{
    return m_instance_isValid;
}

QList<OAIInvalidField> OAIRestServiceError::getInvalidFields() const {
    return m_invalid_fields;
}
void OAIRestServiceError::setInvalidFields(const QList<OAIInvalidField> &invalid_fields) {
    m_invalid_fields = invalid_fields;
    m_invalid_fields_isSet = true;
}

bool OAIRestServiceError::is_invalid_fields_Set() const{
    return m_invalid_fields_isSet;
}

bool OAIRestServiceError::is_invalid_fields_Valid() const{
    return m_invalid_fields_isValid;
}

QString OAIRestServiceError::getRequestId() const {
    return m_request_id;
}
void OAIRestServiceError::setRequestId(const QString &request_id) {
    m_request_id = request_id;
    m_request_id_isSet = true;
}

bool OAIRestServiceError::is_request_id_Set() const{
    return m_request_id_isSet;
}

bool OAIRestServiceError::is_request_id_Valid() const{
    return m_request_id_isValid;
}

OAIObject OAIRestServiceError::getResponse() const {
    return m_response;
}
void OAIRestServiceError::setResponse(const OAIObject &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIRestServiceError::is_response_Set() const{
    return m_response_isSet;
}

bool OAIRestServiceError::is_response_Valid() const{
    return m_response_isValid;
}

qint32 OAIRestServiceError::getStatus() const {
    return m_status;
}
void OAIRestServiceError::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRestServiceError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRestServiceError::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRestServiceError::getTitle() const {
    return m_title;
}
void OAIRestServiceError::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRestServiceError::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRestServiceError::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIRestServiceError::getType() const {
    return m_type;
}
void OAIRestServiceError::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRestServiceError::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRestServiceError::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRestServiceError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestServiceError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_detail_isValid && m_error_code_isValid && m_status_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
