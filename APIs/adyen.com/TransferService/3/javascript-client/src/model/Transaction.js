/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CounterpartyV3 from './CounterpartyV3';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 3
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     * @param accountHolderId {String} Unique identifier of the account holder.
     * @param amount {module:model/Amount} Contains information about the amount of the transaction.
     * @param balanceAccountId {String} Unique identifier of the balance account.
     * @param balancePlatform {String} The unique identifier of the balance platform.
     * @param bookingDate {Date} The date the transaction was booked into the balance account.
     * @param counterparty {module:model/CounterpartyV3} Contains information about the other party in the transaction.
     * @param createdAt {Date} The date the transaction was created.
     * @param id {String} The unique identifier of the transaction.
     * @param reference {String} The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
     * @param status {module:model/Transaction.StatusEnum} The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
     * @param valueDate {Date} The date the transfer amount becomes available in the balance account.
     */
    constructor(accountHolderId, amount, balanceAccountId, balancePlatform, bookingDate, counterparty, createdAt, id, reference, status, valueDate) { 
        
        Transaction.initialize(this, accountHolderId, amount, balanceAccountId, balancePlatform, bookingDate, counterparty, createdAt, id, reference, status, valueDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHolderId, amount, balanceAccountId, balancePlatform, bookingDate, counterparty, createdAt, id, reference, status, valueDate) { 
        obj['accountHolderId'] = accountHolderId;
        obj['amount'] = amount;
        obj['balanceAccountId'] = balanceAccountId;
        obj['balancePlatform'] = balancePlatform;
        obj['bookingDate'] = bookingDate;
        obj['counterparty'] = counterparty;
        obj['createdAt'] = createdAt;
        obj['id'] = id;
        obj['reference'] = reference;
        obj['status'] = status;
        obj['valueDate'] = valueDate;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('accountHolderId')) {
                obj['accountHolderId'] = ApiClient.convertToType(data['accountHolderId'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('balanceAccountId')) {
                obj['balanceAccountId'] = ApiClient.convertToType(data['balanceAccountId'], 'String');
            }
            if (data.hasOwnProperty('balancePlatform')) {
                obj['balancePlatform'] = ApiClient.convertToType(data['balancePlatform'], 'String');
            }
            if (data.hasOwnProperty('bookingDate')) {
                obj['bookingDate'] = ApiClient.convertToType(data['bookingDate'], 'Date');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = CounterpartyV3.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('eventId')) {
                obj['eventId'] = ApiClient.convertToType(data['eventId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instructedAmount')) {
                obj['instructedAmount'] = Amount.constructFromObject(data['instructedAmount']);
            }
            if (data.hasOwnProperty('paymentInstrumentId')) {
                obj['paymentInstrumentId'] = ApiClient.convertToType(data['paymentInstrumentId'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('referenceForBeneficiary')) {
                obj['referenceForBeneficiary'] = ApiClient.convertToType(data['referenceForBeneficiary'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transferId')) {
                obj['transferId'] = ApiClient.convertToType(data['transferId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('valueDate')) {
                obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderId'] && !(typeof data['accountHolderId'] === 'string' || data['accountHolderId'] instanceof String)) {
            throw new Error("Expected the field `accountHolderId` to be a primitive type in the JSON string but got " + data['accountHolderId']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // ensure the json data is a string
        if (data['balanceAccountId'] && !(typeof data['balanceAccountId'] === 'string' || data['balanceAccountId'] instanceof String)) {
            throw new Error("Expected the field `balanceAccountId` to be a primitive type in the JSON string but got " + data['balanceAccountId']);
        }
        // ensure the json data is a string
        if (data['balancePlatform'] && !(typeof data['balancePlatform'] === 'string' || data['balancePlatform'] instanceof String)) {
            throw new Error("Expected the field `balancePlatform` to be a primitive type in the JSON string but got " + data['balancePlatform']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          CounterpartyV3.validateJSON(data['counterparty']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['eventId'] && !(typeof data['eventId'] === 'string' || data['eventId'] instanceof String)) {
            throw new Error("Expected the field `eventId` to be a primitive type in the JSON string but got " + data['eventId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `instructedAmount`
        if (data['instructedAmount']) { // data not null
          Amount.validateJSON(data['instructedAmount']);
        }
        // ensure the json data is a string
        if (data['paymentInstrumentId'] && !(typeof data['paymentInstrumentId'] === 'string' || data['paymentInstrumentId'] instanceof String)) {
            throw new Error("Expected the field `paymentInstrumentId` to be a primitive type in the JSON string but got " + data['paymentInstrumentId']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['referenceForBeneficiary'] && !(typeof data['referenceForBeneficiary'] === 'string' || data['referenceForBeneficiary'] instanceof String)) {
            throw new Error("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got " + data['referenceForBeneficiary']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['transferId'] && !(typeof data['transferId'] === 'string' || data['transferId'] instanceof String)) {
            throw new Error("Expected the field `transferId` to be a primitive type in the JSON string but got " + data['transferId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Transaction.RequiredProperties = ["accountHolderId", "amount", "balanceAccountId", "balancePlatform", "bookingDate", "counterparty", "createdAt", "id", "reference", "status", "valueDate"];

/**
 * Unique identifier of the account holder.
 * @member {String} accountHolderId
 */
Transaction.prototype['accountHolderId'] = undefined;

/**
 * Contains information about the amount of the transaction.
 * @member {module:model/Amount} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * Unique identifier of the balance account.
 * @member {String} balanceAccountId
 */
Transaction.prototype['balanceAccountId'] = undefined;

/**
 * The unique identifier of the balance platform.
 * @member {String} balancePlatform
 */
Transaction.prototype['balancePlatform'] = undefined;

/**
 * The date the transaction was booked into the balance account.
 * @member {Date} bookingDate
 */
Transaction.prototype['bookingDate'] = undefined;

/**
 * The category of the transaction indicating the type of activity.   Possible values:  * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.  * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.  * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.  * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.  
 * @member {module:model/Transaction.CategoryEnum} category
 */
Transaction.prototype['category'] = undefined;

/**
 * Contains information about the other party in the transaction.
 * @member {module:model/CounterpartyV3} counterparty
 */
Transaction.prototype['counterparty'] = undefined;

/**
 * The date the transaction was created.
 * @member {Date} createdAt
 */
Transaction.prototype['createdAt'] = undefined;

/**
 * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} creationDate
 */
Transaction.prototype['creationDate'] = undefined;

/**
 * The `description` from the `/transfers` request.
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;

/**
 * The PSP reference of the transaction in the journal.
 * @member {String} eventId
 */
Transaction.prototype['eventId'] = undefined;

/**
 * The unique identifier of the transaction.
 * @member {String} id
 */
Transaction.prototype['id'] = undefined;

/**
 * The amount that the sender instructed their bank to send. This can be higher than `amount.value` when their bank deducts costs for the transfer.
 * @member {module:model/Amount} instructedAmount
 */
Transaction.prototype['instructedAmount'] = undefined;

/**
 * The unique identifier of the payment instrument that was used for the transaction.
 * @member {String} paymentInstrumentId
 */
Transaction.prototype['paymentInstrumentId'] = undefined;

/**
 * The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
 * @member {String} reference
 */
Transaction.prototype['reference'] = undefined;

/**
 * The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.
 * @member {String} referenceForBeneficiary
 */
Transaction.prototype['referenceForBeneficiary'] = undefined;

/**
 * The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  
 * @member {module:model/Transaction.StatusEnum} status
 */
Transaction.prototype['status'] = undefined;

/**
 * Unique identifier of the related transfer.
 * @member {String} transferId
 */
Transaction.prototype['transferId'] = undefined;

/**
 * The type of the transaction.   Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**
 * @member {module:model/Transaction.TypeEnum} type
 */
Transaction.prototype['type'] = undefined;

/**
 * The date the transfer amount becomes available in the balance account.
 * @member {Date} valueDate
 */
Transaction.prototype['valueDate'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['CategoryEnum'] = {

    /**
     * value: "bank"
     * @const
     */
    "bank": "bank",

    /**
     * value: "card"
     * @const
     */
    "card": "card",

    /**
     * value: "grants"
     * @const
     */
    "grants": "grants",

    /**
     * value: "internal"
     * @const
     */
    "internal": "internal",

    /**
     * value: "issuedCard"
     * @const
     */
    "issuedCard": "issuedCard",

    /**
     * value: "migration"
     * @const
     */
    "migration": "migration",

    /**
     * value: "platformPayment"
     * @const
     */
    "platformPayment": "platformPayment",

    /**
     * value: "topUp"
     * @const
     */
    "topUp": "topUp",

    /**
     * value: "upgrade"
     * @const
     */
    "upgrade": "upgrade"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['StatusEnum'] = {

    /**
     * value: "booked"
     * @const
     */
    "booked": "booked",

    /**
     * value: "pending"
     * @const
     */
    "pending": "pending"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Transaction['TypeEnum'] = {

    /**
     * value: "atmWithdrawal"
     * @const
     */
    "atmWithdrawal": "atmWithdrawal",

    /**
     * value: "atmWithdrawalReversal"
     * @const
     */
    "atmWithdrawalReversal": "atmWithdrawalReversal",

    /**
     * value: "balanceAdjustment"
     * @const
     */
    "balanceAdjustment": "balanceAdjustment",

    /**
     * value: "balanceMigration"
     * @const
     */
    "balanceMigration": "balanceMigration",

    /**
     * value: "balanceRollover"
     * @const
     */
    "balanceRollover": "balanceRollover",

    /**
     * value: "bankTransfer"
     * @const
     */
    "bankTransfer": "bankTransfer",

    /**
     * value: "capture"
     * @const
     */
    "capture": "capture",

    /**
     * value: "captureReversal"
     * @const
     */
    "captureReversal": "captureReversal",

    /**
     * value: "cardTransfer"
     * @const
     */
    "cardTransfer": "cardTransfer",

    /**
     * value: "cashOutFee"
     * @const
     */
    "cashOutFee": "cashOutFee",

    /**
     * value: "cashOutFunding"
     * @const
     */
    "cashOutFunding": "cashOutFunding",

    /**
     * value: "cashOutInstruction"
     * @const
     */
    "cashOutInstruction": "cashOutInstruction",

    /**
     * value: "chargeback"
     * @const
     */
    "chargeback": "chargeback",

    /**
     * value: "chargebackCorrection"
     * @const
     */
    "chargebackCorrection": "chargebackCorrection",

    /**
     * value: "chargebackReversal"
     * @const
     */
    "chargebackReversal": "chargebackReversal",

    /**
     * value: "chargebackReversalCorrection"
     * @const
     */
    "chargebackReversalCorrection": "chargebackReversalCorrection",

    /**
     * value: "depositCorrection"
     * @const
     */
    "depositCorrection": "depositCorrection",

    /**
     * value: "fee"
     * @const
     */
    "fee": "fee",

    /**
     * value: "grant"
     * @const
     */
    "grant": "grant",

    /**
     * value: "installment"
     * @const
     */
    "installment": "installment",

    /**
     * value: "installmentReversal"
     * @const
     */
    "installmentReversal": "installmentReversal",

    /**
     * value: "internalTransfer"
     * @const
     */
    "internalTransfer": "internalTransfer",

    /**
     * value: "invoiceDeduction"
     * @const
     */
    "invoiceDeduction": "invoiceDeduction",

    /**
     * value: "leftover"
     * @const
     */
    "leftover": "leftover",

    /**
     * value: "manualCorrection"
     * @const
     */
    "manualCorrection": "manualCorrection",

    /**
     * value: "miscCost"
     * @const
     */
    "miscCost": "miscCost",

    /**
     * value: "payment"
     * @const
     */
    "payment": "payment",

    /**
     * value: "paymentCost"
     * @const
     */
    "paymentCost": "paymentCost",

    /**
     * value: "refund"
     * @const
     */
    "refund": "refund",

    /**
     * value: "refundReversal"
     * @const
     */
    "refundReversal": "refundReversal",

    /**
     * value: "repayment"
     * @const
     */
    "repayment": "repayment",

    /**
     * value: "reserveAdjustment"
     * @const
     */
    "reserveAdjustment": "reserveAdjustment",

    /**
     * value: "secondChargeback"
     * @const
     */
    "secondChargeback": "secondChargeback",

    /**
     * value: "secondChargebackCorrection"
     * @const
     */
    "secondChargebackCorrection": "secondChargebackCorrection"
};



export default Transaction;

