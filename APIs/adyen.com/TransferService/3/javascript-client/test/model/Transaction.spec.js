/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TransfersApi);
  }
}(this, function(expect, TransfersApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TransfersApi.Transaction();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Transaction', function() {
    it('should create an instance of Transaction', function() {
      // uncomment below and update the code to test Transaction
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be.a(TransfersApi.Transaction);
    });

    it('should have the property accountHolderId (base name: "accountHolderId")', function() {
      // uncomment below and update the code to test the property accountHolderId
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property amount (base name: "amount")', function() {
      // uncomment below and update the code to test the property amount
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property balanceAccountId (base name: "balanceAccountId")', function() {
      // uncomment below and update the code to test the property balanceAccountId
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property balancePlatform (base name: "balancePlatform")', function() {
      // uncomment below and update the code to test the property balancePlatform
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property bookingDate (base name: "bookingDate")', function() {
      // uncomment below and update the code to test the property bookingDate
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property category (base name: "category")', function() {
      // uncomment below and update the code to test the property category
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property counterparty (base name: "counterparty")', function() {
      // uncomment below and update the code to test the property counterparty
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creationDate")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property eventId (base name: "eventId")', function() {
      // uncomment below and update the code to test the property eventId
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property instructedAmount (base name: "instructedAmount")', function() {
      // uncomment below and update the code to test the property instructedAmount
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property paymentInstrumentId (base name: "paymentInstrumentId")', function() {
      // uncomment below and update the code to test the property paymentInstrumentId
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property reference (base name: "reference")', function() {
      // uncomment below and update the code to test the property reference
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property referenceForBeneficiary (base name: "referenceForBeneficiary")', function() {
      // uncomment below and update the code to test the property referenceForBeneficiary
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property transferId (base name: "transferId")', function() {
      // uncomment below and update the code to test the property transferId
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

    it('should have the property valueDate (base name: "valueDate")', function() {
      // uncomment below and update the code to test the property valueDate
      //var instance = new TransfersApi.Transaction();
      //expect(instance).to.be();
    });

  });

}));
