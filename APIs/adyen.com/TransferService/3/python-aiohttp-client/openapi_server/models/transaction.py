# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.counterparty_v3 import CounterpartyV3
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_id: str=None, amount: Amount=None, balance_account_id: str=None, balance_platform: str=None, booking_date: datetime=None, category: str=None, counterparty: CounterpartyV3=None, created_at: datetime=None, creation_date: datetime=None, description: str=None, event_id: str=None, id: str=None, instructed_amount: Amount=None, payment_instrument_id: str=None, reference: str=None, reference_for_beneficiary: str=None, status: str=None, transfer_id: str=None, type: str=None, value_date: datetime=None):
        """Transaction - a model defined in OpenAPI

        :param account_holder_id: The account_holder_id of this Transaction.
        :param amount: The amount of this Transaction.
        :param balance_account_id: The balance_account_id of this Transaction.
        :param balance_platform: The balance_platform of this Transaction.
        :param booking_date: The booking_date of this Transaction.
        :param category: The category of this Transaction.
        :param counterparty: The counterparty of this Transaction.
        :param created_at: The created_at of this Transaction.
        :param creation_date: The creation_date of this Transaction.
        :param description: The description of this Transaction.
        :param event_id: The event_id of this Transaction.
        :param id: The id of this Transaction.
        :param instructed_amount: The instructed_amount of this Transaction.
        :param payment_instrument_id: The payment_instrument_id of this Transaction.
        :param reference: The reference of this Transaction.
        :param reference_for_beneficiary: The reference_for_beneficiary of this Transaction.
        :param status: The status of this Transaction.
        :param transfer_id: The transfer_id of this Transaction.
        :param type: The type of this Transaction.
        :param value_date: The value_date of this Transaction.
        """
        self.openapi_types = {
            'account_holder_id': str,
            'amount': Amount,
            'balance_account_id': str,
            'balance_platform': str,
            'booking_date': datetime,
            'category': str,
            'counterparty': CounterpartyV3,
            'created_at': datetime,
            'creation_date': datetime,
            'description': str,
            'event_id': str,
            'id': str,
            'instructed_amount': Amount,
            'payment_instrument_id': str,
            'reference': str,
            'reference_for_beneficiary': str,
            'status': str,
            'transfer_id': str,
            'type': str,
            'value_date': datetime
        }

        self.attribute_map = {
            'account_holder_id': 'accountHolderId',
            'amount': 'amount',
            'balance_account_id': 'balanceAccountId',
            'balance_platform': 'balancePlatform',
            'booking_date': 'bookingDate',
            'category': 'category',
            'counterparty': 'counterparty',
            'created_at': 'createdAt',
            'creation_date': 'creationDate',
            'description': 'description',
            'event_id': 'eventId',
            'id': 'id',
            'instructed_amount': 'instructedAmount',
            'payment_instrument_id': 'paymentInstrumentId',
            'reference': 'reference',
            'reference_for_beneficiary': 'referenceForBeneficiary',
            'status': 'status',
            'transfer_id': 'transferId',
            'type': 'type',
            'value_date': 'valueDate'
        }

        self._account_holder_id = account_holder_id
        self._amount = amount
        self._balance_account_id = balance_account_id
        self._balance_platform = balance_platform
        self._booking_date = booking_date
        self._category = category
        self._counterparty = counterparty
        self._created_at = created_at
        self._creation_date = creation_date
        self._description = description
        self._event_id = event_id
        self._id = id
        self._instructed_amount = instructed_amount
        self._payment_instrument_id = payment_instrument_id
        self._reference = reference
        self._reference_for_beneficiary = reference_for_beneficiary
        self._status = status
        self._transfer_id = transfer_id
        self._type = type
        self._value_date = value_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this Transaction.

        Unique identifier of the account holder.

        :return: The account_holder_id of this Transaction.
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this Transaction.

        Unique identifier of the account holder.

        :param account_holder_id: The account_holder_id of this Transaction.
        :type account_holder_id: str
        """
        if account_holder_id is None:
            raise ValueError("Invalid value for `account_holder_id`, must not be `None`")

        self._account_holder_id = account_holder_id

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        Contains information about the amount of the transaction.

        :return: The amount of this Transaction.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        Contains information about the amount of the transaction.

        :param amount: The amount of this Transaction.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this Transaction.

        Unique identifier of the balance account.

        :return: The balance_account_id of this Transaction.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this Transaction.

        Unique identifier of the balance account.

        :param balance_account_id: The balance_account_id of this Transaction.
        :type balance_account_id: str
        """
        if balance_account_id is None:
            raise ValueError("Invalid value for `balance_account_id`, must not be `None`")

        self._balance_account_id = balance_account_id

    @property
    def balance_platform(self):
        """Gets the balance_platform of this Transaction.

        The unique identifier of the balance platform.

        :return: The balance_platform of this Transaction.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this Transaction.

        The unique identifier of the balance platform.

        :param balance_platform: The balance_platform of this Transaction.
        :type balance_platform: str
        """
        if balance_platform is None:
            raise ValueError("Invalid value for `balance_platform`, must not be `None`")

        self._balance_platform = balance_platform

    @property
    def booking_date(self):
        """Gets the booking_date of this Transaction.

        The date the transaction was booked into the balance account.

        :return: The booking_date of this Transaction.
        :rtype: datetime
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this Transaction.

        The date the transaction was booked into the balance account.

        :param booking_date: The booking_date of this Transaction.
        :type booking_date: datetime
        """
        if booking_date is None:
            raise ValueError("Invalid value for `booking_date`, must not be `None`")

        self._booking_date = booking_date

    @property
    def category(self):
        """Gets the category of this Transaction.

        The category of the transaction indicating the type of activity.   Possible values:  * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.  * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.  * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.  * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.  

        :return: The category of this Transaction.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Transaction.

        The category of the transaction indicating the type of activity.   Possible values:  * **platformPayment**: The transaction is a payment or payment modification made with an Adyen merchant account.  * **internal**: The transaction resulted from an internal adjustment such as a deposit correction or invoice deduction.  * **bank**: The transaction is a bank-related activity, such as sending a payout or receiving funds.  * **issuedCard**: The transaction is a card-related activity, such as using an Adyen-issued card to pay online.  

        :param category: The category of this Transaction.
        :type category: str
        """
        allowed_values = ["bank", "card", "grants", "internal", "issuedCard", "migration", "platformPayment", "topUp", "upgrade"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def counterparty(self):
        """Gets the counterparty of this Transaction.

        Contains information about the other party in the transaction.

        :return: The counterparty of this Transaction.
        :rtype: CounterpartyV3
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this Transaction.

        Contains information about the other party in the transaction.

        :param counterparty: The counterparty of this Transaction.
        :type counterparty: CounterpartyV3
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")

        self._counterparty = counterparty

    @property
    def created_at(self):
        """Gets the created_at of this Transaction.

        The date the transaction was created.

        :return: The created_at of this Transaction.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Transaction.

        The date the transaction was created.

        :param created_at: The created_at of this Transaction.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def creation_date(self):
        """Gets the creation_date of this Transaction.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :return: The creation_date of this Transaction.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Transaction.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :param creation_date: The creation_date of this Transaction.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this Transaction.

        The `description` from the `/transfers` request.

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        The `description` from the `/transfers` request.

        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def event_id(self):
        """Gets the event_id of this Transaction.

        The PSP reference of the transaction in the journal.

        :return: The event_id of this Transaction.
        :rtype: str
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this Transaction.

        The PSP reference of the transaction in the journal.

        :param event_id: The event_id of this Transaction.
        :type event_id: str
        """

        self._event_id = event_id

    @property
    def id(self):
        """Gets the id of this Transaction.

        The unique identifier of the transaction.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        The unique identifier of the transaction.

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this Transaction.

        The amount that the sender instructed their bank to send. This can be higher than `amount.value` when their bank deducts costs for the transfer.

        :return: The instructed_amount of this Transaction.
        :rtype: Amount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this Transaction.

        The amount that the sender instructed their bank to send. This can be higher than `amount.value` when their bank deducts costs for the transfer.

        :param instructed_amount: The instructed_amount of this Transaction.
        :type instructed_amount: Amount
        """

        self._instructed_amount = instructed_amount

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this Transaction.

        The unique identifier of the payment instrument that was used for the transaction.

        :return: The payment_instrument_id of this Transaction.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this Transaction.

        The unique identifier of the payment instrument that was used for the transaction.

        :param payment_instrument_id: The payment_instrument_id of this Transaction.
        :type payment_instrument_id: str
        """

        self._payment_instrument_id = payment_instrument_id

    @property
    def reference(self):
        """Gets the reference of this Transaction.

        The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.

        :return: The reference of this Transaction.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Transaction.

        The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.

        :param reference: The reference of this Transaction.
        :type reference: str
        """
        if reference is None:
            raise ValueError("Invalid value for `reference`, must not be `None`")

        self._reference = reference

    @property
    def reference_for_beneficiary(self):
        """Gets the reference_for_beneficiary of this Transaction.

        The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.

        :return: The reference_for_beneficiary of this Transaction.
        :rtype: str
        """
        return self._reference_for_beneficiary

    @reference_for_beneficiary.setter
    def reference_for_beneficiary(self, reference_for_beneficiary):
        """Sets the reference_for_beneficiary of this Transaction.

        The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_referenceForBeneficiary) request.   * For incoming funds, this is the reference from the sender.

        :param reference_for_beneficiary: The reference_for_beneficiary of this Transaction.
        :type reference_for_beneficiary: str
        """

        self._reference_for_beneficiary = reference_for_beneficiary

    @property
    def status(self):
        """Gets the status of this Transaction.

        The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  

        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  

        :param status: The status of this Transaction.
        :type status: str
        """
        allowed_values = ["booked", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transfer_id(self):
        """Gets the transfer_id of this Transaction.

        Unique identifier of the related transfer.

        :return: The transfer_id of this Transaction.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this Transaction.

        Unique identifier of the related transfer.

        :param transfer_id: The transfer_id of this Transaction.
        :type transfer_id: str
        """

        self._transfer_id = transfer_id

    @property
    def type(self):
        """Gets the type of this Transaction.

        The type of the transaction.   Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**

        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        The type of the transaction.   Possible values: **payment**, **capture**, **captureReversal**, **refund** **refundReversal**, **chargeback**, **chargebackReversal**, **secondChargeback**, **atmWithdrawal**, **atmWithdrawalReversal**, **internalTransfer**, **manualCorrection**, **invoiceDeduction**, **depositCorrection**, **bankTransfer**, **miscCost**, **paymentCost**, **fee**

        :param type: The type of this Transaction.
        :type type: str
        """
        allowed_values = ["atmWithdrawal", "atmWithdrawalReversal", "balanceAdjustment", "balanceMigration", "balanceRollover", "bankTransfer", "capture", "captureReversal", "cardTransfer", "cashOutFee", "cashOutFunding", "cashOutInstruction", "chargeback", "chargebackCorrection", "chargebackReversal", "chargebackReversalCorrection", "depositCorrection", "fee", "grant", "installment", "installmentReversal", "internalTransfer", "invoiceDeduction", "leftover", "manualCorrection", "miscCost", "payment", "paymentCost", "refund", "refundReversal", "repayment", "reserveAdjustment", "secondChargeback", "secondChargebackCorrection"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value_date(self):
        """Gets the value_date of this Transaction.

        The date the transfer amount becomes available in the balance account.

        :return: The value_date of this Transaction.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this Transaction.

        The date the transfer amount becomes available in the balance account.

        :param value_date: The value_date of this Transaction.
        :type value_date: datetime
        """
        if value_date is None:
            raise ValueError("Invalid value for `value_date`, must not be `None`")

        self._value_date = value_date
