# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_v3_account_identification import BankAccountV3AccountIdentification
from openapi_server.models.party_identification import PartyIdentification
from openapi_server import util


class BankAccountV3(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder: PartyIdentification=None, account_identification: BankAccountV3AccountIdentification=None):
        """BankAccountV3 - a model defined in OpenAPI

        :param account_holder: The account_holder of this BankAccountV3.
        :param account_identification: The account_identification of this BankAccountV3.
        """
        self.openapi_types = {
            'account_holder': PartyIdentification,
            'account_identification': BankAccountV3AccountIdentification
        }

        self.attribute_map = {
            'account_holder': 'accountHolder',
            'account_identification': 'accountIdentification'
        }

        self._account_holder = account_holder
        self._account_identification = account_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountV3':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountV3 of this BankAccountV3.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder(self):
        """Gets the account_holder of this BankAccountV3.

        Information about the owner of the bank account.

        :return: The account_holder of this BankAccountV3.
        :rtype: PartyIdentification
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this BankAccountV3.

        Information about the owner of the bank account.

        :param account_holder: The account_holder of this BankAccountV3.
        :type account_holder: PartyIdentification
        """
        if account_holder is None:
            raise ValueError("Invalid value for `account_holder`, must not be `None`")

        self._account_holder = account_holder

    @property
    def account_identification(self):
        """Gets the account_identification of this BankAccountV3.


        :return: The account_identification of this BankAccountV3.
        :rtype: BankAccountV3AccountIdentification
        """
        return self._account_identification

    @account_identification.setter
    def account_identification(self, account_identification):
        """Sets the account_identification of this BankAccountV3.


        :param account_identification: The account_identification of this BankAccountV3.
        :type account_identification: BankAccountV3AccountIdentification
        """
        if account_identification is None:
            raise ValueError("Invalid value for `account_identification`, must not be `None`")

        self._account_identification = account_identification
