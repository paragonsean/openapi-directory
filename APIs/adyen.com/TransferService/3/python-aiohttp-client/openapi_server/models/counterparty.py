# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Counterparty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_id: str=None, balance_account_id: str=None, transfer_instrument_id: str=None):
        """Counterparty - a model defined in OpenAPI

        :param account_holder_id: The account_holder_id of this Counterparty.
        :param balance_account_id: The balance_account_id of this Counterparty.
        :param transfer_instrument_id: The transfer_instrument_id of this Counterparty.
        """
        self.openapi_types = {
            'account_holder_id': str,
            'balance_account_id': str,
            'transfer_instrument_id': str
        }

        self.attribute_map = {
            'account_holder_id': 'accountHolderId',
            'balance_account_id': 'balanceAccountId',
            'transfer_instrument_id': 'transferInstrumentId'
        }

        self._account_holder_id = account_holder_id
        self._balance_account_id = balance_account_id
        self._transfer_instrument_id = transfer_instrument_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Counterparty':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Counterparty of this Counterparty.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this Counterparty.

        The identifier of the receiving account holder. The payout will default to the primary balance account of this account holder if no `balanceAccountId` is provided.

        :return: The account_holder_id of this Counterparty.
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this Counterparty.

        The identifier of the receiving account holder. The payout will default to the primary balance account of this account holder if no `balanceAccountId` is provided.

        :param account_holder_id: The account_holder_id of this Counterparty.
        :type account_holder_id: str
        """

        self._account_holder_id = account_holder_id

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this Counterparty.

        The identifier of the balance account that belongs to the receiving account holder.

        :return: The balance_account_id of this Counterparty.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this Counterparty.

        The identifier of the balance account that belongs to the receiving account holder.

        :param balance_account_id: The balance_account_id of this Counterparty.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def transfer_instrument_id(self):
        """Gets the transfer_instrument_id of this Counterparty.

        The identifier of the transfer instrument that belongs to the legal entity of the account holder.

        :return: The transfer_instrument_id of this Counterparty.
        :rtype: str
        """
        return self._transfer_instrument_id

    @transfer_instrument_id.setter
    def transfer_instrument_id(self, transfer_instrument_id):
        """Sets the transfer_instrument_id of this Counterparty.

        The identifier of the transfer instrument that belongs to the legal entity of the account holder.

        :param transfer_instrument_id: The transfer_instrument_id of this Counterparty.
        :type transfer_instrument_id: str
        """

        self._transfer_instrument_id = transfer_instrument_id
