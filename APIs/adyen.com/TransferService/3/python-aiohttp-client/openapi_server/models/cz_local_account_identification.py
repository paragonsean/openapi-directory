# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CZLocalAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, bank_code: str=None, type: str='czLocal'):
        """CZLocalAccountIdentification - a model defined in OpenAPI

        :param account_number: The account_number of this CZLocalAccountIdentification.
        :param bank_code: The bank_code of this CZLocalAccountIdentification.
        :param type: The type of this CZLocalAccountIdentification.
        """
        self.openapi_types = {
            'account_number': str,
            'bank_code': str,
            'type': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'bank_code': 'bankCode',
            'type': 'type'
        }

        self._account_number = account_number
        self._bank_code = bank_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CZLocalAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CZLocalAccountIdentification of this CZLocalAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CZLocalAccountIdentification.

        The 2- to 16-digit bank account number (Číslo účtu) in the following format:  - The optional prefix (předčíslí).  - The required second part (základní část) which must be at least two non-zero digits.  Examples:  - **19-123457** (with prefix)  - **123457** (without prefix)  - **000019-0000123457** (with prefix, normalized)  - **000000-0000123457** (without prefix, normalized)

        :return: The account_number of this CZLocalAccountIdentification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CZLocalAccountIdentification.

        The 2- to 16-digit bank account number (Číslo účtu) in the following format:  - The optional prefix (předčíslí).  - The required second part (základní část) which must be at least two non-zero digits.  Examples:  - **19-123457** (with prefix)  - **123457** (without prefix)  - **000019-0000123457** (with prefix, normalized)  - **000000-0000123457** (without prefix, normalized)

        :param account_number: The account_number of this CZLocalAccountIdentification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 17:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `17`")
        if account_number is not None and len(account_number) < 2:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `2`")

        self._account_number = account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this CZLocalAccountIdentification.

        The 4-digit bank code (Kód banky), without separators or whitespace.

        :return: The bank_code of this CZLocalAccountIdentification.
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this CZLocalAccountIdentification.

        The 4-digit bank code (Kód banky), without separators or whitespace.

        :param bank_code: The bank_code of this CZLocalAccountIdentification.
        :type bank_code: str
        """
        if bank_code is None:
            raise ValueError("Invalid value for `bank_code`, must not be `None`")
        if bank_code is not None and len(bank_code) > 4:
            raise ValueError("Invalid value for `bank_code`, length must be less than or equal to `4`")
        if bank_code is not None and len(bank_code) < 4:
            raise ValueError("Invalid value for `bank_code`, length must be greater than or equal to `4`")

        self._bank_code = bank_code

    @property
    def type(self):
        """Gets the type of this CZLocalAccountIdentification.

        **czLocal**

        :return: The type of this CZLocalAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CZLocalAccountIdentification.

        **czLocal**

        :param type: The type of this CZLocalAccountIdentification.
        :type type: str
        """
        allowed_values = ["czLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
