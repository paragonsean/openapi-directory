# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class ReturnTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, reference: str=None):
        """ReturnTransferRequest - a model defined in OpenAPI

        :param amount: The amount of this ReturnTransferRequest.
        :param reference: The reference of this ReturnTransferRequest.
        """
        self.openapi_types = {
            'amount': Amount,
            'reference': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'reference': 'reference'
        }

        self._amount = amount
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnTransferRequest of this ReturnTransferRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ReturnTransferRequest.

        Contains information about the amount to be returned.

        :return: The amount of this ReturnTransferRequest.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ReturnTransferRequest.

        Contains information about the amount to be returned.

        :param amount: The amount of this ReturnTransferRequest.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def reference(self):
        """Gets the reference of this ReturnTransferRequest.

        Your internal reference for the return. If you don't provide this in the request, Adyen generates a unique reference. This reference is used in all communication with you about the instruction status.  We recommend using a unique value per instruction. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). 

        :return: The reference of this ReturnTransferRequest.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ReturnTransferRequest.

        Your internal reference for the return. If you don't provide this in the request, Adyen generates a unique reference. This reference is used in all communication with you about the instruction status.  We recommend using a unique value per instruction. If you need to provide multiple references for a transaction, separate them with hyphens (\"-\"). 

        :param reference: The reference of this ReturnTransferRequest.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference
