# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class PartyIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, date_of_birth: date=None, first_name: str=None, full_name: str=None, last_name: str=None, reference: str=None, type: str='unknown'):
        """PartyIdentification - a model defined in OpenAPI

        :param address: The address of this PartyIdentification.
        :param date_of_birth: The date_of_birth of this PartyIdentification.
        :param first_name: The first_name of this PartyIdentification.
        :param full_name: The full_name of this PartyIdentification.
        :param last_name: The last_name of this PartyIdentification.
        :param reference: The reference of this PartyIdentification.
        :param type: The type of this PartyIdentification.
        """
        self.openapi_types = {
            'address': Address,
            'date_of_birth': date,
            'first_name': str,
            'full_name': str,
            'last_name': str,
            'reference': str,
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'date_of_birth': 'dateOfBirth',
            'first_name': 'firstName',
            'full_name': 'fullName',
            'last_name': 'lastName',
            'reference': 'reference',
            'type': 'type'
        }

        self._address = address
        self._date_of_birth = date_of_birth
        self._first_name = first_name
        self._full_name = full_name
        self._last_name = last_name
        self._reference = reference
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PartyIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PartyIdentification of this PartyIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this PartyIdentification.

        Address of the bank account owner.

        :return: The address of this PartyIdentification.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this PartyIdentification.

        Address of the bank account owner.

        :param address: The address of this PartyIdentification.
        :type address: Address
        """

        self._address = address

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this PartyIdentification.

        The date of birth of the individual in [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format. For example, **YYYY-MM-DD**. Should not be before January 1, 1900.  Allowed only when `type` is **individual**.

        :return: The date_of_birth of this PartyIdentification.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this PartyIdentification.

        The date of birth of the individual in [ISO-8601](https://www.w3.org/TR/NOTE-datetime) format. For example, **YYYY-MM-DD**. Should not be before January 1, 1900.  Allowed only when `type` is **individual**.

        :param date_of_birth: The date_of_birth of this PartyIdentification.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth

    @property
    def first_name(self):
        """Gets the first_name of this PartyIdentification.

        First name of the individual.  Allowed only when `type` is **individual**.

        :return: The first_name of this PartyIdentification.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PartyIdentification.

        First name of the individual.  Allowed only when `type` is **individual**.

        :param first_name: The first_name of this PartyIdentification.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this PartyIdentification.

        The name of the entity.

        :return: The full_name of this PartyIdentification.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this PartyIdentification.

        The name of the entity.

        :param full_name: The full_name of this PartyIdentification.
        :type full_name: str
        """
        if full_name is None:
            raise ValueError("Invalid value for `full_name`, must not be `None`")

        self._full_name = full_name

    @property
    def last_name(self):
        """Gets the last_name of this PartyIdentification.

        Last name of the individual.  Allowed only when `type` is **individual**.

        :return: The last_name of this PartyIdentification.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PartyIdentification.

        Last name of the individual.  Allowed only when `type` is **individual**.

        :param last_name: The last_name of this PartyIdentification.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def reference(self):
        """Gets the reference of this PartyIdentification.

        A unique reference to identify the party or counterparty involved in transfers. This identifier ensures consistency and uniqueness throughout all transactions initiated to and from the same party. For example, your client's unique wallet or payee ID.

        :return: The reference of this PartyIdentification.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PartyIdentification.

        A unique reference to identify the party or counterparty involved in transfers. This identifier ensures consistency and uniqueness throughout all transactions initiated to and from the same party. For example, your client's unique wallet or payee ID.

        :param reference: The reference of this PartyIdentification.
        :type reference: str
        """
        if reference is not None and len(reference) > 150:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `150`")

        self._reference = reference

    @property
    def type(self):
        """Gets the type of this PartyIdentification.

        The type of entity that owns the bank account.   Possible values: **individual**, **organization**, or **unknown**.

        :return: The type of this PartyIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartyIdentification.

        The type of entity that owns the bank account.   Possible values: **individual**, **organization**, or **unknown**.

        :param type: The type of this PartyIdentification.
        :type type: str
        """
        allowed_values = ["individual", "organization", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
