# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.counterparty_v3 import CounterpartyV3
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server.models.resource_reference import ResourceReference
from openapi_server import util


class Transfer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder: ResourceReference=None, amount: Amount=None, balance_account: ResourceReference=None, balance_account_id: str=None, category: str=None, counterparty: CounterpartyV3=None, creation_date: datetime=None, description: str=None, direction: str=None, id: str=None, payment_instrument: PaymentInstrument=None, payment_instrument_id: str=None, priority: str=None, reason: str=None, reference: str=None, reference_for_beneficiary: str=None, status: str=None):
        """Transfer - a model defined in OpenAPI

        :param account_holder: The account_holder of this Transfer.
        :param amount: The amount of this Transfer.
        :param balance_account: The balance_account of this Transfer.
        :param balance_account_id: The balance_account_id of this Transfer.
        :param category: The category of this Transfer.
        :param counterparty: The counterparty of this Transfer.
        :param creation_date: The creation_date of this Transfer.
        :param description: The description of this Transfer.
        :param direction: The direction of this Transfer.
        :param id: The id of this Transfer.
        :param payment_instrument: The payment_instrument of this Transfer.
        :param payment_instrument_id: The payment_instrument_id of this Transfer.
        :param priority: The priority of this Transfer.
        :param reason: The reason of this Transfer.
        :param reference: The reference of this Transfer.
        :param reference_for_beneficiary: The reference_for_beneficiary of this Transfer.
        :param status: The status of this Transfer.
        """
        self.openapi_types = {
            'account_holder': ResourceReference,
            'amount': Amount,
            'balance_account': ResourceReference,
            'balance_account_id': str,
            'category': str,
            'counterparty': CounterpartyV3,
            'creation_date': datetime,
            'description': str,
            'direction': str,
            'id': str,
            'payment_instrument': PaymentInstrument,
            'payment_instrument_id': str,
            'priority': str,
            'reason': str,
            'reference': str,
            'reference_for_beneficiary': str,
            'status': str
        }

        self.attribute_map = {
            'account_holder': 'accountHolder',
            'amount': 'amount',
            'balance_account': 'balanceAccount',
            'balance_account_id': 'balanceAccountId',
            'category': 'category',
            'counterparty': 'counterparty',
            'creation_date': 'creationDate',
            'description': 'description',
            'direction': 'direction',
            'id': 'id',
            'payment_instrument': 'paymentInstrument',
            'payment_instrument_id': 'paymentInstrumentId',
            'priority': 'priority',
            'reason': 'reason',
            'reference': 'reference',
            'reference_for_beneficiary': 'referenceForBeneficiary',
            'status': 'status'
        }

        self._account_holder = account_holder
        self._amount = amount
        self._balance_account = balance_account
        self._balance_account_id = balance_account_id
        self._category = category
        self._counterparty = counterparty
        self._creation_date = creation_date
        self._description = description
        self._direction = direction
        self._id = id
        self._payment_instrument = payment_instrument
        self._payment_instrument_id = payment_instrument_id
        self._priority = priority
        self._reason = reason
        self._reference = reference
        self._reference_for_beneficiary = reference_for_beneficiary
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transfer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transfer of this Transfer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder(self):
        """Gets the account_holder of this Transfer.

        The account holder associated with the balance account used in the transfer.

        :return: The account_holder of this Transfer.
        :rtype: ResourceReference
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this Transfer.

        The account holder associated with the balance account used in the transfer.

        :param account_holder: The account_holder of this Transfer.
        :type account_holder: ResourceReference
        """

        self._account_holder = account_holder

    @property
    def amount(self):
        """Gets the amount of this Transfer.

        The amount of the transfer.

        :return: The amount of this Transfer.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transfer.

        The amount of the transfer.

        :param amount: The amount of this Transfer.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def balance_account(self):
        """Gets the balance_account of this Transfer.

        Contains information about the balance account involved in the transfer.

        :return: The balance_account of this Transfer.
        :rtype: ResourceReference
        """
        return self._balance_account

    @balance_account.setter
    def balance_account(self, balance_account):
        """Sets the balance_account of this Transfer.

        Contains information about the balance account involved in the transfer.

        :param balance_account: The balance_account of this Transfer.
        :type balance_account: ResourceReference
        """

        self._balance_account = balance_account

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this Transfer.

        The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).

        :return: The balance_account_id of this Transfer.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this Transfer.

        The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).

        :param balance_account_id: The balance_account_id of this Transfer.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def category(self):
        """Gets the category of this Transfer.

        The category of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.

        :return: The category of this Transfer.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Transfer.

        The category of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.

        :param category: The category of this Transfer.
        :type category: str
        """
        allowed_values = ["bank", "internal", "issuedCard", "platformPayment"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def counterparty(self):
        """Gets the counterparty of this Transfer.

        The other party in the transfer.

        :return: The counterparty of this Transfer.
        :rtype: CounterpartyV3
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this Transfer.

        The other party in the transfer.

        :param counterparty: The counterparty of this Transfer.
        :type counterparty: CounterpartyV3
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")

        self._counterparty = counterparty

    @property
    def creation_date(self):
        """Gets the creation_date of this Transfer.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :return: The creation_date of this Transfer.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Transfer.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :param creation_date: The creation_date of this Transfer.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this Transfer.

        Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**

        :return: The description of this Transfer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transfer.

        Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**

        :param description: The description of this Transfer.
        :type description: str
        """

        self._description = description

    @property
    def direction(self):
        """Gets the direction of this Transfer.

        The direction of the transfer.  Possible values: **incoming**, **outgoing**.

        :return: The direction of this Transfer.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this Transfer.

        The direction of the transfer.  Possible values: **incoming**, **outgoing**.

        :param direction: The direction of this Transfer.
        :type direction: str
        """
        allowed_values = ["incoming", "outgoing"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def id(self):
        """Gets the id of this Transfer.

        The ID of the resource.

        :return: The id of this Transfer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transfer.

        The ID of the resource.

        :param id: The id of this Transfer.
        :type id: str
        """

        self._id = id

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this Transfer.

        Contains information about the payment instrument used in the transfer.

        :return: The payment_instrument of this Transfer.
        :rtype: PaymentInstrument
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this Transfer.

        Contains information about the payment instrument used in the transfer.

        :param payment_instrument: The payment_instrument of this Transfer.
        :type payment_instrument: PaymentInstrument
        """

        self._payment_instrument = payment_instrument

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this Transfer.

        The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.

        :return: The payment_instrument_id of this Transfer.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this Transfer.

        The unique identifier of the [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) used in the transfer.

        :param payment_instrument_id: The payment_instrument_id of this Transfer.
        :type payment_instrument_id: str
        """

        self._payment_instrument_id = payment_instrument_id

    @property
    def priority(self):
        """Gets the priority of this Transfer.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN). This will be removed in v4 and replaced with a new field.

        :return: The priority of this Transfer.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Transfer.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN). This will be removed in v4 and replaced with a new field.

        :param priority: The priority of this Transfer.
        :type priority: str
        """
        allowed_values = ["crossBorder", "fast", "instant", "internal", "regular", "wire"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def reason(self):
        """Gets the reason of this Transfer.

        Additional information about the status of the transfer.

        :return: The reason of this Transfer.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Transfer.

        Additional information about the status of the transfer.

        :param reason: The reason of this Transfer.
        :type reason: str
        """
        allowed_values = ["amountLimitExceeded", "approved", "balanceAccountTemporarilyBlockedByTransactionRule", "counterpartyAccountBlocked", "counterpartyAccountClosed", "counterpartyAccountNotFound", "counterpartyAddressRequired", "counterpartyBankTimedOut", "counterpartyBankUnavailable", "declinedByTransactionRule", "error", "notEnoughBalance", "refusedByCounterpartyBank", "routeNotFound", "scaFailed", "unknown"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def reference(self):
        """Gets the reference of this Transfer.

        Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.

        :return: The reference of this Transfer.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Transfer.

        Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.

        :param reference: The reference of this Transfer.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference

    @property
    def reference_for_beneficiary(self):
        """Gets the reference_for_beneficiary of this Transfer.

         A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.

        :return: The reference_for_beneficiary of this Transfer.
        :rtype: str
        """
        return self._reference_for_beneficiary

    @reference_for_beneficiary.setter
    def reference_for_beneficiary(self, reference_for_beneficiary):
        """Sets the reference_for_beneficiary of this Transfer.

         A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.

        :param reference_for_beneficiary: The reference_for_beneficiary of this Transfer.
        :type reference_for_beneficiary: str
        """
        if reference_for_beneficiary is not None and len(reference_for_beneficiary) > 80:
            raise ValueError("Invalid value for `reference_for_beneficiary`, length must be less than or equal to `80`")

        self._reference_for_beneficiary = reference_for_beneficiary

    @property
    def status(self):
        """Gets the status of this Transfer.

        The result of the transfer.   For example, **authorised**, **refused**, or **error**.

        :return: The status of this Transfer.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transfer.

        The result of the transfer.   For example, **authorised**, **refused**, or **error**.

        :param status: The status of this Transfer.
        :type status: str
        """
        allowed_values = ["approvalPending", "atmWithdrawal", "atmWithdrawalReversalPending", "atmWithdrawalReversed", "authAdjustmentAuthorised", "authAdjustmentError", "authAdjustmentRefused", "authorised", "bankTransfer", "bankTransferPending", "booked", "bookingPending", "cancelled", "capturePending", "captureReversalPending", "captureReversed", "captured", "capturedExternally", "chargeback", "chargebackExternally", "chargebackPending", "chargebackReversalPending", "chargebackReversed", "credited", "depositCorrection", "depositCorrectionPending", "dispute", "disputeClosed", "disputeExpired", "disputeNeedsReview", "error", "expired", "failed", "fee", "feePending", "internalTransfer", "internalTransferPending", "invoiceDeduction", "invoiceDeductionPending", "manualCorrectionPending", "manuallyCorrected", "matchedStatement", "matchedStatementPending", "merchantPayin", "merchantPayinPending", "merchantPayinReversed", "merchantPayinReversedPending", "miscCost", "miscCostPending", "paymentCost", "paymentCostPending", "received", "refundPending", "refundReversalPending", "refundReversed", "refunded", "refundedExternally", "refused", "reserveAdjustment", "reserveAdjustmentPending", "returned", "secondChargeback", "secondChargebackPending", "undefined"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
