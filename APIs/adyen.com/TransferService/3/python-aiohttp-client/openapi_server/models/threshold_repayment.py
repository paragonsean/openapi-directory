# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class ThresholdRepayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None):
        """ThresholdRepayment - a model defined in OpenAPI

        :param amount: The amount of this ThresholdRepayment.
        """
        self.openapi_types = {
            'amount': Amount
        }

        self.attribute_map = {
            'amount': 'amount'
        }

        self._amount = amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThresholdRepayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThresholdRepayment of this ThresholdRepayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this ThresholdRepayment.

        The amount to be repaid on a 30-day basis.

        :return: The amount of this ThresholdRepayment.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ThresholdRepayment.

        The amount to be repaid on a 30-day basis.

        :param amount: The amount of this ThresholdRepayment.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount
