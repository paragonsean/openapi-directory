/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBankAccountV3_accountIdentification.h
 *
 * Contains the bank account details. The fields required in this object depend on the country of the bank account and the currency of the transfer.
 */

#ifndef OAIBankAccountV3_accountIdentification_H
#define OAIBankAccountV3_accountIdentification_H

#include <QJsonObject>

#include "OAIAULocalAccountIdentification.h"
#include "OAIAdditionalBankIdentification.h"
#include "OAIBRLocalAccountIdentification.h"
#include "OAICALocalAccountIdentification.h"
#include "OAICZLocalAccountIdentification.h"
#include "OAIDKLocalAccountIdentification.h"
#include "OAIHKLocalAccountIdentification.h"
#include "OAIHULocalAccountIdentification.h"
#include "OAIIbanAccountIdentification.h"
#include "OAINOLocalAccountIdentification.h"
#include "OAINZLocalAccountIdentification.h"
#include "OAINumberAndBicAccountIdentification.h"
#include "OAIPLLocalAccountIdentification.h"
#include "OAISELocalAccountIdentification.h"
#include "OAISGLocalAccountIdentification.h"
#include "OAIUKLocalAccountIdentification.h"
#include "OAIUSLocalAccountIdentification.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdditionalBankIdentification;

class OAIBankAccountV3_accountIdentification : public OAIObject {
public:
    OAIBankAccountV3_accountIdentification();
    OAIBankAccountV3_accountIdentification(QString json);
    ~OAIBankAccountV3_accountIdentification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountNumber() const;
    void setAccountNumber(const QString &account_number);
    bool is_account_number_Set() const;
    bool is_account_number_Valid() const;

    QString getBsbCode() const;
    void setBsbCode(const QString &bsb_code);
    bool is_bsb_code_Set() const;
    bool is_bsb_code_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getBankCode() const;
    void setBankCode(const QString &bank_code);
    bool is_bank_code_Set() const;
    bool is_bank_code_Valid() const;

    QString getBranchNumber() const;
    void setBranchNumber(const QString &branch_number);
    bool is_branch_number_Set() const;
    bool is_branch_number_Valid() const;

    QString getAccountType() const;
    void setAccountType(const QString &account_type);
    bool is_account_type_Set() const;
    bool is_account_type_Valid() const;

    QString getInstitutionNumber() const;
    void setInstitutionNumber(const QString &institution_number);
    bool is_institution_number_Set() const;
    bool is_institution_number_Valid() const;

    QString getTransitNumber() const;
    void setTransitNumber(const QString &transit_number);
    bool is_transit_number_Set() const;
    bool is_transit_number_Valid() const;

    QString getClearingCode() const;
    void setClearingCode(const QString &clearing_code);
    bool is_clearing_code_Set() const;
    bool is_clearing_code_Valid() const;

    QString getIban() const;
    void setIban(const QString &iban);
    bool is_iban_Set() const;
    bool is_iban_Valid() const;

    OAIAdditionalBankIdentification getAdditionalBankIdentification() const;
    void setAdditionalBankIdentification(const OAIAdditionalBankIdentification &additional_bank_identification);
    bool is_additional_bank_identification_Set() const;
    bool is_additional_bank_identification_Valid() const;

    QString getBic() const;
    void setBic(const QString &bic);
    bool is_bic_Set() const;
    bool is_bic_Valid() const;

    QString getClearingNumber() const;
    void setClearingNumber(const QString &clearing_number);
    bool is_clearing_number_Set() const;
    bool is_clearing_number_Valid() const;

    QString getSortCode() const;
    void setSortCode(const QString &sort_code);
    bool is_sort_code_Set() const;
    bool is_sort_code_Valid() const;

    QString getRoutingNumber() const;
    void setRoutingNumber(const QString &routing_number);
    bool is_routing_number_Set() const;
    bool is_routing_number_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_number;
    bool m_account_number_isSet;
    bool m_account_number_isValid;

    QString m_bsb_code;
    bool m_bsb_code_isSet;
    bool m_bsb_code_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_bank_code;
    bool m_bank_code_isSet;
    bool m_bank_code_isValid;

    QString m_branch_number;
    bool m_branch_number_isSet;
    bool m_branch_number_isValid;

    QString m_account_type;
    bool m_account_type_isSet;
    bool m_account_type_isValid;

    QString m_institution_number;
    bool m_institution_number_isSet;
    bool m_institution_number_isValid;

    QString m_transit_number;
    bool m_transit_number_isSet;
    bool m_transit_number_isValid;

    QString m_clearing_code;
    bool m_clearing_code_isSet;
    bool m_clearing_code_isValid;

    QString m_iban;
    bool m_iban_isSet;
    bool m_iban_isValid;

    OAIAdditionalBankIdentification m_additional_bank_identification;
    bool m_additional_bank_identification_isSet;
    bool m_additional_bank_identification_isValid;

    QString m_bic;
    bool m_bic_isSet;
    bool m_bic_isValid;

    QString m_clearing_number;
    bool m_clearing_number_isSet;
    bool m_clearing_number_isValid;

    QString m_sort_code;
    bool m_sort_code_isSet;
    bool m_sort_code_isValid;

    QString m_routing_number;
    bool m_routing_number_isSet;
    bool m_routing_number_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBankAccountV3_accountIdentification)

#endif // OAIBankAccountV3_accountIdentification_H
