/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransfer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransfer::OAITransfer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransfer::OAITransfer() {
    this->initializeModel();
}

OAITransfer::~OAITransfer() {}

void OAITransfer::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_account_isSet = false;
    m_balance_account_isValid = false;

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_payment_instrument_isSet = false;
    m_payment_instrument_isValid = false;

    m_payment_instrument_id_isSet = false;
    m_payment_instrument_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_for_beneficiary_isSet = false;
    m_reference_for_beneficiary_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITransfer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransfer::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_account_isValid = ::OpenAPI::fromJsonValue(m_balance_account, json[QString("balanceAccount")]);
    m_balance_account_isSet = !json[QString("balanceAccount")].isNull() && m_balance_account_isValid;

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_payment_instrument_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument, json[QString("paymentInstrument")]);
    m_payment_instrument_isSet = !json[QString("paymentInstrument")].isNull() && m_payment_instrument_isValid;

    m_payment_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_id, json[QString("paymentInstrumentId")]);
    m_payment_instrument_id_isSet = !json[QString("paymentInstrumentId")].isNull() && m_payment_instrument_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_for_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_reference_for_beneficiary, json[QString("referenceForBeneficiary")]);
    m_reference_for_beneficiary_isSet = !json[QString("referenceForBeneficiary")].isNull() && m_reference_for_beneficiary_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITransfer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransfer::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_account.isSet()) {
        obj.insert(QString("balanceAccount"), ::OpenAPI::toJsonValue(m_balance_account));
    }
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_payment_instrument.isSet()) {
        obj.insert(QString("paymentInstrument"), ::OpenAPI::toJsonValue(m_payment_instrument));
    }
    if (m_payment_instrument_id_isSet) {
        obj.insert(QString("paymentInstrumentId"), ::OpenAPI::toJsonValue(m_payment_instrument_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_for_beneficiary_isSet) {
        obj.insert(QString("referenceForBeneficiary"), ::OpenAPI::toJsonValue(m_reference_for_beneficiary));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIResourceReference OAITransfer::getAccountHolder() const {
    return m_account_holder;
}
void OAITransfer::setAccountHolder(const OAIResourceReference &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAITransfer::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAITransfer::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

OAIAmount OAITransfer::getAmount() const {
    return m_amount;
}
void OAITransfer::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransfer::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransfer::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIResourceReference OAITransfer::getBalanceAccount() const {
    return m_balance_account;
}
void OAITransfer::setBalanceAccount(const OAIResourceReference &balance_account) {
    m_balance_account = balance_account;
    m_balance_account_isSet = true;
}

bool OAITransfer::is_balance_account_Set() const{
    return m_balance_account_isSet;
}

bool OAITransfer::is_balance_account_Valid() const{
    return m_balance_account_isValid;
}

QString OAITransfer::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAITransfer::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAITransfer::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAITransfer::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

QString OAITransfer::getCategory() const {
    return m_category;
}
void OAITransfer::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransfer::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransfer::is_category_Valid() const{
    return m_category_isValid;
}

OAICounterpartyV3 OAITransfer::getCounterparty() const {
    return m_counterparty;
}
void OAITransfer::setCounterparty(const OAICounterpartyV3 &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAITransfer::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAITransfer::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QDateTime OAITransfer::getCreationDate() const {
    return m_creation_date;
}
void OAITransfer::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITransfer::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITransfer::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITransfer::getDescription() const {
    return m_description;
}
void OAITransfer::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransfer::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransfer::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransfer::getDirection() const {
    return m_direction;
}
void OAITransfer::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAITransfer::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAITransfer::is_direction_Valid() const{
    return m_direction_isValid;
}

QString OAITransfer::getId() const {
    return m_id;
}
void OAITransfer::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransfer::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransfer::is_id_Valid() const{
    return m_id_isValid;
}

OAIPaymentInstrument OAITransfer::getPaymentInstrument() const {
    return m_payment_instrument;
}
void OAITransfer::setPaymentInstrument(const OAIPaymentInstrument &payment_instrument) {
    m_payment_instrument = payment_instrument;
    m_payment_instrument_isSet = true;
}

bool OAITransfer::is_payment_instrument_Set() const{
    return m_payment_instrument_isSet;
}

bool OAITransfer::is_payment_instrument_Valid() const{
    return m_payment_instrument_isValid;
}

QString OAITransfer::getPaymentInstrumentId() const {
    return m_payment_instrument_id;
}
void OAITransfer::setPaymentInstrumentId(const QString &payment_instrument_id) {
    m_payment_instrument_id = payment_instrument_id;
    m_payment_instrument_id_isSet = true;
}

bool OAITransfer::is_payment_instrument_id_Set() const{
    return m_payment_instrument_id_isSet;
}

bool OAITransfer::is_payment_instrument_id_Valid() const{
    return m_payment_instrument_id_isValid;
}

QString OAITransfer::getPriority() const {
    return m_priority;
}
void OAITransfer::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITransfer::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITransfer::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAITransfer::getReason() const {
    return m_reason;
}
void OAITransfer::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAITransfer::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAITransfer::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAITransfer::getReference() const {
    return m_reference;
}
void OAITransfer::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITransfer::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITransfer::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAITransfer::getReferenceForBeneficiary() const {
    return m_reference_for_beneficiary;
}
void OAITransfer::setReferenceForBeneficiary(const QString &reference_for_beneficiary) {
    m_reference_for_beneficiary = reference_for_beneficiary;
    m_reference_for_beneficiary_isSet = true;
}

bool OAITransfer::is_reference_for_beneficiary_Set() const{
    return m_reference_for_beneficiary_isSet;
}

bool OAITransfer::is_reference_for_beneficiary_Valid() const{
    return m_reference_for_beneficiary_isValid;
}

QString OAITransfer::getStatus() const {
    return m_status;
}
void OAITransfer::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransfer::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransfer::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITransfer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_for_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransfer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_category_isValid && m_counterparty_isValid && m_status_isValid && true;
}

} // namespace OpenAPI
