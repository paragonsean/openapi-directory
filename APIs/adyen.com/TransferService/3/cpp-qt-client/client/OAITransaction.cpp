/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_account_holder_id_isSet = false;
    m_account_holder_id_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_booking_date_isSet = false;
    m_booking_date_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_id_isSet = false;
    m_event_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instructed_amount_isSet = false;
    m_instructed_amount_isValid = false;

    m_payment_instrument_id_isSet = false;
    m_payment_instrument_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_for_beneficiary_isSet = false;
    m_reference_for_beneficiary_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transfer_id_isSet = false;
    m_transfer_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_account_holder_id_isValid = ::OpenAPI::fromJsonValue(m_account_holder_id, json[QString("accountHolderId")]);
    m_account_holder_id_isSet = !json[QString("accountHolderId")].isNull() && m_account_holder_id_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_booking_date_isValid = ::OpenAPI::fromJsonValue(m_booking_date, json[QString("bookingDate")]);
    m_booking_date_isSet = !json[QString("bookingDate")].isNull() && m_booking_date_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_id_isValid = ::OpenAPI::fromJsonValue(m_event_id, json[QString("eventId")]);
    m_event_id_isSet = !json[QString("eventId")].isNull() && m_event_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instructed_amount_isValid = ::OpenAPI::fromJsonValue(m_instructed_amount, json[QString("instructedAmount")]);
    m_instructed_amount_isSet = !json[QString("instructedAmount")].isNull() && m_instructed_amount_isValid;

    m_payment_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_id, json[QString("paymentInstrumentId")]);
    m_payment_instrument_id_isSet = !json[QString("paymentInstrumentId")].isNull() && m_payment_instrument_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_for_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_reference_for_beneficiary, json[QString("referenceForBeneficiary")]);
    m_reference_for_beneficiary_isSet = !json[QString("referenceForBeneficiary")].isNull() && m_reference_for_beneficiary_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transfer_id_isValid = ::OpenAPI::fromJsonValue(m_transfer_id, json[QString("transferId")]);
    m_transfer_id_isSet = !json[QString("transferId")].isNull() && m_transfer_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("valueDate")]);
    m_value_date_isSet = !json[QString("valueDate")].isNull() && m_value_date_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_id_isSet) {
        obj.insert(QString("accountHolderId"), ::OpenAPI::toJsonValue(m_account_holder_id));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_booking_date_isSet) {
        obj.insert(QString("bookingDate"), ::OpenAPI::toJsonValue(m_booking_date));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_id_isSet) {
        obj.insert(QString("eventId"), ::OpenAPI::toJsonValue(m_event_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instructed_amount.isSet()) {
        obj.insert(QString("instructedAmount"), ::OpenAPI::toJsonValue(m_instructed_amount));
    }
    if (m_payment_instrument_id_isSet) {
        obj.insert(QString("paymentInstrumentId"), ::OpenAPI::toJsonValue(m_payment_instrument_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_for_beneficiary_isSet) {
        obj.insert(QString("referenceForBeneficiary"), ::OpenAPI::toJsonValue(m_reference_for_beneficiary));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transfer_id_isSet) {
        obj.insert(QString("transferId"), ::OpenAPI::toJsonValue(m_transfer_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("valueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    return obj;
}

QString OAITransaction::getAccountHolderId() const {
    return m_account_holder_id;
}
void OAITransaction::setAccountHolderId(const QString &account_holder_id) {
    m_account_holder_id = account_holder_id;
    m_account_holder_id_isSet = true;
}

bool OAITransaction::is_account_holder_id_Set() const{
    return m_account_holder_id_isSet;
}

bool OAITransaction::is_account_holder_id_Valid() const{
    return m_account_holder_id_isValid;
}

OAIAmount OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransaction::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAITransaction::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAITransaction::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAITransaction::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

QString OAITransaction::getBalancePlatform() const {
    return m_balance_platform;
}
void OAITransaction::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAITransaction::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAITransaction::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

QDateTime OAITransaction::getBookingDate() const {
    return m_booking_date;
}
void OAITransaction::setBookingDate(const QDateTime &booking_date) {
    m_booking_date = booking_date;
    m_booking_date_isSet = true;
}

bool OAITransaction::is_booking_date_Set() const{
    return m_booking_date_isSet;
}

bool OAITransaction::is_booking_date_Valid() const{
    return m_booking_date_isValid;
}

QString OAITransaction::getCategory() const {
    return m_category;
}
void OAITransaction::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransaction::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransaction::is_category_Valid() const{
    return m_category_isValid;
}

OAICounterpartyV3 OAITransaction::getCounterparty() const {
    return m_counterparty;
}
void OAITransaction::setCounterparty(const OAICounterpartyV3 &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAITransaction::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAITransaction::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QDateTime OAITransaction::getCreatedAt() const {
    return m_created_at;
}
void OAITransaction::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAITransaction::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAITransaction::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QDateTime OAITransaction::getCreationDate() const {
    return m_creation_date;
}
void OAITransaction::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITransaction::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITransaction::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITransaction::getDescription() const {
    return m_description;
}
void OAITransaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransaction::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransaction::getEventId() const {
    return m_event_id;
}
void OAITransaction::setEventId(const QString &event_id) {
    m_event_id = event_id;
    m_event_id_isSet = true;
}

bool OAITransaction::is_event_id_Set() const{
    return m_event_id_isSet;
}

bool OAITransaction::is_event_id_Valid() const{
    return m_event_id_isValid;
}

QString OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

OAIAmount OAITransaction::getInstructedAmount() const {
    return m_instructed_amount;
}
void OAITransaction::setInstructedAmount(const OAIAmount &instructed_amount) {
    m_instructed_amount = instructed_amount;
    m_instructed_amount_isSet = true;
}

bool OAITransaction::is_instructed_amount_Set() const{
    return m_instructed_amount_isSet;
}

bool OAITransaction::is_instructed_amount_Valid() const{
    return m_instructed_amount_isValid;
}

QString OAITransaction::getPaymentInstrumentId() const {
    return m_payment_instrument_id;
}
void OAITransaction::setPaymentInstrumentId(const QString &payment_instrument_id) {
    m_payment_instrument_id = payment_instrument_id;
    m_payment_instrument_id_isSet = true;
}

bool OAITransaction::is_payment_instrument_id_Set() const{
    return m_payment_instrument_id_isSet;
}

bool OAITransaction::is_payment_instrument_id_Valid() const{
    return m_payment_instrument_id_isValid;
}

QString OAITransaction::getReference() const {
    return m_reference;
}
void OAITransaction::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITransaction::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITransaction::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAITransaction::getReferenceForBeneficiary() const {
    return m_reference_for_beneficiary;
}
void OAITransaction::setReferenceForBeneficiary(const QString &reference_for_beneficiary) {
    m_reference_for_beneficiary = reference_for_beneficiary;
    m_reference_for_beneficiary_isSet = true;
}

bool OAITransaction::is_reference_for_beneficiary_Set() const{
    return m_reference_for_beneficiary_isSet;
}

bool OAITransaction::is_reference_for_beneficiary_Valid() const{
    return m_reference_for_beneficiary_isValid;
}

QString OAITransaction::getStatus() const {
    return m_status;
}
void OAITransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAITransaction::getTransferId() const {
    return m_transfer_id;
}
void OAITransaction::setTransferId(const QString &transfer_id) {
    m_transfer_id = transfer_id;
    m_transfer_id_isSet = true;
}

bool OAITransaction::is_transfer_id_Set() const{
    return m_transfer_id_isSet;
}

bool OAITransaction::is_transfer_id_Valid() const{
    return m_transfer_id_isValid;
}

QString OAITransaction::getType() const {
    return m_type;
}
void OAITransaction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAITransaction::is_type_Set() const{
    return m_type_isSet;
}

bool OAITransaction::is_type_Valid() const{
    return m_type_isValid;
}

QDateTime OAITransaction::getValueDate() const {
    return m_value_date;
}
void OAITransaction::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAITransaction::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAITransaction::is_value_date_Valid() const{
    return m_value_date_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instructed_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_for_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_id_isValid && m_amount_isValid && m_balance_account_id_isValid && m_balance_platform_isValid && m_booking_date_isValid && m_counterparty_isValid && m_created_at_isValid && m_id_isValid && m_reference_isValid && m_status_isValid && m_value_date_isValid && true;
}

} // namespace OpenAPI
