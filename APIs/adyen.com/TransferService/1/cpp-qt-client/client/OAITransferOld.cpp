/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v1/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferOld.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferOld::OAITransferOld(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferOld::OAITransferOld() {
    this->initializeModel();
}

OAITransferOld::~OAITransferOld() {}

void OAITransferOld::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_refusal_reason_isSet = false;
    m_refusal_reason_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAITransferOld::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferOld::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_refusal_reason_isValid = ::OpenAPI::fromJsonValue(m_refusal_reason, json[QString("refusalReason")]);
    m_refusal_reason_isSet = !json[QString("refusalReason")].isNull() && m_refusal_reason_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAITransferOld::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferOld::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_refusal_reason_isSet) {
        obj.insert(QString("refusalReason"), ::OpenAPI::toJsonValue(m_refusal_reason));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIAmount OAITransferOld::getAmount() const {
    return m_amount;
}
void OAITransferOld::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransferOld::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransferOld::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransferOld::getDescription() const {
    return m_description;
}
void OAITransferOld::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransferOld::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransferOld::is_description_Valid() const{
    return m_description_isValid;
}

OAIPartyIdentification OAITransferOld::getDestination() const {
    return m_destination;
}
void OAITransferOld::setDestination(const OAIPartyIdentification &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAITransferOld::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAITransferOld::is_destination_Valid() const{
    return m_destination_isValid;
}

QString OAITransferOld::getId() const {
    return m_id;
}
void OAITransferOld::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransferOld::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransferOld::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransferOld::getReference() const {
    return m_reference;
}
void OAITransferOld::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITransferOld::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITransferOld::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAITransferOld::getRefusalReason() const {
    return m_refusal_reason;
}
void OAITransferOld::setRefusalReason(const QString &refusal_reason) {
    m_refusal_reason = refusal_reason;
    m_refusal_reason_isSet = true;
}

bool OAITransferOld::is_refusal_reason_Set() const{
    return m_refusal_reason_isSet;
}

bool OAITransferOld::is_refusal_reason_Valid() const{
    return m_refusal_reason_isValid;
}

QString OAITransferOld::getResultCode() const {
    return m_result_code;
}
void OAITransferOld::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAITransferOld::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAITransferOld::is_result_code_Valid() const{
    return m_result_code_isValid;
}

OAIInternalPartyIdentification OAITransferOld::getSource() const {
    return m_source;
}
void OAITransferOld::setSource(const OAIInternalPartyIdentification &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAITransferOld::is_source_Set() const{
    return m_source_isSet;
}

bool OAITransferOld::is_source_Valid() const{
    return m_source_isValid;
}

bool OAITransferOld::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refusal_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferOld::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_destination_isValid && m_id_isValid && m_result_code_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
