/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v1/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v1`.  
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransaction.h
 *
 * 
 */

#ifndef OAITransaction_H
#define OAITransaction_H

#include <QJsonObject>

#include "OAIAmount.h"
#include "OAICounterparty.h"
#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmount;
class OAICounterparty;

class OAITransaction : public OAIObject {
public:
    OAITransaction();
    OAITransaction(QString json);
    ~OAITransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountHolderId() const;
    void setAccountHolderId(const QString &account_holder_id);
    bool is_account_holder_id_Set() const;
    bool is_account_holder_id_Valid() const;

    OAIAmount getAmount() const;
    void setAmount(const OAIAmount &amount);
    bool is_amount_Set() const;
    bool is_amount_Valid() const;

    QString getBalanceAccountId() const;
    void setBalanceAccountId(const QString &balance_account_id);
    bool is_balance_account_id_Set() const;
    bool is_balance_account_id_Valid() const;

    QString getBalancePlatform() const;
    void setBalancePlatform(const QString &balance_platform);
    bool is_balance_platform_Set() const;
    bool is_balance_platform_Valid() const;

    QDateTime getBookingDate() const;
    void setBookingDate(const QDateTime &booking_date);
    bool is_booking_date_Set() const;
    bool is_booking_date_Valid() const;

    QString getCategory() const;
    void setCategory(const QString &category);
    bool is_category_Set() const;
    bool is_category_Valid() const;

    OAICounterparty getCounterparty() const;
    void setCounterparty(const OAICounterparty &counterparty);
    bool is_counterparty_Set() const;
    bool is_counterparty_Valid() const;

    QDateTime getCreatedAt() const;
    void setCreatedAt(const QDateTime &created_at);
    bool is_created_at_Set() const;
    bool is_created_at_Valid() const;

    QDateTime getCreationDate() const;
    void setCreationDate(const QDateTime &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    OAIAmount getInstructedAmount() const;
    void setInstructedAmount(const OAIAmount &instructed_amount);
    bool is_instructed_amount_Set() const;
    bool is_instructed_amount_Valid() const;

    QString getPaymentInstrumentId() const;
    void setPaymentInstrumentId(const QString &payment_instrument_id);
    bool is_payment_instrument_id_Set() const;
    bool is_payment_instrument_id_Valid() const;

    QString getReference() const;
    void setReference(const QString &reference);
    bool is_reference_Set() const;
    bool is_reference_Valid() const;

    QString getReferenceForBeneficiary() const;
    void setReferenceForBeneficiary(const QString &reference_for_beneficiary);
    bool is_reference_for_beneficiary_Set() const;
    bool is_reference_for_beneficiary_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTransferId() const;
    void setTransferId(const QString &transfer_id);
    bool is_transfer_id_Set() const;
    bool is_transfer_id_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QDateTime getValueDate() const;
    void setValueDate(const QDateTime &value_date);
    bool is_value_date_Set() const;
    bool is_value_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_holder_id;
    bool m_account_holder_id_isSet;
    bool m_account_holder_id_isValid;

    OAIAmount m_amount;
    bool m_amount_isSet;
    bool m_amount_isValid;

    QString m_balance_account_id;
    bool m_balance_account_id_isSet;
    bool m_balance_account_id_isValid;

    QString m_balance_platform;
    bool m_balance_platform_isSet;
    bool m_balance_platform_isValid;

    QDateTime m_booking_date;
    bool m_booking_date_isSet;
    bool m_booking_date_isValid;

    QString m_category;
    bool m_category_isSet;
    bool m_category_isValid;

    OAICounterparty m_counterparty;
    bool m_counterparty_isSet;
    bool m_counterparty_isValid;

    QDateTime m_created_at;
    bool m_created_at_isSet;
    bool m_created_at_isValid;

    QDateTime m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    OAIAmount m_instructed_amount;
    bool m_instructed_amount_isSet;
    bool m_instructed_amount_isValid;

    QString m_payment_instrument_id;
    bool m_payment_instrument_id_isSet;
    bool m_payment_instrument_id_isValid;

    QString m_reference;
    bool m_reference_isSet;
    bool m_reference_isValid;

    QString m_reference_for_beneficiary;
    bool m_reference_for_beneficiary_isSet;
    bool m_reference_for_beneficiary_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_transfer_id;
    bool m_transfer_id_isSet;
    bool m_transfer_id_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QDateTime m_value_date;
    bool m_value_date_isSet;
    bool m_value_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransaction)

#endif // OAITransaction_H
