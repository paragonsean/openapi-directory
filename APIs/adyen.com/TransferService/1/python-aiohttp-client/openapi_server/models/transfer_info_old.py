# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.internal_party_identification import InternalPartyIdentification
from openapi_server.models.party_identification import PartyIdentification
from openapi_server import util


class TransferInfoOld(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, description: str=None, destination: PartyIdentification=None, reference: str=None, source: InternalPartyIdentification=None):
        """TransferInfoOld - a model defined in OpenAPI

        :param amount: The amount of this TransferInfoOld.
        :param description: The description of this TransferInfoOld.
        :param destination: The destination of this TransferInfoOld.
        :param reference: The reference of this TransferInfoOld.
        :param source: The source of this TransferInfoOld.
        """
        self.openapi_types = {
            'amount': Amount,
            'description': str,
            'destination': PartyIdentification,
            'reference': str,
            'source': InternalPartyIdentification
        }

        self.attribute_map = {
            'amount': 'amount',
            'description': 'description',
            'destination': 'destination',
            'reference': 'reference',
            'source': 'source'
        }

        self._amount = amount
        self._description = description
        self._destination = destination
        self._reference = reference
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferInfoOld':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferInfoOld of this TransferInfoOld.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransferInfoOld.

        The amount of the transfer.

        :return: The amount of this TransferInfoOld.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransferInfoOld.

        The amount of the transfer.

        :param amount: The amount of this TransferInfoOld.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def description(self):
        """Gets the description of this TransferInfoOld.

        A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description will be truncated in the webhooks that you receive about the transfer.

        :return: The description of this TransferInfoOld.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransferInfoOld.

        A human-readable description for the transfer. You can use alphanumeric characters and hyphens. We recommend sending a maximum of 140 characters, otherwise the description will be truncated in the webhooks that you receive about the transfer.

        :param description: The description of this TransferInfoOld.
        :type description: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this TransferInfoOld.

        Contains information about the resource to which funds will be transferred.

        :return: The destination of this TransferInfoOld.
        :rtype: PartyIdentification
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this TransferInfoOld.

        Contains information about the resource to which funds will be transferred.

        :param destination: The destination of this TransferInfoOld.
        :type destination: PartyIdentification
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def reference(self):
        """Gets the reference of this TransferInfoOld.

        Your unique reference for the transfer. You can use alphanumeric characters and hyphens. Maximum length: 80 characters.

        :return: The reference of this TransferInfoOld.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransferInfoOld.

        Your unique reference for the transfer. You can use alphanumeric characters and hyphens. Maximum length: 80 characters.

        :param reference: The reference of this TransferInfoOld.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference

    @property
    def source(self):
        """Gets the source of this TransferInfoOld.

        Contains information about the resource from which funds will be taken.

        :return: The source of this TransferInfoOld.
        :rtype: InternalPartyIdentification
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this TransferInfoOld.

        Contains information about the resource from which funds will be taken.

        :param source: The source of this TransferInfoOld.
        :type source: InternalPartyIdentification
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
