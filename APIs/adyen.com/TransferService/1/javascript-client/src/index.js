/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v1/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v1`.  
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Address from './model/Address';
import Amount from './model/Amount';
import BankAccountInfo from './model/BankAccountInfo';
import Counterparty from './model/Counterparty';
import InternalPartyIdentification from './model/InternalPartyIdentification';
import InvalidField from './model/InvalidField';
import Link from './model/Link';
import Links from './model/Links';
import MerchantData from './model/MerchantData';
import Name from './model/Name';
import NameLocation from './model/NameLocation';
import PartyIdentification from './model/PartyIdentification';
import RestServiceError from './model/RestServiceError';
import ServiceError from './model/ServiceError';
import Transaction from './model/Transaction';
import TransactionSearchResponse from './model/TransactionSearchResponse';
import TransferInfoOld from './model/TransferInfoOld';
import TransferOld from './model/TransferOld';
import TransactionsApi from './api/TransactionsApi';
import TransfersApi from './api/TransfersApi';


/**
* &gt;Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an &#x60;X-API-Key&#x60; header with the API key as the value, for example:   &#x60;&#x60;&#x60; curl -H \&quot;Content-Type: application/json\&quot; \\ -H \&quot;X-API-Key: YOUR_API_KEY\&quot; \\ ... &#x60;&#x60;&#x60;  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  &#x60;&#x60;&#x60; curl -H \&quot;Content-Type: application/json\&quot; \\ -U \&quot;ws@BalancePlatform.YOUR_BALANCE_PLATFORM\&quot;:\&quot;YOUR_WS_PASSWORD\&quot; \\ ... &#x60;&#x60;&#x60; ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \&quot;vXX\&quot;, where XX is the version number.  For example: &#x60;&#x60;&#x60; https://balanceplatform-api-test.adyen.com/btl/v1/transfers &#x60;&#x60;&#x60; ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to &#x60;https://balanceplatform-api-live.adyen.com/btl/v1&#x60;.  .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TransfersApi = require('index'); // See note below*.
* var xxxSvc = new TransfersApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TransfersApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TransfersApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TransfersApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Address model constructor.
     * @property {module:model/Address}
     */
    Address,

    /**
     * The Amount model constructor.
     * @property {module:model/Amount}
     */
    Amount,

    /**
     * The BankAccountInfo model constructor.
     * @property {module:model/BankAccountInfo}
     */
    BankAccountInfo,

    /**
     * The Counterparty model constructor.
     * @property {module:model/Counterparty}
     */
    Counterparty,

    /**
     * The InternalPartyIdentification model constructor.
     * @property {module:model/InternalPartyIdentification}
     */
    InternalPartyIdentification,

    /**
     * The InvalidField model constructor.
     * @property {module:model/InvalidField}
     */
    InvalidField,

    /**
     * The Link model constructor.
     * @property {module:model/Link}
     */
    Link,

    /**
     * The Links model constructor.
     * @property {module:model/Links}
     */
    Links,

    /**
     * The MerchantData model constructor.
     * @property {module:model/MerchantData}
     */
    MerchantData,

    /**
     * The Name model constructor.
     * @property {module:model/Name}
     */
    Name,

    /**
     * The NameLocation model constructor.
     * @property {module:model/NameLocation}
     */
    NameLocation,

    /**
     * The PartyIdentification model constructor.
     * @property {module:model/PartyIdentification}
     */
    PartyIdentification,

    /**
     * The RestServiceError model constructor.
     * @property {module:model/RestServiceError}
     */
    RestServiceError,

    /**
     * The ServiceError model constructor.
     * @property {module:model/ServiceError}
     */
    ServiceError,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionSearchResponse model constructor.
     * @property {module:model/TransactionSearchResponse}
     */
    TransactionSearchResponse,

    /**
     * The TransferInfoOld model constructor.
     * @property {module:model/TransferInfoOld}
     */
    TransferInfoOld,

    /**
     * The TransferOld model constructor.
     * @property {module:model/TransferOld}
     */
    TransferOld,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi,

    /**
    * The TransfersApi service constructor.
    * @property {module:api/TransfersApi}
    */
    TransfersApi
};
