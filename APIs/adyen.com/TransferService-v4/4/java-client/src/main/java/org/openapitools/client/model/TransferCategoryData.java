/*
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BankCategoryData;
import org.openapitools.client.model.InternalCategoryData;
import org.openapitools.client.model.IssuedCard;
import org.openapitools.client.model.PlatformPayment;
import org.openapitools.client.model.RelayedAuthorisationData;
import org.openapitools.client.model.TransferNotificationValidationFact;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:48.494972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransferCategoryData extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(TransferCategoryData.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!TransferCategoryData.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'TransferCategoryData' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<BankCategoryData> adapterBankCategoryData = gson.getDelegateAdapter(this, TypeToken.get(BankCategoryData.class));
            final TypeAdapter<InternalCategoryData> adapterInternalCategoryData = gson.getDelegateAdapter(this, TypeToken.get(InternalCategoryData.class));
            final TypeAdapter<IssuedCard> adapterIssuedCard = gson.getDelegateAdapter(this, TypeToken.get(IssuedCard.class));
            final TypeAdapter<PlatformPayment> adapterPlatformPayment = gson.getDelegateAdapter(this, TypeToken.get(PlatformPayment.class));

            return (TypeAdapter<T>) new TypeAdapter<TransferCategoryData>() {
                @Override
                public void write(JsonWriter out, TransferCategoryData value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `BankCategoryData`
                    if (value.getActualInstance() instanceof BankCategoryData) {
                        JsonElement element = adapterBankCategoryData.toJsonTree((BankCategoryData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `InternalCategoryData`
                    if (value.getActualInstance() instanceof InternalCategoryData) {
                        JsonElement element = adapterInternalCategoryData.toJsonTree((InternalCategoryData)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IssuedCard`
                    if (value.getActualInstance() instanceof IssuedCard) {
                        JsonElement element = adapterIssuedCard.toJsonTree((IssuedCard)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PlatformPayment`
                    if (value.getActualInstance() instanceof PlatformPayment) {
                        JsonElement element = adapterPlatformPayment.toJsonTree((PlatformPayment)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment");
                }

                @Override
                public TransferCategoryData read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize BankCategoryData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BankCategoryData.validateJsonElement(jsonElement);
                        actualAdapter = adapterBankCategoryData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BankCategoryData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BankCategoryData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BankCategoryData'", e);
                    }
                    // deserialize InternalCategoryData
                    try {
                        // validate the JSON object to see if any exception is thrown
                        InternalCategoryData.validateJsonElement(jsonElement);
                        actualAdapter = adapterInternalCategoryData;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'InternalCategoryData'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for InternalCategoryData failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'InternalCategoryData'", e);
                    }
                    // deserialize IssuedCard
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IssuedCard.validateJsonElement(jsonElement);
                        actualAdapter = adapterIssuedCard;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IssuedCard'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IssuedCard failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IssuedCard'", e);
                    }
                    // deserialize PlatformPayment
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PlatformPayment.validateJsonElement(jsonElement);
                        actualAdapter = adapterPlatformPayment;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PlatformPayment'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PlatformPayment failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PlatformPayment'", e);
                    }

                    if (match == 1) {
                        TransferCategoryData ret = new TransferCategoryData();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for TransferCategoryData: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public TransferCategoryData() {
        super("oneOf", Boolean.FALSE);
    }

    public TransferCategoryData(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("BankCategoryData", BankCategoryData.class);
        schemas.put("InternalCategoryData", InternalCategoryData.class);
        schemas.put("IssuedCard", IssuedCard.class);
        schemas.put("PlatformPayment", PlatformPayment.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return TransferCategoryData.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof BankCategoryData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof InternalCategoryData) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IssuedCard) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PlatformPayment) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment");
    }

    /**
     * Get the actual instance, which can be the following:
     * BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment
     *
     * @return The actual instance (BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `BankCategoryData`. If the actual instance is not `BankCategoryData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BankCategoryData`
     * @throws ClassCastException if the instance is not `BankCategoryData`
     */
    public BankCategoryData getBankCategoryData() throws ClassCastException {
        return (BankCategoryData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `InternalCategoryData`. If the actual instance is not `InternalCategoryData`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `InternalCategoryData`
     * @throws ClassCastException if the instance is not `InternalCategoryData`
     */
    public InternalCategoryData getInternalCategoryData() throws ClassCastException {
        return (InternalCategoryData)super.getActualInstance();
    }
    /**
     * Get the actual instance of `IssuedCard`. If the actual instance is not `IssuedCard`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IssuedCard`
     * @throws ClassCastException if the instance is not `IssuedCard`
     */
    public IssuedCard getIssuedCard() throws ClassCastException {
        return (IssuedCard)super.getActualInstance();
    }
    /**
     * Get the actual instance of `PlatformPayment`. If the actual instance is not `PlatformPayment`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PlatformPayment`
     * @throws ClassCastException if the instance is not `PlatformPayment`
     */
    public PlatformPayment getPlatformPayment() throws ClassCastException {
        return (PlatformPayment)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to TransferCategoryData
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with BankCategoryData
        try {
            BankCategoryData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BankCategoryData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with InternalCategoryData
        try {
            InternalCategoryData.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for InternalCategoryData failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IssuedCard
        try {
            IssuedCard.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IssuedCard failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PlatformPayment
        try {
            PlatformPayment.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PlatformPayment failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for TransferCategoryData with oneOf schemas: BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of TransferCategoryData given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of TransferCategoryData
     * @throws IOException if the JSON string is invalid with respect to TransferCategoryData
     */
    public static TransferCategoryData fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, TransferCategoryData.class);
    }

    /**
     * Convert an instance of TransferCategoryData to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

