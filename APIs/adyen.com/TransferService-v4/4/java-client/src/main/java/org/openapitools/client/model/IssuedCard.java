/*
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RelayedAuthorisationData;
import org.openapitools.client.model.TransferNotificationValidationFact;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IssuedCard
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:48.494972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IssuedCard {
  public static final String SERIALIZED_NAME_AUTHORISATION_TYPE = "authorisationType";
  @SerializedName(SERIALIZED_NAME_AUTHORISATION_TYPE)
  private String authorisationType;

  /**
   * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
   */
  @JsonAdapter(PanEntryModeEnum.Adapter.class)
  public enum PanEntryModeEnum {
    CHIP("chip"),
    
    COF("cof"),
    
    CONTACTLESS("contactless"),
    
    ECOMMERCE("ecommerce"),
    
    MAGSTRIPE("magstripe"),
    
    MANUAL("manual"),
    
    TOKEN("token");

    private String value;

    PanEntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PanEntryModeEnum fromValue(String value) {
      for (PanEntryModeEnum b : PanEntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PanEntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PanEntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PanEntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PanEntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PanEntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAN_ENTRY_MODE = "panEntryMode";
  @SerializedName(SERIALIZED_NAME_PAN_ENTRY_MODE)
  private PanEntryModeEnum panEntryMode;

  /**
   * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
   */
  @JsonAdapter(ProcessingTypeEnum.Adapter.class)
  public enum ProcessingTypeEnum {
    ATM_WITHDRAW("atmWithdraw"),
    
    BALANCE_INQUIRY("balanceInquiry"),
    
    ECOMMERCE("ecommerce"),
    
    MOTO("moto"),
    
    POS("pos"),
    
    PURCHASE_WITH_CASHBACK("purchaseWithCashback"),
    
    RECURRING("recurring"),
    
    TOKEN("token");

    private String value;

    ProcessingTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProcessingTypeEnum fromValue(String value) {
      for (ProcessingTypeEnum b : ProcessingTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProcessingTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProcessingTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProcessingTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProcessingTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProcessingTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROCESSING_TYPE = "processingType";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TYPE)
  private ProcessingTypeEnum processingType;

  public static final String SERIALIZED_NAME_RELAYED_AUTHORISATION_DATA = "relayedAuthorisationData";
  @SerializedName(SERIALIZED_NAME_RELAYED_AUTHORISATION_DATA)
  private RelayedAuthorisationData relayedAuthorisationData;

  public static final String SERIALIZED_NAME_SCHEME_TRACE_ID = "schemeTraceId";
  @SerializedName(SERIALIZED_NAME_SCHEME_TRACE_ID)
  private String schemeTraceId;

  public static final String SERIALIZED_NAME_SCHEME_UNIQUE_TRANSACTION_ID = "schemeUniqueTransactionId";
  @SerializedName(SERIALIZED_NAME_SCHEME_UNIQUE_TRANSACTION_ID)
  private String schemeUniqueTransactionId;

  /**
   * **issuedCard**
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ISSUED_CARD("issuedCard");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.ISSUED_CARD;

  public static final String SERIALIZED_NAME_VALIDATION_FACTS = "validationFacts";
  @SerializedName(SERIALIZED_NAME_VALIDATION_FACTS)
  private List<TransferNotificationValidationFact> validationFacts = new ArrayList<>();

  public IssuedCard() {
  }

  public IssuedCard authorisationType(String authorisationType) {
    this.authorisationType = authorisationType;
    return this;
  }

  /**
   * The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**
   * @return authorisationType
   */
  @javax.annotation.Nullable
  public String getAuthorisationType() {
    return authorisationType;
  }

  public void setAuthorisationType(String authorisationType) {
    this.authorisationType = authorisationType;
  }


  public IssuedCard panEntryMode(PanEntryModeEnum panEntryMode) {
    this.panEntryMode = panEntryMode;
    return this;
  }

  /**
   * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
   * @return panEntryMode
   */
  @javax.annotation.Nullable
  public PanEntryModeEnum getPanEntryMode() {
    return panEntryMode;
  }

  public void setPanEntryMode(PanEntryModeEnum panEntryMode) {
    this.panEntryMode = panEntryMode;
  }


  public IssuedCard processingType(ProcessingTypeEnum processingType) {
    this.processingType = processingType;
    return this;
  }

  /**
   * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
   * @return processingType
   */
  @javax.annotation.Nullable
  public ProcessingTypeEnum getProcessingType() {
    return processingType;
  }

  public void setProcessingType(ProcessingTypeEnum processingType) {
    this.processingType = processingType;
  }


  public IssuedCard relayedAuthorisationData(RelayedAuthorisationData relayedAuthorisationData) {
    this.relayedAuthorisationData = relayedAuthorisationData;
    return this;
  }

  /**
   * If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.
   * @return relayedAuthorisationData
   */
  @javax.annotation.Nullable
  public RelayedAuthorisationData getRelayedAuthorisationData() {
    return relayedAuthorisationData;
  }

  public void setRelayedAuthorisationData(RelayedAuthorisationData relayedAuthorisationData) {
    this.relayedAuthorisationData = relayedAuthorisationData;
  }


  public IssuedCard schemeTraceId(String schemeTraceId) {
    this.schemeTraceId = schemeTraceId;
    return this;
  }

  /**
   * The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.
   * @return schemeTraceId
   */
  @javax.annotation.Nullable
  public String getSchemeTraceId() {
    return schemeTraceId;
  }

  public void setSchemeTraceId(String schemeTraceId) {
    this.schemeTraceId = schemeTraceId;
  }


  public IssuedCard schemeUniqueTransactionId(String schemeUniqueTransactionId) {
    this.schemeUniqueTransactionId = schemeUniqueTransactionId;
    return this;
  }

  /**
   * The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.
   * @return schemeUniqueTransactionId
   */
  @javax.annotation.Nullable
  public String getSchemeUniqueTransactionId() {
    return schemeUniqueTransactionId;
  }

  public void setSchemeUniqueTransactionId(String schemeUniqueTransactionId) {
    this.schemeUniqueTransactionId = schemeUniqueTransactionId;
  }


  public IssuedCard type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * **issuedCard**
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public IssuedCard validationFacts(List<TransferNotificationValidationFact> validationFacts) {
    this.validationFacts = validationFacts;
    return this;
  }

  public IssuedCard addValidationFactsItem(TransferNotificationValidationFact validationFactsItem) {
    if (this.validationFacts == null) {
      this.validationFacts = new ArrayList<>();
    }
    this.validationFacts.add(validationFactsItem);
    return this;
  }

  /**
   * The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
   * @return validationFacts
   */
  @javax.annotation.Nullable
  public List<TransferNotificationValidationFact> getValidationFacts() {
    return validationFacts;
  }

  public void setValidationFacts(List<TransferNotificationValidationFact> validationFacts) {
    this.validationFacts = validationFacts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuedCard issuedCard = (IssuedCard) o;
    return Objects.equals(this.authorisationType, issuedCard.authorisationType) &&
        Objects.equals(this.panEntryMode, issuedCard.panEntryMode) &&
        Objects.equals(this.processingType, issuedCard.processingType) &&
        Objects.equals(this.relayedAuthorisationData, issuedCard.relayedAuthorisationData) &&
        Objects.equals(this.schemeTraceId, issuedCard.schemeTraceId) &&
        Objects.equals(this.schemeUniqueTransactionId, issuedCard.schemeUniqueTransactionId) &&
        Objects.equals(this.type, issuedCard.type) &&
        Objects.equals(this.validationFacts, issuedCard.validationFacts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorisationType, panEntryMode, processingType, relayedAuthorisationData, schemeTraceId, schemeUniqueTransactionId, type, validationFacts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuedCard {\n");
    sb.append("    authorisationType: ").append(toIndentedString(authorisationType)).append("\n");
    sb.append("    panEntryMode: ").append(toIndentedString(panEntryMode)).append("\n");
    sb.append("    processingType: ").append(toIndentedString(processingType)).append("\n");
    sb.append("    relayedAuthorisationData: ").append(toIndentedString(relayedAuthorisationData)).append("\n");
    sb.append("    schemeTraceId: ").append(toIndentedString(schemeTraceId)).append("\n");
    sb.append("    schemeUniqueTransactionId: ").append(toIndentedString(schemeUniqueTransactionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    validationFacts: ").append(toIndentedString(validationFacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorisationType");
    openapiFields.add("panEntryMode");
    openapiFields.add("processingType");
    openapiFields.add("relayedAuthorisationData");
    openapiFields.add("schemeTraceId");
    openapiFields.add("schemeUniqueTransactionId");
    openapiFields.add("type");
    openapiFields.add("validationFacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssuedCard
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssuedCard.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuedCard is not found in the empty JSON string", IssuedCard.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssuedCard.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuedCard` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authorisationType") != null && !jsonObj.get("authorisationType").isJsonNull()) && !jsonObj.get("authorisationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorisationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorisationType").toString()));
      }
      if ((jsonObj.get("panEntryMode") != null && !jsonObj.get("panEntryMode").isJsonNull()) && !jsonObj.get("panEntryMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `panEntryMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("panEntryMode").toString()));
      }
      // validate the optional field `panEntryMode`
      if (jsonObj.get("panEntryMode") != null && !jsonObj.get("panEntryMode").isJsonNull()) {
        PanEntryModeEnum.validateJsonElement(jsonObj.get("panEntryMode"));
      }
      if ((jsonObj.get("processingType") != null && !jsonObj.get("processingType").isJsonNull()) && !jsonObj.get("processingType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingType").toString()));
      }
      // validate the optional field `processingType`
      if (jsonObj.get("processingType") != null && !jsonObj.get("processingType").isJsonNull()) {
        ProcessingTypeEnum.validateJsonElement(jsonObj.get("processingType"));
      }
      // validate the optional field `relayedAuthorisationData`
      if (jsonObj.get("relayedAuthorisationData") != null && !jsonObj.get("relayedAuthorisationData").isJsonNull()) {
        RelayedAuthorisationData.validateJsonElement(jsonObj.get("relayedAuthorisationData"));
      }
      if ((jsonObj.get("schemeTraceId") != null && !jsonObj.get("schemeTraceId").isJsonNull()) && !jsonObj.get("schemeTraceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeTraceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeTraceId").toString()));
      }
      if ((jsonObj.get("schemeUniqueTransactionId") != null && !jsonObj.get("schemeUniqueTransactionId").isJsonNull()) && !jsonObj.get("schemeUniqueTransactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemeUniqueTransactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemeUniqueTransactionId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("validationFacts") != null && !jsonObj.get("validationFacts").isJsonNull()) {
        JsonArray jsonArrayvalidationFacts = jsonObj.getAsJsonArray("validationFacts");
        if (jsonArrayvalidationFacts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationFacts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationFacts` to be an array in the JSON string but got `%s`", jsonObj.get("validationFacts").toString()));
          }

          // validate the optional field `validationFacts` (array)
          for (int i = 0; i < jsonArrayvalidationFacts.size(); i++) {
            TransferNotificationValidationFact.validateJsonElement(jsonArrayvalidationFacts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuedCard.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuedCard' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuedCard> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuedCard.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuedCard>() {
           @Override
           public void write(JsonWriter out, IssuedCard value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuedCard read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssuedCard given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssuedCard
   * @throws IOException if the JSON string is invalid with respect to IssuedCard
   */
  public static IssuedCard fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuedCard.class);
  }

  /**
   * Convert an instance of IssuedCard to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

