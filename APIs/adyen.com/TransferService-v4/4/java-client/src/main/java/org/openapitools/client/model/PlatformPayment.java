/*
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PlatformPayment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:48.494972-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PlatformPayment {
  public static final String SERIALIZED_NAME_MODIFICATION_MERCHANT_REFERENCE = "modificationMerchantReference";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_MERCHANT_REFERENCE)
  private String modificationMerchantReference;

  public static final String SERIALIZED_NAME_MODIFICATION_PSP_REFERENCE = "modificationPspReference";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_PSP_REFERENCE)
  private String modificationPspReference;

  public static final String SERIALIZED_NAME_PAYMENT_MERCHANT_REFERENCE = "paymentMerchantReference";
  @SerializedName(SERIALIZED_NAME_PAYMENT_MERCHANT_REFERENCE)
  private String paymentMerchantReference;

  /**
   * The type of the related split.
   */
  @JsonAdapter(PlatformPaymentTypeEnum.Adapter.class)
  public enum PlatformPaymentTypeEnum {
    ACQUIRING_FEES("AcquiringFees"),
    
    ADYEN_COMMISSION("AdyenCommission"),
    
    ADYEN_FEES("AdyenFees"),
    
    ADYEN_MARKUP("AdyenMarkup"),
    
    BALANCE_ACCOUNT("BalanceAccount"),
    
    COMMISSION("Commission"),
    
    DEFAULT("Default"),
    
    INTERCHANGE("Interchange"),
    
    PAYMENT_FEE("PaymentFee"),
    
    REMAINDER("Remainder"),
    
    SCHEME_FEE("SchemeFee"),
    
    TOP_UP("TopUp"),
    
    VAT("VAT");

    private String value;

    PlatformPaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformPaymentTypeEnum fromValue(String value) {
      for (PlatformPaymentTypeEnum b : PlatformPaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformPaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformPaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformPaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformPaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformPaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM_PAYMENT_TYPE = "platformPaymentType";
  @SerializedName(SERIALIZED_NAME_PLATFORM_PAYMENT_TYPE)
  private PlatformPaymentTypeEnum platformPaymentType;

  public static final String SERIALIZED_NAME_PSP_PAYMENT_REFERENCE = "pspPaymentReference";
  @SerializedName(SERIALIZED_NAME_PSP_PAYMENT_REFERENCE)
  private String pspPaymentReference;

  /**
   * **platformPayment**
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    PLATFORM_PAYMENT("platformPayment");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.PLATFORM_PAYMENT;

  public PlatformPayment() {
  }

  public PlatformPayment modificationMerchantReference(String modificationMerchantReference) {
    this.modificationMerchantReference = modificationMerchantReference;
    return this;
  }

  /**
   * The capture&#39;s merchant reference included in the transfer.
   * @return modificationMerchantReference
   */
  @javax.annotation.Nullable
  public String getModificationMerchantReference() {
    return modificationMerchantReference;
  }

  public void setModificationMerchantReference(String modificationMerchantReference) {
    this.modificationMerchantReference = modificationMerchantReference;
  }


  public PlatformPayment modificationPspReference(String modificationPspReference) {
    this.modificationPspReference = modificationPspReference;
    return this;
  }

  /**
   * The capture reference included in the transfer.
   * @return modificationPspReference
   */
  @javax.annotation.Nullable
  public String getModificationPspReference() {
    return modificationPspReference;
  }

  public void setModificationPspReference(String modificationPspReference) {
    this.modificationPspReference = modificationPspReference;
  }


  public PlatformPayment paymentMerchantReference(String paymentMerchantReference) {
    this.paymentMerchantReference = paymentMerchantReference;
    return this;
  }

  /**
   * The payment&#39;s merchant reference included in the transfer.
   * @return paymentMerchantReference
   */
  @javax.annotation.Nullable
  public String getPaymentMerchantReference() {
    return paymentMerchantReference;
  }

  public void setPaymentMerchantReference(String paymentMerchantReference) {
    this.paymentMerchantReference = paymentMerchantReference;
  }


  public PlatformPayment platformPaymentType(PlatformPaymentTypeEnum platformPaymentType) {
    this.platformPaymentType = platformPaymentType;
    return this;
  }

  /**
   * The type of the related split.
   * @return platformPaymentType
   */
  @javax.annotation.Nullable
  public PlatformPaymentTypeEnum getPlatformPaymentType() {
    return platformPaymentType;
  }

  public void setPlatformPaymentType(PlatformPaymentTypeEnum platformPaymentType) {
    this.platformPaymentType = platformPaymentType;
  }


  public PlatformPayment pspPaymentReference(String pspPaymentReference) {
    this.pspPaymentReference = pspPaymentReference;
    return this;
  }

  /**
   * The payment reference included in the transfer.
   * @return pspPaymentReference
   */
  @javax.annotation.Nullable
  public String getPspPaymentReference() {
    return pspPaymentReference;
  }

  public void setPspPaymentReference(String pspPaymentReference) {
    this.pspPaymentReference = pspPaymentReference;
  }


  public PlatformPayment type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * **platformPayment**
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PlatformPayment platformPayment = (PlatformPayment) o;
    return Objects.equals(this.modificationMerchantReference, platformPayment.modificationMerchantReference) &&
        Objects.equals(this.modificationPspReference, platformPayment.modificationPspReference) &&
        Objects.equals(this.paymentMerchantReference, platformPayment.paymentMerchantReference) &&
        Objects.equals(this.platformPaymentType, platformPayment.platformPaymentType) &&
        Objects.equals(this.pspPaymentReference, platformPayment.pspPaymentReference) &&
        Objects.equals(this.type, platformPayment.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modificationMerchantReference, modificationPspReference, paymentMerchantReference, platformPaymentType, pspPaymentReference, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PlatformPayment {\n");
    sb.append("    modificationMerchantReference: ").append(toIndentedString(modificationMerchantReference)).append("\n");
    sb.append("    modificationPspReference: ").append(toIndentedString(modificationPspReference)).append("\n");
    sb.append("    paymentMerchantReference: ").append(toIndentedString(paymentMerchantReference)).append("\n");
    sb.append("    platformPaymentType: ").append(toIndentedString(platformPaymentType)).append("\n");
    sb.append("    pspPaymentReference: ").append(toIndentedString(pspPaymentReference)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modificationMerchantReference");
    openapiFields.add("modificationPspReference");
    openapiFields.add("paymentMerchantReference");
    openapiFields.add("platformPaymentType");
    openapiFields.add("pspPaymentReference");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PlatformPayment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PlatformPayment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PlatformPayment is not found in the empty JSON string", PlatformPayment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PlatformPayment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PlatformPayment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modificationMerchantReference") != null && !jsonObj.get("modificationMerchantReference").isJsonNull()) && !jsonObj.get("modificationMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationMerchantReference").toString()));
      }
      if ((jsonObj.get("modificationPspReference") != null && !jsonObj.get("modificationPspReference").isJsonNull()) && !jsonObj.get("modificationPspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationPspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationPspReference").toString()));
      }
      if ((jsonObj.get("paymentMerchantReference") != null && !jsonObj.get("paymentMerchantReference").isJsonNull()) && !jsonObj.get("paymentMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentMerchantReference").toString()));
      }
      if ((jsonObj.get("platformPaymentType") != null && !jsonObj.get("platformPaymentType").isJsonNull()) && !jsonObj.get("platformPaymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platformPaymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platformPaymentType").toString()));
      }
      // validate the optional field `platformPaymentType`
      if (jsonObj.get("platformPaymentType") != null && !jsonObj.get("platformPaymentType").isJsonNull()) {
        PlatformPaymentTypeEnum.validateJsonElement(jsonObj.get("platformPaymentType"));
      }
      if ((jsonObj.get("pspPaymentReference") != null && !jsonObj.get("pspPaymentReference").isJsonNull()) && !jsonObj.get("pspPaymentReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspPaymentReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspPaymentReference").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PlatformPayment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PlatformPayment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PlatformPayment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PlatformPayment.class));

       return (TypeAdapter<T>) new TypeAdapter<PlatformPayment>() {
           @Override
           public void write(JsonWriter out, PlatformPayment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PlatformPayment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PlatformPayment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PlatformPayment
   * @throws IOException if the JSON string is invalid with respect to PlatformPayment
   */
  public static PlatformPayment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PlatformPayment.class);
  }

  /**
   * Convert an instance of PlatformPayment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

