/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BankCategoryData from './BankCategoryData';
import InternalCategoryData from './InternalCategoryData';
import IssuedCard from './IssuedCard';
import PlatformPayment from './PlatformPayment';
import RelayedAuthorisationData from './RelayedAuthorisationData';
import TransferNotificationValidationFact from './TransferNotificationValidationFact';

/**
 * The TransferCategoryData model module.
 * @module model/TransferCategoryData
 * @version 4
 */
class TransferCategoryData {
    /**
     * Constructs a new <code>TransferCategoryData</code>.
     * The relevant data according to the transfer category.
     * @alias module:model/TransferCategoryData
     * @param {(module:model/BankCategoryData|module:model/InternalCategoryData|module:model/IssuedCard|module:model/PlatformPayment)} instance The actual instance to initialize TransferCategoryData.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "BankCategoryData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                BankCategoryData.validateJSON(instance); // throw an exception if no match
                // create BankCategoryData from JS object
                this.actualInstance = BankCategoryData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into BankCategoryData
            errorMessages.push("Failed to construct BankCategoryData: " + err)
        }

        try {
            if (typeof instance === "InternalCategoryData") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                InternalCategoryData.validateJSON(instance); // throw an exception if no match
                // create InternalCategoryData from JS object
                this.actualInstance = InternalCategoryData.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into InternalCategoryData
            errorMessages.push("Failed to construct InternalCategoryData: " + err)
        }

        try {
            if (typeof instance === "IssuedCard") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                IssuedCard.validateJSON(instance); // throw an exception if no match
                // create IssuedCard from JS object
                this.actualInstance = IssuedCard.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into IssuedCard
            errorMessages.push("Failed to construct IssuedCard: " + err)
        }

        try {
            if (typeof instance === "PlatformPayment") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                PlatformPayment.validateJSON(instance); // throw an exception if no match
                // create PlatformPayment from JS object
                this.actualInstance = PlatformPayment.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into PlatformPayment
            errorMessages.push("Failed to construct PlatformPayment: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `TransferCategoryData` with oneOf schemas BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `TransferCategoryData` with oneOf schemas BankCategoryData, InternalCategoryData, IssuedCard, PlatformPayment. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>TransferCategoryData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransferCategoryData} obj Optional instance to populate.
     * @return {module:model/TransferCategoryData} The populated <code>TransferCategoryData</code> instance.
     */
    static constructFromObject(data, obj) {
        return new TransferCategoryData(data);
    }

    /**
     * Gets the actual instance, which can be <code>BankCategoryData</code>, <code>InternalCategoryData</code>, <code>IssuedCard</code>, <code>PlatformPayment</code>.
     * @return {(module:model/BankCategoryData|module:model/InternalCategoryData|module:model/IssuedCard|module:model/PlatformPayment)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>BankCategoryData</code>, <code>InternalCategoryData</code>, <code>IssuedCard</code>, <code>PlatformPayment</code>.
     * @param {(module:model/BankCategoryData|module:model/InternalCategoryData|module:model/IssuedCard|module:model/PlatformPayment)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = TransferCategoryData.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of TransferCategoryData from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/TransferCategoryData} An instance of TransferCategoryData.
     */
    static fromJSON = function(json_string){
        return TransferCategoryData.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).
 * @member {module:model/TransferCategoryData.PriorityEnum} priority
 */
TransferCategoryData.prototype['priority'] = undefined;

/**
 * **bank**
 * @member {module:model/TransferCategoryData.TypeEnum} type
 * @default 'bank'
 */
TransferCategoryData.prototype['type'] = 'bank';

/**
 * The capture's merchant reference included in the transfer.
 * @member {String} modificationMerchantReference
 */
TransferCategoryData.prototype['modificationMerchantReference'] = undefined;

/**
 * The capture reference included in the transfer.
 * @member {String} modificationPspReference
 */
TransferCategoryData.prototype['modificationPspReference'] = undefined;

/**
 * The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**
 * @member {String} authorisationType
 */
TransferCategoryData.prototype['authorisationType'] = undefined;

/**
 * Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.
 * @member {module:model/TransferCategoryData.PanEntryModeEnum} panEntryMode
 */
TransferCategoryData.prototype['panEntryMode'] = undefined;

/**
 * Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.
 * @member {module:model/TransferCategoryData.ProcessingTypeEnum} processingType
 */
TransferCategoryData.prototype['processingType'] = undefined;

/**
 * If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.
 * @member {module:model/RelayedAuthorisationData} relayedAuthorisationData
 */
TransferCategoryData.prototype['relayedAuthorisationData'] = undefined;

/**
 * The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.
 * @member {String} schemeTraceId
 */
TransferCategoryData.prototype['schemeTraceId'] = undefined;

/**
 * The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.
 * @member {String} schemeUniqueTransactionId
 */
TransferCategoryData.prototype['schemeUniqueTransactionId'] = undefined;

/**
 * The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.
 * @member {Array.<module:model/TransferNotificationValidationFact>} validationFacts
 */
TransferCategoryData.prototype['validationFacts'] = undefined;

/**
 * The payment's merchant reference included in the transfer.
 * @member {String} paymentMerchantReference
 */
TransferCategoryData.prototype['paymentMerchantReference'] = undefined;

/**
 * The type of the related split.
 * @member {module:model/TransferCategoryData.PlatformPaymentTypeEnum} platformPaymentType
 */
TransferCategoryData.prototype['platformPaymentType'] = undefined;

/**
 * The payment reference included in the transfer.
 * @member {String} pspPaymentReference
 */
TransferCategoryData.prototype['pspPaymentReference'] = undefined;


TransferCategoryData.OneOf = ["BankCategoryData", "InternalCategoryData", "IssuedCard", "PlatformPayment"];

export default TransferCategoryData;

