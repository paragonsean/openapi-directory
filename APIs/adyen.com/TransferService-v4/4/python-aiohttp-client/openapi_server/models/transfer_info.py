# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.counterparty_info_v3 import CounterpartyInfoV3
from openapi_server.models.ultimate_party_identification import UltimatePartyIdentification
from openapi_server import util


class TransferInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, balance_account_id: str=None, category: str=None, counterparty: CounterpartyInfoV3=None, description: str=None, payment_instrument_id: str=None, priority: str=None, reference: str=None, reference_for_beneficiary: str=None, ultimate_party: UltimatePartyIdentification=None):
        """TransferInfo - a model defined in OpenAPI

        :param amount: The amount of this TransferInfo.
        :param balance_account_id: The balance_account_id of this TransferInfo.
        :param category: The category of this TransferInfo.
        :param counterparty: The counterparty of this TransferInfo.
        :param description: The description of this TransferInfo.
        :param payment_instrument_id: The payment_instrument_id of this TransferInfo.
        :param priority: The priority of this TransferInfo.
        :param reference: The reference of this TransferInfo.
        :param reference_for_beneficiary: The reference_for_beneficiary of this TransferInfo.
        :param ultimate_party: The ultimate_party of this TransferInfo.
        """
        self.openapi_types = {
            'amount': Amount,
            'balance_account_id': str,
            'category': str,
            'counterparty': CounterpartyInfoV3,
            'description': str,
            'payment_instrument_id': str,
            'priority': str,
            'reference': str,
            'reference_for_beneficiary': str,
            'ultimate_party': UltimatePartyIdentification
        }

        self.attribute_map = {
            'amount': 'amount',
            'balance_account_id': 'balanceAccountId',
            'category': 'category',
            'counterparty': 'counterparty',
            'description': 'description',
            'payment_instrument_id': 'paymentInstrumentId',
            'priority': 'priority',
            'reference': 'reference',
            'reference_for_beneficiary': 'referenceForBeneficiary',
            'ultimate_party': 'ultimateParty'
        }

        self._amount = amount
        self._balance_account_id = balance_account_id
        self._category = category
        self._counterparty = counterparty
        self._description = description
        self._payment_instrument_id = payment_instrument_id
        self._priority = priority
        self._reference = reference
        self._reference_for_beneficiary = reference_for_beneficiary
        self._ultimate_party = ultimate_party

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransferInfo of this TransferInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransferInfo.

        The amount of the transfer.

        :return: The amount of this TransferInfo.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransferInfo.

        The amount of the transfer.

        :param amount: The amount of this TransferInfo.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this TransferInfo.

        The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).

        :return: The balance_account_id of this TransferInfo.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this TransferInfo.

        The unique identifier of the source [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id).

        :param balance_account_id: The balance_account_id of this TransferInfo.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def category(self):
        """Gets the category of this TransferInfo.

        The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.

        :return: The category of this TransferInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this TransferInfo.

        The type of transfer.  Possible values:   - **bank**: Transfer to a [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments__resParam_id) or a bank account.  - **internal**: Transfer to another [balance account](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_id) within your platform.  - **issuedCard**: Transfer initiated by a Adyen-issued card.  - **platformPayment**: Fund movements related to payments that are acquired for your users.

        :param category: The category of this TransferInfo.
        :type category: str
        """
        allowed_values = ["bank", "internal", "issuedCard", "platformPayment", "card"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def counterparty(self):
        """Gets the counterparty of this TransferInfo.

        The recipient of the funds transfer. A bank account, a balance account, or a transfer instrument is required.

        :return: The counterparty of this TransferInfo.
        :rtype: CounterpartyInfoV3
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this TransferInfo.

        The recipient of the funds transfer. A bank account, a balance account, or a transfer instrument is required.

        :param counterparty: The counterparty of this TransferInfo.
        :type counterparty: CounterpartyInfoV3
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")

        self._counterparty = counterparty

    @property
    def description(self):
        """Gets the description of this TransferInfo.

        Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**

        :return: The description of this TransferInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransferInfo.

        Your description for the transfer. It is used by most banks as the transfer description. We recommend sending a maximum of 140 characters, otherwise the description may be truncated.  Supported characters: **[a-z] [A-Z] [0-9] / - ?** **: ( ) . , ' + Space**  Supported characters for **regular** and **fast** transfers to a US counterparty: **[a-z] [A-Z] [0-9] & $ % # @** **~ = + - _ ' \" ! ?**

        :param description: The description of this TransferInfo.
        :type description: str
        """
        if description is not None and len(description) > 140:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `140`")

        self._description = description

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this TransferInfo.

        The unique identifier of the source [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id).

        :return: The payment_instrument_id of this TransferInfo.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this TransferInfo.

        The unique identifier of the source [payment instrument](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/paymentInstruments__resParam_id).

        :param payment_instrument_id: The payment_instrument_id of this TransferInfo.
        :type payment_instrument_id: str
        """

        self._payment_instrument_id = payment_instrument_id

    @property
    def priority(self):
        """Gets the priority of this TransferInfo.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :return: The priority of this TransferInfo.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TransferInfo.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :param priority: The priority of this TransferInfo.
        :type priority: str
        """
        allowed_values = ["crossBorder", "fast", "instant", "internal", "regular", "wire"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def reference(self):
        """Gets the reference of this TransferInfo.

        Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.

        :return: The reference of this TransferInfo.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransferInfo.

        Your reference for the transfer, used internally within your platform. If you don't provide this in the request, Adyen generates a unique reference.

        :param reference: The reference of this TransferInfo.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference

    @property
    def reference_for_beneficiary(self):
        """Gets the reference_for_beneficiary of this TransferInfo.

         A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.

        :return: The reference_for_beneficiary of this TransferInfo.
        :rtype: str
        """
        return self._reference_for_beneficiary

    @reference_for_beneficiary.setter
    def reference_for_beneficiary(self, reference_for_beneficiary):
        """Sets the reference_for_beneficiary of this TransferInfo.

         A reference that is sent to the recipient. This reference is also sent in all webhooks related to the transfer, so you can use it to track statuses for both the source and recipient of funds.   Supported characters: **a-z**, **A-Z**, **0-9**. The maximum length depends on the `category`.  - **internal**: 80 characters  - **bank**: 35 characters when transferring to an IBAN, 15 characters for others.

        :param reference_for_beneficiary: The reference_for_beneficiary of this TransferInfo.
        :type reference_for_beneficiary: str
        """
        if reference_for_beneficiary is not None and len(reference_for_beneficiary) > 80:
            raise ValueError("Invalid value for `reference_for_beneficiary`, length must be less than or equal to `80`")

        self._reference_for_beneficiary = reference_for_beneficiary

    @property
    def ultimate_party(self):
        """Gets the ultimate_party of this TransferInfo.

        The ultimate sender of the funds of the transfer (ultimate debtor).

        :return: The ultimate_party of this TransferInfo.
        :rtype: UltimatePartyIdentification
        """
        return self._ultimate_party

    @ultimate_party.setter
    def ultimate_party(self, ultimate_party):
        """Sets the ultimate_party of this TransferInfo.

        The ultimate sender of the funds of the transfer (ultimate debtor).

        :param ultimate_party: The ultimate_party of this TransferInfo.
        :type ultimate_party: UltimatePartyIdentification
        """

        self._ultimate_party = ultimate_party
