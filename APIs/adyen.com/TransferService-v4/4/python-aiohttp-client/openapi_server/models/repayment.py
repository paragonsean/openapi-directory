# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.repayment_term import RepaymentTerm
from openapi_server.models.threshold_repayment import ThresholdRepayment
from openapi_server import util


class Repayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, basis_points: int=None, term: RepaymentTerm=None, threshold: ThresholdRepayment=None):
        """Repayment - a model defined in OpenAPI

        :param basis_points: The basis_points of this Repayment.
        :param term: The term of this Repayment.
        :param threshold: The threshold of this Repayment.
        """
        self.openapi_types = {
            'basis_points': int,
            'term': RepaymentTerm,
            'threshold': ThresholdRepayment
        }

        self.attribute_map = {
            'basis_points': 'basisPoints',
            'term': 'term',
            'threshold': 'threshold'
        }

        self._basis_points = basis_points
        self._term = term
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Repayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Repayment of this Repayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def basis_points(self):
        """Gets the basis_points of this Repayment.

        The repayment that is deducted daily from incoming net volume, in [basis points](https://www.investopedia.com/terms/b/basispoint.asp).

        :return: The basis_points of this Repayment.
        :rtype: int
        """
        return self._basis_points

    @basis_points.setter
    def basis_points(self, basis_points):
        """Sets the basis_points of this Repayment.

        The repayment that is deducted daily from incoming net volume, in [basis points](https://www.investopedia.com/terms/b/basispoint.asp).

        :param basis_points: The basis_points of this Repayment.
        :type basis_points: int
        """
        if basis_points is None:
            raise ValueError("Invalid value for `basis_points`, must not be `None`")

        self._basis_points = basis_points

    @property
    def term(self):
        """Gets the term of this Repayment.

        An object containing the details of the configuration for repayment term.

        :return: The term of this Repayment.
        :rtype: RepaymentTerm
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this Repayment.

        An object containing the details of the configuration for repayment term.

        :param term: The term of this Repayment.
        :type term: RepaymentTerm
        """

        self._term = term

    @property
    def threshold(self):
        """Gets the threshold of this Repayment.

        An object containing the details of the 30-day repayment threshold.

        :return: The threshold of this Repayment.
        :rtype: ThresholdRepayment
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this Repayment.

        An object containing the details of the 30-day repayment threshold.

        :param threshold: The threshold of this Repayment.
        :type threshold: ThresholdRepayment
        """

        self._threshold = threshold
