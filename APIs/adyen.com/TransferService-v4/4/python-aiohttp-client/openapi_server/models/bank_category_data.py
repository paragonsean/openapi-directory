# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankCategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: str=None, type: str='bank'):
        """BankCategoryData - a model defined in OpenAPI

        :param priority: The priority of this BankCategoryData.
        :param type: The type of this BankCategoryData.
        """
        self.openapi_types = {
            'priority': str,
            'type': str
        }

        self.attribute_map = {
            'priority': 'priority',
            'type': 'type'
        }

        self._priority = priority
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankCategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankCategoryData of this BankCategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this BankCategoryData.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :return: The priority of this BankCategoryData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this BankCategoryData.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :param priority: The priority of this BankCategoryData.
        :type priority: str
        """
        allowed_values = ["crossBorder", "fast", "instant", "internal", "regular", "wire"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def type(self):
        """Gets the type of this BankCategoryData.

        **bank**

        :return: The type of this BankCategoryData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BankCategoryData.

        **bank**

        :param type: The type of this BankCategoryData.
        :type type: str
        """
        allowed_values = ["bank"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
