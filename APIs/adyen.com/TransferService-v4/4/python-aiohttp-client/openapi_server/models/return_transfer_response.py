# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReturnTransferResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, reference: str=None, status: str=None, transfer_id: str=None):
        """ReturnTransferResponse - a model defined in OpenAPI

        :param id: The id of this ReturnTransferResponse.
        :param reference: The reference of this ReturnTransferResponse.
        :param status: The status of this ReturnTransferResponse.
        :param transfer_id: The transfer_id of this ReturnTransferResponse.
        """
        self.openapi_types = {
            'id': str,
            'reference': str,
            'status': str,
            'transfer_id': str
        }

        self.attribute_map = {
            'id': 'id',
            'reference': 'reference',
            'status': 'status',
            'transfer_id': 'transferId'
        }

        self._id = id
        self._reference = reference
        self._status = status
        self._transfer_id = transfer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReturnTransferResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReturnTransferResponse of this ReturnTransferResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ReturnTransferResponse.

        The unique identifier of the return.

        :return: The id of this ReturnTransferResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReturnTransferResponse.

        The unique identifier of the return.

        :param id: The id of this ReturnTransferResponse.
        :type id: str
        """

        self._id = id

    @property
    def reference(self):
        """Gets the reference of this ReturnTransferResponse.

        Your internal reference for the return.

        :return: The reference of this ReturnTransferResponse.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ReturnTransferResponse.

        Your internal reference for the return.

        :param reference: The reference of this ReturnTransferResponse.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this ReturnTransferResponse.

        The resulting status of the return.  Possible values: **Authorised**, **Declined**.

        :return: The status of this ReturnTransferResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReturnTransferResponse.

        The resulting status of the return.  Possible values: **Authorised**, **Declined**.

        :param status: The status of this ReturnTransferResponse.
        :type status: str
        """
        allowed_values = ["Authorised", "Declined"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transfer_id(self):
        """Gets the transfer_id of this ReturnTransferResponse.

        The unique identifier of the original transfer.

        :return: The transfer_id of this ReturnTransferResponse.
        :rtype: str
        """
        return self._transfer_id

    @transfer_id.setter
    def transfer_id(self, transfer_id):
        """Sets the transfer_id of this ReturnTransferResponse.

        The unique identifier of the original transfer.

        :param transfer_id: The transfer_id of this ReturnTransferResponse.
        :type transfer_id: str
        """

        self._transfer_id = transfer_id
