# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CALocalAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, account_type: str='checking', institution_number: str=None, transit_number: str=None, type: str='caLocal'):
        """CALocalAccountIdentification - a model defined in OpenAPI

        :param account_number: The account_number of this CALocalAccountIdentification.
        :param account_type: The account_type of this CALocalAccountIdentification.
        :param institution_number: The institution_number of this CALocalAccountIdentification.
        :param transit_number: The transit_number of this CALocalAccountIdentification.
        :param type: The type of this CALocalAccountIdentification.
        """
        self.openapi_types = {
            'account_number': str,
            'account_type': str,
            'institution_number': str,
            'transit_number': str,
            'type': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'institution_number': 'institutionNumber',
            'transit_number': 'transitNumber',
            'type': 'type'
        }

        self._account_number = account_number
        self._account_type = account_type
        self._institution_number = institution_number
        self._transit_number = transit_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CALocalAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CALocalAccountIdentification of this CALocalAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CALocalAccountIdentification.

        The 5- to 12-digit bank account number, without separators or whitespace.

        :return: The account_number of this CALocalAccountIdentification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CALocalAccountIdentification.

        The 5- to 12-digit bank account number, without separators or whitespace.

        :param account_number: The account_number of this CALocalAccountIdentification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 12:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `12`")
        if account_number is not None and len(account_number) < 5:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `5`")

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this CALocalAccountIdentification.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :return: The account_type of this CALocalAccountIdentification.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this CALocalAccountIdentification.

        The bank account type.  Possible values: **checking** or **savings**. Defaults to **checking**.

        :param account_type: The account_type of this CALocalAccountIdentification.
        :type account_type: str
        """
        allowed_values = ["checking", "savings"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def institution_number(self):
        """Gets the institution_number of this CALocalAccountIdentification.

        The 3-digit institution number, without separators or whitespace.

        :return: The institution_number of this CALocalAccountIdentification.
        :rtype: str
        """
        return self._institution_number

    @institution_number.setter
    def institution_number(self, institution_number):
        """Sets the institution_number of this CALocalAccountIdentification.

        The 3-digit institution number, without separators or whitespace.

        :param institution_number: The institution_number of this CALocalAccountIdentification.
        :type institution_number: str
        """
        if institution_number is None:
            raise ValueError("Invalid value for `institution_number`, must not be `None`")
        if institution_number is not None and len(institution_number) > 3:
            raise ValueError("Invalid value for `institution_number`, length must be less than or equal to `3`")
        if institution_number is not None and len(institution_number) < 3:
            raise ValueError("Invalid value for `institution_number`, length must be greater than or equal to `3`")

        self._institution_number = institution_number

    @property
    def transit_number(self):
        """Gets the transit_number of this CALocalAccountIdentification.

        The 5-digit transit number, without separators or whitespace.

        :return: The transit_number of this CALocalAccountIdentification.
        :rtype: str
        """
        return self._transit_number

    @transit_number.setter
    def transit_number(self, transit_number):
        """Sets the transit_number of this CALocalAccountIdentification.

        The 5-digit transit number, without separators or whitespace.

        :param transit_number: The transit_number of this CALocalAccountIdentification.
        :type transit_number: str
        """
        if transit_number is None:
            raise ValueError("Invalid value for `transit_number`, must not be `None`")
        if transit_number is not None and len(transit_number) > 5:
            raise ValueError("Invalid value for `transit_number`, length must be less than or equal to `5`")
        if transit_number is not None and len(transit_number) < 5:
            raise ValueError("Invalid value for `transit_number`, length must be greater than or equal to `5`")

        self._transit_number = transit_number

    @property
    def type(self):
        """Gets the type of this CALocalAccountIdentification.

        **caLocal**

        :return: The type of this CALocalAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CALocalAccountIdentification.

        **caLocal**

        :param type: The type of this CALocalAccountIdentification.
        :type type: str
        """
        allowed_values = ["caLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
