# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HKLocalAccountIdentification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, clearing_code: str=None, type: str='hkLocal'):
        """HKLocalAccountIdentification - a model defined in OpenAPI

        :param account_number: The account_number of this HKLocalAccountIdentification.
        :param clearing_code: The clearing_code of this HKLocalAccountIdentification.
        :param type: The type of this HKLocalAccountIdentification.
        """
        self.openapi_types = {
            'account_number': str,
            'clearing_code': str,
            'type': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'clearing_code': 'clearingCode',
            'type': 'type'
        }

        self._account_number = account_number
        self._clearing_code = clearing_code
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HKLocalAccountIdentification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HKLocalAccountIdentification of this HKLocalAccountIdentification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this HKLocalAccountIdentification.

        The 9- to 15-character bank account number (alphanumeric), without separators or whitespace. Starts with the 3-digit branch code.

        :return: The account_number of this HKLocalAccountIdentification.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this HKLocalAccountIdentification.

        The 9- to 15-character bank account number (alphanumeric), without separators or whitespace. Starts with the 3-digit branch code.

        :param account_number: The account_number of this HKLocalAccountIdentification.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and len(account_number) > 15:
            raise ValueError("Invalid value for `account_number`, length must be less than or equal to `15`")
        if account_number is not None and len(account_number) < 9:
            raise ValueError("Invalid value for `account_number`, length must be greater than or equal to `9`")

        self._account_number = account_number

    @property
    def clearing_code(self):
        """Gets the clearing_code of this HKLocalAccountIdentification.

        The 3-digit clearing code, without separators or whitespace.

        :return: The clearing_code of this HKLocalAccountIdentification.
        :rtype: str
        """
        return self._clearing_code

    @clearing_code.setter
    def clearing_code(self, clearing_code):
        """Sets the clearing_code of this HKLocalAccountIdentification.

        The 3-digit clearing code, without separators or whitespace.

        :param clearing_code: The clearing_code of this HKLocalAccountIdentification.
        :type clearing_code: str
        """
        if clearing_code is None:
            raise ValueError("Invalid value for `clearing_code`, must not be `None`")
        if clearing_code is not None and len(clearing_code) > 3:
            raise ValueError("Invalid value for `clearing_code`, length must be less than or equal to `3`")
        if clearing_code is not None and len(clearing_code) < 3:
            raise ValueError("Invalid value for `clearing_code`, length must be greater than or equal to `3`")

        self._clearing_code = clearing_code

    @property
    def type(self):
        """Gets the type of this HKLocalAccountIdentification.

        **hkLocal**

        :return: The type of this HKLocalAccountIdentification.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HKLocalAccountIdentification.

        **hkLocal**

        :param type: The type of this HKLocalAccountIdentification.
        :type type: str
        """
        allowed_values = ["hkLocal"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
