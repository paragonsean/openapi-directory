# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.resource_reference import ResourceReference
from openapi_server.models.transfer_data import TransferData
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder: ResourceReference=None, amount: Amount=None, balance_account: ResourceReference=None, balance_platform: str=None, booking_date: datetime=None, creation_date: datetime=None, id: str=None, status: str=None, transfer: TransferData=None, value_date: datetime=None):
        """Transaction - a model defined in OpenAPI

        :param account_holder: The account_holder of this Transaction.
        :param amount: The amount of this Transaction.
        :param balance_account: The balance_account of this Transaction.
        :param balance_platform: The balance_platform of this Transaction.
        :param booking_date: The booking_date of this Transaction.
        :param creation_date: The creation_date of this Transaction.
        :param id: The id of this Transaction.
        :param status: The status of this Transaction.
        :param transfer: The transfer of this Transaction.
        :param value_date: The value_date of this Transaction.
        """
        self.openapi_types = {
            'account_holder': ResourceReference,
            'amount': Amount,
            'balance_account': ResourceReference,
            'balance_platform': str,
            'booking_date': datetime,
            'creation_date': datetime,
            'id': str,
            'status': str,
            'transfer': TransferData,
            'value_date': datetime
        }

        self.attribute_map = {
            'account_holder': 'accountHolder',
            'amount': 'amount',
            'balance_account': 'balanceAccount',
            'balance_platform': 'balancePlatform',
            'booking_date': 'bookingDate',
            'creation_date': 'creationDate',
            'id': 'id',
            'status': 'status',
            'transfer': 'transfer',
            'value_date': 'valueDate'
        }

        self._account_holder = account_holder
        self._amount = amount
        self._balance_account = balance_account
        self._balance_platform = balance_platform
        self._booking_date = booking_date
        self._creation_date = creation_date
        self._id = id
        self._status = status
        self._transfer = transfer
        self._value_date = value_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder(self):
        """Gets the account_holder of this Transaction.

        Contains information about the account holder associated with the `balanceAccount`.

        :return: The account_holder of this Transaction.
        :rtype: ResourceReference
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this Transaction.

        Contains information about the account holder associated with the `balanceAccount`.

        :param account_holder: The account_holder of this Transaction.
        :type account_holder: ResourceReference
        """
        if account_holder is None:
            raise ValueError("Invalid value for `account_holder`, must not be `None`")

        self._account_holder = account_holder

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        Contains information about the amount of the transaction.

        :return: The amount of this Transaction.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        Contains information about the amount of the transaction.

        :param amount: The amount of this Transaction.
        :type amount: Amount
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def balance_account(self):
        """Gets the balance_account of this Transaction.

        Contains information about the balance account involved in the transaction.

        :return: The balance_account of this Transaction.
        :rtype: ResourceReference
        """
        return self._balance_account

    @balance_account.setter
    def balance_account(self, balance_account):
        """Sets the balance_account of this Transaction.

        Contains information about the balance account involved in the transaction.

        :param balance_account: The balance_account of this Transaction.
        :type balance_account: ResourceReference
        """
        if balance_account is None:
            raise ValueError("Invalid value for `balance_account`, must not be `None`")

        self._balance_account = balance_account

    @property
    def balance_platform(self):
        """Gets the balance_platform of this Transaction.

        The unique identifier of the balance platform.

        :return: The balance_platform of this Transaction.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this Transaction.

        The unique identifier of the balance platform.

        :param balance_platform: The balance_platform of this Transaction.
        :type balance_platform: str
        """
        if balance_platform is None:
            raise ValueError("Invalid value for `balance_platform`, must not be `None`")

        self._balance_platform = balance_platform

    @property
    def booking_date(self):
        """Gets the booking_date of this Transaction.

        The date the transaction was booked into the balance account.

        :return: The booking_date of this Transaction.
        :rtype: datetime
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this Transaction.

        The date the transaction was booked into the balance account.

        :param booking_date: The booking_date of this Transaction.
        :type booking_date: datetime
        """
        if booking_date is None:
            raise ValueError("Invalid value for `booking_date`, must not be `None`")

        self._booking_date = booking_date

    @property
    def creation_date(self):
        """Gets the creation_date of this Transaction.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :return: The creation_date of this Transaction.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Transaction.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :param creation_date: The creation_date of this Transaction.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def id(self):
        """Gets the id of this Transaction.

        The unique identifier of the transaction.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        The unique identifier of the transaction.

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this Transaction.

        The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  

        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        The status of the transaction.   Possible values:  * **pending**: The transaction is still pending.  * **booked**: The transaction has been booked to the balance account.  

        :param status: The status of this Transaction.
        :type status: str
        """
        allowed_values = ["booked", "pending"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transfer(self):
        """Gets the transfer of this Transaction.

        Contains information about the transfer related to the transaction.

        :return: The transfer of this Transaction.
        :rtype: TransferData
        """
        return self._transfer

    @transfer.setter
    def transfer(self, transfer):
        """Sets the transfer of this Transaction.

        Contains information about the transfer related to the transaction.

        :param transfer: The transfer of this Transaction.
        :type transfer: TransferData
        """

        self._transfer = transfer

    @property
    def value_date(self):
        """Gets the value_date of this Transaction.

        The date the transfer amount becomes available in the balance account.

        :return: The value_date of this Transaction.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this Transaction.

        The date the transfer amount becomes available in the balance account.

        :param value_date: The value_date of this Transaction.
        :type value_date: datetime
        """
        if value_date is None:
            raise ValueError("Invalid value for `value_date`, must not be `None`")

        self._value_date = value_date
