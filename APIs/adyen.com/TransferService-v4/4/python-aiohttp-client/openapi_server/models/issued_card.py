# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.relayed_authorisation_data import RelayedAuthorisationData
from openapi_server.models.transfer_notification_validation_fact import TransferNotificationValidationFact
from openapi_server import util


class IssuedCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorisation_type: str=None, pan_entry_mode: str=None, processing_type: str=None, relayed_authorisation_data: RelayedAuthorisationData=None, scheme_trace_id: str=None, scheme_unique_transaction_id: str=None, type: str='issuedCard', validation_facts: List[TransferNotificationValidationFact]=None):
        """IssuedCard - a model defined in OpenAPI

        :param authorisation_type: The authorisation_type of this IssuedCard.
        :param pan_entry_mode: The pan_entry_mode of this IssuedCard.
        :param processing_type: The processing_type of this IssuedCard.
        :param relayed_authorisation_data: The relayed_authorisation_data of this IssuedCard.
        :param scheme_trace_id: The scheme_trace_id of this IssuedCard.
        :param scheme_unique_transaction_id: The scheme_unique_transaction_id of this IssuedCard.
        :param type: The type of this IssuedCard.
        :param validation_facts: The validation_facts of this IssuedCard.
        """
        self.openapi_types = {
            'authorisation_type': str,
            'pan_entry_mode': str,
            'processing_type': str,
            'relayed_authorisation_data': RelayedAuthorisationData,
            'scheme_trace_id': str,
            'scheme_unique_transaction_id': str,
            'type': str,
            'validation_facts': List[TransferNotificationValidationFact]
        }

        self.attribute_map = {
            'authorisation_type': 'authorisationType',
            'pan_entry_mode': 'panEntryMode',
            'processing_type': 'processingType',
            'relayed_authorisation_data': 'relayedAuthorisationData',
            'scheme_trace_id': 'schemeTraceId',
            'scheme_unique_transaction_id': 'schemeUniqueTransactionId',
            'type': 'type',
            'validation_facts': 'validationFacts'
        }

        self._authorisation_type = authorisation_type
        self._pan_entry_mode = pan_entry_mode
        self._processing_type = processing_type
        self._relayed_authorisation_data = relayed_authorisation_data
        self._scheme_trace_id = scheme_trace_id
        self._scheme_unique_transaction_id = scheme_unique_transaction_id
        self._type = type
        self._validation_facts = validation_facts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuedCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuedCard of this IssuedCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorisation_type(self):
        """Gets the authorisation_type of this IssuedCard.

        The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**

        :return: The authorisation_type of this IssuedCard.
        :rtype: str
        """
        return self._authorisation_type

    @authorisation_type.setter
    def authorisation_type(self, authorisation_type):
        """Sets the authorisation_type of this IssuedCard.

        The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**

        :param authorisation_type: The authorisation_type of this IssuedCard.
        :type authorisation_type: str
        """

        self._authorisation_type = authorisation_type

    @property
    def pan_entry_mode(self):
        """Gets the pan_entry_mode of this IssuedCard.

        Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.

        :return: The pan_entry_mode of this IssuedCard.
        :rtype: str
        """
        return self._pan_entry_mode

    @pan_entry_mode.setter
    def pan_entry_mode(self, pan_entry_mode):
        """Sets the pan_entry_mode of this IssuedCard.

        Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.

        :param pan_entry_mode: The pan_entry_mode of this IssuedCard.
        :type pan_entry_mode: str
        """
        allowed_values = ["chip", "cof", "contactless", "ecommerce", "magstripe", "manual", "token"]  # noqa: E501
        if pan_entry_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pan_entry_mode` ({0}), must be one of {1}"
                .format(pan_entry_mode, allowed_values)
            )

        self._pan_entry_mode = pan_entry_mode

    @property
    def processing_type(self):
        """Gets the processing_type of this IssuedCard.

        Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.

        :return: The processing_type of this IssuedCard.
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this IssuedCard.

        Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.

        :param processing_type: The processing_type of this IssuedCard.
        :type processing_type: str
        """
        allowed_values = ["atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "purchaseWithCashback", "recurring", "token"]  # noqa: E501
        if processing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_type` ({0}), must be one of {1}"
                .format(processing_type, allowed_values)
            )

        self._processing_type = processing_type

    @property
    def relayed_authorisation_data(self):
        """Gets the relayed_authorisation_data of this IssuedCard.

        If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.

        :return: The relayed_authorisation_data of this IssuedCard.
        :rtype: RelayedAuthorisationData
        """
        return self._relayed_authorisation_data

    @relayed_authorisation_data.setter
    def relayed_authorisation_data(self, relayed_authorisation_data):
        """Sets the relayed_authorisation_data of this IssuedCard.

        If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.

        :param relayed_authorisation_data: The relayed_authorisation_data of this IssuedCard.
        :type relayed_authorisation_data: RelayedAuthorisationData
        """

        self._relayed_authorisation_data = relayed_authorisation_data

    @property
    def scheme_trace_id(self):
        """Gets the scheme_trace_id of this IssuedCard.

        The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.

        :return: The scheme_trace_id of this IssuedCard.
        :rtype: str
        """
        return self._scheme_trace_id

    @scheme_trace_id.setter
    def scheme_trace_id(self, scheme_trace_id):
        """Sets the scheme_trace_id of this IssuedCard.

        The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.

        :param scheme_trace_id: The scheme_trace_id of this IssuedCard.
        :type scheme_trace_id: str
        """

        self._scheme_trace_id = scheme_trace_id

    @property
    def scheme_unique_transaction_id(self):
        """Gets the scheme_unique_transaction_id of this IssuedCard.

        The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.

        :return: The scheme_unique_transaction_id of this IssuedCard.
        :rtype: str
        """
        return self._scheme_unique_transaction_id

    @scheme_unique_transaction_id.setter
    def scheme_unique_transaction_id(self, scheme_unique_transaction_id):
        """Sets the scheme_unique_transaction_id of this IssuedCard.

        The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.

        :param scheme_unique_transaction_id: The scheme_unique_transaction_id of this IssuedCard.
        :type scheme_unique_transaction_id: str
        """

        self._scheme_unique_transaction_id = scheme_unique_transaction_id

    @property
    def type(self):
        """Gets the type of this IssuedCard.

        **issuedCard**

        :return: The type of this IssuedCard.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IssuedCard.

        **issuedCard**

        :param type: The type of this IssuedCard.
        :type type: str
        """
        allowed_values = ["issuedCard"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def validation_facts(self):
        """Gets the validation_facts of this IssuedCard.

        The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.

        :return: The validation_facts of this IssuedCard.
        :rtype: List[TransferNotificationValidationFact]
        """
        return self._validation_facts

    @validation_facts.setter
    def validation_facts(self, validation_facts):
        """Sets the validation_facts of this IssuedCard.

        The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.

        :param validation_facts: The validation_facts of this IssuedCard.
        :type validation_facts: List[TransferNotificationValidationFact]
        """

        self._validation_facts = validation_facts
