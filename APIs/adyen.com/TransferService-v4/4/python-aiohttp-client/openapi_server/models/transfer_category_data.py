# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_category_data import BankCategoryData
from openapi_server.models.internal_category_data import InternalCategoryData
from openapi_server.models.issued_card import IssuedCard
from openapi_server.models.platform_payment import PlatformPayment
from openapi_server.models.relayed_authorisation_data import RelayedAuthorisationData
from openapi_server.models.transfer_notification_validation_fact import TransferNotificationValidationFact
from openapi_server import util


class TransferCategoryData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, priority: str=None, type: str='bank', modification_merchant_reference: str=None, modification_psp_reference: str=None, authorisation_type: str=None, pan_entry_mode: str=None, processing_type: str=None, relayed_authorisation_data: RelayedAuthorisationData=None, scheme_trace_id: str=None, scheme_unique_transaction_id: str=None, validation_facts: List[TransferNotificationValidationFact]=None, payment_merchant_reference: str=None, platform_payment_type: str=None, psp_payment_reference: str=None):
        """TransferCategoryData - a model defined in OpenAPI

        :param priority: The priority of this TransferCategoryData.
        :param type: The type of this TransferCategoryData.
        :param modification_merchant_reference: The modification_merchant_reference of this TransferCategoryData.
        :param modification_psp_reference: The modification_psp_reference of this TransferCategoryData.
        :param authorisation_type: The authorisation_type of this TransferCategoryData.
        :param pan_entry_mode: The pan_entry_mode of this TransferCategoryData.
        :param processing_type: The processing_type of this TransferCategoryData.
        :param relayed_authorisation_data: The relayed_authorisation_data of this TransferCategoryData.
        :param scheme_trace_id: The scheme_trace_id of this TransferCategoryData.
        :param scheme_unique_transaction_id: The scheme_unique_transaction_id of this TransferCategoryData.
        :param validation_facts: The validation_facts of this TransferCategoryData.
        :param payment_merchant_reference: The payment_merchant_reference of this TransferCategoryData.
        :param platform_payment_type: The platform_payment_type of this TransferCategoryData.
        :param psp_payment_reference: The psp_payment_reference of this TransferCategoryData.
        """
        self.openapi_types = {
            'priority': str,
            'type': str,
            'modification_merchant_reference': str,
            'modification_psp_reference': str,
            'authorisation_type': str,
            'pan_entry_mode': str,
            'processing_type': str,
            'relayed_authorisation_data': RelayedAuthorisationData,
            'scheme_trace_id': str,
            'scheme_unique_transaction_id': str,
            'validation_facts': List[TransferNotificationValidationFact],
            'payment_merchant_reference': str,
            'platform_payment_type': str,
            'psp_payment_reference': str
        }

        self.attribute_map = {
            'priority': 'priority',
            'type': 'type',
            'modification_merchant_reference': 'modificationMerchantReference',
            'modification_psp_reference': 'modificationPspReference',
            'authorisation_type': 'authorisationType',
            'pan_entry_mode': 'panEntryMode',
            'processing_type': 'processingType',
            'relayed_authorisation_data': 'relayedAuthorisationData',
            'scheme_trace_id': 'schemeTraceId',
            'scheme_unique_transaction_id': 'schemeUniqueTransactionId',
            'validation_facts': 'validationFacts',
            'payment_merchant_reference': 'paymentMerchantReference',
            'platform_payment_type': 'platformPaymentType',
            'psp_payment_reference': 'pspPaymentReference'
        }

        self._priority = priority
        self._type = type
        self._modification_merchant_reference = modification_merchant_reference
        self._modification_psp_reference = modification_psp_reference
        self._authorisation_type = authorisation_type
        self._pan_entry_mode = pan_entry_mode
        self._processing_type = processing_type
        self._relayed_authorisation_data = relayed_authorisation_data
        self._scheme_trace_id = scheme_trace_id
        self._scheme_unique_transaction_id = scheme_unique_transaction_id
        self._validation_facts = validation_facts
        self._payment_merchant_reference = payment_merchant_reference
        self._platform_payment_type = platform_payment_type
        self._psp_payment_reference = psp_payment_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransferCategoryData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transfer_categoryData of this TransferCategoryData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def priority(self):
        """Gets the priority of this TransferCategoryData.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :return: The priority of this TransferCategoryData.
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this TransferCategoryData.

        The priority for the bank transfer. This sets the speed at which the transfer is sent and the fees that you have to pay. Required for transfers with `category` **bank**.  Possible values:  * **regular**: For normal, low-value transactions.  * **fast**: Faster way to transfer funds but has higher fees. Recommended for high-priority, low-value transactions.  * **wire**: Fastest way to transfer funds but has the highest fees. Recommended for high-priority, high-value transactions.  * **instant**: Instant way to transfer funds in [SEPA countries](https://www.ecb.europa.eu/paym/integration/retail/sepa/html/index.en.html).  * **crossBorder**: High-value transfer to a recipient in a different country.  * **internal**: Transfer to an Adyen-issued business bank account (by bank account number/IBAN).

        :param priority: The priority of this TransferCategoryData.
        :type priority: str
        """
        allowed_values = ["crossBorder", "fast", "instant", "internal", "regular", "wire"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def type(self):
        """Gets the type of this TransferCategoryData.

        **bank**

        :return: The type of this TransferCategoryData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransferCategoryData.

        **bank**

        :param type: The type of this TransferCategoryData.
        :type type: str
        """
        allowed_values = ["bank", "internal", "issuedCard", "platformPayment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def modification_merchant_reference(self):
        """Gets the modification_merchant_reference of this TransferCategoryData.

        The capture's merchant reference included in the transfer.

        :return: The modification_merchant_reference of this TransferCategoryData.
        :rtype: str
        """
        return self._modification_merchant_reference

    @modification_merchant_reference.setter
    def modification_merchant_reference(self, modification_merchant_reference):
        """Sets the modification_merchant_reference of this TransferCategoryData.

        The capture's merchant reference included in the transfer.

        :param modification_merchant_reference: The modification_merchant_reference of this TransferCategoryData.
        :type modification_merchant_reference: str
        """

        self._modification_merchant_reference = modification_merchant_reference

    @property
    def modification_psp_reference(self):
        """Gets the modification_psp_reference of this TransferCategoryData.

        The capture reference included in the transfer.

        :return: The modification_psp_reference of this TransferCategoryData.
        :rtype: str
        """
        return self._modification_psp_reference

    @modification_psp_reference.setter
    def modification_psp_reference(self, modification_psp_reference):
        """Sets the modification_psp_reference of this TransferCategoryData.

        The capture reference included in the transfer.

        :param modification_psp_reference: The modification_psp_reference of this TransferCategoryData.
        :type modification_psp_reference: str
        """

        self._modification_psp_reference = modification_psp_reference

    @property
    def authorisation_type(self):
        """Gets the authorisation_type of this TransferCategoryData.

        The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**

        :return: The authorisation_type of this TransferCategoryData.
        :rtype: str
        """
        return self._authorisation_type

    @authorisation_type.setter
    def authorisation_type(self, authorisation_type):
        """Sets the authorisation_type of this TransferCategoryData.

        The authorisation type. For example, **defaultAuthorisation**, **preAuthorisation**, **finalAuthorisation**

        :param authorisation_type: The authorisation_type of this TransferCategoryData.
        :type authorisation_type: str
        """

        self._authorisation_type = authorisation_type

    @property
    def pan_entry_mode(self):
        """Gets the pan_entry_mode of this TransferCategoryData.

        Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.

        :return: The pan_entry_mode of this TransferCategoryData.
        :rtype: str
        """
        return self._pan_entry_mode

    @pan_entry_mode.setter
    def pan_entry_mode(self, pan_entry_mode):
        """Sets the pan_entry_mode of this TransferCategoryData.

        Indicates the method used for entering the PAN to initiate a transaction.  Possible values: **manual**, **chip**, **magstripe**, **contactless**, **cof**, **ecommerce**, **token**.

        :param pan_entry_mode: The pan_entry_mode of this TransferCategoryData.
        :type pan_entry_mode: str
        """
        allowed_values = ["chip", "cof", "contactless", "ecommerce", "magstripe", "manual", "token"]  # noqa: E501
        if pan_entry_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `pan_entry_mode` ({0}), must be one of {1}"
                .format(pan_entry_mode, allowed_values)
            )

        self._pan_entry_mode = pan_entry_mode

    @property
    def processing_type(self):
        """Gets the processing_type of this TransferCategoryData.

        Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.

        :return: The processing_type of this TransferCategoryData.
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this TransferCategoryData.

        Contains information about how the payment was processed. For example, **ecommerce** for online or **pos** for in-person payments.

        :param processing_type: The processing_type of this TransferCategoryData.
        :type processing_type: str
        """
        allowed_values = ["atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "purchaseWithCashback", "recurring", "token"]  # noqa: E501
        if processing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_type` ({0}), must be one of {1}"
                .format(processing_type, allowed_values)
            )

        self._processing_type = processing_type

    @property
    def relayed_authorisation_data(self):
        """Gets the relayed_authorisation_data of this TransferCategoryData.

        If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.

        :return: The relayed_authorisation_data of this TransferCategoryData.
        :rtype: RelayedAuthorisationData
        """
        return self._relayed_authorisation_data

    @relayed_authorisation_data.setter
    def relayed_authorisation_data(self, relayed_authorisation_data):
        """Sets the relayed_authorisation_data of this TransferCategoryData.

        If you are using relayed authorisation, this object contains information from the relayed authorisation response from your server.

        :param relayed_authorisation_data: The relayed_authorisation_data of this TransferCategoryData.
        :type relayed_authorisation_data: RelayedAuthorisationData
        """

        self._relayed_authorisation_data = relayed_authorisation_data

    @property
    def scheme_trace_id(self):
        """Gets the scheme_trace_id of this TransferCategoryData.

        The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.

        :return: The scheme_trace_id of this TransferCategoryData.
        :rtype: str
        """
        return self._scheme_trace_id

    @scheme_trace_id.setter
    def scheme_trace_id(self, scheme_trace_id):
        """Sets the scheme_trace_id of this TransferCategoryData.

        The identifier of the original payment provided by the scheme. The Id could be alphanumeric or numeric depending on the scheme. The schemeTraceID should be referring to an original schemeUniqueTransactionID provided in an earlier payment (not necessarily processed by Adyen). Instances of available schemeTraceId is authAdjustment or recurring payments.

        :param scheme_trace_id: The scheme_trace_id of this TransferCategoryData.
        :type scheme_trace_id: str
        """

        self._scheme_trace_id = scheme_trace_id

    @property
    def scheme_unique_transaction_id(self):
        """Gets the scheme_unique_transaction_id of this TransferCategoryData.

        The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.

        :return: The scheme_unique_transaction_id of this TransferCategoryData.
        :rtype: str
        """
        return self._scheme_unique_transaction_id

    @scheme_unique_transaction_id.setter
    def scheme_unique_transaction_id(self, scheme_unique_transaction_id):
        """Sets the scheme_unique_transaction_id of this TransferCategoryData.

        The unique identifier created by the scheme. The ID could be alphanumeric or numeric depending on the scheme.

        :param scheme_unique_transaction_id: The scheme_unique_transaction_id of this TransferCategoryData.
        :type scheme_unique_transaction_id: str
        """

        self._scheme_unique_transaction_id = scheme_unique_transaction_id

    @property
    def validation_facts(self):
        """Gets the validation_facts of this TransferCategoryData.

        The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.

        :return: The validation_facts of this TransferCategoryData.
        :rtype: List[TransferNotificationValidationFact]
        """
        return self._validation_facts

    @validation_facts.setter
    def validation_facts(self, validation_facts):
        """Sets the validation_facts of this TransferCategoryData.

        The evaluation of the validation facts. See [validation checks](https://docs.adyen.com/issuing/validation-checks) for more information.

        :param validation_facts: The validation_facts of this TransferCategoryData.
        :type validation_facts: List[TransferNotificationValidationFact]
        """

        self._validation_facts = validation_facts

    @property
    def payment_merchant_reference(self):
        """Gets the payment_merchant_reference of this TransferCategoryData.

        The payment's merchant reference included in the transfer.

        :return: The payment_merchant_reference of this TransferCategoryData.
        :rtype: str
        """
        return self._payment_merchant_reference

    @payment_merchant_reference.setter
    def payment_merchant_reference(self, payment_merchant_reference):
        """Sets the payment_merchant_reference of this TransferCategoryData.

        The payment's merchant reference included in the transfer.

        :param payment_merchant_reference: The payment_merchant_reference of this TransferCategoryData.
        :type payment_merchant_reference: str
        """

        self._payment_merchant_reference = payment_merchant_reference

    @property
    def platform_payment_type(self):
        """Gets the platform_payment_type of this TransferCategoryData.

        The type of the related split.

        :return: The platform_payment_type of this TransferCategoryData.
        :rtype: str
        """
        return self._platform_payment_type

    @platform_payment_type.setter
    def platform_payment_type(self, platform_payment_type):
        """Sets the platform_payment_type of this TransferCategoryData.

        The type of the related split.

        :param platform_payment_type: The platform_payment_type of this TransferCategoryData.
        :type platform_payment_type: str
        """
        allowed_values = ["AcquiringFees", "AdyenCommission", "AdyenFees", "AdyenMarkup", "BalanceAccount", "Commission", "Default", "Interchange", "PaymentFee", "Remainder", "SchemeFee", "TopUp", "VAT"]  # noqa: E501
        if platform_payment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `platform_payment_type` ({0}), must be one of {1}"
                .format(platform_payment_type, allowed_values)
            )

        self._platform_payment_type = platform_payment_type

    @property
    def psp_payment_reference(self):
        """Gets the psp_payment_reference of this TransferCategoryData.

        The payment reference included in the transfer.

        :return: The psp_payment_reference of this TransferCategoryData.
        :rtype: str
        """
        return self._psp_payment_reference

    @psp_payment_reference.setter
    def psp_payment_reference(self, psp_payment_reference):
        """Sets the psp_payment_reference of this TransferCategoryData.

        The payment reference included in the transfer.

        :param psp_payment_reference: The psp_payment_reference of this TransferCategoryData.
        :type psp_payment_reference: str
        """

        self._psp_payment_reference = psp_payment_reference
