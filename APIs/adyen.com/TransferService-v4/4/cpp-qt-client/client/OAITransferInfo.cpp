/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransferInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransferInfo::OAITransferInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransferInfo::OAITransferInfo() {
    this->initializeModel();
}

OAITransferInfo::~OAITransferInfo() {}

void OAITransferInfo::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_account_id_isSet = false;
    m_balance_account_id_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_counterparty_isSet = false;
    m_counterparty_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_payment_instrument_id_isSet = false;
    m_payment_instrument_id_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_reference_isSet = false;
    m_reference_isValid = false;

    m_reference_for_beneficiary_isSet = false;
    m_reference_for_beneficiary_isValid = false;

    m_ultimate_party_isSet = false;
    m_ultimate_party_isValid = false;
}

void OAITransferInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransferInfo::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_account_id_isValid = ::OpenAPI::fromJsonValue(m_balance_account_id, json[QString("balanceAccountId")]);
    m_balance_account_id_isSet = !json[QString("balanceAccountId")].isNull() && m_balance_account_id_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_counterparty_isValid = ::OpenAPI::fromJsonValue(m_counterparty, json[QString("counterparty")]);
    m_counterparty_isSet = !json[QString("counterparty")].isNull() && m_counterparty_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_payment_instrument_id_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_id, json[QString("paymentInstrumentId")]);
    m_payment_instrument_id_isSet = !json[QString("paymentInstrumentId")].isNull() && m_payment_instrument_id_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_reference_isValid = ::OpenAPI::fromJsonValue(m_reference, json[QString("reference")]);
    m_reference_isSet = !json[QString("reference")].isNull() && m_reference_isValid;

    m_reference_for_beneficiary_isValid = ::OpenAPI::fromJsonValue(m_reference_for_beneficiary, json[QString("referenceForBeneficiary")]);
    m_reference_for_beneficiary_isSet = !json[QString("referenceForBeneficiary")].isNull() && m_reference_for_beneficiary_isValid;

    m_ultimate_party_isValid = ::OpenAPI::fromJsonValue(m_ultimate_party, json[QString("ultimateParty")]);
    m_ultimate_party_isSet = !json[QString("ultimateParty")].isNull() && m_ultimate_party_isValid;
}

QString OAITransferInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransferInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_account_id_isSet) {
        obj.insert(QString("balanceAccountId"), ::OpenAPI::toJsonValue(m_balance_account_id));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_counterparty.isSet()) {
        obj.insert(QString("counterparty"), ::OpenAPI::toJsonValue(m_counterparty));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_payment_instrument_id_isSet) {
        obj.insert(QString("paymentInstrumentId"), ::OpenAPI::toJsonValue(m_payment_instrument_id));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_reference_isSet) {
        obj.insert(QString("reference"), ::OpenAPI::toJsonValue(m_reference));
    }
    if (m_reference_for_beneficiary_isSet) {
        obj.insert(QString("referenceForBeneficiary"), ::OpenAPI::toJsonValue(m_reference_for_beneficiary));
    }
    if (m_ultimate_party.isSet()) {
        obj.insert(QString("ultimateParty"), ::OpenAPI::toJsonValue(m_ultimate_party));
    }
    return obj;
}

OAIAmount OAITransferInfo::getAmount() const {
    return m_amount;
}
void OAITransferInfo::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransferInfo::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransferInfo::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAITransferInfo::getBalanceAccountId() const {
    return m_balance_account_id;
}
void OAITransferInfo::setBalanceAccountId(const QString &balance_account_id) {
    m_balance_account_id = balance_account_id;
    m_balance_account_id_isSet = true;
}

bool OAITransferInfo::is_balance_account_id_Set() const{
    return m_balance_account_id_isSet;
}

bool OAITransferInfo::is_balance_account_id_Valid() const{
    return m_balance_account_id_isValid;
}

QString OAITransferInfo::getCategory() const {
    return m_category;
}
void OAITransferInfo::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAITransferInfo::is_category_Set() const{
    return m_category_isSet;
}

bool OAITransferInfo::is_category_Valid() const{
    return m_category_isValid;
}

OAICounterpartyInfoV3 OAITransferInfo::getCounterparty() const {
    return m_counterparty;
}
void OAITransferInfo::setCounterparty(const OAICounterpartyInfoV3 &counterparty) {
    m_counterparty = counterparty;
    m_counterparty_isSet = true;
}

bool OAITransferInfo::is_counterparty_Set() const{
    return m_counterparty_isSet;
}

bool OAITransferInfo::is_counterparty_Valid() const{
    return m_counterparty_isValid;
}

QString OAITransferInfo::getDescription() const {
    return m_description;
}
void OAITransferInfo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransferInfo::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransferInfo::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITransferInfo::getPaymentInstrumentId() const {
    return m_payment_instrument_id;
}
void OAITransferInfo::setPaymentInstrumentId(const QString &payment_instrument_id) {
    m_payment_instrument_id = payment_instrument_id;
    m_payment_instrument_id_isSet = true;
}

bool OAITransferInfo::is_payment_instrument_id_Set() const{
    return m_payment_instrument_id_isSet;
}

bool OAITransferInfo::is_payment_instrument_id_Valid() const{
    return m_payment_instrument_id_isValid;
}

QString OAITransferInfo::getPriority() const {
    return m_priority;
}
void OAITransferInfo::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITransferInfo::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITransferInfo::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAITransferInfo::getReference() const {
    return m_reference;
}
void OAITransferInfo::setReference(const QString &reference) {
    m_reference = reference;
    m_reference_isSet = true;
}

bool OAITransferInfo::is_reference_Set() const{
    return m_reference_isSet;
}

bool OAITransferInfo::is_reference_Valid() const{
    return m_reference_isValid;
}

QString OAITransferInfo::getReferenceForBeneficiary() const {
    return m_reference_for_beneficiary;
}
void OAITransferInfo::setReferenceForBeneficiary(const QString &reference_for_beneficiary) {
    m_reference_for_beneficiary = reference_for_beneficiary;
    m_reference_for_beneficiary_isSet = true;
}

bool OAITransferInfo::is_reference_for_beneficiary_Set() const{
    return m_reference_for_beneficiary_isSet;
}

bool OAITransferInfo::is_reference_for_beneficiary_Valid() const{
    return m_reference_for_beneficiary_isValid;
}

OAIUltimatePartyIdentification OAITransferInfo::getUltimateParty() const {
    return m_ultimate_party;
}
void OAITransferInfo::setUltimateParty(const OAIUltimatePartyIdentification &ultimate_party) {
    m_ultimate_party = ultimate_party;
    m_ultimate_party_isSet = true;
}

bool OAITransferInfo::is_ultimate_party_Set() const{
    return m_ultimate_party_isSet;
}

bool OAITransferInfo::is_ultimate_party_Valid() const{
    return m_ultimate_party_isValid;
}

bool OAITransferInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counterparty.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_for_beneficiary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ultimate_party.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransferInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && m_category_isValid && m_counterparty_isValid && true;
}

} // namespace OpenAPI
