/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction::OAITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction::OAITransaction() {
    this->initializeModel();
}

OAITransaction::~OAITransaction() {}

void OAITransaction::initializeModel() {

    m_account_holder_isSet = false;
    m_account_holder_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_balance_account_isSet = false;
    m_balance_account_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_booking_date_isSet = false;
    m_booking_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_transfer_isSet = false;
    m_transfer_isValid = false;

    m_value_date_isSet = false;
    m_value_date_isValid = false;
}

void OAITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction::fromJsonObject(QJsonObject json) {

    m_account_holder_isValid = ::OpenAPI::fromJsonValue(m_account_holder, json[QString("accountHolder")]);
    m_account_holder_isSet = !json[QString("accountHolder")].isNull() && m_account_holder_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_balance_account_isValid = ::OpenAPI::fromJsonValue(m_balance_account, json[QString("balanceAccount")]);
    m_balance_account_isSet = !json[QString("balanceAccount")].isNull() && m_balance_account_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_booking_date_isValid = ::OpenAPI::fromJsonValue(m_booking_date, json[QString("bookingDate")]);
    m_booking_date_isSet = !json[QString("bookingDate")].isNull() && m_booking_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creationDate")]);
    m_creation_date_isSet = !json[QString("creationDate")].isNull() && m_creation_date_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_transfer_isValid = ::OpenAPI::fromJsonValue(m_transfer, json[QString("transfer")]);
    m_transfer_isSet = !json[QString("transfer")].isNull() && m_transfer_isValid;

    m_value_date_isValid = ::OpenAPI::fromJsonValue(m_value_date, json[QString("valueDate")]);
    m_value_date_isSet = !json[QString("valueDate")].isNull() && m_value_date_isValid;
}

QString OAITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder.isSet()) {
        obj.insert(QString("accountHolder"), ::OpenAPI::toJsonValue(m_account_holder));
    }
    if (m_amount.isSet()) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_balance_account.isSet()) {
        obj.insert(QString("balanceAccount"), ::OpenAPI::toJsonValue(m_balance_account));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_booking_date_isSet) {
        obj.insert(QString("bookingDate"), ::OpenAPI::toJsonValue(m_booking_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creationDate"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_transfer.isSet()) {
        obj.insert(QString("transfer"), ::OpenAPI::toJsonValue(m_transfer));
    }
    if (m_value_date_isSet) {
        obj.insert(QString("valueDate"), ::OpenAPI::toJsonValue(m_value_date));
    }
    return obj;
}

OAIResourceReference OAITransaction::getAccountHolder() const {
    return m_account_holder;
}
void OAITransaction::setAccountHolder(const OAIResourceReference &account_holder) {
    m_account_holder = account_holder;
    m_account_holder_isSet = true;
}

bool OAITransaction::is_account_holder_Set() const{
    return m_account_holder_isSet;
}

bool OAITransaction::is_account_holder_Valid() const{
    return m_account_holder_isValid;
}

OAIAmount OAITransaction::getAmount() const {
    return m_amount;
}
void OAITransaction::setAmount(const OAIAmount &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction::is_amount_Valid() const{
    return m_amount_isValid;
}

OAIResourceReference OAITransaction::getBalanceAccount() const {
    return m_balance_account;
}
void OAITransaction::setBalanceAccount(const OAIResourceReference &balance_account) {
    m_balance_account = balance_account;
    m_balance_account_isSet = true;
}

bool OAITransaction::is_balance_account_Set() const{
    return m_balance_account_isSet;
}

bool OAITransaction::is_balance_account_Valid() const{
    return m_balance_account_isValid;
}

QString OAITransaction::getBalancePlatform() const {
    return m_balance_platform;
}
void OAITransaction::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAITransaction::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAITransaction::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

QDateTime OAITransaction::getBookingDate() const {
    return m_booking_date;
}
void OAITransaction::setBookingDate(const QDateTime &booking_date) {
    m_booking_date = booking_date;
    m_booking_date_isSet = true;
}

bool OAITransaction::is_booking_date_Set() const{
    return m_booking_date_isSet;
}

bool OAITransaction::is_booking_date_Valid() const{
    return m_booking_date_isValid;
}

QDateTime OAITransaction::getCreationDate() const {
    return m_creation_date;
}
void OAITransaction::setCreationDate(const QDateTime &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITransaction::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITransaction::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITransaction::getId() const {
    return m_id;
}
void OAITransaction::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITransaction::getStatus() const {
    return m_status;
}
void OAITransaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITransaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAITransaction::is_status_Valid() const{
    return m_status_isValid;
}

OAITransferData OAITransaction::getTransfer() const {
    return m_transfer;
}
void OAITransaction::setTransfer(const OAITransferData &transfer) {
    m_transfer = transfer;
    m_transfer_isSet = true;
}

bool OAITransaction::is_transfer_Set() const{
    return m_transfer_isSet;
}

bool OAITransaction::is_transfer_Valid() const{
    return m_transfer_isValid;
}

QDateTime OAITransaction::getValueDate() const {
    return m_value_date;
}
void OAITransaction::setValueDate(const QDateTime &value_date) {
    m_value_date = value_date;
    m_value_date_isSet = true;
}

bool OAITransaction::is_value_date_Set() const{
    return m_value_date_isSet;
}

bool OAITransaction::is_value_date_Valid() const{
    return m_value_date_isValid;
}

bool OAITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_booking_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transfer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_isValid && m_amount_isValid && m_balance_account_isValid && m_balance_platform_isValid && m_booking_date_isValid && m_id_isValid && m_status_isValid && m_value_date_isValid && true;
}

} // namespace OpenAPI
