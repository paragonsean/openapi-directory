/**
 * Transfers API
 * >Versions 1 and 2 of the Transfers API are deprecated. If you are just starting your implementation, use the latest version.  This API provides endpoints that you can use to transfer funds, whether when [paying out to a transfer instrument](https://docs.adyen.com/marketplaces-and-platforms/payout-to-users/on-demand-payouts), [sending funds to third parties](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/send-receive-funds) for users with business bank accounts, or to [request a payout for a grant offer](https://docs.adyen.com/marketplaces-and-platforms/capital). The API also supports use cases for [getting transactions for business bank accounts](https://docs.adyen.com/marketplaces-and-platforms/business-accounts/transactions-api) and getting [grants and its outstanding balances](https://docs.adyen.com/marketplaces-and-platforms/capital#get-balances). .  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Transfers API, you need an additional role for your API credential. Transfers must also be enabled for the source balance account. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Transfers API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v4/transfers ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v4`.  
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIssuedCard.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIssuedCard::OAIIssuedCard(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIssuedCard::OAIIssuedCard() {
    this->initializeModel();
}

OAIIssuedCard::~OAIIssuedCard() {}

void OAIIssuedCard::initializeModel() {

    m_authorisation_type_isSet = false;
    m_authorisation_type_isValid = false;

    m_pan_entry_mode_isSet = false;
    m_pan_entry_mode_isValid = false;

    m_processing_type_isSet = false;
    m_processing_type_isValid = false;

    m_relayed_authorisation_data_isSet = false;
    m_relayed_authorisation_data_isValid = false;

    m_scheme_trace_id_isSet = false;
    m_scheme_trace_id_isValid = false;

    m_scheme_unique_transaction_id_isSet = false;
    m_scheme_unique_transaction_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_validation_facts_isSet = false;
    m_validation_facts_isValid = false;
}

void OAIIssuedCard::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIssuedCard::fromJsonObject(QJsonObject json) {

    m_authorisation_type_isValid = ::OpenAPI::fromJsonValue(m_authorisation_type, json[QString("authorisationType")]);
    m_authorisation_type_isSet = !json[QString("authorisationType")].isNull() && m_authorisation_type_isValid;

    m_pan_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_pan_entry_mode, json[QString("panEntryMode")]);
    m_pan_entry_mode_isSet = !json[QString("panEntryMode")].isNull() && m_pan_entry_mode_isValid;

    m_processing_type_isValid = ::OpenAPI::fromJsonValue(m_processing_type, json[QString("processingType")]);
    m_processing_type_isSet = !json[QString("processingType")].isNull() && m_processing_type_isValid;

    m_relayed_authorisation_data_isValid = ::OpenAPI::fromJsonValue(m_relayed_authorisation_data, json[QString("relayedAuthorisationData")]);
    m_relayed_authorisation_data_isSet = !json[QString("relayedAuthorisationData")].isNull() && m_relayed_authorisation_data_isValid;

    m_scheme_trace_id_isValid = ::OpenAPI::fromJsonValue(m_scheme_trace_id, json[QString("schemeTraceId")]);
    m_scheme_trace_id_isSet = !json[QString("schemeTraceId")].isNull() && m_scheme_trace_id_isValid;

    m_scheme_unique_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_scheme_unique_transaction_id, json[QString("schemeUniqueTransactionId")]);
    m_scheme_unique_transaction_id_isSet = !json[QString("schemeUniqueTransactionId")].isNull() && m_scheme_unique_transaction_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_validation_facts_isValid = ::OpenAPI::fromJsonValue(m_validation_facts, json[QString("validationFacts")]);
    m_validation_facts_isSet = !json[QString("validationFacts")].isNull() && m_validation_facts_isValid;
}

QString OAIIssuedCard::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIssuedCard::asJsonObject() const {
    QJsonObject obj;
    if (m_authorisation_type_isSet) {
        obj.insert(QString("authorisationType"), ::OpenAPI::toJsonValue(m_authorisation_type));
    }
    if (m_pan_entry_mode_isSet) {
        obj.insert(QString("panEntryMode"), ::OpenAPI::toJsonValue(m_pan_entry_mode));
    }
    if (m_processing_type_isSet) {
        obj.insert(QString("processingType"), ::OpenAPI::toJsonValue(m_processing_type));
    }
    if (m_relayed_authorisation_data.isSet()) {
        obj.insert(QString("relayedAuthorisationData"), ::OpenAPI::toJsonValue(m_relayed_authorisation_data));
    }
    if (m_scheme_trace_id_isSet) {
        obj.insert(QString("schemeTraceId"), ::OpenAPI::toJsonValue(m_scheme_trace_id));
    }
    if (m_scheme_unique_transaction_id_isSet) {
        obj.insert(QString("schemeUniqueTransactionId"), ::OpenAPI::toJsonValue(m_scheme_unique_transaction_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_validation_facts.size() > 0) {
        obj.insert(QString("validationFacts"), ::OpenAPI::toJsonValue(m_validation_facts));
    }
    return obj;
}

QString OAIIssuedCard::getAuthorisationType() const {
    return m_authorisation_type;
}
void OAIIssuedCard::setAuthorisationType(const QString &authorisation_type) {
    m_authorisation_type = authorisation_type;
    m_authorisation_type_isSet = true;
}

bool OAIIssuedCard::is_authorisation_type_Set() const{
    return m_authorisation_type_isSet;
}

bool OAIIssuedCard::is_authorisation_type_Valid() const{
    return m_authorisation_type_isValid;
}

QString OAIIssuedCard::getPanEntryMode() const {
    return m_pan_entry_mode;
}
void OAIIssuedCard::setPanEntryMode(const QString &pan_entry_mode) {
    m_pan_entry_mode = pan_entry_mode;
    m_pan_entry_mode_isSet = true;
}

bool OAIIssuedCard::is_pan_entry_mode_Set() const{
    return m_pan_entry_mode_isSet;
}

bool OAIIssuedCard::is_pan_entry_mode_Valid() const{
    return m_pan_entry_mode_isValid;
}

QString OAIIssuedCard::getProcessingType() const {
    return m_processing_type;
}
void OAIIssuedCard::setProcessingType(const QString &processing_type) {
    m_processing_type = processing_type;
    m_processing_type_isSet = true;
}

bool OAIIssuedCard::is_processing_type_Set() const{
    return m_processing_type_isSet;
}

bool OAIIssuedCard::is_processing_type_Valid() const{
    return m_processing_type_isValid;
}

OAIRelayedAuthorisationData OAIIssuedCard::getRelayedAuthorisationData() const {
    return m_relayed_authorisation_data;
}
void OAIIssuedCard::setRelayedAuthorisationData(const OAIRelayedAuthorisationData &relayed_authorisation_data) {
    m_relayed_authorisation_data = relayed_authorisation_data;
    m_relayed_authorisation_data_isSet = true;
}

bool OAIIssuedCard::is_relayed_authorisation_data_Set() const{
    return m_relayed_authorisation_data_isSet;
}

bool OAIIssuedCard::is_relayed_authorisation_data_Valid() const{
    return m_relayed_authorisation_data_isValid;
}

QString OAIIssuedCard::getSchemeTraceId() const {
    return m_scheme_trace_id;
}
void OAIIssuedCard::setSchemeTraceId(const QString &scheme_trace_id) {
    m_scheme_trace_id = scheme_trace_id;
    m_scheme_trace_id_isSet = true;
}

bool OAIIssuedCard::is_scheme_trace_id_Set() const{
    return m_scheme_trace_id_isSet;
}

bool OAIIssuedCard::is_scheme_trace_id_Valid() const{
    return m_scheme_trace_id_isValid;
}

QString OAIIssuedCard::getSchemeUniqueTransactionId() const {
    return m_scheme_unique_transaction_id;
}
void OAIIssuedCard::setSchemeUniqueTransactionId(const QString &scheme_unique_transaction_id) {
    m_scheme_unique_transaction_id = scheme_unique_transaction_id;
    m_scheme_unique_transaction_id_isSet = true;
}

bool OAIIssuedCard::is_scheme_unique_transaction_id_Set() const{
    return m_scheme_unique_transaction_id_isSet;
}

bool OAIIssuedCard::is_scheme_unique_transaction_id_Valid() const{
    return m_scheme_unique_transaction_id_isValid;
}

QString OAIIssuedCard::getType() const {
    return m_type;
}
void OAIIssuedCard::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIIssuedCard::is_type_Set() const{
    return m_type_isSet;
}

bool OAIIssuedCard::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAITransferNotificationValidationFact> OAIIssuedCard::getValidationFacts() const {
    return m_validation_facts;
}
void OAIIssuedCard::setValidationFacts(const QList<OAITransferNotificationValidationFact> &validation_facts) {
    m_validation_facts = validation_facts;
    m_validation_facts_isSet = true;
}

bool OAIIssuedCard::is_validation_facts_Set() const{
    return m_validation_facts_isSet;
}

bool OAIIssuedCard::is_validation_facts_Valid() const{
    return m_validation_facts_isValid;
}

bool OAIIssuedCard::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorisation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_entry_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relayed_authorisation_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_trace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_unique_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_facts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIssuedCard::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
