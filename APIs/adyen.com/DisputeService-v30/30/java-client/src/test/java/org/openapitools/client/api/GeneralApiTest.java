/*
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptDisputeRequest;
import org.openapitools.client.model.AcceptDisputeResponse;
import org.openapitools.client.model.DefendDisputeRequest;
import org.openapitools.client.model.DefendDisputeResponse;
import org.openapitools.client.model.DefenseReasonsRequest;
import org.openapitools.client.model.DefenseReasonsResponse;
import org.openapitools.client.model.DeleteDefenseDocumentRequest;
import org.openapitools.client.model.DeleteDefenseDocumentResponse;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.SupplyDefenseDocumentRequest;
import org.openapitools.client.model.SupplyDefenseDocumentResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneralApi
 */
@Disabled
public class GeneralApiTest {

    private final GeneralApi api = new GeneralApi();

    /**
     * Accept a dispute
     *
     * Accepts a specific dispute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postAcceptDisputeTest() throws ApiException {
        AcceptDisputeRequest acceptDisputeRequest = null;
        AcceptDisputeResponse response = api.postAcceptDispute(acceptDisputeRequest);
        // TODO: test validations
    }

    /**
     * Defend a dispute
     *
     * Defends a specific dispute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDefendDisputeTest() throws ApiException {
        DefendDisputeRequest defendDisputeRequest = null;
        DefendDisputeResponse response = api.postDefendDispute(defendDisputeRequest);
        // TODO: test validations
    }

    /**
     * Delete a defense document
     *
     * Deletes a specific dispute defense document that was supplied earlier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postDeleteDisputeDefenseDocumentTest() throws ApiException {
        DeleteDefenseDocumentRequest deleteDefenseDocumentRequest = null;
        DeleteDefenseDocumentResponse response = api.postDeleteDisputeDefenseDocument(deleteDefenseDocumentRequest);
        // TODO: test validations
    }

    /**
     * Get applicable defense reasons
     *
     * Returns a list of all applicable defense reasons to defend a specific dispute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postRetrieveApplicableDefenseReasonsTest() throws ApiException {
        DefenseReasonsRequest defenseReasonsRequest = null;
        DefenseReasonsResponse response = api.postRetrieveApplicableDefenseReasons(defenseReasonsRequest);
        // TODO: test validations
    }

    /**
     * Supply a defense document
     *
     * Supplies a specific dispute defense document.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postSupplyDefenseDocumentTest() throws ApiException {
        SupplyDefenseDocumentRequest supplyDefenseDocumentRequest = null;
        SupplyDefenseDocumentResponse response = api.postSupplyDefenseDocument(supplyDefenseDocumentRequest);
        // TODO: test validations
    }

}
