/*
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DefenseReason;
import org.openapitools.client.model.DisputeServiceResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DefenseReasonsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:14:35.179045-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DefenseReasonsResponse {
  public static final String SERIALIZED_NAME_DEFENSE_REASONS = "defenseReasons";
  @SerializedName(SERIALIZED_NAME_DEFENSE_REASONS)
  private List<DefenseReason> defenseReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPUTE_SERVICE_RESULT = "disputeServiceResult";
  @SerializedName(SERIALIZED_NAME_DISPUTE_SERVICE_RESULT)
  private DisputeServiceResult disputeServiceResult;

  public DefenseReasonsResponse() {
  }

  public DefenseReasonsResponse defenseReasons(List<DefenseReason> defenseReasons) {
    this.defenseReasons = defenseReasons;
    return this;
  }

  public DefenseReasonsResponse addDefenseReasonsItem(DefenseReason defenseReasonsItem) {
    if (this.defenseReasons == null) {
      this.defenseReasons = new ArrayList<>();
    }
    this.defenseReasons.add(defenseReasonsItem);
    return this;
  }

  /**
   * The defense reasons that can be used to defend the dispute.
   * @return defenseReasons
   */
  @javax.annotation.Nullable
  public List<DefenseReason> getDefenseReasons() {
    return defenseReasons;
  }

  public void setDefenseReasons(List<DefenseReason> defenseReasons) {
    this.defenseReasons = defenseReasons;
  }


  public DefenseReasonsResponse disputeServiceResult(DisputeServiceResult disputeServiceResult) {
    this.disputeServiceResult = disputeServiceResult;
    return this;
  }

  /**
   * The result of the dispute service.
   * @return disputeServiceResult
   */
  @javax.annotation.Nonnull
  public DisputeServiceResult getDisputeServiceResult() {
    return disputeServiceResult;
  }

  public void setDisputeServiceResult(DisputeServiceResult disputeServiceResult) {
    this.disputeServiceResult = disputeServiceResult;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DefenseReasonsResponse defenseReasonsResponse = (DefenseReasonsResponse) o;
    return Objects.equals(this.defenseReasons, defenseReasonsResponse.defenseReasons) &&
        Objects.equals(this.disputeServiceResult, defenseReasonsResponse.disputeServiceResult);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defenseReasons, disputeServiceResult);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DefenseReasonsResponse {\n");
    sb.append("    defenseReasons: ").append(toIndentedString(defenseReasons)).append("\n");
    sb.append("    disputeServiceResult: ").append(toIndentedString(disputeServiceResult)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("defenseReasons");
    openapiFields.add("disputeServiceResult");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("disputeServiceResult");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DefenseReasonsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DefenseReasonsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DefenseReasonsResponse is not found in the empty JSON string", DefenseReasonsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DefenseReasonsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DefenseReasonsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DefenseReasonsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("defenseReasons") != null && !jsonObj.get("defenseReasons").isJsonNull()) {
        JsonArray jsonArraydefenseReasons = jsonObj.getAsJsonArray("defenseReasons");
        if (jsonArraydefenseReasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("defenseReasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `defenseReasons` to be an array in the JSON string but got `%s`", jsonObj.get("defenseReasons").toString()));
          }

          // validate the optional field `defenseReasons` (array)
          for (int i = 0; i < jsonArraydefenseReasons.size(); i++) {
            DefenseReason.validateJsonElement(jsonArraydefenseReasons.get(i));
          };
        }
      }
      // validate the required field `disputeServiceResult`
      DisputeServiceResult.validateJsonElement(jsonObj.get("disputeServiceResult"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DefenseReasonsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DefenseReasonsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DefenseReasonsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DefenseReasonsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DefenseReasonsResponse>() {
           @Override
           public void write(JsonWriter out, DefenseReasonsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DefenseReasonsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DefenseReasonsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DefenseReasonsResponse
   * @throws IOException if the JSON string is invalid with respect to DefenseReasonsResponse
   */
  public static DefenseReasonsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DefenseReasonsResponse.class);
  }

  /**
   * Convert an instance of DefenseReasonsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

