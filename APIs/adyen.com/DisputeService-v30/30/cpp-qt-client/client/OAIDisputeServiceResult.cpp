/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisputeServiceResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisputeServiceResult::OAIDisputeServiceResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisputeServiceResult::OAIDisputeServiceResult() {
    this->initializeModel();
}

OAIDisputeServiceResult::~OAIDisputeServiceResult() {}

void OAIDisputeServiceResult::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAIDisputeServiceResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisputeServiceResult::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAIDisputeServiceResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisputeServiceResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QString OAIDisputeServiceResult::getErrorMessage() const {
    return m_error_message;
}
void OAIDisputeServiceResult::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIDisputeServiceResult::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIDisputeServiceResult::is_error_message_Valid() const{
    return m_error_message_isValid;
}

bool OAIDisputeServiceResult::isSuccess() const {
    return m_success;
}
void OAIDisputeServiceResult::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIDisputeServiceResult::is_success_Set() const{
    return m_success_isSet;
}

bool OAIDisputeServiceResult::is_success_Valid() const{
    return m_success_isValid;
}

bool OAIDisputeServiceResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisputeServiceResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_success_isValid && true;
}

} // namespace OpenAPI
