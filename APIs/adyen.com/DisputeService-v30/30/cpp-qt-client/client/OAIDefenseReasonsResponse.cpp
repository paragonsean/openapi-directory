/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefenseReasonsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefenseReasonsResponse::OAIDefenseReasonsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefenseReasonsResponse::OAIDefenseReasonsResponse() {
    this->initializeModel();
}

OAIDefenseReasonsResponse::~OAIDefenseReasonsResponse() {}

void OAIDefenseReasonsResponse::initializeModel() {

    m_defense_reasons_isSet = false;
    m_defense_reasons_isValid = false;

    m_dispute_service_result_isSet = false;
    m_dispute_service_result_isValid = false;
}

void OAIDefenseReasonsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefenseReasonsResponse::fromJsonObject(QJsonObject json) {

    m_defense_reasons_isValid = ::OpenAPI::fromJsonValue(m_defense_reasons, json[QString("defenseReasons")]);
    m_defense_reasons_isSet = !json[QString("defenseReasons")].isNull() && m_defense_reasons_isValid;

    m_dispute_service_result_isValid = ::OpenAPI::fromJsonValue(m_dispute_service_result, json[QString("disputeServiceResult")]);
    m_dispute_service_result_isSet = !json[QString("disputeServiceResult")].isNull() && m_dispute_service_result_isValid;
}

QString OAIDefenseReasonsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefenseReasonsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_defense_reasons.size() > 0) {
        obj.insert(QString("defenseReasons"), ::OpenAPI::toJsonValue(m_defense_reasons));
    }
    if (m_dispute_service_result.isSet()) {
        obj.insert(QString("disputeServiceResult"), ::OpenAPI::toJsonValue(m_dispute_service_result));
    }
    return obj;
}

QList<OAIDefenseReason> OAIDefenseReasonsResponse::getDefenseReasons() const {
    return m_defense_reasons;
}
void OAIDefenseReasonsResponse::setDefenseReasons(const QList<OAIDefenseReason> &defense_reasons) {
    m_defense_reasons = defense_reasons;
    m_defense_reasons_isSet = true;
}

bool OAIDefenseReasonsResponse::is_defense_reasons_Set() const{
    return m_defense_reasons_isSet;
}

bool OAIDefenseReasonsResponse::is_defense_reasons_Valid() const{
    return m_defense_reasons_isValid;
}

OAIDisputeServiceResult OAIDefenseReasonsResponse::getDisputeServiceResult() const {
    return m_dispute_service_result;
}
void OAIDefenseReasonsResponse::setDisputeServiceResult(const OAIDisputeServiceResult &dispute_service_result) {
    m_dispute_service_result = dispute_service_result;
    m_dispute_service_result_isSet = true;
}

bool OAIDefenseReasonsResponse::is_dispute_service_result_Set() const{
    return m_dispute_service_result_isSet;
}

bool OAIDefenseReasonsResponse::is_dispute_service_result_Valid() const{
    return m_dispute_service_result_isValid;
}

bool OAIDefenseReasonsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense_reasons.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_service_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefenseReasonsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_dispute_service_result_isValid && true;
}

} // namespace OpenAPI
