/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeleteDefenseDocumentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeleteDefenseDocumentRequest::OAIDeleteDefenseDocumentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeleteDefenseDocumentRequest::OAIDeleteDefenseDocumentRequest() {
    this->initializeModel();
}

OAIDeleteDefenseDocumentRequest::~OAIDeleteDefenseDocumentRequest() {}

void OAIDeleteDefenseDocumentRequest::initializeModel() {

    m_defense_document_type_isSet = false;
    m_defense_document_type_isValid = false;

    m_dispute_psp_reference_isSet = false;
    m_dispute_psp_reference_isValid = false;

    m_merchant_account_code_isSet = false;
    m_merchant_account_code_isValid = false;
}

void OAIDeleteDefenseDocumentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeleteDefenseDocumentRequest::fromJsonObject(QJsonObject json) {

    m_defense_document_type_isValid = ::OpenAPI::fromJsonValue(m_defense_document_type, json[QString("defenseDocumentType")]);
    m_defense_document_type_isSet = !json[QString("defenseDocumentType")].isNull() && m_defense_document_type_isValid;

    m_dispute_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_dispute_psp_reference, json[QString("disputePspReference")]);
    m_dispute_psp_reference_isSet = !json[QString("disputePspReference")].isNull() && m_dispute_psp_reference_isValid;

    m_merchant_account_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_account_code, json[QString("merchantAccountCode")]);
    m_merchant_account_code_isSet = !json[QString("merchantAccountCode")].isNull() && m_merchant_account_code_isValid;
}

QString OAIDeleteDefenseDocumentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeleteDefenseDocumentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_defense_document_type_isSet) {
        obj.insert(QString("defenseDocumentType"), ::OpenAPI::toJsonValue(m_defense_document_type));
    }
    if (m_dispute_psp_reference_isSet) {
        obj.insert(QString("disputePspReference"), ::OpenAPI::toJsonValue(m_dispute_psp_reference));
    }
    if (m_merchant_account_code_isSet) {
        obj.insert(QString("merchantAccountCode"), ::OpenAPI::toJsonValue(m_merchant_account_code));
    }
    return obj;
}

QString OAIDeleteDefenseDocumentRequest::getDefenseDocumentType() const {
    return m_defense_document_type;
}
void OAIDeleteDefenseDocumentRequest::setDefenseDocumentType(const QString &defense_document_type) {
    m_defense_document_type = defense_document_type;
    m_defense_document_type_isSet = true;
}

bool OAIDeleteDefenseDocumentRequest::is_defense_document_type_Set() const{
    return m_defense_document_type_isSet;
}

bool OAIDeleteDefenseDocumentRequest::is_defense_document_type_Valid() const{
    return m_defense_document_type_isValid;
}

QString OAIDeleteDefenseDocumentRequest::getDisputePspReference() const {
    return m_dispute_psp_reference;
}
void OAIDeleteDefenseDocumentRequest::setDisputePspReference(const QString &dispute_psp_reference) {
    m_dispute_psp_reference = dispute_psp_reference;
    m_dispute_psp_reference_isSet = true;
}

bool OAIDeleteDefenseDocumentRequest::is_dispute_psp_reference_Set() const{
    return m_dispute_psp_reference_isSet;
}

bool OAIDeleteDefenseDocumentRequest::is_dispute_psp_reference_Valid() const{
    return m_dispute_psp_reference_isValid;
}

QString OAIDeleteDefenseDocumentRequest::getMerchantAccountCode() const {
    return m_merchant_account_code;
}
void OAIDeleteDefenseDocumentRequest::setMerchantAccountCode(const QString &merchant_account_code) {
    m_merchant_account_code = merchant_account_code;
    m_merchant_account_code_isSet = true;
}

bool OAIDeleteDefenseDocumentRequest::is_merchant_account_code_Set() const{
    return m_merchant_account_code_isSet;
}

bool OAIDeleteDefenseDocumentRequest::is_merchant_account_code_Valid() const{
    return m_merchant_account_code_isValid;
}

bool OAIDeleteDefenseDocumentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dispute_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeleteDefenseDocumentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_defense_document_type_isValid && m_dispute_psp_reference_isValid && m_merchant_account_code_isValid && true;
}

} // namespace OpenAPI
