/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAcceptDisputeRequest.h"
#include "OAIAcceptDisputeResponse.h"
#include "OAIDefendDisputeRequest.h"
#include "OAIDefendDisputeResponse.h"
#include "OAIDefenseReasonsRequest.h"
#include "OAIDefenseReasonsResponse.h"
#include "OAIDeleteDefenseDocumentRequest.h"
#include "OAIDeleteDefenseDocumentResponse.h"
#include "OAIServiceError.h"
#include "OAISupplyDefenseDocumentRequest.h"
#include "OAISupplyDefenseDocumentResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_accept_dispute_request OAIAcceptDisputeRequest [optional]
    */
    virtual void postAcceptDispute(const ::OpenAPI::OptionalParam<OAIAcceptDisputeRequest> &oai_accept_dispute_request = ::OpenAPI::OptionalParam<OAIAcceptDisputeRequest>());

    /**
    * @param[in]  oai_defend_dispute_request OAIDefendDisputeRequest [optional]
    */
    virtual void postDefendDispute(const ::OpenAPI::OptionalParam<OAIDefendDisputeRequest> &oai_defend_dispute_request = ::OpenAPI::OptionalParam<OAIDefendDisputeRequest>());

    /**
    * @param[in]  oai_delete_defense_document_request OAIDeleteDefenseDocumentRequest [optional]
    */
    virtual void postDeleteDisputeDefenseDocument(const ::OpenAPI::OptionalParam<OAIDeleteDefenseDocumentRequest> &oai_delete_defense_document_request = ::OpenAPI::OptionalParam<OAIDeleteDefenseDocumentRequest>());

    /**
    * @param[in]  oai_defense_reasons_request OAIDefenseReasonsRequest [optional]
    */
    virtual void postRetrieveApplicableDefenseReasons(const ::OpenAPI::OptionalParam<OAIDefenseReasonsRequest> &oai_defense_reasons_request = ::OpenAPI::OptionalParam<OAIDefenseReasonsRequest>());

    /**
    * @param[in]  oai_supply_defense_document_request OAISupplyDefenseDocumentRequest [optional]
    */
    virtual void postSupplyDefenseDocument(const ::OpenAPI::OptionalParam<OAISupplyDefenseDocumentRequest> &oai_supply_defense_document_request = ::OpenAPI::OptionalParam<OAISupplyDefenseDocumentRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postAcceptDisputeCallback(OAIHttpRequestWorker *worker);
    void postDefendDisputeCallback(OAIHttpRequestWorker *worker);
    void postDeleteDisputeDefenseDocumentCallback(OAIHttpRequestWorker *worker);
    void postRetrieveApplicableDefenseReasonsCallback(OAIHttpRequestWorker *worker);
    void postSupplyDefenseDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postAcceptDisputeSignal(OAIAcceptDisputeResponse summary);
    void postDefendDisputeSignal(OAIDefendDisputeResponse summary);
    void postDeleteDisputeDefenseDocumentSignal(OAIDeleteDefenseDocumentResponse summary);
    void postRetrieveApplicableDefenseReasonsSignal(OAIDefenseReasonsResponse summary);
    void postSupplyDefenseDocumentSignal(OAISupplyDefenseDocumentResponse summary);


    void postAcceptDisputeSignalFull(OAIHttpRequestWorker *worker, OAIAcceptDisputeResponse summary);
    void postDefendDisputeSignalFull(OAIHttpRequestWorker *worker, OAIDefendDisputeResponse summary);
    void postDeleteDisputeDefenseDocumentSignalFull(OAIHttpRequestWorker *worker, OAIDeleteDefenseDocumentResponse summary);
    void postRetrieveApplicableDefenseReasonsSignalFull(OAIHttpRequestWorker *worker, OAIDefenseReasonsResponse summary);
    void postSupplyDefenseDocumentSignalFull(OAIHttpRequestWorker *worker, OAISupplyDefenseDocumentResponse summary);

    Q_DECL_DEPRECATED_X("Use postAcceptDisputeSignalError() instead")
    void postAcceptDisputeSignalE(OAIAcceptDisputeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postAcceptDisputeSignalError(OAIAcceptDisputeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDefendDisputeSignalError() instead")
    void postDefendDisputeSignalE(OAIDefendDisputeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDefendDisputeSignalError(OAIDefendDisputeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteDisputeDefenseDocumentSignalError() instead")
    void postDeleteDisputeDefenseDocumentSignalE(OAIDeleteDefenseDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteDisputeDefenseDocumentSignalError(OAIDeleteDefenseDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRetrieveApplicableDefenseReasonsSignalError() instead")
    void postRetrieveApplicableDefenseReasonsSignalE(OAIDefenseReasonsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postRetrieveApplicableDefenseReasonsSignalError(OAIDefenseReasonsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSupplyDefenseDocumentSignalError() instead")
    void postSupplyDefenseDocumentSignalE(OAISupplyDefenseDocumentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSupplyDefenseDocumentSignalError(OAISupplyDefenseDocumentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postAcceptDisputeSignalErrorFull() instead")
    void postAcceptDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postAcceptDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDefendDisputeSignalErrorFull() instead")
    void postDefendDisputeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDefendDisputeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteDisputeDefenseDocumentSignalErrorFull() instead")
    void postDeleteDisputeDefenseDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteDisputeDefenseDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postRetrieveApplicableDefenseReasonsSignalErrorFull() instead")
    void postRetrieveApplicableDefenseReasonsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postRetrieveApplicableDefenseReasonsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSupplyDefenseDocumentSignalErrorFull() instead")
    void postSupplyDefenseDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSupplyDefenseDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
