/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefenseReason.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefenseReason::OAIDefenseReason(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefenseReason::OAIDefenseReason() {
    this->initializeModel();
}

OAIDefenseReason::~OAIDefenseReason() {}

void OAIDefenseReason::initializeModel() {

    m_defense_document_types_isSet = false;
    m_defense_document_types_isValid = false;

    m_defense_reason_code_isSet = false;
    m_defense_reason_code_isValid = false;

    m_satisfied_isSet = false;
    m_satisfied_isValid = false;
}

void OAIDefenseReason::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefenseReason::fromJsonObject(QJsonObject json) {

    m_defense_document_types_isValid = ::OpenAPI::fromJsonValue(m_defense_document_types, json[QString("defenseDocumentTypes")]);
    m_defense_document_types_isSet = !json[QString("defenseDocumentTypes")].isNull() && m_defense_document_types_isValid;

    m_defense_reason_code_isValid = ::OpenAPI::fromJsonValue(m_defense_reason_code, json[QString("defenseReasonCode")]);
    m_defense_reason_code_isSet = !json[QString("defenseReasonCode")].isNull() && m_defense_reason_code_isValid;

    m_satisfied_isValid = ::OpenAPI::fromJsonValue(m_satisfied, json[QString("satisfied")]);
    m_satisfied_isSet = !json[QString("satisfied")].isNull() && m_satisfied_isValid;
}

QString OAIDefenseReason::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefenseReason::asJsonObject() const {
    QJsonObject obj;
    if (m_defense_document_types.size() > 0) {
        obj.insert(QString("defenseDocumentTypes"), ::OpenAPI::toJsonValue(m_defense_document_types));
    }
    if (m_defense_reason_code_isSet) {
        obj.insert(QString("defenseReasonCode"), ::OpenAPI::toJsonValue(m_defense_reason_code));
    }
    if (m_satisfied_isSet) {
        obj.insert(QString("satisfied"), ::OpenAPI::toJsonValue(m_satisfied));
    }
    return obj;
}

QList<OAIDefenseDocumentType> OAIDefenseReason::getDefenseDocumentTypes() const {
    return m_defense_document_types;
}
void OAIDefenseReason::setDefenseDocumentTypes(const QList<OAIDefenseDocumentType> &defense_document_types) {
    m_defense_document_types = defense_document_types;
    m_defense_document_types_isSet = true;
}

bool OAIDefenseReason::is_defense_document_types_Set() const{
    return m_defense_document_types_isSet;
}

bool OAIDefenseReason::is_defense_document_types_Valid() const{
    return m_defense_document_types_isValid;
}

QString OAIDefenseReason::getDefenseReasonCode() const {
    return m_defense_reason_code;
}
void OAIDefenseReason::setDefenseReasonCode(const QString &defense_reason_code) {
    m_defense_reason_code = defense_reason_code;
    m_defense_reason_code_isSet = true;
}

bool OAIDefenseReason::is_defense_reason_code_Set() const{
    return m_defense_reason_code_isSet;
}

bool OAIDefenseReason::is_defense_reason_code_Valid() const{
    return m_defense_reason_code_isValid;
}

bool OAIDefenseReason::isSatisfied() const {
    return m_satisfied;
}
void OAIDefenseReason::setSatisfied(const bool &satisfied) {
    m_satisfied = satisfied;
    m_satisfied_isSet = true;
}

bool OAIDefenseReason::is_satisfied_Set() const{
    return m_satisfied_isSet;
}

bool OAIDefenseReason::is_satisfied_Valid() const{
    return m_satisfied_isValid;
}

bool OAIDefenseReason::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_defense_document_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_defense_reason_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfied_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefenseReason::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_defense_reason_code_isValid && m_satisfied_isValid && true;
}

} // namespace OpenAPI
