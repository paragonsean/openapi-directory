/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DefenseDocumentType from './DefenseDocumentType';

/**
 * The DefenseReason model module.
 * @module model/DefenseReason
 * @version 30
 */
class DefenseReason {
    /**
     * Constructs a new <code>DefenseReason</code>.
     * @alias module:model/DefenseReason
     * @param defenseReasonCode {String} The defense reason code that was selected to defend this dispute.
     * @param satisfied {Boolean} Indicates if sufficient defense material has been supplied.
     */
    constructor(defenseReasonCode, satisfied) { 
        
        DefenseReason.initialize(this, defenseReasonCode, satisfied);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, defenseReasonCode, satisfied) { 
        obj['defenseReasonCode'] = defenseReasonCode;
        obj['satisfied'] = satisfied;
    }

    /**
     * Constructs a <code>DefenseReason</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DefenseReason} obj Optional instance to populate.
     * @return {module:model/DefenseReason} The populated <code>DefenseReason</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DefenseReason();

            if (data.hasOwnProperty('defenseDocumentTypes')) {
                obj['defenseDocumentTypes'] = ApiClient.convertToType(data['defenseDocumentTypes'], [DefenseDocumentType]);
            }
            if (data.hasOwnProperty('defenseReasonCode')) {
                obj['defenseReasonCode'] = ApiClient.convertToType(data['defenseReasonCode'], 'String');
            }
            if (data.hasOwnProperty('satisfied')) {
                obj['satisfied'] = ApiClient.convertToType(data['satisfied'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DefenseReason</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DefenseReason</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DefenseReason.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['defenseDocumentTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['defenseDocumentTypes'])) {
                throw new Error("Expected the field `defenseDocumentTypes` to be an array in the JSON data but got " + data['defenseDocumentTypes']);
            }
            // validate the optional field `defenseDocumentTypes` (array)
            for (const item of data['defenseDocumentTypes']) {
                DefenseDocumentType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['defenseReasonCode'] && !(typeof data['defenseReasonCode'] === 'string' || data['defenseReasonCode'] instanceof String)) {
            throw new Error("Expected the field `defenseReasonCode` to be a primitive type in the JSON string but got " + data['defenseReasonCode']);
        }

        return true;
    }


}

DefenseReason.RequiredProperties = ["defenseReasonCode", "satisfied"];

/**
 * Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required.
 * @member {Array.<module:model/DefenseDocumentType>} defenseDocumentTypes
 */
DefenseReason.prototype['defenseDocumentTypes'] = undefined;

/**
 * The defense reason code that was selected to defend this dispute.
 * @member {String} defenseReasonCode
 */
DefenseReason.prototype['defenseReasonCode'] = undefined;

/**
 * Indicates if sufficient defense material has been supplied.
 * @member {Boolean} satisfied
 */
DefenseReason.prototype['satisfied'] = undefined;






export default DefenseReason;

