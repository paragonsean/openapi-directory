/**
 * Disputes API
 * You can use the [Disputes API](https://docs.adyen.com/risk-management/disputes-api) to automate the dispute handling process so that you can respond to disputes and chargebacks as soon as they are initiated. The Disputes API lets you retrieve defense reasons, supply and delete defense documents, and accept or defend disputes.  ## Authentication Each request to the Disputes API must be signed with an API key. For this, obtain an API Key from your Customer Area, as described in [How to get the API key](https://docs.adyen.com/development-resources/api-credentials#generate-api-key). Then set this key to the `X-API-Key` header value, for example:  ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: Your_API_key\" \\ ... ``` Note that when going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning Disputes API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://ca-test.adyen.com/ca/services/DisputeService/v30/defendDispute ```
 *
 * The version of the OpenAPI document: 30
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DisputesApi);
  }
}(this, function(expect, DisputesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DisputesApi.DefenseReason();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefenseReason', function() {
    it('should create an instance of DefenseReason', function() {
      // uncomment below and update the code to test DefenseReason
      //var instance = new DisputesApi.DefenseReason();
      //expect(instance).to.be.a(DisputesApi.DefenseReason);
    });

    it('should have the property defenseDocumentTypes (base name: "defenseDocumentTypes")', function() {
      // uncomment below and update the code to test the property defenseDocumentTypes
      //var instance = new DisputesApi.DefenseReason();
      //expect(instance).to.be();
    });

    it('should have the property defenseReasonCode (base name: "defenseReasonCode")', function() {
      // uncomment below and update the code to test the property defenseReasonCode
      //var instance = new DisputesApi.DefenseReason();
      //expect(instance).to.be();
    });

    it('should have the property satisfied (base name: "satisfied")', function() {
      // uncomment below and update the code to test the property satisfied
      //var instance = new DisputesApi.DefenseReason();
      //expect(instance).to.be();
    });

  });

}));
