# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcceptDisputeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dispute_psp_reference: str=None, merchant_account_code: str=None):
        """AcceptDisputeRequest - a model defined in OpenAPI

        :param dispute_psp_reference: The dispute_psp_reference of this AcceptDisputeRequest.
        :param merchant_account_code: The merchant_account_code of this AcceptDisputeRequest.
        """
        self.openapi_types = {
            'dispute_psp_reference': str,
            'merchant_account_code': str
        }

        self.attribute_map = {
            'dispute_psp_reference': 'disputePspReference',
            'merchant_account_code': 'merchantAccountCode'
        }

        self._dispute_psp_reference = dispute_psp_reference
        self._merchant_account_code = merchant_account_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptDisputeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptDisputeRequest of this AcceptDisputeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dispute_psp_reference(self):
        """Gets the dispute_psp_reference of this AcceptDisputeRequest.

        The PSP reference assigned to the dispute.

        :return: The dispute_psp_reference of this AcceptDisputeRequest.
        :rtype: str
        """
        return self._dispute_psp_reference

    @dispute_psp_reference.setter
    def dispute_psp_reference(self, dispute_psp_reference):
        """Sets the dispute_psp_reference of this AcceptDisputeRequest.

        The PSP reference assigned to the dispute.

        :param dispute_psp_reference: The dispute_psp_reference of this AcceptDisputeRequest.
        :type dispute_psp_reference: str
        """
        if dispute_psp_reference is None:
            raise ValueError("Invalid value for `dispute_psp_reference`, must not be `None`")

        self._dispute_psp_reference = dispute_psp_reference

    @property
    def merchant_account_code(self):
        """Gets the merchant_account_code of this AcceptDisputeRequest.

        The merchant account identifier, for which you want to process the dispute transaction.

        :return: The merchant_account_code of this AcceptDisputeRequest.
        :rtype: str
        """
        return self._merchant_account_code

    @merchant_account_code.setter
    def merchant_account_code(self, merchant_account_code):
        """Sets the merchant_account_code of this AcceptDisputeRequest.

        The merchant account identifier, for which you want to process the dispute transaction.

        :param merchant_account_code: The merchant_account_code of this AcceptDisputeRequest.
        :type merchant_account_code: str
        """
        if merchant_account_code is None:
            raise ValueError("Invalid value for `merchant_account_code`, must not be `None`")

        self._merchant_account_code = merchant_account_code
