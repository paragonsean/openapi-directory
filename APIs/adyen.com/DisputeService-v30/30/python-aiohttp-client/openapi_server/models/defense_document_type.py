# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DefenseDocumentType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available: bool=None, defense_document_type_code: str=None, requirement_level: str=None):
        """DefenseDocumentType - a model defined in OpenAPI

        :param available: The available of this DefenseDocumentType.
        :param defense_document_type_code: The defense_document_type_code of this DefenseDocumentType.
        :param requirement_level: The requirement_level of this DefenseDocumentType.
        """
        self.openapi_types = {
            'available': bool,
            'defense_document_type_code': str,
            'requirement_level': str
        }

        self.attribute_map = {
            'available': 'available',
            'defense_document_type_code': 'defenseDocumentTypeCode',
            'requirement_level': 'requirementLevel'
        }

        self._available = available
        self._defense_document_type_code = defense_document_type_code
        self._requirement_level = requirement_level

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefenseDocumentType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefenseDocumentType of this DefenseDocumentType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self):
        """Gets the available of this DefenseDocumentType.

        When **true**, you've successfully uploaded this type of defense document. When **false**, you haven't uploaded this defense document type.

        :return: The available of this DefenseDocumentType.
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this DefenseDocumentType.

        When **true**, you've successfully uploaded this type of defense document. When **false**, you haven't uploaded this defense document type.

        :param available: The available of this DefenseDocumentType.
        :type available: bool
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")

        self._available = available

    @property
    def defense_document_type_code(self):
        """Gets the defense_document_type_code of this DefenseDocumentType.

        The document type code of the defense document.

        :return: The defense_document_type_code of this DefenseDocumentType.
        :rtype: str
        """
        return self._defense_document_type_code

    @defense_document_type_code.setter
    def defense_document_type_code(self, defense_document_type_code):
        """Sets the defense_document_type_code of this DefenseDocumentType.

        The document type code of the defense document.

        :param defense_document_type_code: The defense_document_type_code of this DefenseDocumentType.
        :type defense_document_type_code: str
        """
        if defense_document_type_code is None:
            raise ValueError("Invalid value for `defense_document_type_code`, must not be `None`")

        self._defense_document_type_code = defense_document_type_code

    @property
    def requirement_level(self):
        """Gets the requirement_level of this DefenseDocumentType.

        Indicates to what extent the defense document is required in the defense process.  Possible values:   * **Required**: You must supply the document.   * **OneOrMore**: You must supply at least one of the documents with this label.  * **Optional**: You can choose to supply the document.  * **AlternativeRequired**: You must supply a generic defense document. To enable this functionality, contact our Support Team. When enabled, you can supply a generic defense document for all schemes.

        :return: The requirement_level of this DefenseDocumentType.
        :rtype: str
        """
        return self._requirement_level

    @requirement_level.setter
    def requirement_level(self, requirement_level):
        """Sets the requirement_level of this DefenseDocumentType.

        Indicates to what extent the defense document is required in the defense process.  Possible values:   * **Required**: You must supply the document.   * **OneOrMore**: You must supply at least one of the documents with this label.  * **Optional**: You can choose to supply the document.  * **AlternativeRequired**: You must supply a generic defense document. To enable this functionality, contact our Support Team. When enabled, you can supply a generic defense document for all schemes.

        :param requirement_level: The requirement_level of this DefenseDocumentType.
        :type requirement_level: str
        """
        if requirement_level is None:
            raise ValueError("Invalid value for `requirement_level`, must not be `None`")

        self._requirement_level = requirement_level
