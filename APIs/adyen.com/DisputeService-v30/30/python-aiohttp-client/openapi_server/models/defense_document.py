# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DefenseDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_type: str=None, defense_document_type_code: str=None):
        """DefenseDocument - a model defined in OpenAPI

        :param content: The content of this DefenseDocument.
        :param content_type: The content_type of this DefenseDocument.
        :param defense_document_type_code: The defense_document_type_code of this DefenseDocument.
        """
        self.openapi_types = {
            'content': str,
            'content_type': str,
            'defense_document_type_code': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_type': 'contentType',
            'defense_document_type_code': 'defenseDocumentTypeCode'
        }

        self._content = content
        self._content_type = content_type
        self._defense_document_type_code = defense_document_type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefenseDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefenseDocument of this DefenseDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this DefenseDocument.

        The content of the defense document.

        :return: The content of this DefenseDocument.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this DefenseDocument.

        The content of the defense document.

        :param content: The content of this DefenseDocument.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this DefenseDocument.

        The content type of the defense document.

        :return: The content_type of this DefenseDocument.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DefenseDocument.

        The content type of the defense document.

        :param content_type: The content_type of this DefenseDocument.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def defense_document_type_code(self):
        """Gets the defense_document_type_code of this DefenseDocument.

        The document type code of the defense document.

        :return: The defense_document_type_code of this DefenseDocument.
        :rtype: str
        """
        return self._defense_document_type_code

    @defense_document_type_code.setter
    def defense_document_type_code(self, defense_document_type_code):
        """Sets the defense_document_type_code of this DefenseDocument.

        The document type code of the defense document.

        :param defense_document_type_code: The defense_document_type_code of this DefenseDocument.
        :type defense_document_type_code: str
        """
        if defense_document_type_code is None:
            raise ValueError("Invalid value for `defense_document_type_code`, must not be `None`")

        self._defense_document_type_code = defense_document_type_code
