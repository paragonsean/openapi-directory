# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.defense_document_type import DefenseDocumentType
from openapi_server import util


class DefenseReason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, defense_document_types: List[DefenseDocumentType]=None, defense_reason_code: str=None, satisfied: bool=None):
        """DefenseReason - a model defined in OpenAPI

        :param defense_document_types: The defense_document_types of this DefenseReason.
        :param defense_reason_code: The defense_reason_code of this DefenseReason.
        :param satisfied: The satisfied of this DefenseReason.
        """
        self.openapi_types = {
            'defense_document_types': List[DefenseDocumentType],
            'defense_reason_code': str,
            'satisfied': bool
        }

        self.attribute_map = {
            'defense_document_types': 'defenseDocumentTypes',
            'defense_reason_code': 'defenseReasonCode',
            'satisfied': 'satisfied'
        }

        self._defense_document_types = defense_document_types
        self._defense_reason_code = defense_reason_code
        self._satisfied = satisfied

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DefenseReason':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DefenseReason of this DefenseReason.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def defense_document_types(self):
        """Gets the defense_document_types of this DefenseReason.

        Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required.

        :return: The defense_document_types of this DefenseReason.
        :rtype: List[DefenseDocumentType]
        """
        return self._defense_document_types

    @defense_document_types.setter
    def defense_document_types(self, defense_document_types):
        """Sets the defense_document_types of this DefenseReason.

        Array of defense document types for a specific defense reason. Indicates the document types that you can submit to the schemes to defend this dispute, and whether they are required.

        :param defense_document_types: The defense_document_types of this DefenseReason.
        :type defense_document_types: List[DefenseDocumentType]
        """

        self._defense_document_types = defense_document_types

    @property
    def defense_reason_code(self):
        """Gets the defense_reason_code of this DefenseReason.

        The defense reason code that was selected to defend this dispute.

        :return: The defense_reason_code of this DefenseReason.
        :rtype: str
        """
        return self._defense_reason_code

    @defense_reason_code.setter
    def defense_reason_code(self, defense_reason_code):
        """Sets the defense_reason_code of this DefenseReason.

        The defense reason code that was selected to defend this dispute.

        :param defense_reason_code: The defense_reason_code of this DefenseReason.
        :type defense_reason_code: str
        """
        if defense_reason_code is None:
            raise ValueError("Invalid value for `defense_reason_code`, must not be `None`")

        self._defense_reason_code = defense_reason_code

    @property
    def satisfied(self):
        """Gets the satisfied of this DefenseReason.

        Indicates if sufficient defense material has been supplied.

        :return: The satisfied of this DefenseReason.
        :rtype: bool
        """
        return self._satisfied

    @satisfied.setter
    def satisfied(self, satisfied):
        """Sets the satisfied of this DefenseReason.

        Indicates if sufficient defense material has been supplied.

        :param satisfied: The satisfied of this DefenseReason.
        :type satisfied: bool
        """
        if satisfied is None:
            raise ValueError("Invalid value for `satisfied`, must not be `None`")

        self._satisfied = satisfied
