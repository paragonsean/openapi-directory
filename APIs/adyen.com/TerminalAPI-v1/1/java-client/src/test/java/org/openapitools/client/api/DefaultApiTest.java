/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AdminRequest;
import org.openapitools.client.model.AdminResponse;
import org.openapitools.client.model.BalanceInquiryRequest;
import org.openapitools.client.model.BalanceInquiryResponse;
import org.openapitools.client.model.CardAcquisitionRequest;
import org.openapitools.client.model.CardAcquisitionResponse;
import org.openapitools.client.model.CardReaderAPDURequest;
import org.openapitools.client.model.CardReaderAPDUResponse;
import org.openapitools.client.model.DiagnosisRequest;
import org.openapitools.client.model.DiagnosisResponse;
import org.openapitools.client.model.DisplayRequest;
import org.openapitools.client.model.DisplayResponse;
import org.openapitools.client.model.EnableServiceRequest;
import org.openapitools.client.model.EnableServiceResponse;
import org.openapitools.client.model.GetTotalsRequest;
import org.openapitools.client.model.GetTotalsResponse;
import org.openapitools.client.model.InputRequest;
import org.openapitools.client.model.InputResponse;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.LogoutRequest;
import org.openapitools.client.model.LogoutResponse;
import org.openapitools.client.model.LoyaltyRequest;
import org.openapitools.client.model.LoyaltyResponse;
import org.openapitools.client.model.PaymentRequest;
import org.openapitools.client.model.PaymentResponse;
import org.openapitools.client.model.PrintRequest;
import org.openapitools.client.model.PrintResponse;
import org.openapitools.client.model.ReconciliationRequest;
import org.openapitools.client.model.ReconciliationResponse;
import org.openapitools.client.model.ReversalRequest;
import org.openapitools.client.model.ReversalResponse;
import org.openapitools.client.model.StoredValueRequest;
import org.openapitools.client.model.StoredValueResponse;
import org.openapitools.client.model.TransactionStatusRequest;
import org.openapitools.client.model.TransactionStatusResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Admin Request
     *
     * Empty. Content of the Custom Admin Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void adminPostTest() throws ApiException {
        AdminRequest adminRequest = null;
        AdminResponse response = api.adminPost(adminRequest);
        // TODO: test validations
    }

    /**
     * BalanceInquiry Request
     *
     * It conveys Information related to the account for which a Balance Inquiry is requested. Content of the Balance Inquiry Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void balanceinquiryPostTest() throws ApiException {
        BalanceInquiryRequest balanceInquiryRequest = null;
        BalanceInquiryResponse response = api.balanceinquiryPost(balanceInquiryRequest);
        // TODO: test validations
    }

    /**
     * CardAcquisition Request
     *
     * It conveys Information related to the payment and loyalty cards to read and analyse. This message pair is usually followed by a message pair (e.g. payment or loyalty) which refers to this Card Acquisition message pair. Content of the Card Acquisition Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardacquisitionPostTest() throws ApiException {
        CardAcquisitionRequest cardAcquisitionRequest = null;
        CardAcquisitionResponse response = api.cardacquisitionPost(cardAcquisitionRequest);
        // TODO: test validations
    }

    /**
     * CardReaderAPDU Request
     *
     * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cardreaderapduPostTest() throws ApiException {
        CardReaderAPDURequest cardReaderAPDURequest = null;
        CardReaderAPDUResponse response = api.cardreaderapduPost(cardReaderAPDURequest);
        // TODO: test validations
    }

    /**
     * Diagnosis Request
     *
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void diagnosisPostTest() throws ApiException {
        DiagnosisRequest diagnosisRequest = null;
        DiagnosisResponse response = api.diagnosisPost(diagnosisRequest);
        // TODO: test validations
    }

    /**
     * Display Request
     *
     * It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void displayPostTest() throws ApiException {
        DisplayRequest displayRequest = null;
        DisplayResponse response = api.displayPost(displayRequest);
        // TODO: test validations
    }

    /**
     * EnableService Request
     *
     * It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableservicePostTest() throws ApiException {
        EnableServiceRequest enableServiceRequest = null;
        EnableServiceResponse response = api.enableservicePost(enableServiceRequest);
        // TODO: test validations
    }

    /**
     * GetTotals Request
     *
     * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gettotalsPostTest() throws ApiException {
        GetTotalsRequest getTotalsRequest = null;
        GetTotalsResponse response = api.gettotalsPost(getTotalsRequest);
        // TODO: test validations
    }

    /**
     * Input Request
     *
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inputPostTest() throws ApiException {
        InputRequest inputRequest = null;
        InputResponse response = api.inputPost(inputRequest);
        // TODO: test validations
    }

    /**
     * Login Request
     *
     * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginPostTest() throws ApiException {
        LoginRequest loginRequest = null;
        LoginResponse response = api.loginPost(loginRequest);
        // TODO: test validations
    }

    /**
     * Logout Request
     *
     * Empty. Content of the Logout Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutPostTest() throws ApiException {
        LogoutRequest logoutRequest = null;
        LogoutResponse response = api.logoutPost(logoutRequest);
        // TODO: test validations
    }

    /**
     * Loyalty Request
     *
     * It conveys Information related to the Loyalty transaction to process. Content of the Loyalty Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loyaltyPostTest() throws ApiException {
        LoyaltyRequest loyaltyRequest = null;
        LoyaltyResponse response = api.loyaltyPost(loyaltyRequest);
        // TODO: test validations
    }

    /**
     * Payment Request
     *
     * Request sent to terminal to initiate payment.  It conveys Information related to the Payment transaction to process. Content of the Payment Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void paymentPostTest() throws ApiException {
        PaymentRequest paymentRequest = null;
        PaymentResponse response = api.paymentPost(paymentRequest);
        // TODO: test validations
    }

    /**
     * Print Request
     *
     * It conveys the data to print and the way to process the print. It contains the complete content to print. Content of the Print Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void printPostTest() throws ApiException {
        PrintRequest printRequest = null;
        PrintResponse response = api.printPost(printRequest);
        // TODO: test validations
    }

    /**
     * Reconciliation Request
     *
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reconciliationPostTest() throws ApiException {
        ReconciliationRequest reconciliationRequest = null;
        ReconciliationResponse response = api.reconciliationPost(reconciliationRequest);
        // TODO: test validations
    }

    /**
     * Reversal Request
     *
     * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reversalPostTest() throws ApiException {
        ReversalRequest reversalRequest = null;
        ReversalResponse response = api.reversalPost(reversalRequest);
        // TODO: test validations
    }

    /**
     * StoredValue Request
     *
     * It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void storedvaluePostTest() throws ApiException {
        StoredValueRequest storedValueRequest = null;
        StoredValueResponse response = api.storedvaluePost(storedValueRequest);
        // TODO: test validations
    }

    /**
     * TransactionStatus Request
     *
     * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void transactionstatusPostTest() throws ApiException {
        TransactionStatusRequest transactionStatusRequest = null;
        TransactionStatusResponse response = api.transactionstatusPost(transactionStatusRequest);
        // TODO: test validations
    }

}
