/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrackFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ISO 7813 - ISO 4909.  Generic data structure for a card track, used when the magstripe card reader is located on the Sale Terminal, or for magstripe Card Reader device request. The data structure is also used to store the line at the bottom of a bank check. Magnetic track or magnetic ink characters line.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrackData {
  public static final String SERIALIZED_NAME_TRACK_FORMAT = "TrackFormat";
  @SerializedName(SERIALIZED_NAME_TRACK_FORMAT)
  private TrackFormat trackFormat;

  public static final String SERIALIZED_NAME_TRACK_NUMB = "TrackNumb";
  @SerializedName(SERIALIZED_NAME_TRACK_NUMB)
  private Integer trackNumb = 2;

  public static final String SERIALIZED_NAME_TRACK_VALUE = "TrackValue";
  @SerializedName(SERIALIZED_NAME_TRACK_VALUE)
  private String trackValue;

  public TrackData() {
  }

  public TrackData trackFormat(TrackFormat trackFormat) {
    this.trackFormat = trackFormat;
    return this;
  }

  /**
   * Get trackFormat
   * @return trackFormat
   */
  @javax.annotation.Nullable
  public TrackFormat getTrackFormat() {
    return trackFormat;
  }

  public void setTrackFormat(TrackFormat trackFormat) {
    this.trackFormat = trackFormat;
  }


  public TrackData trackNumb(Integer trackNumb) {
    this.trackNumb = trackNumb;
    return this;
  }

  /**
   * Get trackNumb
   * minimum: 1
   * maximum: 3
   * @return trackNumb
   */
  @javax.annotation.Nullable
  public Integer getTrackNumb() {
    return trackNumb;
  }

  public void setTrackNumb(Integer trackNumb) {
    this.trackNumb = trackNumb;
  }


  public TrackData trackValue(String trackValue) {
    this.trackValue = trackValue;
    return this;
  }

  /**
   * Get trackValue
   * @return trackValue
   */
  @javax.annotation.Nonnull
  public String getTrackValue() {
    return trackValue;
  }

  public void setTrackValue(String trackValue) {
    this.trackValue = trackValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackData trackData = (TrackData) o;
    return Objects.equals(this.trackFormat, trackData.trackFormat) &&
        Objects.equals(this.trackNumb, trackData.trackNumb) &&
        Objects.equals(this.trackValue, trackData.trackValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackFormat, trackNumb, trackValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackData {\n");
    sb.append("    trackFormat: ").append(toIndentedString(trackFormat)).append("\n");
    sb.append("    trackNumb: ").append(toIndentedString(trackNumb)).append("\n");
    sb.append("    trackValue: ").append(toIndentedString(trackValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TrackFormat");
    openapiFields.add("TrackNumb");
    openapiFields.add("TrackValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("TrackValue");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrackData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrackData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackData is not found in the empty JSON string", TrackData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrackData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrackData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrackData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `TrackFormat`
      if (jsonObj.get("TrackFormat") != null && !jsonObj.get("TrackFormat").isJsonNull()) {
        TrackFormat.validateJsonElement(jsonObj.get("TrackFormat"));
      }
      if (!jsonObj.get("TrackValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackData.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackData>() {
           @Override
           public void write(JsonWriter out, TrackData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrackData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrackData
   * @throws IOException if the JSON string is invalid with respect to TrackData
   */
  public static TrackData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackData.class);
  }

  /**
   * Convert an instance of TrackData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

