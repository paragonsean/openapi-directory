/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrackData;
import org.openapitools.client.model.TypeCode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allows the check information to be provided by the Sale System before requesting the payment, or stored by the Sale System after processing of the payment. Information related to the paper check used for the transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckData {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "AccountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BANK_I_D = "BankID";
  @SerializedName(SERIALIZED_NAME_BANK_I_D)
  private String bankID;

  public static final String SERIALIZED_NAME_CHECK_CARD_NUMBER = "CheckCardNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_CARD_NUMBER)
  private String checkCardNumber;

  public static final String SERIALIZED_NAME_CHECK_NUMBER = "CheckNumber";
  @SerializedName(SERIALIZED_NAME_CHECK_NUMBER)
  private String checkNumber;

  public static final String SERIALIZED_NAME_COUNTRY = "Country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_TRACK_DATA = "TrackData";
  @SerializedName(SERIALIZED_NAME_TRACK_DATA)
  private TrackData trackData;

  public static final String SERIALIZED_NAME_TYPE_CODE = "TypeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private TypeCode typeCode;

  public CheckData() {
  }

  public CheckData accountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
    return this;
  }

  /**
   * Mandatory if TrackData absent.
   * @return accountNumber
   */
  @javax.annotation.Nullable
  public String getAccountNumber() {
    return accountNumber;
  }

  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public CheckData bankID(String bankID) {
    this.bankID = bankID;
    return this;
  }

  /**
   * Mandatory if TrackData absent.
   * @return bankID
   */
  @javax.annotation.Nullable
  public String getBankID() {
    return bankID;
  }

  public void setBankID(String bankID) {
    this.bankID = bankID;
  }


  public CheckData checkCardNumber(String checkCardNumber) {
    this.checkCardNumber = checkCardNumber;
    return this;
  }

  /**
   * If provided by the customer.
   * @return checkCardNumber
   */
  @javax.annotation.Nullable
  public String getCheckCardNumber() {
    return checkCardNumber;
  }

  public void setCheckCardNumber(String checkCardNumber) {
    this.checkCardNumber = checkCardNumber;
  }


  public CheckData checkNumber(String checkNumber) {
    this.checkNumber = checkNumber;
    return this;
  }

  /**
   * Mandatory if TrackData absent.
   * @return checkNumber
   */
  @javax.annotation.Nullable
  public String getCheckNumber() {
    return checkNumber;
  }

  public void setCheckNumber(String checkNumber) {
    this.checkNumber = checkNumber;
  }


  public CheckData country(String country) {
    this.country = country;
    return this;
  }

  /**
   * Absent if country of the Sale system.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public CheckData trackData(TrackData trackData) {
    this.trackData = trackData;
    return this;
  }

  /**
   * Get trackData
   * @return trackData
   */
  @javax.annotation.Nullable
  public TrackData getTrackData() {
    return trackData;
  }

  public void setTrackData(TrackData trackData) {
    this.trackData = trackData;
  }


  public CheckData typeCode(TypeCode typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * Get typeCode
   * @return typeCode
   */
  @javax.annotation.Nullable
  public TypeCode getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(TypeCode typeCode) {
    this.typeCode = typeCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckData checkData = (CheckData) o;
    return Objects.equals(this.accountNumber, checkData.accountNumber) &&
        Objects.equals(this.bankID, checkData.bankID) &&
        Objects.equals(this.checkCardNumber, checkData.checkCardNumber) &&
        Objects.equals(this.checkNumber, checkData.checkNumber) &&
        Objects.equals(this.country, checkData.country) &&
        Objects.equals(this.trackData, checkData.trackData) &&
        Objects.equals(this.typeCode, checkData.typeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, bankID, checkCardNumber, checkNumber, country, trackData, typeCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckData {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bankID: ").append(toIndentedString(bankID)).append("\n");
    sb.append("    checkCardNumber: ").append(toIndentedString(checkCardNumber)).append("\n");
    sb.append("    checkNumber: ").append(toIndentedString(checkNumber)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    trackData: ").append(toIndentedString(trackData)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountNumber");
    openapiFields.add("BankID");
    openapiFields.add("CheckCardNumber");
    openapiFields.add("CheckNumber");
    openapiFields.add("Country");
    openapiFields.add("TrackData");
    openapiFields.add("TypeCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckData is not found in the empty JSON string", CheckData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccountNumber") != null && !jsonObj.get("AccountNumber").isJsonNull()) && !jsonObj.get("AccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccountNumber").toString()));
      }
      if ((jsonObj.get("BankID") != null && !jsonObj.get("BankID").isJsonNull()) && !jsonObj.get("BankID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BankID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BankID").toString()));
      }
      if ((jsonObj.get("CheckCardNumber") != null && !jsonObj.get("CheckCardNumber").isJsonNull()) && !jsonObj.get("CheckCardNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CheckCardNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CheckCardNumber").toString()));
      }
      if ((jsonObj.get("CheckNumber") != null && !jsonObj.get("CheckNumber").isJsonNull()) && !jsonObj.get("CheckNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CheckNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CheckNumber").toString()));
      }
      if ((jsonObj.get("Country") != null && !jsonObj.get("Country").isJsonNull()) && !jsonObj.get("Country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Country").toString()));
      }
      // validate the optional field `TrackData`
      if (jsonObj.get("TrackData") != null && !jsonObj.get("TrackData").isJsonNull()) {
        TrackData.validateJsonElement(jsonObj.get("TrackData"));
      }
      // validate the optional field `TypeCode`
      if (jsonObj.get("TypeCode") != null && !jsonObj.get("TypeCode").isJsonNull()) {
        TypeCode.validateJsonElement(jsonObj.get("TypeCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckData.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckData>() {
           @Override
           public void write(JsonWriter out, CheckData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckData
   * @throws IOException if the JSON string is invalid with respect to CheckData
   */
  public static CheckData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckData.class);
  }

  /**
   * Convert an instance of CheckData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

