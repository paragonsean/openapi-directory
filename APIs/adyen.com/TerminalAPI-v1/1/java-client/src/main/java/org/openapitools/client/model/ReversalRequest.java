/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.CustomerOrder;
import org.openapitools.client.model.OriginalPOITransaction;
import org.openapitools.client.model.ReversalReason;
import org.openapitools.client.model.SaleData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReversalRequest {
  public static final String SERIALIZED_NAME_CUSTOMER_ORDER = "CustomerOrder";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER)
  private CustomerOrder customerOrder;

  public static final String SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION = "OriginalPOITransaction";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION)
  private OriginalPOITransaction originalPOITransaction;

  public static final String SERIALIZED_NAME_REVERSAL_REASON = "ReversalReason";
  @SerializedName(SERIALIZED_NAME_REVERSAL_REASON)
  private ReversalReason reversalReason;

  public static final String SERIALIZED_NAME_REVERSED_AMOUNT = "ReversedAmount";
  @SerializedName(SERIALIZED_NAME_REVERSED_AMOUNT)
  private BigDecimal reversedAmount;

  public static final String SERIALIZED_NAME_SALE_DATA = "SaleData";
  @SerializedName(SERIALIZED_NAME_SALE_DATA)
  private SaleData saleData;

  public ReversalRequest() {
  }

  public ReversalRequest customerOrder(CustomerOrder customerOrder) {
    this.customerOrder = customerOrder;
    return this;
  }

  /**
   * Get customerOrder
   * @return customerOrder
   */
  @javax.annotation.Nullable
  public CustomerOrder getCustomerOrder() {
    return customerOrder;
  }

  public void setCustomerOrder(CustomerOrder customerOrder) {
    this.customerOrder = customerOrder;
  }


  public ReversalRequest originalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
    return this;
  }

  /**
   * Get originalPOITransaction
   * @return originalPOITransaction
   */
  @javax.annotation.Nonnull
  public OriginalPOITransaction getOriginalPOITransaction() {
    return originalPOITransaction;
  }

  public void setOriginalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
  }


  public ReversalRequest reversalReason(ReversalReason reversalReason) {
    this.reversalReason = reversalReason;
    return this;
  }

  /**
   * Get reversalReason
   * @return reversalReason
   */
  @javax.annotation.Nonnull
  public ReversalReason getReversalReason() {
    return reversalReason;
  }

  public void setReversalReason(ReversalReason reversalReason) {
    this.reversalReason = reversalReason;
  }


  public ReversalRequest reversedAmount(BigDecimal reversedAmount) {
    this.reversedAmount = reversedAmount;
    return this;
  }

  /**
   * ReversedAmount is implicitely the AuthorizedAmount if absent.
   * minimum: 0
   * maximum: 99999999.999999
   * @return reversedAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getReversedAmount() {
    return reversedAmount;
  }

  public void setReversedAmount(BigDecimal reversedAmount) {
    this.reversedAmount = reversedAmount;
  }


  public ReversalRequest saleData(SaleData saleData) {
    this.saleData = saleData;
    return this;
  }

  /**
   * Get saleData
   * @return saleData
   */
  @javax.annotation.Nullable
  public SaleData getSaleData() {
    return saleData;
  }

  public void setSaleData(SaleData saleData) {
    this.saleData = saleData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReversalRequest reversalRequest = (ReversalRequest) o;
    return Objects.equals(this.customerOrder, reversalRequest.customerOrder) &&
        Objects.equals(this.originalPOITransaction, reversalRequest.originalPOITransaction) &&
        Objects.equals(this.reversalReason, reversalRequest.reversalReason) &&
        Objects.equals(this.reversedAmount, reversalRequest.reversedAmount) &&
        Objects.equals(this.saleData, reversalRequest.saleData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerOrder, originalPOITransaction, reversalReason, reversedAmount, saleData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReversalRequest {\n");
    sb.append("    customerOrder: ").append(toIndentedString(customerOrder)).append("\n");
    sb.append("    originalPOITransaction: ").append(toIndentedString(originalPOITransaction)).append("\n");
    sb.append("    reversalReason: ").append(toIndentedString(reversalReason)).append("\n");
    sb.append("    reversedAmount: ").append(toIndentedString(reversedAmount)).append("\n");
    sb.append("    saleData: ").append(toIndentedString(saleData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerOrder");
    openapiFields.add("OriginalPOITransaction");
    openapiFields.add("ReversalReason");
    openapiFields.add("ReversedAmount");
    openapiFields.add("SaleData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OriginalPOITransaction");
    openapiRequiredFields.add("ReversalReason");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReversalRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReversalRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReversalRequest is not found in the empty JSON string", ReversalRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReversalRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReversalRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReversalRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CustomerOrder`
      if (jsonObj.get("CustomerOrder") != null && !jsonObj.get("CustomerOrder").isJsonNull()) {
        CustomerOrder.validateJsonElement(jsonObj.get("CustomerOrder"));
      }
      // validate the required field `OriginalPOITransaction`
      OriginalPOITransaction.validateJsonElement(jsonObj.get("OriginalPOITransaction"));
      // validate the required field `ReversalReason`
      ReversalReason.validateJsonElement(jsonObj.get("ReversalReason"));
      // validate the optional field `SaleData`
      if (jsonObj.get("SaleData") != null && !jsonObj.get("SaleData").isJsonNull()) {
        SaleData.validateJsonElement(jsonObj.get("SaleData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReversalRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReversalRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReversalRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReversalRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReversalRequest>() {
           @Override
           public void write(JsonWriter out, ReversalRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReversalRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReversalRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReversalRequest
   * @throws IOException if the JSON string is invalid with respect to ReversalRequest
   */
  public static ReversalRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReversalRequest.class);
  }

  /**
   * Convert an instance of ReversalRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

