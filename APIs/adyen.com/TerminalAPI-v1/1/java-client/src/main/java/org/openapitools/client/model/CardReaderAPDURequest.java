/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardReaderAPDURequest {
  public static final String SERIALIZED_NAME_AP_D_U_CLASS = "APDUClass";
  @SerializedName(SERIALIZED_NAME_AP_D_U_CLASS)
  private String apDUClass;

  public static final String SERIALIZED_NAME_AP_D_U_DATA = "APDUData";
  @SerializedName(SERIALIZED_NAME_AP_D_U_DATA)
  private String apDUData;

  public static final String SERIALIZED_NAME_AP_D_U_EXPECTED_LENGTH = "APDUExpectedLength";
  @SerializedName(SERIALIZED_NAME_AP_D_U_EXPECTED_LENGTH)
  private String apDUExpectedLength;

  public static final String SERIALIZED_NAME_AP_D_U_INSTRUCTION = "APDUInstruction";
  @SerializedName(SERIALIZED_NAME_AP_D_U_INSTRUCTION)
  private String apDUInstruction;

  public static final String SERIALIZED_NAME_AP_D_U_PAR1 = "APDUPar1";
  @SerializedName(SERIALIZED_NAME_AP_D_U_PAR1)
  private String apDUPar1;

  public static final String SERIALIZED_NAME_AP_D_U_PAR2 = "APDUPar2";
  @SerializedName(SERIALIZED_NAME_AP_D_U_PAR2)
  private String apDUPar2;

  public CardReaderAPDURequest() {
  }

  public CardReaderAPDURequest apDUClass(String apDUClass) {
    this.apDUClass = apDUClass;
    return this;
  }

  /**
   * Class field of the APDU command (CLA).
   * @return apDUClass
   */
  @javax.annotation.Nonnull
  public String getApDUClass() {
    return apDUClass;
  }

  public void setApDUClass(String apDUClass) {
    this.apDUClass = apDUClass;
  }


  public CardReaderAPDURequest apDUData(String apDUData) {
    this.apDUData = apDUData;
    return this;
  }

  /**
   * Data field of the APDU command (Lc + Data).
   * @return apDUData
   */
  @javax.annotation.Nullable
  public String getApDUData() {
    return apDUData;
  }

  public void setApDUData(String apDUData) {
    this.apDUData = apDUData;
  }


  public CardReaderAPDURequest apDUExpectedLength(String apDUExpectedLength) {
    this.apDUExpectedLength = apDUExpectedLength;
    return this;
  }

  /**
   * Expected length of the data field of the APDU response to the command (Le).
   * @return apDUExpectedLength
   */
  @javax.annotation.Nullable
  public String getApDUExpectedLength() {
    return apDUExpectedLength;
  }

  public void setApDUExpectedLength(String apDUExpectedLength) {
    this.apDUExpectedLength = apDUExpectedLength;
  }


  public CardReaderAPDURequest apDUInstruction(String apDUInstruction) {
    this.apDUInstruction = apDUInstruction;
    return this;
  }

  /**
   * Instruction field of the APDU command (INS).
   * @return apDUInstruction
   */
  @javax.annotation.Nonnull
  public String getApDUInstruction() {
    return apDUInstruction;
  }

  public void setApDUInstruction(String apDUInstruction) {
    this.apDUInstruction = apDUInstruction;
  }


  public CardReaderAPDURequest apDUPar1(String apDUPar1) {
    this.apDUPar1 = apDUPar1;
    return this;
  }

  /**
   * Parameter 1 field of the APDU command (P1).
   * @return apDUPar1
   */
  @javax.annotation.Nonnull
  public String getApDUPar1() {
    return apDUPar1;
  }

  public void setApDUPar1(String apDUPar1) {
    this.apDUPar1 = apDUPar1;
  }


  public CardReaderAPDURequest apDUPar2(String apDUPar2) {
    this.apDUPar2 = apDUPar2;
    return this;
  }

  /**
   * Parameter 2 field of the APDU command(P2).
   * @return apDUPar2
   */
  @javax.annotation.Nonnull
  public String getApDUPar2() {
    return apDUPar2;
  }

  public void setApDUPar2(String apDUPar2) {
    this.apDUPar2 = apDUPar2;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardReaderAPDURequest cardReaderAPDURequest = (CardReaderAPDURequest) o;
    return Objects.equals(this.apDUClass, cardReaderAPDURequest.apDUClass) &&
        Objects.equals(this.apDUData, cardReaderAPDURequest.apDUData) &&
        Objects.equals(this.apDUExpectedLength, cardReaderAPDURequest.apDUExpectedLength) &&
        Objects.equals(this.apDUInstruction, cardReaderAPDURequest.apDUInstruction) &&
        Objects.equals(this.apDUPar1, cardReaderAPDURequest.apDUPar1) &&
        Objects.equals(this.apDUPar2, cardReaderAPDURequest.apDUPar2);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apDUClass, apDUData, apDUExpectedLength, apDUInstruction, apDUPar1, apDUPar2);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardReaderAPDURequest {\n");
    sb.append("    apDUClass: ").append(toIndentedString(apDUClass)).append("\n");
    sb.append("    apDUData: ").append(toIndentedString(apDUData)).append("\n");
    sb.append("    apDUExpectedLength: ").append(toIndentedString(apDUExpectedLength)).append("\n");
    sb.append("    apDUInstruction: ").append(toIndentedString(apDUInstruction)).append("\n");
    sb.append("    apDUPar1: ").append(toIndentedString(apDUPar1)).append("\n");
    sb.append("    apDUPar2: ").append(toIndentedString(apDUPar2)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("APDUClass");
    openapiFields.add("APDUData");
    openapiFields.add("APDUExpectedLength");
    openapiFields.add("APDUInstruction");
    openapiFields.add("APDUPar1");
    openapiFields.add("APDUPar2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("APDUClass");
    openapiRequiredFields.add("APDUInstruction");
    openapiRequiredFields.add("APDUPar1");
    openapiRequiredFields.add("APDUPar2");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardReaderAPDURequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardReaderAPDURequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardReaderAPDURequest is not found in the empty JSON string", CardReaderAPDURequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardReaderAPDURequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardReaderAPDURequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardReaderAPDURequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("APDUClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUClass").toString()));
      }
      if ((jsonObj.get("APDUData") != null && !jsonObj.get("APDUData").isJsonNull()) && !jsonObj.get("APDUData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUData").toString()));
      }
      if ((jsonObj.get("APDUExpectedLength") != null && !jsonObj.get("APDUExpectedLength").isJsonNull()) && !jsonObj.get("APDUExpectedLength").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUExpectedLength` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUExpectedLength").toString()));
      }
      if (!jsonObj.get("APDUInstruction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUInstruction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUInstruction").toString()));
      }
      if (!jsonObj.get("APDUPar1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUPar1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUPar1").toString()));
      }
      if (!jsonObj.get("APDUPar2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `APDUPar2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("APDUPar2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardReaderAPDURequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardReaderAPDURequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardReaderAPDURequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardReaderAPDURequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CardReaderAPDURequest>() {
           @Override
           public void write(JsonWriter out, CardReaderAPDURequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardReaderAPDURequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardReaderAPDURequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardReaderAPDURequest
   * @throws IOException if the JSON string is invalid with respect to CardReaderAPDURequest
   */
  public static CardReaderAPDURequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardReaderAPDURequest.class);
  }

  /**
   * Convert an instance of CardReaderAPDURequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

