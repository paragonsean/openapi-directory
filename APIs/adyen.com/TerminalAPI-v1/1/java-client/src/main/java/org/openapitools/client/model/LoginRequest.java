/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SaleSoftware;
import org.openapitools.client.model.SaleTerminalData;
import org.openapitools.client.model.TokenRequestedType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoginRequest {
  /**
   * Gets or Sets customerOrderReq
   */
  @JsonAdapter(CustomerOrderReqEnum.Adapter.class)
  public enum CustomerOrderReqEnum {
    BOTH("Both"),
    
    CLOSED("Closed"),
    
    OPEN("Open");

    private String value;

    CustomerOrderReqEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerOrderReqEnum fromValue(String value) {
      for (CustomerOrderReqEnum b : CustomerOrderReqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerOrderReqEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerOrderReqEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerOrderReqEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerOrderReqEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerOrderReqEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_REQ = "CustomerOrderReq";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_REQ)
  private List<CustomerOrderReqEnum> customerOrderReq = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private OffsetDateTime dateTime;

  public static final String SERIALIZED_NAME_OPERATOR_I_D = "OperatorID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_I_D)
  private String operatorID;

  public static final String SERIALIZED_NAME_OPERATOR_LANGUAGE = "OperatorLanguage";
  @SerializedName(SERIALIZED_NAME_OPERATOR_LANGUAGE)
  private String operatorLanguage;

  public static final String SERIALIZED_NAME_PO_I_SERIAL_NUMBER = "POISerialNumber";
  @SerializedName(SERIALIZED_NAME_PO_I_SERIAL_NUMBER)
  private String poISerialNumber;

  public static final String SERIALIZED_NAME_SALE_SOFTWARE = "SaleSoftware";
  @SerializedName(SERIALIZED_NAME_SALE_SOFTWARE)
  private SaleSoftware saleSoftware;

  public static final String SERIALIZED_NAME_SALE_TERMINAL_DATA = "SaleTerminalData";
  @SerializedName(SERIALIZED_NAME_SALE_TERMINAL_DATA)
  private SaleTerminalData saleTerminalData;

  public static final String SERIALIZED_NAME_SHIFT_NUMBER = "ShiftNumber";
  @SerializedName(SERIALIZED_NAME_SHIFT_NUMBER)
  private String shiftNumber;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTED_TYPE = "TokenRequestedType";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTED_TYPE)
  private TokenRequestedType tokenRequestedType;

  public static final String SERIALIZED_NAME_TRAINING_MODE_FLAG = "TrainingModeFlag";
  @SerializedName(SERIALIZED_NAME_TRAINING_MODE_FLAG)
  private Boolean trainingModeFlag = false;

  public LoginRequest() {
  }

  public LoginRequest customerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
    return this;
  }

  public LoginRequest addCustomerOrderReqItem(CustomerOrderReqEnum customerOrderReqItem) {
    if (this.customerOrderReq == null) {
      this.customerOrderReq = new ArrayList<>();
    }
    this.customerOrderReq.add(customerOrderReqItem);
    return this;
  }

  /**
   * Get customerOrderReq
   * @return customerOrderReq
   */
  @javax.annotation.Nullable
  public List<CustomerOrderReqEnum> getCustomerOrderReq() {
    return customerOrderReq;
  }

  public void setCustomerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
  }


  public LoginRequest dateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Date and Time.
   * @return dateTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDateTime() {
    return dateTime;
  }

  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public LoginRequest operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * 4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation.
   * @return operatorID
   */
  @javax.annotation.Nullable
  public String getOperatorID() {
    return operatorID;
  }

  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }


  public LoginRequest operatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
    return this;
  }

  /**
   * Default value for Device type displays.
   * @return operatorLanguage
   */
  @javax.annotation.Nonnull
  public String getOperatorLanguage() {
    return operatorLanguage;
  }

  public void setOperatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
  }


  public LoginRequest poISerialNumber(String poISerialNumber) {
    this.poISerialNumber = poISerialNumber;
    return this;
  }

  /**
   * If the login involve a POI Terminal and not the first Login to the POI System.
   * @return poISerialNumber
   */
  @javax.annotation.Nullable
  public String getPoISerialNumber() {
    return poISerialNumber;
  }

  public void setPoISerialNumber(String poISerialNumber) {
    this.poISerialNumber = poISerialNumber;
  }


  public LoginRequest saleSoftware(SaleSoftware saleSoftware) {
    this.saleSoftware = saleSoftware;
    return this;
  }

  /**
   * Get saleSoftware
   * @return saleSoftware
   */
  @javax.annotation.Nonnull
  public SaleSoftware getSaleSoftware() {
    return saleSoftware;
  }

  public void setSaleSoftware(SaleSoftware saleSoftware) {
    this.saleSoftware = saleSoftware;
  }


  public LoginRequest saleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
    return this;
  }

  /**
   * Get saleTerminalData
   * @return saleTerminalData
   */
  @javax.annotation.Nullable
  public SaleTerminalData getSaleTerminalData() {
    return saleTerminalData;
  }

  public void setSaleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
  }


  public LoginRequest shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * Same as OperatorID.
   * @return shiftNumber
   */
  @javax.annotation.Nullable
  public String getShiftNumber() {
    return shiftNumber;
  }

  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }


  public LoginRequest tokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
    return this;
  }

  /**
   * Get tokenRequestedType
   * @return tokenRequestedType
   */
  @javax.annotation.Nullable
  public TokenRequestedType getTokenRequestedType() {
    return tokenRequestedType;
  }

  public void setTokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
  }


  public LoginRequest trainingModeFlag(Boolean trainingModeFlag) {
    this.trainingModeFlag = trainingModeFlag;
    return this;
  }

  /**
   * The POI does not realise the transaction with the Acquirer.
   * @return trainingModeFlag
   */
  @javax.annotation.Nullable
  public Boolean getTrainingModeFlag() {
    return trainingModeFlag;
  }

  public void setTrainingModeFlag(Boolean trainingModeFlag) {
    this.trainingModeFlag = trainingModeFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginRequest loginRequest = (LoginRequest) o;
    return Objects.equals(this.customerOrderReq, loginRequest.customerOrderReq) &&
        Objects.equals(this.dateTime, loginRequest.dateTime) &&
        Objects.equals(this.operatorID, loginRequest.operatorID) &&
        Objects.equals(this.operatorLanguage, loginRequest.operatorLanguage) &&
        Objects.equals(this.poISerialNumber, loginRequest.poISerialNumber) &&
        Objects.equals(this.saleSoftware, loginRequest.saleSoftware) &&
        Objects.equals(this.saleTerminalData, loginRequest.saleTerminalData) &&
        Objects.equals(this.shiftNumber, loginRequest.shiftNumber) &&
        Objects.equals(this.tokenRequestedType, loginRequest.tokenRequestedType) &&
        Objects.equals(this.trainingModeFlag, loginRequest.trainingModeFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerOrderReq, dateTime, operatorID, operatorLanguage, poISerialNumber, saleSoftware, saleTerminalData, shiftNumber, tokenRequestedType, trainingModeFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginRequest {\n");
    sb.append("    customerOrderReq: ").append(toIndentedString(customerOrderReq)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    operatorLanguage: ").append(toIndentedString(operatorLanguage)).append("\n");
    sb.append("    poISerialNumber: ").append(toIndentedString(poISerialNumber)).append("\n");
    sb.append("    saleSoftware: ").append(toIndentedString(saleSoftware)).append("\n");
    sb.append("    saleTerminalData: ").append(toIndentedString(saleTerminalData)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    tokenRequestedType: ").append(toIndentedString(tokenRequestedType)).append("\n");
    sb.append("    trainingModeFlag: ").append(toIndentedString(trainingModeFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerOrderReq");
    openapiFields.add("DateTime");
    openapiFields.add("OperatorID");
    openapiFields.add("OperatorLanguage");
    openapiFields.add("POISerialNumber");
    openapiFields.add("SaleSoftware");
    openapiFields.add("SaleTerminalData");
    openapiFields.add("ShiftNumber");
    openapiFields.add("TokenRequestedType");
    openapiFields.add("TrainingModeFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DateTime");
    openapiRequiredFields.add("OperatorLanguage");
    openapiRequiredFields.add("SaleSoftware");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginRequest is not found in the empty JSON string", LoginRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoginRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("CustomerOrderReq") != null && !jsonObj.get("CustomerOrderReq").isJsonNull() && !jsonObj.get("CustomerOrderReq").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderReq` to be an array in the JSON string but got `%s`", jsonObj.get("CustomerOrderReq").toString()));
      }
      if ((jsonObj.get("OperatorID") != null && !jsonObj.get("OperatorID").isJsonNull()) && !jsonObj.get("OperatorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorID").toString()));
      }
      if (!jsonObj.get("OperatorLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorLanguage").toString()));
      }
      if ((jsonObj.get("POISerialNumber") != null && !jsonObj.get("POISerialNumber").isJsonNull()) && !jsonObj.get("POISerialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POISerialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POISerialNumber").toString()));
      }
      // validate the required field `SaleSoftware`
      SaleSoftware.validateJsonElement(jsonObj.get("SaleSoftware"));
      // validate the optional field `SaleTerminalData`
      if (jsonObj.get("SaleTerminalData") != null && !jsonObj.get("SaleTerminalData").isJsonNull()) {
        SaleTerminalData.validateJsonElement(jsonObj.get("SaleTerminalData"));
      }
      if ((jsonObj.get("ShiftNumber") != null && !jsonObj.get("ShiftNumber").isJsonNull()) && !jsonObj.get("ShiftNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShiftNumber").toString()));
      }
      // validate the optional field `TokenRequestedType`
      if (jsonObj.get("TokenRequestedType") != null && !jsonObj.get("TokenRequestedType").isJsonNull()) {
        TokenRequestedType.validateJsonElement(jsonObj.get("TokenRequestedType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginRequest>() {
           @Override
           public void write(JsonWriter out, LoginRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginRequest
   * @throws IOException if the JSON string is invalid with respect to LoginRequest
   */
  public static LoginRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginRequest.class);
  }

  /**
   * Convert an instance of LoginRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

