/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmountsResp;
import org.openapitools.client.model.CapturedSignature;
import org.openapitools.client.model.CurrencyConversion;
import org.openapitools.client.model.Instalment;
import org.openapitools.client.model.PaymentAcquirerData;
import org.openapitools.client.model.PaymentInstrumentData;
import org.openapitools.client.model.PaymentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentResult {
  public static final String SERIALIZED_NAME_AMOUNTS_RESP = "AmountsResp";
  @SerializedName(SERIALIZED_NAME_AMOUNTS_RESP)
  private AmountsResp amountsResp;

  /**
   * Gets or Sets authenticationMethod
   */
  @JsonAdapter(AuthenticationMethodEnum.Adapter.class)
  public enum AuthenticationMethodEnum {
    BYPASS("Bypass"),
    
    MANUAL_VERIFICATION("ManualVerification"),
    
    MERCHANT_AUTHENTICATION("MerchantAuthentication"),
    
    OFFLINE_PIN("OfflinePIN"),
    
    ONLINE_PIN("OnlinePIN"),
    
    PAPER_SIGNATURE("PaperSignature"),
    
    SECURE_CERTIFICATE("SecureCertificate"),
    
    SECURE_NO_CERTIFICATE("SecureNoCertificate"),
    
    SECURED_CHANNEL("SecuredChannel"),
    
    SIGNATURE_CAPTURE("SignatureCapture"),
    
    UNKNOWN_METHOD("UnknownMethod");

    private String value;

    AuthenticationMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AuthenticationMethodEnum fromValue(String value) {
      for (AuthenticationMethodEnum b : AuthenticationMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AuthenticationMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AuthenticationMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AuthenticationMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AuthenticationMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AuthenticationMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTHENTICATION_METHOD = "AuthenticationMethod";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_METHOD)
  private List<AuthenticationMethodEnum> authenticationMethod = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPTURED_SIGNATURE = "CapturedSignature";
  @SerializedName(SERIALIZED_NAME_CAPTURED_SIGNATURE)
  private CapturedSignature capturedSignature;

  public static final String SERIALIZED_NAME_CURRENCY_CONVERSION = "CurrencyConversion";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CONVERSION)
  private List<CurrencyConversion> currencyConversion = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMER_LANGUAGE = "CustomerLanguage";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LANGUAGE)
  private String customerLanguage;

  public static final String SERIALIZED_NAME_INSTALMENT = "Instalment";
  @SerializedName(SERIALIZED_NAME_INSTALMENT)
  private Instalment instalment;

  public static final String SERIALIZED_NAME_MERCHANT_OVERRIDE_FLAG = "MerchantOverrideFlag";
  @SerializedName(SERIALIZED_NAME_MERCHANT_OVERRIDE_FLAG)
  private Boolean merchantOverrideFlag = false;

  public static final String SERIALIZED_NAME_ONLINE_FLAG = "OnlineFlag";
  @SerializedName(SERIALIZED_NAME_ONLINE_FLAG)
  private Boolean onlineFlag = true;

  public static final String SERIALIZED_NAME_PAYMENT_ACQUIRER_DATA = "PaymentAcquirerData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACQUIRER_DATA)
  private PaymentAcquirerData paymentAcquirerData;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA)
  private PaymentInstrumentData paymentInstrumentData;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "PaymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_PROTECTED_SIGNATURE = "ProtectedSignature";
  @SerializedName(SERIALIZED_NAME_PROTECTED_SIGNATURE)
  private String protectedSignature;

  public static final String SERIALIZED_NAME_VALIDITY_DATE = "ValidityDate";
  @SerializedName(SERIALIZED_NAME_VALIDITY_DATE)
  private LocalDate validityDate;

  public PaymentResult() {
  }

  public PaymentResult amountsResp(AmountsResp amountsResp) {
    this.amountsResp = amountsResp;
    return this;
  }

  /**
   * Get amountsResp
   * @return amountsResp
   */
  @javax.annotation.Nullable
  public AmountsResp getAmountsResp() {
    return amountsResp;
  }

  public void setAmountsResp(AmountsResp amountsResp) {
    this.amountsResp = amountsResp;
  }


  public PaymentResult authenticationMethod(List<AuthenticationMethodEnum> authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
    return this;
  }

  public PaymentResult addAuthenticationMethodItem(AuthenticationMethodEnum authenticationMethodItem) {
    if (this.authenticationMethod == null) {
      this.authenticationMethod = new ArrayList<>();
    }
    this.authenticationMethod.add(authenticationMethodItem);
    return this;
  }

  /**
   * Get authenticationMethod
   * @return authenticationMethod
   */
  @javax.annotation.Nullable
  public List<AuthenticationMethodEnum> getAuthenticationMethod() {
    return authenticationMethod;
  }

  public void setAuthenticationMethod(List<AuthenticationMethodEnum> authenticationMethod) {
    this.authenticationMethod = authenticationMethod;
  }


  public PaymentResult capturedSignature(CapturedSignature capturedSignature) {
    this.capturedSignature = capturedSignature;
    return this;
  }

  /**
   * Get capturedSignature
   * @return capturedSignature
   */
  @javax.annotation.Nullable
  public CapturedSignature getCapturedSignature() {
    return capturedSignature;
  }

  public void setCapturedSignature(CapturedSignature capturedSignature) {
    this.capturedSignature = capturedSignature;
  }


  public PaymentResult currencyConversion(List<CurrencyConversion> currencyConversion) {
    this.currencyConversion = currencyConversion;
    return this;
  }

  public PaymentResult addCurrencyConversionItem(CurrencyConversion currencyConversionItem) {
    if (this.currencyConversion == null) {
      this.currencyConversion = new ArrayList<>();
    }
    this.currencyConversion.add(currencyConversionItem);
    return this;
  }

  /**
   * Get currencyConversion
   * @return currencyConversion
   */
  @javax.annotation.Nullable
  public List<CurrencyConversion> getCurrencyConversion() {
    return currencyConversion;
  }

  public void setCurrencyConversion(List<CurrencyConversion> currencyConversion) {
    this.currencyConversion = currencyConversion;
  }


  public PaymentResult customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * Get customerLanguage
   * @return customerLanguage
   */
  @javax.annotation.Nullable
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }


  public PaymentResult instalment(Instalment instalment) {
    this.instalment = instalment;
    return this;
  }

  /**
   * Get instalment
   * @return instalment
   */
  @javax.annotation.Nullable
  public Instalment getInstalment() {
    return instalment;
  }

  public void setInstalment(Instalment instalment) {
    this.instalment = instalment;
  }


  public PaymentResult merchantOverrideFlag(Boolean merchantOverrideFlag) {
    this.merchantOverrideFlag = merchantOverrideFlag;
    return this;
  }

  /**
   * Get merchantOverrideFlag
   * @return merchantOverrideFlag
   */
  @javax.annotation.Nullable
  public Boolean getMerchantOverrideFlag() {
    return merchantOverrideFlag;
  }

  public void setMerchantOverrideFlag(Boolean merchantOverrideFlag) {
    this.merchantOverrideFlag = merchantOverrideFlag;
  }


  public PaymentResult onlineFlag(Boolean onlineFlag) {
    this.onlineFlag = onlineFlag;
    return this;
  }

  /**
   * Get onlineFlag
   * @return onlineFlag
   */
  @javax.annotation.Nullable
  public Boolean getOnlineFlag() {
    return onlineFlag;
  }

  public void setOnlineFlag(Boolean onlineFlag) {
    this.onlineFlag = onlineFlag;
  }


  public PaymentResult paymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
    return this;
  }

  /**
   * Get paymentAcquirerData
   * @return paymentAcquirerData
   */
  @javax.annotation.Nullable
  public PaymentAcquirerData getPaymentAcquirerData() {
    return paymentAcquirerData;
  }

  public void setPaymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
  }


  public PaymentResult paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData
   */
  @javax.annotation.Nullable
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }


  public PaymentResult paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public PaymentResult protectedSignature(String protectedSignature) {
    this.protectedSignature = protectedSignature;
    return this;
  }

  /**
   * Get protectedSignature
   * @return protectedSignature
   */
  @javax.annotation.Nullable
  public String getProtectedSignature() {
    return protectedSignature;
  }

  public void setProtectedSignature(String protectedSignature) {
    this.protectedSignature = protectedSignature;
  }


  public PaymentResult validityDate(LocalDate validityDate) {
    this.validityDate = validityDate;
    return this;
  }

  /**
   * Get validityDate
   * @return validityDate
   */
  @javax.annotation.Nullable
  public LocalDate getValidityDate() {
    return validityDate;
  }

  public void setValidityDate(LocalDate validityDate) {
    this.validityDate = validityDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentResult paymentResult = (PaymentResult) o;
    return Objects.equals(this.amountsResp, paymentResult.amountsResp) &&
        Objects.equals(this.authenticationMethod, paymentResult.authenticationMethod) &&
        Objects.equals(this.capturedSignature, paymentResult.capturedSignature) &&
        Objects.equals(this.currencyConversion, paymentResult.currencyConversion) &&
        Objects.equals(this.customerLanguage, paymentResult.customerLanguage) &&
        Objects.equals(this.instalment, paymentResult.instalment) &&
        Objects.equals(this.merchantOverrideFlag, paymentResult.merchantOverrideFlag) &&
        Objects.equals(this.onlineFlag, paymentResult.onlineFlag) &&
        Objects.equals(this.paymentAcquirerData, paymentResult.paymentAcquirerData) &&
        Objects.equals(this.paymentInstrumentData, paymentResult.paymentInstrumentData) &&
        Objects.equals(this.paymentType, paymentResult.paymentType) &&
        Objects.equals(this.protectedSignature, paymentResult.protectedSignature) &&
        Objects.equals(this.validityDate, paymentResult.validityDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountsResp, authenticationMethod, capturedSignature, currencyConversion, customerLanguage, instalment, merchantOverrideFlag, onlineFlag, paymentAcquirerData, paymentInstrumentData, paymentType, protectedSignature, validityDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentResult {\n");
    sb.append("    amountsResp: ").append(toIndentedString(amountsResp)).append("\n");
    sb.append("    authenticationMethod: ").append(toIndentedString(authenticationMethod)).append("\n");
    sb.append("    capturedSignature: ").append(toIndentedString(capturedSignature)).append("\n");
    sb.append("    currencyConversion: ").append(toIndentedString(currencyConversion)).append("\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    instalment: ").append(toIndentedString(instalment)).append("\n");
    sb.append("    merchantOverrideFlag: ").append(toIndentedString(merchantOverrideFlag)).append("\n");
    sb.append("    onlineFlag: ").append(toIndentedString(onlineFlag)).append("\n");
    sb.append("    paymentAcquirerData: ").append(toIndentedString(paymentAcquirerData)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    protectedSignature: ").append(toIndentedString(protectedSignature)).append("\n");
    sb.append("    validityDate: ").append(toIndentedString(validityDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountsResp");
    openapiFields.add("AuthenticationMethod");
    openapiFields.add("CapturedSignature");
    openapiFields.add("CurrencyConversion");
    openapiFields.add("CustomerLanguage");
    openapiFields.add("Instalment");
    openapiFields.add("MerchantOverrideFlag");
    openapiFields.add("OnlineFlag");
    openapiFields.add("PaymentAcquirerData");
    openapiFields.add("PaymentInstrumentData");
    openapiFields.add("PaymentType");
    openapiFields.add("ProtectedSignature");
    openapiFields.add("ValidityDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentResult is not found in the empty JSON string", PaymentResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AmountsResp`
      if (jsonObj.get("AmountsResp") != null && !jsonObj.get("AmountsResp").isJsonNull()) {
        AmountsResp.validateJsonElement(jsonObj.get("AmountsResp"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AuthenticationMethod") != null && !jsonObj.get("AuthenticationMethod").isJsonNull() && !jsonObj.get("AuthenticationMethod").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AuthenticationMethod` to be an array in the JSON string but got `%s`", jsonObj.get("AuthenticationMethod").toString()));
      }
      // validate the optional field `CapturedSignature`
      if (jsonObj.get("CapturedSignature") != null && !jsonObj.get("CapturedSignature").isJsonNull()) {
        CapturedSignature.validateJsonElement(jsonObj.get("CapturedSignature"));
      }
      if (jsonObj.get("CurrencyConversion") != null && !jsonObj.get("CurrencyConversion").isJsonNull()) {
        JsonArray jsonArraycurrencyConversion = jsonObj.getAsJsonArray("CurrencyConversion");
        if (jsonArraycurrencyConversion != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CurrencyConversion").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CurrencyConversion` to be an array in the JSON string but got `%s`", jsonObj.get("CurrencyConversion").toString()));
          }

          // validate the optional field `CurrencyConversion` (array)
          for (int i = 0; i < jsonArraycurrencyConversion.size(); i++) {
            CurrencyConversion.validateJsonElement(jsonArraycurrencyConversion.get(i));
          };
        }
      }
      if ((jsonObj.get("CustomerLanguage") != null && !jsonObj.get("CustomerLanguage").isJsonNull()) && !jsonObj.get("CustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerLanguage").toString()));
      }
      // validate the optional field `Instalment`
      if (jsonObj.get("Instalment") != null && !jsonObj.get("Instalment").isJsonNull()) {
        Instalment.validateJsonElement(jsonObj.get("Instalment"));
      }
      // validate the optional field `PaymentAcquirerData`
      if (jsonObj.get("PaymentAcquirerData") != null && !jsonObj.get("PaymentAcquirerData").isJsonNull()) {
        PaymentAcquirerData.validateJsonElement(jsonObj.get("PaymentAcquirerData"));
      }
      // validate the optional field `PaymentInstrumentData`
      if (jsonObj.get("PaymentInstrumentData") != null && !jsonObj.get("PaymentInstrumentData").isJsonNull()) {
        PaymentInstrumentData.validateJsonElement(jsonObj.get("PaymentInstrumentData"));
      }
      // validate the optional field `PaymentType`
      if (jsonObj.get("PaymentType") != null && !jsonObj.get("PaymentType").isJsonNull()) {
        PaymentType.validateJsonElement(jsonObj.get("PaymentType"));
      }
      if ((jsonObj.get("ProtectedSignature") != null && !jsonObj.get("ProtectedSignature").isJsonNull()) && !jsonObj.get("ProtectedSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtectedSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtectedSignature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentResult.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentResult>() {
           @Override
           public void write(JsonWriter out, PaymentResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentResult
   * @throws IOException if the JSON string is invalid with respect to PaymentResult
   */
  public static PaymentResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentResult.class);
  }

  /**
   * Convert an instance of PaymentResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

