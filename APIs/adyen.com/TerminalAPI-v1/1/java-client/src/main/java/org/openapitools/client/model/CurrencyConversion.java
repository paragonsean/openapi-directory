/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.ConvertedAmount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CurrencyConversion {
  public static final String SERIALIZED_NAME_COMMISSION = "Commission";
  @SerializedName(SERIALIZED_NAME_COMMISSION)
  private BigDecimal commission;

  public static final String SERIALIZED_NAME_CONVERTED_AMOUNT = "ConvertedAmount";
  @SerializedName(SERIALIZED_NAME_CONVERTED_AMOUNT)
  private ConvertedAmount convertedAmount;

  public static final String SERIALIZED_NAME_CUSTOMER_APPROVED_FLAG = "CustomerApprovedFlag";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_APPROVED_FLAG)
  private Boolean customerApprovedFlag = true;

  public static final String SERIALIZED_NAME_DECLARATION = "Declaration";
  @SerializedName(SERIALIZED_NAME_DECLARATION)
  private String declaration;

  public static final String SERIALIZED_NAME_MARKUP = "Markup";
  @SerializedName(SERIALIZED_NAME_MARKUP)
  private String markup;

  public static final String SERIALIZED_NAME_RATE = "Rate";
  @SerializedName(SERIALIZED_NAME_RATE)
  private String rate;

  public CurrencyConversion() {
  }

  public CurrencyConversion commission(BigDecimal commission) {
    this.commission = commission;
    return this;
  }

  /**
   * Commission for a currency conversion.
   * minimum: 0
   * maximum: 99999999.999999
   * @return commission
   */
  @javax.annotation.Nullable
  public BigDecimal getCommission() {
    return commission;
  }

  public void setCommission(BigDecimal commission) {
    this.commission = commission;
  }


  public CurrencyConversion convertedAmount(ConvertedAmount convertedAmount) {
    this.convertedAmount = convertedAmount;
    return this;
  }

  /**
   * Get convertedAmount
   * @return convertedAmount
   */
  @javax.annotation.Nonnull
  public ConvertedAmount getConvertedAmount() {
    return convertedAmount;
  }

  public void setConvertedAmount(ConvertedAmount convertedAmount) {
    this.convertedAmount = convertedAmount;
  }


  public CurrencyConversion customerApprovedFlag(Boolean customerApprovedFlag) {
    this.customerApprovedFlag = customerApprovedFlag;
    return this;
  }

  /**
   * Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.
   * @return customerApprovedFlag
   */
  @javax.annotation.Nullable
  public Boolean getCustomerApprovedFlag() {
    return customerApprovedFlag;
  }

  public void setCustomerApprovedFlag(Boolean customerApprovedFlag) {
    this.customerApprovedFlag = customerApprovedFlag;
  }


  public CurrencyConversion declaration(String declaration) {
    this.declaration = declaration;
    return this;
  }

  /**
   * If a declaration has to be presented to the customer.
   * @return declaration
   */
  @javax.annotation.Nullable
  public String getDeclaration() {
    return declaration;
  }

  public void setDeclaration(String declaration) {
    this.declaration = declaration;
  }


  public CurrencyConversion markup(String markup) {
    this.markup = markup;
    return this;
  }

  /**
   * Markup of a currency conversion amount as a percentage.
   * @return markup
   */
  @javax.annotation.Nullable
  public String getMarkup() {
    return markup;
  }

  public void setMarkup(String markup) {
    this.markup = markup;
  }


  public CurrencyConversion rate(String rate) {
    this.rate = rate;
    return this;
  }

  /**
   * Rate of currency conversion.
   * @return rate
   */
  @javax.annotation.Nullable
  public String getRate() {
    return rate;
  }

  public void setRate(String rate) {
    this.rate = rate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CurrencyConversion currencyConversion = (CurrencyConversion) o;
    return Objects.equals(this.commission, currencyConversion.commission) &&
        Objects.equals(this.convertedAmount, currencyConversion.convertedAmount) &&
        Objects.equals(this.customerApprovedFlag, currencyConversion.customerApprovedFlag) &&
        Objects.equals(this.declaration, currencyConversion.declaration) &&
        Objects.equals(this.markup, currencyConversion.markup) &&
        Objects.equals(this.rate, currencyConversion.rate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commission, convertedAmount, customerApprovedFlag, declaration, markup, rate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CurrencyConversion {\n");
    sb.append("    commission: ").append(toIndentedString(commission)).append("\n");
    sb.append("    convertedAmount: ").append(toIndentedString(convertedAmount)).append("\n");
    sb.append("    customerApprovedFlag: ").append(toIndentedString(customerApprovedFlag)).append("\n");
    sb.append("    declaration: ").append(toIndentedString(declaration)).append("\n");
    sb.append("    markup: ").append(toIndentedString(markup)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Commission");
    openapiFields.add("ConvertedAmount");
    openapiFields.add("CustomerApprovedFlag");
    openapiFields.add("Declaration");
    openapiFields.add("Markup");
    openapiFields.add("Rate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ConvertedAmount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CurrencyConversion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CurrencyConversion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CurrencyConversion is not found in the empty JSON string", CurrencyConversion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CurrencyConversion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CurrencyConversion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CurrencyConversion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `ConvertedAmount`
      ConvertedAmount.validateJsonElement(jsonObj.get("ConvertedAmount"));
      if ((jsonObj.get("Declaration") != null && !jsonObj.get("Declaration").isJsonNull()) && !jsonObj.get("Declaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Declaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Declaration").toString()));
      }
      if ((jsonObj.get("Markup") != null && !jsonObj.get("Markup").isJsonNull()) && !jsonObj.get("Markup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Markup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Markup").toString()));
      }
      if ((jsonObj.get("Rate") != null && !jsonObj.get("Rate").isJsonNull()) && !jsonObj.get("Rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Rate").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CurrencyConversion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CurrencyConversion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CurrencyConversion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CurrencyConversion.class));

       return (TypeAdapter<T>) new TypeAdapter<CurrencyConversion>() {
           @Override
           public void write(JsonWriter out, CurrencyConversion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CurrencyConversion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CurrencyConversion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CurrencyConversion
   * @throws IOException if the JSON string is invalid with respect to CurrencyConversion
   */
  public static CurrencyConversion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CurrencyConversion.class);
  }

  /**
   * Convert an instance of CurrencyConversion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

