/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReconciliationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReconciliationRequest {
  public static final String SERIALIZED_NAME_ACQUIRER_I_D = "AcquirerID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_I_D)
  private List<Integer> acquirerID = new ArrayList<>();

  public static final String SERIALIZED_NAME_PO_I_RECONCILIATION_I_D = "POIReconciliationID";
  @SerializedName(SERIALIZED_NAME_PO_I_RECONCILIATION_I_D)
  private Integer poIReconciliationID;

  public static final String SERIALIZED_NAME_RECONCILIATION_TYPE = "ReconciliationType";
  @SerializedName(SERIALIZED_NAME_RECONCILIATION_TYPE)
  private ReconciliationType reconciliationType;

  public ReconciliationRequest() {
  }

  public ReconciliationRequest acquirerID(List<Integer> acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

  public ReconciliationRequest addAcquirerIDItem(Integer acquirerIDItem) {
    if (this.acquirerID == null) {
      this.acquirerID = new ArrayList<>();
    }
    this.acquirerID.add(acquirerIDItem);
    return this;
  }

  /**
   * Get acquirerID
   * @return acquirerID
   */
  @javax.annotation.Nullable
  public List<Integer> getAcquirerID() {
    return acquirerID;
  }

  public void setAcquirerID(List<Integer> acquirerID) {
    this.acquirerID = acquirerID;
  }


  public ReconciliationRequest poIReconciliationID(Integer poIReconciliationID) {
    this.poIReconciliationID = poIReconciliationID;
    return this;
  }

  /**
   * Absent if ReconciliationType is not PreviousReconciliation.
   * @return poIReconciliationID
   */
  @javax.annotation.Nullable
  public Integer getPoIReconciliationID() {
    return poIReconciliationID;
  }

  public void setPoIReconciliationID(Integer poIReconciliationID) {
    this.poIReconciliationID = poIReconciliationID;
  }


  public ReconciliationRequest reconciliationType(ReconciliationType reconciliationType) {
    this.reconciliationType = reconciliationType;
    return this;
  }

  /**
   * Get reconciliationType
   * @return reconciliationType
   */
  @javax.annotation.Nonnull
  public ReconciliationType getReconciliationType() {
    return reconciliationType;
  }

  public void setReconciliationType(ReconciliationType reconciliationType) {
    this.reconciliationType = reconciliationType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationRequest reconciliationRequest = (ReconciliationRequest) o;
    return Objects.equals(this.acquirerID, reconciliationRequest.acquirerID) &&
        Objects.equals(this.poIReconciliationID, reconciliationRequest.poIReconciliationID) &&
        Objects.equals(this.reconciliationType, reconciliationRequest.reconciliationType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerID, poIReconciliationID, reconciliationType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationRequest {\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    poIReconciliationID: ").append(toIndentedString(poIReconciliationID)).append("\n");
    sb.append("    reconciliationType: ").append(toIndentedString(reconciliationType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquirerID");
    openapiFields.add("POIReconciliationID");
    openapiFields.add("ReconciliationType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ReconciliationType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReconciliationRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReconciliationRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReconciliationRequest is not found in the empty JSON string", ReconciliationRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReconciliationRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReconciliationRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReconciliationRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AcquirerID") != null && !jsonObj.get("AcquirerID").isJsonNull() && !jsonObj.get("AcquirerID").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcquirerID` to be an array in the JSON string but got `%s`", jsonObj.get("AcquirerID").toString()));
      }
      // validate the required field `ReconciliationType`
      ReconciliationType.validateJsonElement(jsonObj.get("ReconciliationType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReconciliationRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReconciliationRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReconciliationRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReconciliationRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<ReconciliationRequest>() {
           @Override
           public void write(JsonWriter out, ReconciliationRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReconciliationRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReconciliationRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReconciliationRequest
   * @throws IOException if the JSON string is invalid with respect to ReconciliationRequest
   */
  public static ReconciliationRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReconciliationRequest.class);
  }

  /**
   * Convert an instance of ReconciliationRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

