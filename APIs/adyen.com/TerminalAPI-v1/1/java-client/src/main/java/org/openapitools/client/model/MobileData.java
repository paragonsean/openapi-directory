/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Geolocation;
import org.openapitools.client.model.SensitiveMobileData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Mobile phone is used as a payment instrument for the transaction. Information related to the mobile for the payment transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MobileData {
  public static final String SERIALIZED_NAME_GEOLOCATION = "Geolocation";
  @SerializedName(SERIALIZED_NAME_GEOLOCATION)
  private Geolocation geolocation;

  public static final String SERIALIZED_NAME_MASKED_M_S_I_S_D_N = "MaskedMSISDN";
  @SerializedName(SERIALIZED_NAME_MASKED_M_S_I_S_D_N)
  private Integer maskedMSISDN;

  public static final String SERIALIZED_NAME_MOBILE_COUNTRY_CODE = "MobileCountryCode";
  @SerializedName(SERIALIZED_NAME_MOBILE_COUNTRY_CODE)
  private Integer mobileCountryCode;

  public static final String SERIALIZED_NAME_MOBILE_NETWORK_CODE = "MobileNetworkCode";
  @SerializedName(SERIALIZED_NAME_MOBILE_NETWORK_CODE)
  private Integer mobileNetworkCode;

  public static final String SERIALIZED_NAME_PROTECTED_MOBILE_DATA = "ProtectedMobileData";
  @SerializedName(SERIALIZED_NAME_PROTECTED_MOBILE_DATA)
  private String protectedMobileData;

  public static final String SERIALIZED_NAME_SENSITIVE_MOBILE_DATA = "SensitiveMobileData";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_MOBILE_DATA)
  private SensitiveMobileData sensitiveMobileData;

  public MobileData() {
  }

  public MobileData geolocation(Geolocation geolocation) {
    this.geolocation = geolocation;
    return this;
  }

  /**
   * Get geolocation
   * @return geolocation
   */
  @javax.annotation.Nullable
  public Geolocation getGeolocation() {
    return geolocation;
  }

  public void setGeolocation(Geolocation geolocation) {
    this.geolocation = geolocation;
  }


  public MobileData maskedMSISDN(Integer maskedMSISDN) {
    this.maskedMSISDN = maskedMSISDN;
    return this;
  }

  /**
   * If data available.
   * @return maskedMSISDN
   */
  @javax.annotation.Nullable
  public Integer getMaskedMSISDN() {
    return maskedMSISDN;
  }

  public void setMaskedMSISDN(Integer maskedMSISDN) {
    this.maskedMSISDN = maskedMSISDN;
  }


  public MobileData mobileCountryCode(Integer mobileCountryCode) {
    this.mobileCountryCode = mobileCountryCode;
    return this;
  }

  /**
   * If data available.
   * minimum: 3
   * maximum: 3
   * @return mobileCountryCode
   */
  @javax.annotation.Nullable
  public Integer getMobileCountryCode() {
    return mobileCountryCode;
  }

  public void setMobileCountryCode(Integer mobileCountryCode) {
    this.mobileCountryCode = mobileCountryCode;
  }


  public MobileData mobileNetworkCode(Integer mobileNetworkCode) {
    this.mobileNetworkCode = mobileNetworkCode;
    return this;
  }

  /**
   * If data available.
   * minimum: 2
   * maximum: 3
   * @return mobileNetworkCode
   */
  @javax.annotation.Nullable
  public Integer getMobileNetworkCode() {
    return mobileNetworkCode;
  }

  public void setMobileNetworkCode(Integer mobileNetworkCode) {
    this.mobileNetworkCode = mobileNetworkCode;
  }


  public MobileData protectedMobileData(String protectedMobileData) {
    this.protectedMobileData = protectedMobileData;
    return this;
  }

  /**
   * SensitiveMobileData.
   * @return protectedMobileData
   */
  @javax.annotation.Nullable
  public String getProtectedMobileData() {
    return protectedMobileData;
  }

  public void setProtectedMobileData(String protectedMobileData) {
    this.protectedMobileData = protectedMobileData;
  }


  public MobileData sensitiveMobileData(SensitiveMobileData sensitiveMobileData) {
    this.sensitiveMobileData = sensitiveMobileData;
    return this;
  }

  /**
   * Get sensitiveMobileData
   * @return sensitiveMobileData
   */
  @javax.annotation.Nullable
  public SensitiveMobileData getSensitiveMobileData() {
    return sensitiveMobileData;
  }

  public void setSensitiveMobileData(SensitiveMobileData sensitiveMobileData) {
    this.sensitiveMobileData = sensitiveMobileData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MobileData mobileData = (MobileData) o;
    return Objects.equals(this.geolocation, mobileData.geolocation) &&
        Objects.equals(this.maskedMSISDN, mobileData.maskedMSISDN) &&
        Objects.equals(this.mobileCountryCode, mobileData.mobileCountryCode) &&
        Objects.equals(this.mobileNetworkCode, mobileData.mobileNetworkCode) &&
        Objects.equals(this.protectedMobileData, mobileData.protectedMobileData) &&
        Objects.equals(this.sensitiveMobileData, mobileData.sensitiveMobileData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(geolocation, maskedMSISDN, mobileCountryCode, mobileNetworkCode, protectedMobileData, sensitiveMobileData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MobileData {\n");
    sb.append("    geolocation: ").append(toIndentedString(geolocation)).append("\n");
    sb.append("    maskedMSISDN: ").append(toIndentedString(maskedMSISDN)).append("\n");
    sb.append("    mobileCountryCode: ").append(toIndentedString(mobileCountryCode)).append("\n");
    sb.append("    mobileNetworkCode: ").append(toIndentedString(mobileNetworkCode)).append("\n");
    sb.append("    protectedMobileData: ").append(toIndentedString(protectedMobileData)).append("\n");
    sb.append("    sensitiveMobileData: ").append(toIndentedString(sensitiveMobileData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Geolocation");
    openapiFields.add("MaskedMSISDN");
    openapiFields.add("MobileCountryCode");
    openapiFields.add("MobileNetworkCode");
    openapiFields.add("ProtectedMobileData");
    openapiFields.add("SensitiveMobileData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MobileData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MobileData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MobileData is not found in the empty JSON string", MobileData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MobileData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MobileData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Geolocation`
      if (jsonObj.get("Geolocation") != null && !jsonObj.get("Geolocation").isJsonNull()) {
        Geolocation.validateJsonElement(jsonObj.get("Geolocation"));
      }
      if ((jsonObj.get("ProtectedMobileData") != null && !jsonObj.get("ProtectedMobileData").isJsonNull()) && !jsonObj.get("ProtectedMobileData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtectedMobileData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtectedMobileData").toString()));
      }
      // validate the optional field `SensitiveMobileData`
      if (jsonObj.get("SensitiveMobileData") != null && !jsonObj.get("SensitiveMobileData").isJsonNull()) {
        SensitiveMobileData.validateJsonElement(jsonObj.get("SensitiveMobileData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MobileData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MobileData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MobileData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MobileData.class));

       return (TypeAdapter<T>) new TypeAdapter<MobileData>() {
           @Override
           public void write(JsonWriter out, MobileData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MobileData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MobileData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MobileData
   * @throws IOException if the JSON string is invalid with respect to MobileData
   */
  public static MobileData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MobileData.class);
  }

  /**
   * Convert an instance of MobileData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

