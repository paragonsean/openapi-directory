/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CardAcquisitionResponse;
import org.openapitools.client.model.CardReaderAPDUResponse;
import org.openapitools.client.model.LoyaltyResponse;
import org.openapitools.client.model.PaymentResponse;
import org.openapitools.client.model.ReversalResponse;
import org.openapitools.client.model.StoredValueResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RepeatedResponseMessageBody
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RepeatedResponseMessageBody {
  public static final String SERIALIZED_NAME_CARD_ACQUISITION_RESPONSE = "CardAcquisitionResponse";
  @SerializedName(SERIALIZED_NAME_CARD_ACQUISITION_RESPONSE)
  private CardAcquisitionResponse cardAcquisitionResponse;

  public static final String SERIALIZED_NAME_CARD_READER_A_P_D_U_RESPONSE = "CardReaderAPDUResponse";
  @SerializedName(SERIALIZED_NAME_CARD_READER_A_P_D_U_RESPONSE)
  private CardReaderAPDUResponse cardReaderAPDUResponse;

  public static final String SERIALIZED_NAME_LOYALTY_RESPONSE = "LoyaltyResponse";
  @SerializedName(SERIALIZED_NAME_LOYALTY_RESPONSE)
  private LoyaltyResponse loyaltyResponse;

  public static final String SERIALIZED_NAME_PAYMENT_RESPONSE = "PaymentResponse";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RESPONSE)
  private PaymentResponse paymentResponse;

  public static final String SERIALIZED_NAME_REVERSAL_RESPONSE = "ReversalResponse";
  @SerializedName(SERIALIZED_NAME_REVERSAL_RESPONSE)
  private ReversalResponse reversalResponse;

  public static final String SERIALIZED_NAME_STORED_VALUE_RESPONSE = "StoredValueResponse";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_RESPONSE)
  private StoredValueResponse storedValueResponse;

  public RepeatedResponseMessageBody() {
  }

  public RepeatedResponseMessageBody cardAcquisitionResponse(CardAcquisitionResponse cardAcquisitionResponse) {
    this.cardAcquisitionResponse = cardAcquisitionResponse;
    return this;
  }

  /**
   * Get cardAcquisitionResponse
   * @return cardAcquisitionResponse
   */
  @javax.annotation.Nullable
  public CardAcquisitionResponse getCardAcquisitionResponse() {
    return cardAcquisitionResponse;
  }

  public void setCardAcquisitionResponse(CardAcquisitionResponse cardAcquisitionResponse) {
    this.cardAcquisitionResponse = cardAcquisitionResponse;
  }


  public RepeatedResponseMessageBody cardReaderAPDUResponse(CardReaderAPDUResponse cardReaderAPDUResponse) {
    this.cardReaderAPDUResponse = cardReaderAPDUResponse;
    return this;
  }

  /**
   * Get cardReaderAPDUResponse
   * @return cardReaderAPDUResponse
   */
  @javax.annotation.Nullable
  public CardReaderAPDUResponse getCardReaderAPDUResponse() {
    return cardReaderAPDUResponse;
  }

  public void setCardReaderAPDUResponse(CardReaderAPDUResponse cardReaderAPDUResponse) {
    this.cardReaderAPDUResponse = cardReaderAPDUResponse;
  }


  public RepeatedResponseMessageBody loyaltyResponse(LoyaltyResponse loyaltyResponse) {
    this.loyaltyResponse = loyaltyResponse;
    return this;
  }

  /**
   * Get loyaltyResponse
   * @return loyaltyResponse
   */
  @javax.annotation.Nullable
  public LoyaltyResponse getLoyaltyResponse() {
    return loyaltyResponse;
  }

  public void setLoyaltyResponse(LoyaltyResponse loyaltyResponse) {
    this.loyaltyResponse = loyaltyResponse;
  }


  public RepeatedResponseMessageBody paymentResponse(PaymentResponse paymentResponse) {
    this.paymentResponse = paymentResponse;
    return this;
  }

  /**
   * Get paymentResponse
   * @return paymentResponse
   */
  @javax.annotation.Nullable
  public PaymentResponse getPaymentResponse() {
    return paymentResponse;
  }

  public void setPaymentResponse(PaymentResponse paymentResponse) {
    this.paymentResponse = paymentResponse;
  }


  public RepeatedResponseMessageBody reversalResponse(ReversalResponse reversalResponse) {
    this.reversalResponse = reversalResponse;
    return this;
  }

  /**
   * Get reversalResponse
   * @return reversalResponse
   */
  @javax.annotation.Nullable
  public ReversalResponse getReversalResponse() {
    return reversalResponse;
  }

  public void setReversalResponse(ReversalResponse reversalResponse) {
    this.reversalResponse = reversalResponse;
  }


  public RepeatedResponseMessageBody storedValueResponse(StoredValueResponse storedValueResponse) {
    this.storedValueResponse = storedValueResponse;
    return this;
  }

  /**
   * Get storedValueResponse
   * @return storedValueResponse
   */
  @javax.annotation.Nullable
  public StoredValueResponse getStoredValueResponse() {
    return storedValueResponse;
  }

  public void setStoredValueResponse(StoredValueResponse storedValueResponse) {
    this.storedValueResponse = storedValueResponse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepeatedResponseMessageBody repeatedResponseMessageBody = (RepeatedResponseMessageBody) o;
    return Objects.equals(this.cardAcquisitionResponse, repeatedResponseMessageBody.cardAcquisitionResponse) &&
        Objects.equals(this.cardReaderAPDUResponse, repeatedResponseMessageBody.cardReaderAPDUResponse) &&
        Objects.equals(this.loyaltyResponse, repeatedResponseMessageBody.loyaltyResponse) &&
        Objects.equals(this.paymentResponse, repeatedResponseMessageBody.paymentResponse) &&
        Objects.equals(this.reversalResponse, repeatedResponseMessageBody.reversalResponse) &&
        Objects.equals(this.storedValueResponse, repeatedResponseMessageBody.storedValueResponse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAcquisitionResponse, cardReaderAPDUResponse, loyaltyResponse, paymentResponse, reversalResponse, storedValueResponse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepeatedResponseMessageBody {\n");
    sb.append("    cardAcquisitionResponse: ").append(toIndentedString(cardAcquisitionResponse)).append("\n");
    sb.append("    cardReaderAPDUResponse: ").append(toIndentedString(cardReaderAPDUResponse)).append("\n");
    sb.append("    loyaltyResponse: ").append(toIndentedString(loyaltyResponse)).append("\n");
    sb.append("    paymentResponse: ").append(toIndentedString(paymentResponse)).append("\n");
    sb.append("    reversalResponse: ").append(toIndentedString(reversalResponse)).append("\n");
    sb.append("    storedValueResponse: ").append(toIndentedString(storedValueResponse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardAcquisitionResponse");
    openapiFields.add("CardReaderAPDUResponse");
    openapiFields.add("LoyaltyResponse");
    openapiFields.add("PaymentResponse");
    openapiFields.add("ReversalResponse");
    openapiFields.add("StoredValueResponse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RepeatedResponseMessageBody
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RepeatedResponseMessageBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RepeatedResponseMessageBody is not found in the empty JSON string", RepeatedResponseMessageBody.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RepeatedResponseMessageBody.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RepeatedResponseMessageBody` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CardAcquisitionResponse`
      if (jsonObj.get("CardAcquisitionResponse") != null && !jsonObj.get("CardAcquisitionResponse").isJsonNull()) {
        CardAcquisitionResponse.validateJsonElement(jsonObj.get("CardAcquisitionResponse"));
      }
      // validate the optional field `CardReaderAPDUResponse`
      if (jsonObj.get("CardReaderAPDUResponse") != null && !jsonObj.get("CardReaderAPDUResponse").isJsonNull()) {
        CardReaderAPDUResponse.validateJsonElement(jsonObj.get("CardReaderAPDUResponse"));
      }
      // validate the optional field `LoyaltyResponse`
      if (jsonObj.get("LoyaltyResponse") != null && !jsonObj.get("LoyaltyResponse").isJsonNull()) {
        LoyaltyResponse.validateJsonElement(jsonObj.get("LoyaltyResponse"));
      }
      // validate the optional field `PaymentResponse`
      if (jsonObj.get("PaymentResponse") != null && !jsonObj.get("PaymentResponse").isJsonNull()) {
        PaymentResponse.validateJsonElement(jsonObj.get("PaymentResponse"));
      }
      // validate the optional field `ReversalResponse`
      if (jsonObj.get("ReversalResponse") != null && !jsonObj.get("ReversalResponse").isJsonNull()) {
        ReversalResponse.validateJsonElement(jsonObj.get("ReversalResponse"));
      }
      // validate the optional field `StoredValueResponse`
      if (jsonObj.get("StoredValueResponse") != null && !jsonObj.get("StoredValueResponse").isJsonNull()) {
        StoredValueResponse.validateJsonElement(jsonObj.get("StoredValueResponse"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RepeatedResponseMessageBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RepeatedResponseMessageBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RepeatedResponseMessageBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RepeatedResponseMessageBody.class));

       return (TypeAdapter<T>) new TypeAdapter<RepeatedResponseMessageBody>() {
           @Override
           public void write(JsonWriter out, RepeatedResponseMessageBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RepeatedResponseMessageBody read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RepeatedResponseMessageBody given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RepeatedResponseMessageBody
   * @throws IOException if the JSON string is invalid with respect to RepeatedResponseMessageBody
   */
  public static RepeatedResponseMessageBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RepeatedResponseMessageBody.class);
  }

  /**
   * Convert an instance of RepeatedResponseMessageBody to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

