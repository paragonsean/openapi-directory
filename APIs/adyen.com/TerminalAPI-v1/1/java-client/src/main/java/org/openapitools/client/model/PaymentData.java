/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.CustomerOrder;
import org.openapitools.client.model.Instalment;
import org.openapitools.client.model.PaymentInstrumentData;
import org.openapitools.client.model.PaymentType;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentData {
  public static final String SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE = "CardAcquisitionReference";
  @SerializedName(SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE)
  private TransactionIDType cardAcquisitionReference;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER = "CustomerOrder";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER)
  private CustomerOrder customerOrder;

  public static final String SERIALIZED_NAME_INSTALMENT = "Instalment";
  @SerializedName(SERIALIZED_NAME_INSTALMENT)
  private Instalment instalment;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA)
  private PaymentInstrumentData paymentInstrumentData;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "PaymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_REQUESTED_VALIDITY_DATE = "RequestedValidityDate";
  @SerializedName(SERIALIZED_NAME_REQUESTED_VALIDITY_DATE)
  private LocalDate requestedValidityDate;

  public static final String SERIALIZED_NAME_SPLIT_PAYMENT_FLAG = "SplitPaymentFlag";
  @SerializedName(SERIALIZED_NAME_SPLIT_PAYMENT_FLAG)
  private Boolean splitPaymentFlag = false;

  public PaymentData() {
  }

  public PaymentData cardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
    return this;
  }

  /**
   * Get cardAcquisitionReference
   * @return cardAcquisitionReference
   */
  @javax.annotation.Nullable
  public TransactionIDType getCardAcquisitionReference() {
    return cardAcquisitionReference;
  }

  public void setCardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
  }


  public PaymentData customerOrder(CustomerOrder customerOrder) {
    this.customerOrder = customerOrder;
    return this;
  }

  /**
   * Get customerOrder
   * @return customerOrder
   */
  @javax.annotation.Nullable
  public CustomerOrder getCustomerOrder() {
    return customerOrder;
  }

  public void setCustomerOrder(CustomerOrder customerOrder) {
    this.customerOrder = customerOrder;
  }


  public PaymentData instalment(Instalment instalment) {
    this.instalment = instalment;
    return this;
  }

  /**
   * Get instalment
   * @return instalment
   */
  @javax.annotation.Nullable
  public Instalment getInstalment() {
    return instalment;
  }

  public void setInstalment(Instalment instalment) {
    this.instalment = instalment;
  }


  public PaymentData paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData
   */
  @javax.annotation.Nullable
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }


  public PaymentData paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public PaymentData requestedValidityDate(LocalDate requestedValidityDate) {
    this.requestedValidityDate = requestedValidityDate;
    return this;
  }

  /**
   * Get requestedValidityDate
   * @return requestedValidityDate
   */
  @javax.annotation.Nullable
  public LocalDate getRequestedValidityDate() {
    return requestedValidityDate;
  }

  public void setRequestedValidityDate(LocalDate requestedValidityDate) {
    this.requestedValidityDate = requestedValidityDate;
  }


  public PaymentData splitPaymentFlag(Boolean splitPaymentFlag) {
    this.splitPaymentFlag = splitPaymentFlag;
    return this;
  }

  /**
   * Get splitPaymentFlag
   * @return splitPaymentFlag
   */
  @javax.annotation.Nullable
  public Boolean getSplitPaymentFlag() {
    return splitPaymentFlag;
  }

  public void setSplitPaymentFlag(Boolean splitPaymentFlag) {
    this.splitPaymentFlag = splitPaymentFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentData paymentData = (PaymentData) o;
    return Objects.equals(this.cardAcquisitionReference, paymentData.cardAcquisitionReference) &&
        Objects.equals(this.customerOrder, paymentData.customerOrder) &&
        Objects.equals(this.instalment, paymentData.instalment) &&
        Objects.equals(this.paymentInstrumentData, paymentData.paymentInstrumentData) &&
        Objects.equals(this.paymentType, paymentData.paymentType) &&
        Objects.equals(this.requestedValidityDate, paymentData.requestedValidityDate) &&
        Objects.equals(this.splitPaymentFlag, paymentData.splitPaymentFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAcquisitionReference, customerOrder, instalment, paymentInstrumentData, paymentType, requestedValidityDate, splitPaymentFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentData {\n");
    sb.append("    cardAcquisitionReference: ").append(toIndentedString(cardAcquisitionReference)).append("\n");
    sb.append("    customerOrder: ").append(toIndentedString(customerOrder)).append("\n");
    sb.append("    instalment: ").append(toIndentedString(instalment)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    requestedValidityDate: ").append(toIndentedString(requestedValidityDate)).append("\n");
    sb.append("    splitPaymentFlag: ").append(toIndentedString(splitPaymentFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardAcquisitionReference");
    openapiFields.add("CustomerOrder");
    openapiFields.add("Instalment");
    openapiFields.add("PaymentInstrumentData");
    openapiFields.add("PaymentType");
    openapiFields.add("RequestedValidityDate");
    openapiFields.add("SplitPaymentFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentData is not found in the empty JSON string", PaymentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CardAcquisitionReference`
      if (jsonObj.get("CardAcquisitionReference") != null && !jsonObj.get("CardAcquisitionReference").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("CardAcquisitionReference"));
      }
      // validate the optional field `CustomerOrder`
      if (jsonObj.get("CustomerOrder") != null && !jsonObj.get("CustomerOrder").isJsonNull()) {
        CustomerOrder.validateJsonElement(jsonObj.get("CustomerOrder"));
      }
      // validate the optional field `Instalment`
      if (jsonObj.get("Instalment") != null && !jsonObj.get("Instalment").isJsonNull()) {
        Instalment.validateJsonElement(jsonObj.get("Instalment"));
      }
      // validate the optional field `PaymentInstrumentData`
      if (jsonObj.get("PaymentInstrumentData") != null && !jsonObj.get("PaymentInstrumentData").isJsonNull()) {
        PaymentInstrumentData.validateJsonElement(jsonObj.get("PaymentInstrumentData"));
      }
      // validate the optional field `PaymentType`
      if (jsonObj.get("PaymentType") != null && !jsonObj.get("PaymentType").isJsonNull()) {
        PaymentType.validateJsonElement(jsonObj.get("PaymentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentData>() {
           @Override
           public void write(JsonWriter out, PaymentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentData
   * @throws IOException if the JSON string is invalid with respect to PaymentData
   */
  public static PaymentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentData.class);
  }

  /**
   * Convert an instance of PaymentData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

