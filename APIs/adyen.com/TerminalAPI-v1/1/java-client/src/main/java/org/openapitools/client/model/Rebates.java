/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SaleItemRebate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Rebates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rebates {
  public static final String SERIALIZED_NAME_REBATE_LABEL = "RebateLabel";
  @SerializedName(SERIALIZED_NAME_REBATE_LABEL)
  private String rebateLabel;

  public static final String SERIALIZED_NAME_SALE_ITEM_REBATE = "SaleItemRebate";
  @SerializedName(SERIALIZED_NAME_SALE_ITEM_REBATE)
  private List<SaleItemRebate> saleItemRebate = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_REBATE = "TotalRebate";
  @SerializedName(SERIALIZED_NAME_TOTAL_REBATE)
  private BigDecimal totalRebate;

  public Rebates() {
  }

  public Rebates rebateLabel(String rebateLabel) {
    this.rebateLabel = rebateLabel;
    return this;
  }

  /**
   * Get rebateLabel
   * @return rebateLabel
   */
  @javax.annotation.Nullable
  public String getRebateLabel() {
    return rebateLabel;
  }

  public void setRebateLabel(String rebateLabel) {
    this.rebateLabel = rebateLabel;
  }


  public Rebates saleItemRebate(List<SaleItemRebate> saleItemRebate) {
    this.saleItemRebate = saleItemRebate;
    return this;
  }

  public Rebates addSaleItemRebateItem(SaleItemRebate saleItemRebateItem) {
    if (this.saleItemRebate == null) {
      this.saleItemRebate = new ArrayList<>();
    }
    this.saleItemRebate.add(saleItemRebateItem);
    return this;
  }

  /**
   * Get saleItemRebate
   * @return saleItemRebate
   */
  @javax.annotation.Nullable
  public List<SaleItemRebate> getSaleItemRebate() {
    return saleItemRebate;
  }

  public void setSaleItemRebate(List<SaleItemRebate> saleItemRebate) {
    this.saleItemRebate = saleItemRebate;
  }


  public Rebates totalRebate(BigDecimal totalRebate) {
    this.totalRebate = totalRebate;
    return this;
  }

  /**
   * Get totalRebate
   * minimum: 0
   * maximum: 99999999.999999
   * @return totalRebate
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalRebate() {
    return totalRebate;
  }

  public void setTotalRebate(BigDecimal totalRebate) {
    this.totalRebate = totalRebate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rebates rebates = (Rebates) o;
    return Objects.equals(this.rebateLabel, rebates.rebateLabel) &&
        Objects.equals(this.saleItemRebate, rebates.saleItemRebate) &&
        Objects.equals(this.totalRebate, rebates.totalRebate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rebateLabel, saleItemRebate, totalRebate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rebates {\n");
    sb.append("    rebateLabel: ").append(toIndentedString(rebateLabel)).append("\n");
    sb.append("    saleItemRebate: ").append(toIndentedString(saleItemRebate)).append("\n");
    sb.append("    totalRebate: ").append(toIndentedString(totalRebate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("RebateLabel");
    openapiFields.add("SaleItemRebate");
    openapiFields.add("TotalRebate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rebates
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rebates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rebates is not found in the empty JSON string", Rebates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rebates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rebates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("RebateLabel") != null && !jsonObj.get("RebateLabel").isJsonNull()) && !jsonObj.get("RebateLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RebateLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RebateLabel").toString()));
      }
      if (jsonObj.get("SaleItemRebate") != null && !jsonObj.get("SaleItemRebate").isJsonNull()) {
        JsonArray jsonArraysaleItemRebate = jsonObj.getAsJsonArray("SaleItemRebate");
        if (jsonArraysaleItemRebate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SaleItemRebate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SaleItemRebate` to be an array in the JSON string but got `%s`", jsonObj.get("SaleItemRebate").toString()));
          }

          // validate the optional field `SaleItemRebate` (array)
          for (int i = 0; i < jsonArraysaleItemRebate.size(); i++) {
            SaleItemRebate.validateJsonElement(jsonArraysaleItemRebate.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rebates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rebates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rebates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rebates.class));

       return (TypeAdapter<T>) new TypeAdapter<Rebates>() {
           @Override
           public void write(JsonWriter out, Rebates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rebates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rebates given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rebates
   * @throws IOException if the JSON string is invalid with respect to Rebates
   */
  public static Rebates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rebates.class);
  }

  /**
   * Convert an instance of Rebates to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

