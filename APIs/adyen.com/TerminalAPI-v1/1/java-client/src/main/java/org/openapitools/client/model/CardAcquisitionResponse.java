/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyAccount;
import org.openapitools.client.model.POIData;
import org.openapitools.client.model.PaymentInstrumentData;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.SaleData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardAcquisitionResponse {
  public static final String SERIALIZED_NAME_CUSTOMER_LANGUAGE = "CustomerLanguage";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LANGUAGE)
  private String customerLanguage;

  public static final String SERIALIZED_NAME_LOYALTY_ACCOUNT = "LoyaltyAccount";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCOUNT)
  private List<LoyaltyAccount> loyaltyAccount = new ArrayList<>();

  public static final String SERIALIZED_NAME_PO_I_DATA = "POIData";
  @SerializedName(SERIALIZED_NAME_PO_I_DATA)
  private POIData poIData;

  public static final String SERIALIZED_NAME_PAYMENT_BRAND = "PaymentBrand";
  @SerializedName(SERIALIZED_NAME_PAYMENT_BRAND)
  private List<String> paymentBrand = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA)
  private PaymentInstrumentData paymentInstrumentData;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private Response response;

  public static final String SERIALIZED_NAME_SALE_DATA = "SaleData";
  @SerializedName(SERIALIZED_NAME_SALE_DATA)
  private SaleData saleData;

  public CardAcquisitionResponse() {
  }

  public CardAcquisitionResponse customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * Data related to the POI System.
   * @return customerLanguage
   */
  @javax.annotation.Nullable
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }


  public CardAcquisitionResponse loyaltyAccount(List<LoyaltyAccount> loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
    return this;
  }

  public CardAcquisitionResponse addLoyaltyAccountItem(LoyaltyAccount loyaltyAccountItem) {
    if (this.loyaltyAccount == null) {
      this.loyaltyAccount = new ArrayList<>();
    }
    this.loyaltyAccount.add(loyaltyAccountItem);
    return this;
  }

  /**
   * Get loyaltyAccount
   * @return loyaltyAccount
   */
  @javax.annotation.Nullable
  public List<LoyaltyAccount> getLoyaltyAccount() {
    return loyaltyAccount;
  }

  public void setLoyaltyAccount(List<LoyaltyAccount> loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
  }


  public CardAcquisitionResponse poIData(POIData poIData) {
    this.poIData = poIData;
    return this;
  }

  /**
   * Get poIData
   * @return poIData
   */
  @javax.annotation.Nonnull
  public POIData getPoIData() {
    return poIData;
  }

  public void setPoIData(POIData poIData) {
    this.poIData = poIData;
  }


  public CardAcquisitionResponse paymentBrand(List<String> paymentBrand) {
    this.paymentBrand = paymentBrand;
    return this;
  }

  public CardAcquisitionResponse addPaymentBrandItem(String paymentBrandItem) {
    if (this.paymentBrand == null) {
      this.paymentBrand = new ArrayList<>();
    }
    this.paymentBrand.add(paymentBrandItem);
    return this;
  }

  /**
   * Get paymentBrand
   * @return paymentBrand
   */
  @javax.annotation.Nullable
  public List<String> getPaymentBrand() {
    return paymentBrand;
  }

  public void setPaymentBrand(List<String> paymentBrand) {
    this.paymentBrand = paymentBrand;
  }


  public CardAcquisitionResponse paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData
   */
  @javax.annotation.Nullable
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }


  public CardAcquisitionResponse response(Response response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public Response getResponse() {
    return response;
  }

  public void setResponse(Response response) {
    this.response = response;
  }


  public CardAcquisitionResponse saleData(SaleData saleData) {
    this.saleData = saleData;
    return this;
  }

  /**
   * Get saleData
   * @return saleData
   */
  @javax.annotation.Nonnull
  public SaleData getSaleData() {
    return saleData;
  }

  public void setSaleData(SaleData saleData) {
    this.saleData = saleData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardAcquisitionResponse cardAcquisitionResponse = (CardAcquisitionResponse) o;
    return Objects.equals(this.customerLanguage, cardAcquisitionResponse.customerLanguage) &&
        Objects.equals(this.loyaltyAccount, cardAcquisitionResponse.loyaltyAccount) &&
        Objects.equals(this.poIData, cardAcquisitionResponse.poIData) &&
        Objects.equals(this.paymentBrand, cardAcquisitionResponse.paymentBrand) &&
        Objects.equals(this.paymentInstrumentData, cardAcquisitionResponse.paymentInstrumentData) &&
        Objects.equals(this.response, cardAcquisitionResponse.response) &&
        Objects.equals(this.saleData, cardAcquisitionResponse.saleData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerLanguage, loyaltyAccount, poIData, paymentBrand, paymentInstrumentData, response, saleData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardAcquisitionResponse {\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    loyaltyAccount: ").append(toIndentedString(loyaltyAccount)).append("\n");
    sb.append("    poIData: ").append(toIndentedString(poIData)).append("\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    saleData: ").append(toIndentedString(saleData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerLanguage");
    openapiFields.add("LoyaltyAccount");
    openapiFields.add("POIData");
    openapiFields.add("PaymentBrand");
    openapiFields.add("PaymentInstrumentData");
    openapiFields.add("Response");
    openapiFields.add("SaleData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("POIData");
    openapiRequiredFields.add("Response");
    openapiRequiredFields.add("SaleData");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardAcquisitionResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardAcquisitionResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardAcquisitionResponse is not found in the empty JSON string", CardAcquisitionResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardAcquisitionResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardAcquisitionResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardAcquisitionResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CustomerLanguage") != null && !jsonObj.get("CustomerLanguage").isJsonNull()) && !jsonObj.get("CustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerLanguage").toString()));
      }
      if (jsonObj.get("LoyaltyAccount") != null && !jsonObj.get("LoyaltyAccount").isJsonNull()) {
        JsonArray jsonArrayloyaltyAccount = jsonObj.getAsJsonArray("LoyaltyAccount");
        if (jsonArrayloyaltyAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LoyaltyAccount").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LoyaltyAccount` to be an array in the JSON string but got `%s`", jsonObj.get("LoyaltyAccount").toString()));
          }

          // validate the optional field `LoyaltyAccount` (array)
          for (int i = 0; i < jsonArrayloyaltyAccount.size(); i++) {
            LoyaltyAccount.validateJsonElement(jsonArrayloyaltyAccount.get(i));
          };
        }
      }
      // validate the required field `POIData`
      POIData.validateJsonElement(jsonObj.get("POIData"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("PaymentBrand") != null && !jsonObj.get("PaymentBrand").isJsonNull() && !jsonObj.get("PaymentBrand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentBrand` to be an array in the JSON string but got `%s`", jsonObj.get("PaymentBrand").toString()));
      }
      // validate the optional field `PaymentInstrumentData`
      if (jsonObj.get("PaymentInstrumentData") != null && !jsonObj.get("PaymentInstrumentData").isJsonNull()) {
        PaymentInstrumentData.validateJsonElement(jsonObj.get("PaymentInstrumentData"));
      }
      // validate the required field `Response`
      Response.validateJsonElement(jsonObj.get("Response"));
      // validate the required field `SaleData`
      SaleData.validateJsonElement(jsonObj.get("SaleData"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardAcquisitionResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardAcquisitionResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardAcquisitionResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardAcquisitionResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CardAcquisitionResponse>() {
           @Override
           public void write(JsonWriter out, CardAcquisitionResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardAcquisitionResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardAcquisitionResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardAcquisitionResponse
   * @throws IOException if the JSON string is invalid with respect to CardAcquisitionResponse
   */
  public static CardAcquisitionResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardAcquisitionResponse.class);
  }

  /**
   * Convert an instance of CardAcquisitionResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

