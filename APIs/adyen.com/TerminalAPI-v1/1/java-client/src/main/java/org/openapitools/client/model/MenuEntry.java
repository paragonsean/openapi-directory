/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MenuEntryTag;
import org.openapitools.client.model.OutputFormat;
import org.openapitools.client.model.OutputText;
import org.openapitools.client.model.PredefinedContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu. An entryof the menu to present to the Cashier.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MenuEntry {
  public static final String SERIALIZED_NAME_DEFAULT_SELECTED_FLAG = "DefaultSelectedFlag";
  @SerializedName(SERIALIZED_NAME_DEFAULT_SELECTED_FLAG)
  private Boolean defaultSelectedFlag = false;

  public static final String SERIALIZED_NAME_MENU_ENTRY_TAG = "MenuEntryTag";
  @SerializedName(SERIALIZED_NAME_MENU_ENTRY_TAG)
  private MenuEntryTag menuEntryTag;

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "OutputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private OutputFormat outputFormat;

  public static final String SERIALIZED_NAME_OUTPUT_TEXT = "OutputText";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TEXT)
  private List<OutputText> outputText = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTPUT_X_H_T_M_L = "OutputXHTML";
  @SerializedName(SERIALIZED_NAME_OUTPUT_X_H_T_M_L)
  private String outputXHTML;

  public static final String SERIALIZED_NAME_PREDEFINED_CONTENT = "PredefinedContent";
  @SerializedName(SERIALIZED_NAME_PREDEFINED_CONTENT)
  private PredefinedContent predefinedContent;

  public MenuEntry() {
  }

  public MenuEntry defaultSelectedFlag(Boolean defaultSelectedFlag) {
    this.defaultSelectedFlag = defaultSelectedFlag;
    return this;
  }

  /**
   * Get defaultSelectedFlag
   * @return defaultSelectedFlag
   */
  @javax.annotation.Nullable
  public Boolean getDefaultSelectedFlag() {
    return defaultSelectedFlag;
  }

  public void setDefaultSelectedFlag(Boolean defaultSelectedFlag) {
    this.defaultSelectedFlag = defaultSelectedFlag;
  }


  public MenuEntry menuEntryTag(MenuEntryTag menuEntryTag) {
    this.menuEntryTag = menuEntryTag;
    return this;
  }

  /**
   * Get menuEntryTag
   * @return menuEntryTag
   */
  @javax.annotation.Nullable
  public MenuEntryTag getMenuEntryTag() {
    return menuEntryTag;
  }

  public void setMenuEntryTag(MenuEntryTag menuEntryTag) {
    this.menuEntryTag = menuEntryTag;
  }


  public MenuEntry outputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public OutputFormat getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(OutputFormat outputFormat) {
    this.outputFormat = outputFormat;
  }


  public MenuEntry outputText(List<OutputText> outputText) {
    this.outputText = outputText;
    return this;
  }

  public MenuEntry addOutputTextItem(OutputText outputTextItem) {
    if (this.outputText == null) {
      this.outputText = new ArrayList<>();
    }
    this.outputText.add(outputTextItem);
    return this;
  }

  /**
   * Get outputText
   * @return outputText
   */
  @javax.annotation.Nullable
  public List<OutputText> getOutputText() {
    return outputText;
  }

  public void setOutputText(List<OutputText> outputText) {
    this.outputText = outputText;
  }


  public MenuEntry outputXHTML(String outputXHTML) {
    this.outputXHTML = outputXHTML;
    return this;
  }

  /**
   * Get outputXHTML
   * @return outputXHTML
   */
  @javax.annotation.Nullable
  public String getOutputXHTML() {
    return outputXHTML;
  }

  public void setOutputXHTML(String outputXHTML) {
    this.outputXHTML = outputXHTML;
  }


  public MenuEntry predefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
    return this;
  }

  /**
   * Get predefinedContent
   * @return predefinedContent
   */
  @javax.annotation.Nullable
  public PredefinedContent getPredefinedContent() {
    return predefinedContent;
  }

  public void setPredefinedContent(PredefinedContent predefinedContent) {
    this.predefinedContent = predefinedContent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MenuEntry menuEntry = (MenuEntry) o;
    return Objects.equals(this.defaultSelectedFlag, menuEntry.defaultSelectedFlag) &&
        Objects.equals(this.menuEntryTag, menuEntry.menuEntryTag) &&
        Objects.equals(this.outputFormat, menuEntry.outputFormat) &&
        Objects.equals(this.outputText, menuEntry.outputText) &&
        Objects.equals(this.outputXHTML, menuEntry.outputXHTML) &&
        Objects.equals(this.predefinedContent, menuEntry.predefinedContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultSelectedFlag, menuEntryTag, outputFormat, outputText, outputXHTML, predefinedContent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MenuEntry {\n");
    sb.append("    defaultSelectedFlag: ").append(toIndentedString(defaultSelectedFlag)).append("\n");
    sb.append("    menuEntryTag: ").append(toIndentedString(menuEntryTag)).append("\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    outputText: ").append(toIndentedString(outputText)).append("\n");
    sb.append("    outputXHTML: ").append(toIndentedString(outputXHTML)).append("\n");
    sb.append("    predefinedContent: ").append(toIndentedString(predefinedContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DefaultSelectedFlag");
    openapiFields.add("MenuEntryTag");
    openapiFields.add("OutputFormat");
    openapiFields.add("OutputText");
    openapiFields.add("OutputXHTML");
    openapiFields.add("PredefinedContent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("OutputFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MenuEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MenuEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MenuEntry is not found in the empty JSON string", MenuEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MenuEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MenuEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MenuEntry.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `MenuEntryTag`
      if (jsonObj.get("MenuEntryTag") != null && !jsonObj.get("MenuEntryTag").isJsonNull()) {
        MenuEntryTag.validateJsonElement(jsonObj.get("MenuEntryTag"));
      }
      // validate the required field `OutputFormat`
      OutputFormat.validateJsonElement(jsonObj.get("OutputFormat"));
      if (jsonObj.get("OutputText") != null && !jsonObj.get("OutputText").isJsonNull()) {
        JsonArray jsonArrayoutputText = jsonObj.getAsJsonArray("OutputText");
        if (jsonArrayoutputText != null) {
          // ensure the json data is an array
          if (!jsonObj.get("OutputText").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `OutputText` to be an array in the JSON string but got `%s`", jsonObj.get("OutputText").toString()));
          }

          // validate the optional field `OutputText` (array)
          for (int i = 0; i < jsonArrayoutputText.size(); i++) {
            OutputText.validateJsonElement(jsonArrayoutputText.get(i));
          };
        }
      }
      if ((jsonObj.get("OutputXHTML") != null && !jsonObj.get("OutputXHTML").isJsonNull()) && !jsonObj.get("OutputXHTML").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputXHTML` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputXHTML").toString()));
      }
      // validate the optional field `PredefinedContent`
      if (jsonObj.get("PredefinedContent") != null && !jsonObj.get("PredefinedContent").isJsonNull()) {
        PredefinedContent.validateJsonElement(jsonObj.get("PredefinedContent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MenuEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MenuEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MenuEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MenuEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<MenuEntry>() {
           @Override
           public void write(JsonWriter out, MenuEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MenuEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MenuEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MenuEntry
   * @throws IOException if the JSON string is invalid with respect to MenuEntry
   */
  public static MenuEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MenuEntry.class);
  }

  /**
   * Convert an instance of MenuEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

