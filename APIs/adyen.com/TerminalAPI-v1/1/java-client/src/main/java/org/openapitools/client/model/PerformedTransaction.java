/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyResult;
import org.openapitools.client.model.POIData;
import org.openapitools.client.model.PaymentResult;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.SaleData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PerformedTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PerformedTransaction {
  public static final String SERIALIZED_NAME_LOYALTY_RESULT = "LoyaltyResult";
  @SerializedName(SERIALIZED_NAME_LOYALTY_RESULT)
  private List<LoyaltyResult> loyaltyResult = new ArrayList<>();

  public static final String SERIALIZED_NAME_PO_I_DATA = "POIData";
  @SerializedName(SERIALIZED_NAME_PO_I_DATA)
  private POIData poIData;

  public static final String SERIALIZED_NAME_PAYMENT_RESULT = "PaymentResult";
  @SerializedName(SERIALIZED_NAME_PAYMENT_RESULT)
  private PaymentResult paymentResult;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private Response response;

  public static final String SERIALIZED_NAME_REVERSED_AMOUNT = "ReversedAmount";
  @SerializedName(SERIALIZED_NAME_REVERSED_AMOUNT)
  private BigDecimal reversedAmount;

  public static final String SERIALIZED_NAME_SALE_DATA = "SaleData";
  @SerializedName(SERIALIZED_NAME_SALE_DATA)
  private SaleData saleData;

  public PerformedTransaction() {
  }

  public PerformedTransaction loyaltyResult(List<LoyaltyResult> loyaltyResult) {
    this.loyaltyResult = loyaltyResult;
    return this;
  }

  public PerformedTransaction addLoyaltyResultItem(LoyaltyResult loyaltyResultItem) {
    if (this.loyaltyResult == null) {
      this.loyaltyResult = new ArrayList<>();
    }
    this.loyaltyResult.add(loyaltyResultItem);
    return this;
  }

  /**
   * Get loyaltyResult
   * @return loyaltyResult
   */
  @javax.annotation.Nullable
  public List<LoyaltyResult> getLoyaltyResult() {
    return loyaltyResult;
  }

  public void setLoyaltyResult(List<LoyaltyResult> loyaltyResult) {
    this.loyaltyResult = loyaltyResult;
  }


  public PerformedTransaction poIData(POIData poIData) {
    this.poIData = poIData;
    return this;
  }

  /**
   * Get poIData
   * @return poIData
   */
  @javax.annotation.Nullable
  public POIData getPoIData() {
    return poIData;
  }

  public void setPoIData(POIData poIData) {
    this.poIData = poIData;
  }


  public PerformedTransaction paymentResult(PaymentResult paymentResult) {
    this.paymentResult = paymentResult;
    return this;
  }

  /**
   * Get paymentResult
   * @return paymentResult
   */
  @javax.annotation.Nullable
  public PaymentResult getPaymentResult() {
    return paymentResult;
  }

  public void setPaymentResult(PaymentResult paymentResult) {
    this.paymentResult = paymentResult;
  }


  public PerformedTransaction response(Response response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public Response getResponse() {
    return response;
  }

  public void setResponse(Response response) {
    this.response = response;
  }


  public PerformedTransaction reversedAmount(BigDecimal reversedAmount) {
    this.reversedAmount = reversedAmount;
    return this;
  }

  /**
   * Get reversedAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return reversedAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getReversedAmount() {
    return reversedAmount;
  }

  public void setReversedAmount(BigDecimal reversedAmount) {
    this.reversedAmount = reversedAmount;
  }


  public PerformedTransaction saleData(SaleData saleData) {
    this.saleData = saleData;
    return this;
  }

  /**
   * Get saleData
   * @return saleData
   */
  @javax.annotation.Nullable
  public SaleData getSaleData() {
    return saleData;
  }

  public void setSaleData(SaleData saleData) {
    this.saleData = saleData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PerformedTransaction performedTransaction = (PerformedTransaction) o;
    return Objects.equals(this.loyaltyResult, performedTransaction.loyaltyResult) &&
        Objects.equals(this.poIData, performedTransaction.poIData) &&
        Objects.equals(this.paymentResult, performedTransaction.paymentResult) &&
        Objects.equals(this.response, performedTransaction.response) &&
        Objects.equals(this.reversedAmount, performedTransaction.reversedAmount) &&
        Objects.equals(this.saleData, performedTransaction.saleData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loyaltyResult, poIData, paymentResult, response, reversedAmount, saleData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PerformedTransaction {\n");
    sb.append("    loyaltyResult: ").append(toIndentedString(loyaltyResult)).append("\n");
    sb.append("    poIData: ").append(toIndentedString(poIData)).append("\n");
    sb.append("    paymentResult: ").append(toIndentedString(paymentResult)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    reversedAmount: ").append(toIndentedString(reversedAmount)).append("\n");
    sb.append("    saleData: ").append(toIndentedString(saleData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("LoyaltyResult");
    openapiFields.add("POIData");
    openapiFields.add("PaymentResult");
    openapiFields.add("Response");
    openapiFields.add("ReversedAmount");
    openapiFields.add("SaleData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PerformedTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PerformedTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PerformedTransaction is not found in the empty JSON string", PerformedTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PerformedTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PerformedTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PerformedTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("LoyaltyResult") != null && !jsonObj.get("LoyaltyResult").isJsonNull()) {
        JsonArray jsonArrayloyaltyResult = jsonObj.getAsJsonArray("LoyaltyResult");
        if (jsonArrayloyaltyResult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LoyaltyResult").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LoyaltyResult` to be an array in the JSON string but got `%s`", jsonObj.get("LoyaltyResult").toString()));
          }

          // validate the optional field `LoyaltyResult` (array)
          for (int i = 0; i < jsonArrayloyaltyResult.size(); i++) {
            LoyaltyResult.validateJsonElement(jsonArrayloyaltyResult.get(i));
          };
        }
      }
      // validate the optional field `POIData`
      if (jsonObj.get("POIData") != null && !jsonObj.get("POIData").isJsonNull()) {
        POIData.validateJsonElement(jsonObj.get("POIData"));
      }
      // validate the optional field `PaymentResult`
      if (jsonObj.get("PaymentResult") != null && !jsonObj.get("PaymentResult").isJsonNull()) {
        PaymentResult.validateJsonElement(jsonObj.get("PaymentResult"));
      }
      // validate the required field `Response`
      Response.validateJsonElement(jsonObj.get("Response"));
      // validate the optional field `SaleData`
      if (jsonObj.get("SaleData") != null && !jsonObj.get("SaleData").isJsonNull()) {
        SaleData.validateJsonElement(jsonObj.get("SaleData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PerformedTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PerformedTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PerformedTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PerformedTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<PerformedTransaction>() {
           @Override
           public void write(JsonWriter out, PerformedTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PerformedTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PerformedTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PerformedTransaction
   * @throws IOException if the JSON string is invalid with respect to PerformedTransaction
   */
  public static PerformedTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PerformedTransaction.class);
  }

  /**
   * Convert an instance of PerformedTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

