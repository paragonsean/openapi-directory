/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputCommand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Input
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Input {
  public static final String SERIALIZED_NAME_CONFIRMED_FLAG = "ConfirmedFlag";
  @SerializedName(SERIALIZED_NAME_CONFIRMED_FLAG)
  private Boolean confirmedFlag;

  public static final String SERIALIZED_NAME_DIGIT_INPUT = "DigitInput";
  @SerializedName(SERIALIZED_NAME_DIGIT_INPUT)
  private Integer digitInput;

  public static final String SERIALIZED_NAME_FUNCTION_KEY = "FunctionKey";
  @SerializedName(SERIALIZED_NAME_FUNCTION_KEY)
  private Integer functionKey;

  public static final String SERIALIZED_NAME_INPUT_COMMAND = "InputCommand";
  @SerializedName(SERIALIZED_NAME_INPUT_COMMAND)
  private InputCommand inputCommand;

  public static final String SERIALIZED_NAME_MENU_ENTRY_NUMBER = "MenuEntryNumber";
  @SerializedName(SERIALIZED_NAME_MENU_ENTRY_NUMBER)
  private List<Integer> menuEntryNumber = new ArrayList<>();

  public static final String SERIALIZED_NAME_PASSWORD = "Password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_TEXT_INPUT = "TextInput";
  @SerializedName(SERIALIZED_NAME_TEXT_INPUT)
  private String textInput;

  public Input() {
  }

  public Input confirmedFlag(Boolean confirmedFlag) {
    this.confirmedFlag = confirmedFlag;
    return this;
  }

  /**
   * Get confirmedFlag
   * @return confirmedFlag
   */
  @javax.annotation.Nullable
  public Boolean getConfirmedFlag() {
    return confirmedFlag;
  }

  public void setConfirmedFlag(Boolean confirmedFlag) {
    this.confirmedFlag = confirmedFlag;
  }


  public Input digitInput(Integer digitInput) {
    this.digitInput = digitInput;
    return this;
  }

  /**
   * Get digitInput
   * @return digitInput
   */
  @javax.annotation.Nullable
  public Integer getDigitInput() {
    return digitInput;
  }

  public void setDigitInput(Integer digitInput) {
    this.digitInput = digitInput;
  }


  public Input functionKey(Integer functionKey) {
    this.functionKey = functionKey;
    return this;
  }

  /**
   * Get functionKey
   * @return functionKey
   */
  @javax.annotation.Nullable
  public Integer getFunctionKey() {
    return functionKey;
  }

  public void setFunctionKey(Integer functionKey) {
    this.functionKey = functionKey;
  }


  public Input inputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
    return this;
  }

  /**
   * Get inputCommand
   * @return inputCommand
   */
  @javax.annotation.Nonnull
  public InputCommand getInputCommand() {
    return inputCommand;
  }

  public void setInputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
  }


  public Input menuEntryNumber(List<Integer> menuEntryNumber) {
    this.menuEntryNumber = menuEntryNumber;
    return this;
  }

  public Input addMenuEntryNumberItem(Integer menuEntryNumberItem) {
    if (this.menuEntryNumber == null) {
      this.menuEntryNumber = new ArrayList<>();
    }
    this.menuEntryNumber.add(menuEntryNumberItem);
    return this;
  }

  /**
   * Get menuEntryNumber
   * @return menuEntryNumber
   */
  @javax.annotation.Nullable
  public List<Integer> getMenuEntryNumber() {
    return menuEntryNumber;
  }

  public void setMenuEntryNumber(List<Integer> menuEntryNumber) {
    this.menuEntryNumber = menuEntryNumber;
  }


  public Input password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public Input textInput(String textInput) {
    this.textInput = textInput;
    return this;
  }

  /**
   * Get textInput
   * @return textInput
   */
  @javax.annotation.Nullable
  public String getTextInput() {
    return textInput;
  }

  public void setTextInput(String textInput) {
    this.textInput = textInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Input input = (Input) o;
    return Objects.equals(this.confirmedFlag, input.confirmedFlag) &&
        Objects.equals(this.digitInput, input.digitInput) &&
        Objects.equals(this.functionKey, input.functionKey) &&
        Objects.equals(this.inputCommand, input.inputCommand) &&
        Objects.equals(this.menuEntryNumber, input.menuEntryNumber) &&
        Objects.equals(this.password, input.password) &&
        Objects.equals(this.textInput, input.textInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmedFlag, digitInput, functionKey, inputCommand, menuEntryNumber, password, textInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Input {\n");
    sb.append("    confirmedFlag: ").append(toIndentedString(confirmedFlag)).append("\n");
    sb.append("    digitInput: ").append(toIndentedString(digitInput)).append("\n");
    sb.append("    functionKey: ").append(toIndentedString(functionKey)).append("\n");
    sb.append("    inputCommand: ").append(toIndentedString(inputCommand)).append("\n");
    sb.append("    menuEntryNumber: ").append(toIndentedString(menuEntryNumber)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    textInput: ").append(toIndentedString(textInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ConfirmedFlag");
    openapiFields.add("DigitInput");
    openapiFields.add("FunctionKey");
    openapiFields.add("InputCommand");
    openapiFields.add("MenuEntryNumber");
    openapiFields.add("Password");
    openapiFields.add("TextInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("InputCommand");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Input
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Input.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Input is not found in the empty JSON string", Input.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Input.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Input` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Input.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `InputCommand`
      InputCommand.validateJsonElement(jsonObj.get("InputCommand"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("MenuEntryNumber") != null && !jsonObj.get("MenuEntryNumber").isJsonNull() && !jsonObj.get("MenuEntryNumber").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MenuEntryNumber` to be an array in the JSON string but got `%s`", jsonObj.get("MenuEntryNumber").toString()));
      }
      if ((jsonObj.get("Password") != null && !jsonObj.get("Password").isJsonNull()) && !jsonObj.get("Password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Password").toString()));
      }
      if ((jsonObj.get("TextInput") != null && !jsonObj.get("TextInput").isJsonNull()) && !jsonObj.get("TextInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TextInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TextInput").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Input.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Input' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Input> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Input.class));

       return (TypeAdapter<T>) new TypeAdapter<Input>() {
           @Override
           public void write(JsonWriter out, Input value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Input read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Input given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Input
   * @throws IOException if the JSON string is invalid with respect to Input
   */
  public static Input fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Input.class);
  }

  /**
   * Convert an instance of Input to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

