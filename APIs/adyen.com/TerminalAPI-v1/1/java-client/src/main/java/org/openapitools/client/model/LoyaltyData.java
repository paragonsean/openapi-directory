/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.LoyaltyAccountID;
import org.openapitools.client.model.LoyaltyAmount;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Payment, Loyalty or Balance Inquiry Request message, it allows the Sale Terminal to send the identification of the loyalty account or an awarded amount or an amount to redeem to the loyalty account. Data related to a Loyalty program or account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyData {
  public static final String SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE = "CardAcquisitionReference";
  @SerializedName(SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE)
  private TransactionIDType cardAcquisitionReference;

  public static final String SERIALIZED_NAME_LOYALTY_ACCOUNT_I_D = "LoyaltyAccountID";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCOUNT_I_D)
  private LoyaltyAccountID loyaltyAccountID;

  public static final String SERIALIZED_NAME_LOYALTY_AMOUNT = "LoyaltyAmount";
  @SerializedName(SERIALIZED_NAME_LOYALTY_AMOUNT)
  private LoyaltyAmount loyaltyAmount;

  public LoyaltyData() {
  }

  public LoyaltyData cardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
    return this;
  }

  /**
   * Get cardAcquisitionReference
   * @return cardAcquisitionReference
   */
  @javax.annotation.Nullable
  public TransactionIDType getCardAcquisitionReference() {
    return cardAcquisitionReference;
  }

  public void setCardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
  }


  public LoyaltyData loyaltyAccountID(LoyaltyAccountID loyaltyAccountID) {
    this.loyaltyAccountID = loyaltyAccountID;
    return this;
  }

  /**
   * Get loyaltyAccountID
   * @return loyaltyAccountID
   */
  @javax.annotation.Nullable
  public LoyaltyAccountID getLoyaltyAccountID() {
    return loyaltyAccountID;
  }

  public void setLoyaltyAccountID(LoyaltyAccountID loyaltyAccountID) {
    this.loyaltyAccountID = loyaltyAccountID;
  }


  public LoyaltyData loyaltyAmount(LoyaltyAmount loyaltyAmount) {
    this.loyaltyAmount = loyaltyAmount;
    return this;
  }

  /**
   * Get loyaltyAmount
   * @return loyaltyAmount
   */
  @javax.annotation.Nullable
  public LoyaltyAmount getLoyaltyAmount() {
    return loyaltyAmount;
  }

  public void setLoyaltyAmount(LoyaltyAmount loyaltyAmount) {
    this.loyaltyAmount = loyaltyAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyData loyaltyData = (LoyaltyData) o;
    return Objects.equals(this.cardAcquisitionReference, loyaltyData.cardAcquisitionReference) &&
        Objects.equals(this.loyaltyAccountID, loyaltyData.loyaltyAccountID) &&
        Objects.equals(this.loyaltyAmount, loyaltyData.loyaltyAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardAcquisitionReference, loyaltyAccountID, loyaltyAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyData {\n");
    sb.append("    cardAcquisitionReference: ").append(toIndentedString(cardAcquisitionReference)).append("\n");
    sb.append("    loyaltyAccountID: ").append(toIndentedString(loyaltyAccountID)).append("\n");
    sb.append("    loyaltyAmount: ").append(toIndentedString(loyaltyAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardAcquisitionReference");
    openapiFields.add("LoyaltyAccountID");
    openapiFields.add("LoyaltyAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyData is not found in the empty JSON string", LoyaltyData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CardAcquisitionReference`
      if (jsonObj.get("CardAcquisitionReference") != null && !jsonObj.get("CardAcquisitionReference").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("CardAcquisitionReference"));
      }
      // validate the optional field `LoyaltyAccountID`
      if (jsonObj.get("LoyaltyAccountID") != null && !jsonObj.get("LoyaltyAccountID").isJsonNull()) {
        LoyaltyAccountID.validateJsonElement(jsonObj.get("LoyaltyAccountID"));
      }
      // validate the optional field `LoyaltyAmount`
      if (jsonObj.get("LoyaltyAmount") != null && !jsonObj.get("LoyaltyAmount").isJsonNull()) {
        LoyaltyAmount.validateJsonElement(jsonObj.get("LoyaltyAmount"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyData.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyData>() {
           @Override
           public void write(JsonWriter out, LoyaltyData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyData
   * @throws IOException if the JSON string is invalid with respect to LoyaltyData
   */
  public static LoyaltyData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyData.class);
  }

  /**
   * Convert an instance of LoyaltyData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

