/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CashHandlingDevice;
import org.openapitools.client.model.GlobalStatus;
import org.openapitools.client.model.PrinterStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicate the availability of the POI Terminal components. The data element is absent if the component is not part of the POI Terminal. State of a POI Terminal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class POIStatus {
  public static final String SERIALIZED_NAME_CARD_READER_O_K_FLAG = "CardReaderOKFlag";
  @SerializedName(SERIALIZED_NAME_CARD_READER_O_K_FLAG)
  private Boolean cardReaderOKFlag;

  public static final String SERIALIZED_NAME_CASH_HANDLING_DEVICE = "CashHandlingDevice";
  @SerializedName(SERIALIZED_NAME_CASH_HANDLING_DEVICE)
  private List<CashHandlingDevice> cashHandlingDevice = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMUNICATION_O_K_FLAG = "CommunicationOKFlag";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_O_K_FLAG)
  private Boolean communicationOKFlag;

  public static final String SERIALIZED_NAME_FRAUD_PREVENTION_FLAG = "FraudPreventionFlag";
  @SerializedName(SERIALIZED_NAME_FRAUD_PREVENTION_FLAG)
  private Boolean fraudPreventionFlag;

  public static final String SERIALIZED_NAME_GLOBAL_STATUS = "GlobalStatus";
  @SerializedName(SERIALIZED_NAME_GLOBAL_STATUS)
  private GlobalStatus globalStatus;

  public static final String SERIALIZED_NAME_PE_D_O_K_FLAG = "PEDOKFlag";
  @SerializedName(SERIALIZED_NAME_PE_D_O_K_FLAG)
  private Boolean peDOKFlag;

  public static final String SERIALIZED_NAME_PRINTER_STATUS = "PrinterStatus";
  @SerializedName(SERIALIZED_NAME_PRINTER_STATUS)
  private PrinterStatus printerStatus;

  public static final String SERIALIZED_NAME_SECURITY_O_K_FLAG = "SecurityOKFlag";
  @SerializedName(SERIALIZED_NAME_SECURITY_O_K_FLAG)
  private Boolean securityOKFlag;

  public POIStatus() {
  }

  public POIStatus cardReaderOKFlag(Boolean cardReaderOKFlag) {
    this.cardReaderOKFlag = cardReaderOKFlag;
    return this;
  }

  /**
   * If card reader device present.
   * @return cardReaderOKFlag
   */
  @javax.annotation.Nullable
  public Boolean getCardReaderOKFlag() {
    return cardReaderOKFlag;
  }

  public void setCardReaderOKFlag(Boolean cardReaderOKFlag) {
    this.cardReaderOKFlag = cardReaderOKFlag;
  }


  public POIStatus cashHandlingDevice(List<CashHandlingDevice> cashHandlingDevice) {
    this.cashHandlingDevice = cashHandlingDevice;
    return this;
  }

  public POIStatus addCashHandlingDeviceItem(CashHandlingDevice cashHandlingDeviceItem) {
    if (this.cashHandlingDevice == null) {
      this.cashHandlingDevice = new ArrayList<>();
    }
    this.cashHandlingDevice.add(cashHandlingDeviceItem);
    return this;
  }

  /**
   * Get cashHandlingDevice
   * @return cashHandlingDevice
   */
  @javax.annotation.Nullable
  public List<CashHandlingDevice> getCashHandlingDevice() {
    return cashHandlingDevice;
  }

  public void setCashHandlingDevice(List<CashHandlingDevice> cashHandlingDevice) {
    this.cashHandlingDevice = cashHandlingDevice;
  }


  public POIStatus communicationOKFlag(Boolean communicationOKFlag) {
    this.communicationOKFlag = communicationOKFlag;
    return this;
  }

  /**
   * If communication infrastructure present.
   * @return communicationOKFlag
   */
  @javax.annotation.Nullable
  public Boolean getCommunicationOKFlag() {
    return communicationOKFlag;
  }

  public void setCommunicationOKFlag(Boolean communicationOKFlag) {
    this.communicationOKFlag = communicationOKFlag;
  }


  public POIStatus fraudPreventionFlag(Boolean fraudPreventionFlag) {
    this.fraudPreventionFlag = fraudPreventionFlag;
    return this;
  }

  /**
   * default False.
   * @return fraudPreventionFlag
   */
  @javax.annotation.Nullable
  public Boolean getFraudPreventionFlag() {
    return fraudPreventionFlag;
  }

  public void setFraudPreventionFlag(Boolean fraudPreventionFlag) {
    this.fraudPreventionFlag = fraudPreventionFlag;
  }


  public POIStatus globalStatus(GlobalStatus globalStatus) {
    this.globalStatus = globalStatus;
    return this;
  }

  /**
   * Get globalStatus
   * @return globalStatus
   */
  @javax.annotation.Nonnull
  public GlobalStatus getGlobalStatus() {
    return globalStatus;
  }

  public void setGlobalStatus(GlobalStatus globalStatus) {
    this.globalStatus = globalStatus;
  }


  public POIStatus peDOKFlag(Boolean peDOKFlag) {
    this.peDOKFlag = peDOKFlag;
    return this;
  }

  /**
   * If PED present.
   * @return peDOKFlag
   */
  @javax.annotation.Nullable
  public Boolean getPeDOKFlag() {
    return peDOKFlag;
  }

  public void setPeDOKFlag(Boolean peDOKFlag) {
    this.peDOKFlag = peDOKFlag;
  }


  public POIStatus printerStatus(PrinterStatus printerStatus) {
    this.printerStatus = printerStatus;
    return this;
  }

  /**
   * Get printerStatus
   * @return printerStatus
   */
  @javax.annotation.Nullable
  public PrinterStatus getPrinterStatus() {
    return printerStatus;
  }

  public void setPrinterStatus(PrinterStatus printerStatus) {
    this.printerStatus = printerStatus;
  }


  public POIStatus securityOKFlag(Boolean securityOKFlag) {
    this.securityOKFlag = securityOKFlag;
    return this;
  }

  /**
   * If security module present.
   * @return securityOKFlag
   */
  @javax.annotation.Nullable
  public Boolean getSecurityOKFlag() {
    return securityOKFlag;
  }

  public void setSecurityOKFlag(Boolean securityOKFlag) {
    this.securityOKFlag = securityOKFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    POIStatus poIStatus = (POIStatus) o;
    return Objects.equals(this.cardReaderOKFlag, poIStatus.cardReaderOKFlag) &&
        Objects.equals(this.cashHandlingDevice, poIStatus.cashHandlingDevice) &&
        Objects.equals(this.communicationOKFlag, poIStatus.communicationOKFlag) &&
        Objects.equals(this.fraudPreventionFlag, poIStatus.fraudPreventionFlag) &&
        Objects.equals(this.globalStatus, poIStatus.globalStatus) &&
        Objects.equals(this.peDOKFlag, poIStatus.peDOKFlag) &&
        Objects.equals(this.printerStatus, poIStatus.printerStatus) &&
        Objects.equals(this.securityOKFlag, poIStatus.securityOKFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardReaderOKFlag, cashHandlingDevice, communicationOKFlag, fraudPreventionFlag, globalStatus, peDOKFlag, printerStatus, securityOKFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class POIStatus {\n");
    sb.append("    cardReaderOKFlag: ").append(toIndentedString(cardReaderOKFlag)).append("\n");
    sb.append("    cashHandlingDevice: ").append(toIndentedString(cashHandlingDevice)).append("\n");
    sb.append("    communicationOKFlag: ").append(toIndentedString(communicationOKFlag)).append("\n");
    sb.append("    fraudPreventionFlag: ").append(toIndentedString(fraudPreventionFlag)).append("\n");
    sb.append("    globalStatus: ").append(toIndentedString(globalStatus)).append("\n");
    sb.append("    peDOKFlag: ").append(toIndentedString(peDOKFlag)).append("\n");
    sb.append("    printerStatus: ").append(toIndentedString(printerStatus)).append("\n");
    sb.append("    securityOKFlag: ").append(toIndentedString(securityOKFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardReaderOKFlag");
    openapiFields.add("CashHandlingDevice");
    openapiFields.add("CommunicationOKFlag");
    openapiFields.add("FraudPreventionFlag");
    openapiFields.add("GlobalStatus");
    openapiFields.add("PEDOKFlag");
    openapiFields.add("PrinterStatus");
    openapiFields.add("SecurityOKFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("GlobalStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to POIStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!POIStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in POIStatus is not found in the empty JSON string", POIStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!POIStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `POIStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : POIStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("CashHandlingDevice") != null && !jsonObj.get("CashHandlingDevice").isJsonNull()) {
        JsonArray jsonArraycashHandlingDevice = jsonObj.getAsJsonArray("CashHandlingDevice");
        if (jsonArraycashHandlingDevice != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CashHandlingDevice").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CashHandlingDevice` to be an array in the JSON string but got `%s`", jsonObj.get("CashHandlingDevice").toString()));
          }

          // validate the optional field `CashHandlingDevice` (array)
          for (int i = 0; i < jsonArraycashHandlingDevice.size(); i++) {
            CashHandlingDevice.validateJsonElement(jsonArraycashHandlingDevice.get(i));
          };
        }
      }
      // validate the required field `GlobalStatus`
      GlobalStatus.validateJsonElement(jsonObj.get("GlobalStatus"));
      // validate the optional field `PrinterStatus`
      if (jsonObj.get("PrinterStatus") != null && !jsonObj.get("PrinterStatus").isJsonNull()) {
        PrinterStatus.validateJsonElement(jsonObj.get("PrinterStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!POIStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'POIStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<POIStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(POIStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<POIStatus>() {
           @Override
           public void write(JsonWriter out, POIStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public POIStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of POIStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of POIStatus
   * @throws IOException if the JSON string is invalid with respect to POIStatus
   */
  public static POIStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, POIStatus.class);
  }

  /**
   * Convert an instance of POIStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

