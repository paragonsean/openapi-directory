/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IdentificationType;
import org.openapitools.client.model.StoredValueAccountType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoredValueAccountID {
  /**
   * Gets or Sets entryMode
   */
  @JsonAdapter(EntryModeEnum.Adapter.class)
  public enum EntryModeEnum {
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAG_STRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    MOBILE("Mobile"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUS_ICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    EntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTRY_MODE = "EntryMode";
  @SerializedName(SERIALIZED_NAME_ENTRY_MODE)
  private List<EntryModeEnum> entryMode = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private Integer expiryDate;

  public static final String SERIALIZED_NAME_IDENTIFICATION_TYPE = "IdentificationType";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_TYPE)
  private IdentificationType identificationType;

  public static final String SERIALIZED_NAME_OWNER_NAME = "OwnerName";
  @SerializedName(SERIALIZED_NAME_OWNER_NAME)
  private String ownerName;

  public static final String SERIALIZED_NAME_STORED_VALUE_ACCOUNT_TYPE = "StoredValueAccountType";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_ACCOUNT_TYPE)
  private StoredValueAccountType storedValueAccountType;

  public static final String SERIALIZED_NAME_STORED_VALUE_I_D = "StoredValueID";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_I_D)
  private String storedValueID;

  public static final String SERIALIZED_NAME_STORED_VALUE_PROVIDER = "StoredValueProvider";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_PROVIDER)
  private String storedValueProvider;

  public StoredValueAccountID() {
  }

  public StoredValueAccountID entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public StoredValueAccountID addEntryModeItem(EntryModeEnum entryModeItem) {
    if (this.entryMode == null) {
      this.entryMode = new ArrayList<>();
    }
    this.entryMode.add(entryModeItem);
    return this;
  }

  /**
   * Get entryMode
   * @return entryMode
   */
  @javax.annotation.Nonnull
  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }

  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }


  public StoredValueAccountID expiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * Get expiryDate
   * minimum: 4
   * maximum: 4
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public Integer getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
  }


  public StoredValueAccountID identificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
    return this;
  }

  /**
   * Get identificationType
   * @return identificationType
   */
  @javax.annotation.Nonnull
  public IdentificationType getIdentificationType() {
    return identificationType;
  }

  public void setIdentificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
  }


  public StoredValueAccountID ownerName(String ownerName) {
    this.ownerName = ownerName;
    return this;
  }

  /**
   * Get ownerName
   * @return ownerName
   */
  @javax.annotation.Nullable
  public String getOwnerName() {
    return ownerName;
  }

  public void setOwnerName(String ownerName) {
    this.ownerName = ownerName;
  }


  public StoredValueAccountID storedValueAccountType(StoredValueAccountType storedValueAccountType) {
    this.storedValueAccountType = storedValueAccountType;
    return this;
  }

  /**
   * Get storedValueAccountType
   * @return storedValueAccountType
   */
  @javax.annotation.Nonnull
  public StoredValueAccountType getStoredValueAccountType() {
    return storedValueAccountType;
  }

  public void setStoredValueAccountType(StoredValueAccountType storedValueAccountType) {
    this.storedValueAccountType = storedValueAccountType;
  }


  public StoredValueAccountID storedValueID(String storedValueID) {
    this.storedValueID = storedValueID;
    return this;
  }

  /**
   * Get storedValueID
   * @return storedValueID
   */
  @javax.annotation.Nonnull
  public String getStoredValueID() {
    return storedValueID;
  }

  public void setStoredValueID(String storedValueID) {
    this.storedValueID = storedValueID;
  }


  public StoredValueAccountID storedValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
    return this;
  }

  /**
   * Get storedValueProvider
   * @return storedValueProvider
   */
  @javax.annotation.Nullable
  public String getStoredValueProvider() {
    return storedValueProvider;
  }

  public void setStoredValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredValueAccountID storedValueAccountID = (StoredValueAccountID) o;
    return Objects.equals(this.entryMode, storedValueAccountID.entryMode) &&
        Objects.equals(this.expiryDate, storedValueAccountID.expiryDate) &&
        Objects.equals(this.identificationType, storedValueAccountID.identificationType) &&
        Objects.equals(this.ownerName, storedValueAccountID.ownerName) &&
        Objects.equals(this.storedValueAccountType, storedValueAccountID.storedValueAccountType) &&
        Objects.equals(this.storedValueID, storedValueAccountID.storedValueID) &&
        Objects.equals(this.storedValueProvider, storedValueAccountID.storedValueProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryMode, expiryDate, identificationType, ownerName, storedValueAccountType, storedValueID, storedValueProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredValueAccountID {\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    identificationType: ").append(toIndentedString(identificationType)).append("\n");
    sb.append("    ownerName: ").append(toIndentedString(ownerName)).append("\n");
    sb.append("    storedValueAccountType: ").append(toIndentedString(storedValueAccountType)).append("\n");
    sb.append("    storedValueID: ").append(toIndentedString(storedValueID)).append("\n");
    sb.append("    storedValueProvider: ").append(toIndentedString(storedValueProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EntryMode");
    openapiFields.add("ExpiryDate");
    openapiFields.add("IdentificationType");
    openapiFields.add("OwnerName");
    openapiFields.add("StoredValueAccountType");
    openapiFields.add("StoredValueID");
    openapiFields.add("StoredValueProvider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EntryMode");
    openapiRequiredFields.add("IdentificationType");
    openapiRequiredFields.add("StoredValueAccountType");
    openapiRequiredFields.add("StoredValueID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoredValueAccountID
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoredValueAccountID.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoredValueAccountID is not found in the empty JSON string", StoredValueAccountID.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoredValueAccountID.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoredValueAccountID` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoredValueAccountID.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("EntryMode") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("EntryMode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntryMode` to be an array in the JSON string but got `%s`", jsonObj.get("EntryMode").toString()));
      }
      // validate the required field `IdentificationType`
      IdentificationType.validateJsonElement(jsonObj.get("IdentificationType"));
      if ((jsonObj.get("OwnerName") != null && !jsonObj.get("OwnerName").isJsonNull()) && !jsonObj.get("OwnerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OwnerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OwnerName").toString()));
      }
      // validate the required field `StoredValueAccountType`
      StoredValueAccountType.validateJsonElement(jsonObj.get("StoredValueAccountType"));
      if (!jsonObj.get("StoredValueID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoredValueID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoredValueID").toString()));
      }
      if ((jsonObj.get("StoredValueProvider") != null && !jsonObj.get("StoredValueProvider").isJsonNull()) && !jsonObj.get("StoredValueProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoredValueProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoredValueProvider").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoredValueAccountID.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoredValueAccountID' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoredValueAccountID> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoredValueAccountID.class));

       return (TypeAdapter<T>) new TypeAdapter<StoredValueAccountID>() {
           @Override
           public void write(JsonWriter out, StoredValueAccountID value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoredValueAccountID read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoredValueAccountID given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoredValueAccountID
   * @throws IOException if the JSON string is invalid with respect to StoredValueAccountID
   */
  public static StoredValueAccountID fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoredValueAccountID.class);
  }

  /**
   * Convert an instance of StoredValueAccountID to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

