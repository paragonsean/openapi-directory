/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.UnitOfMeasure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In loyalty or value added payment card transaction, the items of the sale are entering in the processing of the transaction. Sale items of a transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaleItem {
  public static final String SERIALIZED_NAME_ADDITIONAL_PRODUCT_INFO = "AdditionalProductInfo";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PRODUCT_INFO)
  private String additionalProductInfo;

  public static final String SERIALIZED_NAME_EAN_UPC = "EanUpc";
  @SerializedName(SERIALIZED_NAME_EAN_UPC)
  private Integer eanUpc;

  public static final String SERIALIZED_NAME_ITEM_AMOUNT = "ItemAmount";
  @SerializedName(SERIALIZED_NAME_ITEM_AMOUNT)
  private BigDecimal itemAmount;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private Integer itemID;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "ProductCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private Integer productCode;

  public static final String SERIALIZED_NAME_PRODUCT_LABEL = "ProductLabel";
  @SerializedName(SERIALIZED_NAME_PRODUCT_LABEL)
  private String productLabel;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_SALE_CHANNEL = "SaleChannel";
  @SerializedName(SERIALIZED_NAME_SALE_CHANNEL)
  private Integer saleChannel;

  public static final String SERIALIZED_NAME_TAX_CODE = "TaxCode";
  @SerializedName(SERIALIZED_NAME_TAX_CODE)
  private Integer taxCode;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "UnitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private UnitOfMeasure unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "UnitPrice";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public SaleItem() {
  }

  public SaleItem additionalProductInfo(String additionalProductInfo) {
    this.additionalProductInfo = additionalProductInfo;
    return this;
  }

  /**
   * If data sent, POI has to store it and send it if the host protocol allows it.
   * @return additionalProductInfo
   */
  @javax.annotation.Nullable
  public String getAdditionalProductInfo() {
    return additionalProductInfo;
  }

  public void setAdditionalProductInfo(String additionalProductInfo) {
    this.additionalProductInfo = additionalProductInfo;
  }


  public SaleItem eanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
    return this;
  }

  /**
   * If data sent, POI has to store it and send it if the host protocol allows it.
   * @return eanUpc
   */
  @javax.annotation.Nullable
  public Integer getEanUpc() {
    return eanUpc;
  }

  public void setEanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
  }


  public SaleItem itemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
    return this;
  }

  /**
   * Total amount of the item line.
   * minimum: 0
   * maximum: 99999999.999999
   * @return itemAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getItemAmount() {
    return itemAmount;
  }

  public void setItemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
  }


  public SaleItem itemID(Integer itemID) {
    this.itemID = itemID;
    return this;
  }

  /**
   * Item identification inside a transaction (0 to n).
   * @return itemID
   */
  @javax.annotation.Nonnull
  public Integer getItemID() {
    return itemID;
  }

  public void setItemID(Integer itemID) {
    this.itemID = itemID;
  }


  public SaleItem productCode(Integer productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Product code of item purchased with the transaction.
   * minimum: 1
   * maximum: 20
   * @return productCode
   */
  @javax.annotation.Nonnull
  public Integer getProductCode() {
    return productCode;
  }

  public void setProductCode(Integer productCode) {
    this.productCode = productCode;
  }


  public SaleItem productLabel(String productLabel) {
    this.productLabel = productLabel;
    return this;
  }

  /**
   * Get productLabel
   * @return productLabel
   */
  @javax.annotation.Nullable
  public String getProductLabel() {
    return productLabel;
  }

  public void setProductLabel(String productLabel) {
    this.productLabel = productLabel;
  }


  public SaleItem quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * If data sent, POI has to store it and send it if the host protocol allows it.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public SaleItem saleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
    return this;
  }

  /**
   * If data sent, POI has to store it and send it if the host protocol allows it.
   * @return saleChannel
   */
  @javax.annotation.Nullable
  public Integer getSaleChannel() {
    return saleChannel;
  }

  public void setSaleChannel(Integer saleChannel) {
    this.saleChannel = saleChannel;
  }


  public SaleItem taxCode(Integer taxCode) {
    this.taxCode = taxCode;
    return this;
  }

  /**
   * If data sent, POI has to store it and send it if the host protocol allows it.
   * @return taxCode
   */
  @javax.annotation.Nullable
  public Integer getTaxCode() {
    return taxCode;
  }

  public void setTaxCode(Integer taxCode) {
    this.taxCode = taxCode;
  }


  public SaleItem unitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Get unitOfMeasure
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public UnitOfMeasure getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


  public SaleItem unitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * if Quantity present.
   * minimum: 0
   * maximum: 99999999.999999
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleItem saleItem = (SaleItem) o;
    return Objects.equals(this.additionalProductInfo, saleItem.additionalProductInfo) &&
        Objects.equals(this.eanUpc, saleItem.eanUpc) &&
        Objects.equals(this.itemAmount, saleItem.itemAmount) &&
        Objects.equals(this.itemID, saleItem.itemID) &&
        Objects.equals(this.productCode, saleItem.productCode) &&
        Objects.equals(this.productLabel, saleItem.productLabel) &&
        Objects.equals(this.quantity, saleItem.quantity) &&
        Objects.equals(this.saleChannel, saleItem.saleChannel) &&
        Objects.equals(this.taxCode, saleItem.taxCode) &&
        Objects.equals(this.unitOfMeasure, saleItem.unitOfMeasure) &&
        Objects.equals(this.unitPrice, saleItem.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProductInfo, eanUpc, itemAmount, itemID, productCode, productLabel, quantity, saleChannel, taxCode, unitOfMeasure, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleItem {\n");
    sb.append("    additionalProductInfo: ").append(toIndentedString(additionalProductInfo)).append("\n");
    sb.append("    eanUpc: ").append(toIndentedString(eanUpc)).append("\n");
    sb.append("    itemAmount: ").append(toIndentedString(itemAmount)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    productLabel: ").append(toIndentedString(productLabel)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    saleChannel: ").append(toIndentedString(saleChannel)).append("\n");
    sb.append("    taxCode: ").append(toIndentedString(taxCode)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalProductInfo");
    openapiFields.add("EanUpc");
    openapiFields.add("ItemAmount");
    openapiFields.add("ItemID");
    openapiFields.add("ProductCode");
    openapiFields.add("ProductLabel");
    openapiFields.add("Quantity");
    openapiFields.add("SaleChannel");
    openapiFields.add("TaxCode");
    openapiFields.add("UnitOfMeasure");
    openapiFields.add("UnitPrice");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ItemAmount");
    openapiRequiredFields.add("ItemID");
    openapiRequiredFields.add("ProductCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleItem is not found in the empty JSON string", SaleItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdditionalProductInfo") != null && !jsonObj.get("AdditionalProductInfo").isJsonNull()) && !jsonObj.get("AdditionalProductInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalProductInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalProductInfo").toString()));
      }
      if ((jsonObj.get("ProductLabel") != null && !jsonObj.get("ProductLabel").isJsonNull()) && !jsonObj.get("ProductLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProductLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProductLabel").toString()));
      }
      if ((jsonObj.get("Quantity") != null && !jsonObj.get("Quantity").isJsonNull()) && !jsonObj.get("Quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quantity").toString()));
      }
      // validate the optional field `UnitOfMeasure`
      if (jsonObj.get("UnitOfMeasure") != null && !jsonObj.get("UnitOfMeasure").isJsonNull()) {
        UnitOfMeasure.validateJsonElement(jsonObj.get("UnitOfMeasure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleItem>() {
           @Override
           public void write(JsonWriter out, SaleItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleItem
   * @throws IOException if the JSON string is invalid with respect to SaleItem
   */
  public static SaleItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleItem.class);
  }

  /**
   * Convert an instance of SaleItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

