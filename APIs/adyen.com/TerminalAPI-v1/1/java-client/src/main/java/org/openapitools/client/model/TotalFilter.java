/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TotalFilter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TotalFilter {
  public static final String SERIALIZED_NAME_OPERATOR_I_D = "OperatorID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_I_D)
  private String operatorID;

  public static final String SERIALIZED_NAME_P_O_I_I_D = "POIID";
  @SerializedName(SERIALIZED_NAME_P_O_I_I_D)
  private String POIID;

  public static final String SERIALIZED_NAME_SALE_I_D = "SaleID";
  @SerializedName(SERIALIZED_NAME_SALE_I_D)
  private String saleID;

  public static final String SERIALIZED_NAME_SHIFT_NUMBER = "ShiftNumber";
  @SerializedName(SERIALIZED_NAME_SHIFT_NUMBER)
  private String shiftNumber;

  public static final String SERIALIZED_NAME_TOTALS_GROUP_I_D = "TotalsGroupID";
  @SerializedName(SERIALIZED_NAME_TOTALS_GROUP_I_D)
  private String totalsGroupID;

  public TotalFilter() {
  }

  public TotalFilter operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * Get operatorID
   * @return operatorID
   */
  @javax.annotation.Nullable
  public String getOperatorID() {
    return operatorID;
  }

  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }


  public TotalFilter POIID(String POIID) {
    this.POIID = POIID;
    return this;
  }

  /**
   * Get POIID
   * @return POIID
   */
  @javax.annotation.Nullable
  public String getPOIID() {
    return POIID;
  }

  public void setPOIID(String POIID) {
    this.POIID = POIID;
  }


  public TotalFilter saleID(String saleID) {
    this.saleID = saleID;
    return this;
  }

  /**
   * Get saleID
   * @return saleID
   */
  @javax.annotation.Nullable
  public String getSaleID() {
    return saleID;
  }

  public void setSaleID(String saleID) {
    this.saleID = saleID;
  }


  public TotalFilter shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * Get shiftNumber
   * @return shiftNumber
   */
  @javax.annotation.Nullable
  public String getShiftNumber() {
    return shiftNumber;
  }

  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }


  public TotalFilter totalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
    return this;
  }

  /**
   * Get totalsGroupID
   * @return totalsGroupID
   */
  @javax.annotation.Nullable
  public String getTotalsGroupID() {
    return totalsGroupID;
  }

  public void setTotalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TotalFilter totalFilter = (TotalFilter) o;
    return Objects.equals(this.operatorID, totalFilter.operatorID) &&
        Objects.equals(this.POIID, totalFilter.POIID) &&
        Objects.equals(this.saleID, totalFilter.saleID) &&
        Objects.equals(this.shiftNumber, totalFilter.shiftNumber) &&
        Objects.equals(this.totalsGroupID, totalFilter.totalsGroupID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(operatorID, POIID, saleID, shiftNumber, totalsGroupID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TotalFilter {\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    POIID: ").append(toIndentedString(POIID)).append("\n");
    sb.append("    saleID: ").append(toIndentedString(saleID)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    totalsGroupID: ").append(toIndentedString(totalsGroupID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("OperatorID");
    openapiFields.add("POIID");
    openapiFields.add("SaleID");
    openapiFields.add("ShiftNumber");
    openapiFields.add("TotalsGroupID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TotalFilter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TotalFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TotalFilter is not found in the empty JSON string", TotalFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TotalFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TotalFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("OperatorID") != null && !jsonObj.get("OperatorID").isJsonNull()) && !jsonObj.get("OperatorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorID").toString()));
      }
      if ((jsonObj.get("POIID") != null && !jsonObj.get("POIID").isJsonNull()) && !jsonObj.get("POIID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POIID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POIID").toString()));
      }
      if ((jsonObj.get("SaleID") != null && !jsonObj.get("SaleID").isJsonNull()) && !jsonObj.get("SaleID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleID").toString()));
      }
      if ((jsonObj.get("ShiftNumber") != null && !jsonObj.get("ShiftNumber").isJsonNull()) && !jsonObj.get("ShiftNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShiftNumber").toString()));
      }
      if ((jsonObj.get("TotalsGroupID") != null && !jsonObj.get("TotalsGroupID").isJsonNull()) && !jsonObj.get("TotalsGroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalsGroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalsGroupID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TotalFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TotalFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TotalFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TotalFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<TotalFilter>() {
           @Override
           public void write(JsonWriter out, TotalFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TotalFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TotalFilter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TotalFilter
   * @throws IOException if the JSON string is invalid with respect to TotalFilter
   */
  public static TotalFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TotalFilter.class);
  }

  /**
   * Convert an instance of TotalFilter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

