/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.TransactionTotals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTotalsResponse {
  public static final String SERIALIZED_NAME_PO_I_RECONCILIATION_I_D = "POIReconciliationID";
  @SerializedName(SERIALIZED_NAME_PO_I_RECONCILIATION_I_D)
  private Integer poIReconciliationID;

  public static final String SERIALIZED_NAME_RESPONSE = "Response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private Response response;

  public static final String SERIALIZED_NAME_TRANSACTION_TOTALS = "TransactionTotals";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_TOTALS)
  private List<TransactionTotals> transactionTotals = new ArrayList<>();

  public GetTotalsResponse() {
  }

  public GetTotalsResponse poIReconciliationID(Integer poIReconciliationID) {
    this.poIReconciliationID = poIReconciliationID;
    return this;
  }

  /**
   * Identification of the reconciliation period between Sale and POI.
   * @return poIReconciliationID
   */
  @javax.annotation.Nonnull
  public Integer getPoIReconciliationID() {
    return poIReconciliationID;
  }

  public void setPoIReconciliationID(Integer poIReconciliationID) {
    this.poIReconciliationID = poIReconciliationID;
  }


  public GetTotalsResponse response(Response response) {
    this.response = response;
    return this;
  }

  /**
   * Get response
   * @return response
   */
  @javax.annotation.Nonnull
  public Response getResponse() {
    return response;
  }

  public void setResponse(Response response) {
    this.response = response;
  }


  public GetTotalsResponse transactionTotals(List<TransactionTotals> transactionTotals) {
    this.transactionTotals = transactionTotals;
    return this;
  }

  public GetTotalsResponse addTransactionTotalsItem(TransactionTotals transactionTotalsItem) {
    if (this.transactionTotals == null) {
      this.transactionTotals = new ArrayList<>();
    }
    this.transactionTotals.add(transactionTotalsItem);
    return this;
  }

  /**
   * Get transactionTotals
   * @return transactionTotals
   */
  @javax.annotation.Nullable
  public List<TransactionTotals> getTransactionTotals() {
    return transactionTotals;
  }

  public void setTransactionTotals(List<TransactionTotals> transactionTotals) {
    this.transactionTotals = transactionTotals;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTotalsResponse getTotalsResponse = (GetTotalsResponse) o;
    return Objects.equals(this.poIReconciliationID, getTotalsResponse.poIReconciliationID) &&
        Objects.equals(this.response, getTotalsResponse.response) &&
        Objects.equals(this.transactionTotals, getTotalsResponse.transactionTotals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poIReconciliationID, response, transactionTotals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTotalsResponse {\n");
    sb.append("    poIReconciliationID: ").append(toIndentedString(poIReconciliationID)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    transactionTotals: ").append(toIndentedString(transactionTotals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("POIReconciliationID");
    openapiFields.add("Response");
    openapiFields.add("TransactionTotals");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("POIReconciliationID");
    openapiRequiredFields.add("Response");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTotalsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTotalsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTotalsResponse is not found in the empty JSON string", GetTotalsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTotalsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTotalsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetTotalsResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `Response`
      Response.validateJsonElement(jsonObj.get("Response"));
      if (jsonObj.get("TransactionTotals") != null && !jsonObj.get("TransactionTotals").isJsonNull()) {
        JsonArray jsonArraytransactionTotals = jsonObj.getAsJsonArray("TransactionTotals");
        if (jsonArraytransactionTotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TransactionTotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TransactionTotals` to be an array in the JSON string but got `%s`", jsonObj.get("TransactionTotals").toString()));
          }

          // validate the optional field `TransactionTotals` (array)
          for (int i = 0; i < jsonArraytransactionTotals.size(); i++) {
            TransactionTotals.validateJsonElement(jsonArraytransactionTotals.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTotalsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTotalsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTotalsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTotalsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTotalsResponse>() {
           @Override
           public void write(JsonWriter out, GetTotalsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTotalsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTotalsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTotalsResponse
   * @throws IOException if the JSON string is invalid with respect to GetTotalsResponse
   */
  public static GetTotalsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTotalsResponse.class);
  }

  /**
   * Convert an instance of GetTotalsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

