/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Login Request, if a Sale Terminal is involved in the login. In other messages, when a logical device is out of order (SaleCapabilites), or when the other data have changed since or were not in the Login. Information related to the software and hardware feature of the Sale Terminal.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaleTerminalData {
  public static final String SERIALIZED_NAME_TOTALS_GROUP_I_D = "TotalsGroupID";
  @SerializedName(SERIALIZED_NAME_TOTALS_GROUP_I_D)
  private String totalsGroupID;

  public SaleTerminalData() {
  }

  public SaleTerminalData totalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
    return this;
  }

  /**
   * If present, default value for all transaction.
   * @return totalsGroupID
   */
  @javax.annotation.Nullable
  public String getTotalsGroupID() {
    return totalsGroupID;
  }

  public void setTotalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleTerminalData saleTerminalData = (SaleTerminalData) o;
    return Objects.equals(this.totalsGroupID, saleTerminalData.totalsGroupID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalsGroupID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleTerminalData {\n");
    sb.append("    totalsGroupID: ").append(toIndentedString(totalsGroupID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalsGroupID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleTerminalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleTerminalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleTerminalData is not found in the empty JSON string", SaleTerminalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleTerminalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleTerminalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("TotalsGroupID") != null && !jsonObj.get("TotalsGroupID").isJsonNull()) && !jsonObj.get("TotalsGroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalsGroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalsGroupID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleTerminalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleTerminalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleTerminalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleTerminalData.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleTerminalData>() {
           @Override
           public void write(JsonWriter out, SaleTerminalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleTerminalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleTerminalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleTerminalData
   * @throws IOException if the JSON string is invalid with respect to SaleTerminalData
   */
  public static SaleTerminalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleTerminalData.class);
  }

  /**
   * Convert an instance of SaleTerminalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

