/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.LoyaltyAccount;
import org.openapitools.client.model.LoyaltyAcquirerData;
import org.openapitools.client.model.LoyaltyAmount;
import org.openapitools.client.model.Rebates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Message Response, the result of each loyalty brand transaction. Data related to the result of a processed loyalty transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyResult {
  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "CurrentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private BigDecimal currentBalance;

  public static final String SERIALIZED_NAME_LOYALTY_ACCOUNT = "LoyaltyAccount";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACCOUNT)
  private LoyaltyAccount loyaltyAccount;

  public static final String SERIALIZED_NAME_LOYALTY_ACQUIRER_DATA = "LoyaltyAcquirerData";
  @SerializedName(SERIALIZED_NAME_LOYALTY_ACQUIRER_DATA)
  private LoyaltyAcquirerData loyaltyAcquirerData;

  public static final String SERIALIZED_NAME_LOYALTY_AMOUNT = "LoyaltyAmount";
  @SerializedName(SERIALIZED_NAME_LOYALTY_AMOUNT)
  private LoyaltyAmount loyaltyAmount;

  public static final String SERIALIZED_NAME_REBATES = "Rebates";
  @SerializedName(SERIALIZED_NAME_REBATES)
  private Rebates rebates;

  public LoyaltyResult() {
  }

  public LoyaltyResult currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * if known (provided by the card or an external host).
   * minimum: 0
   * maximum: 99999999.999999
   * @return currentBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }


  public LoyaltyResult loyaltyAccount(LoyaltyAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
    return this;
  }

  /**
   * Get loyaltyAccount
   * @return loyaltyAccount
   */
  @javax.annotation.Nonnull
  public LoyaltyAccount getLoyaltyAccount() {
    return loyaltyAccount;
  }

  public void setLoyaltyAccount(LoyaltyAccount loyaltyAccount) {
    this.loyaltyAccount = loyaltyAccount;
  }


  public LoyaltyResult loyaltyAcquirerData(LoyaltyAcquirerData loyaltyAcquirerData) {
    this.loyaltyAcquirerData = loyaltyAcquirerData;
    return this;
  }

  /**
   * Get loyaltyAcquirerData
   * @return loyaltyAcquirerData
   */
  @javax.annotation.Nullable
  public LoyaltyAcquirerData getLoyaltyAcquirerData() {
    return loyaltyAcquirerData;
  }

  public void setLoyaltyAcquirerData(LoyaltyAcquirerData loyaltyAcquirerData) {
    this.loyaltyAcquirerData = loyaltyAcquirerData;
  }


  public LoyaltyResult loyaltyAmount(LoyaltyAmount loyaltyAmount) {
    this.loyaltyAmount = loyaltyAmount;
    return this;
  }

  /**
   * Get loyaltyAmount
   * @return loyaltyAmount
   */
  @javax.annotation.Nullable
  public LoyaltyAmount getLoyaltyAmount() {
    return loyaltyAmount;
  }

  public void setLoyaltyAmount(LoyaltyAmount loyaltyAmount) {
    this.loyaltyAmount = loyaltyAmount;
  }


  public LoyaltyResult rebates(Rebates rebates) {
    this.rebates = rebates;
    return this;
  }

  /**
   * Get rebates
   * @return rebates
   */
  @javax.annotation.Nullable
  public Rebates getRebates() {
    return rebates;
  }

  public void setRebates(Rebates rebates) {
    this.rebates = rebates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyResult loyaltyResult = (LoyaltyResult) o;
    return Objects.equals(this.currentBalance, loyaltyResult.currentBalance) &&
        Objects.equals(this.loyaltyAccount, loyaltyResult.loyaltyAccount) &&
        Objects.equals(this.loyaltyAcquirerData, loyaltyResult.loyaltyAcquirerData) &&
        Objects.equals(this.loyaltyAmount, loyaltyResult.loyaltyAmount) &&
        Objects.equals(this.rebates, loyaltyResult.rebates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentBalance, loyaltyAccount, loyaltyAcquirerData, loyaltyAmount, rebates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyResult {\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    loyaltyAccount: ").append(toIndentedString(loyaltyAccount)).append("\n");
    sb.append("    loyaltyAcquirerData: ").append(toIndentedString(loyaltyAcquirerData)).append("\n");
    sb.append("    loyaltyAmount: ").append(toIndentedString(loyaltyAmount)).append("\n");
    sb.append("    rebates: ").append(toIndentedString(rebates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CurrentBalance");
    openapiFields.add("LoyaltyAccount");
    openapiFields.add("LoyaltyAcquirerData");
    openapiFields.add("LoyaltyAmount");
    openapiFields.add("Rebates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LoyaltyAccount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyResult is not found in the empty JSON string", LoyaltyResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `LoyaltyAccount`
      LoyaltyAccount.validateJsonElement(jsonObj.get("LoyaltyAccount"));
      // validate the optional field `LoyaltyAcquirerData`
      if (jsonObj.get("LoyaltyAcquirerData") != null && !jsonObj.get("LoyaltyAcquirerData").isJsonNull()) {
        LoyaltyAcquirerData.validateJsonElement(jsonObj.get("LoyaltyAcquirerData"));
      }
      // validate the optional field `LoyaltyAmount`
      if (jsonObj.get("LoyaltyAmount") != null && !jsonObj.get("LoyaltyAmount").isJsonNull()) {
        LoyaltyAmount.validateJsonElement(jsonObj.get("LoyaltyAmount"));
      }
      // validate the optional field `Rebates`
      if (jsonObj.get("Rebates") != null && !jsonObj.get("Rebates").isJsonNull()) {
        Rebates.validateJsonElement(jsonObj.get("Rebates"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyResult>() {
           @Override
           public void write(JsonWriter out, LoyaltyResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyResult
   * @throws IOException if the JSON string is invalid with respect to LoyaltyResult
   */
  public static LoyaltyResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyResult.class);
  }

  /**
   * Convert an instance of LoyaltyResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

