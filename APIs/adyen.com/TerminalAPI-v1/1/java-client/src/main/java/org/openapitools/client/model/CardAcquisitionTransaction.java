/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyHandling;
import org.openapitools.client.model.PaymentType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardAcquisitionTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardAcquisitionTransaction {
  public static final String SERIALIZED_NAME_ALLOWED_LOYALTY_BRAND = "AllowedLoyaltyBrand";
  @SerializedName(SERIALIZED_NAME_ALLOWED_LOYALTY_BRAND)
  private List<String> allowedLoyaltyBrand = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_PAYMENT_BRAND = "AllowedPaymentBrand";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PAYMENT_BRAND)
  private List<String> allowedPaymentBrand = new ArrayList<>();

  public static final String SERIALIZED_NAME_CASH_BACK_FLAG = "CashBackFlag";
  @SerializedName(SERIALIZED_NAME_CASH_BACK_FLAG)
  private Boolean cashBackFlag;

  public static final String SERIALIZED_NAME_CUSTOMER_LANGUAGE = "CustomerLanguage";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LANGUAGE)
  private String customerLanguage;

  public static final String SERIALIZED_NAME_FORCE_CUSTOMER_SELECTION_FLAG = "ForceCustomerSelectionFlag";
  @SerializedName(SERIALIZED_NAME_FORCE_CUSTOMER_SELECTION_FLAG)
  private Boolean forceCustomerSelectionFlag;

  /**
   * Gets or Sets forceEntryMode
   */
  @JsonAdapter(ForceEntryModeEnum.Adapter.class)
  public enum ForceEntryModeEnum {
    CHECK_READER("CheckReader"),
    
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAG_STRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUS_ICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    ForceEntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ForceEntryModeEnum fromValue(String value) {
      for (ForceEntryModeEnum b : ForceEntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ForceEntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ForceEntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ForceEntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ForceEntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ForceEntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORCE_ENTRY_MODE = "ForceEntryMode";
  @SerializedName(SERIALIZED_NAME_FORCE_ENTRY_MODE)
  private List<ForceEntryModeEnum> forceEntryMode = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOYALTY_HANDLING = "LoyaltyHandling";
  @SerializedName(SERIALIZED_NAME_LOYALTY_HANDLING)
  private LoyaltyHandling loyaltyHandling;

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "PaymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentType paymentType;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "TotalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public CardAcquisitionTransaction() {
  }

  public CardAcquisitionTransaction allowedLoyaltyBrand(List<String> allowedLoyaltyBrand) {
    this.allowedLoyaltyBrand = allowedLoyaltyBrand;
    return this;
  }

  public CardAcquisitionTransaction addAllowedLoyaltyBrandItem(String allowedLoyaltyBrandItem) {
    if (this.allowedLoyaltyBrand == null) {
      this.allowedLoyaltyBrand = new ArrayList<>();
    }
    this.allowedLoyaltyBrand.add(allowedLoyaltyBrandItem);
    return this;
  }

  /**
   * Get allowedLoyaltyBrand
   * @return allowedLoyaltyBrand
   */
  @javax.annotation.Nullable
  public List<String> getAllowedLoyaltyBrand() {
    return allowedLoyaltyBrand;
  }

  public void setAllowedLoyaltyBrand(List<String> allowedLoyaltyBrand) {
    this.allowedLoyaltyBrand = allowedLoyaltyBrand;
  }


  public CardAcquisitionTransaction allowedPaymentBrand(List<String> allowedPaymentBrand) {
    this.allowedPaymentBrand = allowedPaymentBrand;
    return this;
  }

  public CardAcquisitionTransaction addAllowedPaymentBrandItem(String allowedPaymentBrandItem) {
    if (this.allowedPaymentBrand == null) {
      this.allowedPaymentBrand = new ArrayList<>();
    }
    this.allowedPaymentBrand.add(allowedPaymentBrandItem);
    return this;
  }

  /**
   * Get allowedPaymentBrand
   * @return allowedPaymentBrand
   */
  @javax.annotation.Nullable
  public List<String> getAllowedPaymentBrand() {
    return allowedPaymentBrand;
  }

  public void setAllowedPaymentBrand(List<String> allowedPaymentBrand) {
    this.allowedPaymentBrand = allowedPaymentBrand;
  }


  public CardAcquisitionTransaction cashBackFlag(Boolean cashBackFlag) {
    this.cashBackFlag = cashBackFlag;
    return this;
  }

  /**
   * Get cashBackFlag
   * @return cashBackFlag
   */
  @javax.annotation.Nullable
  public Boolean getCashBackFlag() {
    return cashBackFlag;
  }

  public void setCashBackFlag(Boolean cashBackFlag) {
    this.cashBackFlag = cashBackFlag;
  }


  public CardAcquisitionTransaction customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * Get customerLanguage
   * @return customerLanguage
   */
  @javax.annotation.Nullable
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }


  public CardAcquisitionTransaction forceCustomerSelectionFlag(Boolean forceCustomerSelectionFlag) {
    this.forceCustomerSelectionFlag = forceCustomerSelectionFlag;
    return this;
  }

  /**
   * Get forceCustomerSelectionFlag
   * @return forceCustomerSelectionFlag
   */
  @javax.annotation.Nullable
  public Boolean getForceCustomerSelectionFlag() {
    return forceCustomerSelectionFlag;
  }

  public void setForceCustomerSelectionFlag(Boolean forceCustomerSelectionFlag) {
    this.forceCustomerSelectionFlag = forceCustomerSelectionFlag;
  }


  public CardAcquisitionTransaction forceEntryMode(List<ForceEntryModeEnum> forceEntryMode) {
    this.forceEntryMode = forceEntryMode;
    return this;
  }

  public CardAcquisitionTransaction addForceEntryModeItem(ForceEntryModeEnum forceEntryModeItem) {
    if (this.forceEntryMode == null) {
      this.forceEntryMode = new ArrayList<>();
    }
    this.forceEntryMode.add(forceEntryModeItem);
    return this;
  }

  /**
   * Get forceEntryMode
   * @return forceEntryMode
   */
  @javax.annotation.Nullable
  public List<ForceEntryModeEnum> getForceEntryMode() {
    return forceEntryMode;
  }

  public void setForceEntryMode(List<ForceEntryModeEnum> forceEntryMode) {
    this.forceEntryMode = forceEntryMode;
  }


  public CardAcquisitionTransaction loyaltyHandling(LoyaltyHandling loyaltyHandling) {
    this.loyaltyHandling = loyaltyHandling;
    return this;
  }

  /**
   * Get loyaltyHandling
   * @return loyaltyHandling
   */
  @javax.annotation.Nullable
  public LoyaltyHandling getLoyaltyHandling() {
    return loyaltyHandling;
  }

  public void setLoyaltyHandling(LoyaltyHandling loyaltyHandling) {
    this.loyaltyHandling = loyaltyHandling;
  }


  public CardAcquisitionTransaction paymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Get paymentType
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentType getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentType paymentType) {
    this.paymentType = paymentType;
  }


  public CardAcquisitionTransaction totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardAcquisitionTransaction cardAcquisitionTransaction = (CardAcquisitionTransaction) o;
    return Objects.equals(this.allowedLoyaltyBrand, cardAcquisitionTransaction.allowedLoyaltyBrand) &&
        Objects.equals(this.allowedPaymentBrand, cardAcquisitionTransaction.allowedPaymentBrand) &&
        Objects.equals(this.cashBackFlag, cardAcquisitionTransaction.cashBackFlag) &&
        Objects.equals(this.customerLanguage, cardAcquisitionTransaction.customerLanguage) &&
        Objects.equals(this.forceCustomerSelectionFlag, cardAcquisitionTransaction.forceCustomerSelectionFlag) &&
        Objects.equals(this.forceEntryMode, cardAcquisitionTransaction.forceEntryMode) &&
        Objects.equals(this.loyaltyHandling, cardAcquisitionTransaction.loyaltyHandling) &&
        Objects.equals(this.paymentType, cardAcquisitionTransaction.paymentType) &&
        Objects.equals(this.totalAmount, cardAcquisitionTransaction.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedLoyaltyBrand, allowedPaymentBrand, cashBackFlag, customerLanguage, forceCustomerSelectionFlag, forceEntryMode, loyaltyHandling, paymentType, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardAcquisitionTransaction {\n");
    sb.append("    allowedLoyaltyBrand: ").append(toIndentedString(allowedLoyaltyBrand)).append("\n");
    sb.append("    allowedPaymentBrand: ").append(toIndentedString(allowedPaymentBrand)).append("\n");
    sb.append("    cashBackFlag: ").append(toIndentedString(cashBackFlag)).append("\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    forceCustomerSelectionFlag: ").append(toIndentedString(forceCustomerSelectionFlag)).append("\n");
    sb.append("    forceEntryMode: ").append(toIndentedString(forceEntryMode)).append("\n");
    sb.append("    loyaltyHandling: ").append(toIndentedString(loyaltyHandling)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowedLoyaltyBrand");
    openapiFields.add("AllowedPaymentBrand");
    openapiFields.add("CashBackFlag");
    openapiFields.add("CustomerLanguage");
    openapiFields.add("ForceCustomerSelectionFlag");
    openapiFields.add("ForceEntryMode");
    openapiFields.add("LoyaltyHandling");
    openapiFields.add("PaymentType");
    openapiFields.add("TotalAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardAcquisitionTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardAcquisitionTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardAcquisitionTransaction is not found in the empty JSON string", CardAcquisitionTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardAcquisitionTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardAcquisitionTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowedLoyaltyBrand") != null && !jsonObj.get("AllowedLoyaltyBrand").isJsonNull() && !jsonObj.get("AllowedLoyaltyBrand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowedLoyaltyBrand` to be an array in the JSON string but got `%s`", jsonObj.get("AllowedLoyaltyBrand").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowedPaymentBrand") != null && !jsonObj.get("AllowedPaymentBrand").isJsonNull() && !jsonObj.get("AllowedPaymentBrand").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowedPaymentBrand` to be an array in the JSON string but got `%s`", jsonObj.get("AllowedPaymentBrand").toString()));
      }
      if ((jsonObj.get("CustomerLanguage") != null && !jsonObj.get("CustomerLanguage").isJsonNull()) && !jsonObj.get("CustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerLanguage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ForceEntryMode") != null && !jsonObj.get("ForceEntryMode").isJsonNull() && !jsonObj.get("ForceEntryMode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ForceEntryMode` to be an array in the JSON string but got `%s`", jsonObj.get("ForceEntryMode").toString()));
      }
      // validate the optional field `LoyaltyHandling`
      if (jsonObj.get("LoyaltyHandling") != null && !jsonObj.get("LoyaltyHandling").isJsonNull()) {
        LoyaltyHandling.validateJsonElement(jsonObj.get("LoyaltyHandling"));
      }
      // validate the optional field `PaymentType`
      if (jsonObj.get("PaymentType") != null && !jsonObj.get("PaymentType").isJsonNull()) {
        PaymentType.validateJsonElement(jsonObj.get("PaymentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardAcquisitionTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardAcquisitionTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardAcquisitionTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardAcquisitionTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<CardAcquisitionTransaction>() {
           @Override
           public void write(JsonWriter out, CardAcquisitionTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardAcquisitionTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardAcquisitionTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardAcquisitionTransaction
   * @throws IOException if the JSON string is invalid with respect to CardAcquisitionTransaction
   */
  public static CardAcquisitionTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardAcquisitionTransaction.class);
  }

  /**
   * Convert an instance of CardAcquisitionTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

