/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MessageCategory;
import org.openapitools.client.model.MessageClass;
import org.openapitools.client.model.MessageType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the Sale to POI protocol management. Message header of the Sale to POI protocol message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MessageHeader {
  public static final String SERIALIZED_NAME_DEVICE_I_D = "DeviceID";
  @SerializedName(SERIALIZED_NAME_DEVICE_I_D)
  private String deviceID;

  public static final String SERIALIZED_NAME_MESSAGE_CATEGORY = "MessageCategory";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CATEGORY)
  private MessageCategory messageCategory;

  public static final String SERIALIZED_NAME_MESSAGE_CLASS = "MessageClass";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CLASS)
  private MessageClass messageClass;

  public static final String SERIALIZED_NAME_MESSAGE_TYPE = "MessageType";
  @SerializedName(SERIALIZED_NAME_MESSAGE_TYPE)
  private MessageType messageType;

  public static final String SERIALIZED_NAME_P_O_I_I_D = "POIID";
  @SerializedName(SERIALIZED_NAME_P_O_I_I_D)
  private String POIID;

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "ProtocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private String protocolVersion;

  public static final String SERIALIZED_NAME_SALE_I_D = "SaleID";
  @SerializedName(SERIALIZED_NAME_SALE_I_D)
  private String saleID;

  public static final String SERIALIZED_NAME_SERVICE_I_D = "ServiceID";
  @SerializedName(SERIALIZED_NAME_SERVICE_I_D)
  private String serviceID;

  public MessageHeader() {
  }

  public MessageHeader deviceID(String deviceID) {
    this.deviceID = deviceID;
    return this;
  }

  /**
   * If Device MessageClass.
   * @return deviceID
   */
  @javax.annotation.Nullable
  public String getDeviceID() {
    return deviceID;
  }

  public void setDeviceID(String deviceID) {
    this.deviceID = deviceID;
  }


  public MessageHeader messageCategory(MessageCategory messageCategory) {
    this.messageCategory = messageCategory;
    return this;
  }

  /**
   * Get messageCategory
   * @return messageCategory
   */
  @javax.annotation.Nonnull
  public MessageCategory getMessageCategory() {
    return messageCategory;
  }

  public void setMessageCategory(MessageCategory messageCategory) {
    this.messageCategory = messageCategory;
  }


  public MessageHeader messageClass(MessageClass messageClass) {
    this.messageClass = messageClass;
    return this;
  }

  /**
   * Get messageClass
   * @return messageClass
   */
  @javax.annotation.Nonnull
  public MessageClass getMessageClass() {
    return messageClass;
  }

  public void setMessageClass(MessageClass messageClass) {
    this.messageClass = messageClass;
  }


  public MessageHeader messageType(MessageType messageType) {
    this.messageType = messageType;
    return this;
  }

  /**
   * Get messageType
   * @return messageType
   */
  @javax.annotation.Nonnull
  public MessageType getMessageType() {
    return messageType;
  }

  public void setMessageType(MessageType messageType) {
    this.messageType = messageType;
  }


  public MessageHeader POIID(String POIID) {
    this.POIID = POIID;
    return this;
  }

  /**
   * Identification of a POI System or a POI Terminal for the Sale to POI protocol.
   * @return POIID
   */
  @javax.annotation.Nonnull
  public String getPOIID() {
    return POIID;
  }

  public void setPOIID(String POIID) {
    this.POIID = POIID;
  }


  public MessageHeader protocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * If MessageCategory is Login or Diagnosis.
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public String getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(String protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public MessageHeader saleID(String saleID) {
    this.saleID = saleID;
    return this;
  }

  /**
   * Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
   * @return saleID
   */
  @javax.annotation.Nonnull
  public String getSaleID() {
    return saleID;
  }

  public void setSaleID(String saleID) {
    this.saleID = saleID;
  }


  public MessageHeader serviceID(String serviceID) {
    this.serviceID = serviceID;
    return this;
  }

  /**
   * Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.
   * @return serviceID
   */
  @javax.annotation.Nullable
  public String getServiceID() {
    return serviceID;
  }

  public void setServiceID(String serviceID) {
    this.serviceID = serviceID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageHeader messageHeader = (MessageHeader) o;
    return Objects.equals(this.deviceID, messageHeader.deviceID) &&
        Objects.equals(this.messageCategory, messageHeader.messageCategory) &&
        Objects.equals(this.messageClass, messageHeader.messageClass) &&
        Objects.equals(this.messageType, messageHeader.messageType) &&
        Objects.equals(this.POIID, messageHeader.POIID) &&
        Objects.equals(this.protocolVersion, messageHeader.protocolVersion) &&
        Objects.equals(this.saleID, messageHeader.saleID) &&
        Objects.equals(this.serviceID, messageHeader.serviceID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceID, messageCategory, messageClass, messageType, POIID, protocolVersion, saleID, serviceID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageHeader {\n");
    sb.append("    deviceID: ").append(toIndentedString(deviceID)).append("\n");
    sb.append("    messageCategory: ").append(toIndentedString(messageCategory)).append("\n");
    sb.append("    messageClass: ").append(toIndentedString(messageClass)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    POIID: ").append(toIndentedString(POIID)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    saleID: ").append(toIndentedString(saleID)).append("\n");
    sb.append("    serviceID: ").append(toIndentedString(serviceID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DeviceID");
    openapiFields.add("MessageCategory");
    openapiFields.add("MessageClass");
    openapiFields.add("MessageType");
    openapiFields.add("POIID");
    openapiFields.add("ProtocolVersion");
    openapiFields.add("SaleID");
    openapiFields.add("ServiceID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageCategory");
    openapiRequiredFields.add("MessageClass");
    openapiRequiredFields.add("MessageType");
    openapiRequiredFields.add("POIID");
    openapiRequiredFields.add("SaleID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MessageHeader
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MessageHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MessageHeader is not found in the empty JSON string", MessageHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MessageHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MessageHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MessageHeader.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DeviceID") != null && !jsonObj.get("DeviceID").isJsonNull()) && !jsonObj.get("DeviceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DeviceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DeviceID").toString()));
      }
      // validate the required field `MessageCategory`
      MessageCategory.validateJsonElement(jsonObj.get("MessageCategory"));
      // validate the required field `MessageClass`
      MessageClass.validateJsonElement(jsonObj.get("MessageClass"));
      // validate the required field `MessageType`
      MessageType.validateJsonElement(jsonObj.get("MessageType"));
      if (!jsonObj.get("POIID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POIID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POIID").toString()));
      }
      if ((jsonObj.get("ProtocolVersion") != null && !jsonObj.get("ProtocolVersion").isJsonNull()) && !jsonObj.get("ProtocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtocolVersion").toString()));
      }
      if (!jsonObj.get("SaleID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleID").toString()));
      }
      if ((jsonObj.get("ServiceID") != null && !jsonObj.get("ServiceID").isJsonNull()) && !jsonObj.get("ServiceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ServiceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ServiceID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MessageHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MessageHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MessageHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MessageHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<MessageHeader>() {
           @Override
           public void write(JsonWriter out, MessageHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MessageHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MessageHeader given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MessageHeader
   * @throws IOException if the JSON string is invalid with respect to MessageHeader
   */
  public static MessageHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MessageHeader.class);
  }

  /**
   * Convert an instance of MessageHeader to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

