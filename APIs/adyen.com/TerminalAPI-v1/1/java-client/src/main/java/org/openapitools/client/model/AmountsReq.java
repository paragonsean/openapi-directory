/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Amounts of a payment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AmountsReq {
  public static final String SERIALIZED_NAME_CASH_BACK_AMOUNT = "CashBackAmount";
  @SerializedName(SERIALIZED_NAME_CASH_BACK_AMOUNT)
  private BigDecimal cashBackAmount;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_MAXIMUM_CASH_BACK_AMOUNT = "MaximumCashBackAmount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_CASH_BACK_AMOUNT)
  private BigDecimal maximumCashBackAmount;

  public static final String SERIALIZED_NAME_MINIMUM_AMOUNT_TO_DELIVER = "MinimumAmountToDeliver";
  @SerializedName(SERIALIZED_NAME_MINIMUM_AMOUNT_TO_DELIVER)
  private BigDecimal minimumAmountToDeliver;

  public static final String SERIALIZED_NAME_MINIMUM_SPLIT_AMOUNT = "MinimumSplitAmount";
  @SerializedName(SERIALIZED_NAME_MINIMUM_SPLIT_AMOUNT)
  private BigDecimal minimumSplitAmount;

  public static final String SERIALIZED_NAME_PAID_AMOUNT = "PaidAmount";
  @SerializedName(SERIALIZED_NAME_PAID_AMOUNT)
  private BigDecimal paidAmount;

  public static final String SERIALIZED_NAME_REQUESTED_AMOUNT = "RequestedAmount";
  @SerializedName(SERIALIZED_NAME_REQUESTED_AMOUNT)
  private BigDecimal requestedAmount;

  public static final String SERIALIZED_NAME_TIP_AMOUNT = "TipAmount";
  @SerializedName(SERIALIZED_NAME_TIP_AMOUNT)
  private BigDecimal tipAmount;

  public AmountsReq() {
  }

  public AmountsReq cashBackAmount(BigDecimal cashBackAmount) {
    this.cashBackAmount = cashBackAmount;
    return this;
  }

  /**
   * Get cashBackAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return cashBackAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getCashBackAmount() {
    return cashBackAmount;
  }

  public void setCashBackAmount(BigDecimal cashBackAmount) {
    this.cashBackAmount = cashBackAmount;
  }


  public AmountsReq currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nonnull
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public AmountsReq maximumCashBackAmount(BigDecimal maximumCashBackAmount) {
    this.maximumCashBackAmount = maximumCashBackAmount;
    return this;
  }

  /**
   * Get maximumCashBackAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return maximumCashBackAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getMaximumCashBackAmount() {
    return maximumCashBackAmount;
  }

  public void setMaximumCashBackAmount(BigDecimal maximumCashBackAmount) {
    this.maximumCashBackAmount = maximumCashBackAmount;
  }


  public AmountsReq minimumAmountToDeliver(BigDecimal minimumAmountToDeliver) {
    this.minimumAmountToDeliver = minimumAmountToDeliver;
    return this;
  }

  /**
   * Get minimumAmountToDeliver
   * minimum: 0
   * maximum: 99999999.999999
   * @return minimumAmountToDeliver
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimumAmountToDeliver() {
    return minimumAmountToDeliver;
  }

  public void setMinimumAmountToDeliver(BigDecimal minimumAmountToDeliver) {
    this.minimumAmountToDeliver = minimumAmountToDeliver;
  }


  public AmountsReq minimumSplitAmount(BigDecimal minimumSplitAmount) {
    this.minimumSplitAmount = minimumSplitAmount;
    return this;
  }

  /**
   * Get minimumSplitAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return minimumSplitAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getMinimumSplitAmount() {
    return minimumSplitAmount;
  }

  public void setMinimumSplitAmount(BigDecimal minimumSplitAmount) {
    this.minimumSplitAmount = minimumSplitAmount;
  }


  public AmountsReq paidAmount(BigDecimal paidAmount) {
    this.paidAmount = paidAmount;
    return this;
  }

  /**
   * Get paidAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return paidAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getPaidAmount() {
    return paidAmount;
  }

  public void setPaidAmount(BigDecimal paidAmount) {
    this.paidAmount = paidAmount;
  }


  public AmountsReq requestedAmount(BigDecimal requestedAmount) {
    this.requestedAmount = requestedAmount;
    return this;
  }

  /**
   * Get requestedAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return requestedAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getRequestedAmount() {
    return requestedAmount;
  }

  public void setRequestedAmount(BigDecimal requestedAmount) {
    this.requestedAmount = requestedAmount;
  }


  public AmountsReq tipAmount(BigDecimal tipAmount) {
    this.tipAmount = tipAmount;
    return this;
  }

  /**
   * Get tipAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return tipAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTipAmount() {
    return tipAmount;
  }

  public void setTipAmount(BigDecimal tipAmount) {
    this.tipAmount = tipAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmountsReq amountsReq = (AmountsReq) o;
    return Objects.equals(this.cashBackAmount, amountsReq.cashBackAmount) &&
        Objects.equals(this.currency, amountsReq.currency) &&
        Objects.equals(this.maximumCashBackAmount, amountsReq.maximumCashBackAmount) &&
        Objects.equals(this.minimumAmountToDeliver, amountsReq.minimumAmountToDeliver) &&
        Objects.equals(this.minimumSplitAmount, amountsReq.minimumSplitAmount) &&
        Objects.equals(this.paidAmount, amountsReq.paidAmount) &&
        Objects.equals(this.requestedAmount, amountsReq.requestedAmount) &&
        Objects.equals(this.tipAmount, amountsReq.tipAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cashBackAmount, currency, maximumCashBackAmount, minimumAmountToDeliver, minimumSplitAmount, paidAmount, requestedAmount, tipAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmountsReq {\n");
    sb.append("    cashBackAmount: ").append(toIndentedString(cashBackAmount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    maximumCashBackAmount: ").append(toIndentedString(maximumCashBackAmount)).append("\n");
    sb.append("    minimumAmountToDeliver: ").append(toIndentedString(minimumAmountToDeliver)).append("\n");
    sb.append("    minimumSplitAmount: ").append(toIndentedString(minimumSplitAmount)).append("\n");
    sb.append("    paidAmount: ").append(toIndentedString(paidAmount)).append("\n");
    sb.append("    requestedAmount: ").append(toIndentedString(requestedAmount)).append("\n");
    sb.append("    tipAmount: ").append(toIndentedString(tipAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CashBackAmount");
    openapiFields.add("Currency");
    openapiFields.add("MaximumCashBackAmount");
    openapiFields.add("MinimumAmountToDeliver");
    openapiFields.add("MinimumSplitAmount");
    openapiFields.add("PaidAmount");
    openapiFields.add("RequestedAmount");
    openapiFields.add("TipAmount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Currency");
    openapiRequiredFields.add("RequestedAmount");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmountsReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmountsReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmountsReq is not found in the empty JSON string", AmountsReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmountsReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmountsReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AmountsReq.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmountsReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmountsReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmountsReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmountsReq.class));

       return (TypeAdapter<T>) new TypeAdapter<AmountsReq>() {
           @Override
           public void write(JsonWriter out, AmountsReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmountsReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmountsReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmountsReq
   * @throws IOException if the JSON string is invalid with respect to AmountsReq
   */
  public static AmountsReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmountsReq.class);
  }

  /**
   * Convert an instance of AmountsReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

