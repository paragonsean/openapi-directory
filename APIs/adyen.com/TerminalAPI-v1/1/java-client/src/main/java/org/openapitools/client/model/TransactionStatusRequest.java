/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentQualifier;
import org.openapitools.client.model.MessageReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionStatusRequest {
  public static final String SERIALIZED_NAME_DOCUMENT_QUALIFIER = "DocumentQualifier";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_QUALIFIER)
  private List<DocumentQualifier> documentQualifier = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_REFERENCE = "MessageReference";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REFERENCE)
  private MessageReference messageReference;

  public static final String SERIALIZED_NAME_RECEIPT_REPRINT_FLAG = "ReceiptReprintFlag";
  @SerializedName(SERIALIZED_NAME_RECEIPT_REPRINT_FLAG)
  private Boolean receiptReprintFlag = false;

  public TransactionStatusRequest() {
  }

  public TransactionStatusRequest documentQualifier(List<DocumentQualifier> documentQualifier) {
    this.documentQualifier = documentQualifier;
    return this;
  }

  public TransactionStatusRequest addDocumentQualifierItem(DocumentQualifier documentQualifierItem) {
    if (this.documentQualifier == null) {
      this.documentQualifier = new ArrayList<>();
    }
    this.documentQualifier.add(documentQualifierItem);
    return this;
  }

  /**
   * Get documentQualifier
   * @return documentQualifier
   */
  @javax.annotation.Nullable
  public List<DocumentQualifier> getDocumentQualifier() {
    return documentQualifier;
  }

  public void setDocumentQualifier(List<DocumentQualifier> documentQualifier) {
    this.documentQualifier = documentQualifier;
  }


  public TransactionStatusRequest messageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
    return this;
  }

  /**
   * Get messageReference
   * @return messageReference
   */
  @javax.annotation.Nullable
  public MessageReference getMessageReference() {
    return messageReference;
  }

  public void setMessageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
  }


  public TransactionStatusRequest receiptReprintFlag(Boolean receiptReprintFlag) {
    this.receiptReprintFlag = receiptReprintFlag;
    return this;
  }

  /**
   * Request to reprint the POI receipt(s).
   * @return receiptReprintFlag
   */
  @javax.annotation.Nullable
  public Boolean getReceiptReprintFlag() {
    return receiptReprintFlag;
  }

  public void setReceiptReprintFlag(Boolean receiptReprintFlag) {
    this.receiptReprintFlag = receiptReprintFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionStatusRequest transactionStatusRequest = (TransactionStatusRequest) o;
    return Objects.equals(this.documentQualifier, transactionStatusRequest.documentQualifier) &&
        Objects.equals(this.messageReference, transactionStatusRequest.messageReference) &&
        Objects.equals(this.receiptReprintFlag, transactionStatusRequest.receiptReprintFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentQualifier, messageReference, receiptReprintFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionStatusRequest {\n");
    sb.append("    documentQualifier: ").append(toIndentedString(documentQualifier)).append("\n");
    sb.append("    messageReference: ").append(toIndentedString(messageReference)).append("\n");
    sb.append("    receiptReprintFlag: ").append(toIndentedString(receiptReprintFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentQualifier");
    openapiFields.add("MessageReference");
    openapiFields.add("ReceiptReprintFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionStatusRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionStatusRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionStatusRequest is not found in the empty JSON string", TransactionStatusRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionStatusRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionStatusRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("DocumentQualifier") != null && !jsonObj.get("DocumentQualifier").isJsonNull() && !jsonObj.get("DocumentQualifier").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DocumentQualifier` to be an array in the JSON string but got `%s`", jsonObj.get("DocumentQualifier").toString()));
      }
      // validate the optional field `MessageReference`
      if (jsonObj.get("MessageReference") != null && !jsonObj.get("MessageReference").isJsonNull()) {
        MessageReference.validateJsonElement(jsonObj.get("MessageReference"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionStatusRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionStatusRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionStatusRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionStatusRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionStatusRequest>() {
           @Override
           public void write(JsonWriter out, TransactionStatusRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionStatusRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionStatusRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionStatusRequest
   * @throws IOException if the JSON string is invalid with respect to TransactionStatusRequest
   */
  public static TransactionStatusRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionStatusRequest.class);
  }

  /**
   * Convert an instance of TransactionStatusRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

