/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Customer order attached to a customer, recorded in the POI system.  Allows the management of customer orders by the POI, for instance in a multi-channel or a click and collect sale transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomerOrder {
  public static final String SERIALIZED_NAME_ACCESSED_BY = "AccessedBy";
  @SerializedName(SERIALIZED_NAME_ACCESSED_BY)
  private String accessedBy;

  public static final String SERIALIZED_NAME_ADDITIONAL_INFORMATION = "AdditionalInformation";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INFORMATION)
  private String additionalInformation;

  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CURRENT_AMOUNT = "CurrentAmount";
  @SerializedName(SERIALIZED_NAME_CURRENT_AMOUNT)
  private BigDecimal currentAmount;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_I_D = "CustomerOrderID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_I_D)
  private String customerOrderID;

  public static final String SERIALIZED_NAME_END_DATE = "EndDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_FORECASTED_AMOUNT = "ForecastedAmount";
  @SerializedName(SERIALIZED_NAME_FORECASTED_AMOUNT)
  private BigDecimal forecastedAmount;

  public static final String SERIALIZED_NAME_OPEN_ORDER_STATE = "OpenOrderState";
  @SerializedName(SERIALIZED_NAME_OPEN_ORDER_STATE)
  private Boolean openOrderState = true;

  public static final String SERIALIZED_NAME_SALE_REFERENCE_I_D = "SaleReferenceID";
  @SerializedName(SERIALIZED_NAME_SALE_REFERENCE_I_D)
  private String saleReferenceID;

  public static final String SERIALIZED_NAME_START_DATE = "StartDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public CustomerOrder() {
  }

  public CustomerOrder accessedBy(String accessedBy) {
    this.accessedBy = accessedBy;
    return this;
  }

  /**
   * Get accessedBy
   * @return accessedBy
   */
  @javax.annotation.Nullable
  public String getAccessedBy() {
    return accessedBy;
  }

  public void setAccessedBy(String accessedBy) {
    this.accessedBy = accessedBy;
  }


  public CustomerOrder additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * Unqualified information.
   * @return additionalInformation
   */
  @javax.annotation.Nullable
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }


  public CustomerOrder currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of a monetary amount.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public CustomerOrder currentAmount(BigDecimal currentAmount) {
    this.currentAmount = currentAmount;
    return this;
  }

  /**
   * Total amount of all completed transactions of a customer order.
   * minimum: 0
   * maximum: 99999999.999999
   * @return currentAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getCurrentAmount() {
    return currentAmount;
  }

  public void setCurrentAmount(BigDecimal currentAmount) {
    this.currentAmount = currentAmount;
  }


  public CustomerOrder customerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
    return this;
  }

  /**
   * Additional and optional identification of a customer order.
   * @return customerOrderID
   */
  @javax.annotation.Nullable
  public String getCustomerOrderID() {
    return customerOrderID;
  }

  public void setCustomerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
  }


  public CustomerOrder endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Date time of the end of an operation.
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public CustomerOrder forecastedAmount(BigDecimal forecastedAmount) {
    this.forecastedAmount = forecastedAmount;
    return this;
  }

  /**
   * Get forecastedAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return forecastedAmount
   */
  @javax.annotation.Nonnull
  public BigDecimal getForecastedAmount() {
    return forecastedAmount;
  }

  public void setForecastedAmount(BigDecimal forecastedAmount) {
    this.forecastedAmount = forecastedAmount;
  }


  public CustomerOrder openOrderState(Boolean openOrderState) {
    this.openOrderState = openOrderState;
    return this;
  }

  /**
   * Get openOrderState
   * @return openOrderState
   */
  @javax.annotation.Nullable
  public Boolean getOpenOrderState() {
    return openOrderState;
  }

  public void setOpenOrderState(Boolean openOrderState) {
    this.openOrderState = openOrderState;
  }


  public CustomerOrder saleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
    return this;
  }

  /**
   * Get saleReferenceID
   * @return saleReferenceID
   */
  @javax.annotation.Nonnull
  public String getSaleReferenceID() {
    return saleReferenceID;
  }

  public void setSaleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
  }


  public CustomerOrder startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Date time of the beginning of an operation.
   * @return startDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerOrder customerOrder = (CustomerOrder) o;
    return Objects.equals(this.accessedBy, customerOrder.accessedBy) &&
        Objects.equals(this.additionalInformation, customerOrder.additionalInformation) &&
        Objects.equals(this.currency, customerOrder.currency) &&
        Objects.equals(this.currentAmount, customerOrder.currentAmount) &&
        Objects.equals(this.customerOrderID, customerOrder.customerOrderID) &&
        Objects.equals(this.endDate, customerOrder.endDate) &&
        Objects.equals(this.forecastedAmount, customerOrder.forecastedAmount) &&
        Objects.equals(this.openOrderState, customerOrder.openOrderState) &&
        Objects.equals(this.saleReferenceID, customerOrder.saleReferenceID) &&
        Objects.equals(this.startDate, customerOrder.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessedBy, additionalInformation, currency, currentAmount, customerOrderID, endDate, forecastedAmount, openOrderState, saleReferenceID, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerOrder {\n");
    sb.append("    accessedBy: ").append(toIndentedString(accessedBy)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currentAmount: ").append(toIndentedString(currentAmount)).append("\n");
    sb.append("    customerOrderID: ").append(toIndentedString(customerOrderID)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    forecastedAmount: ").append(toIndentedString(forecastedAmount)).append("\n");
    sb.append("    openOrderState: ").append(toIndentedString(openOrderState)).append("\n");
    sb.append("    saleReferenceID: ").append(toIndentedString(saleReferenceID)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccessedBy");
    openapiFields.add("AdditionalInformation");
    openapiFields.add("Currency");
    openapiFields.add("CurrentAmount");
    openapiFields.add("CustomerOrderID");
    openapiFields.add("EndDate");
    openapiFields.add("ForecastedAmount");
    openapiFields.add("OpenOrderState");
    openapiFields.add("SaleReferenceID");
    openapiFields.add("StartDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("CurrentAmount");
    openapiRequiredFields.add("ForecastedAmount");
    openapiRequiredFields.add("SaleReferenceID");
    openapiRequiredFields.add("StartDate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomerOrder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomerOrder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomerOrder is not found in the empty JSON string", CustomerOrder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomerOrder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomerOrder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomerOrder.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AccessedBy") != null && !jsonObj.get("AccessedBy").isJsonNull()) && !jsonObj.get("AccessedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AccessedBy").toString()));
      }
      if ((jsonObj.get("AdditionalInformation") != null && !jsonObj.get("AdditionalInformation").isJsonNull()) && !jsonObj.get("AdditionalInformation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalInformation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalInformation").toString()));
      }
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      if ((jsonObj.get("CustomerOrderID") != null && !jsonObj.get("CustomerOrderID").isJsonNull()) && !jsonObj.get("CustomerOrderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOrderID").toString()));
      }
      if (!jsonObj.get("SaleReferenceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleReferenceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleReferenceID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomerOrder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomerOrder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomerOrder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomerOrder.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomerOrder>() {
           @Override
           public void write(JsonWriter out, CustomerOrder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomerOrder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomerOrder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomerOrder
   * @throws IOException if the JSON string is invalid with respect to CustomerOrder
   */
  public static CustomerOrder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomerOrder.class);
  }

  /**
   * Convert an instance of CustomerOrder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

