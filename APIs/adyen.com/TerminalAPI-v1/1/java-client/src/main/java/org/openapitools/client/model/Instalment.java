/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.InstalmentType;
import org.openapitools.client.model.PeriodUnit;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Instalment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instalment {
  public static final String SERIALIZED_NAME_CHARGES = "Charges";
  @SerializedName(SERIALIZED_NAME_CHARGES)
  private BigDecimal charges;

  public static final String SERIALIZED_NAME_CUMULATIVE_AMOUNT = "CumulativeAmount";
  @SerializedName(SERIALIZED_NAME_CUMULATIVE_AMOUNT)
  private BigDecimal cumulativeAmount;

  public static final String SERIALIZED_NAME_FIRST_AMOUNT = "FirstAmount";
  @SerializedName(SERIALIZED_NAME_FIRST_AMOUNT)
  private BigDecimal firstAmount;

  public static final String SERIALIZED_NAME_FIRST_PAYMENT_DATE = "FirstPaymentDate";
  @SerializedName(SERIALIZED_NAME_FIRST_PAYMENT_DATE)
  private LocalDate firstPaymentDate;

  public static final String SERIALIZED_NAME_INSTALMENT_TYPE = "InstalmentType";
  @SerializedName(SERIALIZED_NAME_INSTALMENT_TYPE)
  private InstalmentType instalmentType;

  public static final String SERIALIZED_NAME_PERIOD = "Period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_PERIOD_UNIT = "PeriodUnit";
  @SerializedName(SERIALIZED_NAME_PERIOD_UNIT)
  private PeriodUnit periodUnit;

  public static final String SERIALIZED_NAME_PLAN_I_D = "PlanID";
  @SerializedName(SERIALIZED_NAME_PLAN_I_D)
  private String planID;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "SequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private Integer sequenceNumber;

  public static final String SERIALIZED_NAME_TOTAL_NB_OF_PAYMENTS = "TotalNbOfPayments";
  @SerializedName(SERIALIZED_NAME_TOTAL_NB_OF_PAYMENTS)
  private Integer totalNbOfPayments;

  public Instalment() {
  }

  public Instalment charges(BigDecimal charges) {
    this.charges = charges;
    return this;
  }

  /**
   * Get charges
   * minimum: 0
   * maximum: 99999999.999999
   * @return charges
   */
  @javax.annotation.Nullable
  public BigDecimal getCharges() {
    return charges;
  }

  public void setCharges(BigDecimal charges) {
    this.charges = charges;
  }


  public Instalment cumulativeAmount(BigDecimal cumulativeAmount) {
    this.cumulativeAmount = cumulativeAmount;
    return this;
  }

  /**
   * Get cumulativeAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return cumulativeAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getCumulativeAmount() {
    return cumulativeAmount;
  }

  public void setCumulativeAmount(BigDecimal cumulativeAmount) {
    this.cumulativeAmount = cumulativeAmount;
  }


  public Instalment firstAmount(BigDecimal firstAmount) {
    this.firstAmount = firstAmount;
    return this;
  }

  /**
   * Get firstAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return firstAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getFirstAmount() {
    return firstAmount;
  }

  public void setFirstAmount(BigDecimal firstAmount) {
    this.firstAmount = firstAmount;
  }


  public Instalment firstPaymentDate(LocalDate firstPaymentDate) {
    this.firstPaymentDate = firstPaymentDate;
    return this;
  }

  /**
   * Get firstPaymentDate
   * @return firstPaymentDate
   */
  @javax.annotation.Nullable
  public LocalDate getFirstPaymentDate() {
    return firstPaymentDate;
  }

  public void setFirstPaymentDate(LocalDate firstPaymentDate) {
    this.firstPaymentDate = firstPaymentDate;
  }


  public Instalment instalmentType(InstalmentType instalmentType) {
    this.instalmentType = instalmentType;
    return this;
  }

  /**
   * Get instalmentType
   * @return instalmentType
   */
  @javax.annotation.Nullable
  public InstalmentType getInstalmentType() {
    return instalmentType;
  }

  public void setInstalmentType(InstalmentType instalmentType) {
    this.instalmentType = instalmentType;
  }


  public Instalment period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Get period
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public Instalment periodUnit(PeriodUnit periodUnit) {
    this.periodUnit = periodUnit;
    return this;
  }

  /**
   * Get periodUnit
   * @return periodUnit
   */
  @javax.annotation.Nullable
  public PeriodUnit getPeriodUnit() {
    return periodUnit;
  }

  public void setPeriodUnit(PeriodUnit periodUnit) {
    this.periodUnit = periodUnit;
  }


  public Instalment planID(String planID) {
    this.planID = planID;
    return this;
  }

  /**
   * Get planID
   * @return planID
   */
  @javax.annotation.Nullable
  public String getPlanID() {
    return planID;
  }

  public void setPlanID(String planID) {
    this.planID = planID;
  }


  public Instalment sequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
    return this;
  }

  /**
   * Get sequenceNumber
   * @return sequenceNumber
   */
  @javax.annotation.Nullable
  public Integer getSequenceNumber() {
    return sequenceNumber;
  }

  public void setSequenceNumber(Integer sequenceNumber) {
    this.sequenceNumber = sequenceNumber;
  }


  public Instalment totalNbOfPayments(Integer totalNbOfPayments) {
    this.totalNbOfPayments = totalNbOfPayments;
    return this;
  }

  /**
   * Get totalNbOfPayments
   * @return totalNbOfPayments
   */
  @javax.annotation.Nullable
  public Integer getTotalNbOfPayments() {
    return totalNbOfPayments;
  }

  public void setTotalNbOfPayments(Integer totalNbOfPayments) {
    this.totalNbOfPayments = totalNbOfPayments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instalment instalment = (Instalment) o;
    return Objects.equals(this.charges, instalment.charges) &&
        Objects.equals(this.cumulativeAmount, instalment.cumulativeAmount) &&
        Objects.equals(this.firstAmount, instalment.firstAmount) &&
        Objects.equals(this.firstPaymentDate, instalment.firstPaymentDate) &&
        Objects.equals(this.instalmentType, instalment.instalmentType) &&
        Objects.equals(this.period, instalment.period) &&
        Objects.equals(this.periodUnit, instalment.periodUnit) &&
        Objects.equals(this.planID, instalment.planID) &&
        Objects.equals(this.sequenceNumber, instalment.sequenceNumber) &&
        Objects.equals(this.totalNbOfPayments, instalment.totalNbOfPayments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(charges, cumulativeAmount, firstAmount, firstPaymentDate, instalmentType, period, periodUnit, planID, sequenceNumber, totalNbOfPayments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instalment {\n");
    sb.append("    charges: ").append(toIndentedString(charges)).append("\n");
    sb.append("    cumulativeAmount: ").append(toIndentedString(cumulativeAmount)).append("\n");
    sb.append("    firstAmount: ").append(toIndentedString(firstAmount)).append("\n");
    sb.append("    firstPaymentDate: ").append(toIndentedString(firstPaymentDate)).append("\n");
    sb.append("    instalmentType: ").append(toIndentedString(instalmentType)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    periodUnit: ").append(toIndentedString(periodUnit)).append("\n");
    sb.append("    planID: ").append(toIndentedString(planID)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    totalNbOfPayments: ").append(toIndentedString(totalNbOfPayments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Charges");
    openapiFields.add("CumulativeAmount");
    openapiFields.add("FirstAmount");
    openapiFields.add("FirstPaymentDate");
    openapiFields.add("InstalmentType");
    openapiFields.add("Period");
    openapiFields.add("PeriodUnit");
    openapiFields.add("PlanID");
    openapiFields.add("SequenceNumber");
    openapiFields.add("TotalNbOfPayments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instalment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instalment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instalment is not found in the empty JSON string", Instalment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instalment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instalment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `InstalmentType`
      if (jsonObj.get("InstalmentType") != null && !jsonObj.get("InstalmentType").isJsonNull()) {
        InstalmentType.validateJsonElement(jsonObj.get("InstalmentType"));
      }
      // validate the optional field `PeriodUnit`
      if (jsonObj.get("PeriodUnit") != null && !jsonObj.get("PeriodUnit").isJsonNull()) {
        PeriodUnit.validateJsonElement(jsonObj.get("PeriodUnit"));
      }
      if ((jsonObj.get("PlanID") != null && !jsonObj.get("PlanID").isJsonNull()) && !jsonObj.get("PlanID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PlanID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PlanID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instalment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instalment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instalment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instalment.class));

       return (TypeAdapter<T>) new TypeAdapter<Instalment>() {
           @Override
           public void write(JsonWriter out, Instalment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instalment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instalment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instalment
   * @throws IOException if the JSON string is invalid with respect to Instalment
   */
  public static Instalment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instalment.class);
  }

  /**
   * Convert an instance of Instalment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

