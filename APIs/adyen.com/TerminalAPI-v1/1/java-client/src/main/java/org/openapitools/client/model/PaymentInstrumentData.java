/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CardData;
import org.openapitools.client.model.CheckData;
import org.openapitools.client.model.MobileData;
import org.openapitools.client.model.PaymentInstrumentType;
import org.openapitools.client.model.StoredValueAccountID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Sent in the result of the payment transaction. For a card, it could also be sent in the CardAcquisition response, to be processed by the Sale System. Data related to the instrument of payment for the transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentInstrumentData {
  public static final String SERIALIZED_NAME_CARD_DATA = "CardData";
  @SerializedName(SERIALIZED_NAME_CARD_DATA)
  private CardData cardData;

  public static final String SERIALIZED_NAME_CHECK_DATA = "CheckData";
  @SerializedName(SERIALIZED_NAME_CHECK_DATA)
  private CheckData checkData;

  public static final String SERIALIZED_NAME_MOBILE_DATA = "MobileData";
  @SerializedName(SERIALIZED_NAME_MOBILE_DATA)
  private MobileData mobileData;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_TYPE = "PaymentInstrumentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_TYPE)
  private PaymentInstrumentType paymentInstrumentType;

  public static final String SERIALIZED_NAME_PROTECTED_CARD_DATA = "ProtectedCardData";
  @SerializedName(SERIALIZED_NAME_PROTECTED_CARD_DATA)
  private String protectedCardData;

  public static final String SERIALIZED_NAME_STORED_VALUE_ACCOUNT_I_D = "StoredValueAccountID";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_ACCOUNT_I_D)
  private StoredValueAccountID storedValueAccountID;

  public PaymentInstrumentData() {
  }

  public PaymentInstrumentData cardData(CardData cardData) {
    this.cardData = cardData;
    return this;
  }

  /**
   * Get cardData
   * @return cardData
   */
  @javax.annotation.Nullable
  public CardData getCardData() {
    return cardData;
  }

  public void setCardData(CardData cardData) {
    this.cardData = cardData;
  }


  public PaymentInstrumentData checkData(CheckData checkData) {
    this.checkData = checkData;
    return this;
  }

  /**
   * Get checkData
   * @return checkData
   */
  @javax.annotation.Nullable
  public CheckData getCheckData() {
    return checkData;
  }

  public void setCheckData(CheckData checkData) {
    this.checkData = checkData;
  }


  public PaymentInstrumentData mobileData(MobileData mobileData) {
    this.mobileData = mobileData;
    return this;
  }

  /**
   * Get mobileData
   * @return mobileData
   */
  @javax.annotation.Nullable
  public MobileData getMobileData() {
    return mobileData;
  }

  public void setMobileData(MobileData mobileData) {
    this.mobileData = mobileData;
  }


  public PaymentInstrumentData paymentInstrumentType(PaymentInstrumentType paymentInstrumentType) {
    this.paymentInstrumentType = paymentInstrumentType;
    return this;
  }

  /**
   * Get paymentInstrumentType
   * @return paymentInstrumentType
   */
  @javax.annotation.Nonnull
  public PaymentInstrumentType getPaymentInstrumentType() {
    return paymentInstrumentType;
  }

  public void setPaymentInstrumentType(PaymentInstrumentType paymentInstrumentType) {
    this.paymentInstrumentType = paymentInstrumentType;
  }


  public PaymentInstrumentData protectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
    return this;
  }

  /**
   * Get protectedCardData
   * @return protectedCardData
   */
  @javax.annotation.Nullable
  public String getProtectedCardData() {
    return protectedCardData;
  }

  public void setProtectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
  }


  public PaymentInstrumentData storedValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
    return this;
  }

  /**
   * Get storedValueAccountID
   * @return storedValueAccountID
   */
  @javax.annotation.Nullable
  public StoredValueAccountID getStoredValueAccountID() {
    return storedValueAccountID;
  }

  public void setStoredValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInstrumentData paymentInstrumentData = (PaymentInstrumentData) o;
    return Objects.equals(this.cardData, paymentInstrumentData.cardData) &&
        Objects.equals(this.checkData, paymentInstrumentData.checkData) &&
        Objects.equals(this.mobileData, paymentInstrumentData.mobileData) &&
        Objects.equals(this.paymentInstrumentType, paymentInstrumentData.paymentInstrumentType) &&
        Objects.equals(this.protectedCardData, paymentInstrumentData.protectedCardData) &&
        Objects.equals(this.storedValueAccountID, paymentInstrumentData.storedValueAccountID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardData, checkData, mobileData, paymentInstrumentType, protectedCardData, storedValueAccountID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInstrumentData {\n");
    sb.append("    cardData: ").append(toIndentedString(cardData)).append("\n");
    sb.append("    checkData: ").append(toIndentedString(checkData)).append("\n");
    sb.append("    mobileData: ").append(toIndentedString(mobileData)).append("\n");
    sb.append("    paymentInstrumentType: ").append(toIndentedString(paymentInstrumentType)).append("\n");
    sb.append("    protectedCardData: ").append(toIndentedString(protectedCardData)).append("\n");
    sb.append("    storedValueAccountID: ").append(toIndentedString(storedValueAccountID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardData");
    openapiFields.add("CheckData");
    openapiFields.add("MobileData");
    openapiFields.add("PaymentInstrumentType");
    openapiFields.add("ProtectedCardData");
    openapiFields.add("StoredValueAccountID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PaymentInstrumentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentInstrumentData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentInstrumentData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentInstrumentData is not found in the empty JSON string", PaymentInstrumentData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentInstrumentData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentInstrumentData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentInstrumentData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `CardData`
      if (jsonObj.get("CardData") != null && !jsonObj.get("CardData").isJsonNull()) {
        CardData.validateJsonElement(jsonObj.get("CardData"));
      }
      // validate the optional field `CheckData`
      if (jsonObj.get("CheckData") != null && !jsonObj.get("CheckData").isJsonNull()) {
        CheckData.validateJsonElement(jsonObj.get("CheckData"));
      }
      // validate the optional field `MobileData`
      if (jsonObj.get("MobileData") != null && !jsonObj.get("MobileData").isJsonNull()) {
        MobileData.validateJsonElement(jsonObj.get("MobileData"));
      }
      // validate the required field `PaymentInstrumentType`
      PaymentInstrumentType.validateJsonElement(jsonObj.get("PaymentInstrumentType"));
      if ((jsonObj.get("ProtectedCardData") != null && !jsonObj.get("ProtectedCardData").isJsonNull()) && !jsonObj.get("ProtectedCardData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtectedCardData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtectedCardData").toString()));
      }
      // validate the optional field `StoredValueAccountID`
      if (jsonObj.get("StoredValueAccountID") != null && !jsonObj.get("StoredValueAccountID").isJsonNull()) {
        StoredValueAccountID.validateJsonElement(jsonObj.get("StoredValueAccountID"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentInstrumentData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentInstrumentData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentInstrumentData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentInstrumentData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentInstrumentData>() {
           @Override
           public void write(JsonWriter out, PaymentInstrumentData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentInstrumentData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentInstrumentData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentInstrumentData
   * @throws IOException if the JSON string is invalid with respect to PaymentInstrumentData
   */
  public static PaymentInstrumentData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentInstrumentData.class);
  }

  /**
   * Convert an instance of PaymentInstrumentData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

