/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IdentificationSupport;
import org.openapitools.client.model.IdentificationType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Payment or the Loyalty Request message, it allows to identify the loyalty account by the Sale Terminal instead of the POI Terminal (e.g. because the account identification is a bar-code read by the Cashier on a scanner device). Identification of a Loyalty account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyAccountID {
  /**
   * Gets or Sets entryMode
   */
  @JsonAdapter(EntryModeEnum.Adapter.class)
  public enum EntryModeEnum {
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAG_STRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    MOBILE("Mobile"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUS_ICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    EntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTRY_MODE = "EntryMode";
  @SerializedName(SERIALIZED_NAME_ENTRY_MODE)
  private List<EntryModeEnum> entryMode = new ArrayList<>();

  public static final String SERIALIZED_NAME_IDENTIFICATION_SUPPORT = "IdentificationSupport";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_SUPPORT)
  private IdentificationSupport identificationSupport;

  public static final String SERIALIZED_NAME_IDENTIFICATION_TYPE = "IdentificationType";
  @SerializedName(SERIALIZED_NAME_IDENTIFICATION_TYPE)
  private IdentificationType identificationType;

  public static final String SERIALIZED_NAME_LOYALTY_I_D = "LoyaltyID";
  @SerializedName(SERIALIZED_NAME_LOYALTY_I_D)
  private String loyaltyID;

  public LoyaltyAccountID() {
  }

  public LoyaltyAccountID entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public LoyaltyAccountID addEntryModeItem(EntryModeEnum entryModeItem) {
    if (this.entryMode == null) {
      this.entryMode = new ArrayList<>();
    }
    this.entryMode.add(entryModeItem);
    return this;
  }

  /**
   * Get entryMode
   * @return entryMode
   */
  @javax.annotation.Nonnull
  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }

  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }


  public LoyaltyAccountID identificationSupport(IdentificationSupport identificationSupport) {
    this.identificationSupport = identificationSupport;
    return this;
  }

  /**
   * Get identificationSupport
   * @return identificationSupport
   */
  @javax.annotation.Nullable
  public IdentificationSupport getIdentificationSupport() {
    return identificationSupport;
  }

  public void setIdentificationSupport(IdentificationSupport identificationSupport) {
    this.identificationSupport = identificationSupport;
  }


  public LoyaltyAccountID identificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
    return this;
  }

  /**
   * Get identificationType
   * @return identificationType
   */
  @javax.annotation.Nonnull
  public IdentificationType getIdentificationType() {
    return identificationType;
  }

  public void setIdentificationType(IdentificationType identificationType) {
    this.identificationType = identificationType;
  }


  public LoyaltyAccountID loyaltyID(String loyaltyID) {
    this.loyaltyID = loyaltyID;
    return this;
  }

  /**
   * Get loyaltyID
   * @return loyaltyID
   */
  @javax.annotation.Nonnull
  public String getLoyaltyID() {
    return loyaltyID;
  }

  public void setLoyaltyID(String loyaltyID) {
    this.loyaltyID = loyaltyID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyAccountID loyaltyAccountID = (LoyaltyAccountID) o;
    return Objects.equals(this.entryMode, loyaltyAccountID.entryMode) &&
        Objects.equals(this.identificationSupport, loyaltyAccountID.identificationSupport) &&
        Objects.equals(this.identificationType, loyaltyAccountID.identificationType) &&
        Objects.equals(this.loyaltyID, loyaltyAccountID.loyaltyID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entryMode, identificationSupport, identificationType, loyaltyID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyAccountID {\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    identificationSupport: ").append(toIndentedString(identificationSupport)).append("\n");
    sb.append("    identificationType: ").append(toIndentedString(identificationType)).append("\n");
    sb.append("    loyaltyID: ").append(toIndentedString(loyaltyID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EntryMode");
    openapiFields.add("IdentificationSupport");
    openapiFields.add("IdentificationType");
    openapiFields.add("LoyaltyID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EntryMode");
    openapiRequiredFields.add("IdentificationType");
    openapiRequiredFields.add("LoyaltyID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyAccountID
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyAccountID.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyAccountID is not found in the empty JSON string", LoyaltyAccountID.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyAccountID.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyAccountID` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyAccountID.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("EntryMode") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("EntryMode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntryMode` to be an array in the JSON string but got `%s`", jsonObj.get("EntryMode").toString()));
      }
      // validate the optional field `IdentificationSupport`
      if (jsonObj.get("IdentificationSupport") != null && !jsonObj.get("IdentificationSupport").isJsonNull()) {
        IdentificationSupport.validateJsonElement(jsonObj.get("IdentificationSupport"));
      }
      // validate the required field `IdentificationType`
      IdentificationType.validateJsonElement(jsonObj.get("IdentificationType"));
      if (!jsonObj.get("LoyaltyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoyaltyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoyaltyID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyAccountID.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyAccountID' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyAccountID> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyAccountID.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyAccountID>() {
           @Override
           public void write(JsonWriter out, LoyaltyAccountID value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyAccountID read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyAccountID given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyAccountID
   * @throws IOException if the JSON string is invalid with respect to LoyaltyAccountID
   */
  public static LoyaltyAccountID fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyAccountID.class);
  }

  /**
   * Convert an instance of LoyaltyAccountID to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

