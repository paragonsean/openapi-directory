/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountType;
import org.openapitools.client.model.PaymentInstrumentData;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentAccountReq
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentAccountReq {
  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "AccountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private AccountType accountType;

  public static final String SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE = "CardAcquisitionReference";
  @SerializedName(SERIALIZED_NAME_CARD_ACQUISITION_REFERENCE)
  private TransactionIDType cardAcquisitionReference;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA)
  private PaymentInstrumentData paymentInstrumentData;

  public PaymentAccountReq() {
  }

  public PaymentAccountReq accountType(AccountType accountType) {
    this.accountType = accountType;
    return this;
  }

  /**
   * Get accountType
   * @return accountType
   */
  @javax.annotation.Nullable
  public AccountType getAccountType() {
    return accountType;
  }

  public void setAccountType(AccountType accountType) {
    this.accountType = accountType;
  }


  public PaymentAccountReq cardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
    return this;
  }

  /**
   * Get cardAcquisitionReference
   * @return cardAcquisitionReference
   */
  @javax.annotation.Nullable
  public TransactionIDType getCardAcquisitionReference() {
    return cardAcquisitionReference;
  }

  public void setCardAcquisitionReference(TransactionIDType cardAcquisitionReference) {
    this.cardAcquisitionReference = cardAcquisitionReference;
  }


  public PaymentAccountReq paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData
   */
  @javax.annotation.Nullable
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAccountReq paymentAccountReq = (PaymentAccountReq) o;
    return Objects.equals(this.accountType, paymentAccountReq.accountType) &&
        Objects.equals(this.cardAcquisitionReference, paymentAccountReq.cardAcquisitionReference) &&
        Objects.equals(this.paymentInstrumentData, paymentAccountReq.paymentInstrumentData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, cardAcquisitionReference, paymentInstrumentData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAccountReq {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    cardAcquisitionReference: ").append(toIndentedString(cardAcquisitionReference)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AccountType");
    openapiFields.add("CardAcquisitionReference");
    openapiFields.add("PaymentInstrumentData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAccountReq
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAccountReq.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAccountReq is not found in the empty JSON string", PaymentAccountReq.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAccountReq.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentAccountReq` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `AccountType`
      if (jsonObj.get("AccountType") != null && !jsonObj.get("AccountType").isJsonNull()) {
        AccountType.validateJsonElement(jsonObj.get("AccountType"));
      }
      // validate the optional field `CardAcquisitionReference`
      if (jsonObj.get("CardAcquisitionReference") != null && !jsonObj.get("CardAcquisitionReference").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("CardAcquisitionReference"));
      }
      // validate the optional field `PaymentInstrumentData`
      if (jsonObj.get("PaymentInstrumentData") != null && !jsonObj.get("PaymentInstrumentData").isJsonNull()) {
        PaymentInstrumentData.validateJsonElement(jsonObj.get("PaymentInstrumentData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAccountReq.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAccountReq' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAccountReq> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAccountReq.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAccountReq>() {
           @Override
           public void write(JsonWriter out, PaymentAccountReq value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAccountReq read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAccountReq given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAccountReq
   * @throws IOException if the JSON string is invalid with respect to PaymentAccountReq
   */
  public static PaymentAccountReq fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAccountReq.class);
  }

  /**
   * Convert an instance of PaymentAccountReq to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

