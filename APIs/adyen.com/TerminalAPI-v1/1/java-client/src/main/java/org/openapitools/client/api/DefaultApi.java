/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AdminRequest;
import org.openapitools.client.model.AdminResponse;
import org.openapitools.client.model.BalanceInquiryRequest;
import org.openapitools.client.model.BalanceInquiryResponse;
import org.openapitools.client.model.CardAcquisitionRequest;
import org.openapitools.client.model.CardAcquisitionResponse;
import org.openapitools.client.model.CardReaderAPDURequest;
import org.openapitools.client.model.CardReaderAPDUResponse;
import org.openapitools.client.model.DiagnosisRequest;
import org.openapitools.client.model.DiagnosisResponse;
import org.openapitools.client.model.DisplayRequest;
import org.openapitools.client.model.DisplayResponse;
import org.openapitools.client.model.EnableServiceRequest;
import org.openapitools.client.model.EnableServiceResponse;
import org.openapitools.client.model.GetTotalsRequest;
import org.openapitools.client.model.GetTotalsResponse;
import org.openapitools.client.model.InputRequest;
import org.openapitools.client.model.InputResponse;
import org.openapitools.client.model.LoginRequest;
import org.openapitools.client.model.LoginResponse;
import org.openapitools.client.model.LogoutRequest;
import org.openapitools.client.model.LogoutResponse;
import org.openapitools.client.model.LoyaltyRequest;
import org.openapitools.client.model.LoyaltyResponse;
import org.openapitools.client.model.PaymentRequest;
import org.openapitools.client.model.PaymentResponse;
import org.openapitools.client.model.PrintRequest;
import org.openapitools.client.model.PrintResponse;
import org.openapitools.client.model.ReconciliationRequest;
import org.openapitools.client.model.ReconciliationResponse;
import org.openapitools.client.model.ReversalRequest;
import org.openapitools.client.model.ReversalResponse;
import org.openapitools.client.model.StoredValueRequest;
import org.openapitools.client.model.StoredValueResponse;
import org.openapitools.client.model.TransactionStatusRequest;
import org.openapitools.client.model.TransactionStatusResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for adminPost
     * @param adminRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Custom Admin. Content of the Custom Admin Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminPostCall(AdminRequest adminRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = adminRequest;

        // create path and map variables
        String localVarPath = "/admin";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call adminPostValidateBeforeCall(AdminRequest adminRequest, final ApiCallback _callback) throws ApiException {
        return adminPostCall(adminRequest, _callback);

    }

    /**
     * Admin Request
     * Empty. Content of the Custom Admin Request message.
     * @param adminRequest  (optional)
     * @return AdminResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Custom Admin. Content of the Custom Admin Response message. </td><td>  -  </td></tr>
     </table>
     */
    public AdminResponse adminPost(AdminRequest adminRequest) throws ApiException {
        ApiResponse<AdminResponse> localVarResp = adminPostWithHttpInfo(adminRequest);
        return localVarResp.getData();
    }

    /**
     * Admin Request
     * Empty. Content of the Custom Admin Request message.
     * @param adminRequest  (optional)
     * @return ApiResponse&lt;AdminResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Custom Admin. Content of the Custom Admin Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AdminResponse> adminPostWithHttpInfo(AdminRequest adminRequest) throws ApiException {
        okhttp3.Call localVarCall = adminPostValidateBeforeCall(adminRequest, null);
        Type localVarReturnType = new TypeToken<AdminResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Admin Request (asynchronously)
     * Empty. Content of the Custom Admin Request message.
     * @param adminRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Custom Admin. Content of the Custom Admin Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call adminPostAsync(AdminRequest adminRequest, final ApiCallback<AdminResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = adminPostValidateBeforeCall(adminRequest, _callback);
        Type localVarReturnType = new TypeToken<AdminResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for balanceinquiryPost
     * @param balanceInquiryRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the balance and the identification of the associated payment, loyalty or stored value account. Content of the Balance Inquiry Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceinquiryPostCall(BalanceInquiryRequest balanceInquiryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = balanceInquiryRequest;

        // create path and map variables
        String localVarPath = "/balanceinquiry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call balanceinquiryPostValidateBeforeCall(BalanceInquiryRequest balanceInquiryRequest, final ApiCallback _callback) throws ApiException {
        return balanceinquiryPostCall(balanceInquiryRequest, _callback);

    }

    /**
     * BalanceInquiry Request
     * It conveys Information related to the account for which a Balance Inquiry is requested. Content of the Balance Inquiry Request message.
     * @param balanceInquiryRequest  (optional)
     * @return BalanceInquiryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the balance and the identification of the associated payment, loyalty or stored value account. Content of the Balance Inquiry Response message. </td><td>  -  </td></tr>
     </table>
     */
    public BalanceInquiryResponse balanceinquiryPost(BalanceInquiryRequest balanceInquiryRequest) throws ApiException {
        ApiResponse<BalanceInquiryResponse> localVarResp = balanceinquiryPostWithHttpInfo(balanceInquiryRequest);
        return localVarResp.getData();
    }

    /**
     * BalanceInquiry Request
     * It conveys Information related to the account for which a Balance Inquiry is requested. Content of the Balance Inquiry Request message.
     * @param balanceInquiryRequest  (optional)
     * @return ApiResponse&lt;BalanceInquiryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the balance and the identification of the associated payment, loyalty or stored value account. Content of the Balance Inquiry Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceInquiryResponse> balanceinquiryPostWithHttpInfo(BalanceInquiryRequest balanceInquiryRequest) throws ApiException {
        okhttp3.Call localVarCall = balanceinquiryPostValidateBeforeCall(balanceInquiryRequest, null);
        Type localVarReturnType = new TypeToken<BalanceInquiryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BalanceInquiry Request (asynchronously)
     * It conveys Information related to the account for which a Balance Inquiry is requested. Content of the Balance Inquiry Request message.
     * @param balanceInquiryRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the balance and the identification of the associated payment, loyalty or stored value account. Content of the Balance Inquiry Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call balanceinquiryPostAsync(BalanceInquiryRequest balanceInquiryRequest, final ApiCallback<BalanceInquiryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = balanceinquiryPostValidateBeforeCall(balanceInquiryRequest, _callback);
        Type localVarReturnType = new TypeToken<BalanceInquiryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cardacquisitionPost
     * @param cardAcquisitionRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardacquisitionPostCall(CardAcquisitionRequest cardAcquisitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardAcquisitionRequest;

        // create path and map variables
        String localVarPath = "/cardacquisition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cardacquisitionPostValidateBeforeCall(CardAcquisitionRequest cardAcquisitionRequest, final ApiCallback _callback) throws ApiException {
        return cardacquisitionPostCall(cardAcquisitionRequest, _callback);

    }

    /**
     * CardAcquisition Request
     * It conveys Information related to the payment and loyalty cards to read and analyse. This message pair is usually followed by a message pair (e.g. payment or loyalty) which refers to this Card Acquisition message pair. Content of the Card Acquisition Request message.
     * @param cardAcquisitionRequest  (optional)
     * @return CardAcquisitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message. </td><td>  -  </td></tr>
     </table>
     */
    public CardAcquisitionResponse cardacquisitionPost(CardAcquisitionRequest cardAcquisitionRequest) throws ApiException {
        ApiResponse<CardAcquisitionResponse> localVarResp = cardacquisitionPostWithHttpInfo(cardAcquisitionRequest);
        return localVarResp.getData();
    }

    /**
     * CardAcquisition Request
     * It conveys Information related to the payment and loyalty cards to read and analyse. This message pair is usually followed by a message pair (e.g. payment or loyalty) which refers to this Card Acquisition message pair. Content of the Card Acquisition Request message.
     * @param cardAcquisitionRequest  (optional)
     * @return ApiResponse&lt;CardAcquisitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardAcquisitionResponse> cardacquisitionPostWithHttpInfo(CardAcquisitionRequest cardAcquisitionRequest) throws ApiException {
        okhttp3.Call localVarCall = cardacquisitionPostValidateBeforeCall(cardAcquisitionRequest, null);
        Type localVarReturnType = new TypeToken<CardAcquisitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CardAcquisition Request (asynchronously)
     * It conveys Information related to the payment and loyalty cards to read and analyse. This message pair is usually followed by a message pair (e.g. payment or loyalty) which refers to this Card Acquisition message pair. Content of the Card Acquisition Request message.
     * @param cardAcquisitionRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardacquisitionPostAsync(CardAcquisitionRequest cardAcquisitionRequest, final ApiCallback<CardAcquisitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cardacquisitionPostValidateBeforeCall(cardAcquisitionRequest, _callback);
        Type localVarReturnType = new TypeToken<CardAcquisitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cardreaderapduPost
     * @param cardReaderAPDURequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It contains the result of the requested service, APDU response sent by the chip of the card in response to the APDU request. Content of the Card Reader APDU Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardreaderapduPostCall(CardReaderAPDURequest cardReaderAPDURequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = cardReaderAPDURequest;

        // create path and map variables
        String localVarPath = "/cardreaderapdu";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cardreaderapduPostValidateBeforeCall(CardReaderAPDURequest cardReaderAPDURequest, final ApiCallback _callback) throws ApiException {
        return cardreaderapduPostCall(cardReaderAPDURequest, _callback);

    }

    /**
     * CardReaderAPDU Request
     * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
     * @param cardReaderAPDURequest  (optional)
     * @return CardReaderAPDUResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It contains the result of the requested service, APDU response sent by the chip of the card in response to the APDU request. Content of the Card Reader APDU Response message. </td><td>  -  </td></tr>
     </table>
     */
    public CardReaderAPDUResponse cardreaderapduPost(CardReaderAPDURequest cardReaderAPDURequest) throws ApiException {
        ApiResponse<CardReaderAPDUResponse> localVarResp = cardreaderapduPostWithHttpInfo(cardReaderAPDURequest);
        return localVarResp.getData();
    }

    /**
     * CardReaderAPDU Request
     * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
     * @param cardReaderAPDURequest  (optional)
     * @return ApiResponse&lt;CardReaderAPDUResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It contains the result of the requested service, APDU response sent by the chip of the card in response to the APDU request. Content of the Card Reader APDU Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CardReaderAPDUResponse> cardreaderapduPostWithHttpInfo(CardReaderAPDURequest cardReaderAPDURequest) throws ApiException {
        okhttp3.Call localVarCall = cardreaderapduPostValidateBeforeCall(cardReaderAPDURequest, null);
        Type localVarReturnType = new TypeToken<CardReaderAPDUResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CardReaderAPDU Request (asynchronously)
     * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
     * @param cardReaderAPDURequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It contains the result of the requested service, APDU response sent by the chip of the card in response to the APDU request. Content of the Card Reader APDU Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cardreaderapduPostAsync(CardReaderAPDURequest cardReaderAPDURequest, final ApiCallback<CardReaderAPDUResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = cardreaderapduPostValidateBeforeCall(cardReaderAPDURequest, _callback);
        Type localVarReturnType = new TypeToken<CardReaderAPDUResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for diagnosisPost
     * @param diagnosisRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the requested diagnosis and a possible message to display on a logical device. Content of the Diagnosis Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosisPostCall(DiagnosisRequest diagnosisRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = diagnosisRequest;

        // create path and map variables
        String localVarPath = "/diagnosis";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call diagnosisPostValidateBeforeCall(DiagnosisRequest diagnosisRequest, final ApiCallback _callback) throws ApiException {
        return diagnosisPostCall(diagnosisRequest, _callback);

    }

    /**
     * Diagnosis Request
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     * @param diagnosisRequest  (optional)
     * @return DiagnosisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the requested diagnosis and a possible message to display on a logical device. Content of the Diagnosis Response message. </td><td>  -  </td></tr>
     </table>
     */
    public DiagnosisResponse diagnosisPost(DiagnosisRequest diagnosisRequest) throws ApiException {
        ApiResponse<DiagnosisResponse> localVarResp = diagnosisPostWithHttpInfo(diagnosisRequest);
        return localVarResp.getData();
    }

    /**
     * Diagnosis Request
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     * @param diagnosisRequest  (optional)
     * @return ApiResponse&lt;DiagnosisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the requested diagnosis and a possible message to display on a logical device. Content of the Diagnosis Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DiagnosisResponse> diagnosisPostWithHttpInfo(DiagnosisRequest diagnosisRequest) throws ApiException {
        okhttp3.Call localVarCall = diagnosisPostValidateBeforeCall(diagnosisRequest, null);
        Type localVarReturnType = new TypeToken<DiagnosisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Diagnosis Request (asynchronously)
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     * @param diagnosisRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the requested diagnosis and a possible message to display on a logical device. Content of the Diagnosis Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call diagnosisPostAsync(DiagnosisRequest diagnosisRequest, final ApiCallback<DiagnosisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = diagnosisPostValidateBeforeCall(diagnosisRequest, _callback);
        Type localVarReturnType = new TypeToken<DiagnosisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for displayPost
     * @param displayRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the display, parallel to the message request, except if response not required and absent. Content of the Display Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayPostCall(DisplayRequest displayRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = displayRequest;

        // create path and map variables
        String localVarPath = "/display";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call displayPostValidateBeforeCall(DisplayRequest displayRequest, final ApiCallback _callback) throws ApiException {
        return displayPostCall(displayRequest, _callback);

    }

    /**
     * Display Request
     * It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
     * @param displayRequest  (optional)
     * @return DisplayResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the display, parallel to the message request, except if response not required and absent. Content of the Display Response message. </td><td>  -  </td></tr>
     </table>
     */
    public DisplayResponse displayPost(DisplayRequest displayRequest) throws ApiException {
        ApiResponse<DisplayResponse> localVarResp = displayPostWithHttpInfo(displayRequest);
        return localVarResp.getData();
    }

    /**
     * Display Request
     * It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
     * @param displayRequest  (optional)
     * @return ApiResponse&lt;DisplayResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the display, parallel to the message request, except if response not required and absent. Content of the Display Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DisplayResponse> displayPostWithHttpInfo(DisplayRequest displayRequest) throws ApiException {
        okhttp3.Call localVarCall = displayPostValidateBeforeCall(displayRequest, null);
        Type localVarReturnType = new TypeToken<DisplayResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Display Request (asynchronously)
     * It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
     * @param displayRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the display, parallel to the message request, except if response not required and absent. Content of the Display Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call displayPostAsync(DisplayRequest displayRequest, final ApiCallback<DisplayResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = displayPostValidateBeforeCall(displayRequest, _callback);
        Type localVarReturnType = new TypeToken<DisplayResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for enableservicePost
     * @param enableServiceRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Enable Service processing. Content of the Enable Service Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableservicePostCall(EnableServiceRequest enableServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = enableServiceRequest;

        // create path and map variables
        String localVarPath = "/enableservice";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call enableservicePostValidateBeforeCall(EnableServiceRequest enableServiceRequest, final ApiCallback _callback) throws ApiException {
        return enableservicePostCall(enableServiceRequest, _callback);

    }

    /**
     * EnableService Request
     * It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
     * @param enableServiceRequest  (optional)
     * @return EnableServiceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Enable Service processing. Content of the Enable Service Response message. </td><td>  -  </td></tr>
     </table>
     */
    public EnableServiceResponse enableservicePost(EnableServiceRequest enableServiceRequest) throws ApiException {
        ApiResponse<EnableServiceResponse> localVarResp = enableservicePostWithHttpInfo(enableServiceRequest);
        return localVarResp.getData();
    }

    /**
     * EnableService Request
     * It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
     * @param enableServiceRequest  (optional)
     * @return ApiResponse&lt;EnableServiceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Enable Service processing. Content of the Enable Service Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EnableServiceResponse> enableservicePostWithHttpInfo(EnableServiceRequest enableServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = enableservicePostValidateBeforeCall(enableServiceRequest, null);
        Type localVarReturnType = new TypeToken<EnableServiceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * EnableService Request (asynchronously)
     * It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
     * @param enableServiceRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Enable Service processing. Content of the Enable Service Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call enableservicePostAsync(EnableServiceRequest enableServiceRequest, final ApiCallback<EnableServiceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = enableservicePostValidateBeforeCall(enableServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<EnableServiceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gettotalsPost
     * @param getTotalsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gettotalsPostCall(GetTotalsRequest getTotalsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getTotalsRequest;

        // create path and map variables
        String localVarPath = "/gettotals";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gettotalsPostValidateBeforeCall(GetTotalsRequest getTotalsRequest, final ApiCallback _callback) throws ApiException {
        return gettotalsPostCall(getTotalsRequest, _callback);

    }

    /**
     * GetTotals Request
     * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
     * @param getTotalsRequest  (optional)
     * @return GetTotalsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public GetTotalsResponse gettotalsPost(GetTotalsRequest getTotalsRequest) throws ApiException {
        ApiResponse<GetTotalsResponse> localVarResp = gettotalsPostWithHttpInfo(getTotalsRequest);
        return localVarResp.getData();
    }

    /**
     * GetTotals Request
     * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
     * @param getTotalsRequest  (optional)
     * @return ApiResponse&lt;GetTotalsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTotalsResponse> gettotalsPostWithHttpInfo(GetTotalsRequest getTotalsRequest) throws ApiException {
        okhttp3.Call localVarCall = gettotalsPostValidateBeforeCall(getTotalsRequest, null);
        Type localVarReturnType = new TypeToken<GetTotalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTotals Request (asynchronously)
     * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
     * @param getTotalsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gettotalsPostAsync(GetTotalsRequest getTotalsRequest, final ApiCallback<GetTotalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = gettotalsPostValidateBeforeCall(getTotalsRequest, _callback);
        Type localVarReturnType = new TypeToken<GetTotalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inputPost
     * @param inputRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the input or the result of the outputs, parallel to the message request, except if response not required and absent. Content of the Input Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputPostCall(InputRequest inputRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inputRequest;

        // create path and map variables
        String localVarPath = "/input";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inputPostValidateBeforeCall(InputRequest inputRequest, final ApiCallback _callback) throws ApiException {
        return inputPostCall(inputRequest, _callback);

    }

    /**
     * Input Request
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     * @param inputRequest  (optional)
     * @return InputResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the input or the result of the outputs, parallel to the message request, except if response not required and absent. Content of the Input Response message. </td><td>  -  </td></tr>
     </table>
     */
    public InputResponse inputPost(InputRequest inputRequest) throws ApiException {
        ApiResponse<InputResponse> localVarResp = inputPostWithHttpInfo(inputRequest);
        return localVarResp.getData();
    }

    /**
     * Input Request
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     * @param inputRequest  (optional)
     * @return ApiResponse&lt;InputResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the input or the result of the outputs, parallel to the message request, except if response not required and absent. Content of the Input Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InputResponse> inputPostWithHttpInfo(InputRequest inputRequest) throws ApiException {
        okhttp3.Call localVarCall = inputPostValidateBeforeCall(inputRequest, null);
        Type localVarReturnType = new TypeToken<InputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Input Request (asynchronously)
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     * @param inputRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the input or the result of the outputs, parallel to the message request, except if response not required and absent. Content of the Input Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inputPostAsync(InputRequest inputRequest, final ApiCallback<InputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = inputPostValidateBeforeCall(inputRequest, _callback);
        Type localVarReturnType = new TypeToken<InputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loginPost
     * @param loginRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Login to process. Content of the Login Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginPostCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loginRequest;

        // create path and map variables
        String localVarPath = "/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginPostValidateBeforeCall(LoginRequest loginRequest, final ApiCallback _callback) throws ApiException {
        return loginPostCall(loginRequest, _callback);

    }

    /**
     * Login Request
     * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
     * @param loginRequest  (optional)
     * @return LoginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Login to process. Content of the Login Response message. </td><td>  -  </td></tr>
     </table>
     */
    public LoginResponse loginPost(LoginRequest loginRequest) throws ApiException {
        ApiResponse<LoginResponse> localVarResp = loginPostWithHttpInfo(loginRequest);
        return localVarResp.getData();
    }

    /**
     * Login Request
     * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
     * @param loginRequest  (optional)
     * @return ApiResponse&lt;LoginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Login to process. Content of the Login Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginResponse> loginPostWithHttpInfo(LoginRequest loginRequest) throws ApiException {
        okhttp3.Call localVarCall = loginPostValidateBeforeCall(loginRequest, null);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Login Request (asynchronously)
     * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
     * @param loginRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Login to process. Content of the Login Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginPostAsync(LoginRequest loginRequest, final ApiCallback<LoginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginPostValidateBeforeCall(loginRequest, _callback);
        Type localVarReturnType = new TypeToken<LoginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logoutPost
     * @param logoutRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Logout. Content of the Logout Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutPostCall(LogoutRequest logoutRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = logoutRequest;

        // create path and map variables
        String localVarPath = "/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutPostValidateBeforeCall(LogoutRequest logoutRequest, final ApiCallback _callback) throws ApiException {
        return logoutPostCall(logoutRequest, _callback);

    }

    /**
     * Logout Request
     * Empty. Content of the Logout Request message.
     * @param logoutRequest  (optional)
     * @return LogoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Logout. Content of the Logout Response message. </td><td>  -  </td></tr>
     </table>
     */
    public LogoutResponse logoutPost(LogoutRequest logoutRequest) throws ApiException {
        ApiResponse<LogoutResponse> localVarResp = logoutPostWithHttpInfo(logoutRequest);
        return localVarResp.getData();
    }

    /**
     * Logout Request
     * Empty. Content of the Logout Request message.
     * @param logoutRequest  (optional)
     * @return ApiResponse&lt;LogoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Logout. Content of the Logout Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogoutResponse> logoutPostWithHttpInfo(LogoutRequest logoutRequest) throws ApiException {
        okhttp3.Call localVarCall = logoutPostValidateBeforeCall(logoutRequest, null);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Logout Request (asynchronously)
     * Empty. Content of the Logout Request message.
     * @param logoutRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the Logout. Content of the Logout Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutPostAsync(LogoutRequest logoutRequest, final ApiCallback<LogoutResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutPostValidateBeforeCall(logoutRequest, _callback);
        Type localVarReturnType = new TypeToken<LogoutResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for loyaltyPost
     * @param loyaltyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Loyalty transaction processed by the POI System. Content of the Loyalty Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loyaltyPostCall(LoyaltyRequest loyaltyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = loyaltyRequest;

        // create path and map variables
        String localVarPath = "/loyalty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loyaltyPostValidateBeforeCall(LoyaltyRequest loyaltyRequest, final ApiCallback _callback) throws ApiException {
        return loyaltyPostCall(loyaltyRequest, _callback);

    }

    /**
     * Loyalty Request
     * It conveys Information related to the Loyalty transaction to process. Content of the Loyalty Request message.
     * @param loyaltyRequest  (optional)
     * @return LoyaltyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Loyalty transaction processed by the POI System. Content of the Loyalty Response message. </td><td>  -  </td></tr>
     </table>
     */
    public LoyaltyResponse loyaltyPost(LoyaltyRequest loyaltyRequest) throws ApiException {
        ApiResponse<LoyaltyResponse> localVarResp = loyaltyPostWithHttpInfo(loyaltyRequest);
        return localVarResp.getData();
    }

    /**
     * Loyalty Request
     * It conveys Information related to the Loyalty transaction to process. Content of the Loyalty Request message.
     * @param loyaltyRequest  (optional)
     * @return ApiResponse&lt;LoyaltyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Loyalty transaction processed by the POI System. Content of the Loyalty Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoyaltyResponse> loyaltyPostWithHttpInfo(LoyaltyRequest loyaltyRequest) throws ApiException {
        okhttp3.Call localVarCall = loyaltyPostValidateBeforeCall(loyaltyRequest, null);
        Type localVarReturnType = new TypeToken<LoyaltyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loyalty Request (asynchronously)
     * It conveys Information related to the Loyalty transaction to process. Content of the Loyalty Request message.
     * @param loyaltyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Loyalty transaction processed by the POI System. Content of the Loyalty Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loyaltyPostAsync(LoyaltyRequest loyaltyRequest, final ApiCallback<LoyaltyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = loyaltyPostValidateBeforeCall(loyaltyRequest, _callback);
        Type localVarReturnType = new TypeToken<LoyaltyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paymentPost
     * @param paymentRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Payment transaction processed by the POI System. Content of the Payment Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPostCall(PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentRequest;

        // create path and map variables
        String localVarPath = "/payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paymentPostValidateBeforeCall(PaymentRequest paymentRequest, final ApiCallback _callback) throws ApiException {
        return paymentPostCall(paymentRequest, _callback);

    }

    /**
     * Payment Request
     * Request sent to terminal to initiate payment.  It conveys Information related to the Payment transaction to process. Content of the Payment Request message.
     * @param paymentRequest  (optional)
     * @return PaymentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Payment transaction processed by the POI System. Content of the Payment Response message. </td><td>  -  </td></tr>
     </table>
     */
    public PaymentResponse paymentPost(PaymentRequest paymentRequest) throws ApiException {
        ApiResponse<PaymentResponse> localVarResp = paymentPostWithHttpInfo(paymentRequest);
        return localVarResp.getData();
    }

    /**
     * Payment Request
     * Request sent to terminal to initiate payment.  It conveys Information related to the Payment transaction to process. Content of the Payment Request message.
     * @param paymentRequest  (optional)
     * @return ApiResponse&lt;PaymentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Payment transaction processed by the POI System. Content of the Payment Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaymentResponse> paymentPostWithHttpInfo(PaymentRequest paymentRequest) throws ApiException {
        okhttp3.Call localVarCall = paymentPostValidateBeforeCall(paymentRequest, null);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payment Request (asynchronously)
     * Request sent to terminal to initiate payment.  It conveys Information related to the Payment transaction to process. Content of the Payment Request message.
     * @param paymentRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Payment transaction processed by the POI System. Content of the Payment Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paymentPostAsync(PaymentRequest paymentRequest, final ApiCallback<PaymentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = paymentPostValidateBeforeCall(paymentRequest, _callback);
        Type localVarReturnType = new TypeToken<PaymentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for printPost
     * @param printRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the print, parallel to the message request, except if response not required and absent. Content of the Print Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call printPostCall(PrintRequest printRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = printRequest;

        // create path and map variables
        String localVarPath = "/print";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call printPostValidateBeforeCall(PrintRequest printRequest, final ApiCallback _callback) throws ApiException {
        return printPostCall(printRequest, _callback);

    }

    /**
     * Print Request
     * It conveys the data to print and the way to process the print. It contains the complete content to print. Content of the Print Request message.
     * @param printRequest  (optional)
     * @return PrintResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the print, parallel to the message request, except if response not required and absent. Content of the Print Response message. </td><td>  -  </td></tr>
     </table>
     */
    public PrintResponse printPost(PrintRequest printRequest) throws ApiException {
        ApiResponse<PrintResponse> localVarResp = printPostWithHttpInfo(printRequest);
        return localVarResp.getData();
    }

    /**
     * Print Request
     * It conveys the data to print and the way to process the print. It contains the complete content to print. Content of the Print Request message.
     * @param printRequest  (optional)
     * @return ApiResponse&lt;PrintResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the print, parallel to the message request, except if response not required and absent. Content of the Print Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PrintResponse> printPostWithHttpInfo(PrintRequest printRequest) throws ApiException {
        okhttp3.Call localVarCall = printPostValidateBeforeCall(printRequest, null);
        Type localVarReturnType = new TypeToken<PrintResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Print Request (asynchronously)
     * It conveys the data to print and the way to process the print. It contains the complete content to print. Content of the Print Request message.
     * @param printRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys the result of the print, parallel to the message request, except if response not required and absent. Content of the Print Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call printPostAsync(PrintRequest printRequest, final ApiCallback<PrintResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = printPostValidateBeforeCall(printRequest, _callback);
        Type localVarReturnType = new TypeToken<PrintResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reconciliationPost
     * @param reconciliationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reconciliationPostCall(ReconciliationRequest reconciliationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reconciliationRequest;

        // create path and map variables
        String localVarPath = "/reconciliation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reconciliationPostValidateBeforeCall(ReconciliationRequest reconciliationRequest, final ApiCallback _callback) throws ApiException {
        return reconciliationPostCall(reconciliationRequest, _callback);

    }

    /**
     * Reconciliation Request
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     * @param reconciliationRequest  (optional)
     * @return ReconciliationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ReconciliationResponse reconciliationPost(ReconciliationRequest reconciliationRequest) throws ApiException {
        ApiResponse<ReconciliationResponse> localVarResp = reconciliationPostWithHttpInfo(reconciliationRequest);
        return localVarResp.getData();
    }

    /**
     * Reconciliation Request
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     * @param reconciliationRequest  (optional)
     * @return ApiResponse&lt;ReconciliationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReconciliationResponse> reconciliationPostWithHttpInfo(ReconciliationRequest reconciliationRequest) throws ApiException {
        okhttp3.Call localVarCall = reconciliationPostValidateBeforeCall(reconciliationRequest, null);
        Type localVarReturnType = new TypeToken<ReconciliationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reconciliation Request (asynchronously)
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     * @param reconciliationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Reconciliation transaction processed by the POI System. Content of the Reconciliation Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reconciliationPostAsync(ReconciliationRequest reconciliationRequest, final ApiCallback<ReconciliationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reconciliationPostValidateBeforeCall(reconciliationRequest, _callback);
        Type localVarReturnType = new TypeToken<ReconciliationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reversalPost
     * @param reversalRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the reversal processed by the POI System. Content of the Reversal Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reversalPostCall(ReversalRequest reversalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reversalRequest;

        // create path and map variables
        String localVarPath = "/reversal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reversalPostValidateBeforeCall(ReversalRequest reversalRequest, final ApiCallback _callback) throws ApiException {
        return reversalPostCall(reversalRequest, _callback);

    }

    /**
     * Reversal Request
     * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
     * @param reversalRequest  (optional)
     * @return ReversalResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the reversal processed by the POI System. Content of the Reversal Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ReversalResponse reversalPost(ReversalRequest reversalRequest) throws ApiException {
        ApiResponse<ReversalResponse> localVarResp = reversalPostWithHttpInfo(reversalRequest);
        return localVarResp.getData();
    }

    /**
     * Reversal Request
     * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
     * @param reversalRequest  (optional)
     * @return ApiResponse&lt;ReversalResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the reversal processed by the POI System. Content of the Reversal Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReversalResponse> reversalPostWithHttpInfo(ReversalRequest reversalRequest) throws ApiException {
        okhttp3.Call localVarCall = reversalPostValidateBeforeCall(reversalRequest, null);
        Type localVarReturnType = new TypeToken<ReversalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reversal Request (asynchronously)
     * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
     * @param reversalRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the reversal processed by the POI System. Content of the Reversal Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reversalPostAsync(ReversalRequest reversalRequest, final ApiCallback<ReversalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reversalPostValidateBeforeCall(reversalRequest, _callback);
        Type localVarReturnType = new TypeToken<ReversalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for storedvaluePost
     * @param storedValueRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Stored Value transaction processed by the POI System. Content of the Stored Value Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedvaluePostCall(StoredValueRequest storedValueRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = storedValueRequest;

        // create path and map variables
        String localVarPath = "/storedvalue";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call storedvaluePostValidateBeforeCall(StoredValueRequest storedValueRequest, final ApiCallback _callback) throws ApiException {
        return storedvaluePostCall(storedValueRequest, _callback);

    }

    /**
     * StoredValue Request
     * It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
     * @param storedValueRequest  (optional)
     * @return StoredValueResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Stored Value transaction processed by the POI System. Content of the Stored Value Response message. </td><td>  -  </td></tr>
     </table>
     */
    public StoredValueResponse storedvaluePost(StoredValueRequest storedValueRequest) throws ApiException {
        ApiResponse<StoredValueResponse> localVarResp = storedvaluePostWithHttpInfo(storedValueRequest);
        return localVarResp.getData();
    }

    /**
     * StoredValue Request
     * It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
     * @param storedValueRequest  (optional)
     * @return ApiResponse&lt;StoredValueResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Stored Value transaction processed by the POI System. Content of the Stored Value Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StoredValueResponse> storedvaluePostWithHttpInfo(StoredValueRequest storedValueRequest) throws ApiException {
        okhttp3.Call localVarCall = storedvaluePostValidateBeforeCall(storedValueRequest, null);
        Type localVarReturnType = new TypeToken<StoredValueResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * StoredValue Request (asynchronously)
     * It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
     * @param storedValueRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the Stored Value transaction processed by the POI System. Content of the Stored Value Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call storedvaluePostAsync(StoredValueRequest storedValueRequest, final ApiCallback<StoredValueResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = storedvaluePostValidateBeforeCall(storedValueRequest, _callback);
        Type localVarReturnType = new TypeToken<StoredValueResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionstatusPost
     * @param transactionStatusRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionstatusPostCall(TransactionStatusRequest transactionStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionStatusRequest;

        // create path and map variables
        String localVarPath = "/transactionstatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionstatusPostValidateBeforeCall(TransactionStatusRequest transactionStatusRequest, final ApiCallback _callback) throws ApiException {
        return transactionstatusPostCall(transactionStatusRequest, _callback);

    }

    /**
     * TransactionStatus Request
     * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
     * @param transactionStatusRequest  (optional)
     * @return TransactionStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Response message. </td><td>  -  </td></tr>
     </table>
     */
    public TransactionStatusResponse transactionstatusPost(TransactionStatusRequest transactionStatusRequest) throws ApiException {
        ApiResponse<TransactionStatusResponse> localVarResp = transactionstatusPostWithHttpInfo(transactionStatusRequest);
        return localVarResp.getData();
    }

    /**
     * TransactionStatus Request
     * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
     * @param transactionStatusRequest  (optional)
     * @return ApiResponse&lt;TransactionStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Response message. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionStatusResponse> transactionstatusPostWithHttpInfo(TransactionStatusRequest transactionStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = transactionstatusPostValidateBeforeCall(transactionStatusRequest, null);
        Type localVarReturnType = new TypeToken<TransactionStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * TransactionStatus Request (asynchronously)
     * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
     * @param transactionStatusRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> It conveys Information related to the status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Response message. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionstatusPostAsync(TransactionStatusRequest transactionStatusRequest, final ApiCallback<TransactionStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionstatusPostValidateBeforeCall(transactionStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<TransactionStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
