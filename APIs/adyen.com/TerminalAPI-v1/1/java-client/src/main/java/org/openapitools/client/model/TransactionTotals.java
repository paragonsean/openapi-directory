/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyTotals;
import org.openapitools.client.model.LoyaltyUnit;
import org.openapitools.client.model.PaymentInstrumentType;
import org.openapitools.client.model.PaymentTotals;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * If Result is Success, contains all the totals, classified as required by the Sale in the message request. At least, transaction totals are provided per Acquirer, Acquirer Settlement, and Card Brand. Result of the Sale to POI Reconciliation processing.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionTotals {
  public static final String SERIALIZED_NAME_ACQUIRER_I_D = "AcquirerID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_I_D)
  private Integer acquirerID;

  public static final String SERIALIZED_NAME_CARD_BRAND = "CardBrand";
  @SerializedName(SERIALIZED_NAME_CARD_BRAND)
  private String cardBrand;

  public static final String SERIALIZED_NAME_HOST_RECONCILIATION_I_D = "HostReconciliationID";
  @SerializedName(SERIALIZED_NAME_HOST_RECONCILIATION_I_D)
  private String hostReconciliationID;

  public static final String SERIALIZED_NAME_LOYALTY_CURRENCY = "LoyaltyCurrency";
  @SerializedName(SERIALIZED_NAME_LOYALTY_CURRENCY)
  private String loyaltyCurrency;

  public static final String SERIALIZED_NAME_LOYALTY_TOTALS = "LoyaltyTotals";
  @SerializedName(SERIALIZED_NAME_LOYALTY_TOTALS)
  private List<LoyaltyTotals> loyaltyTotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOYALTY_UNIT = "LoyaltyUnit";
  @SerializedName(SERIALIZED_NAME_LOYALTY_UNIT)
  private LoyaltyUnit loyaltyUnit;

  public static final String SERIALIZED_NAME_OPERATOR_I_D = "OperatorID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_I_D)
  private String operatorID;

  public static final String SERIALIZED_NAME_P_O_I_I_D = "POIID";
  @SerializedName(SERIALIZED_NAME_P_O_I_I_D)
  private String POIID;

  public static final String SERIALIZED_NAME_PAYMENT_CURRENCY = "PaymentCurrency";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CURRENCY)
  private String paymentCurrency;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_TYPE = "PaymentInstrumentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_TYPE)
  private PaymentInstrumentType paymentInstrumentType;

  public static final String SERIALIZED_NAME_PAYMENT_TOTALS = "PaymentTotals";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOTALS)
  private List<PaymentTotals> paymentTotals = new ArrayList<>();

  public static final String SERIALIZED_NAME_SALE_I_D = "SaleID";
  @SerializedName(SERIALIZED_NAME_SALE_I_D)
  private String saleID;

  public static final String SERIALIZED_NAME_SHIFT_NUMBER = "ShiftNumber";
  @SerializedName(SERIALIZED_NAME_SHIFT_NUMBER)
  private String shiftNumber;

  public static final String SERIALIZED_NAME_TOTALS_GROUP_I_D = "TotalsGroupID";
  @SerializedName(SERIALIZED_NAME_TOTALS_GROUP_I_D)
  private String totalsGroupID;

  public TransactionTotals() {
  }

  public TransactionTotals acquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

  /**
   * If available.
   * @return acquirerID
   */
  @javax.annotation.Nullable
  public Integer getAcquirerID() {
    return acquirerID;
  }

  public void setAcquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
  }


  public TransactionTotals cardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
    return this;
  }

  /**
   * If configured to present totals per card brand, and Response.Result is Success.
   * @return cardBrand
   */
  @javax.annotation.Nullable
  public String getCardBrand() {
    return cardBrand;
  }

  public void setCardBrand(String cardBrand) {
    this.cardBrand = cardBrand;
  }


  public TransactionTotals hostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
    return this;
  }

  /**
   * If available.
   * @return hostReconciliationID
   */
  @javax.annotation.Nullable
  public String getHostReconciliationID() {
    return hostReconciliationID;
  }

  public void setHostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
  }


  public TransactionTotals loyaltyCurrency(String loyaltyCurrency) {
    this.loyaltyCurrency = loyaltyCurrency;
    return this;
  }

  /**
   * If LoyaltyUnit is Monetary.
   * @return loyaltyCurrency
   */
  @javax.annotation.Nullable
  public String getLoyaltyCurrency() {
    return loyaltyCurrency;
  }

  public void setLoyaltyCurrency(String loyaltyCurrency) {
    this.loyaltyCurrency = loyaltyCurrency;
  }


  public TransactionTotals loyaltyTotals(List<LoyaltyTotals> loyaltyTotals) {
    this.loyaltyTotals = loyaltyTotals;
    return this;
  }

  public TransactionTotals addLoyaltyTotalsItem(LoyaltyTotals loyaltyTotalsItem) {
    if (this.loyaltyTotals == null) {
      this.loyaltyTotals = new ArrayList<>();
    }
    this.loyaltyTotals.add(loyaltyTotalsItem);
    return this;
  }

  /**
   * Get loyaltyTotals
   * @return loyaltyTotals
   */
  @javax.annotation.Nullable
  public List<LoyaltyTotals> getLoyaltyTotals() {
    return loyaltyTotals;
  }

  public void setLoyaltyTotals(List<LoyaltyTotals> loyaltyTotals) {
    this.loyaltyTotals = loyaltyTotals;
  }


  public TransactionTotals loyaltyUnit(LoyaltyUnit loyaltyUnit) {
    this.loyaltyUnit = loyaltyUnit;
    return this;
  }

  /**
   * Get loyaltyUnit
   * @return loyaltyUnit
   */
  @javax.annotation.Nullable
  public LoyaltyUnit getLoyaltyUnit() {
    return loyaltyUnit;
  }

  public void setLoyaltyUnit(LoyaltyUnit loyaltyUnit) {
    this.loyaltyUnit = loyaltyUnit;
  }


  public TransactionTotals operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * If requested in the message request.
   * @return operatorID
   */
  @javax.annotation.Nullable
  public String getOperatorID() {
    return operatorID;
  }

  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }


  public TransactionTotals POIID(String POIID) {
    this.POIID = POIID;
    return this;
  }

  /**
   * If requested in the message request.
   * @return POIID
   */
  @javax.annotation.Nullable
  public String getPOIID() {
    return POIID;
  }

  public void setPOIID(String POIID) {
    this.POIID = POIID;
  }


  public TransactionTotals paymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
    return this;
  }

  /**
   * Currency of a monetary amount.
   * @return paymentCurrency
   */
  @javax.annotation.Nullable
  public String getPaymentCurrency() {
    return paymentCurrency;
  }

  public void setPaymentCurrency(String paymentCurrency) {
    this.paymentCurrency = paymentCurrency;
  }


  public TransactionTotals paymentInstrumentType(PaymentInstrumentType paymentInstrumentType) {
    this.paymentInstrumentType = paymentInstrumentType;
    return this;
  }

  /**
   * Get paymentInstrumentType
   * @return paymentInstrumentType
   */
  @javax.annotation.Nonnull
  public PaymentInstrumentType getPaymentInstrumentType() {
    return paymentInstrumentType;
  }

  public void setPaymentInstrumentType(PaymentInstrumentType paymentInstrumentType) {
    this.paymentInstrumentType = paymentInstrumentType;
  }


  public TransactionTotals paymentTotals(List<PaymentTotals> paymentTotals) {
    this.paymentTotals = paymentTotals;
    return this;
  }

  public TransactionTotals addPaymentTotalsItem(PaymentTotals paymentTotalsItem) {
    if (this.paymentTotals == null) {
      this.paymentTotals = new ArrayList<>();
    }
    this.paymentTotals.add(paymentTotalsItem);
    return this;
  }

  /**
   * Get paymentTotals
   * @return paymentTotals
   */
  @javax.annotation.Nullable
  public List<PaymentTotals> getPaymentTotals() {
    return paymentTotals;
  }

  public void setPaymentTotals(List<PaymentTotals> paymentTotals) {
    this.paymentTotals = paymentTotals;
  }


  public TransactionTotals saleID(String saleID) {
    this.saleID = saleID;
    return this;
  }

  /**
   * If requested in the message request.
   * @return saleID
   */
  @javax.annotation.Nullable
  public String getSaleID() {
    return saleID;
  }

  public void setSaleID(String saleID) {
    this.saleID = saleID;
  }


  public TransactionTotals shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * If requested in the message request.
   * @return shiftNumber
   */
  @javax.annotation.Nullable
  public String getShiftNumber() {
    return shiftNumber;
  }

  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }


  public TransactionTotals totalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
    return this;
  }

  /**
   * If requested in the message request.
   * @return totalsGroupID
   */
  @javax.annotation.Nullable
  public String getTotalsGroupID() {
    return totalsGroupID;
  }

  public void setTotalsGroupID(String totalsGroupID) {
    this.totalsGroupID = totalsGroupID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionTotals transactionTotals = (TransactionTotals) o;
    return Objects.equals(this.acquirerID, transactionTotals.acquirerID) &&
        Objects.equals(this.cardBrand, transactionTotals.cardBrand) &&
        Objects.equals(this.hostReconciliationID, transactionTotals.hostReconciliationID) &&
        Objects.equals(this.loyaltyCurrency, transactionTotals.loyaltyCurrency) &&
        Objects.equals(this.loyaltyTotals, transactionTotals.loyaltyTotals) &&
        Objects.equals(this.loyaltyUnit, transactionTotals.loyaltyUnit) &&
        Objects.equals(this.operatorID, transactionTotals.operatorID) &&
        Objects.equals(this.POIID, transactionTotals.POIID) &&
        Objects.equals(this.paymentCurrency, transactionTotals.paymentCurrency) &&
        Objects.equals(this.paymentInstrumentType, transactionTotals.paymentInstrumentType) &&
        Objects.equals(this.paymentTotals, transactionTotals.paymentTotals) &&
        Objects.equals(this.saleID, transactionTotals.saleID) &&
        Objects.equals(this.shiftNumber, transactionTotals.shiftNumber) &&
        Objects.equals(this.totalsGroupID, transactionTotals.totalsGroupID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerID, cardBrand, hostReconciliationID, loyaltyCurrency, loyaltyTotals, loyaltyUnit, operatorID, POIID, paymentCurrency, paymentInstrumentType, paymentTotals, saleID, shiftNumber, totalsGroupID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionTotals {\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    cardBrand: ").append(toIndentedString(cardBrand)).append("\n");
    sb.append("    hostReconciliationID: ").append(toIndentedString(hostReconciliationID)).append("\n");
    sb.append("    loyaltyCurrency: ").append(toIndentedString(loyaltyCurrency)).append("\n");
    sb.append("    loyaltyTotals: ").append(toIndentedString(loyaltyTotals)).append("\n");
    sb.append("    loyaltyUnit: ").append(toIndentedString(loyaltyUnit)).append("\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    POIID: ").append(toIndentedString(POIID)).append("\n");
    sb.append("    paymentCurrency: ").append(toIndentedString(paymentCurrency)).append("\n");
    sb.append("    paymentInstrumentType: ").append(toIndentedString(paymentInstrumentType)).append("\n");
    sb.append("    paymentTotals: ").append(toIndentedString(paymentTotals)).append("\n");
    sb.append("    saleID: ").append(toIndentedString(saleID)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    totalsGroupID: ").append(toIndentedString(totalsGroupID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquirerID");
    openapiFields.add("CardBrand");
    openapiFields.add("HostReconciliationID");
    openapiFields.add("LoyaltyCurrency");
    openapiFields.add("LoyaltyTotals");
    openapiFields.add("LoyaltyUnit");
    openapiFields.add("OperatorID");
    openapiFields.add("POIID");
    openapiFields.add("PaymentCurrency");
    openapiFields.add("PaymentInstrumentType");
    openapiFields.add("PaymentTotals");
    openapiFields.add("SaleID");
    openapiFields.add("ShiftNumber");
    openapiFields.add("TotalsGroupID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("PaymentInstrumentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionTotals
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionTotals.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionTotals is not found in the empty JSON string", TransactionTotals.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionTotals.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionTotals` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionTotals.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CardBrand") != null && !jsonObj.get("CardBrand").isJsonNull()) && !jsonObj.get("CardBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CardBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CardBrand").toString()));
      }
      if ((jsonObj.get("HostReconciliationID") != null && !jsonObj.get("HostReconciliationID").isJsonNull()) && !jsonObj.get("HostReconciliationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HostReconciliationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HostReconciliationID").toString()));
      }
      if ((jsonObj.get("LoyaltyCurrency") != null && !jsonObj.get("LoyaltyCurrency").isJsonNull()) && !jsonObj.get("LoyaltyCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LoyaltyCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LoyaltyCurrency").toString()));
      }
      if (jsonObj.get("LoyaltyTotals") != null && !jsonObj.get("LoyaltyTotals").isJsonNull()) {
        JsonArray jsonArrayloyaltyTotals = jsonObj.getAsJsonArray("LoyaltyTotals");
        if (jsonArrayloyaltyTotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("LoyaltyTotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `LoyaltyTotals` to be an array in the JSON string but got `%s`", jsonObj.get("LoyaltyTotals").toString()));
          }

          // validate the optional field `LoyaltyTotals` (array)
          for (int i = 0; i < jsonArrayloyaltyTotals.size(); i++) {
            LoyaltyTotals.validateJsonElement(jsonArrayloyaltyTotals.get(i));
          };
        }
      }
      // validate the optional field `LoyaltyUnit`
      if (jsonObj.get("LoyaltyUnit") != null && !jsonObj.get("LoyaltyUnit").isJsonNull()) {
        LoyaltyUnit.validateJsonElement(jsonObj.get("LoyaltyUnit"));
      }
      if ((jsonObj.get("OperatorID") != null && !jsonObj.get("OperatorID").isJsonNull()) && !jsonObj.get("OperatorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorID").toString()));
      }
      if ((jsonObj.get("POIID") != null && !jsonObj.get("POIID").isJsonNull()) && !jsonObj.get("POIID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POIID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POIID").toString()));
      }
      if ((jsonObj.get("PaymentCurrency") != null && !jsonObj.get("PaymentCurrency").isJsonNull()) && !jsonObj.get("PaymentCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentCurrency").toString()));
      }
      // validate the required field `PaymentInstrumentType`
      PaymentInstrumentType.validateJsonElement(jsonObj.get("PaymentInstrumentType"));
      if (jsonObj.get("PaymentTotals") != null && !jsonObj.get("PaymentTotals").isJsonNull()) {
        JsonArray jsonArraypaymentTotals = jsonObj.getAsJsonArray("PaymentTotals");
        if (jsonArraypaymentTotals != null) {
          // ensure the json data is an array
          if (!jsonObj.get("PaymentTotals").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `PaymentTotals` to be an array in the JSON string but got `%s`", jsonObj.get("PaymentTotals").toString()));
          }

          // validate the optional field `PaymentTotals` (array)
          for (int i = 0; i < jsonArraypaymentTotals.size(); i++) {
            PaymentTotals.validateJsonElement(jsonArraypaymentTotals.get(i));
          };
        }
      }
      if ((jsonObj.get("SaleID") != null && !jsonObj.get("SaleID").isJsonNull()) && !jsonObj.get("SaleID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleID").toString()));
      }
      if ((jsonObj.get("ShiftNumber") != null && !jsonObj.get("ShiftNumber").isJsonNull()) && !jsonObj.get("ShiftNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShiftNumber").toString()));
      }
      if ((jsonObj.get("TotalsGroupID") != null && !jsonObj.get("TotalsGroupID").isJsonNull()) && !jsonObj.get("TotalsGroupID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalsGroupID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TotalsGroupID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionTotals.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionTotals' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionTotals> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionTotals.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionTotals>() {
           @Override
           public void write(JsonWriter out, TransactionTotals value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionTotals read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionTotals given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionTotals
   * @throws IOException if the JSON string is invalid with respect to TransactionTotals
   */
  public static TransactionTotals fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionTotals.class);
  }

  /**
   * Convert an instance of TransactionTotals to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

