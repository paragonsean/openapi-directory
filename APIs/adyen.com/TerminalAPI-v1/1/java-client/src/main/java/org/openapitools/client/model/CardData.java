/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllowedProduct;
import org.openapitools.client.model.CustomerOrder;
import org.openapitools.client.model.PaymentToken;
import org.openapitools.client.model.SensitiveCardData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardData {
  public static final String SERIALIZED_NAME_ALLOWED_PRODUCT = "AllowedProduct";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PRODUCT)
  private List<AllowedProduct> allowedProduct = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_PRODUCT_CODE = "AllowedProductCode";
  @SerializedName(SERIALIZED_NAME_ALLOWED_PRODUCT_CODE)
  private List<Integer> allowedProductCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_CARD_COUNTRY_CODE = "CardCountryCode";
  @SerializedName(SERIALIZED_NAME_CARD_COUNTRY_CODE)
  private Integer cardCountryCode;

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER = "CustomerOrder";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER)
  private List<CustomerOrder> customerOrder = new ArrayList<>();

  /**
   * Gets or Sets entryMode
   */
  @JsonAdapter(EntryModeEnum.Adapter.class)
  public enum EntryModeEnum {
    CONTACTLESS("Contactless"),
    
    FILE("File"),
    
    ICC("ICC"),
    
    KEYED("Keyed"),
    
    MAG_STRIPE("MagStripe"),
    
    MANUAL("Manual"),
    
    MOBILE("Mobile"),
    
    RFID("RFID"),
    
    SCANNED("Scanned"),
    
    SYNCHRONOUS_ICC("SynchronousICC"),
    
    TAPPED("Tapped");

    private String value;

    EntryModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntryModeEnum fromValue(String value) {
      for (EntryModeEnum b : EntryModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntryModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntryModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntryModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntryModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      EntryModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTRY_MODE = "EntryMode";
  @SerializedName(SERIALIZED_NAME_ENTRY_MODE)
  private List<EntryModeEnum> entryMode = new ArrayList<>();

  public static final String SERIALIZED_NAME_MASKED_PAN = "MaskedPan";
  @SerializedName(SERIALIZED_NAME_MASKED_PAN)
  private String maskedPan;

  public static final String SERIALIZED_NAME_PAYMENT_ACCOUNT_REF = "PaymentAccountRef";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACCOUNT_REF)
  private String paymentAccountRef;

  public static final String SERIALIZED_NAME_PAYMENT_BRAND = "PaymentBrand";
  @SerializedName(SERIALIZED_NAME_PAYMENT_BRAND)
  private String paymentBrand;

  public static final String SERIALIZED_NAME_PAYMENT_TOKEN = "PaymentToken";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TOKEN)
  private PaymentToken paymentToken;

  public static final String SERIALIZED_NAME_PROTECTED_CARD_DATA = "ProtectedCardData";
  @SerializedName(SERIALIZED_NAME_PROTECTED_CARD_DATA)
  private String protectedCardData;

  public static final String SERIALIZED_NAME_SENSITIVE_CARD_DATA = "SensitiveCardData";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_CARD_DATA)
  private SensitiveCardData sensitiveCardData;

  public CardData() {
  }

  public CardData allowedProduct(List<AllowedProduct> allowedProduct) {
    this.allowedProduct = allowedProduct;
    return this;
  }

  public CardData addAllowedProductItem(AllowedProduct allowedProductItem) {
    if (this.allowedProduct == null) {
      this.allowedProduct = new ArrayList<>();
    }
    this.allowedProduct.add(allowedProductItem);
    return this;
  }

  /**
   * Get allowedProduct
   * @return allowedProduct
   */
  @javax.annotation.Nullable
  public List<AllowedProduct> getAllowedProduct() {
    return allowedProduct;
  }

  public void setAllowedProduct(List<AllowedProduct> allowedProduct) {
    this.allowedProduct = allowedProduct;
  }


  public CardData allowedProductCode(List<Integer> allowedProductCode) {
    this.allowedProductCode = allowedProductCode;
    return this;
  }

  public CardData addAllowedProductCodeItem(Integer allowedProductCodeItem) {
    if (this.allowedProductCode == null) {
      this.allowedProductCode = new ArrayList<>();
    }
    this.allowedProductCode.add(allowedProductCodeItem);
    return this;
  }

  /**
   * Get allowedProductCode
   * @return allowedProductCode
   */
  @javax.annotation.Nullable
  public List<Integer> getAllowedProductCode() {
    return allowedProductCode;
  }

  public void setAllowedProductCode(List<Integer> allowedProductCode) {
    this.allowedProductCode = allowedProductCode;
  }


  public CardData cardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
    return this;
  }

  /**
   * If available in the card.
   * minimum: 3
   * maximum: 3
   * @return cardCountryCode
   */
  @javax.annotation.Nullable
  public Integer getCardCountryCode() {
    return cardCountryCode;
  }

  public void setCardCountryCode(Integer cardCountryCode) {
    this.cardCountryCode = cardCountryCode;
  }


  public CardData customerOrder(List<CustomerOrder> customerOrder) {
    this.customerOrder = customerOrder;
    return this;
  }

  public CardData addCustomerOrderItem(CustomerOrder customerOrderItem) {
    if (this.customerOrder == null) {
      this.customerOrder = new ArrayList<>();
    }
    this.customerOrder.add(customerOrderItem);
    return this;
  }

  /**
   * Get customerOrder
   * @return customerOrder
   */
  @javax.annotation.Nullable
  public List<CustomerOrder> getCustomerOrder() {
    return customerOrder;
  }

  public void setCustomerOrder(List<CustomerOrder> customerOrder) {
    this.customerOrder = customerOrder;
  }


  public CardData entryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
    return this;
  }

  public CardData addEntryModeItem(EntryModeEnum entryModeItem) {
    if (this.entryMode == null) {
      this.entryMode = new ArrayList<>();
    }
    this.entryMode.add(entryModeItem);
    return this;
  }

  /**
   * Get entryMode
   * @return entryMode
   */
  @javax.annotation.Nullable
  public List<EntryModeEnum> getEntryMode() {
    return entryMode;
  }

  public void setEntryMode(List<EntryModeEnum> entryMode) {
    this.entryMode = entryMode;
  }


  public CardData maskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
    return this;
  }

  /**
   * Get maskedPan
   * @return maskedPan
   */
  @javax.annotation.Nullable
  public String getMaskedPan() {
    return maskedPan;
  }

  public void setMaskedPan(String maskedPan) {
    this.maskedPan = maskedPan;
  }


  public CardData paymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
    return this;
  }

  /**
   * Get paymentAccountRef
   * @return paymentAccountRef
   */
  @javax.annotation.Nullable
  public String getPaymentAccountRef() {
    return paymentAccountRef;
  }

  public void setPaymentAccountRef(String paymentAccountRef) {
    this.paymentAccountRef = paymentAccountRef;
  }


  public CardData paymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
    return this;
  }

  /**
   * If card PAN is readable .
   * @return paymentBrand
   */
  @javax.annotation.Nullable
  public String getPaymentBrand() {
    return paymentBrand;
  }

  public void setPaymentBrand(String paymentBrand) {
    this.paymentBrand = paymentBrand;
  }


  public CardData paymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
    return this;
  }

  /**
   * Get paymentToken
   * @return paymentToken
   */
  @javax.annotation.Nullable
  public PaymentToken getPaymentToken() {
    return paymentToken;
  }

  public void setPaymentToken(PaymentToken paymentToken) {
    this.paymentToken = paymentToken;
  }


  public CardData protectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
    return this;
  }

  /**
   * SensitiveCardData protected by CMS EnvelopedData.
   * @return protectedCardData
   */
  @javax.annotation.Nullable
  public String getProtectedCardData() {
    return protectedCardData;
  }

  public void setProtectedCardData(String protectedCardData) {
    this.protectedCardData = protectedCardData;
  }


  public CardData sensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
    return this;
  }

  /**
   * Get sensitiveCardData
   * @return sensitiveCardData
   */
  @javax.annotation.Nullable
  public SensitiveCardData getSensitiveCardData() {
    return sensitiveCardData;
  }

  public void setSensitiveCardData(SensitiveCardData sensitiveCardData) {
    this.sensitiveCardData = sensitiveCardData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardData cardData = (CardData) o;
    return Objects.equals(this.allowedProduct, cardData.allowedProduct) &&
        Objects.equals(this.allowedProductCode, cardData.allowedProductCode) &&
        Objects.equals(this.cardCountryCode, cardData.cardCountryCode) &&
        Objects.equals(this.customerOrder, cardData.customerOrder) &&
        Objects.equals(this.entryMode, cardData.entryMode) &&
        Objects.equals(this.maskedPan, cardData.maskedPan) &&
        Objects.equals(this.paymentAccountRef, cardData.paymentAccountRef) &&
        Objects.equals(this.paymentBrand, cardData.paymentBrand) &&
        Objects.equals(this.paymentToken, cardData.paymentToken) &&
        Objects.equals(this.protectedCardData, cardData.protectedCardData) &&
        Objects.equals(this.sensitiveCardData, cardData.sensitiveCardData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedProduct, allowedProductCode, cardCountryCode, customerOrder, entryMode, maskedPan, paymentAccountRef, paymentBrand, paymentToken, protectedCardData, sensitiveCardData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardData {\n");
    sb.append("    allowedProduct: ").append(toIndentedString(allowedProduct)).append("\n");
    sb.append("    allowedProductCode: ").append(toIndentedString(allowedProductCode)).append("\n");
    sb.append("    cardCountryCode: ").append(toIndentedString(cardCountryCode)).append("\n");
    sb.append("    customerOrder: ").append(toIndentedString(customerOrder)).append("\n");
    sb.append("    entryMode: ").append(toIndentedString(entryMode)).append("\n");
    sb.append("    maskedPan: ").append(toIndentedString(maskedPan)).append("\n");
    sb.append("    paymentAccountRef: ").append(toIndentedString(paymentAccountRef)).append("\n");
    sb.append("    paymentBrand: ").append(toIndentedString(paymentBrand)).append("\n");
    sb.append("    paymentToken: ").append(toIndentedString(paymentToken)).append("\n");
    sb.append("    protectedCardData: ").append(toIndentedString(protectedCardData)).append("\n");
    sb.append("    sensitiveCardData: ").append(toIndentedString(sensitiveCardData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AllowedProduct");
    openapiFields.add("AllowedProductCode");
    openapiFields.add("CardCountryCode");
    openapiFields.add("CustomerOrder");
    openapiFields.add("EntryMode");
    openapiFields.add("MaskedPan");
    openapiFields.add("PaymentAccountRef");
    openapiFields.add("PaymentBrand");
    openapiFields.add("PaymentToken");
    openapiFields.add("ProtectedCardData");
    openapiFields.add("SensitiveCardData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardData is not found in the empty JSON string", CardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AllowedProduct") != null && !jsonObj.get("AllowedProduct").isJsonNull()) {
        JsonArray jsonArrayallowedProduct = jsonObj.getAsJsonArray("AllowedProduct");
        if (jsonArrayallowedProduct != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AllowedProduct").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AllowedProduct` to be an array in the JSON string but got `%s`", jsonObj.get("AllowedProduct").toString()));
          }

          // validate the optional field `AllowedProduct` (array)
          for (int i = 0; i < jsonArrayallowedProduct.size(); i++) {
            AllowedProduct.validateJsonElement(jsonArrayallowedProduct.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AllowedProductCode") != null && !jsonObj.get("AllowedProductCode").isJsonNull() && !jsonObj.get("AllowedProductCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AllowedProductCode` to be an array in the JSON string but got `%s`", jsonObj.get("AllowedProductCode").toString()));
      }
      if (jsonObj.get("CustomerOrder") != null && !jsonObj.get("CustomerOrder").isJsonNull()) {
        JsonArray jsonArraycustomerOrder = jsonObj.getAsJsonArray("CustomerOrder");
        if (jsonArraycustomerOrder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("CustomerOrder").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `CustomerOrder` to be an array in the JSON string but got `%s`", jsonObj.get("CustomerOrder").toString()));
          }

          // validate the optional field `CustomerOrder` (array)
          for (int i = 0; i < jsonArraycustomerOrder.size(); i++) {
            CustomerOrder.validateJsonElement(jsonArraycustomerOrder.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("EntryMode") != null && !jsonObj.get("EntryMode").isJsonNull() && !jsonObj.get("EntryMode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `EntryMode` to be an array in the JSON string but got `%s`", jsonObj.get("EntryMode").toString()));
      }
      if ((jsonObj.get("MaskedPan") != null && !jsonObj.get("MaskedPan").isJsonNull()) && !jsonObj.get("MaskedPan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MaskedPan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MaskedPan").toString()));
      }
      if ((jsonObj.get("PaymentAccountRef") != null && !jsonObj.get("PaymentAccountRef").isJsonNull()) && !jsonObj.get("PaymentAccountRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentAccountRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentAccountRef").toString()));
      }
      if ((jsonObj.get("PaymentBrand") != null && !jsonObj.get("PaymentBrand").isJsonNull()) && !jsonObj.get("PaymentBrand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PaymentBrand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PaymentBrand").toString()));
      }
      // validate the optional field `PaymentToken`
      if (jsonObj.get("PaymentToken") != null && !jsonObj.get("PaymentToken").isJsonNull()) {
        PaymentToken.validateJsonElement(jsonObj.get("PaymentToken"));
      }
      if ((jsonObj.get("ProtectedCardData") != null && !jsonObj.get("ProtectedCardData").isJsonNull()) && !jsonObj.get("ProtectedCardData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProtectedCardData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProtectedCardData").toString()));
      }
      // validate the optional field `SensitiveCardData`
      if (jsonObj.get("SensitiveCardData") != null && !jsonObj.get("SensitiveCardData").isJsonNull()) {
        SensitiveCardData.validateJsonElement(jsonObj.get("SensitiveCardData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardData.class));

       return (TypeAdapter<T>) new TypeAdapter<CardData>() {
           @Override
           public void write(JsonWriter out, CardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardData
   * @throws IOException if the JSON string is invalid with respect to CardData
   */
  public static CardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardData.class);
  }

  /**
   * Convert an instance of CardData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

