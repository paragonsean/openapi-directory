/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TrackData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This data structure could be CMS protected (EnvelopedData). In this case the data structure SensitiveCardData is replaced by the data structure ProtectedCardData of type ContentInformationType. When this data is protected, the exact content is unknown by the Sale System, and might include all the information which are required by an external backup POI Server to make a batch payment transaction in case of problem with the POI System. Sensitive information related to the payment card, entered or read by the Sale System.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SensitiveCardData {
  public static final String SERIALIZED_NAME_CARD_SEQ_NUMB = "CardSeqNumb";
  @SerializedName(SERIALIZED_NAME_CARD_SEQ_NUMB)
  private Integer cardSeqNumb;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "ExpiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private Integer expiryDate;

  public static final String SERIALIZED_NAME_P_A_N = "PAN";
  @SerializedName(SERIALIZED_NAME_P_A_N)
  private Integer PAN;

  public static final String SERIALIZED_NAME_TRACK_DATA = "TrackData";
  @SerializedName(SERIALIZED_NAME_TRACK_DATA)
  private List<TrackData> trackData = new ArrayList<>();

  public SensitiveCardData() {
  }

  public SensitiveCardData cardSeqNumb(Integer cardSeqNumb) {
    this.cardSeqNumb = cardSeqNumb;
    return this;
  }

  /**
   * if EntryMode is File, Keyed or Manual.
   * minimum: 2
   * maximum: 3
   * @return cardSeqNumb
   */
  @javax.annotation.Nullable
  public Integer getCardSeqNumb() {
    return cardSeqNumb;
  }

  public void setCardSeqNumb(Integer cardSeqNumb) {
    this.cardSeqNumb = cardSeqNumb;
  }


  public SensitiveCardData expiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
    return this;
  }

  /**
   * if EntryMode is File.
   * minimum: 4
   * maximum: 4
   * @return expiryDate
   */
  @javax.annotation.Nullable
  public Integer getExpiryDate() {
    return expiryDate;
  }

  public void setExpiryDate(Integer expiryDate) {
    this.expiryDate = expiryDate;
  }


  public SensitiveCardData PAN(Integer PAN) {
    this.PAN = PAN;
    return this;
  }

  /**
   * Get PAN
   * minimum: 8
   * maximum: 28
   * @return PAN
   */
  @javax.annotation.Nullable
  public Integer getPAN() {
    return PAN;
  }

  public void setPAN(Integer PAN) {
    this.PAN = PAN;
  }


  public SensitiveCardData trackData(List<TrackData> trackData) {
    this.trackData = trackData;
    return this;
  }

  public SensitiveCardData addTrackDataItem(TrackData trackDataItem) {
    if (this.trackData == null) {
      this.trackData = new ArrayList<>();
    }
    this.trackData.add(trackDataItem);
    return this;
  }

  /**
   * Get trackData
   * @return trackData
   */
  @javax.annotation.Nullable
  public List<TrackData> getTrackData() {
    return trackData;
  }

  public void setTrackData(List<TrackData> trackData) {
    this.trackData = trackData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensitiveCardData sensitiveCardData = (SensitiveCardData) o;
    return Objects.equals(this.cardSeqNumb, sensitiveCardData.cardSeqNumb) &&
        Objects.equals(this.expiryDate, sensitiveCardData.expiryDate) &&
        Objects.equals(this.PAN, sensitiveCardData.PAN) &&
        Objects.equals(this.trackData, sensitiveCardData.trackData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardSeqNumb, expiryDate, PAN, trackData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensitiveCardData {\n");
    sb.append("    cardSeqNumb: ").append(toIndentedString(cardSeqNumb)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    PAN: ").append(toIndentedString(PAN)).append("\n");
    sb.append("    trackData: ").append(toIndentedString(trackData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CardSeqNumb");
    openapiFields.add("ExpiryDate");
    openapiFields.add("PAN");
    openapiFields.add("TrackData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SensitiveCardData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SensitiveCardData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SensitiveCardData is not found in the empty JSON string", SensitiveCardData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SensitiveCardData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SensitiveCardData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("TrackData") != null && !jsonObj.get("TrackData").isJsonNull()) {
        JsonArray jsonArraytrackData = jsonObj.getAsJsonArray("TrackData");
        if (jsonArraytrackData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("TrackData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `TrackData` to be an array in the JSON string but got `%s`", jsonObj.get("TrackData").toString()));
          }

          // validate the optional field `TrackData` (array)
          for (int i = 0; i < jsonArraytrackData.size(); i++) {
            TrackData.validateJsonElement(jsonArraytrackData.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SensitiveCardData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SensitiveCardData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SensitiveCardData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SensitiveCardData.class));

       return (TypeAdapter<T>) new TypeAdapter<SensitiveCardData>() {
           @Override
           public void write(JsonWriter out, SensitiveCardData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SensitiveCardData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SensitiveCardData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SensitiveCardData
   * @throws IOException if the JSON string is invalid with respect to SensitiveCardData
   */
  public static SensitiveCardData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SensitiveCardData.class);
  }

  /**
   * Convert an instance of SensitiveCardData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

