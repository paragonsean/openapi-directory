/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LoyaltyTransactionType;
import org.openapitools.client.model.OriginalPOITransaction;
import org.openapitools.client.model.SaleItem;
import org.openapitools.client.model.TransactionConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoyaltyTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoyaltyTransaction {
  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_LOYALTY_TRANSACTION_TYPE = "LoyaltyTransactionType";
  @SerializedName(SERIALIZED_NAME_LOYALTY_TRANSACTION_TYPE)
  private LoyaltyTransactionType loyaltyTransactionType;

  public static final String SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION = "OriginalPOITransaction";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION)
  private OriginalPOITransaction originalPOITransaction;

  public static final String SERIALIZED_NAME_SALE_ITEM = "SaleItem";
  @SerializedName(SERIALIZED_NAME_SALE_ITEM)
  private List<SaleItem> saleItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "TotalAmount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_CONDITIONS = "TransactionConditions";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CONDITIONS)
  private TransactionConditions transactionConditions;

  public LoyaltyTransaction() {
  }

  public LoyaltyTransaction currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public LoyaltyTransaction loyaltyTransactionType(LoyaltyTransactionType loyaltyTransactionType) {
    this.loyaltyTransactionType = loyaltyTransactionType;
    return this;
  }

  /**
   * Get loyaltyTransactionType
   * @return loyaltyTransactionType
   */
  @javax.annotation.Nonnull
  public LoyaltyTransactionType getLoyaltyTransactionType() {
    return loyaltyTransactionType;
  }

  public void setLoyaltyTransactionType(LoyaltyTransactionType loyaltyTransactionType) {
    this.loyaltyTransactionType = loyaltyTransactionType;
  }


  public LoyaltyTransaction originalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
    return this;
  }

  /**
   * Get originalPOITransaction
   * @return originalPOITransaction
   */
  @javax.annotation.Nullable
  public OriginalPOITransaction getOriginalPOITransaction() {
    return originalPOITransaction;
  }

  public void setOriginalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
  }


  public LoyaltyTransaction saleItem(List<SaleItem> saleItem) {
    this.saleItem = saleItem;
    return this;
  }

  public LoyaltyTransaction addSaleItemItem(SaleItem saleItemItem) {
    if (this.saleItem == null) {
      this.saleItem = new ArrayList<>();
    }
    this.saleItem.add(saleItemItem);
    return this;
  }

  /**
   * Get saleItem
   * @return saleItem
   */
  @javax.annotation.Nullable
  public List<SaleItem> getSaleItem() {
    return saleItem;
  }

  public void setSaleItem(List<SaleItem> saleItem) {
    this.saleItem = saleItem;
  }


  public LoyaltyTransaction totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Get totalAmount
   * minimum: 0
   * maximum: 99999999.999999
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public LoyaltyTransaction transactionConditions(TransactionConditions transactionConditions) {
    this.transactionConditions = transactionConditions;
    return this;
  }

  /**
   * Get transactionConditions
   * @return transactionConditions
   */
  @javax.annotation.Nullable
  public TransactionConditions getTransactionConditions() {
    return transactionConditions;
  }

  public void setTransactionConditions(TransactionConditions transactionConditions) {
    this.transactionConditions = transactionConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoyaltyTransaction loyaltyTransaction = (LoyaltyTransaction) o;
    return Objects.equals(this.currency, loyaltyTransaction.currency) &&
        Objects.equals(this.loyaltyTransactionType, loyaltyTransaction.loyaltyTransactionType) &&
        Objects.equals(this.originalPOITransaction, loyaltyTransaction.originalPOITransaction) &&
        Objects.equals(this.saleItem, loyaltyTransaction.saleItem) &&
        Objects.equals(this.totalAmount, loyaltyTransaction.totalAmount) &&
        Objects.equals(this.transactionConditions, loyaltyTransaction.transactionConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, loyaltyTransactionType, originalPOITransaction, saleItem, totalAmount, transactionConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoyaltyTransaction {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    loyaltyTransactionType: ").append(toIndentedString(loyaltyTransactionType)).append("\n");
    sb.append("    originalPOITransaction: ").append(toIndentedString(originalPOITransaction)).append("\n");
    sb.append("    saleItem: ").append(toIndentedString(saleItem)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    transactionConditions: ").append(toIndentedString(transactionConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Currency");
    openapiFields.add("LoyaltyTransactionType");
    openapiFields.add("OriginalPOITransaction");
    openapiFields.add("SaleItem");
    openapiFields.add("TotalAmount");
    openapiFields.add("TransactionConditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("LoyaltyTransactionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoyaltyTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoyaltyTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoyaltyTransaction is not found in the empty JSON string", LoyaltyTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoyaltyTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoyaltyTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoyaltyTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      // validate the required field `LoyaltyTransactionType`
      LoyaltyTransactionType.validateJsonElement(jsonObj.get("LoyaltyTransactionType"));
      // validate the optional field `OriginalPOITransaction`
      if (jsonObj.get("OriginalPOITransaction") != null && !jsonObj.get("OriginalPOITransaction").isJsonNull()) {
        OriginalPOITransaction.validateJsonElement(jsonObj.get("OriginalPOITransaction"));
      }
      if (jsonObj.get("SaleItem") != null && !jsonObj.get("SaleItem").isJsonNull()) {
        JsonArray jsonArraysaleItem = jsonObj.getAsJsonArray("SaleItem");
        if (jsonArraysaleItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SaleItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SaleItem` to be an array in the JSON string but got `%s`", jsonObj.get("SaleItem").toString()));
          }

          // validate the optional field `SaleItem` (array)
          for (int i = 0; i < jsonArraysaleItem.size(); i++) {
            SaleItem.validateJsonElement(jsonArraysaleItem.get(i));
          };
        }
      }
      // validate the optional field `TransactionConditions`
      if (jsonObj.get("TransactionConditions") != null && !jsonObj.get("TransactionConditions").isJsonNull()) {
        TransactionConditions.validateJsonElement(jsonObj.get("TransactionConditions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoyaltyTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoyaltyTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoyaltyTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoyaltyTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<LoyaltyTransaction>() {
           @Override
           public void write(JsonWriter out, LoyaltyTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoyaltyTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoyaltyTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoyaltyTransaction
   * @throws IOException if the JSON string is invalid with respect to LoyaltyTransaction
   */
  public static LoyaltyTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoyaltyTransaction.class);
  }

  /**
   * Convert an instance of LoyaltyTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

