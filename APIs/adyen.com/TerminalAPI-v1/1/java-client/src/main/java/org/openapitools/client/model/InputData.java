/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Device;
import org.openapitools.client.model.InfoQualify;
import org.openapitools.client.model.InputCommand;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputData {
  public static final String SERIALIZED_NAME_BEEP_KEY_FLAG = "BeepKeyFlag";
  @SerializedName(SERIALIZED_NAME_BEEP_KEY_FLAG)
  private Boolean beepKeyFlag = false;

  public static final String SERIALIZED_NAME_DEFAULT_INPUT_STRING = "DefaultInputString";
  @SerializedName(SERIALIZED_NAME_DEFAULT_INPUT_STRING)
  private String defaultInputString;

  public static final String SERIALIZED_NAME_DEFAULT_LAYOUT_STRING = "DefaultLayoutString";
  @SerializedName(SERIALIZED_NAME_DEFAULT_LAYOUT_STRING)
  private String defaultLayoutString;

  public static final String SERIALIZED_NAME_DEVICE = "Device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private Device device;

  public static final String SERIALIZED_NAME_DISABLE_CANCEL_FLAG = "DisableCancelFlag";
  @SerializedName(SERIALIZED_NAME_DISABLE_CANCEL_FLAG)
  private Boolean disableCancelFlag = false;

  public static final String SERIALIZED_NAME_DISABLE_CORRECT_FLAG = "DisableCorrectFlag";
  @SerializedName(SERIALIZED_NAME_DISABLE_CORRECT_FLAG)
  private Boolean disableCorrectFlag = false;

  public static final String SERIALIZED_NAME_DISABLE_VALID_FLAG = "DisableValidFlag";
  @SerializedName(SERIALIZED_NAME_DISABLE_VALID_FLAG)
  private Boolean disableValidFlag = false;

  public static final String SERIALIZED_NAME_FROM_RIGHT_TO_LEFT_FLAG = "FromRightToLeftFlag";
  @SerializedName(SERIALIZED_NAME_FROM_RIGHT_TO_LEFT_FLAG)
  private Boolean fromRightToLeftFlag = false;

  public static final String SERIALIZED_NAME_GLOBAL_CORRECTION_FLAG = "GlobalCorrectionFlag";
  @SerializedName(SERIALIZED_NAME_GLOBAL_CORRECTION_FLAG)
  private Boolean globalCorrectionFlag = false;

  public static final String SERIALIZED_NAME_IMMEDIATE_RESPONSE_FLAG = "ImmediateResponseFlag";
  @SerializedName(SERIALIZED_NAME_IMMEDIATE_RESPONSE_FLAG)
  private Boolean immediateResponseFlag = false;

  public static final String SERIALIZED_NAME_INFO_QUALIFY = "InfoQualify";
  @SerializedName(SERIALIZED_NAME_INFO_QUALIFY)
  private InfoQualify infoQualify;

  public static final String SERIALIZED_NAME_INPUT_COMMAND = "InputCommand";
  @SerializedName(SERIALIZED_NAME_INPUT_COMMAND)
  private InputCommand inputCommand;

  public static final String SERIALIZED_NAME_MASK_CHARACTERS_FLAG = "MaskCharactersFlag";
  @SerializedName(SERIALIZED_NAME_MASK_CHARACTERS_FLAG)
  private Boolean maskCharactersFlag = false;

  public static final String SERIALIZED_NAME_MAX_DECIMAL_LENGTH = "MaxDecimalLength";
  @SerializedName(SERIALIZED_NAME_MAX_DECIMAL_LENGTH)
  private Integer maxDecimalLength;

  public static final String SERIALIZED_NAME_MAX_INPUT_TIME = "MaxInputTime";
  @SerializedName(SERIALIZED_NAME_MAX_INPUT_TIME)
  private Integer maxInputTime;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "MaxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_MENU_BACK_FLAG = "MenuBackFlag";
  @SerializedName(SERIALIZED_NAME_MENU_BACK_FLAG)
  private Boolean menuBackFlag = false;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "MinLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_NOTIFY_CARD_INPUT_FLAG = "NotifyCardInputFlag";
  @SerializedName(SERIALIZED_NAME_NOTIFY_CARD_INPUT_FLAG)
  private Boolean notifyCardInputFlag = false;

  public static final String SERIALIZED_NAME_STRING_MASK = "StringMask";
  @SerializedName(SERIALIZED_NAME_STRING_MASK)
  private String stringMask;

  public static final String SERIALIZED_NAME_WAIT_USER_VALIDATION_FLAG = "WaitUserValidationFlag";
  @SerializedName(SERIALIZED_NAME_WAIT_USER_VALIDATION_FLAG)
  private Boolean waitUserValidationFlag = true;

  public InputData() {
  }

  public InputData beepKeyFlag(Boolean beepKeyFlag) {
    this.beepKeyFlag = beepKeyFlag;
    return this;
  }

  /**
   * Get beepKeyFlag
   * @return beepKeyFlag
   */
  @javax.annotation.Nullable
  public Boolean getBeepKeyFlag() {
    return beepKeyFlag;
  }

  public void setBeepKeyFlag(Boolean beepKeyFlag) {
    this.beepKeyFlag = beepKeyFlag;
  }


  public InputData defaultInputString(String defaultInputString) {
    this.defaultInputString = defaultInputString;
    return this;
  }

  /**
   * Get defaultInputString
   * @return defaultInputString
   */
  @javax.annotation.Nullable
  public String getDefaultInputString() {
    return defaultInputString;
  }

  public void setDefaultInputString(String defaultInputString) {
    this.defaultInputString = defaultInputString;
  }


  public InputData defaultLayoutString(String defaultLayoutString) {
    this.defaultLayoutString = defaultLayoutString;
    return this;
  }

  /**
   * Get defaultLayoutString
   * @return defaultLayoutString
   */
  @javax.annotation.Nullable
  public String getDefaultLayoutString() {
    return defaultLayoutString;
  }

  public void setDefaultLayoutString(String defaultLayoutString) {
    this.defaultLayoutString = defaultLayoutString;
  }


  public InputData device(Device device) {
    this.device = device;
    return this;
  }

  /**
   * Get device
   * @return device
   */
  @javax.annotation.Nonnull
  public Device getDevice() {
    return device;
  }

  public void setDevice(Device device) {
    this.device = device;
  }


  public InputData disableCancelFlag(Boolean disableCancelFlag) {
    this.disableCancelFlag = disableCancelFlag;
    return this;
  }

  /**
   * Get disableCancelFlag
   * @return disableCancelFlag
   */
  @javax.annotation.Nullable
  public Boolean getDisableCancelFlag() {
    return disableCancelFlag;
  }

  public void setDisableCancelFlag(Boolean disableCancelFlag) {
    this.disableCancelFlag = disableCancelFlag;
  }


  public InputData disableCorrectFlag(Boolean disableCorrectFlag) {
    this.disableCorrectFlag = disableCorrectFlag;
    return this;
  }

  /**
   * Get disableCorrectFlag
   * @return disableCorrectFlag
   */
  @javax.annotation.Nullable
  public Boolean getDisableCorrectFlag() {
    return disableCorrectFlag;
  }

  public void setDisableCorrectFlag(Boolean disableCorrectFlag) {
    this.disableCorrectFlag = disableCorrectFlag;
  }


  public InputData disableValidFlag(Boolean disableValidFlag) {
    this.disableValidFlag = disableValidFlag;
    return this;
  }

  /**
   * Get disableValidFlag
   * @return disableValidFlag
   */
  @javax.annotation.Nullable
  public Boolean getDisableValidFlag() {
    return disableValidFlag;
  }

  public void setDisableValidFlag(Boolean disableValidFlag) {
    this.disableValidFlag = disableValidFlag;
  }


  public InputData fromRightToLeftFlag(Boolean fromRightToLeftFlag) {
    this.fromRightToLeftFlag = fromRightToLeftFlag;
    return this;
  }

  /**
   * Get fromRightToLeftFlag
   * @return fromRightToLeftFlag
   */
  @javax.annotation.Nullable
  public Boolean getFromRightToLeftFlag() {
    return fromRightToLeftFlag;
  }

  public void setFromRightToLeftFlag(Boolean fromRightToLeftFlag) {
    this.fromRightToLeftFlag = fromRightToLeftFlag;
  }


  public InputData globalCorrectionFlag(Boolean globalCorrectionFlag) {
    this.globalCorrectionFlag = globalCorrectionFlag;
    return this;
  }

  /**
   * Get globalCorrectionFlag
   * @return globalCorrectionFlag
   */
  @javax.annotation.Nullable
  public Boolean getGlobalCorrectionFlag() {
    return globalCorrectionFlag;
  }

  public void setGlobalCorrectionFlag(Boolean globalCorrectionFlag) {
    this.globalCorrectionFlag = globalCorrectionFlag;
  }


  public InputData immediateResponseFlag(Boolean immediateResponseFlag) {
    this.immediateResponseFlag = immediateResponseFlag;
    return this;
  }

  /**
   * Get immediateResponseFlag
   * @return immediateResponseFlag
   */
  @javax.annotation.Nullable
  public Boolean getImmediateResponseFlag() {
    return immediateResponseFlag;
  }

  public void setImmediateResponseFlag(Boolean immediateResponseFlag) {
    this.immediateResponseFlag = immediateResponseFlag;
  }


  public InputData infoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
    return this;
  }

  /**
   * Get infoQualify
   * @return infoQualify
   */
  @javax.annotation.Nonnull
  public InfoQualify getInfoQualify() {
    return infoQualify;
  }

  public void setInfoQualify(InfoQualify infoQualify) {
    this.infoQualify = infoQualify;
  }


  public InputData inputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
    return this;
  }

  /**
   * Get inputCommand
   * @return inputCommand
   */
  @javax.annotation.Nonnull
  public InputCommand getInputCommand() {
    return inputCommand;
  }

  public void setInputCommand(InputCommand inputCommand) {
    this.inputCommand = inputCommand;
  }


  public InputData maskCharactersFlag(Boolean maskCharactersFlag) {
    this.maskCharactersFlag = maskCharactersFlag;
    return this;
  }

  /**
   * Get maskCharactersFlag
   * @return maskCharactersFlag
   */
  @javax.annotation.Nullable
  public Boolean getMaskCharactersFlag() {
    return maskCharactersFlag;
  }

  public void setMaskCharactersFlag(Boolean maskCharactersFlag) {
    this.maskCharactersFlag = maskCharactersFlag;
  }


  public InputData maxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
    return this;
  }

  /**
   * Get maxDecimalLength
   * @return maxDecimalLength
   */
  @javax.annotation.Nullable
  public Integer getMaxDecimalLength() {
    return maxDecimalLength;
  }

  public void setMaxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
  }


  public InputData maxInputTime(Integer maxInputTime) {
    this.maxInputTime = maxInputTime;
    return this;
  }

  /**
   * Get maxInputTime
   * @return maxInputTime
   */
  @javax.annotation.Nullable
  public Integer getMaxInputTime() {
    return maxInputTime;
  }

  public void setMaxInputTime(Integer maxInputTime) {
    this.maxInputTime = maxInputTime;
  }


  public InputData maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Get maxLength
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public InputData menuBackFlag(Boolean menuBackFlag) {
    this.menuBackFlag = menuBackFlag;
    return this;
  }

  /**
   * Get menuBackFlag
   * @return menuBackFlag
   */
  @javax.annotation.Nullable
  public Boolean getMenuBackFlag() {
    return menuBackFlag;
  }

  public void setMenuBackFlag(Boolean menuBackFlag) {
    this.menuBackFlag = menuBackFlag;
  }


  public InputData minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Get minLength
   * @return minLength
   */
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public InputData notifyCardInputFlag(Boolean notifyCardInputFlag) {
    this.notifyCardInputFlag = notifyCardInputFlag;
    return this;
  }

  /**
   * Get notifyCardInputFlag
   * @return notifyCardInputFlag
   */
  @javax.annotation.Nullable
  public Boolean getNotifyCardInputFlag() {
    return notifyCardInputFlag;
  }

  public void setNotifyCardInputFlag(Boolean notifyCardInputFlag) {
    this.notifyCardInputFlag = notifyCardInputFlag;
  }


  public InputData stringMask(String stringMask) {
    this.stringMask = stringMask;
    return this;
  }

  /**
   * Get stringMask
   * @return stringMask
   */
  @javax.annotation.Nullable
  public String getStringMask() {
    return stringMask;
  }

  public void setStringMask(String stringMask) {
    this.stringMask = stringMask;
  }


  public InputData waitUserValidationFlag(Boolean waitUserValidationFlag) {
    this.waitUserValidationFlag = waitUserValidationFlag;
    return this;
  }

  /**
   * Get waitUserValidationFlag
   * @return waitUserValidationFlag
   */
  @javax.annotation.Nullable
  public Boolean getWaitUserValidationFlag() {
    return waitUserValidationFlag;
  }

  public void setWaitUserValidationFlag(Boolean waitUserValidationFlag) {
    this.waitUserValidationFlag = waitUserValidationFlag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputData inputData = (InputData) o;
    return Objects.equals(this.beepKeyFlag, inputData.beepKeyFlag) &&
        Objects.equals(this.defaultInputString, inputData.defaultInputString) &&
        Objects.equals(this.defaultLayoutString, inputData.defaultLayoutString) &&
        Objects.equals(this.device, inputData.device) &&
        Objects.equals(this.disableCancelFlag, inputData.disableCancelFlag) &&
        Objects.equals(this.disableCorrectFlag, inputData.disableCorrectFlag) &&
        Objects.equals(this.disableValidFlag, inputData.disableValidFlag) &&
        Objects.equals(this.fromRightToLeftFlag, inputData.fromRightToLeftFlag) &&
        Objects.equals(this.globalCorrectionFlag, inputData.globalCorrectionFlag) &&
        Objects.equals(this.immediateResponseFlag, inputData.immediateResponseFlag) &&
        Objects.equals(this.infoQualify, inputData.infoQualify) &&
        Objects.equals(this.inputCommand, inputData.inputCommand) &&
        Objects.equals(this.maskCharactersFlag, inputData.maskCharactersFlag) &&
        Objects.equals(this.maxDecimalLength, inputData.maxDecimalLength) &&
        Objects.equals(this.maxInputTime, inputData.maxInputTime) &&
        Objects.equals(this.maxLength, inputData.maxLength) &&
        Objects.equals(this.menuBackFlag, inputData.menuBackFlag) &&
        Objects.equals(this.minLength, inputData.minLength) &&
        Objects.equals(this.notifyCardInputFlag, inputData.notifyCardInputFlag) &&
        Objects.equals(this.stringMask, inputData.stringMask) &&
        Objects.equals(this.waitUserValidationFlag, inputData.waitUserValidationFlag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beepKeyFlag, defaultInputString, defaultLayoutString, device, disableCancelFlag, disableCorrectFlag, disableValidFlag, fromRightToLeftFlag, globalCorrectionFlag, immediateResponseFlag, infoQualify, inputCommand, maskCharactersFlag, maxDecimalLength, maxInputTime, maxLength, menuBackFlag, minLength, notifyCardInputFlag, stringMask, waitUserValidationFlag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputData {\n");
    sb.append("    beepKeyFlag: ").append(toIndentedString(beepKeyFlag)).append("\n");
    sb.append("    defaultInputString: ").append(toIndentedString(defaultInputString)).append("\n");
    sb.append("    defaultLayoutString: ").append(toIndentedString(defaultLayoutString)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    disableCancelFlag: ").append(toIndentedString(disableCancelFlag)).append("\n");
    sb.append("    disableCorrectFlag: ").append(toIndentedString(disableCorrectFlag)).append("\n");
    sb.append("    disableValidFlag: ").append(toIndentedString(disableValidFlag)).append("\n");
    sb.append("    fromRightToLeftFlag: ").append(toIndentedString(fromRightToLeftFlag)).append("\n");
    sb.append("    globalCorrectionFlag: ").append(toIndentedString(globalCorrectionFlag)).append("\n");
    sb.append("    immediateResponseFlag: ").append(toIndentedString(immediateResponseFlag)).append("\n");
    sb.append("    infoQualify: ").append(toIndentedString(infoQualify)).append("\n");
    sb.append("    inputCommand: ").append(toIndentedString(inputCommand)).append("\n");
    sb.append("    maskCharactersFlag: ").append(toIndentedString(maskCharactersFlag)).append("\n");
    sb.append("    maxDecimalLength: ").append(toIndentedString(maxDecimalLength)).append("\n");
    sb.append("    maxInputTime: ").append(toIndentedString(maxInputTime)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    menuBackFlag: ").append(toIndentedString(menuBackFlag)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    notifyCardInputFlag: ").append(toIndentedString(notifyCardInputFlag)).append("\n");
    sb.append("    stringMask: ").append(toIndentedString(stringMask)).append("\n");
    sb.append("    waitUserValidationFlag: ").append(toIndentedString(waitUserValidationFlag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BeepKeyFlag");
    openapiFields.add("DefaultInputString");
    openapiFields.add("DefaultLayoutString");
    openapiFields.add("Device");
    openapiFields.add("DisableCancelFlag");
    openapiFields.add("DisableCorrectFlag");
    openapiFields.add("DisableValidFlag");
    openapiFields.add("FromRightToLeftFlag");
    openapiFields.add("GlobalCorrectionFlag");
    openapiFields.add("ImmediateResponseFlag");
    openapiFields.add("InfoQualify");
    openapiFields.add("InputCommand");
    openapiFields.add("MaskCharactersFlag");
    openapiFields.add("MaxDecimalLength");
    openapiFields.add("MaxInputTime");
    openapiFields.add("MaxLength");
    openapiFields.add("MenuBackFlag");
    openapiFields.add("MinLength");
    openapiFields.add("NotifyCardInputFlag");
    openapiFields.add("StringMask");
    openapiFields.add("WaitUserValidationFlag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Device");
    openapiRequiredFields.add("InfoQualify");
    openapiRequiredFields.add("InputCommand");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputData is not found in the empty JSON string", InputData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DefaultInputString") != null && !jsonObj.get("DefaultInputString").isJsonNull()) && !jsonObj.get("DefaultInputString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultInputString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultInputString").toString()));
      }
      if ((jsonObj.get("DefaultLayoutString") != null && !jsonObj.get("DefaultLayoutString").isJsonNull()) && !jsonObj.get("DefaultLayoutString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DefaultLayoutString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DefaultLayoutString").toString()));
      }
      // validate the required field `Device`
      Device.validateJsonElement(jsonObj.get("Device"));
      // validate the required field `InfoQualify`
      InfoQualify.validateJsonElement(jsonObj.get("InfoQualify"));
      // validate the required field `InputCommand`
      InputCommand.validateJsonElement(jsonObj.get("InputCommand"));
      if ((jsonObj.get("StringMask") != null && !jsonObj.get("StringMask").isJsonNull()) && !jsonObj.get("StringMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StringMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StringMask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputData.class));

       return (TypeAdapter<T>) new TypeAdapter<InputData>() {
           @Override
           public void write(JsonWriter out, InputData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputData
   * @throws IOException if the JSON string is invalid with respect to InputData
   */
  public static InputData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputData.class);
  }

  /**
   * Convert an instance of InputData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

