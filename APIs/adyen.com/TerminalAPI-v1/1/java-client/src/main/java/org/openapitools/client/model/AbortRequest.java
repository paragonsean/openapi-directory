/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DisplayOutput;
import org.openapitools.client.model.MessageReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information requested for identification of the message request carrying the transaction to abort. A message to display on the CustomerError Device could be sent by the Sale System (DisplayOutput). Body of the Abort Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AbortRequest {
  public static final String SERIALIZED_NAME_ABORT_REASON = "AbortReason";
  @SerializedName(SERIALIZED_NAME_ABORT_REASON)
  private String abortReason;

  public static final String SERIALIZED_NAME_DISPLAY_OUTPUT = "DisplayOutput";
  @SerializedName(SERIALIZED_NAME_DISPLAY_OUTPUT)
  private DisplayOutput displayOutput;

  public static final String SERIALIZED_NAME_MESSAGE_REFERENCE = "MessageReference";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REFERENCE)
  private MessageReference messageReference;

  public AbortRequest() {
  }

  public AbortRequest abortReason(String abortReason) {
    this.abortReason = abortReason;
    return this;
  }

  /**
   * Reason of aborting a transaction.
   * @return abortReason
   */
  @javax.annotation.Nonnull
  public String getAbortReason() {
    return abortReason;
  }

  public void setAbortReason(String abortReason) {
    this.abortReason = abortReason;
  }


  public AbortRequest displayOutput(DisplayOutput displayOutput) {
    this.displayOutput = displayOutput;
    return this;
  }

  /**
   * Get displayOutput
   * @return displayOutput
   */
  @javax.annotation.Nullable
  public DisplayOutput getDisplayOutput() {
    return displayOutput;
  }

  public void setDisplayOutput(DisplayOutput displayOutput) {
    this.displayOutput = displayOutput;
  }


  public AbortRequest messageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
    return this;
  }

  /**
   * Get messageReference
   * @return messageReference
   */
  @javax.annotation.Nonnull
  public MessageReference getMessageReference() {
    return messageReference;
  }

  public void setMessageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AbortRequest abortRequest = (AbortRequest) o;
    return Objects.equals(this.abortReason, abortRequest.abortReason) &&
        Objects.equals(this.displayOutput, abortRequest.displayOutput) &&
        Objects.equals(this.messageReference, abortRequest.messageReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abortReason, displayOutput, messageReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AbortRequest {\n");
    sb.append("    abortReason: ").append(toIndentedString(abortReason)).append("\n");
    sb.append("    displayOutput: ").append(toIndentedString(displayOutput)).append("\n");
    sb.append("    messageReference: ").append(toIndentedString(messageReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AbortReason");
    openapiFields.add("DisplayOutput");
    openapiFields.add("MessageReference");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AbortReason");
    openapiRequiredFields.add("MessageReference");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AbortRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AbortRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AbortRequest is not found in the empty JSON string", AbortRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AbortRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AbortRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AbortRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AbortReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AbortReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AbortReason").toString()));
      }
      // validate the optional field `DisplayOutput`
      if (jsonObj.get("DisplayOutput") != null && !jsonObj.get("DisplayOutput").isJsonNull()) {
        DisplayOutput.validateJsonElement(jsonObj.get("DisplayOutput"));
      }
      // validate the required field `MessageReference`
      MessageReference.validateJsonElement(jsonObj.get("MessageReference"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AbortRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AbortRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AbortRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AbortRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AbortRequest>() {
           @Override
           public void write(JsonWriter out, AbortRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AbortRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AbortRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AbortRequest
   * @throws IOException if the JSON string is invalid with respect to AbortRequest
   */
  public static AbortRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AbortRequest.class);
  }

  /**
   * Convert an instance of AbortRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

