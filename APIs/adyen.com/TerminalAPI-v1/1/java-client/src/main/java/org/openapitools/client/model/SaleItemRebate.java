/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.UnitOfMeasure;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * To be differentiated from the award which is the amount or quantity earned on the loyalty account. The awarded amount that is attached to an item as a rebate.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaleItemRebate {
  public static final String SERIALIZED_NAME_EAN_UPC = "EanUpc";
  @SerializedName(SERIALIZED_NAME_EAN_UPC)
  private Integer eanUpc;

  public static final String SERIALIZED_NAME_ITEM_AMOUNT = "ItemAmount";
  @SerializedName(SERIALIZED_NAME_ITEM_AMOUNT)
  private BigDecimal itemAmount;

  public static final String SERIALIZED_NAME_ITEM_I_D = "ItemID";
  @SerializedName(SERIALIZED_NAME_ITEM_I_D)
  private Integer itemID;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "ProductCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private Integer productCode;

  public static final String SERIALIZED_NAME_QUANTITY = "Quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private String quantity;

  public static final String SERIALIZED_NAME_REBATE_LABEL = "RebateLabel";
  @SerializedName(SERIALIZED_NAME_REBATE_LABEL)
  private String rebateLabel;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "UnitOfMeasure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private UnitOfMeasure unitOfMeasure;

  public SaleItemRebate() {
  }

  public SaleItemRebate eanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
    return this;
  }

  /**
   * Get eanUpc
   * @return eanUpc
   */
  @javax.annotation.Nullable
  public Integer getEanUpc() {
    return eanUpc;
  }

  public void setEanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
  }


  public SaleItemRebate itemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
    return this;
  }

  /**
   * if rebate on the line item amount.
   * minimum: 0
   * maximum: 99999999.999999
   * @return itemAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getItemAmount() {
    return itemAmount;
  }

  public void setItemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
  }


  public SaleItemRebate itemID(Integer itemID) {
    this.itemID = itemID;
    return this;
  }

  /**
   * Item identification inside a transaction (0 to n).
   * @return itemID
   */
  @javax.annotation.Nonnull
  public Integer getItemID() {
    return itemID;
  }

  public void setItemID(Integer itemID) {
    this.itemID = itemID;
  }


  public SaleItemRebate productCode(Integer productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Product code of item purchased with the transaction.
   * minimum: 1
   * maximum: 20
   * @return productCode
   */
  @javax.annotation.Nonnull
  public Integer getProductCode() {
    return productCode;
  }

  public void setProductCode(Integer productCode) {
    this.productCode = productCode;
  }


  public SaleItemRebate quantity(String quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * if rebate is additional units.
   * @return quantity
   */
  @javax.annotation.Nullable
  public String getQuantity() {
    return quantity;
  }

  public void setQuantity(String quantity) {
    this.quantity = quantity;
  }


  public SaleItemRebate rebateLabel(String rebateLabel) {
    this.rebateLabel = rebateLabel;
    return this;
  }

  /**
   * If provided by the Acquirer.
   * @return rebateLabel
   */
  @javax.annotation.Nullable
  public String getRebateLabel() {
    return rebateLabel;
  }

  public void setRebateLabel(String rebateLabel) {
    this.rebateLabel = rebateLabel;
  }


  public SaleItemRebate unitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Get unitOfMeasure
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public UnitOfMeasure getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(UnitOfMeasure unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleItemRebate saleItemRebate = (SaleItemRebate) o;
    return Objects.equals(this.eanUpc, saleItemRebate.eanUpc) &&
        Objects.equals(this.itemAmount, saleItemRebate.itemAmount) &&
        Objects.equals(this.itemID, saleItemRebate.itemID) &&
        Objects.equals(this.productCode, saleItemRebate.productCode) &&
        Objects.equals(this.quantity, saleItemRebate.quantity) &&
        Objects.equals(this.rebateLabel, saleItemRebate.rebateLabel) &&
        Objects.equals(this.unitOfMeasure, saleItemRebate.unitOfMeasure);
  }

  @Override
  public int hashCode() {
    return Objects.hash(eanUpc, itemAmount, itemID, productCode, quantity, rebateLabel, unitOfMeasure);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleItemRebate {\n");
    sb.append("    eanUpc: ").append(toIndentedString(eanUpc)).append("\n");
    sb.append("    itemAmount: ").append(toIndentedString(itemAmount)).append("\n");
    sb.append("    itemID: ").append(toIndentedString(itemID)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    rebateLabel: ").append(toIndentedString(rebateLabel)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("EanUpc");
    openapiFields.add("ItemAmount");
    openapiFields.add("ItemID");
    openapiFields.add("ProductCode");
    openapiFields.add("Quantity");
    openapiFields.add("RebateLabel");
    openapiFields.add("UnitOfMeasure");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("ItemID");
    openapiRequiredFields.add("ProductCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleItemRebate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleItemRebate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleItemRebate is not found in the empty JSON string", SaleItemRebate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleItemRebate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleItemRebate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleItemRebate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Quantity") != null && !jsonObj.get("Quantity").isJsonNull()) && !jsonObj.get("Quantity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Quantity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Quantity").toString()));
      }
      if ((jsonObj.get("RebateLabel") != null && !jsonObj.get("RebateLabel").isJsonNull()) && !jsonObj.get("RebateLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RebateLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RebateLabel").toString()));
      }
      // validate the optional field `UnitOfMeasure`
      if (jsonObj.get("UnitOfMeasure") != null && !jsonObj.get("UnitOfMeasure").isJsonNull()) {
        UnitOfMeasure.validateJsonElement(jsonObj.get("UnitOfMeasure"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleItemRebate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleItemRebate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleItemRebate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleItemRebate.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleItemRebate>() {
           @Override
           public void write(JsonWriter out, SaleItemRebate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleItemRebate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleItemRebate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleItemRebate
   * @throws IOException if the JSON string is invalid with respect to SaleItemRebate
   */
  public static SaleItemRebate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleItemRebate.class);
  }

  /**
   * Convert an instance of SaleItemRebate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

