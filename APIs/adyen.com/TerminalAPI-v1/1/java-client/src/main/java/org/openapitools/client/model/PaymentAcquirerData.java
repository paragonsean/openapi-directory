/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data related to the response from the payment Acquirer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentAcquirerData {
  public static final String SERIALIZED_NAME_ACQUIRER_I_D = "AcquirerID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_I_D)
  private Integer acquirerID;

  public static final String SERIALIZED_NAME_ACQUIRER_P_O_I_I_D = "AcquirerPOIID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_P_O_I_I_D)
  private String acquirerPOIID;

  public static final String SERIALIZED_NAME_ACQUIRER_TRANSACTION_I_D = "AcquirerTransactionID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_TRANSACTION_I_D)
  private TransactionIDType acquirerTransactionID;

  public static final String SERIALIZED_NAME_APPROVAL_CODE = "ApprovalCode";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CODE)
  private String approvalCode;

  public static final String SERIALIZED_NAME_HOST_RECONCILIATION_I_D = "HostReconciliationID";
  @SerializedName(SERIALIZED_NAME_HOST_RECONCILIATION_I_D)
  private String hostReconciliationID;

  public static final String SERIALIZED_NAME_MERCHANT_I_D = "MerchantID";
  @SerializedName(SERIALIZED_NAME_MERCHANT_I_D)
  private String merchantID;

  public PaymentAcquirerData() {
  }

  public PaymentAcquirerData acquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

  /**
   * If several Acquirers.
   * @return acquirerID
   */
  @javax.annotation.Nullable
  public Integer getAcquirerID() {
    return acquirerID;
  }

  public void setAcquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
  }


  public PaymentAcquirerData acquirerPOIID(String acquirerPOIID) {
    this.acquirerPOIID = acquirerPOIID;
    return this;
  }

  /**
   * Identification of the POI for the payment Acquirer.
   * @return acquirerPOIID
   */
  @javax.annotation.Nonnull
  public String getAcquirerPOIID() {
    return acquirerPOIID;
  }

  public void setAcquirerPOIID(String acquirerPOIID) {
    this.acquirerPOIID = acquirerPOIID;
  }


  public PaymentAcquirerData acquirerTransactionID(TransactionIDType acquirerTransactionID) {
    this.acquirerTransactionID = acquirerTransactionID;
    return this;
  }

  /**
   * Get acquirerTransactionID
   * @return acquirerTransactionID
   */
  @javax.annotation.Nullable
  public TransactionIDType getAcquirerTransactionID() {
    return acquirerTransactionID;
  }

  public void setAcquirerTransactionID(TransactionIDType acquirerTransactionID) {
    this.acquirerTransactionID = acquirerTransactionID;
  }


  public PaymentAcquirerData approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

  /**
   * If available.
   * @return approvalCode
   */
  @javax.annotation.Nullable
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }


  public PaymentAcquirerData hostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
    return this;
  }

  /**
   * Get hostReconciliationID
   * @return hostReconciliationID
   */
  @javax.annotation.Nullable
  public String getHostReconciliationID() {
    return hostReconciliationID;
  }

  public void setHostReconciliationID(String hostReconciliationID) {
    this.hostReconciliationID = hostReconciliationID;
  }


  public PaymentAcquirerData merchantID(String merchantID) {
    this.merchantID = merchantID;
    return this;
  }

  /**
   * Identification of the Merchant for the Acquirer.
   * @return merchantID
   */
  @javax.annotation.Nonnull
  public String getMerchantID() {
    return merchantID;
  }

  public void setMerchantID(String merchantID) {
    this.merchantID = merchantID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAcquirerData paymentAcquirerData = (PaymentAcquirerData) o;
    return Objects.equals(this.acquirerID, paymentAcquirerData.acquirerID) &&
        Objects.equals(this.acquirerPOIID, paymentAcquirerData.acquirerPOIID) &&
        Objects.equals(this.acquirerTransactionID, paymentAcquirerData.acquirerTransactionID) &&
        Objects.equals(this.approvalCode, paymentAcquirerData.approvalCode) &&
        Objects.equals(this.hostReconciliationID, paymentAcquirerData.hostReconciliationID) &&
        Objects.equals(this.merchantID, paymentAcquirerData.merchantID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerID, acquirerPOIID, acquirerTransactionID, approvalCode, hostReconciliationID, merchantID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAcquirerData {\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    acquirerPOIID: ").append(toIndentedString(acquirerPOIID)).append("\n");
    sb.append("    acquirerTransactionID: ").append(toIndentedString(acquirerTransactionID)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    hostReconciliationID: ").append(toIndentedString(hostReconciliationID)).append("\n");
    sb.append("    merchantID: ").append(toIndentedString(merchantID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquirerID");
    openapiFields.add("AcquirerPOIID");
    openapiFields.add("AcquirerTransactionID");
    openapiFields.add("ApprovalCode");
    openapiFields.add("HostReconciliationID");
    openapiFields.add("MerchantID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AcquirerPOIID");
    openapiRequiredFields.add("MerchantID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAcquirerData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAcquirerData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAcquirerData is not found in the empty JSON string", PaymentAcquirerData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAcquirerData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentAcquirerData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentAcquirerData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("AcquirerPOIID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AcquirerPOIID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AcquirerPOIID").toString()));
      }
      // validate the optional field `AcquirerTransactionID`
      if (jsonObj.get("AcquirerTransactionID") != null && !jsonObj.get("AcquirerTransactionID").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("AcquirerTransactionID"));
      }
      if ((jsonObj.get("ApprovalCode") != null && !jsonObj.get("ApprovalCode").isJsonNull()) && !jsonObj.get("ApprovalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApprovalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApprovalCode").toString()));
      }
      if ((jsonObj.get("HostReconciliationID") != null && !jsonObj.get("HostReconciliationID").isJsonNull()) && !jsonObj.get("HostReconciliationID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HostReconciliationID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HostReconciliationID").toString()));
      }
      if (!jsonObj.get("MerchantID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `MerchantID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("MerchantID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAcquirerData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAcquirerData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAcquirerData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAcquirerData.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAcquirerData>() {
           @Override
           public void write(JsonWriter out, PaymentAcquirerData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAcquirerData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAcquirerData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAcquirerData
   * @throws IOException if the JSON string is invalid with respect to PaymentAcquirerData
   */
  public static PaymentAcquirerData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAcquirerData.class);
  }

  /**
   * Convert an instance of PaymentAcquirerData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

