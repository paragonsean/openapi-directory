/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * In the Payment or the Loyalty Request message, it allows using the card of a previous CardAcquisition or Payment/Loyalty request. Identification of a previous POI transaction.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OriginalPOITransaction {
  public static final String SERIALIZED_NAME_ACQUIRER_I_D = "AcquirerID";
  @SerializedName(SERIALIZED_NAME_ACQUIRER_I_D)
  private Integer acquirerID;

  public static final String SERIALIZED_NAME_AMOUNT_VALUE = "AmountValue";
  @SerializedName(SERIALIZED_NAME_AMOUNT_VALUE)
  private BigDecimal amountValue;

  public static final String SERIALIZED_NAME_APPROVAL_CODE = "ApprovalCode";
  @SerializedName(SERIALIZED_NAME_APPROVAL_CODE)
  private String approvalCode;

  public static final String SERIALIZED_NAME_CUSTOMER_LANGUAGE = "CustomerLanguage";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LANGUAGE)
  private String customerLanguage;

  public static final String SERIALIZED_NAME_HOST_TRANSACTION_I_D = "HostTransactionID";
  @SerializedName(SERIALIZED_NAME_HOST_TRANSACTION_I_D)
  private TransactionIDType hostTransactionID;

  public static final String SERIALIZED_NAME_P_O_I_I_D = "POIID";
  @SerializedName(SERIALIZED_NAME_P_O_I_I_D)
  private String POIID;

  public static final String SERIALIZED_NAME_PO_I_TRANSACTION_I_D = "POITransactionID";
  @SerializedName(SERIALIZED_NAME_PO_I_TRANSACTION_I_D)
  private TransactionIDType poITransactionID;

  public static final String SERIALIZED_NAME_REUSE_CARD_DATA_FLAG = "ReuseCardDataFlag";
  @SerializedName(SERIALIZED_NAME_REUSE_CARD_DATA_FLAG)
  private Boolean reuseCardDataFlag = true;

  public static final String SERIALIZED_NAME_SALE_I_D = "SaleID";
  @SerializedName(SERIALIZED_NAME_SALE_I_D)
  private String saleID;

  public OriginalPOITransaction() {
  }

  public OriginalPOITransaction acquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
    return this;
  }

  /**
   * Restrict to these Acquirer if present.
   * @return acquirerID
   */
  @javax.annotation.Nullable
  public Integer getAcquirerID() {
    return acquirerID;
  }

  public void setAcquirerID(Integer acquirerID) {
    this.acquirerID = acquirerID;
  }


  public OriginalPOITransaction amountValue(BigDecimal amountValue) {
    this.amountValue = amountValue;
    return this;
  }

  /**
   * Get amountValue
   * minimum: 0
   * maximum: 99999999.999999
   * @return amountValue
   */
  @javax.annotation.Nullable
  public BigDecimal getAmountValue() {
    return amountValue;
  }

  public void setAmountValue(BigDecimal amountValue) {
    this.amountValue = amountValue;
  }


  public OriginalPOITransaction approvalCode(String approvalCode) {
    this.approvalCode = approvalCode;
    return this;
  }

  /**
   * If referral.
   * @return approvalCode
   */
  @javax.annotation.Nullable
  public String getApprovalCode() {
    return approvalCode;
  }

  public void setApprovalCode(String approvalCode) {
    this.approvalCode = approvalCode;
  }


  public OriginalPOITransaction customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * If the language is selected by the Sale System before the request to the POI.
   * @return customerLanguage
   */
  @javax.annotation.Nullable
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }


  public OriginalPOITransaction hostTransactionID(TransactionIDType hostTransactionID) {
    this.hostTransactionID = hostTransactionID;
    return this;
  }

  /**
   * Get hostTransactionID
   * @return hostTransactionID
   */
  @javax.annotation.Nullable
  public TransactionIDType getHostTransactionID() {
    return hostTransactionID;
  }

  public void setHostTransactionID(TransactionIDType hostTransactionID) {
    this.hostTransactionID = hostTransactionID;
  }


  public OriginalPOITransaction POIID(String POIID) {
    this.POIID = POIID;
    return this;
  }

  /**
   * If original transaction is coming from another POI.
   * @return POIID
   */
  @javax.annotation.Nullable
  public String getPOIID() {
    return POIID;
  }

  public void setPOIID(String POIID) {
    this.POIID = POIID;
  }


  public OriginalPOITransaction poITransactionID(TransactionIDType poITransactionID) {
    this.poITransactionID = poITransactionID;
    return this;
  }

  /**
   * Get poITransactionID
   * @return poITransactionID
   */
  @javax.annotation.Nullable
  public TransactionIDType getPoITransactionID() {
    return poITransactionID;
  }

  public void setPoITransactionID(TransactionIDType poITransactionID) {
    this.poITransactionID = poITransactionID;
  }


  public OriginalPOITransaction reuseCardDataFlag(Boolean reuseCardDataFlag) {
    this.reuseCardDataFlag = reuseCardDataFlag;
    return this;
  }

  /**
   * Indicate if the card data has to be got from a previous transaction.
   * @return reuseCardDataFlag
   */
  @javax.annotation.Nullable
  public Boolean getReuseCardDataFlag() {
    return reuseCardDataFlag;
  }

  public void setReuseCardDataFlag(Boolean reuseCardDataFlag) {
    this.reuseCardDataFlag = reuseCardDataFlag;
  }


  public OriginalPOITransaction saleID(String saleID) {
    this.saleID = saleID;
    return this;
  }

  /**
   * Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
   * @return saleID
   */
  @javax.annotation.Nullable
  public String getSaleID() {
    return saleID;
  }

  public void setSaleID(String saleID) {
    this.saleID = saleID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OriginalPOITransaction originalPOITransaction = (OriginalPOITransaction) o;
    return Objects.equals(this.acquirerID, originalPOITransaction.acquirerID) &&
        Objects.equals(this.amountValue, originalPOITransaction.amountValue) &&
        Objects.equals(this.approvalCode, originalPOITransaction.approvalCode) &&
        Objects.equals(this.customerLanguage, originalPOITransaction.customerLanguage) &&
        Objects.equals(this.hostTransactionID, originalPOITransaction.hostTransactionID) &&
        Objects.equals(this.POIID, originalPOITransaction.POIID) &&
        Objects.equals(this.poITransactionID, originalPOITransaction.poITransactionID) &&
        Objects.equals(this.reuseCardDataFlag, originalPOITransaction.reuseCardDataFlag) &&
        Objects.equals(this.saleID, originalPOITransaction.saleID);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acquirerID, amountValue, approvalCode, customerLanguage, hostTransactionID, POIID, poITransactionID, reuseCardDataFlag, saleID);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OriginalPOITransaction {\n");
    sb.append("    acquirerID: ").append(toIndentedString(acquirerID)).append("\n");
    sb.append("    amountValue: ").append(toIndentedString(amountValue)).append("\n");
    sb.append("    approvalCode: ").append(toIndentedString(approvalCode)).append("\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    hostTransactionID: ").append(toIndentedString(hostTransactionID)).append("\n");
    sb.append("    POIID: ").append(toIndentedString(POIID)).append("\n");
    sb.append("    poITransactionID: ").append(toIndentedString(poITransactionID)).append("\n");
    sb.append("    reuseCardDataFlag: ").append(toIndentedString(reuseCardDataFlag)).append("\n");
    sb.append("    saleID: ").append(toIndentedString(saleID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AcquirerID");
    openapiFields.add("AmountValue");
    openapiFields.add("ApprovalCode");
    openapiFields.add("CustomerLanguage");
    openapiFields.add("HostTransactionID");
    openapiFields.add("POIID");
    openapiFields.add("POITransactionID");
    openapiFields.add("ReuseCardDataFlag");
    openapiFields.add("SaleID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OriginalPOITransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OriginalPOITransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OriginalPOITransaction is not found in the empty JSON string", OriginalPOITransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OriginalPOITransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OriginalPOITransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ApprovalCode") != null && !jsonObj.get("ApprovalCode").isJsonNull()) && !jsonObj.get("ApprovalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ApprovalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ApprovalCode").toString()));
      }
      if ((jsonObj.get("CustomerLanguage") != null && !jsonObj.get("CustomerLanguage").isJsonNull()) && !jsonObj.get("CustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerLanguage").toString()));
      }
      // validate the optional field `HostTransactionID`
      if (jsonObj.get("HostTransactionID") != null && !jsonObj.get("HostTransactionID").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("HostTransactionID"));
      }
      if ((jsonObj.get("POIID") != null && !jsonObj.get("POIID").isJsonNull()) && !jsonObj.get("POIID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `POIID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("POIID").toString()));
      }
      // validate the optional field `POITransactionID`
      if (jsonObj.get("POITransactionID") != null && !jsonObj.get("POITransactionID").isJsonNull()) {
        TransactionIDType.validateJsonElement(jsonObj.get("POITransactionID"));
      }
      if ((jsonObj.get("SaleID") != null && !jsonObj.get("SaleID").isJsonNull()) && !jsonObj.get("SaleID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OriginalPOITransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OriginalPOITransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OriginalPOITransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OriginalPOITransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<OriginalPOITransaction>() {
           @Override
           public void write(JsonWriter out, OriginalPOITransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OriginalPOITransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OriginalPOITransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OriginalPOITransaction
   * @throws IOException if the JSON string is invalid with respect to OriginalPOITransaction
   */
  public static OriginalPOITransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OriginalPOITransaction.class);
  }

  /**
   * Convert an instance of OriginalPOITransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

