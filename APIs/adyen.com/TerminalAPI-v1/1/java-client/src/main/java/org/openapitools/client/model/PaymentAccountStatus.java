/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PaymentAcquirerData;
import org.openapitools.client.model.PaymentInstrumentData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentAccountStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentAccountStatus {
  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_CURRENT_BALANCE = "CurrentBalance";
  @SerializedName(SERIALIZED_NAME_CURRENT_BALANCE)
  private BigDecimal currentBalance;

  public static final String SERIALIZED_NAME_PAYMENT_ACQUIRER_DATA = "PaymentAcquirerData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_ACQUIRER_DATA)
  private PaymentAcquirerData paymentAcquirerData;

  public static final String SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA = "PaymentInstrumentData";
  @SerializedName(SERIALIZED_NAME_PAYMENT_INSTRUMENT_DATA)
  private PaymentInstrumentData paymentInstrumentData;

  public PaymentAccountStatus() {
  }

  public PaymentAccountStatus currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Get currency
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public PaymentAccountStatus currentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
    return this;
  }

  /**
   * Get currentBalance
   * minimum: 0
   * maximum: 99999999.999999
   * @return currentBalance
   */
  @javax.annotation.Nullable
  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }

  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }


  public PaymentAccountStatus paymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
    return this;
  }

  /**
   * Get paymentAcquirerData
   * @return paymentAcquirerData
   */
  @javax.annotation.Nullable
  public PaymentAcquirerData getPaymentAcquirerData() {
    return paymentAcquirerData;
  }

  public void setPaymentAcquirerData(PaymentAcquirerData paymentAcquirerData) {
    this.paymentAcquirerData = paymentAcquirerData;
  }


  public PaymentAccountStatus paymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
    return this;
  }

  /**
   * Get paymentInstrumentData
   * @return paymentInstrumentData
   */
  @javax.annotation.Nullable
  public PaymentInstrumentData getPaymentInstrumentData() {
    return paymentInstrumentData;
  }

  public void setPaymentInstrumentData(PaymentInstrumentData paymentInstrumentData) {
    this.paymentInstrumentData = paymentInstrumentData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentAccountStatus paymentAccountStatus = (PaymentAccountStatus) o;
    return Objects.equals(this.currency, paymentAccountStatus.currency) &&
        Objects.equals(this.currentBalance, paymentAccountStatus.currentBalance) &&
        Objects.equals(this.paymentAcquirerData, paymentAccountStatus.paymentAcquirerData) &&
        Objects.equals(this.paymentInstrumentData, paymentAccountStatus.paymentInstrumentData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, currentBalance, paymentAcquirerData, paymentInstrumentData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentAccountStatus {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    paymentAcquirerData: ").append(toIndentedString(paymentAcquirerData)).append("\n");
    sb.append("    paymentInstrumentData: ").append(toIndentedString(paymentInstrumentData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Currency");
    openapiFields.add("CurrentBalance");
    openapiFields.add("PaymentAcquirerData");
    openapiFields.add("PaymentInstrumentData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentAccountStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentAccountStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentAccountStatus is not found in the empty JSON string", PaymentAccountStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentAccountStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentAccountStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      // validate the optional field `PaymentAcquirerData`
      if (jsonObj.get("PaymentAcquirerData") != null && !jsonObj.get("PaymentAcquirerData").isJsonNull()) {
        PaymentAcquirerData.validateJsonElement(jsonObj.get("PaymentAcquirerData"));
      }
      // validate the optional field `PaymentInstrumentData`
      if (jsonObj.get("PaymentInstrumentData") != null && !jsonObj.get("PaymentInstrumentData").isJsonNull()) {
        PaymentInstrumentData.validateJsonElement(jsonObj.get("PaymentInstrumentData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentAccountStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentAccountStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentAccountStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentAccountStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentAccountStatus>() {
           @Override
           public void write(JsonWriter out, PaymentAccountStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentAccountStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentAccountStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentAccountStatus
   * @throws IOException if the JSON string is invalid with respect to PaymentAccountStatus
   */
  public static PaymentAccountStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentAccountStatus.class);
  }

  /**
   * Convert an instance of PaymentAccountStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

