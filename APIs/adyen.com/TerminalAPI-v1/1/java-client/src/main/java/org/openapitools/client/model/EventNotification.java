/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DisplayOutput;
import org.openapitools.client.model.EventToNotify;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys Information related to the event, and possible action (maintenance, message to display). Content of the EventNotification message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EventNotification {
  public static final String SERIALIZED_NAME_CUSTOMER_LANGUAGE = "CustomerLanguage";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_LANGUAGE)
  private String customerLanguage;

  public static final String SERIALIZED_NAME_DISPLAY_OUTPUT = "DisplayOutput";
  @SerializedName(SERIALIZED_NAME_DISPLAY_OUTPUT)
  private List<DisplayOutput> displayOutput = new ArrayList<>();

  public static final String SERIALIZED_NAME_EVENT_DETAILS = "EventDetails";
  @SerializedName(SERIALIZED_NAME_EVENT_DETAILS)
  private String eventDetails;

  public static final String SERIALIZED_NAME_EVENT_TO_NOTIFY = "EventToNotify";
  @SerializedName(SERIALIZED_NAME_EVENT_TO_NOTIFY)
  private EventToNotify eventToNotify;

  public static final String SERIALIZED_NAME_MAINTENANCE_REQUIRED_FLAG = "MaintenanceRequiredFlag";
  @SerializedName(SERIALIZED_NAME_MAINTENANCE_REQUIRED_FLAG)
  private Boolean maintenanceRequiredFlag = false;

  public static final String SERIALIZED_NAME_REJECTED_MESSAGE = "RejectedMessage";
  @SerializedName(SERIALIZED_NAME_REJECTED_MESSAGE)
  private String rejectedMessage;

  public static final String SERIALIZED_NAME_TIME_STAMP = "TimeStamp";
  @SerializedName(SERIALIZED_NAME_TIME_STAMP)
  private OffsetDateTime timeStamp;

  public EventNotification() {
  }

  public EventNotification customerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
    return this;
  }

  /**
   * If the language is selected by the Sale System before the request to the POI.
   * @return customerLanguage
   */
  @javax.annotation.Nullable
  public String getCustomerLanguage() {
    return customerLanguage;
  }

  public void setCustomerLanguage(String customerLanguage) {
    this.customerLanguage = customerLanguage;
  }


  public EventNotification displayOutput(List<DisplayOutput> displayOutput) {
    this.displayOutput = displayOutput;
    return this;
  }

  public EventNotification addDisplayOutputItem(DisplayOutput displayOutputItem) {
    if (this.displayOutput == null) {
      this.displayOutput = new ArrayList<>();
    }
    this.displayOutput.add(displayOutputItem);
    return this;
  }

  /**
   * Get displayOutput
   * @return displayOutput
   */
  @javax.annotation.Nullable
  public List<DisplayOutput> getDisplayOutput() {
    return displayOutput;
  }

  public void setDisplayOutput(List<DisplayOutput> displayOutput) {
    this.displayOutput = displayOutput;
  }


  public EventNotification eventDetails(String eventDetails) {
    this.eventDetails = eventDetails;
    return this;
  }

  /**
   * If present, the Sale logs it for further examination.
   * @return eventDetails
   */
  @javax.annotation.Nullable
  public String getEventDetails() {
    return eventDetails;
  }

  public void setEventDetails(String eventDetails) {
    this.eventDetails = eventDetails;
  }


  public EventNotification eventToNotify(EventToNotify eventToNotify) {
    this.eventToNotify = eventToNotify;
    return this;
  }

  /**
   * Get eventToNotify
   * @return eventToNotify
   */
  @javax.annotation.Nonnull
  public EventToNotify getEventToNotify() {
    return eventToNotify;
  }

  public void setEventToNotify(EventToNotify eventToNotify) {
    this.eventToNotify = eventToNotify;
  }


  public EventNotification maintenanceRequiredFlag(Boolean maintenanceRequiredFlag) {
    this.maintenanceRequiredFlag = maintenanceRequiredFlag;
    return this;
  }

  /**
   * Indicates if the occurred event requires maintenance call or action.
   * @return maintenanceRequiredFlag
   */
  @javax.annotation.Nullable
  public Boolean getMaintenanceRequiredFlag() {
    return maintenanceRequiredFlag;
  }

  public void setMaintenanceRequiredFlag(Boolean maintenanceRequiredFlag) {
    this.maintenanceRequiredFlag = maintenanceRequiredFlag;
  }


  public EventNotification rejectedMessage(String rejectedMessage) {
    this.rejectedMessage = rejectedMessage;
    return this;
  }

  /**
   * Mandatory if EventToNotify is Reject, absent in other cases.
   * @return rejectedMessage
   */
  @javax.annotation.Nullable
  public String getRejectedMessage() {
    return rejectedMessage;
  }

  public void setRejectedMessage(String rejectedMessage) {
    this.rejectedMessage = rejectedMessage;
  }


  public EventNotification timeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
    return this;
  }

  /**
   * Date and time of a transaction for the Sale System, the POI System or the Acquirer.
   * @return timeStamp
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getTimeStamp() {
    return timeStamp;
  }

  public void setTimeStamp(OffsetDateTime timeStamp) {
    this.timeStamp = timeStamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventNotification eventNotification = (EventNotification) o;
    return Objects.equals(this.customerLanguage, eventNotification.customerLanguage) &&
        Objects.equals(this.displayOutput, eventNotification.displayOutput) &&
        Objects.equals(this.eventDetails, eventNotification.eventDetails) &&
        Objects.equals(this.eventToNotify, eventNotification.eventToNotify) &&
        Objects.equals(this.maintenanceRequiredFlag, eventNotification.maintenanceRequiredFlag) &&
        Objects.equals(this.rejectedMessage, eventNotification.rejectedMessage) &&
        Objects.equals(this.timeStamp, eventNotification.timeStamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerLanguage, displayOutput, eventDetails, eventToNotify, maintenanceRequiredFlag, rejectedMessage, timeStamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventNotification {\n");
    sb.append("    customerLanguage: ").append(toIndentedString(customerLanguage)).append("\n");
    sb.append("    displayOutput: ").append(toIndentedString(displayOutput)).append("\n");
    sb.append("    eventDetails: ").append(toIndentedString(eventDetails)).append("\n");
    sb.append("    eventToNotify: ").append(toIndentedString(eventToNotify)).append("\n");
    sb.append("    maintenanceRequiredFlag: ").append(toIndentedString(maintenanceRequiredFlag)).append("\n");
    sb.append("    rejectedMessage: ").append(toIndentedString(rejectedMessage)).append("\n");
    sb.append("    timeStamp: ").append(toIndentedString(timeStamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerLanguage");
    openapiFields.add("DisplayOutput");
    openapiFields.add("EventDetails");
    openapiFields.add("EventToNotify");
    openapiFields.add("MaintenanceRequiredFlag");
    openapiFields.add("RejectedMessage");
    openapiFields.add("TimeStamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EventToNotify");
    openapiRequiredFields.add("TimeStamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventNotification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventNotification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventNotification is not found in the empty JSON string", EventNotification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventNotification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventNotification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EventNotification.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CustomerLanguage") != null && !jsonObj.get("CustomerLanguage").isJsonNull()) && !jsonObj.get("CustomerLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerLanguage").toString()));
      }
      if (jsonObj.get("DisplayOutput") != null && !jsonObj.get("DisplayOutput").isJsonNull()) {
        JsonArray jsonArraydisplayOutput = jsonObj.getAsJsonArray("DisplayOutput");
        if (jsonArraydisplayOutput != null) {
          // ensure the json data is an array
          if (!jsonObj.get("DisplayOutput").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `DisplayOutput` to be an array in the JSON string but got `%s`", jsonObj.get("DisplayOutput").toString()));
          }

          // validate the optional field `DisplayOutput` (array)
          for (int i = 0; i < jsonArraydisplayOutput.size(); i++) {
            DisplayOutput.validateJsonElement(jsonArraydisplayOutput.get(i));
          };
        }
      }
      if ((jsonObj.get("EventDetails") != null && !jsonObj.get("EventDetails").isJsonNull()) && !jsonObj.get("EventDetails").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EventDetails` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EventDetails").toString()));
      }
      // validate the required field `EventToNotify`
      EventToNotify.validateJsonElement(jsonObj.get("EventToNotify"));
      if ((jsonObj.get("RejectedMessage") != null && !jsonObj.get("RejectedMessage").isJsonNull()) && !jsonObj.get("RejectedMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RejectedMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RejectedMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventNotification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventNotification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventNotification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventNotification.class));

       return (TypeAdapter<T>) new TypeAdapter<EventNotification>() {
           @Override
           public void write(JsonWriter out, EventNotification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventNotification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventNotification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventNotification
   * @throws IOException if the JSON string is invalid with respect to EventNotification
   */
  public static EventNotification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventNotification.class);
  }

  /**
   * Convert an instance of EventNotification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

