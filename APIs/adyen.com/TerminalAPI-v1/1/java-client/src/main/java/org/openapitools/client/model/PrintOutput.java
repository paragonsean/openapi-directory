/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DocumentQualifier;
import org.openapitools.client.model.OutputContent;
import org.openapitools.client.model.ResponseMode;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PrintOutput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrintOutput {
  public static final String SERIALIZED_NAME_DOCUMENT_QUALIFIER = "DocumentQualifier";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_QUALIFIER)
  private DocumentQualifier documentQualifier;

  public static final String SERIALIZED_NAME_INTEGRATED_PRINT_FLAG = "IntegratedPrintFlag";
  @SerializedName(SERIALIZED_NAME_INTEGRATED_PRINT_FLAG)
  private Boolean integratedPrintFlag = false;

  public static final String SERIALIZED_NAME_OUTPUT_CONTENT = "OutputContent";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONTENT)
  private OutputContent outputContent;

  public static final String SERIALIZED_NAME_REQUIRED_SIGNATURE_FLAG = "RequiredSignatureFlag";
  @SerializedName(SERIALIZED_NAME_REQUIRED_SIGNATURE_FLAG)
  private Boolean requiredSignatureFlag = false;

  public static final String SERIALIZED_NAME_RESPONSE_MODE = "ResponseMode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_MODE)
  private ResponseMode responseMode;

  public PrintOutput() {
  }

  public PrintOutput documentQualifier(DocumentQualifier documentQualifier) {
    this.documentQualifier = documentQualifier;
    return this;
  }

  /**
   * Get documentQualifier
   * @return documentQualifier
   */
  @javax.annotation.Nonnull
  public DocumentQualifier getDocumentQualifier() {
    return documentQualifier;
  }

  public void setDocumentQualifier(DocumentQualifier documentQualifier) {
    this.documentQualifier = documentQualifier;
  }


  public PrintOutput integratedPrintFlag(Boolean integratedPrintFlag) {
    this.integratedPrintFlag = integratedPrintFlag;
    return this;
  }

  /**
   * Get integratedPrintFlag
   * @return integratedPrintFlag
   */
  @javax.annotation.Nullable
  public Boolean getIntegratedPrintFlag() {
    return integratedPrintFlag;
  }

  public void setIntegratedPrintFlag(Boolean integratedPrintFlag) {
    this.integratedPrintFlag = integratedPrintFlag;
  }


  public PrintOutput outputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
    return this;
  }

  /**
   * Get outputContent
   * @return outputContent
   */
  @javax.annotation.Nonnull
  public OutputContent getOutputContent() {
    return outputContent;
  }

  public void setOutputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
  }


  public PrintOutput requiredSignatureFlag(Boolean requiredSignatureFlag) {
    this.requiredSignatureFlag = requiredSignatureFlag;
    return this;
  }

  /**
   * Get requiredSignatureFlag
   * @return requiredSignatureFlag
   */
  @javax.annotation.Nullable
  public Boolean getRequiredSignatureFlag() {
    return requiredSignatureFlag;
  }

  public void setRequiredSignatureFlag(Boolean requiredSignatureFlag) {
    this.requiredSignatureFlag = requiredSignatureFlag;
  }


  public PrintOutput responseMode(ResponseMode responseMode) {
    this.responseMode = responseMode;
    return this;
  }

  /**
   * Get responseMode
   * @return responseMode
   */
  @javax.annotation.Nonnull
  public ResponseMode getResponseMode() {
    return responseMode;
  }

  public void setResponseMode(ResponseMode responseMode) {
    this.responseMode = responseMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrintOutput printOutput = (PrintOutput) o;
    return Objects.equals(this.documentQualifier, printOutput.documentQualifier) &&
        Objects.equals(this.integratedPrintFlag, printOutput.integratedPrintFlag) &&
        Objects.equals(this.outputContent, printOutput.outputContent) &&
        Objects.equals(this.requiredSignatureFlag, printOutput.requiredSignatureFlag) &&
        Objects.equals(this.responseMode, printOutput.responseMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentQualifier, integratedPrintFlag, outputContent, requiredSignatureFlag, responseMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrintOutput {\n");
    sb.append("    documentQualifier: ").append(toIndentedString(documentQualifier)).append("\n");
    sb.append("    integratedPrintFlag: ").append(toIndentedString(integratedPrintFlag)).append("\n");
    sb.append("    outputContent: ").append(toIndentedString(outputContent)).append("\n");
    sb.append("    requiredSignatureFlag: ").append(toIndentedString(requiredSignatureFlag)).append("\n");
    sb.append("    responseMode: ").append(toIndentedString(responseMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DocumentQualifier");
    openapiFields.add("IntegratedPrintFlag");
    openapiFields.add("OutputContent");
    openapiFields.add("RequiredSignatureFlag");
    openapiFields.add("ResponseMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DocumentQualifier");
    openapiRequiredFields.add("OutputContent");
    openapiRequiredFields.add("ResponseMode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrintOutput
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrintOutput.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrintOutput is not found in the empty JSON string", PrintOutput.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrintOutput.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrintOutput` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PrintOutput.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `DocumentQualifier`
      DocumentQualifier.validateJsonElement(jsonObj.get("DocumentQualifier"));
      // validate the required field `OutputContent`
      OutputContent.validateJsonElement(jsonObj.get("OutputContent"));
      // validate the required field `ResponseMode`
      ResponseMode.validateJsonElement(jsonObj.get("ResponseMode"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrintOutput.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrintOutput' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrintOutput> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrintOutput.class));

       return (TypeAdapter<T>) new TypeAdapter<PrintOutput>() {
           @Override
           public void write(JsonWriter out, PrintOutput value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrintOutput read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrintOutput given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrintOutput
   * @throws IOException if the JSON string is invalid with respect to PrintOutput
   */
  public static PrintOutput fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrintOutput.class);
  }

  /**
   * Convert an instance of PrintOutput to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

