/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SaleTerminalData;
import org.openapitools.client.model.SaleToIssuerData;
import org.openapitools.client.model.TokenRequestedType;
import org.openapitools.client.model.TransactionIDType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data associated to the Sale System, with a particular value during the processing of the payment by the POI, including the cards acquisition. Data related to the Sale System.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SaleData {
  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_I_D = "CustomerOrderID";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_I_D)
  private String customerOrderID;

  /**
   * Gets or Sets customerOrderReq
   */
  @JsonAdapter(CustomerOrderReqEnum.Adapter.class)
  public enum CustomerOrderReqEnum {
    BOTH("Both"),
    
    CLOSED("Closed"),
    
    OPEN("Open");

    private String value;

    CustomerOrderReqEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CustomerOrderReqEnum fromValue(String value) {
      for (CustomerOrderReqEnum b : CustomerOrderReqEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CustomerOrderReqEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CustomerOrderReqEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CustomerOrderReqEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CustomerOrderReqEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CustomerOrderReqEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CUSTOMER_ORDER_REQ = "CustomerOrderReq";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ORDER_REQ)
  private List<CustomerOrderReqEnum> customerOrderReq = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPERATOR_I_D = "OperatorID";
  @SerializedName(SERIALIZED_NAME_OPERATOR_I_D)
  private String operatorID;

  public static final String SERIALIZED_NAME_OPERATOR_LANGUAGE = "OperatorLanguage";
  @SerializedName(SERIALIZED_NAME_OPERATOR_LANGUAGE)
  private String operatorLanguage;

  public static final String SERIALIZED_NAME_SALE_REFERENCE_I_D = "SaleReferenceID";
  @SerializedName(SERIALIZED_NAME_SALE_REFERENCE_I_D)
  private String saleReferenceID;

  public static final String SERIALIZED_NAME_SALE_TERMINAL_DATA = "SaleTerminalData";
  @SerializedName(SERIALIZED_NAME_SALE_TERMINAL_DATA)
  private SaleTerminalData saleTerminalData;

  public static final String SERIALIZED_NAME_SALE_TO_ACQUIRER_DATA = "SaleToAcquirerData";
  @SerializedName(SERIALIZED_NAME_SALE_TO_ACQUIRER_DATA)
  private String saleToAcquirerData;

  public static final String SERIALIZED_NAME_SALE_TO_ISSUER_DATA = "SaleToIssuerData";
  @SerializedName(SERIALIZED_NAME_SALE_TO_ISSUER_DATA)
  private SaleToIssuerData saleToIssuerData;

  public static final String SERIALIZED_NAME_SALE_TO_P_O_I_DATA = "SaleToPOIData";
  @SerializedName(SERIALIZED_NAME_SALE_TO_P_O_I_DATA)
  private String saleToPOIData;

  public static final String SERIALIZED_NAME_SALE_TRANSACTION_I_D = "SaleTransactionID";
  @SerializedName(SERIALIZED_NAME_SALE_TRANSACTION_I_D)
  private TransactionIDType saleTransactionID;

  public static final String SERIALIZED_NAME_SHIFT_NUMBER = "ShiftNumber";
  @SerializedName(SERIALIZED_NAME_SHIFT_NUMBER)
  private String shiftNumber;

  public static final String SERIALIZED_NAME_TOKEN_REQUESTED_TYPE = "TokenRequestedType";
  @SerializedName(SERIALIZED_NAME_TOKEN_REQUESTED_TYPE)
  private TokenRequestedType tokenRequestedType;

  public SaleData() {
  }

  public SaleData customerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
    return this;
  }

  /**
   * Additional and optional identification of a customer order.
   * @return customerOrderID
   */
  @javax.annotation.Nullable
  public String getCustomerOrderID() {
    return customerOrderID;
  }

  public void setCustomerOrderID(String customerOrderID) {
    this.customerOrderID = customerOrderID;
  }


  public SaleData customerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
    return this;
  }

  public SaleData addCustomerOrderReqItem(CustomerOrderReqEnum customerOrderReqItem) {
    if (this.customerOrderReq == null) {
      this.customerOrderReq = new ArrayList<>();
    }
    this.customerOrderReq.add(customerOrderReqItem);
    return this;
  }

  /**
   * Get customerOrderReq
   * @return customerOrderReq
   */
  @javax.annotation.Nullable
  public List<CustomerOrderReqEnum> getCustomerOrderReq() {
    return customerOrderReq;
  }

  public void setCustomerOrderReq(List<CustomerOrderReqEnum> customerOrderReq) {
    this.customerOrderReq = customerOrderReq;
  }


  public SaleData operatorID(String operatorID) {
    this.operatorID = operatorID;
    return this;
  }

  /**
   * Get operatorID
   * @return operatorID
   */
  @javax.annotation.Nullable
  public String getOperatorID() {
    return operatorID;
  }

  public void setOperatorID(String operatorID) {
    this.operatorID = operatorID;
  }


  public SaleData operatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
    return this;
  }

  /**
   * if different from the Login.
   * @return operatorLanguage
   */
  @javax.annotation.Nullable
  public String getOperatorLanguage() {
    return operatorLanguage;
  }

  public void setOperatorLanguage(String operatorLanguage) {
    this.operatorLanguage = operatorLanguage;
  }


  public SaleData saleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
    return this;
  }

  /**
   * If payment reservation.
   * @return saleReferenceID
   */
  @javax.annotation.Nullable
  public String getSaleReferenceID() {
    return saleReferenceID;
  }

  public void setSaleReferenceID(String saleReferenceID) {
    this.saleReferenceID = saleReferenceID;
  }


  public SaleData saleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
    return this;
  }

  /**
   * Get saleTerminalData
   * @return saleTerminalData
   */
  @javax.annotation.Nullable
  public SaleTerminalData getSaleTerminalData() {
    return saleTerminalData;
  }

  public void setSaleTerminalData(SaleTerminalData saleTerminalData) {
    this.saleTerminalData = saleTerminalData;
  }


  public SaleData saleToAcquirerData(String saleToAcquirerData) {
    this.saleToAcquirerData = saleToAcquirerData;
    return this;
  }

  /**
   * Send to the Acquirer if present.
   * @return saleToAcquirerData
   */
  @javax.annotation.Nullable
  public String getSaleToAcquirerData() {
    return saleToAcquirerData;
  }

  public void setSaleToAcquirerData(String saleToAcquirerData) {
    this.saleToAcquirerData = saleToAcquirerData;
  }


  public SaleData saleToIssuerData(SaleToIssuerData saleToIssuerData) {
    this.saleToIssuerData = saleToIssuerData;
    return this;
  }

  /**
   * Get saleToIssuerData
   * @return saleToIssuerData
   */
  @javax.annotation.Nullable
  public SaleToIssuerData getSaleToIssuerData() {
    return saleToIssuerData;
  }

  public void setSaleToIssuerData(SaleToIssuerData saleToIssuerData) {
    this.saleToIssuerData = saleToIssuerData;
  }


  public SaleData saleToPOIData(String saleToPOIData) {
    this.saleToPOIData = saleToPOIData;
    return this;
  }

  /**
   * Stored with the transaction.
   * @return saleToPOIData
   */
  @javax.annotation.Nullable
  public String getSaleToPOIData() {
    return saleToPOIData;
  }

  public void setSaleToPOIData(String saleToPOIData) {
    this.saleToPOIData = saleToPOIData;
  }


  public SaleData saleTransactionID(TransactionIDType saleTransactionID) {
    this.saleTransactionID = saleTransactionID;
    return this;
  }

  /**
   * Get saleTransactionID
   * @return saleTransactionID
   */
  @javax.annotation.Nonnull
  public TransactionIDType getSaleTransactionID() {
    return saleTransactionID;
  }

  public void setSaleTransactionID(TransactionIDType saleTransactionID) {
    this.saleTransactionID = saleTransactionID;
  }


  public SaleData shiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
    return this;
  }

  /**
   * if different from the Login and  see Login .SaleData.
   * @return shiftNumber
   */
  @javax.annotation.Nullable
  public String getShiftNumber() {
    return shiftNumber;
  }

  public void setShiftNumber(String shiftNumber) {
    this.shiftNumber = shiftNumber;
  }


  public SaleData tokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
    return this;
  }

  /**
   * Get tokenRequestedType
   * @return tokenRequestedType
   */
  @javax.annotation.Nullable
  public TokenRequestedType getTokenRequestedType() {
    return tokenRequestedType;
  }

  public void setTokenRequestedType(TokenRequestedType tokenRequestedType) {
    this.tokenRequestedType = tokenRequestedType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SaleData saleData = (SaleData) o;
    return Objects.equals(this.customerOrderID, saleData.customerOrderID) &&
        Objects.equals(this.customerOrderReq, saleData.customerOrderReq) &&
        Objects.equals(this.operatorID, saleData.operatorID) &&
        Objects.equals(this.operatorLanguage, saleData.operatorLanguage) &&
        Objects.equals(this.saleReferenceID, saleData.saleReferenceID) &&
        Objects.equals(this.saleTerminalData, saleData.saleTerminalData) &&
        Objects.equals(this.saleToAcquirerData, saleData.saleToAcquirerData) &&
        Objects.equals(this.saleToIssuerData, saleData.saleToIssuerData) &&
        Objects.equals(this.saleToPOIData, saleData.saleToPOIData) &&
        Objects.equals(this.saleTransactionID, saleData.saleTransactionID) &&
        Objects.equals(this.shiftNumber, saleData.shiftNumber) &&
        Objects.equals(this.tokenRequestedType, saleData.tokenRequestedType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerOrderID, customerOrderReq, operatorID, operatorLanguage, saleReferenceID, saleTerminalData, saleToAcquirerData, saleToIssuerData, saleToPOIData, saleTransactionID, shiftNumber, tokenRequestedType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SaleData {\n");
    sb.append("    customerOrderID: ").append(toIndentedString(customerOrderID)).append("\n");
    sb.append("    customerOrderReq: ").append(toIndentedString(customerOrderReq)).append("\n");
    sb.append("    operatorID: ").append(toIndentedString(operatorID)).append("\n");
    sb.append("    operatorLanguage: ").append(toIndentedString(operatorLanguage)).append("\n");
    sb.append("    saleReferenceID: ").append(toIndentedString(saleReferenceID)).append("\n");
    sb.append("    saleTerminalData: ").append(toIndentedString(saleTerminalData)).append("\n");
    sb.append("    saleToAcquirerData: ").append(toIndentedString(saleToAcquirerData)).append("\n");
    sb.append("    saleToIssuerData: ").append(toIndentedString(saleToIssuerData)).append("\n");
    sb.append("    saleToPOIData: ").append(toIndentedString(saleToPOIData)).append("\n");
    sb.append("    saleTransactionID: ").append(toIndentedString(saleTransactionID)).append("\n");
    sb.append("    shiftNumber: ").append(toIndentedString(shiftNumber)).append("\n");
    sb.append("    tokenRequestedType: ").append(toIndentedString(tokenRequestedType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CustomerOrderID");
    openapiFields.add("CustomerOrderReq");
    openapiFields.add("OperatorID");
    openapiFields.add("OperatorLanguage");
    openapiFields.add("SaleReferenceID");
    openapiFields.add("SaleTerminalData");
    openapiFields.add("SaleToAcquirerData");
    openapiFields.add("SaleToIssuerData");
    openapiFields.add("SaleToPOIData");
    openapiFields.add("SaleTransactionID");
    openapiFields.add("ShiftNumber");
    openapiFields.add("TokenRequestedType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("SaleTransactionID");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SaleData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SaleData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SaleData is not found in the empty JSON string", SaleData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SaleData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SaleData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SaleData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CustomerOrderID") != null && !jsonObj.get("CustomerOrderID").isJsonNull()) && !jsonObj.get("CustomerOrderID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomerOrderID").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CustomerOrderReq") != null && !jsonObj.get("CustomerOrderReq").isJsonNull() && !jsonObj.get("CustomerOrderReq").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomerOrderReq` to be an array in the JSON string but got `%s`", jsonObj.get("CustomerOrderReq").toString()));
      }
      if ((jsonObj.get("OperatorID") != null && !jsonObj.get("OperatorID").isJsonNull()) && !jsonObj.get("OperatorID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorID").toString()));
      }
      if ((jsonObj.get("OperatorLanguage") != null && !jsonObj.get("OperatorLanguage").isJsonNull()) && !jsonObj.get("OperatorLanguage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OperatorLanguage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OperatorLanguage").toString()));
      }
      if ((jsonObj.get("SaleReferenceID") != null && !jsonObj.get("SaleReferenceID").isJsonNull()) && !jsonObj.get("SaleReferenceID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleReferenceID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleReferenceID").toString()));
      }
      // validate the optional field `SaleTerminalData`
      if (jsonObj.get("SaleTerminalData") != null && !jsonObj.get("SaleTerminalData").isJsonNull()) {
        SaleTerminalData.validateJsonElement(jsonObj.get("SaleTerminalData"));
      }
      if ((jsonObj.get("SaleToAcquirerData") != null && !jsonObj.get("SaleToAcquirerData").isJsonNull()) && !jsonObj.get("SaleToAcquirerData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleToAcquirerData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleToAcquirerData").toString()));
      }
      // validate the optional field `SaleToIssuerData`
      if (jsonObj.get("SaleToIssuerData") != null && !jsonObj.get("SaleToIssuerData").isJsonNull()) {
        SaleToIssuerData.validateJsonElement(jsonObj.get("SaleToIssuerData"));
      }
      if ((jsonObj.get("SaleToPOIData") != null && !jsonObj.get("SaleToPOIData").isJsonNull()) && !jsonObj.get("SaleToPOIData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SaleToPOIData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SaleToPOIData").toString()));
      }
      // validate the required field `SaleTransactionID`
      TransactionIDType.validateJsonElement(jsonObj.get("SaleTransactionID"));
      if ((jsonObj.get("ShiftNumber") != null && !jsonObj.get("ShiftNumber").isJsonNull()) && !jsonObj.get("ShiftNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ShiftNumber").toString()));
      }
      // validate the optional field `TokenRequestedType`
      if (jsonObj.get("TokenRequestedType") != null && !jsonObj.get("TokenRequestedType").isJsonNull()) {
        TokenRequestedType.validateJsonElement(jsonObj.get("TokenRequestedType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SaleData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SaleData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SaleData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SaleData.class));

       return (TypeAdapter<T>) new TypeAdapter<SaleData>() {
           @Override
           public void write(JsonWriter out, SaleData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SaleData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SaleData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SaleData
   * @throws IOException if the JSON string is invalid with respect to SaleData
   */
  public static SaleData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SaleData.class);
  }

  /**
   * Convert an instance of SaleData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

