/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PINFormat;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CardHolderPIN
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CardHolderPIN {
  public static final String SERIALIZED_NAME_ADDITIONAL_INPUT = "AdditionalInput";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_INPUT)
  private String additionalInput;

  public static final String SERIALIZED_NAME_ENCR_P_I_N_BLOCK = "EncrPINBlock";
  @SerializedName(SERIALIZED_NAME_ENCR_P_I_N_BLOCK)
  private String encrPINBlock;

  public static final String SERIALIZED_NAME_PI_N_FORMAT = "PINFormat";
  @SerializedName(SERIALIZED_NAME_PI_N_FORMAT)
  private PINFormat piNFormat;

  public CardHolderPIN() {
  }

  public CardHolderPIN additionalInput(String additionalInput) {
    this.additionalInput = additionalInput;
    return this;
  }

  /**
   * Get additionalInput
   * @return additionalInput
   */
  @javax.annotation.Nullable
  public String getAdditionalInput() {
    return additionalInput;
  }

  public void setAdditionalInput(String additionalInput) {
    this.additionalInput = additionalInput;
  }


  public CardHolderPIN encrPINBlock(String encrPINBlock) {
    this.encrPINBlock = encrPINBlock;
    return this;
  }

  /**
   * Get encrPINBlock
   * @return encrPINBlock
   */
  @javax.annotation.Nonnull
  public String getEncrPINBlock() {
    return encrPINBlock;
  }

  public void setEncrPINBlock(String encrPINBlock) {
    this.encrPINBlock = encrPINBlock;
  }


  public CardHolderPIN piNFormat(PINFormat piNFormat) {
    this.piNFormat = piNFormat;
    return this;
  }

  /**
   * Get piNFormat
   * @return piNFormat
   */
  @javax.annotation.Nonnull
  public PINFormat getPiNFormat() {
    return piNFormat;
  }

  public void setPiNFormat(PINFormat piNFormat) {
    this.piNFormat = piNFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CardHolderPIN cardHolderPIN = (CardHolderPIN) o;
    return Objects.equals(this.additionalInput, cardHolderPIN.additionalInput) &&
        Objects.equals(this.encrPINBlock, cardHolderPIN.encrPINBlock) &&
        Objects.equals(this.piNFormat, cardHolderPIN.piNFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalInput, encrPINBlock, piNFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CardHolderPIN {\n");
    sb.append("    additionalInput: ").append(toIndentedString(additionalInput)).append("\n");
    sb.append("    encrPINBlock: ").append(toIndentedString(encrPINBlock)).append("\n");
    sb.append("    piNFormat: ").append(toIndentedString(piNFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdditionalInput");
    openapiFields.add("EncrPINBlock");
    openapiFields.add("PINFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("EncrPINBlock");
    openapiRequiredFields.add("PINFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CardHolderPIN
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CardHolderPIN.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CardHolderPIN is not found in the empty JSON string", CardHolderPIN.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CardHolderPIN.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CardHolderPIN` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CardHolderPIN.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AdditionalInput") != null && !jsonObj.get("AdditionalInput").isJsonNull()) && !jsonObj.get("AdditionalInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdditionalInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AdditionalInput").toString()));
      }
      if (!jsonObj.get("EncrPINBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EncrPINBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EncrPINBlock").toString()));
      }
      // validate the required field `PINFormat`
      PINFormat.validateJsonElement(jsonObj.get("PINFormat"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CardHolderPIN.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CardHolderPIN' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CardHolderPIN> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CardHolderPIN.class));

       return (TypeAdapter<T>) new TypeAdapter<CardHolderPIN>() {
           @Override
           public void write(JsonWriter out, CardHolderPIN value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CardHolderPIN read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CardHolderPIN given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CardHolderPIN
   * @throws IOException if the JSON string is invalid with respect to CardHolderPIN
   */
  public static CardHolderPIN fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CardHolderPIN.class);
  }

  /**
   * Convert an instance of CardHolderPIN to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

