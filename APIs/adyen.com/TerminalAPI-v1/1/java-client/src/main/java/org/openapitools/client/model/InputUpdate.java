/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MenuEntry;
import org.openapitools.client.model.MessageReference;
import org.openapitools.client.model.OutputContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Definition: Content of the Input Update message. : It conveys     update of the display of an Input request in progress.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputUpdate {
  public static final String SERIALIZED_NAME_MAX_DECIMAL_LENGTH = "MaxDecimalLength";
  @SerializedName(SERIALIZED_NAME_MAX_DECIMAL_LENGTH)
  private Integer maxDecimalLength;

  public static final String SERIALIZED_NAME_MAX_LENGTH = "MaxLength";
  @SerializedName(SERIALIZED_NAME_MAX_LENGTH)
  private Integer maxLength;

  public static final String SERIALIZED_NAME_MENU_ENTRY = "MenuEntry";
  @SerializedName(SERIALIZED_NAME_MENU_ENTRY)
  private List<MenuEntry> menuEntry = new ArrayList<>();

  public static final String SERIALIZED_NAME_MESSAGE_REFERENCE = "MessageReference";
  @SerializedName(SERIALIZED_NAME_MESSAGE_REFERENCE)
  private MessageReference messageReference;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "MinLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_OUTPUT_CONTENT = "OutputContent";
  @SerializedName(SERIALIZED_NAME_OUTPUT_CONTENT)
  private OutputContent outputContent;

  public static final String SERIALIZED_NAME_OUTPUT_SIGNATURE = "OutputSignature";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SIGNATURE)
  private String outputSignature;

  public InputUpdate() {
  }

  public InputUpdate maxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
    return this;
  }

  /**
   * Get maxDecimalLength
   * @return maxDecimalLength
   */
  @javax.annotation.Nullable
  public Integer getMaxDecimalLength() {
    return maxDecimalLength;
  }

  public void setMaxDecimalLength(Integer maxDecimalLength) {
    this.maxDecimalLength = maxDecimalLength;
  }


  public InputUpdate maxLength(Integer maxLength) {
    this.maxLength = maxLength;
    return this;
  }

  /**
   * Get maxLength
   * @return maxLength
   */
  @javax.annotation.Nullable
  public Integer getMaxLength() {
    return maxLength;
  }

  public void setMaxLength(Integer maxLength) {
    this.maxLength = maxLength;
  }


  public InputUpdate menuEntry(List<MenuEntry> menuEntry) {
    this.menuEntry = menuEntry;
    return this;
  }

  public InputUpdate addMenuEntryItem(MenuEntry menuEntryItem) {
    if (this.menuEntry == null) {
      this.menuEntry = new ArrayList<>();
    }
    this.menuEntry.add(menuEntryItem);
    return this;
  }

  /**
   * Get menuEntry
   * @return menuEntry
   */
  @javax.annotation.Nullable
  public List<MenuEntry> getMenuEntry() {
    return menuEntry;
  }

  public void setMenuEntry(List<MenuEntry> menuEntry) {
    this.menuEntry = menuEntry;
  }


  public InputUpdate messageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
    return this;
  }

  /**
   * Get messageReference
   * @return messageReference
   */
  @javax.annotation.Nonnull
  public MessageReference getMessageReference() {
    return messageReference;
  }

  public void setMessageReference(MessageReference messageReference) {
    this.messageReference = messageReference;
  }


  public InputUpdate minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Get minLength
   * @return minLength
   */
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public InputUpdate outputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
    return this;
  }

  /**
   * Get outputContent
   * @return outputContent
   */
  @javax.annotation.Nonnull
  public OutputContent getOutputContent() {
    return outputContent;
  }

  public void setOutputContent(OutputContent outputContent) {
    this.outputContent = outputContent;
  }


  public InputUpdate outputSignature(String outputSignature) {
    this.outputSignature = outputSignature;
    return this;
  }

  /**
   * Get outputSignature
   * @return outputSignature
   */
  @javax.annotation.Nullable
  public String getOutputSignature() {
    return outputSignature;
  }

  public void setOutputSignature(String outputSignature) {
    this.outputSignature = outputSignature;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputUpdate inputUpdate = (InputUpdate) o;
    return Objects.equals(this.maxDecimalLength, inputUpdate.maxDecimalLength) &&
        Objects.equals(this.maxLength, inputUpdate.maxLength) &&
        Objects.equals(this.menuEntry, inputUpdate.menuEntry) &&
        Objects.equals(this.messageReference, inputUpdate.messageReference) &&
        Objects.equals(this.minLength, inputUpdate.minLength) &&
        Objects.equals(this.outputContent, inputUpdate.outputContent) &&
        Objects.equals(this.outputSignature, inputUpdate.outputSignature);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxDecimalLength, maxLength, menuEntry, messageReference, minLength, outputContent, outputSignature);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputUpdate {\n");
    sb.append("    maxDecimalLength: ").append(toIndentedString(maxDecimalLength)).append("\n");
    sb.append("    maxLength: ").append(toIndentedString(maxLength)).append("\n");
    sb.append("    menuEntry: ").append(toIndentedString(menuEntry)).append("\n");
    sb.append("    messageReference: ").append(toIndentedString(messageReference)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    outputContent: ").append(toIndentedString(outputContent)).append("\n");
    sb.append("    outputSignature: ").append(toIndentedString(outputSignature)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("MaxDecimalLength");
    openapiFields.add("MaxLength");
    openapiFields.add("MenuEntry");
    openapiFields.add("MessageReference");
    openapiFields.add("MinLength");
    openapiFields.add("OutputContent");
    openapiFields.add("OutputSignature");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("MessageReference");
    openapiRequiredFields.add("OutputContent");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputUpdate
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputUpdate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputUpdate is not found in the empty JSON string", InputUpdate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputUpdate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputUpdate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputUpdate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("MenuEntry") != null && !jsonObj.get("MenuEntry").isJsonNull()) {
        JsonArray jsonArraymenuEntry = jsonObj.getAsJsonArray("MenuEntry");
        if (jsonArraymenuEntry != null) {
          // ensure the json data is an array
          if (!jsonObj.get("MenuEntry").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `MenuEntry` to be an array in the JSON string but got `%s`", jsonObj.get("MenuEntry").toString()));
          }

          // validate the optional field `MenuEntry` (array)
          for (int i = 0; i < jsonArraymenuEntry.size(); i++) {
            MenuEntry.validateJsonElement(jsonArraymenuEntry.get(i));
          };
        }
      }
      // validate the required field `MessageReference`
      MessageReference.validateJsonElement(jsonObj.get("MessageReference"));
      // validate the required field `OutputContent`
      OutputContent.validateJsonElement(jsonObj.get("OutputContent"));
      if ((jsonObj.get("OutputSignature") != null && !jsonObj.get("OutputSignature").isJsonNull()) && !jsonObj.get("OutputSignature").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OutputSignature` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OutputSignature").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputUpdate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputUpdate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputUpdate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputUpdate.class));

       return (TypeAdapter<T>) new TypeAdapter<InputUpdate>() {
           @Override
           public void write(JsonWriter out, InputUpdate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputUpdate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputUpdate given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputUpdate
   * @throws IOException if the JSON string is invalid with respect to InputUpdate
   */
  public static InputUpdate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputUpdate.class);
  }

  /**
   * Convert an instance of InputUpdate to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

