/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TotalFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetTotalsRequest {
  /**
   * Gets or Sets totalDetails
   */
  @JsonAdapter(TotalDetailsEnum.Adapter.class)
  public enum TotalDetailsEnum {
    OPERATOR_ID("OperatorID"),
    
    POIID("POIID"),
    
    SALE_ID("SaleID"),
    
    SHIFT_NUMBER("ShiftNumber"),
    
    TOTALS_GROUP_ID("TotalsGroupID");

    private String value;

    TotalDetailsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TotalDetailsEnum fromValue(String value) {
      for (TotalDetailsEnum b : TotalDetailsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TotalDetailsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TotalDetailsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TotalDetailsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TotalDetailsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TotalDetailsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TOTAL_DETAILS = "TotalDetails";
  @SerializedName(SERIALIZED_NAME_TOTAL_DETAILS)
  private List<TotalDetailsEnum> totalDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_FILTER = "TotalFilter";
  @SerializedName(SERIALIZED_NAME_TOTAL_FILTER)
  private TotalFilter totalFilter;

  public GetTotalsRequest() {
  }

  public GetTotalsRequest totalDetails(List<TotalDetailsEnum> totalDetails) {
    this.totalDetails = totalDetails;
    return this;
  }

  public GetTotalsRequest addTotalDetailsItem(TotalDetailsEnum totalDetailsItem) {
    if (this.totalDetails == null) {
      this.totalDetails = new ArrayList<>();
    }
    this.totalDetails.add(totalDetailsItem);
    return this;
  }

  /**
   * Get totalDetails
   * @return totalDetails
   */
  @javax.annotation.Nullable
  public List<TotalDetailsEnum> getTotalDetails() {
    return totalDetails;
  }

  public void setTotalDetails(List<TotalDetailsEnum> totalDetails) {
    this.totalDetails = totalDetails;
  }


  public GetTotalsRequest totalFilter(TotalFilter totalFilter) {
    this.totalFilter = totalFilter;
    return this;
  }

  /**
   * Get totalFilter
   * @return totalFilter
   */
  @javax.annotation.Nullable
  public TotalFilter getTotalFilter() {
    return totalFilter;
  }

  public void setTotalFilter(TotalFilter totalFilter) {
    this.totalFilter = totalFilter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetTotalsRequest getTotalsRequest = (GetTotalsRequest) o;
    return Objects.equals(this.totalDetails, getTotalsRequest.totalDetails) &&
        Objects.equals(this.totalFilter, getTotalsRequest.totalFilter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalDetails, totalFilter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetTotalsRequest {\n");
    sb.append("    totalDetails: ").append(toIndentedString(totalDetails)).append("\n");
    sb.append("    totalFilter: ").append(toIndentedString(totalFilter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TotalDetails");
    openapiFields.add("TotalFilter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetTotalsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetTotalsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetTotalsRequest is not found in the empty JSON string", GetTotalsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetTotalsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetTotalsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("TotalDetails") != null && !jsonObj.get("TotalDetails").isJsonNull() && !jsonObj.get("TotalDetails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `TotalDetails` to be an array in the JSON string but got `%s`", jsonObj.get("TotalDetails").toString()));
      }
      // validate the optional field `TotalFilter`
      if (jsonObj.get("TotalFilter") != null && !jsonObj.get("TotalFilter").isJsonNull()) {
        TotalFilter.validateJsonElement(jsonObj.get("TotalFilter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetTotalsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetTotalsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetTotalsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetTotalsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GetTotalsRequest>() {
           @Override
           public void write(JsonWriter out, GetTotalsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetTotalsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetTotalsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetTotalsRequest
   * @throws IOException if the JSON string is invalid with respect to GetTotalsRequest
   */
  public static GetTotalsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetTotalsRequest.class);
  }

  /**
   * Convert an instance of GetTotalsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

