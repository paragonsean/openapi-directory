/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.OriginalPOITransaction;
import org.openapitools.client.model.StoredValueAccountID;
import org.openapitools.client.model.StoredValueTransactionType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * It contains: - the identification of the stored value accounts or the stored value cards, if provided by the Sale System, and - the associated products sold by the Sale System.. Data related to the stored value card.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoredValueData {
  public static final String SERIALIZED_NAME_CURRENCY = "Currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_EAN_UPC = "EanUpc";
  @SerializedName(SERIALIZED_NAME_EAN_UPC)
  private Integer eanUpc;

  public static final String SERIALIZED_NAME_ITEM_AMOUNT = "ItemAmount";
  @SerializedName(SERIALIZED_NAME_ITEM_AMOUNT)
  private BigDecimal itemAmount;

  public static final String SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION = "OriginalPOITransaction";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION)
  private OriginalPOITransaction originalPOITransaction;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "ProductCode";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private Integer productCode;

  public static final String SERIALIZED_NAME_STORED_VALUE_ACCOUNT_I_D = "StoredValueAccountID";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_ACCOUNT_I_D)
  private StoredValueAccountID storedValueAccountID;

  public static final String SERIALIZED_NAME_STORED_VALUE_PROVIDER = "StoredValueProvider";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_PROVIDER)
  private String storedValueProvider;

  public static final String SERIALIZED_NAME_STORED_VALUE_TRANSACTION_TYPE = "StoredValueTransactionType";
  @SerializedName(SERIALIZED_NAME_STORED_VALUE_TRANSACTION_TYPE)
  private StoredValueTransactionType storedValueTransactionType;

  public StoredValueData() {
  }

  public StoredValueData currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * Currency of a monetary amount.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public StoredValueData eanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
    return this;
  }

  /**
   * Standard product code of item purchased with the transaction.
   * @return eanUpc
   */
  @javax.annotation.Nullable
  public Integer getEanUpc() {
    return eanUpc;
  }

  public void setEanUpc(Integer eanUpc) {
    this.eanUpc = eanUpc;
  }


  public StoredValueData itemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
    return this;
  }

  /**
   * Total amount of the item line.
   * minimum: 0
   * maximum: 99999999.999999
   * @return itemAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getItemAmount() {
    return itemAmount;
  }

  public void setItemAmount(BigDecimal itemAmount) {
    this.itemAmount = itemAmount;
  }


  public StoredValueData originalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
    return this;
  }

  /**
   * Get originalPOITransaction
   * @return originalPOITransaction
   */
  @javax.annotation.Nullable
  public OriginalPOITransaction getOriginalPOITransaction() {
    return originalPOITransaction;
  }

  public void setOriginalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
  }


  public StoredValueData productCode(Integer productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Product code of item purchased with the transaction.
   * minimum: 1
   * maximum: 20
   * @return productCode
   */
  @javax.annotation.Nullable
  public Integer getProductCode() {
    return productCode;
  }

  public void setProductCode(Integer productCode) {
    this.productCode = productCode;
  }


  public StoredValueData storedValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
    return this;
  }

  /**
   * Get storedValueAccountID
   * @return storedValueAccountID
   */
  @javax.annotation.Nullable
  public StoredValueAccountID getStoredValueAccountID() {
    return storedValueAccountID;
  }

  public void setStoredValueAccountID(StoredValueAccountID storedValueAccountID) {
    this.storedValueAccountID = storedValueAccountID;
  }


  public StoredValueData storedValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
    return this;
  }

  /**
   * If more than one provider to manage on the POI, and StoredValueAccountID absent.
   * @return storedValueProvider
   */
  @javax.annotation.Nullable
  public String getStoredValueProvider() {
    return storedValueProvider;
  }

  public void setStoredValueProvider(String storedValueProvider) {
    this.storedValueProvider = storedValueProvider;
  }


  public StoredValueData storedValueTransactionType(StoredValueTransactionType storedValueTransactionType) {
    this.storedValueTransactionType = storedValueTransactionType;
    return this;
  }

  /**
   * Get storedValueTransactionType
   * @return storedValueTransactionType
   */
  @javax.annotation.Nonnull
  public StoredValueTransactionType getStoredValueTransactionType() {
    return storedValueTransactionType;
  }

  public void setStoredValueTransactionType(StoredValueTransactionType storedValueTransactionType) {
    this.storedValueTransactionType = storedValueTransactionType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoredValueData storedValueData = (StoredValueData) o;
    return Objects.equals(this.currency, storedValueData.currency) &&
        Objects.equals(this.eanUpc, storedValueData.eanUpc) &&
        Objects.equals(this.itemAmount, storedValueData.itemAmount) &&
        Objects.equals(this.originalPOITransaction, storedValueData.originalPOITransaction) &&
        Objects.equals(this.productCode, storedValueData.productCode) &&
        Objects.equals(this.storedValueAccountID, storedValueData.storedValueAccountID) &&
        Objects.equals(this.storedValueProvider, storedValueData.storedValueProvider) &&
        Objects.equals(this.storedValueTransactionType, storedValueData.storedValueTransactionType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, eanUpc, itemAmount, originalPOITransaction, productCode, storedValueAccountID, storedValueProvider, storedValueTransactionType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoredValueData {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    eanUpc: ").append(toIndentedString(eanUpc)).append("\n");
    sb.append("    itemAmount: ").append(toIndentedString(itemAmount)).append("\n");
    sb.append("    originalPOITransaction: ").append(toIndentedString(originalPOITransaction)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    storedValueAccountID: ").append(toIndentedString(storedValueAccountID)).append("\n");
    sb.append("    storedValueProvider: ").append(toIndentedString(storedValueProvider)).append("\n");
    sb.append("    storedValueTransactionType: ").append(toIndentedString(storedValueTransactionType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Currency");
    openapiFields.add("EanUpc");
    openapiFields.add("ItemAmount");
    openapiFields.add("OriginalPOITransaction");
    openapiFields.add("ProductCode");
    openapiFields.add("StoredValueAccountID");
    openapiFields.add("StoredValueProvider");
    openapiFields.add("StoredValueTransactionType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("StoredValueTransactionType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoredValueData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoredValueData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoredValueData is not found in the empty JSON string", StoredValueData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoredValueData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoredValueData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoredValueData.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Currency") != null && !jsonObj.get("Currency").isJsonNull()) && !jsonObj.get("Currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Currency").toString()));
      }
      // validate the optional field `OriginalPOITransaction`
      if (jsonObj.get("OriginalPOITransaction") != null && !jsonObj.get("OriginalPOITransaction").isJsonNull()) {
        OriginalPOITransaction.validateJsonElement(jsonObj.get("OriginalPOITransaction"));
      }
      // validate the optional field `StoredValueAccountID`
      if (jsonObj.get("StoredValueAccountID") != null && !jsonObj.get("StoredValueAccountID").isJsonNull()) {
        StoredValueAccountID.validateJsonElement(jsonObj.get("StoredValueAccountID"));
      }
      if ((jsonObj.get("StoredValueProvider") != null && !jsonObj.get("StoredValueProvider").isJsonNull()) && !jsonObj.get("StoredValueProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StoredValueProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StoredValueProvider").toString()));
      }
      // validate the required field `StoredValueTransactionType`
      StoredValueTransactionType.validateJsonElement(jsonObj.get("StoredValueTransactionType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoredValueData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoredValueData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoredValueData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoredValueData.class));

       return (TypeAdapter<T>) new TypeAdapter<StoredValueData>() {
           @Override
           public void write(JsonWriter out, StoredValueData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoredValueData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoredValueData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoredValueData
   * @throws IOException if the JSON string is invalid with respect to StoredValueData
   */
  public static StoredValueData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoredValueData.class);
  }

  /**
   * Convert an instance of StoredValueData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

