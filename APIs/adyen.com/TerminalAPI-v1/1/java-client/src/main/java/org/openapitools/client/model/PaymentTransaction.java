/*
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AmountsReq;
import org.openapitools.client.model.OriginalPOITransaction;
import org.openapitools.client.model.SaleItem;
import org.openapitools.client.model.TransactionConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PaymentTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:13:30.341990-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PaymentTransaction {
  public static final String SERIALIZED_NAME_AMOUNTS_REQ = "AmountsReq";
  @SerializedName(SERIALIZED_NAME_AMOUNTS_REQ)
  private AmountsReq amountsReq;

  public static final String SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION = "OriginalPOITransaction";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_P_O_I_TRANSACTION)
  private OriginalPOITransaction originalPOITransaction;

  public static final String SERIALIZED_NAME_SALE_ITEM = "SaleItem";
  @SerializedName(SERIALIZED_NAME_SALE_ITEM)
  private List<SaleItem> saleItem = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION_CONDITIONS = "TransactionConditions";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_CONDITIONS)
  private TransactionConditions transactionConditions;

  public PaymentTransaction() {
  }

  public PaymentTransaction amountsReq(AmountsReq amountsReq) {
    this.amountsReq = amountsReq;
    return this;
  }

  /**
   * Get amountsReq
   * @return amountsReq
   */
  @javax.annotation.Nonnull
  public AmountsReq getAmountsReq() {
    return amountsReq;
  }

  public void setAmountsReq(AmountsReq amountsReq) {
    this.amountsReq = amountsReq;
  }


  public PaymentTransaction originalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
    return this;
  }

  /**
   * Get originalPOITransaction
   * @return originalPOITransaction
   */
  @javax.annotation.Nullable
  public OriginalPOITransaction getOriginalPOITransaction() {
    return originalPOITransaction;
  }

  public void setOriginalPOITransaction(OriginalPOITransaction originalPOITransaction) {
    this.originalPOITransaction = originalPOITransaction;
  }


  public PaymentTransaction saleItem(List<SaleItem> saleItem) {
    this.saleItem = saleItem;
    return this;
  }

  public PaymentTransaction addSaleItemItem(SaleItem saleItemItem) {
    if (this.saleItem == null) {
      this.saleItem = new ArrayList<>();
    }
    this.saleItem.add(saleItemItem);
    return this;
  }

  /**
   * Get saleItem
   * @return saleItem
   */
  @javax.annotation.Nullable
  public List<SaleItem> getSaleItem() {
    return saleItem;
  }

  public void setSaleItem(List<SaleItem> saleItem) {
    this.saleItem = saleItem;
  }


  public PaymentTransaction transactionConditions(TransactionConditions transactionConditions) {
    this.transactionConditions = transactionConditions;
    return this;
  }

  /**
   * Get transactionConditions
   * @return transactionConditions
   */
  @javax.annotation.Nullable
  public TransactionConditions getTransactionConditions() {
    return transactionConditions;
  }

  public void setTransactionConditions(TransactionConditions transactionConditions) {
    this.transactionConditions = transactionConditions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentTransaction paymentTransaction = (PaymentTransaction) o;
    return Objects.equals(this.amountsReq, paymentTransaction.amountsReq) &&
        Objects.equals(this.originalPOITransaction, paymentTransaction.originalPOITransaction) &&
        Objects.equals(this.saleItem, paymentTransaction.saleItem) &&
        Objects.equals(this.transactionConditions, paymentTransaction.transactionConditions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountsReq, originalPOITransaction, saleItem, transactionConditions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentTransaction {\n");
    sb.append("    amountsReq: ").append(toIndentedString(amountsReq)).append("\n");
    sb.append("    originalPOITransaction: ").append(toIndentedString(originalPOITransaction)).append("\n");
    sb.append("    saleItem: ").append(toIndentedString(saleItem)).append("\n");
    sb.append("    transactionConditions: ").append(toIndentedString(transactionConditions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AmountsReq");
    openapiFields.add("OriginalPOITransaction");
    openapiFields.add("SaleItem");
    openapiFields.add("TransactionConditions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("AmountsReq");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PaymentTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PaymentTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PaymentTransaction is not found in the empty JSON string", PaymentTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PaymentTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PaymentTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PaymentTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `AmountsReq`
      AmountsReq.validateJsonElement(jsonObj.get("AmountsReq"));
      // validate the optional field `OriginalPOITransaction`
      if (jsonObj.get("OriginalPOITransaction") != null && !jsonObj.get("OriginalPOITransaction").isJsonNull()) {
        OriginalPOITransaction.validateJsonElement(jsonObj.get("OriginalPOITransaction"));
      }
      if (jsonObj.get("SaleItem") != null && !jsonObj.get("SaleItem").isJsonNull()) {
        JsonArray jsonArraysaleItem = jsonObj.getAsJsonArray("SaleItem");
        if (jsonArraysaleItem != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SaleItem").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SaleItem` to be an array in the JSON string but got `%s`", jsonObj.get("SaleItem").toString()));
          }

          // validate the optional field `SaleItem` (array)
          for (int i = 0; i < jsonArraysaleItem.size(); i++) {
            SaleItem.validateJsonElement(jsonArraysaleItem.get(i));
          };
        }
      }
      // validate the optional field `TransactionConditions`
      if (jsonObj.get("TransactionConditions") != null && !jsonObj.get("TransactionConditions").isJsonNull()) {
        TransactionConditions.validateJsonElement(jsonObj.get("TransactionConditions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PaymentTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PaymentTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PaymentTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PaymentTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<PaymentTransaction>() {
           @Override
           public void write(JsonWriter out, PaymentTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PaymentTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PaymentTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PaymentTransaction
   * @throws IOException if the JSON string is invalid with respect to PaymentTransaction
   */
  public static PaymentTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PaymentTransaction.class);
  }

  /**
   * Convert an instance of PaymentTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

