/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReversalRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReversalRequest::OAIReversalRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReversalRequest::OAIReversalRequest() {
    this->initializeModel();
}

OAIReversalRequest::~OAIReversalRequest() {}

void OAIReversalRequest::initializeModel() {

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_original_poi_transaction_isSet = false;
    m_original_poi_transaction_isValid = false;

    m_reversal_reason_isSet = false;
    m_reversal_reason_isValid = false;

    m_reversed_amount_isSet = false;
    m_reversed_amount_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;
}

void OAIReversalRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReversalRequest::fromJsonObject(QJsonObject json) {

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("CustomerOrder")]);
    m_customer_order_isSet = !json[QString("CustomerOrder")].isNull() && m_customer_order_isValid;

    m_original_poi_transaction_isValid = ::OpenAPI::fromJsonValue(m_original_poi_transaction, json[QString("OriginalPOITransaction")]);
    m_original_poi_transaction_isSet = !json[QString("OriginalPOITransaction")].isNull() && m_original_poi_transaction_isValid;

    m_reversal_reason_isValid = ::OpenAPI::fromJsonValue(m_reversal_reason, json[QString("ReversalReason")]);
    m_reversal_reason_isSet = !json[QString("ReversalReason")].isNull() && m_reversal_reason_isValid;

    m_reversed_amount_isValid = ::OpenAPI::fromJsonValue(m_reversed_amount, json[QString("ReversedAmount")]);
    m_reversed_amount_isSet = !json[QString("ReversedAmount")].isNull() && m_reversed_amount_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;
}

QString OAIReversalRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReversalRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order.isSet()) {
        obj.insert(QString("CustomerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_original_poi_transaction.isSet()) {
        obj.insert(QString("OriginalPOITransaction"), ::OpenAPI::toJsonValue(m_original_poi_transaction));
    }
    if (m_reversal_reason.isSet()) {
        obj.insert(QString("ReversalReason"), ::OpenAPI::toJsonValue(m_reversal_reason));
    }
    if (m_reversed_amount_isSet) {
        obj.insert(QString("ReversedAmount"), ::OpenAPI::toJsonValue(m_reversed_amount));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    return obj;
}

OAICustomerOrder OAIReversalRequest::getCustomerOrder() const {
    return m_customer_order;
}
void OAIReversalRequest::setCustomerOrder(const OAICustomerOrder &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAIReversalRequest::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAIReversalRequest::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

OAIOriginalPOITransaction OAIReversalRequest::getOriginalPoiTransaction() const {
    return m_original_poi_transaction;
}
void OAIReversalRequest::setOriginalPoiTransaction(const OAIOriginalPOITransaction &original_poi_transaction) {
    m_original_poi_transaction = original_poi_transaction;
    m_original_poi_transaction_isSet = true;
}

bool OAIReversalRequest::is_original_poi_transaction_Set() const{
    return m_original_poi_transaction_isSet;
}

bool OAIReversalRequest::is_original_poi_transaction_Valid() const{
    return m_original_poi_transaction_isValid;
}

OAIReversalReason OAIReversalRequest::getReversalReason() const {
    return m_reversal_reason;
}
void OAIReversalRequest::setReversalReason(const OAIReversalReason &reversal_reason) {
    m_reversal_reason = reversal_reason;
    m_reversal_reason_isSet = true;
}

bool OAIReversalRequest::is_reversal_reason_Set() const{
    return m_reversal_reason_isSet;
}

bool OAIReversalRequest::is_reversal_reason_Valid() const{
    return m_reversal_reason_isValid;
}

double OAIReversalRequest::getReversedAmount() const {
    return m_reversed_amount;
}
void OAIReversalRequest::setReversedAmount(const double &reversed_amount) {
    m_reversed_amount = reversed_amount;
    m_reversed_amount_isSet = true;
}

bool OAIReversalRequest::is_reversed_amount_Set() const{
    return m_reversed_amount_isSet;
}

bool OAIReversalRequest::is_reversed_amount_Valid() const{
    return m_reversed_amount_isValid;
}

OAISaleData OAIReversalRequest::getSaleData() const {
    return m_sale_data;
}
void OAIReversalRequest::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAIReversalRequest::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAIReversalRequest::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

bool OAIReversalRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_poi_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reversal_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reversed_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReversalRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_original_poi_transaction_isValid && m_reversal_reason_isValid && true;
}

} // namespace OpenAPI
