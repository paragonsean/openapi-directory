/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputResult::OAIInputResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputResult::OAIInputResult() {
    this->initializeModel();
}

OAIInputResult::~OAIInputResult() {}

void OAIInputResult::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_info_qualify_isSet = false;
    m_info_qualify_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAIInputResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputResult::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_info_qualify_isValid = ::OpenAPI::fromJsonValue(m_info_qualify, json[QString("InfoQualify")]);
    m_info_qualify_isSet = !json[QString("InfoQualify")].isNull() && m_info_qualify_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("Input")]);
    m_input_isSet = !json[QString("Input")].isNull() && m_input_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;
}

QString OAIInputResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputResult::asJsonObject() const {
    QJsonObject obj;
    if (m_device.isSet()) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_info_qualify.isSet()) {
        obj.insert(QString("InfoQualify"), ::OpenAPI::toJsonValue(m_info_qualify));
    }
    if (m_input.isSet()) {
        obj.insert(QString("Input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

OAIDevice OAIInputResult::getDevice() const {
    return m_device;
}
void OAIInputResult::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIInputResult::is_device_Set() const{
    return m_device_isSet;
}

bool OAIInputResult::is_device_Valid() const{
    return m_device_isValid;
}

OAIInfoQualify OAIInputResult::getInfoQualify() const {
    return m_info_qualify;
}
void OAIInputResult::setInfoQualify(const OAIInfoQualify &info_qualify) {
    m_info_qualify = info_qualify;
    m_info_qualify_isSet = true;
}

bool OAIInputResult::is_info_qualify_Set() const{
    return m_info_qualify_isSet;
}

bool OAIInputResult::is_info_qualify_Valid() const{
    return m_info_qualify_isValid;
}

OAIInput OAIInputResult::getInput() const {
    return m_input;
}
void OAIInputResult::setInput(const OAIInput &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIInputResult::is_input_Set() const{
    return m_input_isSet;
}

bool OAIInputResult::is_input_Valid() const{
    return m_input_isValid;
}

OAIResponse OAIInputResult::getResponse() const {
    return m_response;
}
void OAIInputResult::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIInputResult::is_response_Set() const{
    return m_response_isSet;
}

bool OAIInputResult::is_response_Valid() const{
    return m_response_isValid;
}

bool OAIInputResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_qualify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_info_qualify_isValid && m_response_isValid && true;
}

} // namespace OpenAPI
