/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredefinedContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredefinedContent::OAIPredefinedContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredefinedContent::OAIPredefinedContent() {
    this->initializeModel();
}

OAIPredefinedContent::~OAIPredefinedContent() {}

void OAIPredefinedContent::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;
}

void OAIPredefinedContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredefinedContent::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceID")]);
    m_reference_id_isSet = !json[QString("ReferenceID")].isNull() && m_reference_id_isValid;
}

QString OAIPredefinedContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredefinedContent::asJsonObject() const {
    QJsonObject obj;
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceID"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    return obj;
}

QString OAIPredefinedContent::getLanguage() const {
    return m_language;
}
void OAIPredefinedContent::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPredefinedContent::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPredefinedContent::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIPredefinedContent::getReferenceId() const {
    return m_reference_id;
}
void OAIPredefinedContent::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAIPredefinedContent::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAIPredefinedContent::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

bool OAIPredefinedContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredefinedContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_reference_id_isValid && true;
}

} // namespace OpenAPI
