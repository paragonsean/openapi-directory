/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentType::OAIPaymentType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentType::OAIPaymentType() {
    this->initializeModel();
}

OAIPaymentType::~OAIPaymentType() {}

void OAIPaymentType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIPaymentType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIPaymentType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CashAdvance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::CASHADVANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CashDeposit", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::CASHDEPOSIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completion", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::COMPLETION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FirstReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::FIRSTRESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Instalment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::INSTALMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IssuerInstalment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::ISSUERINSTALMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Normal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::NORMAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OneTimeReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::ONETIMERESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PaidOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::PAIDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Recurring", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::RECURRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Refund", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::REFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIPaymentType::UPDATERESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIPaymentType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIPaymentType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIPaymentType::CASHADVANCE:
            val = "CashAdvance";
            break;
        case eOAIPaymentType::CASHDEPOSIT:
            val = "CashDeposit";
            break;
        case eOAIPaymentType::COMPLETION:
            val = "Completion";
            break;
        case eOAIPaymentType::FIRSTRESERVATION:
            val = "FirstReservation";
            break;
        case eOAIPaymentType::INSTALMENT:
            val = "Instalment";
            break;
        case eOAIPaymentType::ISSUERINSTALMENT:
            val = "IssuerInstalment";
            break;
        case eOAIPaymentType::NORMAL:
            val = "Normal";
            break;
        case eOAIPaymentType::ONETIMERESERVATION:
            val = "OneTimeReservation";
            break;
        case eOAIPaymentType::PAIDOUT:
            val = "PaidOut";
            break;
        case eOAIPaymentType::RECURRING:
            val = "Recurring";
            break;
        case eOAIPaymentType::REFUND:
            val = "Refund";
            break;
        case eOAIPaymentType::UPDATERESERVATION:
            val = "UpdateReservation";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIPaymentType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIPaymentType::eOAIPaymentType OAIPaymentType::getValue() const {
    return m_value;
}

void OAIPaymentType::setValue(const OAIPaymentType::eOAIPaymentType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIPaymentType::isSet() const {
    
    return m_value_isSet;
}

bool OAIPaymentType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
