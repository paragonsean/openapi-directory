/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionConditions::OAITransactionConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionConditions::OAITransactionConditions() {
    this->initializeModel();
}

OAITransactionConditions::~OAITransactionConditions() {}

void OAITransactionConditions::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_allowed_loyalty_brand_isSet = false;
    m_allowed_loyalty_brand_isValid = false;

    m_allowed_payment_brand_isSet = false;
    m_allowed_payment_brand_isValid = false;

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_debit_preferred_flag_isSet = false;
    m_debit_preferred_flag_isValid = false;

    m_force_entry_mode_isSet = false;
    m_force_entry_mode_isValid = false;

    m_force_online_flag_isSet = false;
    m_force_online_flag_isValid = false;

    m_loyalty_handling_isSet = false;
    m_loyalty_handling_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;
}

void OAITransactionConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionConditions::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_allowed_loyalty_brand_isValid = ::OpenAPI::fromJsonValue(m_allowed_loyalty_brand, json[QString("AllowedLoyaltyBrand")]);
    m_allowed_loyalty_brand_isSet = !json[QString("AllowedLoyaltyBrand")].isNull() && m_allowed_loyalty_brand_isValid;

    m_allowed_payment_brand_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_brand, json[QString("AllowedPaymentBrand")]);
    m_allowed_payment_brand_isSet = !json[QString("AllowedPaymentBrand")].isNull() && m_allowed_payment_brand_isValid;

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_debit_preferred_flag_isValid = ::OpenAPI::fromJsonValue(m_debit_preferred_flag, json[QString("DebitPreferredFlag")]);
    m_debit_preferred_flag_isSet = !json[QString("DebitPreferredFlag")].isNull() && m_debit_preferred_flag_isValid;

    m_force_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_force_entry_mode, json[QString("ForceEntryMode")]);
    m_force_entry_mode_isSet = !json[QString("ForceEntryMode")].isNull() && m_force_entry_mode_isValid;

    m_force_online_flag_isValid = ::OpenAPI::fromJsonValue(m_force_online_flag, json[QString("ForceOnlineFlag")]);
    m_force_online_flag_isSet = !json[QString("ForceOnlineFlag")].isNull() && m_force_online_flag_isValid;

    m_loyalty_handling_isValid = ::OpenAPI::fromJsonValue(m_loyalty_handling, json[QString("LoyaltyHandling")]);
    m_loyalty_handling_isSet = !json[QString("LoyaltyHandling")].isNull() && m_loyalty_handling_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("MerchantCategoryCode")]);
    m_merchant_category_code_isSet = !json[QString("MerchantCategoryCode")].isNull() && m_merchant_category_code_isValid;
}

QString OAITransactionConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id.size() > 0) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_allowed_loyalty_brand.size() > 0) {
        obj.insert(QString("AllowedLoyaltyBrand"), ::OpenAPI::toJsonValue(m_allowed_loyalty_brand));
    }
    if (m_allowed_payment_brand.size() > 0) {
        obj.insert(QString("AllowedPaymentBrand"), ::OpenAPI::toJsonValue(m_allowed_payment_brand));
    }
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_debit_preferred_flag_isSet) {
        obj.insert(QString("DebitPreferredFlag"), ::OpenAPI::toJsonValue(m_debit_preferred_flag));
    }
    if (m_force_entry_mode.size() > 0) {
        obj.insert(QString("ForceEntryMode"), ::OpenAPI::toJsonValue(m_force_entry_mode));
    }
    if (m_force_online_flag_isSet) {
        obj.insert(QString("ForceOnlineFlag"), ::OpenAPI::toJsonValue(m_force_online_flag));
    }
    if (m_loyalty_handling.isSet()) {
        obj.insert(QString("LoyaltyHandling"), ::OpenAPI::toJsonValue(m_loyalty_handling));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("MerchantCategoryCode"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    return obj;
}

QList<qint32> OAITransactionConditions::getAcquirerId() const {
    return m_acquirer_id;
}
void OAITransactionConditions::setAcquirerId(const QList<qint32> &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAITransactionConditions::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAITransactionConditions::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

QList<QString> OAITransactionConditions::getAllowedLoyaltyBrand() const {
    return m_allowed_loyalty_brand;
}
void OAITransactionConditions::setAllowedLoyaltyBrand(const QList<QString> &allowed_loyalty_brand) {
    m_allowed_loyalty_brand = allowed_loyalty_brand;
    m_allowed_loyalty_brand_isSet = true;
}

bool OAITransactionConditions::is_allowed_loyalty_brand_Set() const{
    return m_allowed_loyalty_brand_isSet;
}

bool OAITransactionConditions::is_allowed_loyalty_brand_Valid() const{
    return m_allowed_loyalty_brand_isValid;
}

QList<QString> OAITransactionConditions::getAllowedPaymentBrand() const {
    return m_allowed_payment_brand;
}
void OAITransactionConditions::setAllowedPaymentBrand(const QList<QString> &allowed_payment_brand) {
    m_allowed_payment_brand = allowed_payment_brand;
    m_allowed_payment_brand_isSet = true;
}

bool OAITransactionConditions::is_allowed_payment_brand_Set() const{
    return m_allowed_payment_brand_isSet;
}

bool OAITransactionConditions::is_allowed_payment_brand_Valid() const{
    return m_allowed_payment_brand_isValid;
}

QString OAITransactionConditions::getCustomerLanguage() const {
    return m_customer_language;
}
void OAITransactionConditions::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAITransactionConditions::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAITransactionConditions::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

bool OAITransactionConditions::isDebitPreferredFlag() const {
    return m_debit_preferred_flag;
}
void OAITransactionConditions::setDebitPreferredFlag(const bool &debit_preferred_flag) {
    m_debit_preferred_flag = debit_preferred_flag;
    m_debit_preferred_flag_isSet = true;
}

bool OAITransactionConditions::is_debit_preferred_flag_Set() const{
    return m_debit_preferred_flag_isSet;
}

bool OAITransactionConditions::is_debit_preferred_flag_Valid() const{
    return m_debit_preferred_flag_isValid;
}

QList<QString> OAITransactionConditions::getForceEntryMode() const {
    return m_force_entry_mode;
}
void OAITransactionConditions::setForceEntryMode(const QList<QString> &force_entry_mode) {
    m_force_entry_mode = force_entry_mode;
    m_force_entry_mode_isSet = true;
}

bool OAITransactionConditions::is_force_entry_mode_Set() const{
    return m_force_entry_mode_isSet;
}

bool OAITransactionConditions::is_force_entry_mode_Valid() const{
    return m_force_entry_mode_isValid;
}

bool OAITransactionConditions::isForceOnlineFlag() const {
    return m_force_online_flag;
}
void OAITransactionConditions::setForceOnlineFlag(const bool &force_online_flag) {
    m_force_online_flag = force_online_flag;
    m_force_online_flag_isSet = true;
}

bool OAITransactionConditions::is_force_online_flag_Set() const{
    return m_force_online_flag_isSet;
}

bool OAITransactionConditions::is_force_online_flag_Valid() const{
    return m_force_online_flag_isValid;
}

OAILoyaltyHandling OAITransactionConditions::getLoyaltyHandling() const {
    return m_loyalty_handling;
}
void OAITransactionConditions::setLoyaltyHandling(const OAILoyaltyHandling &loyalty_handling) {
    m_loyalty_handling = loyalty_handling;
    m_loyalty_handling_isSet = true;
}

bool OAITransactionConditions::is_loyalty_handling_Set() const{
    return m_loyalty_handling_isSet;
}

bool OAITransactionConditions::is_loyalty_handling_Valid() const{
    return m_loyalty_handling_isValid;
}

QString OAITransactionConditions::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAITransactionConditions::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAITransactionConditions::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAITransactionConditions::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

bool OAITransactionConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_loyalty_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_payment_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_debit_preferred_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_entry_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_online_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
