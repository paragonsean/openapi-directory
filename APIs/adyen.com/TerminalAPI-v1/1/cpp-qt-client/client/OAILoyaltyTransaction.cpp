/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyTransaction::OAILoyaltyTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyTransaction::OAILoyaltyTransaction() {
    this->initializeModel();
}

OAILoyaltyTransaction::~OAILoyaltyTransaction() {}

void OAILoyaltyTransaction::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_loyalty_transaction_type_isSet = false;
    m_loyalty_transaction_type_isValid = false;

    m_original_poi_transaction_isSet = false;
    m_original_poi_transaction_isValid = false;

    m_sale_item_isSet = false;
    m_sale_item_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_transaction_conditions_isSet = false;
    m_transaction_conditions_isValid = false;
}

void OAILoyaltyTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyTransaction::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_loyalty_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_loyalty_transaction_type, json[QString("LoyaltyTransactionType")]);
    m_loyalty_transaction_type_isSet = !json[QString("LoyaltyTransactionType")].isNull() && m_loyalty_transaction_type_isValid;

    m_original_poi_transaction_isValid = ::OpenAPI::fromJsonValue(m_original_poi_transaction, json[QString("OriginalPOITransaction")]);
    m_original_poi_transaction_isSet = !json[QString("OriginalPOITransaction")].isNull() && m_original_poi_transaction_isValid;

    m_sale_item_isValid = ::OpenAPI::fromJsonValue(m_sale_item, json[QString("SaleItem")]);
    m_sale_item_isSet = !json[QString("SaleItem")].isNull() && m_sale_item_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;

    m_transaction_conditions_isValid = ::OpenAPI::fromJsonValue(m_transaction_conditions, json[QString("TransactionConditions")]);
    m_transaction_conditions_isSet = !json[QString("TransactionConditions")].isNull() && m_transaction_conditions_isValid;
}

QString OAILoyaltyTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_loyalty_transaction_type.isSet()) {
        obj.insert(QString("LoyaltyTransactionType"), ::OpenAPI::toJsonValue(m_loyalty_transaction_type));
    }
    if (m_original_poi_transaction.isSet()) {
        obj.insert(QString("OriginalPOITransaction"), ::OpenAPI::toJsonValue(m_original_poi_transaction));
    }
    if (m_sale_item.size() > 0) {
        obj.insert(QString("SaleItem"), ::OpenAPI::toJsonValue(m_sale_item));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_transaction_conditions.isSet()) {
        obj.insert(QString("TransactionConditions"), ::OpenAPI::toJsonValue(m_transaction_conditions));
    }
    return obj;
}

QString OAILoyaltyTransaction::getCurrency() const {
    return m_currency;
}
void OAILoyaltyTransaction::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILoyaltyTransaction::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILoyaltyTransaction::is_currency_Valid() const{
    return m_currency_isValid;
}

OAILoyaltyTransactionType OAILoyaltyTransaction::getLoyaltyTransactionType() const {
    return m_loyalty_transaction_type;
}
void OAILoyaltyTransaction::setLoyaltyTransactionType(const OAILoyaltyTransactionType &loyalty_transaction_type) {
    m_loyalty_transaction_type = loyalty_transaction_type;
    m_loyalty_transaction_type_isSet = true;
}

bool OAILoyaltyTransaction::is_loyalty_transaction_type_Set() const{
    return m_loyalty_transaction_type_isSet;
}

bool OAILoyaltyTransaction::is_loyalty_transaction_type_Valid() const{
    return m_loyalty_transaction_type_isValid;
}

OAIOriginalPOITransaction OAILoyaltyTransaction::getOriginalPoiTransaction() const {
    return m_original_poi_transaction;
}
void OAILoyaltyTransaction::setOriginalPoiTransaction(const OAIOriginalPOITransaction &original_poi_transaction) {
    m_original_poi_transaction = original_poi_transaction;
    m_original_poi_transaction_isSet = true;
}

bool OAILoyaltyTransaction::is_original_poi_transaction_Set() const{
    return m_original_poi_transaction_isSet;
}

bool OAILoyaltyTransaction::is_original_poi_transaction_Valid() const{
    return m_original_poi_transaction_isValid;
}

QList<OAISaleItem> OAILoyaltyTransaction::getSaleItem() const {
    return m_sale_item;
}
void OAILoyaltyTransaction::setSaleItem(const QList<OAISaleItem> &sale_item) {
    m_sale_item = sale_item;
    m_sale_item_isSet = true;
}

bool OAILoyaltyTransaction::is_sale_item_Set() const{
    return m_sale_item_isSet;
}

bool OAILoyaltyTransaction::is_sale_item_Valid() const{
    return m_sale_item_isValid;
}

double OAILoyaltyTransaction::getTotalAmount() const {
    return m_total_amount;
}
void OAILoyaltyTransaction::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAILoyaltyTransaction::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAILoyaltyTransaction::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

OAITransactionConditions OAILoyaltyTransaction::getTransactionConditions() const {
    return m_transaction_conditions;
}
void OAILoyaltyTransaction::setTransactionConditions(const OAITransactionConditions &transaction_conditions) {
    m_transaction_conditions = transaction_conditions;
    m_transaction_conditions_isSet = true;
}

bool OAILoyaltyTransaction::is_transaction_conditions_Set() const{
    return m_transaction_conditions_isSet;
}

bool OAILoyaltyTransaction::is_transaction_conditions_Valid() const{
    return m_transaction_conditions_isValid;
}

bool OAILoyaltyTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_poi_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_item.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_transaction_type_isValid && true;
}

} // namespace OpenAPI
