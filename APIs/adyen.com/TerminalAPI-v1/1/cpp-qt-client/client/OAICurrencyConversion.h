/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICurrencyConversion.h
 *
 * A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.
 */

#ifndef OAICurrencyConversion_H
#define OAICurrencyConversion_H

#include <QJsonObject>

#include "OAIConvertedAmount.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConvertedAmount;

class OAICurrencyConversion : public OAIObject {
public:
    OAICurrencyConversion();
    OAICurrencyConversion(QString json);
    ~OAICurrencyConversion() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCommission() const;
    void setCommission(const double &commission);
    bool is_commission_Set() const;
    bool is_commission_Valid() const;

    OAIConvertedAmount getConvertedAmount() const;
    void setConvertedAmount(const OAIConvertedAmount &converted_amount);
    bool is_converted_amount_Set() const;
    bool is_converted_amount_Valid() const;

    bool isCustomerApprovedFlag() const;
    void setCustomerApprovedFlag(const bool &customer_approved_flag);
    bool is_customer_approved_flag_Set() const;
    bool is_customer_approved_flag_Valid() const;

    QString getDeclaration() const;
    void setDeclaration(const QString &declaration);
    bool is_declaration_Set() const;
    bool is_declaration_Valid() const;

    QString getMarkup() const;
    void setMarkup(const QString &markup);
    bool is_markup_Set() const;
    bool is_markup_Valid() const;

    QString getRate() const;
    void setRate(const QString &rate);
    bool is_rate_Set() const;
    bool is_rate_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_commission;
    bool m_commission_isSet;
    bool m_commission_isValid;

    OAIConvertedAmount m_converted_amount;
    bool m_converted_amount_isSet;
    bool m_converted_amount_isValid;

    bool m_customer_approved_flag;
    bool m_customer_approved_flag_isSet;
    bool m_customer_approved_flag_isValid;

    QString m_declaration;
    bool m_declaration_isSet;
    bool m_declaration_isValid;

    QString m_markup;
    bool m_markup_isSet;
    bool m_markup_isValid;

    QString m_rate;
    bool m_rate_isSet;
    bool m_rate_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICurrencyConversion)

#endif // OAICurrencyConversion_H
