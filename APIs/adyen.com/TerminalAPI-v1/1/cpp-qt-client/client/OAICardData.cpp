/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardData::OAICardData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardData::OAICardData() {
    this->initializeModel();
}

OAICardData::~OAICardData() {}

void OAICardData::initializeModel() {

    m_allowed_product_isSet = false;
    m_allowed_product_isValid = false;

    m_allowed_product_code_isSet = false;
    m_allowed_product_code_isValid = false;

    m_card_country_code_isSet = false;
    m_card_country_code_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_entry_mode_isSet = false;
    m_entry_mode_isValid = false;

    m_masked_pan_isSet = false;
    m_masked_pan_isValid = false;

    m_payment_account_ref_isSet = false;
    m_payment_account_ref_isValid = false;

    m_payment_brand_isSet = false;
    m_payment_brand_isValid = false;

    m_payment_token_isSet = false;
    m_payment_token_isValid = false;

    m_protected_card_data_isSet = false;
    m_protected_card_data_isValid = false;

    m_sensitive_card_data_isSet = false;
    m_sensitive_card_data_isValid = false;
}

void OAICardData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardData::fromJsonObject(QJsonObject json) {

    m_allowed_product_isValid = ::OpenAPI::fromJsonValue(m_allowed_product, json[QString("AllowedProduct")]);
    m_allowed_product_isSet = !json[QString("AllowedProduct")].isNull() && m_allowed_product_isValid;

    m_allowed_product_code_isValid = ::OpenAPI::fromJsonValue(m_allowed_product_code, json[QString("AllowedProductCode")]);
    m_allowed_product_code_isSet = !json[QString("AllowedProductCode")].isNull() && m_allowed_product_code_isValid;

    m_card_country_code_isValid = ::OpenAPI::fromJsonValue(m_card_country_code, json[QString("CardCountryCode")]);
    m_card_country_code_isSet = !json[QString("CardCountryCode")].isNull() && m_card_country_code_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("CustomerOrder")]);
    m_customer_order_isSet = !json[QString("CustomerOrder")].isNull() && m_customer_order_isValid;

    m_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_entry_mode, json[QString("EntryMode")]);
    m_entry_mode_isSet = !json[QString("EntryMode")].isNull() && m_entry_mode_isValid;

    m_masked_pan_isValid = ::OpenAPI::fromJsonValue(m_masked_pan, json[QString("MaskedPan")]);
    m_masked_pan_isSet = !json[QString("MaskedPan")].isNull() && m_masked_pan_isValid;

    m_payment_account_ref_isValid = ::OpenAPI::fromJsonValue(m_payment_account_ref, json[QString("PaymentAccountRef")]);
    m_payment_account_ref_isSet = !json[QString("PaymentAccountRef")].isNull() && m_payment_account_ref_isValid;

    m_payment_brand_isValid = ::OpenAPI::fromJsonValue(m_payment_brand, json[QString("PaymentBrand")]);
    m_payment_brand_isSet = !json[QString("PaymentBrand")].isNull() && m_payment_brand_isValid;

    m_payment_token_isValid = ::OpenAPI::fromJsonValue(m_payment_token, json[QString("PaymentToken")]);
    m_payment_token_isSet = !json[QString("PaymentToken")].isNull() && m_payment_token_isValid;

    m_protected_card_data_isValid = ::OpenAPI::fromJsonValue(m_protected_card_data, json[QString("ProtectedCardData")]);
    m_protected_card_data_isSet = !json[QString("ProtectedCardData")].isNull() && m_protected_card_data_isValid;

    m_sensitive_card_data_isValid = ::OpenAPI::fromJsonValue(m_sensitive_card_data, json[QString("SensitiveCardData")]);
    m_sensitive_card_data_isSet = !json[QString("SensitiveCardData")].isNull() && m_sensitive_card_data_isValid;
}

QString OAICardData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardData::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_product.size() > 0) {
        obj.insert(QString("AllowedProduct"), ::OpenAPI::toJsonValue(m_allowed_product));
    }
    if (m_allowed_product_code.size() > 0) {
        obj.insert(QString("AllowedProductCode"), ::OpenAPI::toJsonValue(m_allowed_product_code));
    }
    if (m_card_country_code_isSet) {
        obj.insert(QString("CardCountryCode"), ::OpenAPI::toJsonValue(m_card_country_code));
    }
    if (m_customer_order.size() > 0) {
        obj.insert(QString("CustomerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_entry_mode.size() > 0) {
        obj.insert(QString("EntryMode"), ::OpenAPI::toJsonValue(m_entry_mode));
    }
    if (m_masked_pan_isSet) {
        obj.insert(QString("MaskedPan"), ::OpenAPI::toJsonValue(m_masked_pan));
    }
    if (m_payment_account_ref_isSet) {
        obj.insert(QString("PaymentAccountRef"), ::OpenAPI::toJsonValue(m_payment_account_ref));
    }
    if (m_payment_brand_isSet) {
        obj.insert(QString("PaymentBrand"), ::OpenAPI::toJsonValue(m_payment_brand));
    }
    if (m_payment_token.isSet()) {
        obj.insert(QString("PaymentToken"), ::OpenAPI::toJsonValue(m_payment_token));
    }
    if (m_protected_card_data_isSet) {
        obj.insert(QString("ProtectedCardData"), ::OpenAPI::toJsonValue(m_protected_card_data));
    }
    if (m_sensitive_card_data.isSet()) {
        obj.insert(QString("SensitiveCardData"), ::OpenAPI::toJsonValue(m_sensitive_card_data));
    }
    return obj;
}

QList<OAIAllowedProduct> OAICardData::getAllowedProduct() const {
    return m_allowed_product;
}
void OAICardData::setAllowedProduct(const QList<OAIAllowedProduct> &allowed_product) {
    m_allowed_product = allowed_product;
    m_allowed_product_isSet = true;
}

bool OAICardData::is_allowed_product_Set() const{
    return m_allowed_product_isSet;
}

bool OAICardData::is_allowed_product_Valid() const{
    return m_allowed_product_isValid;
}

QList<qint32> OAICardData::getAllowedProductCode() const {
    return m_allowed_product_code;
}
void OAICardData::setAllowedProductCode(const QList<qint32> &allowed_product_code) {
    m_allowed_product_code = allowed_product_code;
    m_allowed_product_code_isSet = true;
}

bool OAICardData::is_allowed_product_code_Set() const{
    return m_allowed_product_code_isSet;
}

bool OAICardData::is_allowed_product_code_Valid() const{
    return m_allowed_product_code_isValid;
}

qint32 OAICardData::getCardCountryCode() const {
    return m_card_country_code;
}
void OAICardData::setCardCountryCode(const qint32 &card_country_code) {
    m_card_country_code = card_country_code;
    m_card_country_code_isSet = true;
}

bool OAICardData::is_card_country_code_Set() const{
    return m_card_country_code_isSet;
}

bool OAICardData::is_card_country_code_Valid() const{
    return m_card_country_code_isValid;
}

QList<OAICustomerOrder> OAICardData::getCustomerOrder() const {
    return m_customer_order;
}
void OAICardData::setCustomerOrder(const QList<OAICustomerOrder> &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAICardData::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAICardData::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

QList<QString> OAICardData::getEntryMode() const {
    return m_entry_mode;
}
void OAICardData::setEntryMode(const QList<QString> &entry_mode) {
    m_entry_mode = entry_mode;
    m_entry_mode_isSet = true;
}

bool OAICardData::is_entry_mode_Set() const{
    return m_entry_mode_isSet;
}

bool OAICardData::is_entry_mode_Valid() const{
    return m_entry_mode_isValid;
}

QString OAICardData::getMaskedPan() const {
    return m_masked_pan;
}
void OAICardData::setMaskedPan(const QString &masked_pan) {
    m_masked_pan = masked_pan;
    m_masked_pan_isSet = true;
}

bool OAICardData::is_masked_pan_Set() const{
    return m_masked_pan_isSet;
}

bool OAICardData::is_masked_pan_Valid() const{
    return m_masked_pan_isValid;
}

QString OAICardData::getPaymentAccountRef() const {
    return m_payment_account_ref;
}
void OAICardData::setPaymentAccountRef(const QString &payment_account_ref) {
    m_payment_account_ref = payment_account_ref;
    m_payment_account_ref_isSet = true;
}

bool OAICardData::is_payment_account_ref_Set() const{
    return m_payment_account_ref_isSet;
}

bool OAICardData::is_payment_account_ref_Valid() const{
    return m_payment_account_ref_isValid;
}

QString OAICardData::getPaymentBrand() const {
    return m_payment_brand;
}
void OAICardData::setPaymentBrand(const QString &payment_brand) {
    m_payment_brand = payment_brand;
    m_payment_brand_isSet = true;
}

bool OAICardData::is_payment_brand_Set() const{
    return m_payment_brand_isSet;
}

bool OAICardData::is_payment_brand_Valid() const{
    return m_payment_brand_isValid;
}

OAIPaymentToken OAICardData::getPaymentToken() const {
    return m_payment_token;
}
void OAICardData::setPaymentToken(const OAIPaymentToken &payment_token) {
    m_payment_token = payment_token;
    m_payment_token_isSet = true;
}

bool OAICardData::is_payment_token_Set() const{
    return m_payment_token_isSet;
}

bool OAICardData::is_payment_token_Valid() const{
    return m_payment_token_isValid;
}

QString OAICardData::getProtectedCardData() const {
    return m_protected_card_data;
}
void OAICardData::setProtectedCardData(const QString &protected_card_data) {
    m_protected_card_data = protected_card_data;
    m_protected_card_data_isSet = true;
}

bool OAICardData::is_protected_card_data_Set() const{
    return m_protected_card_data_isSet;
}

bool OAICardData::is_protected_card_data_Valid() const{
    return m_protected_card_data_isValid;
}

OAISensitiveCardData OAICardData::getSensitiveCardData() const {
    return m_sensitive_card_data;
}
void OAICardData::setSensitiveCardData(const OAISensitiveCardData &sensitive_card_data) {
    m_sensitive_card_data = sensitive_card_data;
    m_sensitive_card_data_isSet = true;
}

bool OAICardData::is_sensitive_card_data_Set() const{
    return m_sensitive_card_data_isSet;
}

bool OAICardData::is_sensitive_card_data_Valid() const{
    return m_sensitive_card_data_isValid;
}

bool OAICardData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_product.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_product_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_masked_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_card_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_card_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
