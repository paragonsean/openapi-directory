/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOriginalPOITransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOriginalPOITransaction::OAIOriginalPOITransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOriginalPOITransaction::OAIOriginalPOITransaction() {
    this->initializeModel();
}

OAIOriginalPOITransaction::~OAIOriginalPOITransaction() {}

void OAIOriginalPOITransaction::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_amount_value_isSet = false;
    m_amount_value_isValid = false;

    m_approval_code_isSet = false;
    m_approval_code_isValid = false;

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_host_transaction_id_isSet = false;
    m_host_transaction_id_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;

    m_poi_transaction_id_isSet = false;
    m_poi_transaction_id_isValid = false;

    m_reuse_card_data_flag_isSet = false;
    m_reuse_card_data_flag_isValid = false;

    m_sale_id_isSet = false;
    m_sale_id_isValid = false;
}

void OAIOriginalPOITransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOriginalPOITransaction::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_amount_value_isValid = ::OpenAPI::fromJsonValue(m_amount_value, json[QString("AmountValue")]);
    m_amount_value_isSet = !json[QString("AmountValue")].isNull() && m_amount_value_isValid;

    m_approval_code_isValid = ::OpenAPI::fromJsonValue(m_approval_code, json[QString("ApprovalCode")]);
    m_approval_code_isSet = !json[QString("ApprovalCode")].isNull() && m_approval_code_isValid;

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_host_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_host_transaction_id, json[QString("HostTransactionID")]);
    m_host_transaction_id_isSet = !json[QString("HostTransactionID")].isNull() && m_host_transaction_id_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;

    m_poi_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_poi_transaction_id, json[QString("POITransactionID")]);
    m_poi_transaction_id_isSet = !json[QString("POITransactionID")].isNull() && m_poi_transaction_id_isValid;

    m_reuse_card_data_flag_isValid = ::OpenAPI::fromJsonValue(m_reuse_card_data_flag, json[QString("ReuseCardDataFlag")]);
    m_reuse_card_data_flag_isSet = !json[QString("ReuseCardDataFlag")].isNull() && m_reuse_card_data_flag_isValid;

    m_sale_id_isValid = ::OpenAPI::fromJsonValue(m_sale_id, json[QString("SaleID")]);
    m_sale_id_isSet = !json[QString("SaleID")].isNull() && m_sale_id_isValid;
}

QString OAIOriginalPOITransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOriginalPOITransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id_isSet) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_amount_value_isSet) {
        obj.insert(QString("AmountValue"), ::OpenAPI::toJsonValue(m_amount_value));
    }
    if (m_approval_code_isSet) {
        obj.insert(QString("ApprovalCode"), ::OpenAPI::toJsonValue(m_approval_code));
    }
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_host_transaction_id.isSet()) {
        obj.insert(QString("HostTransactionID"), ::OpenAPI::toJsonValue(m_host_transaction_id));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    if (m_poi_transaction_id.isSet()) {
        obj.insert(QString("POITransactionID"), ::OpenAPI::toJsonValue(m_poi_transaction_id));
    }
    if (m_reuse_card_data_flag_isSet) {
        obj.insert(QString("ReuseCardDataFlag"), ::OpenAPI::toJsonValue(m_reuse_card_data_flag));
    }
    if (m_sale_id_isSet) {
        obj.insert(QString("SaleID"), ::OpenAPI::toJsonValue(m_sale_id));
    }
    return obj;
}

qint32 OAIOriginalPOITransaction::getAcquirerId() const {
    return m_acquirer_id;
}
void OAIOriginalPOITransaction::setAcquirerId(const qint32 &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAIOriginalPOITransaction::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAIOriginalPOITransaction::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

double OAIOriginalPOITransaction::getAmountValue() const {
    return m_amount_value;
}
void OAIOriginalPOITransaction::setAmountValue(const double &amount_value) {
    m_amount_value = amount_value;
    m_amount_value_isSet = true;
}

bool OAIOriginalPOITransaction::is_amount_value_Set() const{
    return m_amount_value_isSet;
}

bool OAIOriginalPOITransaction::is_amount_value_Valid() const{
    return m_amount_value_isValid;
}

QString OAIOriginalPOITransaction::getApprovalCode() const {
    return m_approval_code;
}
void OAIOriginalPOITransaction::setApprovalCode(const QString &approval_code) {
    m_approval_code = approval_code;
    m_approval_code_isSet = true;
}

bool OAIOriginalPOITransaction::is_approval_code_Set() const{
    return m_approval_code_isSet;
}

bool OAIOriginalPOITransaction::is_approval_code_Valid() const{
    return m_approval_code_isValid;
}

QString OAIOriginalPOITransaction::getCustomerLanguage() const {
    return m_customer_language;
}
void OAIOriginalPOITransaction::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAIOriginalPOITransaction::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAIOriginalPOITransaction::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

OAITransactionIDType OAIOriginalPOITransaction::getHostTransactionId() const {
    return m_host_transaction_id;
}
void OAIOriginalPOITransaction::setHostTransactionId(const OAITransactionIDType &host_transaction_id) {
    m_host_transaction_id = host_transaction_id;
    m_host_transaction_id_isSet = true;
}

bool OAIOriginalPOITransaction::is_host_transaction_id_Set() const{
    return m_host_transaction_id_isSet;
}

bool OAIOriginalPOITransaction::is_host_transaction_id_Valid() const{
    return m_host_transaction_id_isValid;
}

QString OAIOriginalPOITransaction::getPoiid() const {
    return m_poiid;
}
void OAIOriginalPOITransaction::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAIOriginalPOITransaction::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAIOriginalPOITransaction::is_poiid_Valid() const{
    return m_poiid_isValid;
}

OAITransactionIDType OAIOriginalPOITransaction::getPoiTransactionId() const {
    return m_poi_transaction_id;
}
void OAIOriginalPOITransaction::setPoiTransactionId(const OAITransactionIDType &poi_transaction_id) {
    m_poi_transaction_id = poi_transaction_id;
    m_poi_transaction_id_isSet = true;
}

bool OAIOriginalPOITransaction::is_poi_transaction_id_Set() const{
    return m_poi_transaction_id_isSet;
}

bool OAIOriginalPOITransaction::is_poi_transaction_id_Valid() const{
    return m_poi_transaction_id_isValid;
}

bool OAIOriginalPOITransaction::isReuseCardDataFlag() const {
    return m_reuse_card_data_flag;
}
void OAIOriginalPOITransaction::setReuseCardDataFlag(const bool &reuse_card_data_flag) {
    m_reuse_card_data_flag = reuse_card_data_flag;
    m_reuse_card_data_flag_isSet = true;
}

bool OAIOriginalPOITransaction::is_reuse_card_data_flag_Set() const{
    return m_reuse_card_data_flag_isSet;
}

bool OAIOriginalPOITransaction::is_reuse_card_data_flag_Valid() const{
    return m_reuse_card_data_flag_isValid;
}

QString OAIOriginalPOITransaction::getSaleId() const {
    return m_sale_id;
}
void OAIOriginalPOITransaction::setSaleId(const QString &sale_id) {
    m_sale_id = sale_id;
    m_sale_id_isSet = true;
}

bool OAIOriginalPOITransaction::is_sale_id_Set() const{
    return m_sale_id_isSet;
}

bool OAIOriginalPOITransaction::is_sale_id_Valid() const{
    return m_sale_id_isValid;
}

bool OAIOriginalPOITransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reuse_card_data_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOriginalPOITransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
