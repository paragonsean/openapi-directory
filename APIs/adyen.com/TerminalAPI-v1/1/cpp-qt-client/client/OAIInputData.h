/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInputData.h
 *
 * 
 */

#ifndef OAIInputData_H
#define OAIInputData_H

#include <QJsonObject>

#include "OAIDevice.h"
#include "OAIInfoQualify.h"
#include "OAIInputCommand.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInputData : public OAIObject {
public:
    OAIInputData();
    OAIInputData(QString json);
    ~OAIInputData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBeepKeyFlag() const;
    void setBeepKeyFlag(const bool &beep_key_flag);
    bool is_beep_key_flag_Set() const;
    bool is_beep_key_flag_Valid() const;

    QString getDefaultInputString() const;
    void setDefaultInputString(const QString &default_input_string);
    bool is_default_input_string_Set() const;
    bool is_default_input_string_Valid() const;

    QString getDefaultLayoutString() const;
    void setDefaultLayoutString(const QString &default_layout_string);
    bool is_default_layout_string_Set() const;
    bool is_default_layout_string_Valid() const;

    OAIDevice getDevice() const;
    void setDevice(const OAIDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    bool isDisableCancelFlag() const;
    void setDisableCancelFlag(const bool &disable_cancel_flag);
    bool is_disable_cancel_flag_Set() const;
    bool is_disable_cancel_flag_Valid() const;

    bool isDisableCorrectFlag() const;
    void setDisableCorrectFlag(const bool &disable_correct_flag);
    bool is_disable_correct_flag_Set() const;
    bool is_disable_correct_flag_Valid() const;

    bool isDisableValidFlag() const;
    void setDisableValidFlag(const bool &disable_valid_flag);
    bool is_disable_valid_flag_Set() const;
    bool is_disable_valid_flag_Valid() const;

    bool isFromRightToLeftFlag() const;
    void setFromRightToLeftFlag(const bool &from_right_to_left_flag);
    bool is_from_right_to_left_flag_Set() const;
    bool is_from_right_to_left_flag_Valid() const;

    bool isGlobalCorrectionFlag() const;
    void setGlobalCorrectionFlag(const bool &global_correction_flag);
    bool is_global_correction_flag_Set() const;
    bool is_global_correction_flag_Valid() const;

    bool isImmediateResponseFlag() const;
    void setImmediateResponseFlag(const bool &immediate_response_flag);
    bool is_immediate_response_flag_Set() const;
    bool is_immediate_response_flag_Valid() const;

    OAIInfoQualify getInfoQualify() const;
    void setInfoQualify(const OAIInfoQualify &info_qualify);
    bool is_info_qualify_Set() const;
    bool is_info_qualify_Valid() const;

    OAIInputCommand getInputCommand() const;
    void setInputCommand(const OAIInputCommand &input_command);
    bool is_input_command_Set() const;
    bool is_input_command_Valid() const;

    bool isMaskCharactersFlag() const;
    void setMaskCharactersFlag(const bool &mask_characters_flag);
    bool is_mask_characters_flag_Set() const;
    bool is_mask_characters_flag_Valid() const;

    qint32 getMaxDecimalLength() const;
    void setMaxDecimalLength(const qint32 &max_decimal_length);
    bool is_max_decimal_length_Set() const;
    bool is_max_decimal_length_Valid() const;

    qint32 getMaxInputTime() const;
    void setMaxInputTime(const qint32 &max_input_time);
    bool is_max_input_time_Set() const;
    bool is_max_input_time_Valid() const;

    qint32 getMaxLength() const;
    void setMaxLength(const qint32 &max_length);
    bool is_max_length_Set() const;
    bool is_max_length_Valid() const;

    bool isMenuBackFlag() const;
    void setMenuBackFlag(const bool &menu_back_flag);
    bool is_menu_back_flag_Set() const;
    bool is_menu_back_flag_Valid() const;

    qint32 getMinLength() const;
    void setMinLength(const qint32 &min_length);
    bool is_min_length_Set() const;
    bool is_min_length_Valid() const;

    bool isNotifyCardInputFlag() const;
    void setNotifyCardInputFlag(const bool &notify_card_input_flag);
    bool is_notify_card_input_flag_Set() const;
    bool is_notify_card_input_flag_Valid() const;

    QString getStringMask() const;
    void setStringMask(const QString &string_mask);
    bool is_string_mask_Set() const;
    bool is_string_mask_Valid() const;

    bool isWaitUserValidationFlag() const;
    void setWaitUserValidationFlag(const bool &wait_user_validation_flag);
    bool is_wait_user_validation_flag_Set() const;
    bool is_wait_user_validation_flag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_beep_key_flag;
    bool m_beep_key_flag_isSet;
    bool m_beep_key_flag_isValid;

    QString m_default_input_string;
    bool m_default_input_string_isSet;
    bool m_default_input_string_isValid;

    QString m_default_layout_string;
    bool m_default_layout_string_isSet;
    bool m_default_layout_string_isValid;

    OAIDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    bool m_disable_cancel_flag;
    bool m_disable_cancel_flag_isSet;
    bool m_disable_cancel_flag_isValid;

    bool m_disable_correct_flag;
    bool m_disable_correct_flag_isSet;
    bool m_disable_correct_flag_isValid;

    bool m_disable_valid_flag;
    bool m_disable_valid_flag_isSet;
    bool m_disable_valid_flag_isValid;

    bool m_from_right_to_left_flag;
    bool m_from_right_to_left_flag_isSet;
    bool m_from_right_to_left_flag_isValid;

    bool m_global_correction_flag;
    bool m_global_correction_flag_isSet;
    bool m_global_correction_flag_isValid;

    bool m_immediate_response_flag;
    bool m_immediate_response_flag_isSet;
    bool m_immediate_response_flag_isValid;

    OAIInfoQualify m_info_qualify;
    bool m_info_qualify_isSet;
    bool m_info_qualify_isValid;

    OAIInputCommand m_input_command;
    bool m_input_command_isSet;
    bool m_input_command_isValid;

    bool m_mask_characters_flag;
    bool m_mask_characters_flag_isSet;
    bool m_mask_characters_flag_isValid;

    qint32 m_max_decimal_length;
    bool m_max_decimal_length_isSet;
    bool m_max_decimal_length_isValid;

    qint32 m_max_input_time;
    bool m_max_input_time_isSet;
    bool m_max_input_time_isValid;

    qint32 m_max_length;
    bool m_max_length_isSet;
    bool m_max_length_isValid;

    bool m_menu_back_flag;
    bool m_menu_back_flag_isSet;
    bool m_menu_back_flag_isValid;

    qint32 m_min_length;
    bool m_min_length_isSet;
    bool m_min_length_isValid;

    bool m_notify_card_input_flag;
    bool m_notify_card_input_flag_isSet;
    bool m_notify_card_input_flag_isValid;

    QString m_string_mask;
    bool m_string_mask_isSet;
    bool m_string_mask_isValid;

    bool m_wait_user_validation_flag;
    bool m_wait_user_validation_flag_isSet;
    bool m_wait_user_validation_flag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInputData)

#endif // OAIInputData_H
