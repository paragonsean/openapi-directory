/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputRequest::OAIInputRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputRequest::OAIInputRequest() {
    this->initializeModel();
}

OAIInputRequest::~OAIInputRequest() {}

void OAIInputRequest::initializeModel() {

    m_display_output_isSet = false;
    m_display_output_isValid = false;

    m_input_data_isSet = false;
    m_input_data_isValid = false;
}

void OAIInputRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputRequest::fromJsonObject(QJsonObject json) {

    m_display_output_isValid = ::OpenAPI::fromJsonValue(m_display_output, json[QString("DisplayOutput")]);
    m_display_output_isSet = !json[QString("DisplayOutput")].isNull() && m_display_output_isValid;

    m_input_data_isValid = ::OpenAPI::fromJsonValue(m_input_data, json[QString("InputData")]);
    m_input_data_isSet = !json[QString("InputData")].isNull() && m_input_data_isValid;
}

QString OAIInputRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_display_output.isSet()) {
        obj.insert(QString("DisplayOutput"), ::OpenAPI::toJsonValue(m_display_output));
    }
    if (m_input_data.isSet()) {
        obj.insert(QString("InputData"), ::OpenAPI::toJsonValue(m_input_data));
    }
    return obj;
}

OAIDisplayOutput OAIInputRequest::getDisplayOutput() const {
    return m_display_output;
}
void OAIInputRequest::setDisplayOutput(const OAIDisplayOutput &display_output) {
    m_display_output = display_output;
    m_display_output_isSet = true;
}

bool OAIInputRequest::is_display_output_Set() const{
    return m_display_output_isSet;
}

bool OAIInputRequest::is_display_output_Valid() const{
    return m_display_output_isValid;
}

OAIInputData OAIInputRequest::getInputData() const {
    return m_input_data;
}
void OAIInputRequest::setInputData(const OAIInputData &input_data) {
    m_input_data = input_data;
    m_input_data_isSet = true;
}

bool OAIInputRequest::is_input_data_Set() const{
    return m_input_data_isSet;
}

bool OAIInputRequest::is_input_data_Valid() const{
    return m_input_data_isValid;
}

bool OAIInputRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_output.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_data_isValid && true;
}

} // namespace OpenAPI
