/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentToken.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentToken::OAIPaymentToken(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentToken::OAIPaymentToken() {
    this->initializeModel();
}

OAIPaymentToken::~OAIPaymentToken() {}

void OAIPaymentToken::initializeModel() {

    m_expiry_date_time_isSet = false;
    m_expiry_date_time_isValid = false;

    m_token_requested_type_isSet = false;
    m_token_requested_type_isValid = false;

    m_token_value_isSet = false;
    m_token_value_isValid = false;
}

void OAIPaymentToken::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentToken::fromJsonObject(QJsonObject json) {

    m_expiry_date_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_date_time, json[QString("ExpiryDateTime")]);
    m_expiry_date_time_isSet = !json[QString("ExpiryDateTime")].isNull() && m_expiry_date_time_isValid;

    m_token_requested_type_isValid = ::OpenAPI::fromJsonValue(m_token_requested_type, json[QString("TokenRequestedType")]);
    m_token_requested_type_isSet = !json[QString("TokenRequestedType")].isNull() && m_token_requested_type_isValid;

    m_token_value_isValid = ::OpenAPI::fromJsonValue(m_token_value, json[QString("TokenValue")]);
    m_token_value_isSet = !json[QString("TokenValue")].isNull() && m_token_value_isValid;
}

QString OAIPaymentToken::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentToken::asJsonObject() const {
    QJsonObject obj;
    if (m_expiry_date_time_isSet) {
        obj.insert(QString("ExpiryDateTime"), ::OpenAPI::toJsonValue(m_expiry_date_time));
    }
    if (m_token_requested_type.isSet()) {
        obj.insert(QString("TokenRequestedType"), ::OpenAPI::toJsonValue(m_token_requested_type));
    }
    if (m_token_value_isSet) {
        obj.insert(QString("TokenValue"), ::OpenAPI::toJsonValue(m_token_value));
    }
    return obj;
}

QDateTime OAIPaymentToken::getExpiryDateTime() const {
    return m_expiry_date_time;
}
void OAIPaymentToken::setExpiryDateTime(const QDateTime &expiry_date_time) {
    m_expiry_date_time = expiry_date_time;
    m_expiry_date_time_isSet = true;
}

bool OAIPaymentToken::is_expiry_date_time_Set() const{
    return m_expiry_date_time_isSet;
}

bool OAIPaymentToken::is_expiry_date_time_Valid() const{
    return m_expiry_date_time_isValid;
}

OAITokenRequestedType OAIPaymentToken::getTokenRequestedType() const {
    return m_token_requested_type;
}
void OAIPaymentToken::setTokenRequestedType(const OAITokenRequestedType &token_requested_type) {
    m_token_requested_type = token_requested_type;
    m_token_requested_type_isSet = true;
}

bool OAIPaymentToken::is_token_requested_type_Set() const{
    return m_token_requested_type_isSet;
}

bool OAIPaymentToken::is_token_requested_type_Valid() const{
    return m_token_requested_type_isValid;
}

QString OAIPaymentToken::getTokenValue() const {
    return m_token_value;
}
void OAIPaymentToken::setTokenValue(const QString &token_value) {
    m_token_value = token_value;
    m_token_value_isSet = true;
}

bool OAIPaymentToken::is_token_value_Set() const{
    return m_token_value_isSet;
}

bool OAIPaymentToken::is_token_value_Valid() const{
    return m_token_value_isValid;
}

bool OAIPaymentToken::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiry_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requested_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentToken::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_token_requested_type_isValid && m_token_value_isValid && true;
}

} // namespace OpenAPI
