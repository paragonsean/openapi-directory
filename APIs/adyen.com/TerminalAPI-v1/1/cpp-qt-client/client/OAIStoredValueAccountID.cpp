/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredValueAccountID.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredValueAccountID::OAIStoredValueAccountID(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredValueAccountID::OAIStoredValueAccountID() {
    this->initializeModel();
}

OAIStoredValueAccountID::~OAIStoredValueAccountID() {}

void OAIStoredValueAccountID::initializeModel() {

    m_entry_mode_isSet = false;
    m_entry_mode_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_identification_type_isSet = false;
    m_identification_type_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_stored_value_account_type_isSet = false;
    m_stored_value_account_type_isValid = false;

    m_stored_value_id_isSet = false;
    m_stored_value_id_isValid = false;

    m_stored_value_provider_isSet = false;
    m_stored_value_provider_isValid = false;
}

void OAIStoredValueAccountID::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredValueAccountID::fromJsonObject(QJsonObject json) {

    m_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_entry_mode, json[QString("EntryMode")]);
    m_entry_mode_isSet = !json[QString("EntryMode")].isNull() && m_entry_mode_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("ExpiryDate")]);
    m_expiry_date_isSet = !json[QString("ExpiryDate")].isNull() && m_expiry_date_isValid;

    m_identification_type_isValid = ::OpenAPI::fromJsonValue(m_identification_type, json[QString("IdentificationType")]);
    m_identification_type_isSet = !json[QString("IdentificationType")].isNull() && m_identification_type_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("OwnerName")]);
    m_owner_name_isSet = !json[QString("OwnerName")].isNull() && m_owner_name_isValid;

    m_stored_value_account_type_isValid = ::OpenAPI::fromJsonValue(m_stored_value_account_type, json[QString("StoredValueAccountType")]);
    m_stored_value_account_type_isSet = !json[QString("StoredValueAccountType")].isNull() && m_stored_value_account_type_isValid;

    m_stored_value_id_isValid = ::OpenAPI::fromJsonValue(m_stored_value_id, json[QString("StoredValueID")]);
    m_stored_value_id_isSet = !json[QString("StoredValueID")].isNull() && m_stored_value_id_isValid;

    m_stored_value_provider_isValid = ::OpenAPI::fromJsonValue(m_stored_value_provider, json[QString("StoredValueProvider")]);
    m_stored_value_provider_isSet = !json[QString("StoredValueProvider")].isNull() && m_stored_value_provider_isValid;
}

QString OAIStoredValueAccountID::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredValueAccountID::asJsonObject() const {
    QJsonObject obj;
    if (m_entry_mode.size() > 0) {
        obj.insert(QString("EntryMode"), ::OpenAPI::toJsonValue(m_entry_mode));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("ExpiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_identification_type.isSet()) {
        obj.insert(QString("IdentificationType"), ::OpenAPI::toJsonValue(m_identification_type));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("OwnerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_stored_value_account_type.isSet()) {
        obj.insert(QString("StoredValueAccountType"), ::OpenAPI::toJsonValue(m_stored_value_account_type));
    }
    if (m_stored_value_id_isSet) {
        obj.insert(QString("StoredValueID"), ::OpenAPI::toJsonValue(m_stored_value_id));
    }
    if (m_stored_value_provider_isSet) {
        obj.insert(QString("StoredValueProvider"), ::OpenAPI::toJsonValue(m_stored_value_provider));
    }
    return obj;
}

QList<QString> OAIStoredValueAccountID::getEntryMode() const {
    return m_entry_mode;
}
void OAIStoredValueAccountID::setEntryMode(const QList<QString> &entry_mode) {
    m_entry_mode = entry_mode;
    m_entry_mode_isSet = true;
}

bool OAIStoredValueAccountID::is_entry_mode_Set() const{
    return m_entry_mode_isSet;
}

bool OAIStoredValueAccountID::is_entry_mode_Valid() const{
    return m_entry_mode_isValid;
}

qint32 OAIStoredValueAccountID::getExpiryDate() const {
    return m_expiry_date;
}
void OAIStoredValueAccountID::setExpiryDate(const qint32 &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAIStoredValueAccountID::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAIStoredValueAccountID::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

OAIIdentificationType OAIStoredValueAccountID::getIdentificationType() const {
    return m_identification_type;
}
void OAIStoredValueAccountID::setIdentificationType(const OAIIdentificationType &identification_type) {
    m_identification_type = identification_type;
    m_identification_type_isSet = true;
}

bool OAIStoredValueAccountID::is_identification_type_Set() const{
    return m_identification_type_isSet;
}

bool OAIStoredValueAccountID::is_identification_type_Valid() const{
    return m_identification_type_isValid;
}

QString OAIStoredValueAccountID::getOwnerName() const {
    return m_owner_name;
}
void OAIStoredValueAccountID::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIStoredValueAccountID::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIStoredValueAccountID::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

OAIStoredValueAccountType OAIStoredValueAccountID::getStoredValueAccountType() const {
    return m_stored_value_account_type;
}
void OAIStoredValueAccountID::setStoredValueAccountType(const OAIStoredValueAccountType &stored_value_account_type) {
    m_stored_value_account_type = stored_value_account_type;
    m_stored_value_account_type_isSet = true;
}

bool OAIStoredValueAccountID::is_stored_value_account_type_Set() const{
    return m_stored_value_account_type_isSet;
}

bool OAIStoredValueAccountID::is_stored_value_account_type_Valid() const{
    return m_stored_value_account_type_isValid;
}

QString OAIStoredValueAccountID::getStoredValueId() const {
    return m_stored_value_id;
}
void OAIStoredValueAccountID::setStoredValueId(const QString &stored_value_id) {
    m_stored_value_id = stored_value_id;
    m_stored_value_id_isSet = true;
}

bool OAIStoredValueAccountID::is_stored_value_id_Set() const{
    return m_stored_value_id_isSet;
}

bool OAIStoredValueAccountID::is_stored_value_id_Valid() const{
    return m_stored_value_id_isValid;
}

QString OAIStoredValueAccountID::getStoredValueProvider() const {
    return m_stored_value_provider;
}
void OAIStoredValueAccountID::setStoredValueProvider(const QString &stored_value_provider) {
    m_stored_value_provider = stored_value_provider;
    m_stored_value_provider_isSet = true;
}

bool OAIStoredValueAccountID::is_stored_value_provider_Set() const{
    return m_stored_value_provider_isSet;
}

bool OAIStoredValueAccountID::is_stored_value_provider_Valid() const{
    return m_stored_value_provider_isValid;
}

bool OAIStoredValueAccountID::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entry_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_account_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredValueAccountID::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entry_mode_isValid && m_identification_type_isValid && m_stored_value_account_type_isValid && m_stored_value_id_isValid && true;
}

} // namespace OpenAPI
