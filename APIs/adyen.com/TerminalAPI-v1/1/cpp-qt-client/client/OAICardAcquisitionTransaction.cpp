/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardAcquisitionTransaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardAcquisitionTransaction::OAICardAcquisitionTransaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardAcquisitionTransaction::OAICardAcquisitionTransaction() {
    this->initializeModel();
}

OAICardAcquisitionTransaction::~OAICardAcquisitionTransaction() {}

void OAICardAcquisitionTransaction::initializeModel() {

    m_allowed_loyalty_brand_isSet = false;
    m_allowed_loyalty_brand_isValid = false;

    m_allowed_payment_brand_isSet = false;
    m_allowed_payment_brand_isValid = false;

    m_cash_back_flag_isSet = false;
    m_cash_back_flag_isValid = false;

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_force_customer_selection_flag_isSet = false;
    m_force_customer_selection_flag_isValid = false;

    m_force_entry_mode_isSet = false;
    m_force_entry_mode_isValid = false;

    m_loyalty_handling_isSet = false;
    m_loyalty_handling_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAICardAcquisitionTransaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardAcquisitionTransaction::fromJsonObject(QJsonObject json) {

    m_allowed_loyalty_brand_isValid = ::OpenAPI::fromJsonValue(m_allowed_loyalty_brand, json[QString("AllowedLoyaltyBrand")]);
    m_allowed_loyalty_brand_isSet = !json[QString("AllowedLoyaltyBrand")].isNull() && m_allowed_loyalty_brand_isValid;

    m_allowed_payment_brand_isValid = ::OpenAPI::fromJsonValue(m_allowed_payment_brand, json[QString("AllowedPaymentBrand")]);
    m_allowed_payment_brand_isSet = !json[QString("AllowedPaymentBrand")].isNull() && m_allowed_payment_brand_isValid;

    m_cash_back_flag_isValid = ::OpenAPI::fromJsonValue(m_cash_back_flag, json[QString("CashBackFlag")]);
    m_cash_back_flag_isSet = !json[QString("CashBackFlag")].isNull() && m_cash_back_flag_isValid;

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_force_customer_selection_flag_isValid = ::OpenAPI::fromJsonValue(m_force_customer_selection_flag, json[QString("ForceCustomerSelectionFlag")]);
    m_force_customer_selection_flag_isSet = !json[QString("ForceCustomerSelectionFlag")].isNull() && m_force_customer_selection_flag_isValid;

    m_force_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_force_entry_mode, json[QString("ForceEntryMode")]);
    m_force_entry_mode_isSet = !json[QString("ForceEntryMode")].isNull() && m_force_entry_mode_isValid;

    m_loyalty_handling_isValid = ::OpenAPI::fromJsonValue(m_loyalty_handling, json[QString("LoyaltyHandling")]);
    m_loyalty_handling_isSet = !json[QString("LoyaltyHandling")].isNull() && m_loyalty_handling_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("PaymentType")]);
    m_payment_type_isSet = !json[QString("PaymentType")].isNull() && m_payment_type_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("TotalAmount")]);
    m_total_amount_isSet = !json[QString("TotalAmount")].isNull() && m_total_amount_isValid;
}

QString OAICardAcquisitionTransaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardAcquisitionTransaction::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_loyalty_brand.size() > 0) {
        obj.insert(QString("AllowedLoyaltyBrand"), ::OpenAPI::toJsonValue(m_allowed_loyalty_brand));
    }
    if (m_allowed_payment_brand.size() > 0) {
        obj.insert(QString("AllowedPaymentBrand"), ::OpenAPI::toJsonValue(m_allowed_payment_brand));
    }
    if (m_cash_back_flag_isSet) {
        obj.insert(QString("CashBackFlag"), ::OpenAPI::toJsonValue(m_cash_back_flag));
    }
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_force_customer_selection_flag_isSet) {
        obj.insert(QString("ForceCustomerSelectionFlag"), ::OpenAPI::toJsonValue(m_force_customer_selection_flag));
    }
    if (m_force_entry_mode.size() > 0) {
        obj.insert(QString("ForceEntryMode"), ::OpenAPI::toJsonValue(m_force_entry_mode));
    }
    if (m_loyalty_handling.isSet()) {
        obj.insert(QString("LoyaltyHandling"), ::OpenAPI::toJsonValue(m_loyalty_handling));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("PaymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("TotalAmount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

QList<QString> OAICardAcquisitionTransaction::getAllowedLoyaltyBrand() const {
    return m_allowed_loyalty_brand;
}
void OAICardAcquisitionTransaction::setAllowedLoyaltyBrand(const QList<QString> &allowed_loyalty_brand) {
    m_allowed_loyalty_brand = allowed_loyalty_brand;
    m_allowed_loyalty_brand_isSet = true;
}

bool OAICardAcquisitionTransaction::is_allowed_loyalty_brand_Set() const{
    return m_allowed_loyalty_brand_isSet;
}

bool OAICardAcquisitionTransaction::is_allowed_loyalty_brand_Valid() const{
    return m_allowed_loyalty_brand_isValid;
}

QList<QString> OAICardAcquisitionTransaction::getAllowedPaymentBrand() const {
    return m_allowed_payment_brand;
}
void OAICardAcquisitionTransaction::setAllowedPaymentBrand(const QList<QString> &allowed_payment_brand) {
    m_allowed_payment_brand = allowed_payment_brand;
    m_allowed_payment_brand_isSet = true;
}

bool OAICardAcquisitionTransaction::is_allowed_payment_brand_Set() const{
    return m_allowed_payment_brand_isSet;
}

bool OAICardAcquisitionTransaction::is_allowed_payment_brand_Valid() const{
    return m_allowed_payment_brand_isValid;
}

bool OAICardAcquisitionTransaction::isCashBackFlag() const {
    return m_cash_back_flag;
}
void OAICardAcquisitionTransaction::setCashBackFlag(const bool &cash_back_flag) {
    m_cash_back_flag = cash_back_flag;
    m_cash_back_flag_isSet = true;
}

bool OAICardAcquisitionTransaction::is_cash_back_flag_Set() const{
    return m_cash_back_flag_isSet;
}

bool OAICardAcquisitionTransaction::is_cash_back_flag_Valid() const{
    return m_cash_back_flag_isValid;
}

QString OAICardAcquisitionTransaction::getCustomerLanguage() const {
    return m_customer_language;
}
void OAICardAcquisitionTransaction::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAICardAcquisitionTransaction::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAICardAcquisitionTransaction::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

bool OAICardAcquisitionTransaction::isForceCustomerSelectionFlag() const {
    return m_force_customer_selection_flag;
}
void OAICardAcquisitionTransaction::setForceCustomerSelectionFlag(const bool &force_customer_selection_flag) {
    m_force_customer_selection_flag = force_customer_selection_flag;
    m_force_customer_selection_flag_isSet = true;
}

bool OAICardAcquisitionTransaction::is_force_customer_selection_flag_Set() const{
    return m_force_customer_selection_flag_isSet;
}

bool OAICardAcquisitionTransaction::is_force_customer_selection_flag_Valid() const{
    return m_force_customer_selection_flag_isValid;
}

QList<QString> OAICardAcquisitionTransaction::getForceEntryMode() const {
    return m_force_entry_mode;
}
void OAICardAcquisitionTransaction::setForceEntryMode(const QList<QString> &force_entry_mode) {
    m_force_entry_mode = force_entry_mode;
    m_force_entry_mode_isSet = true;
}

bool OAICardAcquisitionTransaction::is_force_entry_mode_Set() const{
    return m_force_entry_mode_isSet;
}

bool OAICardAcquisitionTransaction::is_force_entry_mode_Valid() const{
    return m_force_entry_mode_isValid;
}

OAILoyaltyHandling OAICardAcquisitionTransaction::getLoyaltyHandling() const {
    return m_loyalty_handling;
}
void OAICardAcquisitionTransaction::setLoyaltyHandling(const OAILoyaltyHandling &loyalty_handling) {
    m_loyalty_handling = loyalty_handling;
    m_loyalty_handling_isSet = true;
}

bool OAICardAcquisitionTransaction::is_loyalty_handling_Set() const{
    return m_loyalty_handling_isSet;
}

bool OAICardAcquisitionTransaction::is_loyalty_handling_Valid() const{
    return m_loyalty_handling_isValid;
}

OAIPaymentType OAICardAcquisitionTransaction::getPaymentType() const {
    return m_payment_type;
}
void OAICardAcquisitionTransaction::setPaymentType(const OAIPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAICardAcquisitionTransaction::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAICardAcquisitionTransaction::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

double OAICardAcquisitionTransaction::getTotalAmount() const {
    return m_total_amount;
}
void OAICardAcquisitionTransaction::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAICardAcquisitionTransaction::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAICardAcquisitionTransaction::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAICardAcquisitionTransaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_loyalty_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_payment_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_back_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_customer_selection_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_entry_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_handling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardAcquisitionTransaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
