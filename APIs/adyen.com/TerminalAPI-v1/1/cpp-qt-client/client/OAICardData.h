/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICardData.h
 *
 * Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.
 */

#ifndef OAICardData_H
#define OAICardData_H

#include <QJsonObject>

#include "OAIAllowedProduct.h"
#include "OAICustomerOrder.h"
#include "OAIPaymentToken.h"
#include "OAISensitiveCardData.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAllowedProduct;
class OAICustomerOrder;
class OAIPaymentToken;
class OAISensitiveCardData;

class OAICardData : public OAIObject {
public:
    OAICardData();
    OAICardData(QString json);
    ~OAICardData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAllowedProduct> getAllowedProduct() const;
    void setAllowedProduct(const QList<OAIAllowedProduct> &allowed_product);
    bool is_allowed_product_Set() const;
    bool is_allowed_product_Valid() const;

    QList<qint32> getAllowedProductCode() const;
    void setAllowedProductCode(const QList<qint32> &allowed_product_code);
    bool is_allowed_product_code_Set() const;
    bool is_allowed_product_code_Valid() const;

    qint32 getCardCountryCode() const;
    void setCardCountryCode(const qint32 &card_country_code);
    bool is_card_country_code_Set() const;
    bool is_card_country_code_Valid() const;

    QList<OAICustomerOrder> getCustomerOrder() const;
    void setCustomerOrder(const QList<OAICustomerOrder> &customer_order);
    bool is_customer_order_Set() const;
    bool is_customer_order_Valid() const;

    QList<QString> getEntryMode() const;
    void setEntryMode(const QList<QString> &entry_mode);
    bool is_entry_mode_Set() const;
    bool is_entry_mode_Valid() const;

    QString getMaskedPan() const;
    void setMaskedPan(const QString &masked_pan);
    bool is_masked_pan_Set() const;
    bool is_masked_pan_Valid() const;

    QString getPaymentAccountRef() const;
    void setPaymentAccountRef(const QString &payment_account_ref);
    bool is_payment_account_ref_Set() const;
    bool is_payment_account_ref_Valid() const;

    QString getPaymentBrand() const;
    void setPaymentBrand(const QString &payment_brand);
    bool is_payment_brand_Set() const;
    bool is_payment_brand_Valid() const;

    OAIPaymentToken getPaymentToken() const;
    void setPaymentToken(const OAIPaymentToken &payment_token);
    bool is_payment_token_Set() const;
    bool is_payment_token_Valid() const;

    QString getProtectedCardData() const;
    void setProtectedCardData(const QString &protected_card_data);
    bool is_protected_card_data_Set() const;
    bool is_protected_card_data_Valid() const;

    OAISensitiveCardData getSensitiveCardData() const;
    void setSensitiveCardData(const OAISensitiveCardData &sensitive_card_data);
    bool is_sensitive_card_data_Set() const;
    bool is_sensitive_card_data_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAllowedProduct> m_allowed_product;
    bool m_allowed_product_isSet;
    bool m_allowed_product_isValid;

    QList<qint32> m_allowed_product_code;
    bool m_allowed_product_code_isSet;
    bool m_allowed_product_code_isValid;

    qint32 m_card_country_code;
    bool m_card_country_code_isSet;
    bool m_card_country_code_isValid;

    QList<OAICustomerOrder> m_customer_order;
    bool m_customer_order_isSet;
    bool m_customer_order_isValid;

    QList<QString> m_entry_mode;
    bool m_entry_mode_isSet;
    bool m_entry_mode_isValid;

    QString m_masked_pan;
    bool m_masked_pan_isSet;
    bool m_masked_pan_isValid;

    QString m_payment_account_ref;
    bool m_payment_account_ref_isSet;
    bool m_payment_account_ref_isValid;

    QString m_payment_brand;
    bool m_payment_brand_isSet;
    bool m_payment_brand_isValid;

    OAIPaymentToken m_payment_token;
    bool m_payment_token_isSet;
    bool m_payment_token_isValid;

    QString m_protected_card_data;
    bool m_protected_card_data_isSet;
    bool m_protected_card_data_isValid;

    OAISensitiveCardData m_sensitive_card_data;
    bool m_sensitive_card_data_isSet;
    bool m_sensitive_card_data_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICardData)

#endif // OAICardData_H
