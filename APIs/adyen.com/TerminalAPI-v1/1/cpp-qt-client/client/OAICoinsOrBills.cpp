/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICoinsOrBills.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICoinsOrBills::OAICoinsOrBills(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICoinsOrBills::OAICoinsOrBills() {
    this->initializeModel();
}

OAICoinsOrBills::~OAICoinsOrBills() {}

void OAICoinsOrBills::initializeModel() {

    m_number_isSet = false;
    m_number_isValid = false;

    m_unit_value_isSet = false;
    m_unit_value_isValid = false;
}

void OAICoinsOrBills::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICoinsOrBills::fromJsonObject(QJsonObject json) {

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_unit_value_isValid = ::OpenAPI::fromJsonValue(m_unit_value, json[QString("UnitValue")]);
    m_unit_value_isSet = !json[QString("UnitValue")].isNull() && m_unit_value_isValid;
}

QString OAICoinsOrBills::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICoinsOrBills::asJsonObject() const {
    QJsonObject obj;
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_unit_value_isSet) {
        obj.insert(QString("UnitValue"), ::OpenAPI::toJsonValue(m_unit_value));
    }
    return obj;
}

qint32 OAICoinsOrBills::getNumber() const {
    return m_number;
}
void OAICoinsOrBills::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAICoinsOrBills::is_number_Set() const{
    return m_number_isSet;
}

bool OAICoinsOrBills::is_number_Valid() const{
    return m_number_isValid;
}

double OAICoinsOrBills::getUnitValue() const {
    return m_unit_value;
}
void OAICoinsOrBills::setUnitValue(const double &unit_value) {
    m_unit_value = unit_value;
    m_unit_value_isSet = true;
}

bool OAICoinsOrBills::is_unit_value_Set() const{
    return m_unit_value_isSet;
}

bool OAICoinsOrBills::is_unit_value_Valid() const{
    return m_unit_value_isValid;
}

bool OAICoinsOrBills::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICoinsOrBills::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_number_isValid && m_unit_value_isValid && true;
}

} // namespace OpenAPI
