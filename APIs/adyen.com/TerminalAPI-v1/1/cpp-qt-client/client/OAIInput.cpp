/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput::OAIInput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput::OAIInput() {
    this->initializeModel();
}

OAIInput::~OAIInput() {}

void OAIInput::initializeModel() {

    m_confirmed_flag_isSet = false;
    m_confirmed_flag_isValid = false;

    m_digit_input_isSet = false;
    m_digit_input_isValid = false;

    m_function_key_isSet = false;
    m_function_key_isValid = false;

    m_input_command_isSet = false;
    m_input_command_isValid = false;

    m_menu_entry_number_isSet = false;
    m_menu_entry_number_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_text_input_isSet = false;
    m_text_input_isValid = false;
}

void OAIInput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput::fromJsonObject(QJsonObject json) {

    m_confirmed_flag_isValid = ::OpenAPI::fromJsonValue(m_confirmed_flag, json[QString("ConfirmedFlag")]);
    m_confirmed_flag_isSet = !json[QString("ConfirmedFlag")].isNull() && m_confirmed_flag_isValid;

    m_digit_input_isValid = ::OpenAPI::fromJsonValue(m_digit_input, json[QString("DigitInput")]);
    m_digit_input_isSet = !json[QString("DigitInput")].isNull() && m_digit_input_isValid;

    m_function_key_isValid = ::OpenAPI::fromJsonValue(m_function_key, json[QString("FunctionKey")]);
    m_function_key_isSet = !json[QString("FunctionKey")].isNull() && m_function_key_isValid;

    m_input_command_isValid = ::OpenAPI::fromJsonValue(m_input_command, json[QString("InputCommand")]);
    m_input_command_isSet = !json[QString("InputCommand")].isNull() && m_input_command_isValid;

    m_menu_entry_number_isValid = ::OpenAPI::fromJsonValue(m_menu_entry_number, json[QString("MenuEntryNumber")]);
    m_menu_entry_number_isSet = !json[QString("MenuEntryNumber")].isNull() && m_menu_entry_number_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("Password")]);
    m_password_isSet = !json[QString("Password")].isNull() && m_password_isValid;

    m_text_input_isValid = ::OpenAPI::fromJsonValue(m_text_input, json[QString("TextInput")]);
    m_text_input_isSet = !json[QString("TextInput")].isNull() && m_text_input_isValid;
}

QString OAIInput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmed_flag_isSet) {
        obj.insert(QString("ConfirmedFlag"), ::OpenAPI::toJsonValue(m_confirmed_flag));
    }
    if (m_digit_input_isSet) {
        obj.insert(QString("DigitInput"), ::OpenAPI::toJsonValue(m_digit_input));
    }
    if (m_function_key_isSet) {
        obj.insert(QString("FunctionKey"), ::OpenAPI::toJsonValue(m_function_key));
    }
    if (m_input_command.isSet()) {
        obj.insert(QString("InputCommand"), ::OpenAPI::toJsonValue(m_input_command));
    }
    if (m_menu_entry_number.size() > 0) {
        obj.insert(QString("MenuEntryNumber"), ::OpenAPI::toJsonValue(m_menu_entry_number));
    }
    if (m_password_isSet) {
        obj.insert(QString("Password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_text_input_isSet) {
        obj.insert(QString("TextInput"), ::OpenAPI::toJsonValue(m_text_input));
    }
    return obj;
}

bool OAIInput::isConfirmedFlag() const {
    return m_confirmed_flag;
}
void OAIInput::setConfirmedFlag(const bool &confirmed_flag) {
    m_confirmed_flag = confirmed_flag;
    m_confirmed_flag_isSet = true;
}

bool OAIInput::is_confirmed_flag_Set() const{
    return m_confirmed_flag_isSet;
}

bool OAIInput::is_confirmed_flag_Valid() const{
    return m_confirmed_flag_isValid;
}

qint32 OAIInput::getDigitInput() const {
    return m_digit_input;
}
void OAIInput::setDigitInput(const qint32 &digit_input) {
    m_digit_input = digit_input;
    m_digit_input_isSet = true;
}

bool OAIInput::is_digit_input_Set() const{
    return m_digit_input_isSet;
}

bool OAIInput::is_digit_input_Valid() const{
    return m_digit_input_isValid;
}

qint32 OAIInput::getFunctionKey() const {
    return m_function_key;
}
void OAIInput::setFunctionKey(const qint32 &function_key) {
    m_function_key = function_key;
    m_function_key_isSet = true;
}

bool OAIInput::is_function_key_Set() const{
    return m_function_key_isSet;
}

bool OAIInput::is_function_key_Valid() const{
    return m_function_key_isValid;
}

OAIInputCommand OAIInput::getInputCommand() const {
    return m_input_command;
}
void OAIInput::setInputCommand(const OAIInputCommand &input_command) {
    m_input_command = input_command;
    m_input_command_isSet = true;
}

bool OAIInput::is_input_command_Set() const{
    return m_input_command_isSet;
}

bool OAIInput::is_input_command_Valid() const{
    return m_input_command_isValid;
}

QList<qint32> OAIInput::getMenuEntryNumber() const {
    return m_menu_entry_number;
}
void OAIInput::setMenuEntryNumber(const QList<qint32> &menu_entry_number) {
    m_menu_entry_number = menu_entry_number;
    m_menu_entry_number_isSet = true;
}

bool OAIInput::is_menu_entry_number_Set() const{
    return m_menu_entry_number_isSet;
}

bool OAIInput::is_menu_entry_number_Valid() const{
    return m_menu_entry_number_isValid;
}

QString OAIInput::getPassword() const {
    return m_password;
}
void OAIInput::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIInput::is_password_Set() const{
    return m_password_isSet;
}

bool OAIInput::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIInput::getTextInput() const {
    return m_text_input;
}
void OAIInput::setTextInput(const QString &text_input) {
    m_text_input = text_input;
    m_text_input_isSet = true;
}

bool OAIInput::is_text_input_Set() const{
    return m_text_input_isSet;
}

bool OAIInput::is_text_input_Valid() const{
    return m_text_input_isValid;
}

bool OAIInput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmed_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_digit_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_function_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_entry_number.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_input_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_input_command_isValid && true;
}

} // namespace OpenAPI
