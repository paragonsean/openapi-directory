/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnosisRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnosisRequest::OAIDiagnosisRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnosisRequest::OAIDiagnosisRequest() {
    this->initializeModel();
}

OAIDiagnosisRequest::~OAIDiagnosisRequest() {}

void OAIDiagnosisRequest::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_host_diagnosis_flag_isSet = false;
    m_host_diagnosis_flag_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;
}

void OAIDiagnosisRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnosisRequest::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_host_diagnosis_flag_isValid = ::OpenAPI::fromJsonValue(m_host_diagnosis_flag, json[QString("HostDiagnosisFlag")]);
    m_host_diagnosis_flag_isSet = !json[QString("HostDiagnosisFlag")].isNull() && m_host_diagnosis_flag_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;
}

QString OAIDiagnosisRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnosisRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id.size() > 0) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_host_diagnosis_flag_isSet) {
        obj.insert(QString("HostDiagnosisFlag"), ::OpenAPI::toJsonValue(m_host_diagnosis_flag));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    return obj;
}

QList<qint32> OAIDiagnosisRequest::getAcquirerId() const {
    return m_acquirer_id;
}
void OAIDiagnosisRequest::setAcquirerId(const QList<qint32> &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAIDiagnosisRequest::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAIDiagnosisRequest::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

bool OAIDiagnosisRequest::isHostDiagnosisFlag() const {
    return m_host_diagnosis_flag;
}
void OAIDiagnosisRequest::setHostDiagnosisFlag(const bool &host_diagnosis_flag) {
    m_host_diagnosis_flag = host_diagnosis_flag;
    m_host_diagnosis_flag_isSet = true;
}

bool OAIDiagnosisRequest::is_host_diagnosis_flag_Set() const{
    return m_host_diagnosis_flag_isSet;
}

bool OAIDiagnosisRequest::is_host_diagnosis_flag_Valid() const{
    return m_host_diagnosis_flag_isValid;
}

QString OAIDiagnosisRequest::getPoiid() const {
    return m_poiid;
}
void OAIDiagnosisRequest::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAIDiagnosisRequest::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAIDiagnosisRequest::is_poiid_Valid() const{
    return m_poiid_isValid;
}

bool OAIDiagnosisRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_diagnosis_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnosisRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
