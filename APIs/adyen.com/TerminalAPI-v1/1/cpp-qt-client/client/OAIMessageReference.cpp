/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageReference::OAIMessageReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageReference::OAIMessageReference() {
    this->initializeModel();
}

OAIMessageReference::~OAIMessageReference() {}

void OAIMessageReference::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_message_category_isSet = false;
    m_message_category_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;

    m_sale_id_isSet = false;
    m_sale_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAIMessageReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageReference::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceID")]);
    m_device_id_isSet = !json[QString("DeviceID")].isNull() && m_device_id_isValid;

    m_message_category_isValid = ::OpenAPI::fromJsonValue(m_message_category, json[QString("MessageCategory")]);
    m_message_category_isSet = !json[QString("MessageCategory")].isNull() && m_message_category_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;

    m_sale_id_isValid = ::OpenAPI::fromJsonValue(m_sale_id, json[QString("SaleID")]);
    m_sale_id_isSet = !json[QString("SaleID")].isNull() && m_sale_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceID")]);
    m_service_id_isSet = !json[QString("ServiceID")].isNull() && m_service_id_isValid;
}

QString OAIMessageReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageReference::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceID"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_message_category.isSet()) {
        obj.insert(QString("MessageCategory"), ::OpenAPI::toJsonValue(m_message_category));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    if (m_sale_id_isSet) {
        obj.insert(QString("SaleID"), ::OpenAPI::toJsonValue(m_sale_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceID"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

QString OAIMessageReference::getDeviceId() const {
    return m_device_id;
}
void OAIMessageReference::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIMessageReference::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIMessageReference::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIMessageCategory OAIMessageReference::getMessageCategory() const {
    return m_message_category;
}
void OAIMessageReference::setMessageCategory(const OAIMessageCategory &message_category) {
    m_message_category = message_category;
    m_message_category_isSet = true;
}

bool OAIMessageReference::is_message_category_Set() const{
    return m_message_category_isSet;
}

bool OAIMessageReference::is_message_category_Valid() const{
    return m_message_category_isValid;
}

QString OAIMessageReference::getPoiid() const {
    return m_poiid;
}
void OAIMessageReference::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAIMessageReference::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAIMessageReference::is_poiid_Valid() const{
    return m_poiid_isValid;
}

QString OAIMessageReference::getSaleId() const {
    return m_sale_id;
}
void OAIMessageReference::setSaleId(const QString &sale_id) {
    m_sale_id = sale_id;
    m_sale_id_isSet = true;
}

bool OAIMessageReference::is_sale_id_Set() const{
    return m_sale_id_isSet;
}

bool OAIMessageReference::is_sale_id_Valid() const{
    return m_sale_id_isValid;
}

QString OAIMessageReference::getServiceId() const {
    return m_service_id;
}
void OAIMessageReference::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIMessageReference::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIMessageReference::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAIMessageReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
