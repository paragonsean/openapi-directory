/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransactionTotals.h
 *
 * If Result is Success, contains all the totals, classified as required by the Sale in the message request. At least, transaction totals are provided per Acquirer, Acquirer Settlement, and Card Brand. Result of the Sale to POI Reconciliation processing.
 */

#ifndef OAITransactionTotals_H
#define OAITransactionTotals_H

#include <QJsonObject>

#include "OAILoyaltyTotals.h"
#include "OAILoyaltyUnit.h"
#include "OAIPaymentInstrumentType.h"
#include "OAIPaymentTotals.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILoyaltyTotals;
class OAIPaymentTotals;

class OAITransactionTotals : public OAIObject {
public:
    OAITransactionTotals();
    OAITransactionTotals(QString json);
    ~OAITransactionTotals() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAcquirerId() const;
    void setAcquirerId(const qint32 &acquirer_id);
    bool is_acquirer_id_Set() const;
    bool is_acquirer_id_Valid() const;

    QString getCardBrand() const;
    void setCardBrand(const QString &card_brand);
    bool is_card_brand_Set() const;
    bool is_card_brand_Valid() const;

    QString getHostReconciliationId() const;
    void setHostReconciliationId(const QString &host_reconciliation_id);
    bool is_host_reconciliation_id_Set() const;
    bool is_host_reconciliation_id_Valid() const;

    QString getLoyaltyCurrency() const;
    void setLoyaltyCurrency(const QString &loyalty_currency);
    bool is_loyalty_currency_Set() const;
    bool is_loyalty_currency_Valid() const;

    QList<OAILoyaltyTotals> getLoyaltyTotals() const;
    void setLoyaltyTotals(const QList<OAILoyaltyTotals> &loyalty_totals);
    bool is_loyalty_totals_Set() const;
    bool is_loyalty_totals_Valid() const;

    OAILoyaltyUnit getLoyaltyUnit() const;
    void setLoyaltyUnit(const OAILoyaltyUnit &loyalty_unit);
    bool is_loyalty_unit_Set() const;
    bool is_loyalty_unit_Valid() const;

    QString getOperatorId() const;
    void setOperatorId(const QString &operator_id);
    bool is_operator_id_Set() const;
    bool is_operator_id_Valid() const;

    QString getPoiid() const;
    void setPoiid(const QString &poiid);
    bool is_poiid_Set() const;
    bool is_poiid_Valid() const;

    QString getPaymentCurrency() const;
    void setPaymentCurrency(const QString &payment_currency);
    bool is_payment_currency_Set() const;
    bool is_payment_currency_Valid() const;

    OAIPaymentInstrumentType getPaymentInstrumentType() const;
    void setPaymentInstrumentType(const OAIPaymentInstrumentType &payment_instrument_type);
    bool is_payment_instrument_type_Set() const;
    bool is_payment_instrument_type_Valid() const;

    QList<OAIPaymentTotals> getPaymentTotals() const;
    void setPaymentTotals(const QList<OAIPaymentTotals> &payment_totals);
    bool is_payment_totals_Set() const;
    bool is_payment_totals_Valid() const;

    QString getSaleId() const;
    void setSaleId(const QString &sale_id);
    bool is_sale_id_Set() const;
    bool is_sale_id_Valid() const;

    QString getShiftNumber() const;
    void setShiftNumber(const QString &shift_number);
    bool is_shift_number_Set() const;
    bool is_shift_number_Valid() const;

    QString getTotalsGroupId() const;
    void setTotalsGroupId(const QString &totals_group_id);
    bool is_totals_group_id_Set() const;
    bool is_totals_group_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_acquirer_id;
    bool m_acquirer_id_isSet;
    bool m_acquirer_id_isValid;

    QString m_card_brand;
    bool m_card_brand_isSet;
    bool m_card_brand_isValid;

    QString m_host_reconciliation_id;
    bool m_host_reconciliation_id_isSet;
    bool m_host_reconciliation_id_isValid;

    QString m_loyalty_currency;
    bool m_loyalty_currency_isSet;
    bool m_loyalty_currency_isValid;

    QList<OAILoyaltyTotals> m_loyalty_totals;
    bool m_loyalty_totals_isSet;
    bool m_loyalty_totals_isValid;

    OAILoyaltyUnit m_loyalty_unit;
    bool m_loyalty_unit_isSet;
    bool m_loyalty_unit_isValid;

    QString m_operator_id;
    bool m_operator_id_isSet;
    bool m_operator_id_isValid;

    QString m_poiid;
    bool m_poiid_isSet;
    bool m_poiid_isValid;

    QString m_payment_currency;
    bool m_payment_currency_isSet;
    bool m_payment_currency_isValid;

    OAIPaymentInstrumentType m_payment_instrument_type;
    bool m_payment_instrument_type_isSet;
    bool m_payment_instrument_type_isValid;

    QList<OAIPaymentTotals> m_payment_totals;
    bool m_payment_totals_isSet;
    bool m_payment_totals_isValid;

    QString m_sale_id;
    bool m_sale_id_isSet;
    bool m_sale_id_isValid;

    QString m_shift_number;
    bool m_shift_number_isSet;
    bool m_shift_number_isValid;

    QString m_totals_group_id;
    bool m_totals_group_id_isSet;
    bool m_totals_group_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransactionTotals)

#endif // OAITransactionTotals_H
