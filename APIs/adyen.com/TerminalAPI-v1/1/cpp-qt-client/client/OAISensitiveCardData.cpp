/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensitiveCardData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensitiveCardData::OAISensitiveCardData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensitiveCardData::OAISensitiveCardData() {
    this->initializeModel();
}

OAISensitiveCardData::~OAISensitiveCardData() {}

void OAISensitiveCardData::initializeModel() {

    m_card_seq_numb_isSet = false;
    m_card_seq_numb_isValid = false;

    m_expiry_date_isSet = false;
    m_expiry_date_isValid = false;

    m_pan_isSet = false;
    m_pan_isValid = false;

    m_track_data_isSet = false;
    m_track_data_isValid = false;
}

void OAISensitiveCardData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISensitiveCardData::fromJsonObject(QJsonObject json) {

    m_card_seq_numb_isValid = ::OpenAPI::fromJsonValue(m_card_seq_numb, json[QString("CardSeqNumb")]);
    m_card_seq_numb_isSet = !json[QString("CardSeqNumb")].isNull() && m_card_seq_numb_isValid;

    m_expiry_date_isValid = ::OpenAPI::fromJsonValue(m_expiry_date, json[QString("ExpiryDate")]);
    m_expiry_date_isSet = !json[QString("ExpiryDate")].isNull() && m_expiry_date_isValid;

    m_pan_isValid = ::OpenAPI::fromJsonValue(m_pan, json[QString("PAN")]);
    m_pan_isSet = !json[QString("PAN")].isNull() && m_pan_isValid;

    m_track_data_isValid = ::OpenAPI::fromJsonValue(m_track_data, json[QString("TrackData")]);
    m_track_data_isSet = !json[QString("TrackData")].isNull() && m_track_data_isValid;
}

QString OAISensitiveCardData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISensitiveCardData::asJsonObject() const {
    QJsonObject obj;
    if (m_card_seq_numb_isSet) {
        obj.insert(QString("CardSeqNumb"), ::OpenAPI::toJsonValue(m_card_seq_numb));
    }
    if (m_expiry_date_isSet) {
        obj.insert(QString("ExpiryDate"), ::OpenAPI::toJsonValue(m_expiry_date));
    }
    if (m_pan_isSet) {
        obj.insert(QString("PAN"), ::OpenAPI::toJsonValue(m_pan));
    }
    if (m_track_data.size() > 0) {
        obj.insert(QString("TrackData"), ::OpenAPI::toJsonValue(m_track_data));
    }
    return obj;
}

qint32 OAISensitiveCardData::getCardSeqNumb() const {
    return m_card_seq_numb;
}
void OAISensitiveCardData::setCardSeqNumb(const qint32 &card_seq_numb) {
    m_card_seq_numb = card_seq_numb;
    m_card_seq_numb_isSet = true;
}

bool OAISensitiveCardData::is_card_seq_numb_Set() const{
    return m_card_seq_numb_isSet;
}

bool OAISensitiveCardData::is_card_seq_numb_Valid() const{
    return m_card_seq_numb_isValid;
}

qint32 OAISensitiveCardData::getExpiryDate() const {
    return m_expiry_date;
}
void OAISensitiveCardData::setExpiryDate(const qint32 &expiry_date) {
    m_expiry_date = expiry_date;
    m_expiry_date_isSet = true;
}

bool OAISensitiveCardData::is_expiry_date_Set() const{
    return m_expiry_date_isSet;
}

bool OAISensitiveCardData::is_expiry_date_Valid() const{
    return m_expiry_date_isValid;
}

qint32 OAISensitiveCardData::getPan() const {
    return m_pan;
}
void OAISensitiveCardData::setPan(const qint32 &pan) {
    m_pan = pan;
    m_pan_isSet = true;
}

bool OAISensitiveCardData::is_pan_Set() const{
    return m_pan_isSet;
}

bool OAISensitiveCardData::is_pan_Valid() const{
    return m_pan_isValid;
}

QList<OAITrackData> OAISensitiveCardData::getTrackData() const {
    return m_track_data;
}
void OAISensitiveCardData::setTrackData(const QList<OAITrackData> &track_data) {
    m_track_data = track_data;
    m_track_data_isSet = true;
}

bool OAISensitiveCardData::is_track_data_Set() const{
    return m_track_data_isSet;
}

bool OAISensitiveCardData::is_track_data_Valid() const{
    return m_track_data_isValid;
}

bool OAISensitiveCardData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_seq_numb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISensitiveCardData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
