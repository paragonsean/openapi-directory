/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITransactionConditions.h
 *
 * Conditions on which the transaction must be processed.
 */

#ifndef OAITransactionConditions_H
#define OAITransactionConditions_H

#include <QJsonObject>

#include "OAILoyaltyHandling.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITransactionConditions : public OAIObject {
public:
    OAITransactionConditions();
    OAITransactionConditions(QString json);
    ~OAITransactionConditions() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<qint32> getAcquirerId() const;
    void setAcquirerId(const QList<qint32> &acquirer_id);
    bool is_acquirer_id_Set() const;
    bool is_acquirer_id_Valid() const;

    QList<QString> getAllowedLoyaltyBrand() const;
    void setAllowedLoyaltyBrand(const QList<QString> &allowed_loyalty_brand);
    bool is_allowed_loyalty_brand_Set() const;
    bool is_allowed_loyalty_brand_Valid() const;

    QList<QString> getAllowedPaymentBrand() const;
    void setAllowedPaymentBrand(const QList<QString> &allowed_payment_brand);
    bool is_allowed_payment_brand_Set() const;
    bool is_allowed_payment_brand_Valid() const;

    QString getCustomerLanguage() const;
    void setCustomerLanguage(const QString &customer_language);
    bool is_customer_language_Set() const;
    bool is_customer_language_Valid() const;

    bool isDebitPreferredFlag() const;
    void setDebitPreferredFlag(const bool &debit_preferred_flag);
    bool is_debit_preferred_flag_Set() const;
    bool is_debit_preferred_flag_Valid() const;

    QList<QString> getForceEntryMode() const;
    void setForceEntryMode(const QList<QString> &force_entry_mode);
    bool is_force_entry_mode_Set() const;
    bool is_force_entry_mode_Valid() const;

    bool isForceOnlineFlag() const;
    void setForceOnlineFlag(const bool &force_online_flag);
    bool is_force_online_flag_Set() const;
    bool is_force_online_flag_Valid() const;

    OAILoyaltyHandling getLoyaltyHandling() const;
    void setLoyaltyHandling(const OAILoyaltyHandling &loyalty_handling);
    bool is_loyalty_handling_Set() const;
    bool is_loyalty_handling_Valid() const;

    QString getMerchantCategoryCode() const;
    void setMerchantCategoryCode(const QString &merchant_category_code);
    bool is_merchant_category_code_Set() const;
    bool is_merchant_category_code_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<qint32> m_acquirer_id;
    bool m_acquirer_id_isSet;
    bool m_acquirer_id_isValid;

    QList<QString> m_allowed_loyalty_brand;
    bool m_allowed_loyalty_brand_isSet;
    bool m_allowed_loyalty_brand_isValid;

    QList<QString> m_allowed_payment_brand;
    bool m_allowed_payment_brand_isSet;
    bool m_allowed_payment_brand_isValid;

    QString m_customer_language;
    bool m_customer_language_isSet;
    bool m_customer_language_isValid;

    bool m_debit_preferred_flag;
    bool m_debit_preferred_flag_isSet;
    bool m_debit_preferred_flag_isValid;

    QList<QString> m_force_entry_mode;
    bool m_force_entry_mode_isSet;
    bool m_force_entry_mode_isValid;

    bool m_force_online_flag;
    bool m_force_online_flag_isSet;
    bool m_force_online_flag_isValid;

    OAILoyaltyHandling m_loyalty_handling;
    bool m_loyalty_handling_isSet;
    bool m_loyalty_handling_isValid;

    QString m_merchant_category_code;
    bool m_merchant_category_code_isSet;
    bool m_merchant_category_code_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITransactionConditions)

#endif // OAITransactionConditions_H
