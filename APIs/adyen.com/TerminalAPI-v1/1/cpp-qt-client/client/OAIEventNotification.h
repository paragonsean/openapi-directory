/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEventNotification.h
 *
 * It conveys Information related to the event, and possible action (maintenance, message to display). Content of the EventNotification message.
 */

#ifndef OAIEventNotification_H
#define OAIEventNotification_H

#include <QJsonObject>

#include "OAIDisplayOutput.h"
#include "OAIEventToNotify.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDisplayOutput;

class OAIEventNotification : public OAIObject {
public:
    OAIEventNotification();
    OAIEventNotification(QString json);
    ~OAIEventNotification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCustomerLanguage() const;
    void setCustomerLanguage(const QString &customer_language);
    bool is_customer_language_Set() const;
    bool is_customer_language_Valid() const;

    QList<OAIDisplayOutput> getDisplayOutput() const;
    void setDisplayOutput(const QList<OAIDisplayOutput> &display_output);
    bool is_display_output_Set() const;
    bool is_display_output_Valid() const;

    QString getEventDetails() const;
    void setEventDetails(const QString &event_details);
    bool is_event_details_Set() const;
    bool is_event_details_Valid() const;

    OAIEventToNotify getEventToNotify() const;
    void setEventToNotify(const OAIEventToNotify &event_to_notify);
    bool is_event_to_notify_Set() const;
    bool is_event_to_notify_Valid() const;

    bool isMaintenanceRequiredFlag() const;
    void setMaintenanceRequiredFlag(const bool &maintenance_required_flag);
    bool is_maintenance_required_flag_Set() const;
    bool is_maintenance_required_flag_Valid() const;

    QString getRejectedMessage() const;
    void setRejectedMessage(const QString &rejected_message);
    bool is_rejected_message_Set() const;
    bool is_rejected_message_Valid() const;

    QDateTime getTimeStamp() const;
    void setTimeStamp(const QDateTime &time_stamp);
    bool is_time_stamp_Set() const;
    bool is_time_stamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_customer_language;
    bool m_customer_language_isSet;
    bool m_customer_language_isValid;

    QList<OAIDisplayOutput> m_display_output;
    bool m_display_output_isSet;
    bool m_display_output_isValid;

    QString m_event_details;
    bool m_event_details_isSet;
    bool m_event_details_isValid;

    OAIEventToNotify m_event_to_notify;
    bool m_event_to_notify_isSet;
    bool m_event_to_notify_isValid;

    bool m_maintenance_required_flag;
    bool m_maintenance_required_flag_isSet;
    bool m_maintenance_required_flag_isValid;

    QString m_rejected_message;
    bool m_rejected_message_isSet;
    bool m_rejected_message_isValid;

    QDateTime m_time_stamp;
    bool m_time_stamp_isSet;
    bool m_time_stamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEventNotification)

#endif // OAIEventNotification_H
