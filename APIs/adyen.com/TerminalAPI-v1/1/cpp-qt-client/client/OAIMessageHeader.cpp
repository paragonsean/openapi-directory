/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageHeader.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageHeader::OAIMessageHeader(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageHeader::OAIMessageHeader() {
    this->initializeModel();
}

OAIMessageHeader::~OAIMessageHeader() {}

void OAIMessageHeader::initializeModel() {

    m_device_id_isSet = false;
    m_device_id_isValid = false;

    m_message_category_isSet = false;
    m_message_category_isValid = false;

    m_message_class_isSet = false;
    m_message_class_isValid = false;

    m_message_type_isSet = false;
    m_message_type_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_sale_id_isSet = false;
    m_sale_id_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;
}

void OAIMessageHeader::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMessageHeader::fromJsonObject(QJsonObject json) {

    m_device_id_isValid = ::OpenAPI::fromJsonValue(m_device_id, json[QString("DeviceID")]);
    m_device_id_isSet = !json[QString("DeviceID")].isNull() && m_device_id_isValid;

    m_message_category_isValid = ::OpenAPI::fromJsonValue(m_message_category, json[QString("MessageCategory")]);
    m_message_category_isSet = !json[QString("MessageCategory")].isNull() && m_message_category_isValid;

    m_message_class_isValid = ::OpenAPI::fromJsonValue(m_message_class, json[QString("MessageClass")]);
    m_message_class_isSet = !json[QString("MessageClass")].isNull() && m_message_class_isValid;

    m_message_type_isValid = ::OpenAPI::fromJsonValue(m_message_type, json[QString("MessageType")]);
    m_message_type_isSet = !json[QString("MessageType")].isNull() && m_message_type_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("ProtocolVersion")]);
    m_protocol_version_isSet = !json[QString("ProtocolVersion")].isNull() && m_protocol_version_isValid;

    m_sale_id_isValid = ::OpenAPI::fromJsonValue(m_sale_id, json[QString("SaleID")]);
    m_sale_id_isSet = !json[QString("SaleID")].isNull() && m_sale_id_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("ServiceID")]);
    m_service_id_isSet = !json[QString("ServiceID")].isNull() && m_service_id_isValid;
}

QString OAIMessageHeader::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMessageHeader::asJsonObject() const {
    QJsonObject obj;
    if (m_device_id_isSet) {
        obj.insert(QString("DeviceID"), ::OpenAPI::toJsonValue(m_device_id));
    }
    if (m_message_category.isSet()) {
        obj.insert(QString("MessageCategory"), ::OpenAPI::toJsonValue(m_message_category));
    }
    if (m_message_class.isSet()) {
        obj.insert(QString("MessageClass"), ::OpenAPI::toJsonValue(m_message_class));
    }
    if (m_message_type.isSet()) {
        obj.insert(QString("MessageType"), ::OpenAPI::toJsonValue(m_message_type));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("ProtocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_sale_id_isSet) {
        obj.insert(QString("SaleID"), ::OpenAPI::toJsonValue(m_sale_id));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("ServiceID"), ::OpenAPI::toJsonValue(m_service_id));
    }
    return obj;
}

QString OAIMessageHeader::getDeviceId() const {
    return m_device_id;
}
void OAIMessageHeader::setDeviceId(const QString &device_id) {
    m_device_id = device_id;
    m_device_id_isSet = true;
}

bool OAIMessageHeader::is_device_id_Set() const{
    return m_device_id_isSet;
}

bool OAIMessageHeader::is_device_id_Valid() const{
    return m_device_id_isValid;
}

OAIMessageCategory OAIMessageHeader::getMessageCategory() const {
    return m_message_category;
}
void OAIMessageHeader::setMessageCategory(const OAIMessageCategory &message_category) {
    m_message_category = message_category;
    m_message_category_isSet = true;
}

bool OAIMessageHeader::is_message_category_Set() const{
    return m_message_category_isSet;
}

bool OAIMessageHeader::is_message_category_Valid() const{
    return m_message_category_isValid;
}

OAIMessageClass OAIMessageHeader::getMessageClass() const {
    return m_message_class;
}
void OAIMessageHeader::setMessageClass(const OAIMessageClass &message_class) {
    m_message_class = message_class;
    m_message_class_isSet = true;
}

bool OAIMessageHeader::is_message_class_Set() const{
    return m_message_class_isSet;
}

bool OAIMessageHeader::is_message_class_Valid() const{
    return m_message_class_isValid;
}

OAIMessageType OAIMessageHeader::getMessageType() const {
    return m_message_type;
}
void OAIMessageHeader::setMessageType(const OAIMessageType &message_type) {
    m_message_type = message_type;
    m_message_type_isSet = true;
}

bool OAIMessageHeader::is_message_type_Set() const{
    return m_message_type_isSet;
}

bool OAIMessageHeader::is_message_type_Valid() const{
    return m_message_type_isValid;
}

QString OAIMessageHeader::getPoiid() const {
    return m_poiid;
}
void OAIMessageHeader::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAIMessageHeader::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAIMessageHeader::is_poiid_Valid() const{
    return m_poiid_isValid;
}

QString OAIMessageHeader::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIMessageHeader::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIMessageHeader::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIMessageHeader::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

QString OAIMessageHeader::getSaleId() const {
    return m_sale_id;
}
void OAIMessageHeader::setSaleId(const QString &sale_id) {
    m_sale_id = sale_id;
    m_sale_id_isSet = true;
}

bool OAIMessageHeader::is_sale_id_Set() const{
    return m_sale_id_isSet;
}

bool OAIMessageHeader::is_sale_id_Valid() const{
    return m_sale_id_isValid;
}

QString OAIMessageHeader::getServiceId() const {
    return m_service_id;
}
void OAIMessageHeader::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIMessageHeader::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIMessageHeader::is_service_id_Valid() const{
    return m_service_id_isValid;
}

bool OAIMessageHeader::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_class.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMessageHeader::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_category_isValid && m_message_class_isValid && m_message_type_isValid && m_poiid_isValid && m_sale_id_isValid && true;
}

} // namespace OpenAPI
