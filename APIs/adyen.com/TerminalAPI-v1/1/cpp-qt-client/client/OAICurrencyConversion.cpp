/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrencyConversion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrencyConversion::OAICurrencyConversion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrencyConversion::OAICurrencyConversion() {
    this->initializeModel();
}

OAICurrencyConversion::~OAICurrencyConversion() {}

void OAICurrencyConversion::initializeModel() {

    m_commission_isSet = false;
    m_commission_isValid = false;

    m_converted_amount_isSet = false;
    m_converted_amount_isValid = false;

    m_customer_approved_flag_isSet = false;
    m_customer_approved_flag_isValid = false;

    m_declaration_isSet = false;
    m_declaration_isValid = false;

    m_markup_isSet = false;
    m_markup_isValid = false;

    m_rate_isSet = false;
    m_rate_isValid = false;
}

void OAICurrencyConversion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrencyConversion::fromJsonObject(QJsonObject json) {

    m_commission_isValid = ::OpenAPI::fromJsonValue(m_commission, json[QString("Commission")]);
    m_commission_isSet = !json[QString("Commission")].isNull() && m_commission_isValid;

    m_converted_amount_isValid = ::OpenAPI::fromJsonValue(m_converted_amount, json[QString("ConvertedAmount")]);
    m_converted_amount_isSet = !json[QString("ConvertedAmount")].isNull() && m_converted_amount_isValid;

    m_customer_approved_flag_isValid = ::OpenAPI::fromJsonValue(m_customer_approved_flag, json[QString("CustomerApprovedFlag")]);
    m_customer_approved_flag_isSet = !json[QString("CustomerApprovedFlag")].isNull() && m_customer_approved_flag_isValid;

    m_declaration_isValid = ::OpenAPI::fromJsonValue(m_declaration, json[QString("Declaration")]);
    m_declaration_isSet = !json[QString("Declaration")].isNull() && m_declaration_isValid;

    m_markup_isValid = ::OpenAPI::fromJsonValue(m_markup, json[QString("Markup")]);
    m_markup_isSet = !json[QString("Markup")].isNull() && m_markup_isValid;

    m_rate_isValid = ::OpenAPI::fromJsonValue(m_rate, json[QString("Rate")]);
    m_rate_isSet = !json[QString("Rate")].isNull() && m_rate_isValid;
}

QString OAICurrencyConversion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrencyConversion::asJsonObject() const {
    QJsonObject obj;
    if (m_commission_isSet) {
        obj.insert(QString("Commission"), ::OpenAPI::toJsonValue(m_commission));
    }
    if (m_converted_amount.isSet()) {
        obj.insert(QString("ConvertedAmount"), ::OpenAPI::toJsonValue(m_converted_amount));
    }
    if (m_customer_approved_flag_isSet) {
        obj.insert(QString("CustomerApprovedFlag"), ::OpenAPI::toJsonValue(m_customer_approved_flag));
    }
    if (m_declaration_isSet) {
        obj.insert(QString("Declaration"), ::OpenAPI::toJsonValue(m_declaration));
    }
    if (m_markup_isSet) {
        obj.insert(QString("Markup"), ::OpenAPI::toJsonValue(m_markup));
    }
    if (m_rate_isSet) {
        obj.insert(QString("Rate"), ::OpenAPI::toJsonValue(m_rate));
    }
    return obj;
}

double OAICurrencyConversion::getCommission() const {
    return m_commission;
}
void OAICurrencyConversion::setCommission(const double &commission) {
    m_commission = commission;
    m_commission_isSet = true;
}

bool OAICurrencyConversion::is_commission_Set() const{
    return m_commission_isSet;
}

bool OAICurrencyConversion::is_commission_Valid() const{
    return m_commission_isValid;
}

OAIConvertedAmount OAICurrencyConversion::getConvertedAmount() const {
    return m_converted_amount;
}
void OAICurrencyConversion::setConvertedAmount(const OAIConvertedAmount &converted_amount) {
    m_converted_amount = converted_amount;
    m_converted_amount_isSet = true;
}

bool OAICurrencyConversion::is_converted_amount_Set() const{
    return m_converted_amount_isSet;
}

bool OAICurrencyConversion::is_converted_amount_Valid() const{
    return m_converted_amount_isValid;
}

bool OAICurrencyConversion::isCustomerApprovedFlag() const {
    return m_customer_approved_flag;
}
void OAICurrencyConversion::setCustomerApprovedFlag(const bool &customer_approved_flag) {
    m_customer_approved_flag = customer_approved_flag;
    m_customer_approved_flag_isSet = true;
}

bool OAICurrencyConversion::is_customer_approved_flag_Set() const{
    return m_customer_approved_flag_isSet;
}

bool OAICurrencyConversion::is_customer_approved_flag_Valid() const{
    return m_customer_approved_flag_isValid;
}

QString OAICurrencyConversion::getDeclaration() const {
    return m_declaration;
}
void OAICurrencyConversion::setDeclaration(const QString &declaration) {
    m_declaration = declaration;
    m_declaration_isSet = true;
}

bool OAICurrencyConversion::is_declaration_Set() const{
    return m_declaration_isSet;
}

bool OAICurrencyConversion::is_declaration_Valid() const{
    return m_declaration_isValid;
}

QString OAICurrencyConversion::getMarkup() const {
    return m_markup;
}
void OAICurrencyConversion::setMarkup(const QString &markup) {
    m_markup = markup;
    m_markup_isSet = true;
}

bool OAICurrencyConversion::is_markup_Set() const{
    return m_markup_isSet;
}

bool OAICurrencyConversion::is_markup_Valid() const{
    return m_markup_isValid;
}

QString OAICurrencyConversion::getRate() const {
    return m_rate;
}
void OAICurrencyConversion::setRate(const QString &rate) {
    m_rate = rate;
    m_rate_isSet = true;
}

bool OAICurrencyConversion::is_rate_Set() const{
    return m_rate_isSet;
}

bool OAICurrencyConversion::is_rate_Valid() const{
    return m_rate_isValid;
}

bool OAICurrencyConversion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_commission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_converted_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_approved_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declaration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrencyConversion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_converted_amount_isValid && true;
}

} // namespace OpenAPI
