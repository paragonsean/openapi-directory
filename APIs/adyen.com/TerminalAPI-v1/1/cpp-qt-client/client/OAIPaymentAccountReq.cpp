/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentAccountReq.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentAccountReq::OAIPaymentAccountReq(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentAccountReq::OAIPaymentAccountReq() {
    this->initializeModel();
}

OAIPaymentAccountReq::~OAIPaymentAccountReq() {}

void OAIPaymentAccountReq::initializeModel() {

    m_account_type_isSet = false;
    m_account_type_isValid = false;

    m_card_acquisition_reference_isSet = false;
    m_card_acquisition_reference_isValid = false;

    m_payment_instrument_data_isSet = false;
    m_payment_instrument_data_isValid = false;
}

void OAIPaymentAccountReq::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentAccountReq::fromJsonObject(QJsonObject json) {

    m_account_type_isValid = ::OpenAPI::fromJsonValue(m_account_type, json[QString("AccountType")]);
    m_account_type_isSet = !json[QString("AccountType")].isNull() && m_account_type_isValid;

    m_card_acquisition_reference_isValid = ::OpenAPI::fromJsonValue(m_card_acquisition_reference, json[QString("CardAcquisitionReference")]);
    m_card_acquisition_reference_isSet = !json[QString("CardAcquisitionReference")].isNull() && m_card_acquisition_reference_isValid;

    m_payment_instrument_data_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_data, json[QString("PaymentInstrumentData")]);
    m_payment_instrument_data_isSet = !json[QString("PaymentInstrumentData")].isNull() && m_payment_instrument_data_isValid;
}

QString OAIPaymentAccountReq::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentAccountReq::asJsonObject() const {
    QJsonObject obj;
    if (m_account_type.isSet()) {
        obj.insert(QString("AccountType"), ::OpenAPI::toJsonValue(m_account_type));
    }
    if (m_card_acquisition_reference.isSet()) {
        obj.insert(QString("CardAcquisitionReference"), ::OpenAPI::toJsonValue(m_card_acquisition_reference));
    }
    if (m_payment_instrument_data.isSet()) {
        obj.insert(QString("PaymentInstrumentData"), ::OpenAPI::toJsonValue(m_payment_instrument_data));
    }
    return obj;
}

OAIAccountType OAIPaymentAccountReq::getAccountType() const {
    return m_account_type;
}
void OAIPaymentAccountReq::setAccountType(const OAIAccountType &account_type) {
    m_account_type = account_type;
    m_account_type_isSet = true;
}

bool OAIPaymentAccountReq::is_account_type_Set() const{
    return m_account_type_isSet;
}

bool OAIPaymentAccountReq::is_account_type_Valid() const{
    return m_account_type_isValid;
}

OAITransactionIDType OAIPaymentAccountReq::getCardAcquisitionReference() const {
    return m_card_acquisition_reference;
}
void OAIPaymentAccountReq::setCardAcquisitionReference(const OAITransactionIDType &card_acquisition_reference) {
    m_card_acquisition_reference = card_acquisition_reference;
    m_card_acquisition_reference_isSet = true;
}

bool OAIPaymentAccountReq::is_card_acquisition_reference_Set() const{
    return m_card_acquisition_reference_isSet;
}

bool OAIPaymentAccountReq::is_card_acquisition_reference_Valid() const{
    return m_card_acquisition_reference_isValid;
}

OAIPaymentInstrumentData OAIPaymentAccountReq::getPaymentInstrumentData() const {
    return m_payment_instrument_data;
}
void OAIPaymentAccountReq::setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data) {
    m_payment_instrument_data = payment_instrument_data;
    m_payment_instrument_data_isSet = true;
}

bool OAIPaymentAccountReq::is_payment_instrument_data_Set() const{
    return m_payment_instrument_data_isSet;
}

bool OAIPaymentAccountReq::is_payment_instrument_data_Valid() const{
    return m_payment_instrument_data_isValid;
}

bool OAIPaymentAccountReq::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_acquisition_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentAccountReq::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
