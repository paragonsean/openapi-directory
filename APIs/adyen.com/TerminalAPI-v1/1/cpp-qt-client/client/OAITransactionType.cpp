/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionType::OAITransactionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionType::OAITransactionType() {
    this->initializeModel();
}

OAITransactionType::~OAITransactionType() {}

void OAITransactionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAITransactionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAITransactionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Award", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::AWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CashAdvance", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::CASHADVANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompletedDeffered", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::COMPLETEDDEFFERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CompletedReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::COMPLETEDRESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Credit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::CREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Debit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::DEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Declined", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::DECLINED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("FirstReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::FIRSTRESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IssuerInstalment", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::ISSUERINSTALMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OneTimeReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::ONETIMERESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rebate", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REBATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Redemption", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REDEMPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReverseAward", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REVERSEAWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReverseCredit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REVERSECREDIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReverseDebit", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REVERSEDEBIT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReverseRebate", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REVERSEREBATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ReverseRedemption", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::REVERSEREDEMPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UpdateReservation", Qt::CaseInsensitive) == 0) {
        m_value = eOAITransactionType::UPDATERESERVATION;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAITransactionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAITransactionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAITransactionType::AWARD:
            val = "Award";
            break;
        case eOAITransactionType::CASHADVANCE:
            val = "CashAdvance";
            break;
        case eOAITransactionType::COMPLETEDDEFFERED:
            val = "CompletedDeffered";
            break;
        case eOAITransactionType::COMPLETEDRESERVATION:
            val = "CompletedReservation";
            break;
        case eOAITransactionType::CREDIT:
            val = "Credit";
            break;
        case eOAITransactionType::DEBIT:
            val = "Debit";
            break;
        case eOAITransactionType::DECLINED:
            val = "Declined";
            break;
        case eOAITransactionType::FAILED:
            val = "Failed";
            break;
        case eOAITransactionType::FIRSTRESERVATION:
            val = "FirstReservation";
            break;
        case eOAITransactionType::ISSUERINSTALMENT:
            val = "IssuerInstalment";
            break;
        case eOAITransactionType::ONETIMERESERVATION:
            val = "OneTimeReservation";
            break;
        case eOAITransactionType::REBATE:
            val = "Rebate";
            break;
        case eOAITransactionType::REDEMPTION:
            val = "Redemption";
            break;
        case eOAITransactionType::REVERSEAWARD:
            val = "ReverseAward";
            break;
        case eOAITransactionType::REVERSECREDIT:
            val = "ReverseCredit";
            break;
        case eOAITransactionType::REVERSEDEBIT:
            val = "ReverseDebit";
            break;
        case eOAITransactionType::REVERSEREBATE:
            val = "ReverseRebate";
            break;
        case eOAITransactionType::REVERSEREDEMPTION:
            val = "ReverseRedemption";
            break;
        case eOAITransactionType::UPDATERESERVATION:
            val = "UpdateReservation";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAITransactionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAITransactionType::eOAITransactionType OAITransactionType::getValue() const {
    return m_value;
}

void OAITransactionType::setValue(const OAITransactionType::eOAITransactionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAITransactionType::isSet() const {
    
    return m_value_isSet;
}

bool OAITransactionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
