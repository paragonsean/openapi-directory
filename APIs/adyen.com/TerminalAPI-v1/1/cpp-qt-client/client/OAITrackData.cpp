/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackData::OAITrackData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackData::OAITrackData() {
    this->initializeModel();
}

OAITrackData::~OAITrackData() {}

void OAITrackData::initializeModel() {

    m_track_format_isSet = false;
    m_track_format_isValid = false;

    m_track_numb_isSet = false;
    m_track_numb_isValid = false;

    m_track_value_isSet = false;
    m_track_value_isValid = false;
}

void OAITrackData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackData::fromJsonObject(QJsonObject json) {

    m_track_format_isValid = ::OpenAPI::fromJsonValue(m_track_format, json[QString("TrackFormat")]);
    m_track_format_isSet = !json[QString("TrackFormat")].isNull() && m_track_format_isValid;

    m_track_numb_isValid = ::OpenAPI::fromJsonValue(m_track_numb, json[QString("TrackNumb")]);
    m_track_numb_isSet = !json[QString("TrackNumb")].isNull() && m_track_numb_isValid;

    m_track_value_isValid = ::OpenAPI::fromJsonValue(m_track_value, json[QString("TrackValue")]);
    m_track_value_isSet = !json[QString("TrackValue")].isNull() && m_track_value_isValid;
}

QString OAITrackData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackData::asJsonObject() const {
    QJsonObject obj;
    if (m_track_format.isSet()) {
        obj.insert(QString("TrackFormat"), ::OpenAPI::toJsonValue(m_track_format));
    }
    if (m_track_numb_isSet) {
        obj.insert(QString("TrackNumb"), ::OpenAPI::toJsonValue(m_track_numb));
    }
    if (m_track_value_isSet) {
        obj.insert(QString("TrackValue"), ::OpenAPI::toJsonValue(m_track_value));
    }
    return obj;
}

OAITrackFormat OAITrackData::getTrackFormat() const {
    return m_track_format;
}
void OAITrackData::setTrackFormat(const OAITrackFormat &track_format) {
    m_track_format = track_format;
    m_track_format_isSet = true;
}

bool OAITrackData::is_track_format_Set() const{
    return m_track_format_isSet;
}

bool OAITrackData::is_track_format_Valid() const{
    return m_track_format_isValid;
}

qint32 OAITrackData::getTrackNumb() const {
    return m_track_numb;
}
void OAITrackData::setTrackNumb(const qint32 &track_numb) {
    m_track_numb = track_numb;
    m_track_numb_isSet = true;
}

bool OAITrackData::is_track_numb_Set() const{
    return m_track_numb_isSet;
}

bool OAITrackData::is_track_numb_Valid() const{
    return m_track_numb_isValid;
}

QString OAITrackData::getTrackValue() const {
    return m_track_value;
}
void OAITrackData::setTrackValue(const QString &track_value) {
    m_track_value = track_value;
    m_track_value_isSet = true;
}

bool OAITrackData::is_track_value_Set() const{
    return m_track_value_isSet;
}

bool OAITrackData::is_track_value_Valid() const{
    return m_track_value_isValid;
}

bool OAITrackData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_track_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_numb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_track_value_isValid && true;
}

} // namespace OpenAPI
