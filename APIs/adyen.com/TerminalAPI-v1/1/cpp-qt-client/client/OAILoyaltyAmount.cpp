/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAmount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAmount::OAILoyaltyAmount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAmount::OAILoyaltyAmount() {
    this->initializeModel();
}

OAILoyaltyAmount::~OAILoyaltyAmount() {}

void OAILoyaltyAmount::initializeModel() {

    m_amount_value_isSet = false;
    m_amount_value_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_loyalty_unit_isSet = false;
    m_loyalty_unit_isValid = false;
}

void OAILoyaltyAmount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAmount::fromJsonObject(QJsonObject json) {

    m_amount_value_isValid = ::OpenAPI::fromJsonValue(m_amount_value, json[QString("AmountValue")]);
    m_amount_value_isSet = !json[QString("AmountValue")].isNull() && m_amount_value_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_loyalty_unit_isValid = ::OpenAPI::fromJsonValue(m_loyalty_unit, json[QString("LoyaltyUnit")]);
    m_loyalty_unit_isSet = !json[QString("LoyaltyUnit")].isNull() && m_loyalty_unit_isValid;
}

QString OAILoyaltyAmount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAmount::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_value_isSet) {
        obj.insert(QString("AmountValue"), ::OpenAPI::toJsonValue(m_amount_value));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_loyalty_unit.isSet()) {
        obj.insert(QString("LoyaltyUnit"), ::OpenAPI::toJsonValue(m_loyalty_unit));
    }
    return obj;
}

double OAILoyaltyAmount::getAmountValue() const {
    return m_amount_value;
}
void OAILoyaltyAmount::setAmountValue(const double &amount_value) {
    m_amount_value = amount_value;
    m_amount_value_isSet = true;
}

bool OAILoyaltyAmount::is_amount_value_Set() const{
    return m_amount_value_isSet;
}

bool OAILoyaltyAmount::is_amount_value_Valid() const{
    return m_amount_value_isValid;
}

QString OAILoyaltyAmount::getCurrency() const {
    return m_currency;
}
void OAILoyaltyAmount::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAILoyaltyAmount::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAILoyaltyAmount::is_currency_Valid() const{
    return m_currency_isValid;
}

OAILoyaltyUnit OAILoyaltyAmount::getLoyaltyUnit() const {
    return m_loyalty_unit;
}
void OAILoyaltyAmount::setLoyaltyUnit(const OAILoyaltyUnit &loyalty_unit) {
    m_loyalty_unit = loyalty_unit;
    m_loyalty_unit_isSet = true;
}

bool OAILoyaltyAmount::is_loyalty_unit_Set() const{
    return m_loyalty_unit_isSet;
}

bool OAILoyaltyAmount::is_loyalty_unit_Valid() const{
    return m_loyalty_unit_isValid;
}

bool OAILoyaltyAmount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAmount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_value_isValid && true;
}

} // namespace OpenAPI
