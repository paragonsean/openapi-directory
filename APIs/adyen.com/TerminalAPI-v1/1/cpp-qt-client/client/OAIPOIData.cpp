/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPOIData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPOIData::OAIPOIData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPOIData::OAIPOIData() {
    this->initializeModel();
}

OAIPOIData::~OAIPOIData() {}

void OAIPOIData::initializeModel() {

    m_poi_reconciliation_id_isSet = false;
    m_poi_reconciliation_id_isValid = false;

    m_poi_transaction_id_isSet = false;
    m_poi_transaction_id_isValid = false;
}

void OAIPOIData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPOIData::fromJsonObject(QJsonObject json) {

    m_poi_reconciliation_id_isValid = ::OpenAPI::fromJsonValue(m_poi_reconciliation_id, json[QString("POIReconciliationID")]);
    m_poi_reconciliation_id_isSet = !json[QString("POIReconciliationID")].isNull() && m_poi_reconciliation_id_isValid;

    m_poi_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_poi_transaction_id, json[QString("POITransactionID")]);
    m_poi_transaction_id_isSet = !json[QString("POITransactionID")].isNull() && m_poi_transaction_id_isValid;
}

QString OAIPOIData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPOIData::asJsonObject() const {
    QJsonObject obj;
    if (m_poi_reconciliation_id_isSet) {
        obj.insert(QString("POIReconciliationID"), ::OpenAPI::toJsonValue(m_poi_reconciliation_id));
    }
    if (m_poi_transaction_id.isSet()) {
        obj.insert(QString("POITransactionID"), ::OpenAPI::toJsonValue(m_poi_transaction_id));
    }
    return obj;
}

qint32 OAIPOIData::getPoiReconciliationId() const {
    return m_poi_reconciliation_id;
}
void OAIPOIData::setPoiReconciliationId(const qint32 &poi_reconciliation_id) {
    m_poi_reconciliation_id = poi_reconciliation_id;
    m_poi_reconciliation_id_isSet = true;
}

bool OAIPOIData::is_poi_reconciliation_id_Set() const{
    return m_poi_reconciliation_id_isSet;
}

bool OAIPOIData::is_poi_reconciliation_id_Valid() const{
    return m_poi_reconciliation_id_isValid;
}

OAITransactionIDType OAIPOIData::getPoiTransactionId() const {
    return m_poi_transaction_id;
}
void OAIPOIData::setPoiTransactionId(const OAITransactionIDType &poi_transaction_id) {
    m_poi_transaction_id = poi_transaction_id;
    m_poi_transaction_id_isSet = true;
}

bool OAIPOIData::is_poi_transaction_id_Set() const{
    return m_poi_transaction_id_isSet;
}

bool OAIPOIData::is_poi_transaction_id_Valid() const{
    return m_poi_transaction_id_isValid;
}

bool OAIPOIData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_poi_reconciliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPOIData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_poi_transaction_id_isValid && true;
}

} // namespace OpenAPI
