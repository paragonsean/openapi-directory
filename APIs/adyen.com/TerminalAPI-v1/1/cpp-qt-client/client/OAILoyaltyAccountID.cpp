/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAccountID.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAccountID::OAILoyaltyAccountID(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAccountID::OAILoyaltyAccountID() {
    this->initializeModel();
}

OAILoyaltyAccountID::~OAILoyaltyAccountID() {}

void OAILoyaltyAccountID::initializeModel() {

    m_entry_mode_isSet = false;
    m_entry_mode_isValid = false;

    m_identification_support_isSet = false;
    m_identification_support_isValid = false;

    m_identification_type_isSet = false;
    m_identification_type_isValid = false;

    m_loyalty_id_isSet = false;
    m_loyalty_id_isValid = false;
}

void OAILoyaltyAccountID::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAccountID::fromJsonObject(QJsonObject json) {

    m_entry_mode_isValid = ::OpenAPI::fromJsonValue(m_entry_mode, json[QString("EntryMode")]);
    m_entry_mode_isSet = !json[QString("EntryMode")].isNull() && m_entry_mode_isValid;

    m_identification_support_isValid = ::OpenAPI::fromJsonValue(m_identification_support, json[QString("IdentificationSupport")]);
    m_identification_support_isSet = !json[QString("IdentificationSupport")].isNull() && m_identification_support_isValid;

    m_identification_type_isValid = ::OpenAPI::fromJsonValue(m_identification_type, json[QString("IdentificationType")]);
    m_identification_type_isSet = !json[QString("IdentificationType")].isNull() && m_identification_type_isValid;

    m_loyalty_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_id, json[QString("LoyaltyID")]);
    m_loyalty_id_isSet = !json[QString("LoyaltyID")].isNull() && m_loyalty_id_isValid;
}

QString OAILoyaltyAccountID::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAccountID::asJsonObject() const {
    QJsonObject obj;
    if (m_entry_mode.size() > 0) {
        obj.insert(QString("EntryMode"), ::OpenAPI::toJsonValue(m_entry_mode));
    }
    if (m_identification_support.isSet()) {
        obj.insert(QString("IdentificationSupport"), ::OpenAPI::toJsonValue(m_identification_support));
    }
    if (m_identification_type.isSet()) {
        obj.insert(QString("IdentificationType"), ::OpenAPI::toJsonValue(m_identification_type));
    }
    if (m_loyalty_id_isSet) {
        obj.insert(QString("LoyaltyID"), ::OpenAPI::toJsonValue(m_loyalty_id));
    }
    return obj;
}

QList<QString> OAILoyaltyAccountID::getEntryMode() const {
    return m_entry_mode;
}
void OAILoyaltyAccountID::setEntryMode(const QList<QString> &entry_mode) {
    m_entry_mode = entry_mode;
    m_entry_mode_isSet = true;
}

bool OAILoyaltyAccountID::is_entry_mode_Set() const{
    return m_entry_mode_isSet;
}

bool OAILoyaltyAccountID::is_entry_mode_Valid() const{
    return m_entry_mode_isValid;
}

OAIIdentificationSupport OAILoyaltyAccountID::getIdentificationSupport() const {
    return m_identification_support;
}
void OAILoyaltyAccountID::setIdentificationSupport(const OAIIdentificationSupport &identification_support) {
    m_identification_support = identification_support;
    m_identification_support_isSet = true;
}

bool OAILoyaltyAccountID::is_identification_support_Set() const{
    return m_identification_support_isSet;
}

bool OAILoyaltyAccountID::is_identification_support_Valid() const{
    return m_identification_support_isValid;
}

OAIIdentificationType OAILoyaltyAccountID::getIdentificationType() const {
    return m_identification_type;
}
void OAILoyaltyAccountID::setIdentificationType(const OAIIdentificationType &identification_type) {
    m_identification_type = identification_type;
    m_identification_type_isSet = true;
}

bool OAILoyaltyAccountID::is_identification_type_Set() const{
    return m_identification_type_isSet;
}

bool OAILoyaltyAccountID::is_identification_type_Valid() const{
    return m_identification_type_isValid;
}

QString OAILoyaltyAccountID::getLoyaltyId() const {
    return m_loyalty_id;
}
void OAILoyaltyAccountID::setLoyaltyId(const QString &loyalty_id) {
    m_loyalty_id = loyalty_id;
    m_loyalty_id_isSet = true;
}

bool OAILoyaltyAccountID::is_loyalty_id_Set() const{
    return m_loyalty_id_isSet;
}

bool OAILoyaltyAccountID::is_loyalty_id_Valid() const{
    return m_loyalty_id_isValid;
}

bool OAILoyaltyAccountID::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_entry_mode.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_support.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identification_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAccountID::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_entry_mode_isValid && m_identification_type_isValid && m_loyalty_id_isValid && true;
}

} // namespace OpenAPI
