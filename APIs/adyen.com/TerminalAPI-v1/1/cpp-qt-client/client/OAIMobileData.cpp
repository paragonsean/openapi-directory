/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMobileData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMobileData::OAIMobileData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMobileData::OAIMobileData() {
    this->initializeModel();
}

OAIMobileData::~OAIMobileData() {}

void OAIMobileData::initializeModel() {

    m_geolocation_isSet = false;
    m_geolocation_isValid = false;

    m_masked_msisdn_isSet = false;
    m_masked_msisdn_isValid = false;

    m_mobile_country_code_isSet = false;
    m_mobile_country_code_isValid = false;

    m_mobile_network_code_isSet = false;
    m_mobile_network_code_isValid = false;

    m_protected_mobile_data_isSet = false;
    m_protected_mobile_data_isValid = false;

    m_sensitive_mobile_data_isSet = false;
    m_sensitive_mobile_data_isValid = false;
}

void OAIMobileData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMobileData::fromJsonObject(QJsonObject json) {

    m_geolocation_isValid = ::OpenAPI::fromJsonValue(m_geolocation, json[QString("Geolocation")]);
    m_geolocation_isSet = !json[QString("Geolocation")].isNull() && m_geolocation_isValid;

    m_masked_msisdn_isValid = ::OpenAPI::fromJsonValue(m_masked_msisdn, json[QString("MaskedMSISDN")]);
    m_masked_msisdn_isSet = !json[QString("MaskedMSISDN")].isNull() && m_masked_msisdn_isValid;

    m_mobile_country_code_isValid = ::OpenAPI::fromJsonValue(m_mobile_country_code, json[QString("MobileCountryCode")]);
    m_mobile_country_code_isSet = !json[QString("MobileCountryCode")].isNull() && m_mobile_country_code_isValid;

    m_mobile_network_code_isValid = ::OpenAPI::fromJsonValue(m_mobile_network_code, json[QString("MobileNetworkCode")]);
    m_mobile_network_code_isSet = !json[QString("MobileNetworkCode")].isNull() && m_mobile_network_code_isValid;

    m_protected_mobile_data_isValid = ::OpenAPI::fromJsonValue(m_protected_mobile_data, json[QString("ProtectedMobileData")]);
    m_protected_mobile_data_isSet = !json[QString("ProtectedMobileData")].isNull() && m_protected_mobile_data_isValid;

    m_sensitive_mobile_data_isValid = ::OpenAPI::fromJsonValue(m_sensitive_mobile_data, json[QString("SensitiveMobileData")]);
    m_sensitive_mobile_data_isSet = !json[QString("SensitiveMobileData")].isNull() && m_sensitive_mobile_data_isValid;
}

QString OAIMobileData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMobileData::asJsonObject() const {
    QJsonObject obj;
    if (m_geolocation.isSet()) {
        obj.insert(QString("Geolocation"), ::OpenAPI::toJsonValue(m_geolocation));
    }
    if (m_masked_msisdn_isSet) {
        obj.insert(QString("MaskedMSISDN"), ::OpenAPI::toJsonValue(m_masked_msisdn));
    }
    if (m_mobile_country_code_isSet) {
        obj.insert(QString("MobileCountryCode"), ::OpenAPI::toJsonValue(m_mobile_country_code));
    }
    if (m_mobile_network_code_isSet) {
        obj.insert(QString("MobileNetworkCode"), ::OpenAPI::toJsonValue(m_mobile_network_code));
    }
    if (m_protected_mobile_data_isSet) {
        obj.insert(QString("ProtectedMobileData"), ::OpenAPI::toJsonValue(m_protected_mobile_data));
    }
    if (m_sensitive_mobile_data.isSet()) {
        obj.insert(QString("SensitiveMobileData"), ::OpenAPI::toJsonValue(m_sensitive_mobile_data));
    }
    return obj;
}

OAIGeolocation OAIMobileData::getGeolocation() const {
    return m_geolocation;
}
void OAIMobileData::setGeolocation(const OAIGeolocation &geolocation) {
    m_geolocation = geolocation;
    m_geolocation_isSet = true;
}

bool OAIMobileData::is_geolocation_Set() const{
    return m_geolocation_isSet;
}

bool OAIMobileData::is_geolocation_Valid() const{
    return m_geolocation_isValid;
}

qint32 OAIMobileData::getMaskedMsisdn() const {
    return m_masked_msisdn;
}
void OAIMobileData::setMaskedMsisdn(const qint32 &masked_msisdn) {
    m_masked_msisdn = masked_msisdn;
    m_masked_msisdn_isSet = true;
}

bool OAIMobileData::is_masked_msisdn_Set() const{
    return m_masked_msisdn_isSet;
}

bool OAIMobileData::is_masked_msisdn_Valid() const{
    return m_masked_msisdn_isValid;
}

qint32 OAIMobileData::getMobileCountryCode() const {
    return m_mobile_country_code;
}
void OAIMobileData::setMobileCountryCode(const qint32 &mobile_country_code) {
    m_mobile_country_code = mobile_country_code;
    m_mobile_country_code_isSet = true;
}

bool OAIMobileData::is_mobile_country_code_Set() const{
    return m_mobile_country_code_isSet;
}

bool OAIMobileData::is_mobile_country_code_Valid() const{
    return m_mobile_country_code_isValid;
}

qint32 OAIMobileData::getMobileNetworkCode() const {
    return m_mobile_network_code;
}
void OAIMobileData::setMobileNetworkCode(const qint32 &mobile_network_code) {
    m_mobile_network_code = mobile_network_code;
    m_mobile_network_code_isSet = true;
}

bool OAIMobileData::is_mobile_network_code_Set() const{
    return m_mobile_network_code_isSet;
}

bool OAIMobileData::is_mobile_network_code_Valid() const{
    return m_mobile_network_code_isValid;
}

QString OAIMobileData::getProtectedMobileData() const {
    return m_protected_mobile_data;
}
void OAIMobileData::setProtectedMobileData(const QString &protected_mobile_data) {
    m_protected_mobile_data = protected_mobile_data;
    m_protected_mobile_data_isSet = true;
}

bool OAIMobileData::is_protected_mobile_data_Set() const{
    return m_protected_mobile_data_isSet;
}

bool OAIMobileData::is_protected_mobile_data_Valid() const{
    return m_protected_mobile_data_isValid;
}

OAISensitiveMobileData OAIMobileData::getSensitiveMobileData() const {
    return m_sensitive_mobile_data;
}
void OAIMobileData::setSensitiveMobileData(const OAISensitiveMobileData &sensitive_mobile_data) {
    m_sensitive_mobile_data = sensitive_mobile_data;
    m_sensitive_mobile_data_isSet = true;
}

bool OAIMobileData::is_sensitive_mobile_data_Set() const{
    return m_sensitive_mobile_data_isSet;
}

bool OAIMobileData::is_sensitive_mobile_data_Valid() const{
    return m_sensitive_mobile_data_isValid;
}

bool OAIMobileData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geolocation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_masked_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_network_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_mobile_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitive_mobile_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMobileData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
