/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInstalment.h
 *
 * 
 */

#ifndef OAIInstalment_H
#define OAIInstalment_H

#include <QJsonObject>

#include "OAIInstalmentType.h"
#include "OAIPeriodUnit.h"
#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInstalment : public OAIObject {
public:
    OAIInstalment();
    OAIInstalment(QString json);
    ~OAIInstalment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCharges() const;
    void setCharges(const double &charges);
    bool is_charges_Set() const;
    bool is_charges_Valid() const;

    double getCumulativeAmount() const;
    void setCumulativeAmount(const double &cumulative_amount);
    bool is_cumulative_amount_Set() const;
    bool is_cumulative_amount_Valid() const;

    double getFirstAmount() const;
    void setFirstAmount(const double &first_amount);
    bool is_first_amount_Set() const;
    bool is_first_amount_Valid() const;

    QDate getFirstPaymentDate() const;
    void setFirstPaymentDate(const QDate &first_payment_date);
    bool is_first_payment_date_Set() const;
    bool is_first_payment_date_Valid() const;

    OAIInstalmentType getInstalmentType() const;
    void setInstalmentType(const OAIInstalmentType &instalment_type);
    bool is_instalment_type_Set() const;
    bool is_instalment_type_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    OAIPeriodUnit getPeriodUnit() const;
    void setPeriodUnit(const OAIPeriodUnit &period_unit);
    bool is_period_unit_Set() const;
    bool is_period_unit_Valid() const;

    QString getPlanId() const;
    void setPlanId(const QString &plan_id);
    bool is_plan_id_Set() const;
    bool is_plan_id_Valid() const;

    qint32 getSequenceNumber() const;
    void setSequenceNumber(const qint32 &sequence_number);
    bool is_sequence_number_Set() const;
    bool is_sequence_number_Valid() const;

    qint32 getTotalNbOfPayments() const;
    void setTotalNbOfPayments(const qint32 &total_nb_of_payments);
    bool is_total_nb_of_payments_Set() const;
    bool is_total_nb_of_payments_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_charges;
    bool m_charges_isSet;
    bool m_charges_isValid;

    double m_cumulative_amount;
    bool m_cumulative_amount_isSet;
    bool m_cumulative_amount_isValid;

    double m_first_amount;
    bool m_first_amount_isSet;
    bool m_first_amount_isValid;

    QDate m_first_payment_date;
    bool m_first_payment_date_isSet;
    bool m_first_payment_date_isValid;

    OAIInstalmentType m_instalment_type;
    bool m_instalment_type_isSet;
    bool m_instalment_type_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    OAIPeriodUnit m_period_unit;
    bool m_period_unit_isSet;
    bool m_period_unit_isValid;

    QString m_plan_id;
    bool m_plan_id_isSet;
    bool m_plan_id_isValid;

    qint32 m_sequence_number;
    bool m_sequence_number_isSet;
    bool m_sequence_number_isValid;

    qint32 m_total_nb_of_payments;
    bool m_total_nb_of_payments_isSet;
    bool m_total_nb_of_payments_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInstalment)

#endif // OAIInstalment_H
