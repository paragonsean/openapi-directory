/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentInstrumentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentInstrumentData::OAIPaymentInstrumentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentInstrumentData::OAIPaymentInstrumentData() {
    this->initializeModel();
}

OAIPaymentInstrumentData::~OAIPaymentInstrumentData() {}

void OAIPaymentInstrumentData::initializeModel() {

    m_card_data_isSet = false;
    m_card_data_isValid = false;

    m_check_data_isSet = false;
    m_check_data_isValid = false;

    m_mobile_data_isSet = false;
    m_mobile_data_isValid = false;

    m_payment_instrument_type_isSet = false;
    m_payment_instrument_type_isValid = false;

    m_protected_card_data_isSet = false;
    m_protected_card_data_isValid = false;

    m_stored_value_account_id_isSet = false;
    m_stored_value_account_id_isValid = false;
}

void OAIPaymentInstrumentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentInstrumentData::fromJsonObject(QJsonObject json) {

    m_card_data_isValid = ::OpenAPI::fromJsonValue(m_card_data, json[QString("CardData")]);
    m_card_data_isSet = !json[QString("CardData")].isNull() && m_card_data_isValid;

    m_check_data_isValid = ::OpenAPI::fromJsonValue(m_check_data, json[QString("CheckData")]);
    m_check_data_isSet = !json[QString("CheckData")].isNull() && m_check_data_isValid;

    m_mobile_data_isValid = ::OpenAPI::fromJsonValue(m_mobile_data, json[QString("MobileData")]);
    m_mobile_data_isSet = !json[QString("MobileData")].isNull() && m_mobile_data_isValid;

    m_payment_instrument_type_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_type, json[QString("PaymentInstrumentType")]);
    m_payment_instrument_type_isSet = !json[QString("PaymentInstrumentType")].isNull() && m_payment_instrument_type_isValid;

    m_protected_card_data_isValid = ::OpenAPI::fromJsonValue(m_protected_card_data, json[QString("ProtectedCardData")]);
    m_protected_card_data_isSet = !json[QString("ProtectedCardData")].isNull() && m_protected_card_data_isValid;

    m_stored_value_account_id_isValid = ::OpenAPI::fromJsonValue(m_stored_value_account_id, json[QString("StoredValueAccountID")]);
    m_stored_value_account_id_isSet = !json[QString("StoredValueAccountID")].isNull() && m_stored_value_account_id_isValid;
}

QString OAIPaymentInstrumentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentInstrumentData::asJsonObject() const {
    QJsonObject obj;
    if (m_card_data.isSet()) {
        obj.insert(QString("CardData"), ::OpenAPI::toJsonValue(m_card_data));
    }
    if (m_check_data.isSet()) {
        obj.insert(QString("CheckData"), ::OpenAPI::toJsonValue(m_check_data));
    }
    if (m_mobile_data.isSet()) {
        obj.insert(QString("MobileData"), ::OpenAPI::toJsonValue(m_mobile_data));
    }
    if (m_payment_instrument_type.isSet()) {
        obj.insert(QString("PaymentInstrumentType"), ::OpenAPI::toJsonValue(m_payment_instrument_type));
    }
    if (m_protected_card_data_isSet) {
        obj.insert(QString("ProtectedCardData"), ::OpenAPI::toJsonValue(m_protected_card_data));
    }
    if (m_stored_value_account_id.isSet()) {
        obj.insert(QString("StoredValueAccountID"), ::OpenAPI::toJsonValue(m_stored_value_account_id));
    }
    return obj;
}

OAICardData OAIPaymentInstrumentData::getCardData() const {
    return m_card_data;
}
void OAIPaymentInstrumentData::setCardData(const OAICardData &card_data) {
    m_card_data = card_data;
    m_card_data_isSet = true;
}

bool OAIPaymentInstrumentData::is_card_data_Set() const{
    return m_card_data_isSet;
}

bool OAIPaymentInstrumentData::is_card_data_Valid() const{
    return m_card_data_isValid;
}

OAICheckData OAIPaymentInstrumentData::getCheckData() const {
    return m_check_data;
}
void OAIPaymentInstrumentData::setCheckData(const OAICheckData &check_data) {
    m_check_data = check_data;
    m_check_data_isSet = true;
}

bool OAIPaymentInstrumentData::is_check_data_Set() const{
    return m_check_data_isSet;
}

bool OAIPaymentInstrumentData::is_check_data_Valid() const{
    return m_check_data_isValid;
}

OAIMobileData OAIPaymentInstrumentData::getMobileData() const {
    return m_mobile_data;
}
void OAIPaymentInstrumentData::setMobileData(const OAIMobileData &mobile_data) {
    m_mobile_data = mobile_data;
    m_mobile_data_isSet = true;
}

bool OAIPaymentInstrumentData::is_mobile_data_Set() const{
    return m_mobile_data_isSet;
}

bool OAIPaymentInstrumentData::is_mobile_data_Valid() const{
    return m_mobile_data_isValid;
}

OAIPaymentInstrumentType OAIPaymentInstrumentData::getPaymentInstrumentType() const {
    return m_payment_instrument_type;
}
void OAIPaymentInstrumentData::setPaymentInstrumentType(const OAIPaymentInstrumentType &payment_instrument_type) {
    m_payment_instrument_type = payment_instrument_type;
    m_payment_instrument_type_isSet = true;
}

bool OAIPaymentInstrumentData::is_payment_instrument_type_Set() const{
    return m_payment_instrument_type_isSet;
}

bool OAIPaymentInstrumentData::is_payment_instrument_type_Valid() const{
    return m_payment_instrument_type_isValid;
}

QString OAIPaymentInstrumentData::getProtectedCardData() const {
    return m_protected_card_data;
}
void OAIPaymentInstrumentData::setProtectedCardData(const QString &protected_card_data) {
    m_protected_card_data = protected_card_data;
    m_protected_card_data_isSet = true;
}

bool OAIPaymentInstrumentData::is_protected_card_data_Set() const{
    return m_protected_card_data_isSet;
}

bool OAIPaymentInstrumentData::is_protected_card_data_Valid() const{
    return m_protected_card_data_isValid;
}

OAIStoredValueAccountID OAIPaymentInstrumentData::getStoredValueAccountId() const {
    return m_stored_value_account_id;
}
void OAIPaymentInstrumentData::setStoredValueAccountId(const OAIStoredValueAccountID &stored_value_account_id) {
    m_stored_value_account_id = stored_value_account_id;
    m_stored_value_account_id_isSet = true;
}

bool OAIPaymentInstrumentData::is_stored_value_account_id_Set() const{
    return m_stored_value_account_id_isSet;
}

bool OAIPaymentInstrumentData::is_stored_value_account_id_Valid() const{
    return m_stored_value_account_id_isValid;
}

bool OAIPaymentInstrumentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_card_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentInstrumentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_instrument_type_isValid && true;
}

} // namespace OpenAPI
