/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetTotalsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetTotalsRequest::OAIGetTotalsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetTotalsRequest::OAIGetTotalsRequest() {
    this->initializeModel();
}

OAIGetTotalsRequest::~OAIGetTotalsRequest() {}

void OAIGetTotalsRequest::initializeModel() {

    m_total_details_isSet = false;
    m_total_details_isValid = false;

    m_total_filter_isSet = false;
    m_total_filter_isValid = false;
}

void OAIGetTotalsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetTotalsRequest::fromJsonObject(QJsonObject json) {

    m_total_details_isValid = ::OpenAPI::fromJsonValue(m_total_details, json[QString("TotalDetails")]);
    m_total_details_isSet = !json[QString("TotalDetails")].isNull() && m_total_details_isValid;

    m_total_filter_isValid = ::OpenAPI::fromJsonValue(m_total_filter, json[QString("TotalFilter")]);
    m_total_filter_isSet = !json[QString("TotalFilter")].isNull() && m_total_filter_isValid;
}

QString OAIGetTotalsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetTotalsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_total_details.size() > 0) {
        obj.insert(QString("TotalDetails"), ::OpenAPI::toJsonValue(m_total_details));
    }
    if (m_total_filter.isSet()) {
        obj.insert(QString("TotalFilter"), ::OpenAPI::toJsonValue(m_total_filter));
    }
    return obj;
}

QList<QString> OAIGetTotalsRequest::getTotalDetails() const {
    return m_total_details;
}
void OAIGetTotalsRequest::setTotalDetails(const QList<QString> &total_details) {
    m_total_details = total_details;
    m_total_details_isSet = true;
}

bool OAIGetTotalsRequest::is_total_details_Set() const{
    return m_total_details_isSet;
}

bool OAIGetTotalsRequest::is_total_details_Valid() const{
    return m_total_details_isValid;
}

OAITotalFilter OAIGetTotalsRequest::getTotalFilter() const {
    return m_total_filter;
}
void OAIGetTotalsRequest::setTotalFilter(const OAITotalFilter &total_filter) {
    m_total_filter = total_filter;
    m_total_filter_isSet = true;
}

bool OAIGetTotalsRequest::is_total_filter_Set() const{
    return m_total_filter_isSet;
}

bool OAIGetTotalsRequest::is_total_filter_Valid() const{
    return m_total_filter_isValid;
}

bool OAIGetTotalsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetTotalsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
