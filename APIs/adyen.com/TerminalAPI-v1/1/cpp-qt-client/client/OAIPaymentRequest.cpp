/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentRequest::OAIPaymentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentRequest::OAIPaymentRequest() {
    this->initializeModel();
}

OAIPaymentRequest::~OAIPaymentRequest() {}

void OAIPaymentRequest::initializeModel() {

    m_loyalty_data_isSet = false;
    m_loyalty_data_isValid = false;

    m_payment_data_isSet = false;
    m_payment_data_isValid = false;

    m_payment_transaction_isSet = false;
    m_payment_transaction_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;
}

void OAIPaymentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentRequest::fromJsonObject(QJsonObject json) {

    m_loyalty_data_isValid = ::OpenAPI::fromJsonValue(m_loyalty_data, json[QString("LoyaltyData")]);
    m_loyalty_data_isSet = !json[QString("LoyaltyData")].isNull() && m_loyalty_data_isValid;

    m_payment_data_isValid = ::OpenAPI::fromJsonValue(m_payment_data, json[QString("PaymentData")]);
    m_payment_data_isSet = !json[QString("PaymentData")].isNull() && m_payment_data_isValid;

    m_payment_transaction_isValid = ::OpenAPI::fromJsonValue(m_payment_transaction, json[QString("PaymentTransaction")]);
    m_payment_transaction_isSet = !json[QString("PaymentTransaction")].isNull() && m_payment_transaction_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;
}

QString OAIPaymentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_data.size() > 0) {
        obj.insert(QString("LoyaltyData"), ::OpenAPI::toJsonValue(m_loyalty_data));
    }
    if (m_payment_data.isSet()) {
        obj.insert(QString("PaymentData"), ::OpenAPI::toJsonValue(m_payment_data));
    }
    if (m_payment_transaction.isSet()) {
        obj.insert(QString("PaymentTransaction"), ::OpenAPI::toJsonValue(m_payment_transaction));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    return obj;
}

QList<OAILoyaltyData> OAIPaymentRequest::getLoyaltyData() const {
    return m_loyalty_data;
}
void OAIPaymentRequest::setLoyaltyData(const QList<OAILoyaltyData> &loyalty_data) {
    m_loyalty_data = loyalty_data;
    m_loyalty_data_isSet = true;
}

bool OAIPaymentRequest::is_loyalty_data_Set() const{
    return m_loyalty_data_isSet;
}

bool OAIPaymentRequest::is_loyalty_data_Valid() const{
    return m_loyalty_data_isValid;
}

OAIPaymentData OAIPaymentRequest::getPaymentData() const {
    return m_payment_data;
}
void OAIPaymentRequest::setPaymentData(const OAIPaymentData &payment_data) {
    m_payment_data = payment_data;
    m_payment_data_isSet = true;
}

bool OAIPaymentRequest::is_payment_data_Set() const{
    return m_payment_data_isSet;
}

bool OAIPaymentRequest::is_payment_data_Valid() const{
    return m_payment_data_isValid;
}

OAIPaymentTransaction OAIPaymentRequest::getPaymentTransaction() const {
    return m_payment_transaction;
}
void OAIPaymentRequest::setPaymentTransaction(const OAIPaymentTransaction &payment_transaction) {
    m_payment_transaction = payment_transaction;
    m_payment_transaction_isSet = true;
}

bool OAIPaymentRequest::is_payment_transaction_Set() const{
    return m_payment_transaction_isSet;
}

bool OAIPaymentRequest::is_payment_transaction_Valid() const{
    return m_payment_transaction_isValid;
}

OAISaleData OAIPaymentRequest::getSaleData() const {
    return m_sale_data;
}
void OAIPaymentRequest::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAIPaymentRequest::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAIPaymentRequest::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

bool OAIPaymentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_transaction_isValid && m_sale_data_isValid && true;
}

} // namespace OpenAPI
