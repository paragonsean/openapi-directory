/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensitiveMobileData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensitiveMobileData::OAISensitiveMobileData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensitiveMobileData::OAISensitiveMobileData() {
    this->initializeModel();
}

OAISensitiveMobileData::~OAISensitiveMobileData() {}

void OAISensitiveMobileData::initializeModel() {

    m_imei_isSet = false;
    m_imei_isValid = false;

    m_ismi_isSet = false;
    m_ismi_isValid = false;

    m_msisdn_isSet = false;
    m_msisdn_isValid = false;
}

void OAISensitiveMobileData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISensitiveMobileData::fromJsonObject(QJsonObject json) {

    m_imei_isValid = ::OpenAPI::fromJsonValue(m_imei, json[QString("IMEI")]);
    m_imei_isSet = !json[QString("IMEI")].isNull() && m_imei_isValid;

    m_ismi_isValid = ::OpenAPI::fromJsonValue(m_ismi, json[QString("ISMI")]);
    m_ismi_isSet = !json[QString("ISMI")].isNull() && m_ismi_isValid;

    m_msisdn_isValid = ::OpenAPI::fromJsonValue(m_msisdn, json[QString("MSISDN")]);
    m_msisdn_isSet = !json[QString("MSISDN")].isNull() && m_msisdn_isValid;
}

QString OAISensitiveMobileData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISensitiveMobileData::asJsonObject() const {
    QJsonObject obj;
    if (m_imei_isSet) {
        obj.insert(QString("IMEI"), ::OpenAPI::toJsonValue(m_imei));
    }
    if (m_ismi_isSet) {
        obj.insert(QString("ISMI"), ::OpenAPI::toJsonValue(m_ismi));
    }
    if (m_msisdn_isSet) {
        obj.insert(QString("MSISDN"), ::OpenAPI::toJsonValue(m_msisdn));
    }
    return obj;
}

qint32 OAISensitiveMobileData::getImei() const {
    return m_imei;
}
void OAISensitiveMobileData::setImei(const qint32 &imei) {
    m_imei = imei;
    m_imei_isSet = true;
}

bool OAISensitiveMobileData::is_imei_Set() const{
    return m_imei_isSet;
}

bool OAISensitiveMobileData::is_imei_Valid() const{
    return m_imei_isValid;
}

qint32 OAISensitiveMobileData::getIsmi() const {
    return m_ismi;
}
void OAISensitiveMobileData::setIsmi(const qint32 &ismi) {
    m_ismi = ismi;
    m_ismi_isSet = true;
}

bool OAISensitiveMobileData::is_ismi_Set() const{
    return m_ismi_isSet;
}

bool OAISensitiveMobileData::is_ismi_Valid() const{
    return m_ismi_isValid;
}

qint32 OAISensitiveMobileData::getMsisdn() const {
    return m_msisdn;
}
void OAISensitiveMobileData::setMsisdn(const qint32 &msisdn) {
    m_msisdn = msisdn;
    m_msisdn_isSet = true;
}

bool OAISensitiveMobileData::is_msisdn_Set() const{
    return m_msisdn_isSet;
}

bool OAISensitiveMobileData::is_msisdn_Valid() const{
    return m_msisdn_isValid;
}

bool OAISensitiveMobileData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_imei_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ismi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_msisdn_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISensitiveMobileData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_msisdn_isValid && true;
}

} // namespace OpenAPI
