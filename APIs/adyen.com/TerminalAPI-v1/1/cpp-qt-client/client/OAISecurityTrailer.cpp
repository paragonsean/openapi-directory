/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityTrailer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityTrailer::OAISecurityTrailer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityTrailer::OAISecurityTrailer() {
    this->initializeModel();
}

OAISecurityTrailer::~OAISecurityTrailer() {}

void OAISecurityTrailer::initializeModel() {

    m_adyen_crypto_version_isSet = false;
    m_adyen_crypto_version_isValid = false;

    m_hmac_isSet = false;
    m_hmac_isValid = false;

    m_key_identifier_isSet = false;
    m_key_identifier_isValid = false;

    m_key_version_isSet = false;
    m_key_version_isValid = false;

    m_nonce_isSet = false;
    m_nonce_isValid = false;
}

void OAISecurityTrailer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityTrailer::fromJsonObject(QJsonObject json) {

    m_adyen_crypto_version_isValid = ::OpenAPI::fromJsonValue(m_adyen_crypto_version, json[QString("AdyenCryptoVersion")]);
    m_adyen_crypto_version_isSet = !json[QString("AdyenCryptoVersion")].isNull() && m_adyen_crypto_version_isValid;

    m_hmac_isValid = ::OpenAPI::fromJsonValue(m_hmac, json[QString("Hmac")]);
    m_hmac_isSet = !json[QString("Hmac")].isNull() && m_hmac_isValid;

    m_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_key_identifier, json[QString("KeyIdentifier")]);
    m_key_identifier_isSet = !json[QString("KeyIdentifier")].isNull() && m_key_identifier_isValid;

    m_key_version_isValid = ::OpenAPI::fromJsonValue(m_key_version, json[QString("KeyVersion")]);
    m_key_version_isSet = !json[QString("KeyVersion")].isNull() && m_key_version_isValid;

    m_nonce_isValid = ::OpenAPI::fromJsonValue(m_nonce, json[QString("Nonce")]);
    m_nonce_isSet = !json[QString("Nonce")].isNull() && m_nonce_isValid;
}

QString OAISecurityTrailer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityTrailer::asJsonObject() const {
    QJsonObject obj;
    if (m_adyen_crypto_version_isSet) {
        obj.insert(QString("AdyenCryptoVersion"), ::OpenAPI::toJsonValue(m_adyen_crypto_version));
    }
    if (m_hmac_isSet) {
        obj.insert(QString("Hmac"), ::OpenAPI::toJsonValue(m_hmac));
    }
    if (m_key_identifier_isSet) {
        obj.insert(QString("KeyIdentifier"), ::OpenAPI::toJsonValue(m_key_identifier));
    }
    if (m_key_version_isSet) {
        obj.insert(QString("KeyVersion"), ::OpenAPI::toJsonValue(m_key_version));
    }
    if (m_nonce_isSet) {
        obj.insert(QString("Nonce"), ::OpenAPI::toJsonValue(m_nonce));
    }
    return obj;
}

qint32 OAISecurityTrailer::getAdyenCryptoVersion() const {
    return m_adyen_crypto_version;
}
void OAISecurityTrailer::setAdyenCryptoVersion(const qint32 &adyen_crypto_version) {
    m_adyen_crypto_version = adyen_crypto_version;
    m_adyen_crypto_version_isSet = true;
}

bool OAISecurityTrailer::is_adyen_crypto_version_Set() const{
    return m_adyen_crypto_version_isSet;
}

bool OAISecurityTrailer::is_adyen_crypto_version_Valid() const{
    return m_adyen_crypto_version_isValid;
}

QString OAISecurityTrailer::getHmac() const {
    return m_hmac;
}
void OAISecurityTrailer::setHmac(const QString &hmac) {
    m_hmac = hmac;
    m_hmac_isSet = true;
}

bool OAISecurityTrailer::is_hmac_Set() const{
    return m_hmac_isSet;
}

bool OAISecurityTrailer::is_hmac_Valid() const{
    return m_hmac_isValid;
}

QString OAISecurityTrailer::getKeyIdentifier() const {
    return m_key_identifier;
}
void OAISecurityTrailer::setKeyIdentifier(const QString &key_identifier) {
    m_key_identifier = key_identifier;
    m_key_identifier_isSet = true;
}

bool OAISecurityTrailer::is_key_identifier_Set() const{
    return m_key_identifier_isSet;
}

bool OAISecurityTrailer::is_key_identifier_Valid() const{
    return m_key_identifier_isValid;
}

qint32 OAISecurityTrailer::getKeyVersion() const {
    return m_key_version;
}
void OAISecurityTrailer::setKeyVersion(const qint32 &key_version) {
    m_key_version = key_version;
    m_key_version_isSet = true;
}

bool OAISecurityTrailer::is_key_version_Set() const{
    return m_key_version_isSet;
}

bool OAISecurityTrailer::is_key_version_Valid() const{
    return m_key_version_isValid;
}

QString OAISecurityTrailer::getNonce() const {
    return m_nonce;
}
void OAISecurityTrailer::setNonce(const QString &nonce) {
    m_nonce = nonce;
    m_nonce_isSet = true;
}

bool OAISecurityTrailer::is_nonce_Set() const{
    return m_nonce_isSet;
}

bool OAISecurityTrailer::is_nonce_Valid() const{
    return m_nonce_isValid;
}

bool OAISecurityTrailer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adyen_crypto_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hmac_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nonce_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityTrailer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_adyen_crypto_version_isValid && m_hmac_isValid && m_key_identifier_isValid && m_key_version_isValid && m_nonce_isValid && true;
}

} // namespace OpenAPI
