/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllowedProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllowedProduct::OAIAllowedProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllowedProduct::OAIAllowedProduct() {
    this->initializeModel();
}

OAIAllowedProduct::~OAIAllowedProduct() {}

void OAIAllowedProduct::initializeModel() {

    m_additional_product_info_isSet = false;
    m_additional_product_info_isValid = false;

    m_ean_upc_isSet = false;
    m_ean_upc_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_product_label_isSet = false;
    m_product_label_isValid = false;
}

void OAIAllowedProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllowedProduct::fromJsonObject(QJsonObject json) {

    m_additional_product_info_isValid = ::OpenAPI::fromJsonValue(m_additional_product_info, json[QString("AdditionalProductInfo")]);
    m_additional_product_info_isSet = !json[QString("AdditionalProductInfo")].isNull() && m_additional_product_info_isValid;

    m_ean_upc_isValid = ::OpenAPI::fromJsonValue(m_ean_upc, json[QString("EanUpc")]);
    m_ean_upc_isSet = !json[QString("EanUpc")].isNull() && m_ean_upc_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_product_label_isValid = ::OpenAPI::fromJsonValue(m_product_label, json[QString("ProductLabel")]);
    m_product_label_isSet = !json[QString("ProductLabel")].isNull() && m_product_label_isValid;
}

QString OAIAllowedProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllowedProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_product_info_isSet) {
        obj.insert(QString("AdditionalProductInfo"), ::OpenAPI::toJsonValue(m_additional_product_info));
    }
    if (m_ean_upc_isSet) {
        obj.insert(QString("EanUpc"), ::OpenAPI::toJsonValue(m_ean_upc));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_product_label_isSet) {
        obj.insert(QString("ProductLabel"), ::OpenAPI::toJsonValue(m_product_label));
    }
    return obj;
}

QString OAIAllowedProduct::getAdditionalProductInfo() const {
    return m_additional_product_info;
}
void OAIAllowedProduct::setAdditionalProductInfo(const QString &additional_product_info) {
    m_additional_product_info = additional_product_info;
    m_additional_product_info_isSet = true;
}

bool OAIAllowedProduct::is_additional_product_info_Set() const{
    return m_additional_product_info_isSet;
}

bool OAIAllowedProduct::is_additional_product_info_Valid() const{
    return m_additional_product_info_isValid;
}

qint32 OAIAllowedProduct::getEanUpc() const {
    return m_ean_upc;
}
void OAIAllowedProduct::setEanUpc(const qint32 &ean_upc) {
    m_ean_upc = ean_upc;
    m_ean_upc_isSet = true;
}

bool OAIAllowedProduct::is_ean_upc_Set() const{
    return m_ean_upc_isSet;
}

bool OAIAllowedProduct::is_ean_upc_Valid() const{
    return m_ean_upc_isValid;
}

qint32 OAIAllowedProduct::getProductCode() const {
    return m_product_code;
}
void OAIAllowedProduct::setProductCode(const qint32 &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIAllowedProduct::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIAllowedProduct::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAIAllowedProduct::getProductLabel() const {
    return m_product_label;
}
void OAIAllowedProduct::setProductLabel(const QString &product_label) {
    m_product_label = product_label;
    m_product_label_isSet = true;
}

bool OAIAllowedProduct::is_product_label_Set() const{
    return m_product_label_isSet;
}

bool OAIAllowedProduct::is_product_label_Valid() const{
    return m_product_label_isValid;
}

bool OAIAllowedProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_product_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_label_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllowedProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_product_code_isValid && true;
}

} // namespace OpenAPI
