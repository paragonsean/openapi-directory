/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstalment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstalment::OAIInstalment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstalment::OAIInstalment() {
    this->initializeModel();
}

OAIInstalment::~OAIInstalment() {}

void OAIInstalment::initializeModel() {

    m_charges_isSet = false;
    m_charges_isValid = false;

    m_cumulative_amount_isSet = false;
    m_cumulative_amount_isValid = false;

    m_first_amount_isSet = false;
    m_first_amount_isValid = false;

    m_first_payment_date_isSet = false;
    m_first_payment_date_isValid = false;

    m_instalment_type_isSet = false;
    m_instalment_type_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_period_unit_isSet = false;
    m_period_unit_isValid = false;

    m_plan_id_isSet = false;
    m_plan_id_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;

    m_total_nb_of_payments_isSet = false;
    m_total_nb_of_payments_isValid = false;
}

void OAIInstalment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstalment::fromJsonObject(QJsonObject json) {

    m_charges_isValid = ::OpenAPI::fromJsonValue(m_charges, json[QString("Charges")]);
    m_charges_isSet = !json[QString("Charges")].isNull() && m_charges_isValid;

    m_cumulative_amount_isValid = ::OpenAPI::fromJsonValue(m_cumulative_amount, json[QString("CumulativeAmount")]);
    m_cumulative_amount_isSet = !json[QString("CumulativeAmount")].isNull() && m_cumulative_amount_isValid;

    m_first_amount_isValid = ::OpenAPI::fromJsonValue(m_first_amount, json[QString("FirstAmount")]);
    m_first_amount_isSet = !json[QString("FirstAmount")].isNull() && m_first_amount_isValid;

    m_first_payment_date_isValid = ::OpenAPI::fromJsonValue(m_first_payment_date, json[QString("FirstPaymentDate")]);
    m_first_payment_date_isSet = !json[QString("FirstPaymentDate")].isNull() && m_first_payment_date_isValid;

    m_instalment_type_isValid = ::OpenAPI::fromJsonValue(m_instalment_type, json[QString("InstalmentType")]);
    m_instalment_type_isSet = !json[QString("InstalmentType")].isNull() && m_instalment_type_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("Period")]);
    m_period_isSet = !json[QString("Period")].isNull() && m_period_isValid;

    m_period_unit_isValid = ::OpenAPI::fromJsonValue(m_period_unit, json[QString("PeriodUnit")]);
    m_period_unit_isSet = !json[QString("PeriodUnit")].isNull() && m_period_unit_isValid;

    m_plan_id_isValid = ::OpenAPI::fromJsonValue(m_plan_id, json[QString("PlanID")]);
    m_plan_id_isSet = !json[QString("PlanID")].isNull() && m_plan_id_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("SequenceNumber")]);
    m_sequence_number_isSet = !json[QString("SequenceNumber")].isNull() && m_sequence_number_isValid;

    m_total_nb_of_payments_isValid = ::OpenAPI::fromJsonValue(m_total_nb_of_payments, json[QString("TotalNbOfPayments")]);
    m_total_nb_of_payments_isSet = !json[QString("TotalNbOfPayments")].isNull() && m_total_nb_of_payments_isValid;
}

QString OAIInstalment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstalment::asJsonObject() const {
    QJsonObject obj;
    if (m_charges_isSet) {
        obj.insert(QString("Charges"), ::OpenAPI::toJsonValue(m_charges));
    }
    if (m_cumulative_amount_isSet) {
        obj.insert(QString("CumulativeAmount"), ::OpenAPI::toJsonValue(m_cumulative_amount));
    }
    if (m_first_amount_isSet) {
        obj.insert(QString("FirstAmount"), ::OpenAPI::toJsonValue(m_first_amount));
    }
    if (m_first_payment_date_isSet) {
        obj.insert(QString("FirstPaymentDate"), ::OpenAPI::toJsonValue(m_first_payment_date));
    }
    if (m_instalment_type.isSet()) {
        obj.insert(QString("InstalmentType"), ::OpenAPI::toJsonValue(m_instalment_type));
    }
    if (m_period_isSet) {
        obj.insert(QString("Period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_period_unit.isSet()) {
        obj.insert(QString("PeriodUnit"), ::OpenAPI::toJsonValue(m_period_unit));
    }
    if (m_plan_id_isSet) {
        obj.insert(QString("PlanID"), ::OpenAPI::toJsonValue(m_plan_id));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("SequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    if (m_total_nb_of_payments_isSet) {
        obj.insert(QString("TotalNbOfPayments"), ::OpenAPI::toJsonValue(m_total_nb_of_payments));
    }
    return obj;
}

double OAIInstalment::getCharges() const {
    return m_charges;
}
void OAIInstalment::setCharges(const double &charges) {
    m_charges = charges;
    m_charges_isSet = true;
}

bool OAIInstalment::is_charges_Set() const{
    return m_charges_isSet;
}

bool OAIInstalment::is_charges_Valid() const{
    return m_charges_isValid;
}

double OAIInstalment::getCumulativeAmount() const {
    return m_cumulative_amount;
}
void OAIInstalment::setCumulativeAmount(const double &cumulative_amount) {
    m_cumulative_amount = cumulative_amount;
    m_cumulative_amount_isSet = true;
}

bool OAIInstalment::is_cumulative_amount_Set() const{
    return m_cumulative_amount_isSet;
}

bool OAIInstalment::is_cumulative_amount_Valid() const{
    return m_cumulative_amount_isValid;
}

double OAIInstalment::getFirstAmount() const {
    return m_first_amount;
}
void OAIInstalment::setFirstAmount(const double &first_amount) {
    m_first_amount = first_amount;
    m_first_amount_isSet = true;
}

bool OAIInstalment::is_first_amount_Set() const{
    return m_first_amount_isSet;
}

bool OAIInstalment::is_first_amount_Valid() const{
    return m_first_amount_isValid;
}

QDate OAIInstalment::getFirstPaymentDate() const {
    return m_first_payment_date;
}
void OAIInstalment::setFirstPaymentDate(const QDate &first_payment_date) {
    m_first_payment_date = first_payment_date;
    m_first_payment_date_isSet = true;
}

bool OAIInstalment::is_first_payment_date_Set() const{
    return m_first_payment_date_isSet;
}

bool OAIInstalment::is_first_payment_date_Valid() const{
    return m_first_payment_date_isValid;
}

OAIInstalmentType OAIInstalment::getInstalmentType() const {
    return m_instalment_type;
}
void OAIInstalment::setInstalmentType(const OAIInstalmentType &instalment_type) {
    m_instalment_type = instalment_type;
    m_instalment_type_isSet = true;
}

bool OAIInstalment::is_instalment_type_Set() const{
    return m_instalment_type_isSet;
}

bool OAIInstalment::is_instalment_type_Valid() const{
    return m_instalment_type_isValid;
}

qint32 OAIInstalment::getPeriod() const {
    return m_period;
}
void OAIInstalment::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIInstalment::is_period_Set() const{
    return m_period_isSet;
}

bool OAIInstalment::is_period_Valid() const{
    return m_period_isValid;
}

OAIPeriodUnit OAIInstalment::getPeriodUnit() const {
    return m_period_unit;
}
void OAIInstalment::setPeriodUnit(const OAIPeriodUnit &period_unit) {
    m_period_unit = period_unit;
    m_period_unit_isSet = true;
}

bool OAIInstalment::is_period_unit_Set() const{
    return m_period_unit_isSet;
}

bool OAIInstalment::is_period_unit_Valid() const{
    return m_period_unit_isValid;
}

QString OAIInstalment::getPlanId() const {
    return m_plan_id;
}
void OAIInstalment::setPlanId(const QString &plan_id) {
    m_plan_id = plan_id;
    m_plan_id_isSet = true;
}

bool OAIInstalment::is_plan_id_Set() const{
    return m_plan_id_isSet;
}

bool OAIInstalment::is_plan_id_Valid() const{
    return m_plan_id_isValid;
}

qint32 OAIInstalment::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIInstalment::setSequenceNumber(const qint32 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIInstalment::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIInstalment::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

qint32 OAIInstalment::getTotalNbOfPayments() const {
    return m_total_nb_of_payments;
}
void OAIInstalment::setTotalNbOfPayments(const qint32 &total_nb_of_payments) {
    m_total_nb_of_payments = total_nb_of_payments;
    m_total_nb_of_payments_isSet = true;
}

bool OAIInstalment::is_total_nb_of_payments_Set() const{
    return m_total_nb_of_payments_isSet;
}

bool OAIInstalment::is_total_nb_of_payments_Valid() const{
    return m_total_nb_of_payments_isValid;
}

bool OAIInstalment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cumulative_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_payment_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_nb_of_payments_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstalment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
