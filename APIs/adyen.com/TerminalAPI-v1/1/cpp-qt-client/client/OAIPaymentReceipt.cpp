/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentReceipt.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentReceipt::OAIPaymentReceipt(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentReceipt::OAIPaymentReceipt() {
    this->initializeModel();
}

OAIPaymentReceipt::~OAIPaymentReceipt() {}

void OAIPaymentReceipt::initializeModel() {

    m_document_qualifier_isSet = false;
    m_document_qualifier_isValid = false;

    m_integrated_print_flag_isSet = false;
    m_integrated_print_flag_isValid = false;

    m_output_content_isSet = false;
    m_output_content_isValid = false;

    m_required_signature_flag_isSet = false;
    m_required_signature_flag_isValid = false;
}

void OAIPaymentReceipt::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentReceipt::fromJsonObject(QJsonObject json) {

    m_document_qualifier_isValid = ::OpenAPI::fromJsonValue(m_document_qualifier, json[QString("DocumentQualifier")]);
    m_document_qualifier_isSet = !json[QString("DocumentQualifier")].isNull() && m_document_qualifier_isValid;

    m_integrated_print_flag_isValid = ::OpenAPI::fromJsonValue(m_integrated_print_flag, json[QString("IntegratedPrintFlag")]);
    m_integrated_print_flag_isSet = !json[QString("IntegratedPrintFlag")].isNull() && m_integrated_print_flag_isValid;

    m_output_content_isValid = ::OpenAPI::fromJsonValue(m_output_content, json[QString("OutputContent")]);
    m_output_content_isSet = !json[QString("OutputContent")].isNull() && m_output_content_isValid;

    m_required_signature_flag_isValid = ::OpenAPI::fromJsonValue(m_required_signature_flag, json[QString("RequiredSignatureFlag")]);
    m_required_signature_flag_isSet = !json[QString("RequiredSignatureFlag")].isNull() && m_required_signature_flag_isValid;
}

QString OAIPaymentReceipt::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentReceipt::asJsonObject() const {
    QJsonObject obj;
    if (m_document_qualifier.isSet()) {
        obj.insert(QString("DocumentQualifier"), ::OpenAPI::toJsonValue(m_document_qualifier));
    }
    if (m_integrated_print_flag_isSet) {
        obj.insert(QString("IntegratedPrintFlag"), ::OpenAPI::toJsonValue(m_integrated_print_flag));
    }
    if (m_output_content.isSet()) {
        obj.insert(QString("OutputContent"), ::OpenAPI::toJsonValue(m_output_content));
    }
    if (m_required_signature_flag_isSet) {
        obj.insert(QString("RequiredSignatureFlag"), ::OpenAPI::toJsonValue(m_required_signature_flag));
    }
    return obj;
}

OAIDocumentQualifier OAIPaymentReceipt::getDocumentQualifier() const {
    return m_document_qualifier;
}
void OAIPaymentReceipt::setDocumentQualifier(const OAIDocumentQualifier &document_qualifier) {
    m_document_qualifier = document_qualifier;
    m_document_qualifier_isSet = true;
}

bool OAIPaymentReceipt::is_document_qualifier_Set() const{
    return m_document_qualifier_isSet;
}

bool OAIPaymentReceipt::is_document_qualifier_Valid() const{
    return m_document_qualifier_isValid;
}

bool OAIPaymentReceipt::isIntegratedPrintFlag() const {
    return m_integrated_print_flag;
}
void OAIPaymentReceipt::setIntegratedPrintFlag(const bool &integrated_print_flag) {
    m_integrated_print_flag = integrated_print_flag;
    m_integrated_print_flag_isSet = true;
}

bool OAIPaymentReceipt::is_integrated_print_flag_Set() const{
    return m_integrated_print_flag_isSet;
}

bool OAIPaymentReceipt::is_integrated_print_flag_Valid() const{
    return m_integrated_print_flag_isValid;
}

OAIOutputContent OAIPaymentReceipt::getOutputContent() const {
    return m_output_content;
}
void OAIPaymentReceipt::setOutputContent(const OAIOutputContent &output_content) {
    m_output_content = output_content;
    m_output_content_isSet = true;
}

bool OAIPaymentReceipt::is_output_content_Set() const{
    return m_output_content_isSet;
}

bool OAIPaymentReceipt::is_output_content_Valid() const{
    return m_output_content_isValid;
}

bool OAIPaymentReceipt::isRequiredSignatureFlag() const {
    return m_required_signature_flag;
}
void OAIPaymentReceipt::setRequiredSignatureFlag(const bool &required_signature_flag) {
    m_required_signature_flag = required_signature_flag;
    m_required_signature_flag_isSet = true;
}

bool OAIPaymentReceipt::is_required_signature_flag_Set() const{
    return m_required_signature_flag_isSet;
}

bool OAIPaymentReceipt::is_required_signature_flag_Valid() const{
    return m_required_signature_flag_isValid;
}

bool OAIPaymentReceipt::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_qualifier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integrated_print_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_signature_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentReceipt::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_qualifier_isValid && m_output_content_isValid && true;
}

} // namespace OpenAPI
