/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepeatedMessageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepeatedMessageResponse::OAIRepeatedMessageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepeatedMessageResponse::OAIRepeatedMessageResponse() {
    this->initializeModel();
}

OAIRepeatedMessageResponse::~OAIRepeatedMessageResponse() {}

void OAIRepeatedMessageResponse::initializeModel() {

    m_message_header_isSet = false;
    m_message_header_isValid = false;

    m_repeated_response_message_body_isSet = false;
    m_repeated_response_message_body_isValid = false;
}

void OAIRepeatedMessageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepeatedMessageResponse::fromJsonObject(QJsonObject json) {

    m_message_header_isValid = ::OpenAPI::fromJsonValue(m_message_header, json[QString("MessageHeader")]);
    m_message_header_isSet = !json[QString("MessageHeader")].isNull() && m_message_header_isValid;

    m_repeated_response_message_body_isValid = ::OpenAPI::fromJsonValue(m_repeated_response_message_body, json[QString("RepeatedResponseMessageBody")]);
    m_repeated_response_message_body_isSet = !json[QString("RepeatedResponseMessageBody")].isNull() && m_repeated_response_message_body_isValid;
}

QString OAIRepeatedMessageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepeatedMessageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_message_header.isSet()) {
        obj.insert(QString("MessageHeader"), ::OpenAPI::toJsonValue(m_message_header));
    }
    if (m_repeated_response_message_body.isSet()) {
        obj.insert(QString("RepeatedResponseMessageBody"), ::OpenAPI::toJsonValue(m_repeated_response_message_body));
    }
    return obj;
}

OAIMessageHeader OAIRepeatedMessageResponse::getMessageHeader() const {
    return m_message_header;
}
void OAIRepeatedMessageResponse::setMessageHeader(const OAIMessageHeader &message_header) {
    m_message_header = message_header;
    m_message_header_isSet = true;
}

bool OAIRepeatedMessageResponse::is_message_header_Set() const{
    return m_message_header_isSet;
}

bool OAIRepeatedMessageResponse::is_message_header_Valid() const{
    return m_message_header_isValid;
}

OAIRepeatedResponseMessageBody OAIRepeatedMessageResponse::getRepeatedResponseMessageBody() const {
    return m_repeated_response_message_body;
}
void OAIRepeatedMessageResponse::setRepeatedResponseMessageBody(const OAIRepeatedResponseMessageBody &repeated_response_message_body) {
    m_repeated_response_message_body = repeated_response_message_body;
    m_repeated_response_message_body_isSet = true;
}

bool OAIRepeatedMessageResponse::is_repeated_response_message_body_Set() const{
    return m_repeated_response_message_body_isSet;
}

bool OAIRepeatedMessageResponse::is_repeated_response_message_body_Valid() const{
    return m_repeated_response_message_body_isValid;
}

bool OAIRepeatedMessageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeated_response_message_body.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepeatedMessageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_header_isValid && m_repeated_response_message_body_isValid && true;
}

} // namespace OpenAPI
