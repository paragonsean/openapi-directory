/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentificationType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentificationType::OAIIdentificationType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentificationType::OAIIdentificationType() {
    this->initializeModel();
}

OAIIdentificationType::~OAIIdentificationType() {}

void OAIIdentificationType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIdentificationType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIdentificationType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("AccountNumber", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentificationType::ACCOUNTNUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BarCode", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentificationType::BARCODE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ISOTrack2", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentificationType::ISOTRACK2;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PAN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentificationType::PAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PhoneNumber", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIdentificationType::PHONENUMBER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIdentificationType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIdentificationType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIdentificationType::ACCOUNTNUMBER:
            val = "AccountNumber";
            break;
        case eOAIIdentificationType::BARCODE:
            val = "BarCode";
            break;
        case eOAIIdentificationType::ISOTRACK2:
            val = "ISOTrack2";
            break;
        case eOAIIdentificationType::PAN:
            val = "PAN";
            break;
        case eOAIIdentificationType::PHONENUMBER:
            val = "PhoneNumber";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIdentificationType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIdentificationType::eOAIIdentificationType OAIIdentificationType::getValue() const {
    return m_value;
}

void OAIIdentificationType::setValue(const OAIIdentificationType::eOAIIdentificationType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIdentificationType::isSet() const {
    
    return m_value_isSet;
}

bool OAIIdentificationType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
