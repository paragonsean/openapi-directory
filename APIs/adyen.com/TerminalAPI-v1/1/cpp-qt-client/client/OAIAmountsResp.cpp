/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmountsResp.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmountsResp::OAIAmountsResp(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmountsResp::OAIAmountsResp() {
    this->initializeModel();
}

OAIAmountsResp::~OAIAmountsResp() {}

void OAIAmountsResp::initializeModel() {

    m_authorized_amount_isSet = false;
    m_authorized_amount_isValid = false;

    m_cash_back_amount_isSet = false;
    m_cash_back_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_tip_amount_isSet = false;
    m_tip_amount_isValid = false;

    m_total_fees_amount_isSet = false;
    m_total_fees_amount_isValid = false;

    m_total_rebates_amount_isSet = false;
    m_total_rebates_amount_isValid = false;
}

void OAIAmountsResp::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmountsResp::fromJsonObject(QJsonObject json) {

    m_authorized_amount_isValid = ::OpenAPI::fromJsonValue(m_authorized_amount, json[QString("AuthorizedAmount")]);
    m_authorized_amount_isSet = !json[QString("AuthorizedAmount")].isNull() && m_authorized_amount_isValid;

    m_cash_back_amount_isValid = ::OpenAPI::fromJsonValue(m_cash_back_amount, json[QString("CashBackAmount")]);
    m_cash_back_amount_isSet = !json[QString("CashBackAmount")].isNull() && m_cash_back_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_tip_amount_isValid = ::OpenAPI::fromJsonValue(m_tip_amount, json[QString("TipAmount")]);
    m_tip_amount_isSet = !json[QString("TipAmount")].isNull() && m_tip_amount_isValid;

    m_total_fees_amount_isValid = ::OpenAPI::fromJsonValue(m_total_fees_amount, json[QString("TotalFeesAmount")]);
    m_total_fees_amount_isSet = !json[QString("TotalFeesAmount")].isNull() && m_total_fees_amount_isValid;

    m_total_rebates_amount_isValid = ::OpenAPI::fromJsonValue(m_total_rebates_amount, json[QString("TotalRebatesAmount")]);
    m_total_rebates_amount_isSet = !json[QString("TotalRebatesAmount")].isNull() && m_total_rebates_amount_isValid;
}

QString OAIAmountsResp::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmountsResp::asJsonObject() const {
    QJsonObject obj;
    if (m_authorized_amount_isSet) {
        obj.insert(QString("AuthorizedAmount"), ::OpenAPI::toJsonValue(m_authorized_amount));
    }
    if (m_cash_back_amount_isSet) {
        obj.insert(QString("CashBackAmount"), ::OpenAPI::toJsonValue(m_cash_back_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_tip_amount_isSet) {
        obj.insert(QString("TipAmount"), ::OpenAPI::toJsonValue(m_tip_amount));
    }
    if (m_total_fees_amount_isSet) {
        obj.insert(QString("TotalFeesAmount"), ::OpenAPI::toJsonValue(m_total_fees_amount));
    }
    if (m_total_rebates_amount_isSet) {
        obj.insert(QString("TotalRebatesAmount"), ::OpenAPI::toJsonValue(m_total_rebates_amount));
    }
    return obj;
}

double OAIAmountsResp::getAuthorizedAmount() const {
    return m_authorized_amount;
}
void OAIAmountsResp::setAuthorizedAmount(const double &authorized_amount) {
    m_authorized_amount = authorized_amount;
    m_authorized_amount_isSet = true;
}

bool OAIAmountsResp::is_authorized_amount_Set() const{
    return m_authorized_amount_isSet;
}

bool OAIAmountsResp::is_authorized_amount_Valid() const{
    return m_authorized_amount_isValid;
}

double OAIAmountsResp::getCashBackAmount() const {
    return m_cash_back_amount;
}
void OAIAmountsResp::setCashBackAmount(const double &cash_back_amount) {
    m_cash_back_amount = cash_back_amount;
    m_cash_back_amount_isSet = true;
}

bool OAIAmountsResp::is_cash_back_amount_Set() const{
    return m_cash_back_amount_isSet;
}

bool OAIAmountsResp::is_cash_back_amount_Valid() const{
    return m_cash_back_amount_isValid;
}

QString OAIAmountsResp::getCurrency() const {
    return m_currency;
}
void OAIAmountsResp::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAmountsResp::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAmountsResp::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIAmountsResp::getTipAmount() const {
    return m_tip_amount;
}
void OAIAmountsResp::setTipAmount(const double &tip_amount) {
    m_tip_amount = tip_amount;
    m_tip_amount_isSet = true;
}

bool OAIAmountsResp::is_tip_amount_Set() const{
    return m_tip_amount_isSet;
}

bool OAIAmountsResp::is_tip_amount_Valid() const{
    return m_tip_amount_isValid;
}

double OAIAmountsResp::getTotalFeesAmount() const {
    return m_total_fees_amount;
}
void OAIAmountsResp::setTotalFeesAmount(const double &total_fees_amount) {
    m_total_fees_amount = total_fees_amount;
    m_total_fees_amount_isSet = true;
}

bool OAIAmountsResp::is_total_fees_amount_Set() const{
    return m_total_fees_amount_isSet;
}

bool OAIAmountsResp::is_total_fees_amount_Valid() const{
    return m_total_fees_amount_isValid;
}

double OAIAmountsResp::getTotalRebatesAmount() const {
    return m_total_rebates_amount;
}
void OAIAmountsResp::setTotalRebatesAmount(const double &total_rebates_amount) {
    m_total_rebates_amount = total_rebates_amount;
    m_total_rebates_amount_isSet = true;
}

bool OAIAmountsResp::is_total_rebates_amount_Set() const{
    return m_total_rebates_amount_isSet;
}

bool OAIAmountsResp::is_total_rebates_amount_Valid() const{
    return m_total_rebates_amount_isValid;
}

bool OAIAmountsResp::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorized_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_back_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_fees_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rebates_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmountsResp::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorized_amount_isValid && true;
}

} // namespace OpenAPI
