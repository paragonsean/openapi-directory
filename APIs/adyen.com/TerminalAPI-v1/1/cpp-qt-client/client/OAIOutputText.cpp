/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputText.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputText::OAIOutputText(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputText::OAIOutputText() {
    this->initializeModel();
}

OAIOutputText::~OAIOutputText() {}

void OAIOutputText::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_character_height_isSet = false;
    m_character_height_isValid = false;

    m_character_set_isSet = false;
    m_character_set_isValid = false;

    m_character_style_isSet = false;
    m_character_style_isValid = false;

    m_character_width_isSet = false;
    m_character_width_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_end_of_line_flag_isSet = false;
    m_end_of_line_flag_isValid = false;

    m_font_isSet = false;
    m_font_isValid = false;

    m_start_column_isSet = false;
    m_start_column_isValid = false;

    m_start_row_isSet = false;
    m_start_row_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIOutputText::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputText::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("Alignment")]);
    m_alignment_isSet = !json[QString("Alignment")].isNull() && m_alignment_isValid;

    m_character_height_isValid = ::OpenAPI::fromJsonValue(m_character_height, json[QString("CharacterHeight")]);
    m_character_height_isSet = !json[QString("CharacterHeight")].isNull() && m_character_height_isValid;

    m_character_set_isValid = ::OpenAPI::fromJsonValue(m_character_set, json[QString("CharacterSet")]);
    m_character_set_isSet = !json[QString("CharacterSet")].isNull() && m_character_set_isValid;

    m_character_style_isValid = ::OpenAPI::fromJsonValue(m_character_style, json[QString("CharacterStyle")]);
    m_character_style_isSet = !json[QString("CharacterStyle")].isNull() && m_character_style_isValid;

    m_character_width_isValid = ::OpenAPI::fromJsonValue(m_character_width, json[QString("CharacterWidth")]);
    m_character_width_isSet = !json[QString("CharacterWidth")].isNull() && m_character_width_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("Color")]);
    m_color_isSet = !json[QString("Color")].isNull() && m_color_isValid;

    m_end_of_line_flag_isValid = ::OpenAPI::fromJsonValue(m_end_of_line_flag, json[QString("EndOfLineFlag")]);
    m_end_of_line_flag_isSet = !json[QString("EndOfLineFlag")].isNull() && m_end_of_line_flag_isValid;

    m_font_isValid = ::OpenAPI::fromJsonValue(m_font, json[QString("Font")]);
    m_font_isSet = !json[QString("Font")].isNull() && m_font_isValid;

    m_start_column_isValid = ::OpenAPI::fromJsonValue(m_start_column, json[QString("StartColumn")]);
    m_start_column_isSet = !json[QString("StartColumn")].isNull() && m_start_column_isValid;

    m_start_row_isValid = ::OpenAPI::fromJsonValue(m_start_row, json[QString("StartRow")]);
    m_start_row_isSet = !json[QString("StartRow")].isNull() && m_start_row_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAIOutputText::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputText::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment.isSet()) {
        obj.insert(QString("Alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_character_height.isSet()) {
        obj.insert(QString("CharacterHeight"), ::OpenAPI::toJsonValue(m_character_height));
    }
    if (m_character_set_isSet) {
        obj.insert(QString("CharacterSet"), ::OpenAPI::toJsonValue(m_character_set));
    }
    if (m_character_style.isSet()) {
        obj.insert(QString("CharacterStyle"), ::OpenAPI::toJsonValue(m_character_style));
    }
    if (m_character_width.isSet()) {
        obj.insert(QString("CharacterWidth"), ::OpenAPI::toJsonValue(m_character_width));
    }
    if (m_color.isSet()) {
        obj.insert(QString("Color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_end_of_line_flag_isSet) {
        obj.insert(QString("EndOfLineFlag"), ::OpenAPI::toJsonValue(m_end_of_line_flag));
    }
    if (m_font_isSet) {
        obj.insert(QString("Font"), ::OpenAPI::toJsonValue(m_font));
    }
    if (m_start_column_isSet) {
        obj.insert(QString("StartColumn"), ::OpenAPI::toJsonValue(m_start_column));
    }
    if (m_start_row_isSet) {
        obj.insert(QString("StartRow"), ::OpenAPI::toJsonValue(m_start_row));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIAlignment OAIOutputText::getAlignment() const {
    return m_alignment;
}
void OAIOutputText::setAlignment(const OAIAlignment &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIOutputText::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIOutputText::is_alignment_Valid() const{
    return m_alignment_isValid;
}

OAICharacterHeight OAIOutputText::getCharacterHeight() const {
    return m_character_height;
}
void OAIOutputText::setCharacterHeight(const OAICharacterHeight &character_height) {
    m_character_height = character_height;
    m_character_height_isSet = true;
}

bool OAIOutputText::is_character_height_Set() const{
    return m_character_height_isSet;
}

bool OAIOutputText::is_character_height_Valid() const{
    return m_character_height_isValid;
}

qint32 OAIOutputText::getCharacterSet() const {
    return m_character_set;
}
void OAIOutputText::setCharacterSet(const qint32 &character_set) {
    m_character_set = character_set;
    m_character_set_isSet = true;
}

bool OAIOutputText::is_character_set_Set() const{
    return m_character_set_isSet;
}

bool OAIOutputText::is_character_set_Valid() const{
    return m_character_set_isValid;
}

OAICharacterStyle OAIOutputText::getCharacterStyle() const {
    return m_character_style;
}
void OAIOutputText::setCharacterStyle(const OAICharacterStyle &character_style) {
    m_character_style = character_style;
    m_character_style_isSet = true;
}

bool OAIOutputText::is_character_style_Set() const{
    return m_character_style_isSet;
}

bool OAIOutputText::is_character_style_Valid() const{
    return m_character_style_isValid;
}

OAICharacterWidth OAIOutputText::getCharacterWidth() const {
    return m_character_width;
}
void OAIOutputText::setCharacterWidth(const OAICharacterWidth &character_width) {
    m_character_width = character_width;
    m_character_width_isSet = true;
}

bool OAIOutputText::is_character_width_Set() const{
    return m_character_width_isSet;
}

bool OAIOutputText::is_character_width_Valid() const{
    return m_character_width_isValid;
}

OAIColor OAIOutputText::getColor() const {
    return m_color;
}
void OAIOutputText::setColor(const OAIColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIOutputText::is_color_Set() const{
    return m_color_isSet;
}

bool OAIOutputText::is_color_Valid() const{
    return m_color_isValid;
}

bool OAIOutputText::isEndOfLineFlag() const {
    return m_end_of_line_flag;
}
void OAIOutputText::setEndOfLineFlag(const bool &end_of_line_flag) {
    m_end_of_line_flag = end_of_line_flag;
    m_end_of_line_flag_isSet = true;
}

bool OAIOutputText::is_end_of_line_flag_Set() const{
    return m_end_of_line_flag_isSet;
}

bool OAIOutputText::is_end_of_line_flag_Valid() const{
    return m_end_of_line_flag_isValid;
}

QString OAIOutputText::getFont() const {
    return m_font;
}
void OAIOutputText::setFont(const QString &font) {
    m_font = font;
    m_font_isSet = true;
}

bool OAIOutputText::is_font_Set() const{
    return m_font_isSet;
}

bool OAIOutputText::is_font_Valid() const{
    return m_font_isValid;
}

qint32 OAIOutputText::getStartColumn() const {
    return m_start_column;
}
void OAIOutputText::setStartColumn(const qint32 &start_column) {
    m_start_column = start_column;
    m_start_column_isSet = true;
}

bool OAIOutputText::is_start_column_Set() const{
    return m_start_column_isSet;
}

bool OAIOutputText::is_start_column_Valid() const{
    return m_start_column_isValid;
}

qint32 OAIOutputText::getStartRow() const {
    return m_start_row;
}
void OAIOutputText::setStartRow(const qint32 &start_row) {
    m_start_row = start_row;
    m_start_row_isSet = true;
}

bool OAIOutputText::is_start_row_Set() const{
    return m_start_row_isSet;
}

bool OAIOutputText::is_start_row_Valid() const{
    return m_start_row_isValid;
}

QString OAIOutputText::getText() const {
    return m_text;
}
void OAIOutputText::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIOutputText::is_text_Set() const{
    return m_text_isSet;
}

bool OAIOutputText::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIOutputText::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_height.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_style.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_character_width.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_of_line_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_font_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_row_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputText::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_text_isValid && true;
}

} // namespace OpenAPI
