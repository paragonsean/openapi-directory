/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDevice::OAIDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDevice::OAIDevice() {
    this->initializeModel();
}

OAIDevice::~OAIDevice() {}

void OAIDevice::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIDevice::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIDevice::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CashierDisplay", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDevice::CASHIERDISPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CashierInput", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDevice::CASHIERINPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomerDisplay", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDevice::CUSTOMERDISPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomerInput", Qt::CaseInsensitive) == 0) {
        m_value = eOAIDevice::CUSTOMERINPUT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIDevice::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIDevice::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIDevice::CASHIERDISPLAY:
            val = "CashierDisplay";
            break;
        case eOAIDevice::CASHIERINPUT:
            val = "CashierInput";
            break;
        case eOAIDevice::CUSTOMERDISPLAY:
            val = "CustomerDisplay";
            break;
        case eOAIDevice::CUSTOMERINPUT:
            val = "CustomerInput";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIDevice::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIDevice::eOAIDevice OAIDevice::getValue() const {
    return m_value;
}

void OAIDevice::setValue(const OAIDevice::eOAIDevice& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIDevice::isSet() const {
    
    return m_value_isSet;
}

bool OAIDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
