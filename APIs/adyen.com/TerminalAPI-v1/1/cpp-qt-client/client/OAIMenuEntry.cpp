/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMenuEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMenuEntry::OAIMenuEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMenuEntry::OAIMenuEntry() {
    this->initializeModel();
}

OAIMenuEntry::~OAIMenuEntry() {}

void OAIMenuEntry::initializeModel() {

    m_default_selected_flag_isSet = false;
    m_default_selected_flag_isValid = false;

    m_menu_entry_tag_isSet = false;
    m_menu_entry_tag_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_output_text_isSet = false;
    m_output_text_isValid = false;

    m_output_xhtml_isSet = false;
    m_output_xhtml_isValid = false;

    m_predefined_content_isSet = false;
    m_predefined_content_isValid = false;
}

void OAIMenuEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMenuEntry::fromJsonObject(QJsonObject json) {

    m_default_selected_flag_isValid = ::OpenAPI::fromJsonValue(m_default_selected_flag, json[QString("DefaultSelectedFlag")]);
    m_default_selected_flag_isSet = !json[QString("DefaultSelectedFlag")].isNull() && m_default_selected_flag_isValid;

    m_menu_entry_tag_isValid = ::OpenAPI::fromJsonValue(m_menu_entry_tag, json[QString("MenuEntryTag")]);
    m_menu_entry_tag_isSet = !json[QString("MenuEntryTag")].isNull() && m_menu_entry_tag_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_output_text_isValid = ::OpenAPI::fromJsonValue(m_output_text, json[QString("OutputText")]);
    m_output_text_isSet = !json[QString("OutputText")].isNull() && m_output_text_isValid;

    m_output_xhtml_isValid = ::OpenAPI::fromJsonValue(m_output_xhtml, json[QString("OutputXHTML")]);
    m_output_xhtml_isSet = !json[QString("OutputXHTML")].isNull() && m_output_xhtml_isValid;

    m_predefined_content_isValid = ::OpenAPI::fromJsonValue(m_predefined_content, json[QString("PredefinedContent")]);
    m_predefined_content_isSet = !json[QString("PredefinedContent")].isNull() && m_predefined_content_isValid;
}

QString OAIMenuEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMenuEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_default_selected_flag_isSet) {
        obj.insert(QString("DefaultSelectedFlag"), ::OpenAPI::toJsonValue(m_default_selected_flag));
    }
    if (m_menu_entry_tag.isSet()) {
        obj.insert(QString("MenuEntryTag"), ::OpenAPI::toJsonValue(m_menu_entry_tag));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_output_text.size() > 0) {
        obj.insert(QString("OutputText"), ::OpenAPI::toJsonValue(m_output_text));
    }
    if (m_output_xhtml_isSet) {
        obj.insert(QString("OutputXHTML"), ::OpenAPI::toJsonValue(m_output_xhtml));
    }
    if (m_predefined_content.isSet()) {
        obj.insert(QString("PredefinedContent"), ::OpenAPI::toJsonValue(m_predefined_content));
    }
    return obj;
}

bool OAIMenuEntry::isDefaultSelectedFlag() const {
    return m_default_selected_flag;
}
void OAIMenuEntry::setDefaultSelectedFlag(const bool &default_selected_flag) {
    m_default_selected_flag = default_selected_flag;
    m_default_selected_flag_isSet = true;
}

bool OAIMenuEntry::is_default_selected_flag_Set() const{
    return m_default_selected_flag_isSet;
}

bool OAIMenuEntry::is_default_selected_flag_Valid() const{
    return m_default_selected_flag_isValid;
}

OAIMenuEntryTag OAIMenuEntry::getMenuEntryTag() const {
    return m_menu_entry_tag;
}
void OAIMenuEntry::setMenuEntryTag(const OAIMenuEntryTag &menu_entry_tag) {
    m_menu_entry_tag = menu_entry_tag;
    m_menu_entry_tag_isSet = true;
}

bool OAIMenuEntry::is_menu_entry_tag_Set() const{
    return m_menu_entry_tag_isSet;
}

bool OAIMenuEntry::is_menu_entry_tag_Valid() const{
    return m_menu_entry_tag_isValid;
}

OAIOutputFormat OAIMenuEntry::getOutputFormat() const {
    return m_output_format;
}
void OAIMenuEntry::setOutputFormat(const OAIOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIMenuEntry::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIMenuEntry::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QList<OAIOutputText> OAIMenuEntry::getOutputText() const {
    return m_output_text;
}
void OAIMenuEntry::setOutputText(const QList<OAIOutputText> &output_text) {
    m_output_text = output_text;
    m_output_text_isSet = true;
}

bool OAIMenuEntry::is_output_text_Set() const{
    return m_output_text_isSet;
}

bool OAIMenuEntry::is_output_text_Valid() const{
    return m_output_text_isValid;
}

QString OAIMenuEntry::getOutputXhtml() const {
    return m_output_xhtml;
}
void OAIMenuEntry::setOutputXhtml(const QString &output_xhtml) {
    m_output_xhtml = output_xhtml;
    m_output_xhtml_isSet = true;
}

bool OAIMenuEntry::is_output_xhtml_Set() const{
    return m_output_xhtml_isSet;
}

bool OAIMenuEntry::is_output_xhtml_Valid() const{
    return m_output_xhtml_isValid;
}

OAIPredefinedContent OAIMenuEntry::getPredefinedContent() const {
    return m_predefined_content;
}
void OAIMenuEntry::setPredefinedContent(const OAIPredefinedContent &predefined_content) {
    m_predefined_content = predefined_content;
    m_predefined_content_isSet = true;
}

bool OAIMenuEntry::is_predefined_content_Set() const{
    return m_predefined_content_isSet;
}

bool OAIMenuEntry::is_predefined_content_Valid() const{
    return m_predefined_content_isValid;
}

bool OAIMenuEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_selected_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_entry_tag.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_xhtml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_content.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMenuEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_format_isValid && true;
}

} // namespace OpenAPI
