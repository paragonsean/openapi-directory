/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerOrder::OAICustomerOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerOrder::OAICustomerOrder() {
    this->initializeModel();
}

OAICustomerOrder::~OAICustomerOrder() {}

void OAICustomerOrder::initializeModel() {

    m_accessed_by_isSet = false;
    m_accessed_by_isValid = false;

    m_additional_information_isSet = false;
    m_additional_information_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_current_amount_isSet = false;
    m_current_amount_isValid = false;

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_forecasted_amount_isSet = false;
    m_forecasted_amount_isValid = false;

    m_open_order_state_isSet = false;
    m_open_order_state_isValid = false;

    m_sale_reference_id_isSet = false;
    m_sale_reference_id_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAICustomerOrder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerOrder::fromJsonObject(QJsonObject json) {

    m_accessed_by_isValid = ::OpenAPI::fromJsonValue(m_accessed_by, json[QString("AccessedBy")]);
    m_accessed_by_isSet = !json[QString("AccessedBy")].isNull() && m_accessed_by_isValid;

    m_additional_information_isValid = ::OpenAPI::fromJsonValue(m_additional_information, json[QString("AdditionalInformation")]);
    m_additional_information_isSet = !json[QString("AdditionalInformation")].isNull() && m_additional_information_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_current_amount_isValid = ::OpenAPI::fromJsonValue(m_current_amount, json[QString("CurrentAmount")]);
    m_current_amount_isSet = !json[QString("CurrentAmount")].isNull() && m_current_amount_isValid;

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderID")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderID")].isNull() && m_customer_order_id_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("EndDate")]);
    m_end_date_isSet = !json[QString("EndDate")].isNull() && m_end_date_isValid;

    m_forecasted_amount_isValid = ::OpenAPI::fromJsonValue(m_forecasted_amount, json[QString("ForecastedAmount")]);
    m_forecasted_amount_isSet = !json[QString("ForecastedAmount")].isNull() && m_forecasted_amount_isValid;

    m_open_order_state_isValid = ::OpenAPI::fromJsonValue(m_open_order_state, json[QString("OpenOrderState")]);
    m_open_order_state_isSet = !json[QString("OpenOrderState")].isNull() && m_open_order_state_isValid;

    m_sale_reference_id_isValid = ::OpenAPI::fromJsonValue(m_sale_reference_id, json[QString("SaleReferenceID")]);
    m_sale_reference_id_isSet = !json[QString("SaleReferenceID")].isNull() && m_sale_reference_id_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("StartDate")]);
    m_start_date_isSet = !json[QString("StartDate")].isNull() && m_start_date_isValid;
}

QString OAICustomerOrder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerOrder::asJsonObject() const {
    QJsonObject obj;
    if (m_accessed_by_isSet) {
        obj.insert(QString("AccessedBy"), ::OpenAPI::toJsonValue(m_accessed_by));
    }
    if (m_additional_information_isSet) {
        obj.insert(QString("AdditionalInformation"), ::OpenAPI::toJsonValue(m_additional_information));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_current_amount_isSet) {
        obj.insert(QString("CurrentAmount"), ::OpenAPI::toJsonValue(m_current_amount));
    }
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderID"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("EndDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_forecasted_amount_isSet) {
        obj.insert(QString("ForecastedAmount"), ::OpenAPI::toJsonValue(m_forecasted_amount));
    }
    if (m_open_order_state_isSet) {
        obj.insert(QString("OpenOrderState"), ::OpenAPI::toJsonValue(m_open_order_state));
    }
    if (m_sale_reference_id_isSet) {
        obj.insert(QString("SaleReferenceID"), ::OpenAPI::toJsonValue(m_sale_reference_id));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("StartDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAICustomerOrder::getAccessedBy() const {
    return m_accessed_by;
}
void OAICustomerOrder::setAccessedBy(const QString &accessed_by) {
    m_accessed_by = accessed_by;
    m_accessed_by_isSet = true;
}

bool OAICustomerOrder::is_accessed_by_Set() const{
    return m_accessed_by_isSet;
}

bool OAICustomerOrder::is_accessed_by_Valid() const{
    return m_accessed_by_isValid;
}

QString OAICustomerOrder::getAdditionalInformation() const {
    return m_additional_information;
}
void OAICustomerOrder::setAdditionalInformation(const QString &additional_information) {
    m_additional_information = additional_information;
    m_additional_information_isSet = true;
}

bool OAICustomerOrder::is_additional_information_Set() const{
    return m_additional_information_isSet;
}

bool OAICustomerOrder::is_additional_information_Valid() const{
    return m_additional_information_isValid;
}

QString OAICustomerOrder::getCurrency() const {
    return m_currency;
}
void OAICustomerOrder::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICustomerOrder::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICustomerOrder::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAICustomerOrder::getCurrentAmount() const {
    return m_current_amount;
}
void OAICustomerOrder::setCurrentAmount(const double &current_amount) {
    m_current_amount = current_amount;
    m_current_amount_isSet = true;
}

bool OAICustomerOrder::is_current_amount_Set() const{
    return m_current_amount_isSet;
}

bool OAICustomerOrder::is_current_amount_Valid() const{
    return m_current_amount_isValid;
}

QString OAICustomerOrder::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAICustomerOrder::setCustomerOrderId(const QString &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAICustomerOrder::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAICustomerOrder::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

QDateTime OAICustomerOrder::getEndDate() const {
    return m_end_date;
}
void OAICustomerOrder::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAICustomerOrder::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAICustomerOrder::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAICustomerOrder::getForecastedAmount() const {
    return m_forecasted_amount;
}
void OAICustomerOrder::setForecastedAmount(const double &forecasted_amount) {
    m_forecasted_amount = forecasted_amount;
    m_forecasted_amount_isSet = true;
}

bool OAICustomerOrder::is_forecasted_amount_Set() const{
    return m_forecasted_amount_isSet;
}

bool OAICustomerOrder::is_forecasted_amount_Valid() const{
    return m_forecasted_amount_isValid;
}

bool OAICustomerOrder::isOpenOrderState() const {
    return m_open_order_state;
}
void OAICustomerOrder::setOpenOrderState(const bool &open_order_state) {
    m_open_order_state = open_order_state;
    m_open_order_state_isSet = true;
}

bool OAICustomerOrder::is_open_order_state_Set() const{
    return m_open_order_state_isSet;
}

bool OAICustomerOrder::is_open_order_state_Valid() const{
    return m_open_order_state_isValid;
}

QString OAICustomerOrder::getSaleReferenceId() const {
    return m_sale_reference_id;
}
void OAICustomerOrder::setSaleReferenceId(const QString &sale_reference_id) {
    m_sale_reference_id = sale_reference_id;
    m_sale_reference_id_isSet = true;
}

bool OAICustomerOrder::is_sale_reference_id_Set() const{
    return m_sale_reference_id_isSet;
}

bool OAICustomerOrder::is_sale_reference_id_Valid() const{
    return m_sale_reference_id_isValid;
}

QDateTime OAICustomerOrder::getStartDate() const {
    return m_start_date;
}
void OAICustomerOrder::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAICustomerOrder::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAICustomerOrder::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAICustomerOrder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accessed_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_additional_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_forecasted_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_order_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_current_amount_isValid && m_forecasted_amount_isValid && m_sale_reference_id_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
