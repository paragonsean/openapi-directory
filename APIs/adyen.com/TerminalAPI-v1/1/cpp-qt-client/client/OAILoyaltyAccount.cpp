/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAccount::OAILoyaltyAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAccount::OAILoyaltyAccount() {
    this->initializeModel();
}

OAILoyaltyAccount::~OAILoyaltyAccount() {}

void OAILoyaltyAccount::initializeModel() {

    m_loyalty_account_id_isSet = false;
    m_loyalty_account_id_isValid = false;

    m_loyalty_brand_isSet = false;
    m_loyalty_brand_isValid = false;
}

void OAILoyaltyAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAccount::fromJsonObject(QJsonObject json) {

    m_loyalty_account_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_id, json[QString("LoyaltyAccountID")]);
    m_loyalty_account_id_isSet = !json[QString("LoyaltyAccountID")].isNull() && m_loyalty_account_id_isValid;

    m_loyalty_brand_isValid = ::OpenAPI::fromJsonValue(m_loyalty_brand, json[QString("LoyaltyBrand")]);
    m_loyalty_brand_isSet = !json[QString("LoyaltyBrand")].isNull() && m_loyalty_brand_isValid;
}

QString OAILoyaltyAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_account_id.isSet()) {
        obj.insert(QString("LoyaltyAccountID"), ::OpenAPI::toJsonValue(m_loyalty_account_id));
    }
    if (m_loyalty_brand_isSet) {
        obj.insert(QString("LoyaltyBrand"), ::OpenAPI::toJsonValue(m_loyalty_brand));
    }
    return obj;
}

OAILoyaltyAccountID OAILoyaltyAccount::getLoyaltyAccountId() const {
    return m_loyalty_account_id;
}
void OAILoyaltyAccount::setLoyaltyAccountId(const OAILoyaltyAccountID &loyalty_account_id) {
    m_loyalty_account_id = loyalty_account_id;
    m_loyalty_account_id_isSet = true;
}

bool OAILoyaltyAccount::is_loyalty_account_id_Set() const{
    return m_loyalty_account_id_isSet;
}

bool OAILoyaltyAccount::is_loyalty_account_id_Valid() const{
    return m_loyalty_account_id_isValid;
}

QString OAILoyaltyAccount::getLoyaltyBrand() const {
    return m_loyalty_brand;
}
void OAILoyaltyAccount::setLoyaltyBrand(const QString &loyalty_brand) {
    m_loyalty_brand = loyalty_brand;
    m_loyalty_brand_isSet = true;
}

bool OAILoyaltyAccount::is_loyalty_brand_Set() const{
    return m_loyalty_brand_isSet;
}

bool OAILoyaltyAccount::is_loyalty_brand_Valid() const{
    return m_loyalty_brand_isValid;
}

bool OAILoyaltyAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_brand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_account_id_isValid && true;
}

} // namespace OpenAPI
