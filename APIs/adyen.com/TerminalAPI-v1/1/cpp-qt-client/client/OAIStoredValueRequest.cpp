/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredValueRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredValueRequest::OAIStoredValueRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredValueRequest::OAIStoredValueRequest() {
    this->initializeModel();
}

OAIStoredValueRequest::~OAIStoredValueRequest() {}

void OAIStoredValueRequest::initializeModel() {

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;

    m_stored_value_data_isSet = false;
    m_stored_value_data_isValid = false;
}

void OAIStoredValueRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredValueRequest::fromJsonObject(QJsonObject json) {

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;

    m_stored_value_data_isValid = ::OpenAPI::fromJsonValue(m_stored_value_data, json[QString("StoredValueData")]);
    m_stored_value_data_isSet = !json[QString("StoredValueData")].isNull() && m_stored_value_data_isValid;
}

QString OAIStoredValueRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredValueRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    if (m_stored_value_data.size() > 0) {
        obj.insert(QString("StoredValueData"), ::OpenAPI::toJsonValue(m_stored_value_data));
    }
    return obj;
}

QString OAIStoredValueRequest::getCustomerLanguage() const {
    return m_customer_language;
}
void OAIStoredValueRequest::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAIStoredValueRequest::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAIStoredValueRequest::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

OAISaleData OAIStoredValueRequest::getSaleData() const {
    return m_sale_data;
}
void OAIStoredValueRequest::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAIStoredValueRequest::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAIStoredValueRequest::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

QList<OAIStoredValueData> OAIStoredValueRequest::getStoredValueData() const {
    return m_stored_value_data;
}
void OAIStoredValueRequest::setStoredValueData(const QList<OAIStoredValueData> &stored_value_data) {
    m_stored_value_data = stored_value_data;
    m_stored_value_data_isSet = true;
}

bool OAIStoredValueRequest::is_stored_value_data_Set() const{
    return m_stored_value_data_isSet;
}

bool OAIStoredValueRequest::is_stored_value_data_Valid() const{
    return m_stored_value_data_isValid;
}

bool OAIStoredValueRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredValueRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sale_data_isValid && m_stored_value_data_isValid && true;
}

} // namespace OpenAPI
