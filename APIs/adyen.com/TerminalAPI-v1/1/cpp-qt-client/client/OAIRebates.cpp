/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRebates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRebates::OAIRebates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRebates::OAIRebates() {
    this->initializeModel();
}

OAIRebates::~OAIRebates() {}

void OAIRebates::initializeModel() {

    m_rebate_label_isSet = false;
    m_rebate_label_isValid = false;

    m_sale_item_rebate_isSet = false;
    m_sale_item_rebate_isValid = false;

    m_total_rebate_isSet = false;
    m_total_rebate_isValid = false;
}

void OAIRebates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRebates::fromJsonObject(QJsonObject json) {

    m_rebate_label_isValid = ::OpenAPI::fromJsonValue(m_rebate_label, json[QString("RebateLabel")]);
    m_rebate_label_isSet = !json[QString("RebateLabel")].isNull() && m_rebate_label_isValid;

    m_sale_item_rebate_isValid = ::OpenAPI::fromJsonValue(m_sale_item_rebate, json[QString("SaleItemRebate")]);
    m_sale_item_rebate_isSet = !json[QString("SaleItemRebate")].isNull() && m_sale_item_rebate_isValid;

    m_total_rebate_isValid = ::OpenAPI::fromJsonValue(m_total_rebate, json[QString("TotalRebate")]);
    m_total_rebate_isSet = !json[QString("TotalRebate")].isNull() && m_total_rebate_isValid;
}

QString OAIRebates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRebates::asJsonObject() const {
    QJsonObject obj;
    if (m_rebate_label_isSet) {
        obj.insert(QString("RebateLabel"), ::OpenAPI::toJsonValue(m_rebate_label));
    }
    if (m_sale_item_rebate.size() > 0) {
        obj.insert(QString("SaleItemRebate"), ::OpenAPI::toJsonValue(m_sale_item_rebate));
    }
    if (m_total_rebate_isSet) {
        obj.insert(QString("TotalRebate"), ::OpenAPI::toJsonValue(m_total_rebate));
    }
    return obj;
}

QString OAIRebates::getRebateLabel() const {
    return m_rebate_label;
}
void OAIRebates::setRebateLabel(const QString &rebate_label) {
    m_rebate_label = rebate_label;
    m_rebate_label_isSet = true;
}

bool OAIRebates::is_rebate_label_Set() const{
    return m_rebate_label_isSet;
}

bool OAIRebates::is_rebate_label_Valid() const{
    return m_rebate_label_isValid;
}

QList<OAISaleItemRebate> OAIRebates::getSaleItemRebate() const {
    return m_sale_item_rebate;
}
void OAIRebates::setSaleItemRebate(const QList<OAISaleItemRebate> &sale_item_rebate) {
    m_sale_item_rebate = sale_item_rebate;
    m_sale_item_rebate_isSet = true;
}

bool OAIRebates::is_sale_item_rebate_Set() const{
    return m_sale_item_rebate_isSet;
}

bool OAIRebates::is_sale_item_rebate_Valid() const{
    return m_sale_item_rebate_isValid;
}

double OAIRebates::getTotalRebate() const {
    return m_total_rebate;
}
void OAIRebates::setTotalRebate(const double &total_rebate) {
    m_total_rebate = total_rebate;
    m_total_rebate_isSet = true;
}

bool OAIRebates::is_total_rebate_Set() const{
    return m_total_rebate_isSet;
}

bool OAIRebates::is_total_rebate_Valid() const{
    return m_total_rebate_isValid;
}

bool OAIRebates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rebate_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_item_rebate.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rebate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRebates::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
