/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMessageCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMessageCategory::OAIMessageCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMessageCategory::OAIMessageCategory() {
    this->initializeModel();
}

OAIMessageCategory::~OAIMessageCategory() {}

void OAIMessageCategory::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMessageCategory::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMessageCategory::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Abort", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::ABORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Admin", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::ADMIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BalanceInquiry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::BALANCEINQUIRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CardAcquisition", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::CARDACQUISITION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CardReaderAPDU", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::CARDREADERAPDU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Diagnosis", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::DIAGNOSIS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Display", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::DISPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EnableService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::ENABLESERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Event", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::EVENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetTotals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::GETTOTALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Input", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InputUpdate", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::INPUTUPDATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Login", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::LOGIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Logout", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::LOGOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Loyalty", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::LOYALTY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Payment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::PAYMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Print", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::PRINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reconciliation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::RECONCILIATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reversal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::REVERSAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StoredValue", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::STOREDVALUE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TransactionStatus", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMessageCategory::TRANSACTIONSTATUS;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMessageCategory::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMessageCategory::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMessageCategory::ABORT:
            val = "Abort";
            break;
        case eOAIMessageCategory::ADMIN:
            val = "Admin";
            break;
        case eOAIMessageCategory::BALANCEINQUIRY:
            val = "BalanceInquiry";
            break;
        case eOAIMessageCategory::CARDACQUISITION:
            val = "CardAcquisition";
            break;
        case eOAIMessageCategory::CARDREADERAPDU:
            val = "CardReaderAPDU";
            break;
        case eOAIMessageCategory::DIAGNOSIS:
            val = "Diagnosis";
            break;
        case eOAIMessageCategory::DISPLAY:
            val = "Display";
            break;
        case eOAIMessageCategory::ENABLESERVICE:
            val = "EnableService";
            break;
        case eOAIMessageCategory::EVENT:
            val = "Event";
            break;
        case eOAIMessageCategory::GETTOTALS:
            val = "GetTotals";
            break;
        case eOAIMessageCategory::INPUT:
            val = "Input";
            break;
        case eOAIMessageCategory::INPUTUPDATE:
            val = "InputUpdate";
            break;
        case eOAIMessageCategory::LOGIN:
            val = "Login";
            break;
        case eOAIMessageCategory::LOGOUT:
            val = "Logout";
            break;
        case eOAIMessageCategory::LOYALTY:
            val = "Loyalty";
            break;
        case eOAIMessageCategory::PAYMENT:
            val = "Payment";
            break;
        case eOAIMessageCategory::PRINT:
            val = "Print";
            break;
        case eOAIMessageCategory::RECONCILIATION:
            val = "Reconciliation";
            break;
        case eOAIMessageCategory::REVERSAL:
            val = "Reversal";
            break;
        case eOAIMessageCategory::STOREDVALUE:
            val = "StoredValue";
            break;
        case eOAIMessageCategory::TRANSACTIONSTATUS:
            val = "TransactionStatus";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMessageCategory::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMessageCategory::eOAIMessageCategory OAIMessageCategory::getValue() const {
    return m_value;
}

void OAIMessageCategory::setValue(const OAIMessageCategory::eOAIMessageCategory& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMessageCategory::isSet() const {
    
    return m_value_isSet;
}

bool OAIMessageCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
