/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentAcquirerData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentAcquirerData::OAIPaymentAcquirerData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentAcquirerData::OAIPaymentAcquirerData() {
    this->initializeModel();
}

OAIPaymentAcquirerData::~OAIPaymentAcquirerData() {}

void OAIPaymentAcquirerData::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_acquirer_poiid_isSet = false;
    m_acquirer_poiid_isValid = false;

    m_acquirer_transaction_id_isSet = false;
    m_acquirer_transaction_id_isValid = false;

    m_approval_code_isSet = false;
    m_approval_code_isValid = false;

    m_host_reconciliation_id_isSet = false;
    m_host_reconciliation_id_isValid = false;

    m_merchant_id_isSet = false;
    m_merchant_id_isValid = false;
}

void OAIPaymentAcquirerData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentAcquirerData::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_acquirer_poiid_isValid = ::OpenAPI::fromJsonValue(m_acquirer_poiid, json[QString("AcquirerPOIID")]);
    m_acquirer_poiid_isSet = !json[QString("AcquirerPOIID")].isNull() && m_acquirer_poiid_isValid;

    m_acquirer_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_transaction_id, json[QString("AcquirerTransactionID")]);
    m_acquirer_transaction_id_isSet = !json[QString("AcquirerTransactionID")].isNull() && m_acquirer_transaction_id_isValid;

    m_approval_code_isValid = ::OpenAPI::fromJsonValue(m_approval_code, json[QString("ApprovalCode")]);
    m_approval_code_isSet = !json[QString("ApprovalCode")].isNull() && m_approval_code_isValid;

    m_host_reconciliation_id_isValid = ::OpenAPI::fromJsonValue(m_host_reconciliation_id, json[QString("HostReconciliationID")]);
    m_host_reconciliation_id_isSet = !json[QString("HostReconciliationID")].isNull() && m_host_reconciliation_id_isValid;

    m_merchant_id_isValid = ::OpenAPI::fromJsonValue(m_merchant_id, json[QString("MerchantID")]);
    m_merchant_id_isSet = !json[QString("MerchantID")].isNull() && m_merchant_id_isValid;
}

QString OAIPaymentAcquirerData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentAcquirerData::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id_isSet) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_acquirer_poiid_isSet) {
        obj.insert(QString("AcquirerPOIID"), ::OpenAPI::toJsonValue(m_acquirer_poiid));
    }
    if (m_acquirer_transaction_id.isSet()) {
        obj.insert(QString("AcquirerTransactionID"), ::OpenAPI::toJsonValue(m_acquirer_transaction_id));
    }
    if (m_approval_code_isSet) {
        obj.insert(QString("ApprovalCode"), ::OpenAPI::toJsonValue(m_approval_code));
    }
    if (m_host_reconciliation_id_isSet) {
        obj.insert(QString("HostReconciliationID"), ::OpenAPI::toJsonValue(m_host_reconciliation_id));
    }
    if (m_merchant_id_isSet) {
        obj.insert(QString("MerchantID"), ::OpenAPI::toJsonValue(m_merchant_id));
    }
    return obj;
}

qint32 OAIPaymentAcquirerData::getAcquirerId() const {
    return m_acquirer_id;
}
void OAIPaymentAcquirerData::setAcquirerId(const qint32 &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAIPaymentAcquirerData::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAIPaymentAcquirerData::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

QString OAIPaymentAcquirerData::getAcquirerPoiid() const {
    return m_acquirer_poiid;
}
void OAIPaymentAcquirerData::setAcquirerPoiid(const QString &acquirer_poiid) {
    m_acquirer_poiid = acquirer_poiid;
    m_acquirer_poiid_isSet = true;
}

bool OAIPaymentAcquirerData::is_acquirer_poiid_Set() const{
    return m_acquirer_poiid_isSet;
}

bool OAIPaymentAcquirerData::is_acquirer_poiid_Valid() const{
    return m_acquirer_poiid_isValid;
}

OAITransactionIDType OAIPaymentAcquirerData::getAcquirerTransactionId() const {
    return m_acquirer_transaction_id;
}
void OAIPaymentAcquirerData::setAcquirerTransactionId(const OAITransactionIDType &acquirer_transaction_id) {
    m_acquirer_transaction_id = acquirer_transaction_id;
    m_acquirer_transaction_id_isSet = true;
}

bool OAIPaymentAcquirerData::is_acquirer_transaction_id_Set() const{
    return m_acquirer_transaction_id_isSet;
}

bool OAIPaymentAcquirerData::is_acquirer_transaction_id_Valid() const{
    return m_acquirer_transaction_id_isValid;
}

QString OAIPaymentAcquirerData::getApprovalCode() const {
    return m_approval_code;
}
void OAIPaymentAcquirerData::setApprovalCode(const QString &approval_code) {
    m_approval_code = approval_code;
    m_approval_code_isSet = true;
}

bool OAIPaymentAcquirerData::is_approval_code_Set() const{
    return m_approval_code_isSet;
}

bool OAIPaymentAcquirerData::is_approval_code_Valid() const{
    return m_approval_code_isValid;
}

QString OAIPaymentAcquirerData::getHostReconciliationId() const {
    return m_host_reconciliation_id;
}
void OAIPaymentAcquirerData::setHostReconciliationId(const QString &host_reconciliation_id) {
    m_host_reconciliation_id = host_reconciliation_id;
    m_host_reconciliation_id_isSet = true;
}

bool OAIPaymentAcquirerData::is_host_reconciliation_id_Set() const{
    return m_host_reconciliation_id_isSet;
}

bool OAIPaymentAcquirerData::is_host_reconciliation_id_Valid() const{
    return m_host_reconciliation_id_isValid;
}

QString OAIPaymentAcquirerData::getMerchantId() const {
    return m_merchant_id;
}
void OAIPaymentAcquirerData::setMerchantId(const QString &merchant_id) {
    m_merchant_id = merchant_id;
    m_merchant_id_isSet = true;
}

bool OAIPaymentAcquirerData::is_merchant_id_Set() const{
    return m_merchant_id_isSet;
}

bool OAIPaymentAcquirerData::is_merchant_id_Valid() const{
    return m_merchant_id_isValid;
}

bool OAIPaymentAcquirerData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_acquirer_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_reconciliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentAcquirerData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acquirer_poiid_isValid && m_merchant_id_isValid && true;
}

} // namespace OpenAPI
