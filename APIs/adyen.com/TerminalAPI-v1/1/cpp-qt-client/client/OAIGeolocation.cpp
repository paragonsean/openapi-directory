/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeolocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeolocation::OAIGeolocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeolocation::OAIGeolocation() {
    this->initializeModel();
}

OAIGeolocation::~OAIGeolocation() {}

void OAIGeolocation::initializeModel() {

    m_geographic_coordinates_isSet = false;
    m_geographic_coordinates_isValid = false;

    m_utm_coordinates_isSet = false;
    m_utm_coordinates_isValid = false;
}

void OAIGeolocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeolocation::fromJsonObject(QJsonObject json) {

    m_geographic_coordinates_isValid = ::OpenAPI::fromJsonValue(m_geographic_coordinates, json[QString("GeographicCoordinates")]);
    m_geographic_coordinates_isSet = !json[QString("GeographicCoordinates")].isNull() && m_geographic_coordinates_isValid;

    m_utm_coordinates_isValid = ::OpenAPI::fromJsonValue(m_utm_coordinates, json[QString("UTMCoordinates")]);
    m_utm_coordinates_isSet = !json[QString("UTMCoordinates")].isNull() && m_utm_coordinates_isValid;
}

QString OAIGeolocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeolocation::asJsonObject() const {
    QJsonObject obj;
    if (m_geographic_coordinates.isSet()) {
        obj.insert(QString("GeographicCoordinates"), ::OpenAPI::toJsonValue(m_geographic_coordinates));
    }
    if (m_utm_coordinates.isSet()) {
        obj.insert(QString("UTMCoordinates"), ::OpenAPI::toJsonValue(m_utm_coordinates));
    }
    return obj;
}

OAIGeographicCoordinates OAIGeolocation::getGeographicCoordinates() const {
    return m_geographic_coordinates;
}
void OAIGeolocation::setGeographicCoordinates(const OAIGeographicCoordinates &geographic_coordinates) {
    m_geographic_coordinates = geographic_coordinates;
    m_geographic_coordinates_isSet = true;
}

bool OAIGeolocation::is_geographic_coordinates_Set() const{
    return m_geographic_coordinates_isSet;
}

bool OAIGeolocation::is_geographic_coordinates_Valid() const{
    return m_geographic_coordinates_isValid;
}

OAIUTMCoordinates OAIGeolocation::getUtmCoordinates() const {
    return m_utm_coordinates;
}
void OAIGeolocation::setUtmCoordinates(const OAIUTMCoordinates &utm_coordinates) {
    m_utm_coordinates = utm_coordinates;
    m_utm_coordinates_isSet = true;
}

bool OAIGeolocation::is_utm_coordinates_Set() const{
    return m_utm_coordinates_isSet;
}

bool OAIGeolocation::is_utm_coordinates_Valid() const{
    return m_utm_coordinates_isValid;
}

bool OAIGeolocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_geographic_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeolocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
