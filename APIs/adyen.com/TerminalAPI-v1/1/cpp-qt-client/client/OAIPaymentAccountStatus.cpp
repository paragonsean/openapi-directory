/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentAccountStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentAccountStatus::OAIPaymentAccountStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentAccountStatus::OAIPaymentAccountStatus() {
    this->initializeModel();
}

OAIPaymentAccountStatus::~OAIPaymentAccountStatus() {}

void OAIPaymentAccountStatus::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_payment_acquirer_data_isSet = false;
    m_payment_acquirer_data_isValid = false;

    m_payment_instrument_data_isSet = false;
    m_payment_instrument_data_isValid = false;
}

void OAIPaymentAccountStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentAccountStatus::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("CurrentBalance")]);
    m_current_balance_isSet = !json[QString("CurrentBalance")].isNull() && m_current_balance_isValid;

    m_payment_acquirer_data_isValid = ::OpenAPI::fromJsonValue(m_payment_acquirer_data, json[QString("PaymentAcquirerData")]);
    m_payment_acquirer_data_isSet = !json[QString("PaymentAcquirerData")].isNull() && m_payment_acquirer_data_isValid;

    m_payment_instrument_data_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_data, json[QString("PaymentInstrumentData")]);
    m_payment_instrument_data_isSet = !json[QString("PaymentInstrumentData")].isNull() && m_payment_instrument_data_isValid;
}

QString OAIPaymentAccountStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentAccountStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_current_balance_isSet) {
        obj.insert(QString("CurrentBalance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_payment_acquirer_data.isSet()) {
        obj.insert(QString("PaymentAcquirerData"), ::OpenAPI::toJsonValue(m_payment_acquirer_data));
    }
    if (m_payment_instrument_data.isSet()) {
        obj.insert(QString("PaymentInstrumentData"), ::OpenAPI::toJsonValue(m_payment_instrument_data));
    }
    return obj;
}

QString OAIPaymentAccountStatus::getCurrency() const {
    return m_currency;
}
void OAIPaymentAccountStatus::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIPaymentAccountStatus::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIPaymentAccountStatus::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIPaymentAccountStatus::getCurrentBalance() const {
    return m_current_balance;
}
void OAIPaymentAccountStatus::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAIPaymentAccountStatus::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAIPaymentAccountStatus::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

OAIPaymentAcquirerData OAIPaymentAccountStatus::getPaymentAcquirerData() const {
    return m_payment_acquirer_data;
}
void OAIPaymentAccountStatus::setPaymentAcquirerData(const OAIPaymentAcquirerData &payment_acquirer_data) {
    m_payment_acquirer_data = payment_acquirer_data;
    m_payment_acquirer_data_isSet = true;
}

bool OAIPaymentAccountStatus::is_payment_acquirer_data_Set() const{
    return m_payment_acquirer_data_isSet;
}

bool OAIPaymentAccountStatus::is_payment_acquirer_data_Valid() const{
    return m_payment_acquirer_data_isValid;
}

OAIPaymentInstrumentData OAIPaymentAccountStatus::getPaymentInstrumentData() const {
    return m_payment_instrument_data;
}
void OAIPaymentAccountStatus::setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data) {
    m_payment_instrument_data = payment_instrument_data;
    m_payment_instrument_data_isSet = true;
}

bool OAIPaymentAccountStatus::is_payment_instrument_data_Set() const{
    return m_payment_instrument_data_isSet;
}

bool OAIPaymentAccountStatus::is_payment_instrument_data_Valid() const{
    return m_payment_instrument_data_isValid;
}

bool OAIPaymentAccountStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_acquirer_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentAccountStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
