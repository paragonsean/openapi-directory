/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventNotification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventNotification::OAIEventNotification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventNotification::OAIEventNotification() {
    this->initializeModel();
}

OAIEventNotification::~OAIEventNotification() {}

void OAIEventNotification::initializeModel() {

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_display_output_isSet = false;
    m_display_output_isValid = false;

    m_event_details_isSet = false;
    m_event_details_isValid = false;

    m_event_to_notify_isSet = false;
    m_event_to_notify_isValid = false;

    m_maintenance_required_flag_isSet = false;
    m_maintenance_required_flag_isValid = false;

    m_rejected_message_isSet = false;
    m_rejected_message_isValid = false;

    m_time_stamp_isSet = false;
    m_time_stamp_isValid = false;
}

void OAIEventNotification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventNotification::fromJsonObject(QJsonObject json) {

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_display_output_isValid = ::OpenAPI::fromJsonValue(m_display_output, json[QString("DisplayOutput")]);
    m_display_output_isSet = !json[QString("DisplayOutput")].isNull() && m_display_output_isValid;

    m_event_details_isValid = ::OpenAPI::fromJsonValue(m_event_details, json[QString("EventDetails")]);
    m_event_details_isSet = !json[QString("EventDetails")].isNull() && m_event_details_isValid;

    m_event_to_notify_isValid = ::OpenAPI::fromJsonValue(m_event_to_notify, json[QString("EventToNotify")]);
    m_event_to_notify_isSet = !json[QString("EventToNotify")].isNull() && m_event_to_notify_isValid;

    m_maintenance_required_flag_isValid = ::OpenAPI::fromJsonValue(m_maintenance_required_flag, json[QString("MaintenanceRequiredFlag")]);
    m_maintenance_required_flag_isSet = !json[QString("MaintenanceRequiredFlag")].isNull() && m_maintenance_required_flag_isValid;

    m_rejected_message_isValid = ::OpenAPI::fromJsonValue(m_rejected_message, json[QString("RejectedMessage")]);
    m_rejected_message_isSet = !json[QString("RejectedMessage")].isNull() && m_rejected_message_isValid;

    m_time_stamp_isValid = ::OpenAPI::fromJsonValue(m_time_stamp, json[QString("TimeStamp")]);
    m_time_stamp_isSet = !json[QString("TimeStamp")].isNull() && m_time_stamp_isValid;
}

QString OAIEventNotification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventNotification::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_display_output.size() > 0) {
        obj.insert(QString("DisplayOutput"), ::OpenAPI::toJsonValue(m_display_output));
    }
    if (m_event_details_isSet) {
        obj.insert(QString("EventDetails"), ::OpenAPI::toJsonValue(m_event_details));
    }
    if (m_event_to_notify.isSet()) {
        obj.insert(QString("EventToNotify"), ::OpenAPI::toJsonValue(m_event_to_notify));
    }
    if (m_maintenance_required_flag_isSet) {
        obj.insert(QString("MaintenanceRequiredFlag"), ::OpenAPI::toJsonValue(m_maintenance_required_flag));
    }
    if (m_rejected_message_isSet) {
        obj.insert(QString("RejectedMessage"), ::OpenAPI::toJsonValue(m_rejected_message));
    }
    if (m_time_stamp_isSet) {
        obj.insert(QString("TimeStamp"), ::OpenAPI::toJsonValue(m_time_stamp));
    }
    return obj;
}

QString OAIEventNotification::getCustomerLanguage() const {
    return m_customer_language;
}
void OAIEventNotification::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAIEventNotification::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAIEventNotification::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

QList<OAIDisplayOutput> OAIEventNotification::getDisplayOutput() const {
    return m_display_output;
}
void OAIEventNotification::setDisplayOutput(const QList<OAIDisplayOutput> &display_output) {
    m_display_output = display_output;
    m_display_output_isSet = true;
}

bool OAIEventNotification::is_display_output_Set() const{
    return m_display_output_isSet;
}

bool OAIEventNotification::is_display_output_Valid() const{
    return m_display_output_isValid;
}

QString OAIEventNotification::getEventDetails() const {
    return m_event_details;
}
void OAIEventNotification::setEventDetails(const QString &event_details) {
    m_event_details = event_details;
    m_event_details_isSet = true;
}

bool OAIEventNotification::is_event_details_Set() const{
    return m_event_details_isSet;
}

bool OAIEventNotification::is_event_details_Valid() const{
    return m_event_details_isValid;
}

OAIEventToNotify OAIEventNotification::getEventToNotify() const {
    return m_event_to_notify;
}
void OAIEventNotification::setEventToNotify(const OAIEventToNotify &event_to_notify) {
    m_event_to_notify = event_to_notify;
    m_event_to_notify_isSet = true;
}

bool OAIEventNotification::is_event_to_notify_Set() const{
    return m_event_to_notify_isSet;
}

bool OAIEventNotification::is_event_to_notify_Valid() const{
    return m_event_to_notify_isValid;
}

bool OAIEventNotification::isMaintenanceRequiredFlag() const {
    return m_maintenance_required_flag;
}
void OAIEventNotification::setMaintenanceRequiredFlag(const bool &maintenance_required_flag) {
    m_maintenance_required_flag = maintenance_required_flag;
    m_maintenance_required_flag_isSet = true;
}

bool OAIEventNotification::is_maintenance_required_flag_Set() const{
    return m_maintenance_required_flag_isSet;
}

bool OAIEventNotification::is_maintenance_required_flag_Valid() const{
    return m_maintenance_required_flag_isValid;
}

QString OAIEventNotification::getRejectedMessage() const {
    return m_rejected_message;
}
void OAIEventNotification::setRejectedMessage(const QString &rejected_message) {
    m_rejected_message = rejected_message;
    m_rejected_message_isSet = true;
}

bool OAIEventNotification::is_rejected_message_Set() const{
    return m_rejected_message_isSet;
}

bool OAIEventNotification::is_rejected_message_Valid() const{
    return m_rejected_message_isValid;
}

QDateTime OAIEventNotification::getTimeStamp() const {
    return m_time_stamp;
}
void OAIEventNotification::setTimeStamp(const QDateTime &time_stamp) {
    m_time_stamp = time_stamp;
    m_time_stamp_isSet = true;
}

bool OAIEventNotification::is_time_stamp_Set() const{
    return m_time_stamp_isSet;
}

bool OAIEventNotification::is_time_stamp_Valid() const{
    return m_time_stamp_isValid;
}

bool OAIEventNotification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_output.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_to_notify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_required_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejected_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_stamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventNotification::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_to_notify_isValid && m_time_stamp_isValid && true;
}

} // namespace OpenAPI
