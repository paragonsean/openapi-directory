/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_additional_response_isSet = false;
    m_additional_response_isValid = false;

    m_error_condition_isSet = false;
    m_error_condition_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_additional_response_isValid = ::OpenAPI::fromJsonValue(m_additional_response, json[QString("AdditionalResponse")]);
    m_additional_response_isSet = !json[QString("AdditionalResponse")].isNull() && m_additional_response_isValid;

    m_error_condition_isValid = ::OpenAPI::fromJsonValue(m_error_condition, json[QString("ErrorCondition")]);
    m_error_condition_isSet = !json[QString("ErrorCondition")].isNull() && m_error_condition_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_response_isSet) {
        obj.insert(QString("AdditionalResponse"), ::OpenAPI::toJsonValue(m_additional_response));
    }
    if (m_error_condition.isSet()) {
        obj.insert(QString("ErrorCondition"), ::OpenAPI::toJsonValue(m_error_condition));
    }
    if (m_result.isSet()) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    return obj;
}

QString OAIResponse::getAdditionalResponse() const {
    return m_additional_response;
}
void OAIResponse::setAdditionalResponse(const QString &additional_response) {
    m_additional_response = additional_response;
    m_additional_response_isSet = true;
}

bool OAIResponse::is_additional_response_Set() const{
    return m_additional_response_isSet;
}

bool OAIResponse::is_additional_response_Valid() const{
    return m_additional_response_isValid;
}

OAIErrorCondition OAIResponse::getErrorCondition() const {
    return m_error_condition;
}
void OAIResponse::setErrorCondition(const OAIErrorCondition &error_condition) {
    m_error_condition = error_condition;
    m_error_condition_isSet = true;
}

bool OAIResponse::is_error_condition_Set() const{
    return m_error_condition_isSet;
}

bool OAIResponse::is_error_condition_Valid() const{
    return m_error_condition_isValid;
}

OAIResult OAIResponse::getResult() const {
    return m_result;
}
void OAIResponse::setResult(const OAIResult &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIResponse::is_result_Set() const{
    return m_result_isSet;
}

bool OAIResponse::is_result_Valid() const{
    return m_result_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_response_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_result.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_result_isValid && true;
}

} // namespace OpenAPI
