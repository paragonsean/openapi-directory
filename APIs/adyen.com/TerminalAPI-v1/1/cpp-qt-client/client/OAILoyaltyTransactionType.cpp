/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyTransactionType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyTransactionType::OAILoyaltyTransactionType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyTransactionType::OAILoyaltyTransactionType() {
    this->initializeModel();
}

OAILoyaltyTransactionType::~OAILoyaltyTransactionType() {}

void OAILoyaltyTransactionType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILoyaltyTransactionType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILoyaltyTransactionType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Award", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::AWARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AwardRefund", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::AWARDREFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Rebate", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::REBATE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RebateRefund", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::REBATEREFUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Redemption", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::REDEMPTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedemptionRefund", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyTransactionType::REDEMPTIONREFUND;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILoyaltyTransactionType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILoyaltyTransactionType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILoyaltyTransactionType::AWARD:
            val = "Award";
            break;
        case eOAILoyaltyTransactionType::AWARDREFUND:
            val = "AwardRefund";
            break;
        case eOAILoyaltyTransactionType::REBATE:
            val = "Rebate";
            break;
        case eOAILoyaltyTransactionType::REBATEREFUND:
            val = "RebateRefund";
            break;
        case eOAILoyaltyTransactionType::REDEMPTION:
            val = "Redemption";
            break;
        case eOAILoyaltyTransactionType::REDEMPTIONREFUND:
            val = "RedemptionRefund";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILoyaltyTransactionType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILoyaltyTransactionType::eOAILoyaltyTransactionType OAILoyaltyTransactionType::getValue() const {
    return m_value;
}

void OAILoyaltyTransactionType::setValue(const OAILoyaltyTransactionType::eOAILoyaltyTransactionType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILoyaltyTransactionType::isSet() const {
    
    return m_value_isSet;
}

bool OAILoyaltyTransactionType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
