/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutputText.h
 *
 * It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content. Content of text message to display or print.
 */

#ifndef OAIOutputText_H
#define OAIOutputText_H

#include <QJsonObject>

#include "OAIAlignment.h"
#include "OAICharacterHeight.h"
#include "OAICharacterStyle.h"
#include "OAICharacterWidth.h"
#include "OAIColor.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIOutputText : public OAIObject {
public:
    OAIOutputText();
    OAIOutputText(QString json);
    ~OAIOutputText() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAlignment getAlignment() const;
    void setAlignment(const OAIAlignment &alignment);
    bool is_alignment_Set() const;
    bool is_alignment_Valid() const;

    OAICharacterHeight getCharacterHeight() const;
    void setCharacterHeight(const OAICharacterHeight &character_height);
    bool is_character_height_Set() const;
    bool is_character_height_Valid() const;

    qint32 getCharacterSet() const;
    void setCharacterSet(const qint32 &character_set);
    bool is_character_set_Set() const;
    bool is_character_set_Valid() const;

    OAICharacterStyle getCharacterStyle() const;
    void setCharacterStyle(const OAICharacterStyle &character_style);
    bool is_character_style_Set() const;
    bool is_character_style_Valid() const;

    OAICharacterWidth getCharacterWidth() const;
    void setCharacterWidth(const OAICharacterWidth &character_width);
    bool is_character_width_Set() const;
    bool is_character_width_Valid() const;

    OAIColor getColor() const;
    void setColor(const OAIColor &color);
    bool is_color_Set() const;
    bool is_color_Valid() const;

    bool isEndOfLineFlag() const;
    void setEndOfLineFlag(const bool &end_of_line_flag);
    bool is_end_of_line_flag_Set() const;
    bool is_end_of_line_flag_Valid() const;

    QString getFont() const;
    void setFont(const QString &font);
    bool is_font_Set() const;
    bool is_font_Valid() const;

    qint32 getStartColumn() const;
    void setStartColumn(const qint32 &start_column);
    bool is_start_column_Set() const;
    bool is_start_column_Valid() const;

    qint32 getStartRow() const;
    void setStartRow(const qint32 &start_row);
    bool is_start_row_Set() const;
    bool is_start_row_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAlignment m_alignment;
    bool m_alignment_isSet;
    bool m_alignment_isValid;

    OAICharacterHeight m_character_height;
    bool m_character_height_isSet;
    bool m_character_height_isValid;

    qint32 m_character_set;
    bool m_character_set_isSet;
    bool m_character_set_isValid;

    OAICharacterStyle m_character_style;
    bool m_character_style_isSet;
    bool m_character_style_isValid;

    OAICharacterWidth m_character_width;
    bool m_character_width_isSet;
    bool m_character_width_isValid;

    OAIColor m_color;
    bool m_color_isSet;
    bool m_color_isValid;

    bool m_end_of_line_flag;
    bool m_end_of_line_flag_isSet;
    bool m_end_of_line_flag_isValid;

    QString m_font;
    bool m_font_isSet;
    bool m_font_isValid;

    qint32 m_start_column;
    bool m_start_column_isSet;
    bool m_start_column_isValid;

    qint32 m_start_row;
    bool m_start_row_isSet;
    bool m_start_row_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutputText)

#endif // OAIOutputText_H
