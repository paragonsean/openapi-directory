/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotalFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotalFilter::OAITotalFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotalFilter::OAITotalFilter() {
    this->initializeModel();
}

OAITotalFilter::~OAITotalFilter() {}

void OAITotalFilter::initializeModel() {

    m_operator_id_isSet = false;
    m_operator_id_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;

    m_sale_id_isSet = false;
    m_sale_id_isValid = false;

    m_shift_number_isSet = false;
    m_shift_number_isValid = false;

    m_totals_group_id_isSet = false;
    m_totals_group_id_isValid = false;
}

void OAITotalFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotalFilter::fromJsonObject(QJsonObject json) {

    m_operator_id_isValid = ::OpenAPI::fromJsonValue(m_operator_id, json[QString("OperatorID")]);
    m_operator_id_isSet = !json[QString("OperatorID")].isNull() && m_operator_id_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;

    m_sale_id_isValid = ::OpenAPI::fromJsonValue(m_sale_id, json[QString("SaleID")]);
    m_sale_id_isSet = !json[QString("SaleID")].isNull() && m_sale_id_isValid;

    m_shift_number_isValid = ::OpenAPI::fromJsonValue(m_shift_number, json[QString("ShiftNumber")]);
    m_shift_number_isSet = !json[QString("ShiftNumber")].isNull() && m_shift_number_isValid;

    m_totals_group_id_isValid = ::OpenAPI::fromJsonValue(m_totals_group_id, json[QString("TotalsGroupID")]);
    m_totals_group_id_isSet = !json[QString("TotalsGroupID")].isNull() && m_totals_group_id_isValid;
}

QString OAITotalFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotalFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_operator_id_isSet) {
        obj.insert(QString("OperatorID"), ::OpenAPI::toJsonValue(m_operator_id));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    if (m_sale_id_isSet) {
        obj.insert(QString("SaleID"), ::OpenAPI::toJsonValue(m_sale_id));
    }
    if (m_shift_number_isSet) {
        obj.insert(QString("ShiftNumber"), ::OpenAPI::toJsonValue(m_shift_number));
    }
    if (m_totals_group_id_isSet) {
        obj.insert(QString("TotalsGroupID"), ::OpenAPI::toJsonValue(m_totals_group_id));
    }
    return obj;
}

QString OAITotalFilter::getOperatorId() const {
    return m_operator_id;
}
void OAITotalFilter::setOperatorId(const QString &operator_id) {
    m_operator_id = operator_id;
    m_operator_id_isSet = true;
}

bool OAITotalFilter::is_operator_id_Set() const{
    return m_operator_id_isSet;
}

bool OAITotalFilter::is_operator_id_Valid() const{
    return m_operator_id_isValid;
}

QString OAITotalFilter::getPoiid() const {
    return m_poiid;
}
void OAITotalFilter::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAITotalFilter::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAITotalFilter::is_poiid_Valid() const{
    return m_poiid_isValid;
}

QString OAITotalFilter::getSaleId() const {
    return m_sale_id;
}
void OAITotalFilter::setSaleId(const QString &sale_id) {
    m_sale_id = sale_id;
    m_sale_id_isSet = true;
}

bool OAITotalFilter::is_sale_id_Set() const{
    return m_sale_id_isSet;
}

bool OAITotalFilter::is_sale_id_Valid() const{
    return m_sale_id_isValid;
}

QString OAITotalFilter::getShiftNumber() const {
    return m_shift_number;
}
void OAITotalFilter::setShiftNumber(const QString &shift_number) {
    m_shift_number = shift_number;
    m_shift_number_isSet = true;
}

bool OAITotalFilter::is_shift_number_Set() const{
    return m_shift_number_isSet;
}

bool OAITotalFilter::is_shift_number_Valid() const{
    return m_shift_number_isValid;
}

QString OAITotalFilter::getTotalsGroupId() const {
    return m_totals_group_id;
}
void OAITotalFilter::setTotalsGroupId(const QString &totals_group_id) {
    m_totals_group_id = totals_group_id;
    m_totals_group_id_isSet = true;
}

bool OAITotalFilter::is_totals_group_id_Set() const{
    return m_totals_group_id_isSet;
}

bool OAITotalFilter::is_totals_group_id_Valid() const{
    return m_totals_group_id_isValid;
}

bool OAITotalFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotalFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
