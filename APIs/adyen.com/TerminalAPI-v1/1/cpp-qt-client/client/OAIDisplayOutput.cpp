/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisplayOutput.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisplayOutput::OAIDisplayOutput(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisplayOutput::OAIDisplayOutput() {
    this->initializeModel();
}

OAIDisplayOutput::~OAIDisplayOutput() {}

void OAIDisplayOutput::initializeModel() {

    m_device_isSet = false;
    m_device_isValid = false;

    m_info_qualify_isSet = false;
    m_info_qualify_isValid = false;

    m_menu_entry_isSet = false;
    m_menu_entry_isValid = false;

    m_minimum_display_time_isSet = false;
    m_minimum_display_time_isValid = false;

    m_output_content_isSet = false;
    m_output_content_isValid = false;

    m_output_signature_isSet = false;
    m_output_signature_isValid = false;

    m_response_required_flag_isSet = false;
    m_response_required_flag_isValid = false;
}

void OAIDisplayOutput::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisplayOutput::fromJsonObject(QJsonObject json) {

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_info_qualify_isValid = ::OpenAPI::fromJsonValue(m_info_qualify, json[QString("InfoQualify")]);
    m_info_qualify_isSet = !json[QString("InfoQualify")].isNull() && m_info_qualify_isValid;

    m_menu_entry_isValid = ::OpenAPI::fromJsonValue(m_menu_entry, json[QString("MenuEntry")]);
    m_menu_entry_isSet = !json[QString("MenuEntry")].isNull() && m_menu_entry_isValid;

    m_minimum_display_time_isValid = ::OpenAPI::fromJsonValue(m_minimum_display_time, json[QString("MinimumDisplayTime")]);
    m_minimum_display_time_isSet = !json[QString("MinimumDisplayTime")].isNull() && m_minimum_display_time_isValid;

    m_output_content_isValid = ::OpenAPI::fromJsonValue(m_output_content, json[QString("OutputContent")]);
    m_output_content_isSet = !json[QString("OutputContent")].isNull() && m_output_content_isValid;

    m_output_signature_isValid = ::OpenAPI::fromJsonValue(m_output_signature, json[QString("OutputSignature")]);
    m_output_signature_isSet = !json[QString("OutputSignature")].isNull() && m_output_signature_isValid;

    m_response_required_flag_isValid = ::OpenAPI::fromJsonValue(m_response_required_flag, json[QString("ResponseRequiredFlag")]);
    m_response_required_flag_isSet = !json[QString("ResponseRequiredFlag")].isNull() && m_response_required_flag_isValid;
}

QString OAIDisplayOutput::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisplayOutput::asJsonObject() const {
    QJsonObject obj;
    if (m_device.isSet()) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_info_qualify.isSet()) {
        obj.insert(QString("InfoQualify"), ::OpenAPI::toJsonValue(m_info_qualify));
    }
    if (m_menu_entry.size() > 0) {
        obj.insert(QString("MenuEntry"), ::OpenAPI::toJsonValue(m_menu_entry));
    }
    if (m_minimum_display_time_isSet) {
        obj.insert(QString("MinimumDisplayTime"), ::OpenAPI::toJsonValue(m_minimum_display_time));
    }
    if (m_output_content.isSet()) {
        obj.insert(QString("OutputContent"), ::OpenAPI::toJsonValue(m_output_content));
    }
    if (m_output_signature_isSet) {
        obj.insert(QString("OutputSignature"), ::OpenAPI::toJsonValue(m_output_signature));
    }
    if (m_response_required_flag_isSet) {
        obj.insert(QString("ResponseRequiredFlag"), ::OpenAPI::toJsonValue(m_response_required_flag));
    }
    return obj;
}

OAIDevice OAIDisplayOutput::getDevice() const {
    return m_device;
}
void OAIDisplayOutput::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIDisplayOutput::is_device_Set() const{
    return m_device_isSet;
}

bool OAIDisplayOutput::is_device_Valid() const{
    return m_device_isValid;
}

OAIInfoQualify OAIDisplayOutput::getInfoQualify() const {
    return m_info_qualify;
}
void OAIDisplayOutput::setInfoQualify(const OAIInfoQualify &info_qualify) {
    m_info_qualify = info_qualify;
    m_info_qualify_isSet = true;
}

bool OAIDisplayOutput::is_info_qualify_Set() const{
    return m_info_qualify_isSet;
}

bool OAIDisplayOutput::is_info_qualify_Valid() const{
    return m_info_qualify_isValid;
}

QList<OAIMenuEntry> OAIDisplayOutput::getMenuEntry() const {
    return m_menu_entry;
}
void OAIDisplayOutput::setMenuEntry(const QList<OAIMenuEntry> &menu_entry) {
    m_menu_entry = menu_entry;
    m_menu_entry_isSet = true;
}

bool OAIDisplayOutput::is_menu_entry_Set() const{
    return m_menu_entry_isSet;
}

bool OAIDisplayOutput::is_menu_entry_Valid() const{
    return m_menu_entry_isValid;
}

qint32 OAIDisplayOutput::getMinimumDisplayTime() const {
    return m_minimum_display_time;
}
void OAIDisplayOutput::setMinimumDisplayTime(const qint32 &minimum_display_time) {
    m_minimum_display_time = minimum_display_time;
    m_minimum_display_time_isSet = true;
}

bool OAIDisplayOutput::is_minimum_display_time_Set() const{
    return m_minimum_display_time_isSet;
}

bool OAIDisplayOutput::is_minimum_display_time_Valid() const{
    return m_minimum_display_time_isValid;
}

OAIOutputContent OAIDisplayOutput::getOutputContent() const {
    return m_output_content;
}
void OAIDisplayOutput::setOutputContent(const OAIOutputContent &output_content) {
    m_output_content = output_content;
    m_output_content_isSet = true;
}

bool OAIDisplayOutput::is_output_content_Set() const{
    return m_output_content_isSet;
}

bool OAIDisplayOutput::is_output_content_Valid() const{
    return m_output_content_isValid;
}

QString OAIDisplayOutput::getOutputSignature() const {
    return m_output_signature;
}
void OAIDisplayOutput::setOutputSignature(const QString &output_signature) {
    m_output_signature = output_signature;
    m_output_signature_isSet = true;
}

bool OAIDisplayOutput::is_output_signature_Set() const{
    return m_output_signature_isSet;
}

bool OAIDisplayOutput::is_output_signature_Valid() const{
    return m_output_signature_isValid;
}

bool OAIDisplayOutput::isResponseRequiredFlag() const {
    return m_response_required_flag;
}
void OAIDisplayOutput::setResponseRequiredFlag(const bool &response_required_flag) {
    m_response_required_flag = response_required_flag;
    m_response_required_flag_isSet = true;
}

bool OAIDisplayOutput::is_response_required_flag_Set() const{
    return m_response_required_flag_isSet;
}

bool OAIDisplayOutput::is_response_required_flag_Valid() const{
    return m_response_required_flag_isValid;
}

bool OAIDisplayOutput::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_qualify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_entry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_display_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_required_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisplayOutput::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_info_qualify_isValid && m_output_content_isValid && true;
}

} // namespace OpenAPI
