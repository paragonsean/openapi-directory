/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyHandling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyHandling::OAILoyaltyHandling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyHandling::OAILoyaltyHandling() {
    this->initializeModel();
}

OAILoyaltyHandling::~OAILoyaltyHandling() {}

void OAILoyaltyHandling::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILoyaltyHandling::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILoyaltyHandling::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Allowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyHandling::ALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Forbidden", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyHandling::FORBIDDEN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Processed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyHandling::PROCESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Proposed", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyHandling::PROPOSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Required", Qt::CaseInsensitive) == 0) {
        m_value = eOAILoyaltyHandling::REQUIRED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILoyaltyHandling::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILoyaltyHandling::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILoyaltyHandling::ALLOWED:
            val = "Allowed";
            break;
        case eOAILoyaltyHandling::FORBIDDEN:
            val = "Forbidden";
            break;
        case eOAILoyaltyHandling::PROCESSED:
            val = "Processed";
            break;
        case eOAILoyaltyHandling::PROPOSED:
            val = "Proposed";
            break;
        case eOAILoyaltyHandling::REQUIRED:
            val = "Required";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILoyaltyHandling::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILoyaltyHandling::eOAILoyaltyHandling OAILoyaltyHandling::getValue() const {
    return m_value;
}

void OAILoyaltyHandling::setValue(const OAILoyaltyHandling::eOAILoyaltyHandling& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILoyaltyHandling::isSet() const {
    
    return m_value_isSet;
}

bool OAILoyaltyHandling::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
