/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISoundContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISoundContent::OAISoundContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISoundContent::OAISoundContent() {
    this->initializeModel();
}

OAISoundContent::~OAISoundContent() {}

void OAISoundContent::initializeModel() {

    m_language_isSet = false;
    m_language_isValid = false;

    m_reference_id_isSet = false;
    m_reference_id_isValid = false;

    m_sound_format_isSet = false;
    m_sound_format_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISoundContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISoundContent::fromJsonObject(QJsonObject json) {

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_reference_id_isValid = ::OpenAPI::fromJsonValue(m_reference_id, json[QString("ReferenceID")]);
    m_reference_id_isSet = !json[QString("ReferenceID")].isNull() && m_reference_id_isValid;

    m_sound_format_isValid = ::OpenAPI::fromJsonValue(m_sound_format, json[QString("SoundFormat")]);
    m_sound_format_isSet = !json[QString("SoundFormat")].isNull() && m_sound_format_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAISoundContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISoundContent::asJsonObject() const {
    QJsonObject obj;
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_reference_id_isSet) {
        obj.insert(QString("ReferenceID"), ::OpenAPI::toJsonValue(m_reference_id));
    }
    if (m_sound_format.isSet()) {
        obj.insert(QString("SoundFormat"), ::OpenAPI::toJsonValue(m_sound_format));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAISoundContent::getLanguage() const {
    return m_language;
}
void OAISoundContent::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISoundContent::is_language_Set() const{
    return m_language_isSet;
}

bool OAISoundContent::is_language_Valid() const{
    return m_language_isValid;
}

QString OAISoundContent::getReferenceId() const {
    return m_reference_id;
}
void OAISoundContent::setReferenceId(const QString &reference_id) {
    m_reference_id = reference_id;
    m_reference_id_isSet = true;
}

bool OAISoundContent::is_reference_id_Set() const{
    return m_reference_id_isSet;
}

bool OAISoundContent::is_reference_id_Valid() const{
    return m_reference_id_isValid;
}

OAISoundFormat OAISoundContent::getSoundFormat() const {
    return m_sound_format;
}
void OAISoundContent::setSoundFormat(const OAISoundFormat &sound_format) {
    m_sound_format = sound_format;
    m_sound_format_isSet = true;
}

bool OAISoundContent::is_sound_format_Set() const{
    return m_sound_format_isSet;
}

bool OAISoundContent::is_sound_format_Valid() const{
    return m_sound_format_isValid;
}

QString OAISoundContent::getText() const {
    return m_text;
}
void OAISoundContent::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISoundContent::is_text_Set() const{
    return m_text_isSet;
}

bool OAISoundContent::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISoundContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sound_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISoundContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sound_format_isValid && true;
}

} // namespace OpenAPI
