/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICashHandlingDevice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICashHandlingDevice::OAICashHandlingDevice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICashHandlingDevice::OAICashHandlingDevice() {
    this->initializeModel();
}

OAICashHandlingDevice::~OAICashHandlingDevice() {}

void OAICashHandlingDevice::initializeModel() {

    m_cash_handling_ok_flag_isSet = false;
    m_cash_handling_ok_flag_isValid = false;

    m_coins_or_bills_isSet = false;
    m_coins_or_bills_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;
}

void OAICashHandlingDevice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICashHandlingDevice::fromJsonObject(QJsonObject json) {

    m_cash_handling_ok_flag_isValid = ::OpenAPI::fromJsonValue(m_cash_handling_ok_flag, json[QString("CashHandlingOKFlag")]);
    m_cash_handling_ok_flag_isSet = !json[QString("CashHandlingOKFlag")].isNull() && m_cash_handling_ok_flag_isValid;

    m_coins_or_bills_isValid = ::OpenAPI::fromJsonValue(m_coins_or_bills, json[QString("CoinsOrBills")]);
    m_coins_or_bills_isSet = !json[QString("CoinsOrBills")].isNull() && m_coins_or_bills_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;
}

QString OAICashHandlingDevice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICashHandlingDevice::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_handling_ok_flag_isSet) {
        obj.insert(QString("CashHandlingOKFlag"), ::OpenAPI::toJsonValue(m_cash_handling_ok_flag));
    }
    if (m_coins_or_bills.size() > 0) {
        obj.insert(QString("CoinsOrBills"), ::OpenAPI::toJsonValue(m_coins_or_bills));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    return obj;
}

bool OAICashHandlingDevice::isCashHandlingOkFlag() const {
    return m_cash_handling_ok_flag;
}
void OAICashHandlingDevice::setCashHandlingOkFlag(const bool &cash_handling_ok_flag) {
    m_cash_handling_ok_flag = cash_handling_ok_flag;
    m_cash_handling_ok_flag_isSet = true;
}

bool OAICashHandlingDevice::is_cash_handling_ok_flag_Set() const{
    return m_cash_handling_ok_flag_isSet;
}

bool OAICashHandlingDevice::is_cash_handling_ok_flag_Valid() const{
    return m_cash_handling_ok_flag_isValid;
}

QList<OAICoinsOrBills> OAICashHandlingDevice::getCoinsOrBills() const {
    return m_coins_or_bills;
}
void OAICashHandlingDevice::setCoinsOrBills(const QList<OAICoinsOrBills> &coins_or_bills) {
    m_coins_or_bills = coins_or_bills;
    m_coins_or_bills_isSet = true;
}

bool OAICashHandlingDevice::is_coins_or_bills_Set() const{
    return m_coins_or_bills_isSet;
}

bool OAICashHandlingDevice::is_coins_or_bills_Valid() const{
    return m_coins_or_bills_isValid;
}

QString OAICashHandlingDevice::getCurrency() const {
    return m_currency;
}
void OAICashHandlingDevice::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICashHandlingDevice::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICashHandlingDevice::is_currency_Valid() const{
    return m_currency_isValid;
}

bool OAICashHandlingDevice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_handling_ok_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coins_or_bills.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICashHandlingDevice::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cash_handling_ok_flag_isValid && m_coins_or_bills_isValid && m_currency_isValid && true;
}

} // namespace OpenAPI
