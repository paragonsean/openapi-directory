/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIErrorCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIErrorCondition::OAIErrorCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIErrorCondition::OAIErrorCondition() {
    this->initializeModel();
}

OAIErrorCondition::~OAIErrorCondition() {}

void OAIErrorCondition::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIErrorCondition::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIErrorCondition::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Aborted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::ABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Busy", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::BUSY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancel", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::CANCEL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DeviceOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::DEVICEOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InProgress", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::INPROGRESS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InsertedCard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::INSERTEDCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("InvalidCard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::INVALIDCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("LoggedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::LOGGEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("MessageFormat", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::MESSAGEFORMAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotAllowed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::NOTALLOWED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("NotFound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::NOTFOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("PaymentRestriction", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::PAYMENTRESTRICTION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Refusal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::REFUSAL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnavailableDevice", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::UNAVAILABLEDEVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnavailableService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::UNAVAILABLESERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UnreachableHost", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::UNREACHABLEHOST;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("WrongPIN", Qt::CaseInsensitive) == 0) {
        m_value = eOAIErrorCondition::WRONGPIN;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIErrorCondition::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIErrorCondition::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIErrorCondition::ABORTED:
            val = "Aborted";
            break;
        case eOAIErrorCondition::BUSY:
            val = "Busy";
            break;
        case eOAIErrorCondition::CANCEL:
            val = "Cancel";
            break;
        case eOAIErrorCondition::DEVICEOUT:
            val = "DeviceOut";
            break;
        case eOAIErrorCondition::INPROGRESS:
            val = "InProgress";
            break;
        case eOAIErrorCondition::INSERTEDCARD:
            val = "InsertedCard";
            break;
        case eOAIErrorCondition::INVALIDCARD:
            val = "InvalidCard";
            break;
        case eOAIErrorCondition::LOGGEDOUT:
            val = "LoggedOut";
            break;
        case eOAIErrorCondition::MESSAGEFORMAT:
            val = "MessageFormat";
            break;
        case eOAIErrorCondition::NOTALLOWED:
            val = "NotAllowed";
            break;
        case eOAIErrorCondition::NOTFOUND:
            val = "NotFound";
            break;
        case eOAIErrorCondition::PAYMENTRESTRICTION:
            val = "PaymentRestriction";
            break;
        case eOAIErrorCondition::REFUSAL:
            val = "Refusal";
            break;
        case eOAIErrorCondition::UNAVAILABLEDEVICE:
            val = "UnavailableDevice";
            break;
        case eOAIErrorCondition::UNAVAILABLESERVICE:
            val = "UnavailableService";
            break;
        case eOAIErrorCondition::UNREACHABLEHOST:
            val = "UnreachableHost";
            break;
        case eOAIErrorCondition::WRONGPIN:
            val = "WrongPIN";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIErrorCondition::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIErrorCondition::eOAIErrorCondition OAIErrorCondition::getValue() const {
    return m_value;
}

void OAIErrorCondition::setValue(const OAIErrorCondition::eOAIErrorCondition& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIErrorCondition::isSet() const {
    
    return m_value_isSet;
}

bool OAIErrorCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
