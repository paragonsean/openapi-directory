/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfoQualify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfoQualify::OAIInfoQualify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfoQualify::OAIInfoQualify() {
    this->initializeModel();
}

OAIInfoQualify::~OAIInfoQualify() {}

void OAIInfoQualify::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInfoQualify::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInfoQualify::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CustomerAssistance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::CUSTOMERASSISTANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Display", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::DISPLAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Document", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::DOCUMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Error", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::ERROR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Input", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::INPUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("POIReplication", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::POIREPLICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Receipt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::RECEIPT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Sound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::SOUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Status", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::STATUS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Voucher", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInfoQualify::VOUCHER;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInfoQualify::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInfoQualify::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInfoQualify::CUSTOMERASSISTANCE:
            val = "CustomerAssistance";
            break;
        case eOAIInfoQualify::DISPLAY:
            val = "Display";
            break;
        case eOAIInfoQualify::DOCUMENT:
            val = "Document";
            break;
        case eOAIInfoQualify::ERROR:
            val = "Error";
            break;
        case eOAIInfoQualify::INPUT:
            val = "Input";
            break;
        case eOAIInfoQualify::POIREPLICATION:
            val = "POIReplication";
            break;
        case eOAIInfoQualify::RECEIPT:
            val = "Receipt";
            break;
        case eOAIInfoQualify::SOUND:
            val = "Sound";
            break;
        case eOAIInfoQualify::STATUS:
            val = "Status";
            break;
        case eOAIInfoQualify::VOUCHER:
            val = "Voucher";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInfoQualify::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInfoQualify::eOAIInfoQualify OAIInfoQualify::getValue() const {
    return m_value;
}

void OAIInfoQualify::setValue(const OAIInfoQualify::eOAIInfoQualify& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInfoQualify::isSet() const {
    
    return m_value_isSet;
}

bool OAIInfoQualify::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
