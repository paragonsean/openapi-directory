/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPOIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPOIStatus::OAIPOIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPOIStatus::OAIPOIStatus() {
    this->initializeModel();
}

OAIPOIStatus::~OAIPOIStatus() {}

void OAIPOIStatus::initializeModel() {

    m_card_reader_ok_flag_isSet = false;
    m_card_reader_ok_flag_isValid = false;

    m_cash_handling_device_isSet = false;
    m_cash_handling_device_isValid = false;

    m_communication_ok_flag_isSet = false;
    m_communication_ok_flag_isValid = false;

    m_fraud_prevention_flag_isSet = false;
    m_fraud_prevention_flag_isValid = false;

    m_global_status_isSet = false;
    m_global_status_isValid = false;

    m_pedok_flag_isSet = false;
    m_pedok_flag_isValid = false;

    m_printer_status_isSet = false;
    m_printer_status_isValid = false;

    m_security_ok_flag_isSet = false;
    m_security_ok_flag_isValid = false;
}

void OAIPOIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPOIStatus::fromJsonObject(QJsonObject json) {

    m_card_reader_ok_flag_isValid = ::OpenAPI::fromJsonValue(m_card_reader_ok_flag, json[QString("CardReaderOKFlag")]);
    m_card_reader_ok_flag_isSet = !json[QString("CardReaderOKFlag")].isNull() && m_card_reader_ok_flag_isValid;

    m_cash_handling_device_isValid = ::OpenAPI::fromJsonValue(m_cash_handling_device, json[QString("CashHandlingDevice")]);
    m_cash_handling_device_isSet = !json[QString("CashHandlingDevice")].isNull() && m_cash_handling_device_isValid;

    m_communication_ok_flag_isValid = ::OpenAPI::fromJsonValue(m_communication_ok_flag, json[QString("CommunicationOKFlag")]);
    m_communication_ok_flag_isSet = !json[QString("CommunicationOKFlag")].isNull() && m_communication_ok_flag_isValid;

    m_fraud_prevention_flag_isValid = ::OpenAPI::fromJsonValue(m_fraud_prevention_flag, json[QString("FraudPreventionFlag")]);
    m_fraud_prevention_flag_isSet = !json[QString("FraudPreventionFlag")].isNull() && m_fraud_prevention_flag_isValid;

    m_global_status_isValid = ::OpenAPI::fromJsonValue(m_global_status, json[QString("GlobalStatus")]);
    m_global_status_isSet = !json[QString("GlobalStatus")].isNull() && m_global_status_isValid;

    m_pedok_flag_isValid = ::OpenAPI::fromJsonValue(m_pedok_flag, json[QString("PEDOKFlag")]);
    m_pedok_flag_isSet = !json[QString("PEDOKFlag")].isNull() && m_pedok_flag_isValid;

    m_printer_status_isValid = ::OpenAPI::fromJsonValue(m_printer_status, json[QString("PrinterStatus")]);
    m_printer_status_isSet = !json[QString("PrinterStatus")].isNull() && m_printer_status_isValid;

    m_security_ok_flag_isValid = ::OpenAPI::fromJsonValue(m_security_ok_flag, json[QString("SecurityOKFlag")]);
    m_security_ok_flag_isSet = !json[QString("SecurityOKFlag")].isNull() && m_security_ok_flag_isValid;
}

QString OAIPOIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPOIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_card_reader_ok_flag_isSet) {
        obj.insert(QString("CardReaderOKFlag"), ::OpenAPI::toJsonValue(m_card_reader_ok_flag));
    }
    if (m_cash_handling_device.size() > 0) {
        obj.insert(QString("CashHandlingDevice"), ::OpenAPI::toJsonValue(m_cash_handling_device));
    }
    if (m_communication_ok_flag_isSet) {
        obj.insert(QString("CommunicationOKFlag"), ::OpenAPI::toJsonValue(m_communication_ok_flag));
    }
    if (m_fraud_prevention_flag_isSet) {
        obj.insert(QString("FraudPreventionFlag"), ::OpenAPI::toJsonValue(m_fraud_prevention_flag));
    }
    if (m_global_status.isSet()) {
        obj.insert(QString("GlobalStatus"), ::OpenAPI::toJsonValue(m_global_status));
    }
    if (m_pedok_flag_isSet) {
        obj.insert(QString("PEDOKFlag"), ::OpenAPI::toJsonValue(m_pedok_flag));
    }
    if (m_printer_status.isSet()) {
        obj.insert(QString("PrinterStatus"), ::OpenAPI::toJsonValue(m_printer_status));
    }
    if (m_security_ok_flag_isSet) {
        obj.insert(QString("SecurityOKFlag"), ::OpenAPI::toJsonValue(m_security_ok_flag));
    }
    return obj;
}

bool OAIPOIStatus::isCardReaderOkFlag() const {
    return m_card_reader_ok_flag;
}
void OAIPOIStatus::setCardReaderOkFlag(const bool &card_reader_ok_flag) {
    m_card_reader_ok_flag = card_reader_ok_flag;
    m_card_reader_ok_flag_isSet = true;
}

bool OAIPOIStatus::is_card_reader_ok_flag_Set() const{
    return m_card_reader_ok_flag_isSet;
}

bool OAIPOIStatus::is_card_reader_ok_flag_Valid() const{
    return m_card_reader_ok_flag_isValid;
}

QList<OAICashHandlingDevice> OAIPOIStatus::getCashHandlingDevice() const {
    return m_cash_handling_device;
}
void OAIPOIStatus::setCashHandlingDevice(const QList<OAICashHandlingDevice> &cash_handling_device) {
    m_cash_handling_device = cash_handling_device;
    m_cash_handling_device_isSet = true;
}

bool OAIPOIStatus::is_cash_handling_device_Set() const{
    return m_cash_handling_device_isSet;
}

bool OAIPOIStatus::is_cash_handling_device_Valid() const{
    return m_cash_handling_device_isValid;
}

bool OAIPOIStatus::isCommunicationOkFlag() const {
    return m_communication_ok_flag;
}
void OAIPOIStatus::setCommunicationOkFlag(const bool &communication_ok_flag) {
    m_communication_ok_flag = communication_ok_flag;
    m_communication_ok_flag_isSet = true;
}

bool OAIPOIStatus::is_communication_ok_flag_Set() const{
    return m_communication_ok_flag_isSet;
}

bool OAIPOIStatus::is_communication_ok_flag_Valid() const{
    return m_communication_ok_flag_isValid;
}

bool OAIPOIStatus::isFraudPreventionFlag() const {
    return m_fraud_prevention_flag;
}
void OAIPOIStatus::setFraudPreventionFlag(const bool &fraud_prevention_flag) {
    m_fraud_prevention_flag = fraud_prevention_flag;
    m_fraud_prevention_flag_isSet = true;
}

bool OAIPOIStatus::is_fraud_prevention_flag_Set() const{
    return m_fraud_prevention_flag_isSet;
}

bool OAIPOIStatus::is_fraud_prevention_flag_Valid() const{
    return m_fraud_prevention_flag_isValid;
}

OAIGlobalStatus OAIPOIStatus::getGlobalStatus() const {
    return m_global_status;
}
void OAIPOIStatus::setGlobalStatus(const OAIGlobalStatus &global_status) {
    m_global_status = global_status;
    m_global_status_isSet = true;
}

bool OAIPOIStatus::is_global_status_Set() const{
    return m_global_status_isSet;
}

bool OAIPOIStatus::is_global_status_Valid() const{
    return m_global_status_isValid;
}

bool OAIPOIStatus::isPedokFlag() const {
    return m_pedok_flag;
}
void OAIPOIStatus::setPedokFlag(const bool &pedok_flag) {
    m_pedok_flag = pedok_flag;
    m_pedok_flag_isSet = true;
}

bool OAIPOIStatus::is_pedok_flag_Set() const{
    return m_pedok_flag_isSet;
}

bool OAIPOIStatus::is_pedok_flag_Valid() const{
    return m_pedok_flag_isValid;
}

OAIPrinterStatus OAIPOIStatus::getPrinterStatus() const {
    return m_printer_status;
}
void OAIPOIStatus::setPrinterStatus(const OAIPrinterStatus &printer_status) {
    m_printer_status = printer_status;
    m_printer_status_isSet = true;
}

bool OAIPOIStatus::is_printer_status_Set() const{
    return m_printer_status_isSet;
}

bool OAIPOIStatus::is_printer_status_Valid() const{
    return m_printer_status_isValid;
}

bool OAIPOIStatus::isSecurityOkFlag() const {
    return m_security_ok_flag;
}
void OAIPOIStatus::setSecurityOkFlag(const bool &security_ok_flag) {
    m_security_ok_flag = security_ok_flag;
    m_security_ok_flag_isSet = true;
}

bool OAIPOIStatus::is_security_ok_flag_Set() const{
    return m_security_ok_flag_isSet;
}

bool OAIPOIStatus::is_security_ok_flag_Valid() const{
    return m_security_ok_flag_isValid;
}

bool OAIPOIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_reader_ok_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cash_handling_device.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_ok_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraud_prevention_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pedok_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_printer_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_ok_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPOIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_global_status_isValid && true;
}

} // namespace OpenAPI
