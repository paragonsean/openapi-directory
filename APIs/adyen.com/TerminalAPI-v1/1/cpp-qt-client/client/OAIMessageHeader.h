/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMessageHeader.h
 *
 * It conveys Information related to the Sale to POI protocol management. Message header of the Sale to POI protocol message.
 */

#ifndef OAIMessageHeader_H
#define OAIMessageHeader_H

#include <QJsonObject>

#include "OAIMessageCategory.h"
#include "OAIMessageClass.h"
#include "OAIMessageType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIMessageHeader : public OAIObject {
public:
    OAIMessageHeader();
    OAIMessageHeader(QString json);
    ~OAIMessageHeader() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceId() const;
    void setDeviceId(const QString &device_id);
    bool is_device_id_Set() const;
    bool is_device_id_Valid() const;

    OAIMessageCategory getMessageCategory() const;
    void setMessageCategory(const OAIMessageCategory &message_category);
    bool is_message_category_Set() const;
    bool is_message_category_Valid() const;

    OAIMessageClass getMessageClass() const;
    void setMessageClass(const OAIMessageClass &message_class);
    bool is_message_class_Set() const;
    bool is_message_class_Valid() const;

    OAIMessageType getMessageType() const;
    void setMessageType(const OAIMessageType &message_type);
    bool is_message_type_Set() const;
    bool is_message_type_Valid() const;

    QString getPoiid() const;
    void setPoiid(const QString &poiid);
    bool is_poiid_Set() const;
    bool is_poiid_Valid() const;

    QString getProtocolVersion() const;
    void setProtocolVersion(const QString &protocol_version);
    bool is_protocol_version_Set() const;
    bool is_protocol_version_Valid() const;

    QString getSaleId() const;
    void setSaleId(const QString &sale_id);
    bool is_sale_id_Set() const;
    bool is_sale_id_Valid() const;

    QString getServiceId() const;
    void setServiceId(const QString &service_id);
    bool is_service_id_Set() const;
    bool is_service_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_id;
    bool m_device_id_isSet;
    bool m_device_id_isValid;

    OAIMessageCategory m_message_category;
    bool m_message_category_isSet;
    bool m_message_category_isValid;

    OAIMessageClass m_message_class;
    bool m_message_class_isSet;
    bool m_message_class_isValid;

    OAIMessageType m_message_type;
    bool m_message_type_isSet;
    bool m_message_type_isValid;

    QString m_poiid;
    bool m_poiid_isSet;
    bool m_poiid_isValid;

    QString m_protocol_version;
    bool m_protocol_version_isSet;
    bool m_protocol_version_isValid;

    QString m_sale_id;
    bool m_sale_id_isSet;
    bool m_sale_id_isValid;

    QString m_service_id;
    bool m_service_id_isSet;
    bool m_service_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMessageHeader)

#endif // OAIMessageHeader_H
