/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyAcquirerData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyAcquirerData::OAILoyaltyAcquirerData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyAcquirerData::OAILoyaltyAcquirerData() {
    this->initializeModel();
}

OAILoyaltyAcquirerData::~OAILoyaltyAcquirerData() {}

void OAILoyaltyAcquirerData::initializeModel() {

    m_approval_code_isSet = false;
    m_approval_code_isValid = false;

    m_host_reconciliation_id_isSet = false;
    m_host_reconciliation_id_isValid = false;

    m_loyalty_acquirer_id_isSet = false;
    m_loyalty_acquirer_id_isValid = false;

    m_loyalty_transaction_id_isSet = false;
    m_loyalty_transaction_id_isValid = false;
}

void OAILoyaltyAcquirerData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyAcquirerData::fromJsonObject(QJsonObject json) {

    m_approval_code_isValid = ::OpenAPI::fromJsonValue(m_approval_code, json[QString("ApprovalCode")]);
    m_approval_code_isSet = !json[QString("ApprovalCode")].isNull() && m_approval_code_isValid;

    m_host_reconciliation_id_isValid = ::OpenAPI::fromJsonValue(m_host_reconciliation_id, json[QString("HostReconciliationID")]);
    m_host_reconciliation_id_isSet = !json[QString("HostReconciliationID")].isNull() && m_host_reconciliation_id_isValid;

    m_loyalty_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_acquirer_id, json[QString("LoyaltyAcquirerID")]);
    m_loyalty_acquirer_id_isSet = !json[QString("LoyaltyAcquirerID")].isNull() && m_loyalty_acquirer_id_isValid;

    m_loyalty_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_loyalty_transaction_id, json[QString("LoyaltyTransactionID")]);
    m_loyalty_transaction_id_isSet = !json[QString("LoyaltyTransactionID")].isNull() && m_loyalty_transaction_id_isValid;
}

QString OAILoyaltyAcquirerData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyAcquirerData::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_code_isSet) {
        obj.insert(QString("ApprovalCode"), ::OpenAPI::toJsonValue(m_approval_code));
    }
    if (m_host_reconciliation_id_isSet) {
        obj.insert(QString("HostReconciliationID"), ::OpenAPI::toJsonValue(m_host_reconciliation_id));
    }
    if (m_loyalty_acquirer_id_isSet) {
        obj.insert(QString("LoyaltyAcquirerID"), ::OpenAPI::toJsonValue(m_loyalty_acquirer_id));
    }
    if (m_loyalty_transaction_id.isSet()) {
        obj.insert(QString("LoyaltyTransactionID"), ::OpenAPI::toJsonValue(m_loyalty_transaction_id));
    }
    return obj;
}

QString OAILoyaltyAcquirerData::getApprovalCode() const {
    return m_approval_code;
}
void OAILoyaltyAcquirerData::setApprovalCode(const QString &approval_code) {
    m_approval_code = approval_code;
    m_approval_code_isSet = true;
}

bool OAILoyaltyAcquirerData::is_approval_code_Set() const{
    return m_approval_code_isSet;
}

bool OAILoyaltyAcquirerData::is_approval_code_Valid() const{
    return m_approval_code_isValid;
}

QString OAILoyaltyAcquirerData::getHostReconciliationId() const {
    return m_host_reconciliation_id;
}
void OAILoyaltyAcquirerData::setHostReconciliationId(const QString &host_reconciliation_id) {
    m_host_reconciliation_id = host_reconciliation_id;
    m_host_reconciliation_id_isSet = true;
}

bool OAILoyaltyAcquirerData::is_host_reconciliation_id_Set() const{
    return m_host_reconciliation_id_isSet;
}

bool OAILoyaltyAcquirerData::is_host_reconciliation_id_Valid() const{
    return m_host_reconciliation_id_isValid;
}

QString OAILoyaltyAcquirerData::getLoyaltyAcquirerId() const {
    return m_loyalty_acquirer_id;
}
void OAILoyaltyAcquirerData::setLoyaltyAcquirerId(const QString &loyalty_acquirer_id) {
    m_loyalty_acquirer_id = loyalty_acquirer_id;
    m_loyalty_acquirer_id_isSet = true;
}

bool OAILoyaltyAcquirerData::is_loyalty_acquirer_id_Set() const{
    return m_loyalty_acquirer_id_isSet;
}

bool OAILoyaltyAcquirerData::is_loyalty_acquirer_id_Valid() const{
    return m_loyalty_acquirer_id_isValid;
}

OAITransactionIDType OAILoyaltyAcquirerData::getLoyaltyTransactionId() const {
    return m_loyalty_transaction_id;
}
void OAILoyaltyAcquirerData::setLoyaltyTransactionId(const OAITransactionIDType &loyalty_transaction_id) {
    m_loyalty_transaction_id = loyalty_transaction_id;
    m_loyalty_transaction_id_isSet = true;
}

bool OAILoyaltyAcquirerData::is_loyalty_transaction_id_Set() const{
    return m_loyalty_transaction_id_isSet;
}

bool OAILoyaltyAcquirerData::is_loyalty_transaction_id_Valid() const{
    return m_loyalty_transaction_id_isValid;
}

bool OAILoyaltyAcquirerData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_reconciliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyAcquirerData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
