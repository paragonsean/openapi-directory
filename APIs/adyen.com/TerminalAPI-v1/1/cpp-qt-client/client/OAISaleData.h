/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISaleData.h
 *
 * Data associated to the Sale System, with a particular value during the processing of the payment by the POI, including the cards acquisition. Data related to the Sale System.
 */

#ifndef OAISaleData_H
#define OAISaleData_H

#include <QJsonObject>

#include "OAISaleTerminalData.h"
#include "OAISaleToIssuerData.h"
#include "OAITokenRequestedType.h"
#include "OAITransactionIDType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISaleTerminalData;
class OAISaleToIssuerData;
class OAITransactionIDType;

class OAISaleData : public OAIObject {
public:
    OAISaleData();
    OAISaleData(QString json);
    ~OAISaleData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCustomerOrderId() const;
    void setCustomerOrderId(const QString &customer_order_id);
    bool is_customer_order_id_Set() const;
    bool is_customer_order_id_Valid() const;

    QList<QString> getCustomerOrderReq() const;
    void setCustomerOrderReq(const QList<QString> &customer_order_req);
    bool is_customer_order_req_Set() const;
    bool is_customer_order_req_Valid() const;

    QString getOperatorId() const;
    void setOperatorId(const QString &operator_id);
    bool is_operator_id_Set() const;
    bool is_operator_id_Valid() const;

    QString getOperatorLanguage() const;
    void setOperatorLanguage(const QString &operator_language);
    bool is_operator_language_Set() const;
    bool is_operator_language_Valid() const;

    QString getSaleReferenceId() const;
    void setSaleReferenceId(const QString &sale_reference_id);
    bool is_sale_reference_id_Set() const;
    bool is_sale_reference_id_Valid() const;

    OAISaleTerminalData getSaleTerminalData() const;
    void setSaleTerminalData(const OAISaleTerminalData &sale_terminal_data);
    bool is_sale_terminal_data_Set() const;
    bool is_sale_terminal_data_Valid() const;

    QString getSaleToAcquirerData() const;
    void setSaleToAcquirerData(const QString &sale_to_acquirer_data);
    bool is_sale_to_acquirer_data_Set() const;
    bool is_sale_to_acquirer_data_Valid() const;

    OAISaleToIssuerData getSaleToIssuerData() const;
    void setSaleToIssuerData(const OAISaleToIssuerData &sale_to_issuer_data);
    bool is_sale_to_issuer_data_Set() const;
    bool is_sale_to_issuer_data_Valid() const;

    QString getSaleToPoiData() const;
    void setSaleToPoiData(const QString &sale_to_poi_data);
    bool is_sale_to_poi_data_Set() const;
    bool is_sale_to_poi_data_Valid() const;

    OAITransactionIDType getSaleTransactionId() const;
    void setSaleTransactionId(const OAITransactionIDType &sale_transaction_id);
    bool is_sale_transaction_id_Set() const;
    bool is_sale_transaction_id_Valid() const;

    QString getShiftNumber() const;
    void setShiftNumber(const QString &shift_number);
    bool is_shift_number_Set() const;
    bool is_shift_number_Valid() const;

    OAITokenRequestedType getTokenRequestedType() const;
    void setTokenRequestedType(const OAITokenRequestedType &token_requested_type);
    bool is_token_requested_type_Set() const;
    bool is_token_requested_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_customer_order_id;
    bool m_customer_order_id_isSet;
    bool m_customer_order_id_isValid;

    QList<QString> m_customer_order_req;
    bool m_customer_order_req_isSet;
    bool m_customer_order_req_isValid;

    QString m_operator_id;
    bool m_operator_id_isSet;
    bool m_operator_id_isValid;

    QString m_operator_language;
    bool m_operator_language_isSet;
    bool m_operator_language_isValid;

    QString m_sale_reference_id;
    bool m_sale_reference_id_isSet;
    bool m_sale_reference_id_isValid;

    OAISaleTerminalData m_sale_terminal_data;
    bool m_sale_terminal_data_isSet;
    bool m_sale_terminal_data_isValid;

    QString m_sale_to_acquirer_data;
    bool m_sale_to_acquirer_data_isSet;
    bool m_sale_to_acquirer_data_isValid;

    OAISaleToIssuerData m_sale_to_issuer_data;
    bool m_sale_to_issuer_data_isSet;
    bool m_sale_to_issuer_data_isValid;

    QString m_sale_to_poi_data;
    bool m_sale_to_poi_data_isSet;
    bool m_sale_to_poi_data_isValid;

    OAITransactionIDType m_sale_transaction_id;
    bool m_sale_transaction_id_isSet;
    bool m_sale_transaction_id_isValid;

    QString m_shift_number;
    bool m_shift_number_isSet;
    bool m_shift_number_isValid;

    OAITokenRequestedType m_token_requested_type;
    bool m_token_requested_type_isSet;
    bool m_token_requested_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISaleData)

#endif // OAISaleData_H
