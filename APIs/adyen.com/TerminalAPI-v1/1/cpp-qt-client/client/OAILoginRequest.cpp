/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginRequest::OAILoginRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginRequest::OAILoginRequest() {
    this->initializeModel();
}

OAILoginRequest::~OAILoginRequest() {}

void OAILoginRequest::initializeModel() {

    m_customer_order_req_isSet = false;
    m_customer_order_req_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_operator_id_isSet = false;
    m_operator_id_isValid = false;

    m_operator_language_isSet = false;
    m_operator_language_isValid = false;

    m_poi_serial_number_isSet = false;
    m_poi_serial_number_isValid = false;

    m_sale_software_isSet = false;
    m_sale_software_isValid = false;

    m_sale_terminal_data_isSet = false;
    m_sale_terminal_data_isValid = false;

    m_shift_number_isSet = false;
    m_shift_number_isValid = false;

    m_token_requested_type_isSet = false;
    m_token_requested_type_isValid = false;

    m_training_mode_flag_isSet = false;
    m_training_mode_flag_isValid = false;
}

void OAILoginRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginRequest::fromJsonObject(QJsonObject json) {

    m_customer_order_req_isValid = ::OpenAPI::fromJsonValue(m_customer_order_req, json[QString("CustomerOrderReq")]);
    m_customer_order_req_isSet = !json[QString("CustomerOrderReq")].isNull() && m_customer_order_req_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_operator_id_isValid = ::OpenAPI::fromJsonValue(m_operator_id, json[QString("OperatorID")]);
    m_operator_id_isSet = !json[QString("OperatorID")].isNull() && m_operator_id_isValid;

    m_operator_language_isValid = ::OpenAPI::fromJsonValue(m_operator_language, json[QString("OperatorLanguage")]);
    m_operator_language_isSet = !json[QString("OperatorLanguage")].isNull() && m_operator_language_isValid;

    m_poi_serial_number_isValid = ::OpenAPI::fromJsonValue(m_poi_serial_number, json[QString("POISerialNumber")]);
    m_poi_serial_number_isSet = !json[QString("POISerialNumber")].isNull() && m_poi_serial_number_isValid;

    m_sale_software_isValid = ::OpenAPI::fromJsonValue(m_sale_software, json[QString("SaleSoftware")]);
    m_sale_software_isSet = !json[QString("SaleSoftware")].isNull() && m_sale_software_isValid;

    m_sale_terminal_data_isValid = ::OpenAPI::fromJsonValue(m_sale_terminal_data, json[QString("SaleTerminalData")]);
    m_sale_terminal_data_isSet = !json[QString("SaleTerminalData")].isNull() && m_sale_terminal_data_isValid;

    m_shift_number_isValid = ::OpenAPI::fromJsonValue(m_shift_number, json[QString("ShiftNumber")]);
    m_shift_number_isSet = !json[QString("ShiftNumber")].isNull() && m_shift_number_isValid;

    m_token_requested_type_isValid = ::OpenAPI::fromJsonValue(m_token_requested_type, json[QString("TokenRequestedType")]);
    m_token_requested_type_isSet = !json[QString("TokenRequestedType")].isNull() && m_token_requested_type_isValid;

    m_training_mode_flag_isValid = ::OpenAPI::fromJsonValue(m_training_mode_flag, json[QString("TrainingModeFlag")]);
    m_training_mode_flag_isSet = !json[QString("TrainingModeFlag")].isNull() && m_training_mode_flag_isValid;
}

QString OAILoginRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order_req.size() > 0) {
        obj.insert(QString("CustomerOrderReq"), ::OpenAPI::toJsonValue(m_customer_order_req));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_operator_id_isSet) {
        obj.insert(QString("OperatorID"), ::OpenAPI::toJsonValue(m_operator_id));
    }
    if (m_operator_language_isSet) {
        obj.insert(QString("OperatorLanguage"), ::OpenAPI::toJsonValue(m_operator_language));
    }
    if (m_poi_serial_number_isSet) {
        obj.insert(QString("POISerialNumber"), ::OpenAPI::toJsonValue(m_poi_serial_number));
    }
    if (m_sale_software.isSet()) {
        obj.insert(QString("SaleSoftware"), ::OpenAPI::toJsonValue(m_sale_software));
    }
    if (m_sale_terminal_data.isSet()) {
        obj.insert(QString("SaleTerminalData"), ::OpenAPI::toJsonValue(m_sale_terminal_data));
    }
    if (m_shift_number_isSet) {
        obj.insert(QString("ShiftNumber"), ::OpenAPI::toJsonValue(m_shift_number));
    }
    if (m_token_requested_type.isSet()) {
        obj.insert(QString("TokenRequestedType"), ::OpenAPI::toJsonValue(m_token_requested_type));
    }
    if (m_training_mode_flag_isSet) {
        obj.insert(QString("TrainingModeFlag"), ::OpenAPI::toJsonValue(m_training_mode_flag));
    }
    return obj;
}

QList<QString> OAILoginRequest::getCustomerOrderReq() const {
    return m_customer_order_req;
}
void OAILoginRequest::setCustomerOrderReq(const QList<QString> &customer_order_req) {
    m_customer_order_req = customer_order_req;
    m_customer_order_req_isSet = true;
}

bool OAILoginRequest::is_customer_order_req_Set() const{
    return m_customer_order_req_isSet;
}

bool OAILoginRequest::is_customer_order_req_Valid() const{
    return m_customer_order_req_isValid;
}

QDateTime OAILoginRequest::getDateTime() const {
    return m_date_time;
}
void OAILoginRequest::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAILoginRequest::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAILoginRequest::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAILoginRequest::getOperatorId() const {
    return m_operator_id;
}
void OAILoginRequest::setOperatorId(const QString &operator_id) {
    m_operator_id = operator_id;
    m_operator_id_isSet = true;
}

bool OAILoginRequest::is_operator_id_Set() const{
    return m_operator_id_isSet;
}

bool OAILoginRequest::is_operator_id_Valid() const{
    return m_operator_id_isValid;
}

QString OAILoginRequest::getOperatorLanguage() const {
    return m_operator_language;
}
void OAILoginRequest::setOperatorLanguage(const QString &operator_language) {
    m_operator_language = operator_language;
    m_operator_language_isSet = true;
}

bool OAILoginRequest::is_operator_language_Set() const{
    return m_operator_language_isSet;
}

bool OAILoginRequest::is_operator_language_Valid() const{
    return m_operator_language_isValid;
}

QString OAILoginRequest::getPoiSerialNumber() const {
    return m_poi_serial_number;
}
void OAILoginRequest::setPoiSerialNumber(const QString &poi_serial_number) {
    m_poi_serial_number = poi_serial_number;
    m_poi_serial_number_isSet = true;
}

bool OAILoginRequest::is_poi_serial_number_Set() const{
    return m_poi_serial_number_isSet;
}

bool OAILoginRequest::is_poi_serial_number_Valid() const{
    return m_poi_serial_number_isValid;
}

OAISaleSoftware OAILoginRequest::getSaleSoftware() const {
    return m_sale_software;
}
void OAILoginRequest::setSaleSoftware(const OAISaleSoftware &sale_software) {
    m_sale_software = sale_software;
    m_sale_software_isSet = true;
}

bool OAILoginRequest::is_sale_software_Set() const{
    return m_sale_software_isSet;
}

bool OAILoginRequest::is_sale_software_Valid() const{
    return m_sale_software_isValid;
}

OAISaleTerminalData OAILoginRequest::getSaleTerminalData() const {
    return m_sale_terminal_data;
}
void OAILoginRequest::setSaleTerminalData(const OAISaleTerminalData &sale_terminal_data) {
    m_sale_terminal_data = sale_terminal_data;
    m_sale_terminal_data_isSet = true;
}

bool OAILoginRequest::is_sale_terminal_data_Set() const{
    return m_sale_terminal_data_isSet;
}

bool OAILoginRequest::is_sale_terminal_data_Valid() const{
    return m_sale_terminal_data_isValid;
}

QString OAILoginRequest::getShiftNumber() const {
    return m_shift_number;
}
void OAILoginRequest::setShiftNumber(const QString &shift_number) {
    m_shift_number = shift_number;
    m_shift_number_isSet = true;
}

bool OAILoginRequest::is_shift_number_Set() const{
    return m_shift_number_isSet;
}

bool OAILoginRequest::is_shift_number_Valid() const{
    return m_shift_number_isValid;
}

OAITokenRequestedType OAILoginRequest::getTokenRequestedType() const {
    return m_token_requested_type;
}
void OAILoginRequest::setTokenRequestedType(const OAITokenRequestedType &token_requested_type) {
    m_token_requested_type = token_requested_type;
    m_token_requested_type_isSet = true;
}

bool OAILoginRequest::is_token_requested_type_Set() const{
    return m_token_requested_type_isSet;
}

bool OAILoginRequest::is_token_requested_type_Valid() const{
    return m_token_requested_type_isValid;
}

bool OAILoginRequest::isTrainingModeFlag() const {
    return m_training_mode_flag;
}
void OAILoginRequest::setTrainingModeFlag(const bool &training_mode_flag) {
    m_training_mode_flag = training_mode_flag;
    m_training_mode_flag_isSet = true;
}

bool OAILoginRequest::is_training_mode_flag_Set() const{
    return m_training_mode_flag_isSet;
}

bool OAILoginRequest::is_training_mode_flag_Valid() const{
    return m_training_mode_flag_isValid;
}

bool OAILoginRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order_req.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_software.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_terminal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requested_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_mode_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_time_isValid && m_operator_language_isValid && m_sale_software_isValid && true;
}

} // namespace OpenAPI
