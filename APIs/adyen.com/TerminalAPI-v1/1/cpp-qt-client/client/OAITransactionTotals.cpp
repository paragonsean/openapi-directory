/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionTotals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionTotals::OAITransactionTotals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionTotals::OAITransactionTotals() {
    this->initializeModel();
}

OAITransactionTotals::~OAITransactionTotals() {}

void OAITransactionTotals::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_card_brand_isSet = false;
    m_card_brand_isValid = false;

    m_host_reconciliation_id_isSet = false;
    m_host_reconciliation_id_isValid = false;

    m_loyalty_currency_isSet = false;
    m_loyalty_currency_isValid = false;

    m_loyalty_totals_isSet = false;
    m_loyalty_totals_isValid = false;

    m_loyalty_unit_isSet = false;
    m_loyalty_unit_isValid = false;

    m_operator_id_isSet = false;
    m_operator_id_isValid = false;

    m_poiid_isSet = false;
    m_poiid_isValid = false;

    m_payment_currency_isSet = false;
    m_payment_currency_isValid = false;

    m_payment_instrument_type_isSet = false;
    m_payment_instrument_type_isValid = false;

    m_payment_totals_isSet = false;
    m_payment_totals_isValid = false;

    m_sale_id_isSet = false;
    m_sale_id_isValid = false;

    m_shift_number_isSet = false;
    m_shift_number_isValid = false;

    m_totals_group_id_isSet = false;
    m_totals_group_id_isValid = false;
}

void OAITransactionTotals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionTotals::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_card_brand_isValid = ::OpenAPI::fromJsonValue(m_card_brand, json[QString("CardBrand")]);
    m_card_brand_isSet = !json[QString("CardBrand")].isNull() && m_card_brand_isValid;

    m_host_reconciliation_id_isValid = ::OpenAPI::fromJsonValue(m_host_reconciliation_id, json[QString("HostReconciliationID")]);
    m_host_reconciliation_id_isSet = !json[QString("HostReconciliationID")].isNull() && m_host_reconciliation_id_isValid;

    m_loyalty_currency_isValid = ::OpenAPI::fromJsonValue(m_loyalty_currency, json[QString("LoyaltyCurrency")]);
    m_loyalty_currency_isSet = !json[QString("LoyaltyCurrency")].isNull() && m_loyalty_currency_isValid;

    m_loyalty_totals_isValid = ::OpenAPI::fromJsonValue(m_loyalty_totals, json[QString("LoyaltyTotals")]);
    m_loyalty_totals_isSet = !json[QString("LoyaltyTotals")].isNull() && m_loyalty_totals_isValid;

    m_loyalty_unit_isValid = ::OpenAPI::fromJsonValue(m_loyalty_unit, json[QString("LoyaltyUnit")]);
    m_loyalty_unit_isSet = !json[QString("LoyaltyUnit")].isNull() && m_loyalty_unit_isValid;

    m_operator_id_isValid = ::OpenAPI::fromJsonValue(m_operator_id, json[QString("OperatorID")]);
    m_operator_id_isSet = !json[QString("OperatorID")].isNull() && m_operator_id_isValid;

    m_poiid_isValid = ::OpenAPI::fromJsonValue(m_poiid, json[QString("POIID")]);
    m_poiid_isSet = !json[QString("POIID")].isNull() && m_poiid_isValid;

    m_payment_currency_isValid = ::OpenAPI::fromJsonValue(m_payment_currency, json[QString("PaymentCurrency")]);
    m_payment_currency_isSet = !json[QString("PaymentCurrency")].isNull() && m_payment_currency_isValid;

    m_payment_instrument_type_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_type, json[QString("PaymentInstrumentType")]);
    m_payment_instrument_type_isSet = !json[QString("PaymentInstrumentType")].isNull() && m_payment_instrument_type_isValid;

    m_payment_totals_isValid = ::OpenAPI::fromJsonValue(m_payment_totals, json[QString("PaymentTotals")]);
    m_payment_totals_isSet = !json[QString("PaymentTotals")].isNull() && m_payment_totals_isValid;

    m_sale_id_isValid = ::OpenAPI::fromJsonValue(m_sale_id, json[QString("SaleID")]);
    m_sale_id_isSet = !json[QString("SaleID")].isNull() && m_sale_id_isValid;

    m_shift_number_isValid = ::OpenAPI::fromJsonValue(m_shift_number, json[QString("ShiftNumber")]);
    m_shift_number_isSet = !json[QString("ShiftNumber")].isNull() && m_shift_number_isValid;

    m_totals_group_id_isValid = ::OpenAPI::fromJsonValue(m_totals_group_id, json[QString("TotalsGroupID")]);
    m_totals_group_id_isSet = !json[QString("TotalsGroupID")].isNull() && m_totals_group_id_isValid;
}

QString OAITransactionTotals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionTotals::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id_isSet) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_card_brand_isSet) {
        obj.insert(QString("CardBrand"), ::OpenAPI::toJsonValue(m_card_brand));
    }
    if (m_host_reconciliation_id_isSet) {
        obj.insert(QString("HostReconciliationID"), ::OpenAPI::toJsonValue(m_host_reconciliation_id));
    }
    if (m_loyalty_currency_isSet) {
        obj.insert(QString("LoyaltyCurrency"), ::OpenAPI::toJsonValue(m_loyalty_currency));
    }
    if (m_loyalty_totals.size() > 0) {
        obj.insert(QString("LoyaltyTotals"), ::OpenAPI::toJsonValue(m_loyalty_totals));
    }
    if (m_loyalty_unit.isSet()) {
        obj.insert(QString("LoyaltyUnit"), ::OpenAPI::toJsonValue(m_loyalty_unit));
    }
    if (m_operator_id_isSet) {
        obj.insert(QString("OperatorID"), ::OpenAPI::toJsonValue(m_operator_id));
    }
    if (m_poiid_isSet) {
        obj.insert(QString("POIID"), ::OpenAPI::toJsonValue(m_poiid));
    }
    if (m_payment_currency_isSet) {
        obj.insert(QString("PaymentCurrency"), ::OpenAPI::toJsonValue(m_payment_currency));
    }
    if (m_payment_instrument_type.isSet()) {
        obj.insert(QString("PaymentInstrumentType"), ::OpenAPI::toJsonValue(m_payment_instrument_type));
    }
    if (m_payment_totals.size() > 0) {
        obj.insert(QString("PaymentTotals"), ::OpenAPI::toJsonValue(m_payment_totals));
    }
    if (m_sale_id_isSet) {
        obj.insert(QString("SaleID"), ::OpenAPI::toJsonValue(m_sale_id));
    }
    if (m_shift_number_isSet) {
        obj.insert(QString("ShiftNumber"), ::OpenAPI::toJsonValue(m_shift_number));
    }
    if (m_totals_group_id_isSet) {
        obj.insert(QString("TotalsGroupID"), ::OpenAPI::toJsonValue(m_totals_group_id));
    }
    return obj;
}

qint32 OAITransactionTotals::getAcquirerId() const {
    return m_acquirer_id;
}
void OAITransactionTotals::setAcquirerId(const qint32 &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAITransactionTotals::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAITransactionTotals::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

QString OAITransactionTotals::getCardBrand() const {
    return m_card_brand;
}
void OAITransactionTotals::setCardBrand(const QString &card_brand) {
    m_card_brand = card_brand;
    m_card_brand_isSet = true;
}

bool OAITransactionTotals::is_card_brand_Set() const{
    return m_card_brand_isSet;
}

bool OAITransactionTotals::is_card_brand_Valid() const{
    return m_card_brand_isValid;
}

QString OAITransactionTotals::getHostReconciliationId() const {
    return m_host_reconciliation_id;
}
void OAITransactionTotals::setHostReconciliationId(const QString &host_reconciliation_id) {
    m_host_reconciliation_id = host_reconciliation_id;
    m_host_reconciliation_id_isSet = true;
}

bool OAITransactionTotals::is_host_reconciliation_id_Set() const{
    return m_host_reconciliation_id_isSet;
}

bool OAITransactionTotals::is_host_reconciliation_id_Valid() const{
    return m_host_reconciliation_id_isValid;
}

QString OAITransactionTotals::getLoyaltyCurrency() const {
    return m_loyalty_currency;
}
void OAITransactionTotals::setLoyaltyCurrency(const QString &loyalty_currency) {
    m_loyalty_currency = loyalty_currency;
    m_loyalty_currency_isSet = true;
}

bool OAITransactionTotals::is_loyalty_currency_Set() const{
    return m_loyalty_currency_isSet;
}

bool OAITransactionTotals::is_loyalty_currency_Valid() const{
    return m_loyalty_currency_isValid;
}

QList<OAILoyaltyTotals> OAITransactionTotals::getLoyaltyTotals() const {
    return m_loyalty_totals;
}
void OAITransactionTotals::setLoyaltyTotals(const QList<OAILoyaltyTotals> &loyalty_totals) {
    m_loyalty_totals = loyalty_totals;
    m_loyalty_totals_isSet = true;
}

bool OAITransactionTotals::is_loyalty_totals_Set() const{
    return m_loyalty_totals_isSet;
}

bool OAITransactionTotals::is_loyalty_totals_Valid() const{
    return m_loyalty_totals_isValid;
}

OAILoyaltyUnit OAITransactionTotals::getLoyaltyUnit() const {
    return m_loyalty_unit;
}
void OAITransactionTotals::setLoyaltyUnit(const OAILoyaltyUnit &loyalty_unit) {
    m_loyalty_unit = loyalty_unit;
    m_loyalty_unit_isSet = true;
}

bool OAITransactionTotals::is_loyalty_unit_Set() const{
    return m_loyalty_unit_isSet;
}

bool OAITransactionTotals::is_loyalty_unit_Valid() const{
    return m_loyalty_unit_isValid;
}

QString OAITransactionTotals::getOperatorId() const {
    return m_operator_id;
}
void OAITransactionTotals::setOperatorId(const QString &operator_id) {
    m_operator_id = operator_id;
    m_operator_id_isSet = true;
}

bool OAITransactionTotals::is_operator_id_Set() const{
    return m_operator_id_isSet;
}

bool OAITransactionTotals::is_operator_id_Valid() const{
    return m_operator_id_isValid;
}

QString OAITransactionTotals::getPoiid() const {
    return m_poiid;
}
void OAITransactionTotals::setPoiid(const QString &poiid) {
    m_poiid = poiid;
    m_poiid_isSet = true;
}

bool OAITransactionTotals::is_poiid_Set() const{
    return m_poiid_isSet;
}

bool OAITransactionTotals::is_poiid_Valid() const{
    return m_poiid_isValid;
}

QString OAITransactionTotals::getPaymentCurrency() const {
    return m_payment_currency;
}
void OAITransactionTotals::setPaymentCurrency(const QString &payment_currency) {
    m_payment_currency = payment_currency;
    m_payment_currency_isSet = true;
}

bool OAITransactionTotals::is_payment_currency_Set() const{
    return m_payment_currency_isSet;
}

bool OAITransactionTotals::is_payment_currency_Valid() const{
    return m_payment_currency_isValid;
}

OAIPaymentInstrumentType OAITransactionTotals::getPaymentInstrumentType() const {
    return m_payment_instrument_type;
}
void OAITransactionTotals::setPaymentInstrumentType(const OAIPaymentInstrumentType &payment_instrument_type) {
    m_payment_instrument_type = payment_instrument_type;
    m_payment_instrument_type_isSet = true;
}

bool OAITransactionTotals::is_payment_instrument_type_Set() const{
    return m_payment_instrument_type_isSet;
}

bool OAITransactionTotals::is_payment_instrument_type_Valid() const{
    return m_payment_instrument_type_isValid;
}

QList<OAIPaymentTotals> OAITransactionTotals::getPaymentTotals() const {
    return m_payment_totals;
}
void OAITransactionTotals::setPaymentTotals(const QList<OAIPaymentTotals> &payment_totals) {
    m_payment_totals = payment_totals;
    m_payment_totals_isSet = true;
}

bool OAITransactionTotals::is_payment_totals_Set() const{
    return m_payment_totals_isSet;
}

bool OAITransactionTotals::is_payment_totals_Valid() const{
    return m_payment_totals_isValid;
}

QString OAITransactionTotals::getSaleId() const {
    return m_sale_id;
}
void OAITransactionTotals::setSaleId(const QString &sale_id) {
    m_sale_id = sale_id;
    m_sale_id_isSet = true;
}

bool OAITransactionTotals::is_sale_id_Set() const{
    return m_sale_id_isSet;
}

bool OAITransactionTotals::is_sale_id_Valid() const{
    return m_sale_id_isValid;
}

QString OAITransactionTotals::getShiftNumber() const {
    return m_shift_number;
}
void OAITransactionTotals::setShiftNumber(const QString &shift_number) {
    m_shift_number = shift_number;
    m_shift_number_isSet = true;
}

bool OAITransactionTotals::is_shift_number_Set() const{
    return m_shift_number_isSet;
}

bool OAITransactionTotals::is_shift_number_Valid() const{
    return m_shift_number_isValid;
}

QString OAITransactionTotals::getTotalsGroupId() const {
    return m_totals_group_id;
}
void OAITransactionTotals::setTotalsGroupId(const QString &totals_group_id) {
    m_totals_group_id = totals_group_id;
    m_totals_group_id_isSet = true;
}

bool OAITransactionTotals::is_totals_group_id_Set() const{
    return m_totals_group_id_isSet;
}

bool OAITransactionTotals::is_totals_group_id_Valid() const{
    return m_totals_group_id_isValid;
}

bool OAITransactionTotals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_brand_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_reconciliation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_unit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poiid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_totals.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionTotals::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_payment_instrument_type_isValid && true;
}

} // namespace OpenAPI
