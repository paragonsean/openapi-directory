/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyResult::OAILoyaltyResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyResult::OAILoyaltyResult() {
    this->initializeModel();
}

OAILoyaltyResult::~OAILoyaltyResult() {}

void OAILoyaltyResult::initializeModel() {

    m_current_balance_isSet = false;
    m_current_balance_isValid = false;

    m_loyalty_account_isSet = false;
    m_loyalty_account_isValid = false;

    m_loyalty_acquirer_data_isSet = false;
    m_loyalty_acquirer_data_isValid = false;

    m_loyalty_amount_isSet = false;
    m_loyalty_amount_isValid = false;

    m_rebates_isSet = false;
    m_rebates_isValid = false;
}

void OAILoyaltyResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyResult::fromJsonObject(QJsonObject json) {

    m_current_balance_isValid = ::OpenAPI::fromJsonValue(m_current_balance, json[QString("CurrentBalance")]);
    m_current_balance_isSet = !json[QString("CurrentBalance")].isNull() && m_current_balance_isValid;

    m_loyalty_account_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account, json[QString("LoyaltyAccount")]);
    m_loyalty_account_isSet = !json[QString("LoyaltyAccount")].isNull() && m_loyalty_account_isValid;

    m_loyalty_acquirer_data_isValid = ::OpenAPI::fromJsonValue(m_loyalty_acquirer_data, json[QString("LoyaltyAcquirerData")]);
    m_loyalty_acquirer_data_isSet = !json[QString("LoyaltyAcquirerData")].isNull() && m_loyalty_acquirer_data_isValid;

    m_loyalty_amount_isValid = ::OpenAPI::fromJsonValue(m_loyalty_amount, json[QString("LoyaltyAmount")]);
    m_loyalty_amount_isSet = !json[QString("LoyaltyAmount")].isNull() && m_loyalty_amount_isValid;

    m_rebates_isValid = ::OpenAPI::fromJsonValue(m_rebates, json[QString("Rebates")]);
    m_rebates_isSet = !json[QString("Rebates")].isNull() && m_rebates_isValid;
}

QString OAILoyaltyResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyResult::asJsonObject() const {
    QJsonObject obj;
    if (m_current_balance_isSet) {
        obj.insert(QString("CurrentBalance"), ::OpenAPI::toJsonValue(m_current_balance));
    }
    if (m_loyalty_account.isSet()) {
        obj.insert(QString("LoyaltyAccount"), ::OpenAPI::toJsonValue(m_loyalty_account));
    }
    if (m_loyalty_acquirer_data.isSet()) {
        obj.insert(QString("LoyaltyAcquirerData"), ::OpenAPI::toJsonValue(m_loyalty_acquirer_data));
    }
    if (m_loyalty_amount.isSet()) {
        obj.insert(QString("LoyaltyAmount"), ::OpenAPI::toJsonValue(m_loyalty_amount));
    }
    if (m_rebates.isSet()) {
        obj.insert(QString("Rebates"), ::OpenAPI::toJsonValue(m_rebates));
    }
    return obj;
}

double OAILoyaltyResult::getCurrentBalance() const {
    return m_current_balance;
}
void OAILoyaltyResult::setCurrentBalance(const double &current_balance) {
    m_current_balance = current_balance;
    m_current_balance_isSet = true;
}

bool OAILoyaltyResult::is_current_balance_Set() const{
    return m_current_balance_isSet;
}

bool OAILoyaltyResult::is_current_balance_Valid() const{
    return m_current_balance_isValid;
}

OAILoyaltyAccount OAILoyaltyResult::getLoyaltyAccount() const {
    return m_loyalty_account;
}
void OAILoyaltyResult::setLoyaltyAccount(const OAILoyaltyAccount &loyalty_account) {
    m_loyalty_account = loyalty_account;
    m_loyalty_account_isSet = true;
}

bool OAILoyaltyResult::is_loyalty_account_Set() const{
    return m_loyalty_account_isSet;
}

bool OAILoyaltyResult::is_loyalty_account_Valid() const{
    return m_loyalty_account_isValid;
}

OAILoyaltyAcquirerData OAILoyaltyResult::getLoyaltyAcquirerData() const {
    return m_loyalty_acquirer_data;
}
void OAILoyaltyResult::setLoyaltyAcquirerData(const OAILoyaltyAcquirerData &loyalty_acquirer_data) {
    m_loyalty_acquirer_data = loyalty_acquirer_data;
    m_loyalty_acquirer_data_isSet = true;
}

bool OAILoyaltyResult::is_loyalty_acquirer_data_Set() const{
    return m_loyalty_acquirer_data_isSet;
}

bool OAILoyaltyResult::is_loyalty_acquirer_data_Valid() const{
    return m_loyalty_acquirer_data_isValid;
}

OAILoyaltyAmount OAILoyaltyResult::getLoyaltyAmount() const {
    return m_loyalty_amount;
}
void OAILoyaltyResult::setLoyaltyAmount(const OAILoyaltyAmount &loyalty_amount) {
    m_loyalty_amount = loyalty_amount;
    m_loyalty_amount_isSet = true;
}

bool OAILoyaltyResult::is_loyalty_amount_Set() const{
    return m_loyalty_amount_isSet;
}

bool OAILoyaltyResult::is_loyalty_amount_Valid() const{
    return m_loyalty_amount_isValid;
}

OAIRebates OAILoyaltyResult::getRebates() const {
    return m_rebates;
}
void OAILoyaltyResult::setRebates(const OAIRebates &rebates) {
    m_rebates = rebates;
    m_rebates_isSet = true;
}

bool OAILoyaltyResult::is_rebates_Set() const{
    return m_rebates_isSet;
}

bool OAILoyaltyResult::is_rebates_Valid() const{
    return m_rebates_isValid;
}

bool OAILoyaltyResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_balance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_account.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_acquirer_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_amount.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebates.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_account_isValid && true;
}

} // namespace OpenAPI
