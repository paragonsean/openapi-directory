/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOriginalPOITransaction.h
 *
 * In the Payment or the Loyalty Request message, it allows using the card of a previous CardAcquisition or Payment/Loyalty request. Identification of a previous POI transaction.
 */

#ifndef OAIOriginalPOITransaction_H
#define OAIOriginalPOITransaction_H

#include <QJsonObject>

#include "OAITransactionIDType.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITransactionIDType;

class OAIOriginalPOITransaction : public OAIObject {
public:
    OAIOriginalPOITransaction();
    OAIOriginalPOITransaction(QString json);
    ~OAIOriginalPOITransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAcquirerId() const;
    void setAcquirerId(const qint32 &acquirer_id);
    bool is_acquirer_id_Set() const;
    bool is_acquirer_id_Valid() const;

    double getAmountValue() const;
    void setAmountValue(const double &amount_value);
    bool is_amount_value_Set() const;
    bool is_amount_value_Valid() const;

    QString getApprovalCode() const;
    void setApprovalCode(const QString &approval_code);
    bool is_approval_code_Set() const;
    bool is_approval_code_Valid() const;

    QString getCustomerLanguage() const;
    void setCustomerLanguage(const QString &customer_language);
    bool is_customer_language_Set() const;
    bool is_customer_language_Valid() const;

    OAITransactionIDType getHostTransactionId() const;
    void setHostTransactionId(const OAITransactionIDType &host_transaction_id);
    bool is_host_transaction_id_Set() const;
    bool is_host_transaction_id_Valid() const;

    QString getPoiid() const;
    void setPoiid(const QString &poiid);
    bool is_poiid_Set() const;
    bool is_poiid_Valid() const;

    OAITransactionIDType getPoiTransactionId() const;
    void setPoiTransactionId(const OAITransactionIDType &poi_transaction_id);
    bool is_poi_transaction_id_Set() const;
    bool is_poi_transaction_id_Valid() const;

    bool isReuseCardDataFlag() const;
    void setReuseCardDataFlag(const bool &reuse_card_data_flag);
    bool is_reuse_card_data_flag_Set() const;
    bool is_reuse_card_data_flag_Valid() const;

    QString getSaleId() const;
    void setSaleId(const QString &sale_id);
    bool is_sale_id_Set() const;
    bool is_sale_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_acquirer_id;
    bool m_acquirer_id_isSet;
    bool m_acquirer_id_isValid;

    double m_amount_value;
    bool m_amount_value_isSet;
    bool m_amount_value_isValid;

    QString m_approval_code;
    bool m_approval_code_isSet;
    bool m_approval_code_isValid;

    QString m_customer_language;
    bool m_customer_language_isSet;
    bool m_customer_language_isValid;

    OAITransactionIDType m_host_transaction_id;
    bool m_host_transaction_id_isSet;
    bool m_host_transaction_id_isValid;

    QString m_poiid;
    bool m_poiid_isSet;
    bool m_poiid_isValid;

    OAITransactionIDType m_poi_transaction_id;
    bool m_poi_transaction_id_isSet;
    bool m_poi_transaction_id_isValid;

    bool m_reuse_card_data_flag;
    bool m_reuse_card_data_flag_isSet;
    bool m_reuse_card_data_flag_isValid;

    QString m_sale_id;
    bool m_sale_id_isSet;
    bool m_sale_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOriginalPOITransaction)

#endif // OAIOriginalPOITransaction_H
