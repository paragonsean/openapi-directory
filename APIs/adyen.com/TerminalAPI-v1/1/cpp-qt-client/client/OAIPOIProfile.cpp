/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPOIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPOIProfile::OAIPOIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPOIProfile::OAIPOIProfile() {
    this->initializeModel();
}

OAIPOIProfile::~OAIPOIProfile() {}

void OAIPOIProfile::initializeModel() {

    m_generic_profile_isSet = false;
    m_generic_profile_isValid = false;

    m_service_profiles_isSet = false;
    m_service_profiles_isValid = false;
}

void OAIPOIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPOIProfile::fromJsonObject(QJsonObject json) {

    m_generic_profile_isValid = ::OpenAPI::fromJsonValue(m_generic_profile, json[QString("GenericProfile")]);
    m_generic_profile_isSet = !json[QString("GenericProfile")].isNull() && m_generic_profile_isValid;

    m_service_profiles_isValid = ::OpenAPI::fromJsonValue(m_service_profiles, json[QString("ServiceProfiles")]);
    m_service_profiles_isSet = !json[QString("ServiceProfiles")].isNull() && m_service_profiles_isValid;
}

QString OAIPOIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPOIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_generic_profile.isSet()) {
        obj.insert(QString("GenericProfile"), ::OpenAPI::toJsonValue(m_generic_profile));
    }
    if (m_service_profiles.size() > 0) {
        obj.insert(QString("ServiceProfiles"), ::OpenAPI::toJsonValue(m_service_profiles));
    }
    return obj;
}

OAIGenericProfile OAIPOIProfile::getGenericProfile() const {
    return m_generic_profile;
}
void OAIPOIProfile::setGenericProfile(const OAIGenericProfile &generic_profile) {
    m_generic_profile = generic_profile;
    m_generic_profile_isSet = true;
}

bool OAIPOIProfile::is_generic_profile_Set() const{
    return m_generic_profile_isSet;
}

bool OAIPOIProfile::is_generic_profile_Valid() const{
    return m_generic_profile_isValid;
}

QList<QString> OAIPOIProfile::getServiceProfiles() const {
    return m_service_profiles;
}
void OAIPOIProfile::setServiceProfiles(const QList<QString> &service_profiles) {
    m_service_profiles = service_profiles;
    m_service_profiles_isSet = true;
}

bool OAIPOIProfile::is_service_profiles_Set() const{
    return m_service_profiles_isSet;
}

bool OAIPOIProfile::is_service_profiles_Valid() const{
    return m_service_profiles_isValid;
}

bool OAIPOIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_generic_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_profiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPOIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
