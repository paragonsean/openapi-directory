/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginResponse::OAILoginResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginResponse::OAILoginResponse() {
    this->initializeModel();
}

OAILoginResponse::~OAILoginResponse() {}

void OAILoginResponse::initializeModel() {

    m_customer_order_status_isSet = false;
    m_customer_order_status_isValid = false;

    m_poi_system_data_isSet = false;
    m_poi_system_data_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_token_request_status_isSet = false;
    m_token_request_status_isValid = false;
}

void OAILoginResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginResponse::fromJsonObject(QJsonObject json) {

    m_customer_order_status_isValid = ::OpenAPI::fromJsonValue(m_customer_order_status, json[QString("CustomerOrderStatus")]);
    m_customer_order_status_isSet = !json[QString("CustomerOrderStatus")].isNull() && m_customer_order_status_isValid;

    m_poi_system_data_isValid = ::OpenAPI::fromJsonValue(m_poi_system_data, json[QString("POISystemData")]);
    m_poi_system_data_isSet = !json[QString("POISystemData")].isNull() && m_poi_system_data_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_token_request_status_isValid = ::OpenAPI::fromJsonValue(m_token_request_status, json[QString("TokenRequestStatus")]);
    m_token_request_status_isSet = !json[QString("TokenRequestStatus")].isNull() && m_token_request_status_isValid;
}

QString OAILoginResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order_status_isSet) {
        obj.insert(QString("CustomerOrderStatus"), ::OpenAPI::toJsonValue(m_customer_order_status));
    }
    if (m_poi_system_data.isSet()) {
        obj.insert(QString("POISystemData"), ::OpenAPI::toJsonValue(m_poi_system_data));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_token_request_status_isSet) {
        obj.insert(QString("TokenRequestStatus"), ::OpenAPI::toJsonValue(m_token_request_status));
    }
    return obj;
}

bool OAILoginResponse::isCustomerOrderStatus() const {
    return m_customer_order_status;
}
void OAILoginResponse::setCustomerOrderStatus(const bool &customer_order_status) {
    m_customer_order_status = customer_order_status;
    m_customer_order_status_isSet = true;
}

bool OAILoginResponse::is_customer_order_status_Set() const{
    return m_customer_order_status_isSet;
}

bool OAILoginResponse::is_customer_order_status_Valid() const{
    return m_customer_order_status_isValid;
}

OAIPOISystemData OAILoginResponse::getPoiSystemData() const {
    return m_poi_system_data;
}
void OAILoginResponse::setPoiSystemData(const OAIPOISystemData &poi_system_data) {
    m_poi_system_data = poi_system_data;
    m_poi_system_data_isSet = true;
}

bool OAILoginResponse::is_poi_system_data_Set() const{
    return m_poi_system_data_isSet;
}

bool OAILoginResponse::is_poi_system_data_Valid() const{
    return m_poi_system_data_isValid;
}

OAIResponse OAILoginResponse::getResponse() const {
    return m_response;
}
void OAILoginResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAILoginResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAILoginResponse::is_response_Valid() const{
    return m_response_isValid;
}

bool OAILoginResponse::isTokenRequestStatus() const {
    return m_token_request_status;
}
void OAILoginResponse::setTokenRequestStatus(const bool &token_request_status) {
    m_token_request_status = token_request_status;
    m_token_request_status_isSet = true;
}

bool OAILoginResponse::is_token_request_status_Set() const{
    return m_token_request_status_isSet;
}

bool OAILoginResponse::is_token_request_status_Valid() const{
    return m_token_request_status_isValid;
}

bool OAILoginResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_system_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_request_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_response_isValid && true;
}

} // namespace OpenAPI
