/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentData::OAIPaymentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentData::OAIPaymentData() {
    this->initializeModel();
}

OAIPaymentData::~OAIPaymentData() {}

void OAIPaymentData::initializeModel() {

    m_card_acquisition_reference_isSet = false;
    m_card_acquisition_reference_isValid = false;

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_instalment_isSet = false;
    m_instalment_isValid = false;

    m_payment_instrument_data_isSet = false;
    m_payment_instrument_data_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_requested_validity_date_isSet = false;
    m_requested_validity_date_isValid = false;

    m_split_payment_flag_isSet = false;
    m_split_payment_flag_isValid = false;
}

void OAIPaymentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentData::fromJsonObject(QJsonObject json) {

    m_card_acquisition_reference_isValid = ::OpenAPI::fromJsonValue(m_card_acquisition_reference, json[QString("CardAcquisitionReference")]);
    m_card_acquisition_reference_isSet = !json[QString("CardAcquisitionReference")].isNull() && m_card_acquisition_reference_isValid;

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("CustomerOrder")]);
    m_customer_order_isSet = !json[QString("CustomerOrder")].isNull() && m_customer_order_isValid;

    m_instalment_isValid = ::OpenAPI::fromJsonValue(m_instalment, json[QString("Instalment")]);
    m_instalment_isSet = !json[QString("Instalment")].isNull() && m_instalment_isValid;

    m_payment_instrument_data_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_data, json[QString("PaymentInstrumentData")]);
    m_payment_instrument_data_isSet = !json[QString("PaymentInstrumentData")].isNull() && m_payment_instrument_data_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("PaymentType")]);
    m_payment_type_isSet = !json[QString("PaymentType")].isNull() && m_payment_type_isValid;

    m_requested_validity_date_isValid = ::OpenAPI::fromJsonValue(m_requested_validity_date, json[QString("RequestedValidityDate")]);
    m_requested_validity_date_isSet = !json[QString("RequestedValidityDate")].isNull() && m_requested_validity_date_isValid;

    m_split_payment_flag_isValid = ::OpenAPI::fromJsonValue(m_split_payment_flag, json[QString("SplitPaymentFlag")]);
    m_split_payment_flag_isSet = !json[QString("SplitPaymentFlag")].isNull() && m_split_payment_flag_isValid;
}

QString OAIPaymentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentData::asJsonObject() const {
    QJsonObject obj;
    if (m_card_acquisition_reference.isSet()) {
        obj.insert(QString("CardAcquisitionReference"), ::OpenAPI::toJsonValue(m_card_acquisition_reference));
    }
    if (m_customer_order.isSet()) {
        obj.insert(QString("CustomerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_instalment.isSet()) {
        obj.insert(QString("Instalment"), ::OpenAPI::toJsonValue(m_instalment));
    }
    if (m_payment_instrument_data.isSet()) {
        obj.insert(QString("PaymentInstrumentData"), ::OpenAPI::toJsonValue(m_payment_instrument_data));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("PaymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_requested_validity_date_isSet) {
        obj.insert(QString("RequestedValidityDate"), ::OpenAPI::toJsonValue(m_requested_validity_date));
    }
    if (m_split_payment_flag_isSet) {
        obj.insert(QString("SplitPaymentFlag"), ::OpenAPI::toJsonValue(m_split_payment_flag));
    }
    return obj;
}

OAITransactionIDType OAIPaymentData::getCardAcquisitionReference() const {
    return m_card_acquisition_reference;
}
void OAIPaymentData::setCardAcquisitionReference(const OAITransactionIDType &card_acquisition_reference) {
    m_card_acquisition_reference = card_acquisition_reference;
    m_card_acquisition_reference_isSet = true;
}

bool OAIPaymentData::is_card_acquisition_reference_Set() const{
    return m_card_acquisition_reference_isSet;
}

bool OAIPaymentData::is_card_acquisition_reference_Valid() const{
    return m_card_acquisition_reference_isValid;
}

OAICustomerOrder OAIPaymentData::getCustomerOrder() const {
    return m_customer_order;
}
void OAIPaymentData::setCustomerOrder(const OAICustomerOrder &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAIPaymentData::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAIPaymentData::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

OAIInstalment OAIPaymentData::getInstalment() const {
    return m_instalment;
}
void OAIPaymentData::setInstalment(const OAIInstalment &instalment) {
    m_instalment = instalment;
    m_instalment_isSet = true;
}

bool OAIPaymentData::is_instalment_Set() const{
    return m_instalment_isSet;
}

bool OAIPaymentData::is_instalment_Valid() const{
    return m_instalment_isValid;
}

OAIPaymentInstrumentData OAIPaymentData::getPaymentInstrumentData() const {
    return m_payment_instrument_data;
}
void OAIPaymentData::setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data) {
    m_payment_instrument_data = payment_instrument_data;
    m_payment_instrument_data_isSet = true;
}

bool OAIPaymentData::is_payment_instrument_data_Set() const{
    return m_payment_instrument_data_isSet;
}

bool OAIPaymentData::is_payment_instrument_data_Valid() const{
    return m_payment_instrument_data_isValid;
}

OAIPaymentType OAIPaymentData::getPaymentType() const {
    return m_payment_type;
}
void OAIPaymentData::setPaymentType(const OAIPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIPaymentData::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIPaymentData::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QDate OAIPaymentData::getRequestedValidityDate() const {
    return m_requested_validity_date;
}
void OAIPaymentData::setRequestedValidityDate(const QDate &requested_validity_date) {
    m_requested_validity_date = requested_validity_date;
    m_requested_validity_date_isSet = true;
}

bool OAIPaymentData::is_requested_validity_date_Set() const{
    return m_requested_validity_date_isSet;
}

bool OAIPaymentData::is_requested_validity_date_Valid() const{
    return m_requested_validity_date_isValid;
}

bool OAIPaymentData::isSplitPaymentFlag() const {
    return m_split_payment_flag;
}
void OAIPaymentData::setSplitPaymentFlag(const bool &split_payment_flag) {
    m_split_payment_flag = split_payment_flag;
    m_split_payment_flag_isSet = true;
}

bool OAIPaymentData::is_split_payment_flag_Set() const{
    return m_split_payment_flag_isSet;
}

bool OAIPaymentData::is_split_payment_flag_Valid() const{
    return m_split_payment_flag_isValid;
}

bool OAIPaymentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_acquisition_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_validity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_split_payment_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
