/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPOISystemData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPOISystemData::OAIPOISystemData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPOISystemData::OAIPOISystemData() {
    this->initializeModel();
}

OAIPOISystemData::~OAIPOISystemData() {}

void OAIPOISystemData::initializeModel() {

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_poi_software_isSet = false;
    m_poi_software_isValid = false;

    m_poi_status_isSet = false;
    m_poi_status_isValid = false;

    m_poi_terminal_data_isSet = false;
    m_poi_terminal_data_isValid = false;
}

void OAIPOISystemData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPOISystemData::fromJsonObject(QJsonObject json) {

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_poi_software_isValid = ::OpenAPI::fromJsonValue(m_poi_software, json[QString("POISoftware")]);
    m_poi_software_isSet = !json[QString("POISoftware")].isNull() && m_poi_software_isValid;

    m_poi_status_isValid = ::OpenAPI::fromJsonValue(m_poi_status, json[QString("POIStatus")]);
    m_poi_status_isSet = !json[QString("POIStatus")].isNull() && m_poi_status_isValid;

    m_poi_terminal_data_isValid = ::OpenAPI::fromJsonValue(m_poi_terminal_data, json[QString("POITerminalData")]);
    m_poi_terminal_data_isSet = !json[QString("POITerminalData")].isNull() && m_poi_terminal_data_isValid;
}

QString OAIPOISystemData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPOISystemData::asJsonObject() const {
    QJsonObject obj;
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_poi_software.isSet()) {
        obj.insert(QString("POISoftware"), ::OpenAPI::toJsonValue(m_poi_software));
    }
    if (m_poi_status.isSet()) {
        obj.insert(QString("POIStatus"), ::OpenAPI::toJsonValue(m_poi_status));
    }
    if (m_poi_terminal_data.isSet()) {
        obj.insert(QString("POITerminalData"), ::OpenAPI::toJsonValue(m_poi_terminal_data));
    }
    return obj;
}

QDateTime OAIPOISystemData::getDateTime() const {
    return m_date_time;
}
void OAIPOISystemData::setDateTime(const QDateTime &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIPOISystemData::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIPOISystemData::is_date_time_Valid() const{
    return m_date_time_isValid;
}

OAIPOISoftware OAIPOISystemData::getPoiSoftware() const {
    return m_poi_software;
}
void OAIPOISystemData::setPoiSoftware(const OAIPOISoftware &poi_software) {
    m_poi_software = poi_software;
    m_poi_software_isSet = true;
}

bool OAIPOISystemData::is_poi_software_Set() const{
    return m_poi_software_isSet;
}

bool OAIPOISystemData::is_poi_software_Valid() const{
    return m_poi_software_isValid;
}

OAIPOIStatus OAIPOISystemData::getPoiStatus() const {
    return m_poi_status;
}
void OAIPOISystemData::setPoiStatus(const OAIPOIStatus &poi_status) {
    m_poi_status = poi_status;
    m_poi_status_isSet = true;
}

bool OAIPOISystemData::is_poi_status_Set() const{
    return m_poi_status_isSet;
}

bool OAIPOISystemData::is_poi_status_Valid() const{
    return m_poi_status_isValid;
}

OAIPOITerminalData OAIPOISystemData::getPoiTerminalData() const {
    return m_poi_terminal_data;
}
void OAIPOISystemData::setPoiTerminalData(const OAIPOITerminalData &poi_terminal_data) {
    m_poi_terminal_data = poi_terminal_data;
    m_poi_terminal_data_isSet = true;
}

bool OAIPOISystemData::is_poi_terminal_data_Set() const{
    return m_poi_terminal_data_isSet;
}

bool OAIPOISystemData::is_poi_terminal_data_Valid() const{
    return m_poi_terminal_data_isValid;
}

bool OAIPOISystemData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_software.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_terminal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPOISystemData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_time_isValid && m_poi_software_isValid && true;
}

} // namespace OpenAPI
