/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentData.h
 *
 * 
 */

#ifndef OAIPaymentData_H
#define OAIPaymentData_H

#include <QJsonObject>

#include "OAICustomerOrder.h"
#include "OAIInstalment.h"
#include "OAIPaymentInstrumentData.h"
#include "OAIPaymentType.h"
#include "OAITransactionIDType.h"
#include <QDate>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAITransactionIDType;
class OAICustomerOrder;
class OAIInstalment;
class OAIPaymentInstrumentData;

class OAIPaymentData : public OAIObject {
public:
    OAIPaymentData();
    OAIPaymentData(QString json);
    ~OAIPaymentData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAITransactionIDType getCardAcquisitionReference() const;
    void setCardAcquisitionReference(const OAITransactionIDType &card_acquisition_reference);
    bool is_card_acquisition_reference_Set() const;
    bool is_card_acquisition_reference_Valid() const;

    OAICustomerOrder getCustomerOrder() const;
    void setCustomerOrder(const OAICustomerOrder &customer_order);
    bool is_customer_order_Set() const;
    bool is_customer_order_Valid() const;

    OAIInstalment getInstalment() const;
    void setInstalment(const OAIInstalment &instalment);
    bool is_instalment_Set() const;
    bool is_instalment_Valid() const;

    OAIPaymentInstrumentData getPaymentInstrumentData() const;
    void setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data);
    bool is_payment_instrument_data_Set() const;
    bool is_payment_instrument_data_Valid() const;

    OAIPaymentType getPaymentType() const;
    void setPaymentType(const OAIPaymentType &payment_type);
    bool is_payment_type_Set() const;
    bool is_payment_type_Valid() const;

    QDate getRequestedValidityDate() const;
    void setRequestedValidityDate(const QDate &requested_validity_date);
    bool is_requested_validity_date_Set() const;
    bool is_requested_validity_date_Valid() const;

    bool isSplitPaymentFlag() const;
    void setSplitPaymentFlag(const bool &split_payment_flag);
    bool is_split_payment_flag_Set() const;
    bool is_split_payment_flag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAITransactionIDType m_card_acquisition_reference;
    bool m_card_acquisition_reference_isSet;
    bool m_card_acquisition_reference_isValid;

    OAICustomerOrder m_customer_order;
    bool m_customer_order_isSet;
    bool m_customer_order_isValid;

    OAIInstalment m_instalment;
    bool m_instalment_isSet;
    bool m_instalment_isValid;

    OAIPaymentInstrumentData m_payment_instrument_data;
    bool m_payment_instrument_data_isSet;
    bool m_payment_instrument_data_isValid;

    OAIPaymentType m_payment_type;
    bool m_payment_type_isSet;
    bool m_payment_type_isValid;

    QDate m_requested_validity_date;
    bool m_requested_validity_date_isSet;
    bool m_requested_validity_date_isValid;

    bool m_split_payment_flag;
    bool m_split_payment_flag_isSet;
    bool m_split_payment_flag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentData)

#endif // OAIPaymentData_H
