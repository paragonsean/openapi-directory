/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputBarcode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputBarcode::OAIOutputBarcode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputBarcode::OAIOutputBarcode() {
    this->initializeModel();
}

OAIOutputBarcode::~OAIOutputBarcode() {}

void OAIOutputBarcode::initializeModel() {

    m_barcode_type_isSet = false;
    m_barcode_type_isValid = false;

    m_barcode_value_isSet = false;
    m_barcode_value_isValid = false;
}

void OAIOutputBarcode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputBarcode::fromJsonObject(QJsonObject json) {

    m_barcode_type_isValid = ::OpenAPI::fromJsonValue(m_barcode_type, json[QString("BarcodeType")]);
    m_barcode_type_isSet = !json[QString("BarcodeType")].isNull() && m_barcode_type_isValid;

    m_barcode_value_isValid = ::OpenAPI::fromJsonValue(m_barcode_value, json[QString("BarcodeValue")]);
    m_barcode_value_isSet = !json[QString("BarcodeValue")].isNull() && m_barcode_value_isValid;
}

QString OAIOutputBarcode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputBarcode::asJsonObject() const {
    QJsonObject obj;
    if (m_barcode_type.isSet()) {
        obj.insert(QString("BarcodeType"), ::OpenAPI::toJsonValue(m_barcode_type));
    }
    if (m_barcode_value_isSet) {
        obj.insert(QString("BarcodeValue"), ::OpenAPI::toJsonValue(m_barcode_value));
    }
    return obj;
}

OAIBarcodeType OAIOutputBarcode::getBarcodeType() const {
    return m_barcode_type;
}
void OAIOutputBarcode::setBarcodeType(const OAIBarcodeType &barcode_type) {
    m_barcode_type = barcode_type;
    m_barcode_type_isSet = true;
}

bool OAIOutputBarcode::is_barcode_type_Set() const{
    return m_barcode_type_isSet;
}

bool OAIOutputBarcode::is_barcode_type_Valid() const{
    return m_barcode_type_isValid;
}

QString OAIOutputBarcode::getBarcodeValue() const {
    return m_barcode_value;
}
void OAIOutputBarcode::setBarcodeValue(const QString &barcode_value) {
    m_barcode_value = barcode_value;
    m_barcode_value_isSet = true;
}

bool OAIOutputBarcode::is_barcode_value_Set() const{
    return m_barcode_value_isSet;
}

bool OAIOutputBarcode::is_barcode_value_Valid() const{
    return m_barcode_value_isValid;
}

bool OAIOutputBarcode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_barcode_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_barcode_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputBarcode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_barcode_value_isValid && true;
}

} // namespace OpenAPI
