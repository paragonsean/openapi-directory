/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHostStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHostStatus::OAIHostStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHostStatus::OAIHostStatus() {
    this->initializeModel();
}

OAIHostStatus::~OAIHostStatus() {}

void OAIHostStatus::initializeModel() {

    m_acquirer_id_isSet = false;
    m_acquirer_id_isValid = false;

    m_is_reachable_flag_isSet = false;
    m_is_reachable_flag_isValid = false;
}

void OAIHostStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHostStatus::fromJsonObject(QJsonObject json) {

    m_acquirer_id_isValid = ::OpenAPI::fromJsonValue(m_acquirer_id, json[QString("AcquirerID")]);
    m_acquirer_id_isSet = !json[QString("AcquirerID")].isNull() && m_acquirer_id_isValid;

    m_is_reachable_flag_isValid = ::OpenAPI::fromJsonValue(m_is_reachable_flag, json[QString("IsReachableFlag")]);
    m_is_reachable_flag_isSet = !json[QString("IsReachableFlag")].isNull() && m_is_reachable_flag_isValid;
}

QString OAIHostStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHostStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_acquirer_id_isSet) {
        obj.insert(QString("AcquirerID"), ::OpenAPI::toJsonValue(m_acquirer_id));
    }
    if (m_is_reachable_flag_isSet) {
        obj.insert(QString("IsReachableFlag"), ::OpenAPI::toJsonValue(m_is_reachable_flag));
    }
    return obj;
}

qint32 OAIHostStatus::getAcquirerId() const {
    return m_acquirer_id;
}
void OAIHostStatus::setAcquirerId(const qint32 &acquirer_id) {
    m_acquirer_id = acquirer_id;
    m_acquirer_id_isSet = true;
}

bool OAIHostStatus::is_acquirer_id_Set() const{
    return m_acquirer_id_isSet;
}

bool OAIHostStatus::is_acquirer_id_Valid() const{
    return m_acquirer_id_isValid;
}

bool OAIHostStatus::isIsReachableFlag() const {
    return m_is_reachable_flag;
}
void OAIHostStatus::setIsReachableFlag(const bool &is_reachable_flag) {
    m_is_reachable_flag = is_reachable_flag;
    m_is_reachable_flag_isSet = true;
}

bool OAIHostStatus::is_is_reachable_flag_Set() const{
    return m_is_reachable_flag_isSet;
}

bool OAIHostStatus::is_is_reachable_flag_Valid() const{
    return m_is_reachable_flag_isValid;
}

bool OAIHostStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acquirer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_reachable_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHostStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acquirer_id_isValid && true;
}

} // namespace OpenAPI
