/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentInstrumentData.h
 *
 * Sent in the result of the payment transaction. For a card, it could also be sent in the CardAcquisition response, to be processed by the Sale System. Data related to the instrument of payment for the transaction.
 */

#ifndef OAIPaymentInstrumentData_H
#define OAIPaymentInstrumentData_H

#include <QJsonObject>

#include "OAICardData.h"
#include "OAICheckData.h"
#include "OAIMobileData.h"
#include "OAIPaymentInstrumentType.h"
#include "OAIStoredValueAccountID.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICardData;
class OAICheckData;
class OAIMobileData;
class OAIStoredValueAccountID;

class OAIPaymentInstrumentData : public OAIObject {
public:
    OAIPaymentInstrumentData();
    OAIPaymentInstrumentData(QString json);
    ~OAIPaymentInstrumentData() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICardData getCardData() const;
    void setCardData(const OAICardData &card_data);
    bool is_card_data_Set() const;
    bool is_card_data_Valid() const;

    OAICheckData getCheckData() const;
    void setCheckData(const OAICheckData &check_data);
    bool is_check_data_Set() const;
    bool is_check_data_Valid() const;

    OAIMobileData getMobileData() const;
    void setMobileData(const OAIMobileData &mobile_data);
    bool is_mobile_data_Set() const;
    bool is_mobile_data_Valid() const;

    OAIPaymentInstrumentType getPaymentInstrumentType() const;
    void setPaymentInstrumentType(const OAIPaymentInstrumentType &payment_instrument_type);
    bool is_payment_instrument_type_Set() const;
    bool is_payment_instrument_type_Valid() const;

    QString getProtectedCardData() const;
    void setProtectedCardData(const QString &protected_card_data);
    bool is_protected_card_data_Set() const;
    bool is_protected_card_data_Valid() const;

    OAIStoredValueAccountID getStoredValueAccountId() const;
    void setStoredValueAccountId(const OAIStoredValueAccountID &stored_value_account_id);
    bool is_stored_value_account_id_Set() const;
    bool is_stored_value_account_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICardData m_card_data;
    bool m_card_data_isSet;
    bool m_card_data_isValid;

    OAICheckData m_check_data;
    bool m_check_data_isSet;
    bool m_check_data_isValid;

    OAIMobileData m_mobile_data;
    bool m_mobile_data_isSet;
    bool m_mobile_data_isValid;

    OAIPaymentInstrumentType m_payment_instrument_type;
    bool m_payment_instrument_type_isSet;
    bool m_payment_instrument_type_isValid;

    QString m_protected_card_data;
    bool m_protected_card_data_isSet;
    bool m_protected_card_data_isValid;

    OAIStoredValueAccountID m_stored_value_account_id;
    bool m_stored_value_account_id_isSet;
    bool m_stored_value_account_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentInstrumentData)

#endif // OAIPaymentInstrumentData_H
