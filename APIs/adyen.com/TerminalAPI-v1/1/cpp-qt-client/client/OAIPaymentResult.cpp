/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResult::OAIPaymentResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResult::OAIPaymentResult() {
    this->initializeModel();
}

OAIPaymentResult::~OAIPaymentResult() {}

void OAIPaymentResult::initializeModel() {

    m_amounts_resp_isSet = false;
    m_amounts_resp_isValid = false;

    m_authentication_method_isSet = false;
    m_authentication_method_isValid = false;

    m_captured_signature_isSet = false;
    m_captured_signature_isValid = false;

    m_currency_conversion_isSet = false;
    m_currency_conversion_isValid = false;

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_instalment_isSet = false;
    m_instalment_isValid = false;

    m_merchant_override_flag_isSet = false;
    m_merchant_override_flag_isValid = false;

    m_online_flag_isSet = false;
    m_online_flag_isValid = false;

    m_payment_acquirer_data_isSet = false;
    m_payment_acquirer_data_isValid = false;

    m_payment_instrument_data_isSet = false;
    m_payment_instrument_data_isValid = false;

    m_payment_type_isSet = false;
    m_payment_type_isValid = false;

    m_protected_signature_isSet = false;
    m_protected_signature_isValid = false;

    m_validity_date_isSet = false;
    m_validity_date_isValid = false;
}

void OAIPaymentResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResult::fromJsonObject(QJsonObject json) {

    m_amounts_resp_isValid = ::OpenAPI::fromJsonValue(m_amounts_resp, json[QString("AmountsResp")]);
    m_amounts_resp_isSet = !json[QString("AmountsResp")].isNull() && m_amounts_resp_isValid;

    m_authentication_method_isValid = ::OpenAPI::fromJsonValue(m_authentication_method, json[QString("AuthenticationMethod")]);
    m_authentication_method_isSet = !json[QString("AuthenticationMethod")].isNull() && m_authentication_method_isValid;

    m_captured_signature_isValid = ::OpenAPI::fromJsonValue(m_captured_signature, json[QString("CapturedSignature")]);
    m_captured_signature_isSet = !json[QString("CapturedSignature")].isNull() && m_captured_signature_isValid;

    m_currency_conversion_isValid = ::OpenAPI::fromJsonValue(m_currency_conversion, json[QString("CurrencyConversion")]);
    m_currency_conversion_isSet = !json[QString("CurrencyConversion")].isNull() && m_currency_conversion_isValid;

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_instalment_isValid = ::OpenAPI::fromJsonValue(m_instalment, json[QString("Instalment")]);
    m_instalment_isSet = !json[QString("Instalment")].isNull() && m_instalment_isValid;

    m_merchant_override_flag_isValid = ::OpenAPI::fromJsonValue(m_merchant_override_flag, json[QString("MerchantOverrideFlag")]);
    m_merchant_override_flag_isSet = !json[QString("MerchantOverrideFlag")].isNull() && m_merchant_override_flag_isValid;

    m_online_flag_isValid = ::OpenAPI::fromJsonValue(m_online_flag, json[QString("OnlineFlag")]);
    m_online_flag_isSet = !json[QString("OnlineFlag")].isNull() && m_online_flag_isValid;

    m_payment_acquirer_data_isValid = ::OpenAPI::fromJsonValue(m_payment_acquirer_data, json[QString("PaymentAcquirerData")]);
    m_payment_acquirer_data_isSet = !json[QString("PaymentAcquirerData")].isNull() && m_payment_acquirer_data_isValid;

    m_payment_instrument_data_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_data, json[QString("PaymentInstrumentData")]);
    m_payment_instrument_data_isSet = !json[QString("PaymentInstrumentData")].isNull() && m_payment_instrument_data_isValid;

    m_payment_type_isValid = ::OpenAPI::fromJsonValue(m_payment_type, json[QString("PaymentType")]);
    m_payment_type_isSet = !json[QString("PaymentType")].isNull() && m_payment_type_isValid;

    m_protected_signature_isValid = ::OpenAPI::fromJsonValue(m_protected_signature, json[QString("ProtectedSignature")]);
    m_protected_signature_isSet = !json[QString("ProtectedSignature")].isNull() && m_protected_signature_isValid;

    m_validity_date_isValid = ::OpenAPI::fromJsonValue(m_validity_date, json[QString("ValidityDate")]);
    m_validity_date_isSet = !json[QString("ValidityDate")].isNull() && m_validity_date_isValid;
}

QString OAIPaymentResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResult::asJsonObject() const {
    QJsonObject obj;
    if (m_amounts_resp.isSet()) {
        obj.insert(QString("AmountsResp"), ::OpenAPI::toJsonValue(m_amounts_resp));
    }
    if (m_authentication_method.size() > 0) {
        obj.insert(QString("AuthenticationMethod"), ::OpenAPI::toJsonValue(m_authentication_method));
    }
    if (m_captured_signature.isSet()) {
        obj.insert(QString("CapturedSignature"), ::OpenAPI::toJsonValue(m_captured_signature));
    }
    if (m_currency_conversion.size() > 0) {
        obj.insert(QString("CurrencyConversion"), ::OpenAPI::toJsonValue(m_currency_conversion));
    }
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_instalment.isSet()) {
        obj.insert(QString("Instalment"), ::OpenAPI::toJsonValue(m_instalment));
    }
    if (m_merchant_override_flag_isSet) {
        obj.insert(QString("MerchantOverrideFlag"), ::OpenAPI::toJsonValue(m_merchant_override_flag));
    }
    if (m_online_flag_isSet) {
        obj.insert(QString("OnlineFlag"), ::OpenAPI::toJsonValue(m_online_flag));
    }
    if (m_payment_acquirer_data.isSet()) {
        obj.insert(QString("PaymentAcquirerData"), ::OpenAPI::toJsonValue(m_payment_acquirer_data));
    }
    if (m_payment_instrument_data.isSet()) {
        obj.insert(QString("PaymentInstrumentData"), ::OpenAPI::toJsonValue(m_payment_instrument_data));
    }
    if (m_payment_type.isSet()) {
        obj.insert(QString("PaymentType"), ::OpenAPI::toJsonValue(m_payment_type));
    }
    if (m_protected_signature_isSet) {
        obj.insert(QString("ProtectedSignature"), ::OpenAPI::toJsonValue(m_protected_signature));
    }
    if (m_validity_date_isSet) {
        obj.insert(QString("ValidityDate"), ::OpenAPI::toJsonValue(m_validity_date));
    }
    return obj;
}

OAIAmountsResp OAIPaymentResult::getAmountsResp() const {
    return m_amounts_resp;
}
void OAIPaymentResult::setAmountsResp(const OAIAmountsResp &amounts_resp) {
    m_amounts_resp = amounts_resp;
    m_amounts_resp_isSet = true;
}

bool OAIPaymentResult::is_amounts_resp_Set() const{
    return m_amounts_resp_isSet;
}

bool OAIPaymentResult::is_amounts_resp_Valid() const{
    return m_amounts_resp_isValid;
}

QList<QString> OAIPaymentResult::getAuthenticationMethod() const {
    return m_authentication_method;
}
void OAIPaymentResult::setAuthenticationMethod(const QList<QString> &authentication_method) {
    m_authentication_method = authentication_method;
    m_authentication_method_isSet = true;
}

bool OAIPaymentResult::is_authentication_method_Set() const{
    return m_authentication_method_isSet;
}

bool OAIPaymentResult::is_authentication_method_Valid() const{
    return m_authentication_method_isValid;
}

OAICapturedSignature OAIPaymentResult::getCapturedSignature() const {
    return m_captured_signature;
}
void OAIPaymentResult::setCapturedSignature(const OAICapturedSignature &captured_signature) {
    m_captured_signature = captured_signature;
    m_captured_signature_isSet = true;
}

bool OAIPaymentResult::is_captured_signature_Set() const{
    return m_captured_signature_isSet;
}

bool OAIPaymentResult::is_captured_signature_Valid() const{
    return m_captured_signature_isValid;
}

QList<OAICurrencyConversion> OAIPaymentResult::getCurrencyConversion() const {
    return m_currency_conversion;
}
void OAIPaymentResult::setCurrencyConversion(const QList<OAICurrencyConversion> &currency_conversion) {
    m_currency_conversion = currency_conversion;
    m_currency_conversion_isSet = true;
}

bool OAIPaymentResult::is_currency_conversion_Set() const{
    return m_currency_conversion_isSet;
}

bool OAIPaymentResult::is_currency_conversion_Valid() const{
    return m_currency_conversion_isValid;
}

QString OAIPaymentResult::getCustomerLanguage() const {
    return m_customer_language;
}
void OAIPaymentResult::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAIPaymentResult::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAIPaymentResult::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

OAIInstalment OAIPaymentResult::getInstalment() const {
    return m_instalment;
}
void OAIPaymentResult::setInstalment(const OAIInstalment &instalment) {
    m_instalment = instalment;
    m_instalment_isSet = true;
}

bool OAIPaymentResult::is_instalment_Set() const{
    return m_instalment_isSet;
}

bool OAIPaymentResult::is_instalment_Valid() const{
    return m_instalment_isValid;
}

bool OAIPaymentResult::isMerchantOverrideFlag() const {
    return m_merchant_override_flag;
}
void OAIPaymentResult::setMerchantOverrideFlag(const bool &merchant_override_flag) {
    m_merchant_override_flag = merchant_override_flag;
    m_merchant_override_flag_isSet = true;
}

bool OAIPaymentResult::is_merchant_override_flag_Set() const{
    return m_merchant_override_flag_isSet;
}

bool OAIPaymentResult::is_merchant_override_flag_Valid() const{
    return m_merchant_override_flag_isValid;
}

bool OAIPaymentResult::isOnlineFlag() const {
    return m_online_flag;
}
void OAIPaymentResult::setOnlineFlag(const bool &online_flag) {
    m_online_flag = online_flag;
    m_online_flag_isSet = true;
}

bool OAIPaymentResult::is_online_flag_Set() const{
    return m_online_flag_isSet;
}

bool OAIPaymentResult::is_online_flag_Valid() const{
    return m_online_flag_isValid;
}

OAIPaymentAcquirerData OAIPaymentResult::getPaymentAcquirerData() const {
    return m_payment_acquirer_data;
}
void OAIPaymentResult::setPaymentAcquirerData(const OAIPaymentAcquirerData &payment_acquirer_data) {
    m_payment_acquirer_data = payment_acquirer_data;
    m_payment_acquirer_data_isSet = true;
}

bool OAIPaymentResult::is_payment_acquirer_data_Set() const{
    return m_payment_acquirer_data_isSet;
}

bool OAIPaymentResult::is_payment_acquirer_data_Valid() const{
    return m_payment_acquirer_data_isValid;
}

OAIPaymentInstrumentData OAIPaymentResult::getPaymentInstrumentData() const {
    return m_payment_instrument_data;
}
void OAIPaymentResult::setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data) {
    m_payment_instrument_data = payment_instrument_data;
    m_payment_instrument_data_isSet = true;
}

bool OAIPaymentResult::is_payment_instrument_data_Set() const{
    return m_payment_instrument_data_isSet;
}

bool OAIPaymentResult::is_payment_instrument_data_Valid() const{
    return m_payment_instrument_data_isValid;
}

OAIPaymentType OAIPaymentResult::getPaymentType() const {
    return m_payment_type;
}
void OAIPaymentResult::setPaymentType(const OAIPaymentType &payment_type) {
    m_payment_type = payment_type;
    m_payment_type_isSet = true;
}

bool OAIPaymentResult::is_payment_type_Set() const{
    return m_payment_type_isSet;
}

bool OAIPaymentResult::is_payment_type_Valid() const{
    return m_payment_type_isValid;
}

QString OAIPaymentResult::getProtectedSignature() const {
    return m_protected_signature;
}
void OAIPaymentResult::setProtectedSignature(const QString &protected_signature) {
    m_protected_signature = protected_signature;
    m_protected_signature_isSet = true;
}

bool OAIPaymentResult::is_protected_signature_Set() const{
    return m_protected_signature_isSet;
}

bool OAIPaymentResult::is_protected_signature_Valid() const{
    return m_protected_signature_isValid;
}

QDate OAIPaymentResult::getValidityDate() const {
    return m_validity_date;
}
void OAIPaymentResult::setValidityDate(const QDate &validity_date) {
    m_validity_date = validity_date;
    m_validity_date_isSet = true;
}

bool OAIPaymentResult::is_validity_date_Set() const{
    return m_validity_date_isSet;
}

bool OAIPaymentResult::is_validity_date_Valid() const{
    return m_validity_date_isValid;
}

bool OAIPaymentResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amounts_resp.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_method.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_captured_signature.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_conversion.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instalment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_override_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_online_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_acquirer_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_signature_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validity_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
