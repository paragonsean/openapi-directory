/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputData::OAIInputData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputData::OAIInputData() {
    this->initializeModel();
}

OAIInputData::~OAIInputData() {}

void OAIInputData::initializeModel() {

    m_beep_key_flag_isSet = false;
    m_beep_key_flag_isValid = false;

    m_default_input_string_isSet = false;
    m_default_input_string_isValid = false;

    m_default_layout_string_isSet = false;
    m_default_layout_string_isValid = false;

    m_device_isSet = false;
    m_device_isValid = false;

    m_disable_cancel_flag_isSet = false;
    m_disable_cancel_flag_isValid = false;

    m_disable_correct_flag_isSet = false;
    m_disable_correct_flag_isValid = false;

    m_disable_valid_flag_isSet = false;
    m_disable_valid_flag_isValid = false;

    m_from_right_to_left_flag_isSet = false;
    m_from_right_to_left_flag_isValid = false;

    m_global_correction_flag_isSet = false;
    m_global_correction_flag_isValid = false;

    m_immediate_response_flag_isSet = false;
    m_immediate_response_flag_isValid = false;

    m_info_qualify_isSet = false;
    m_info_qualify_isValid = false;

    m_input_command_isSet = false;
    m_input_command_isValid = false;

    m_mask_characters_flag_isSet = false;
    m_mask_characters_flag_isValid = false;

    m_max_decimal_length_isSet = false;
    m_max_decimal_length_isValid = false;

    m_max_input_time_isSet = false;
    m_max_input_time_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_menu_back_flag_isSet = false;
    m_menu_back_flag_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_notify_card_input_flag_isSet = false;
    m_notify_card_input_flag_isValid = false;

    m_string_mask_isSet = false;
    m_string_mask_isValid = false;

    m_wait_user_validation_flag_isSet = false;
    m_wait_user_validation_flag_isValid = false;
}

void OAIInputData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputData::fromJsonObject(QJsonObject json) {

    m_beep_key_flag_isValid = ::OpenAPI::fromJsonValue(m_beep_key_flag, json[QString("BeepKeyFlag")]);
    m_beep_key_flag_isSet = !json[QString("BeepKeyFlag")].isNull() && m_beep_key_flag_isValid;

    m_default_input_string_isValid = ::OpenAPI::fromJsonValue(m_default_input_string, json[QString("DefaultInputString")]);
    m_default_input_string_isSet = !json[QString("DefaultInputString")].isNull() && m_default_input_string_isValid;

    m_default_layout_string_isValid = ::OpenAPI::fromJsonValue(m_default_layout_string, json[QString("DefaultLayoutString")]);
    m_default_layout_string_isSet = !json[QString("DefaultLayoutString")].isNull() && m_default_layout_string_isValid;

    m_device_isValid = ::OpenAPI::fromJsonValue(m_device, json[QString("Device")]);
    m_device_isSet = !json[QString("Device")].isNull() && m_device_isValid;

    m_disable_cancel_flag_isValid = ::OpenAPI::fromJsonValue(m_disable_cancel_flag, json[QString("DisableCancelFlag")]);
    m_disable_cancel_flag_isSet = !json[QString("DisableCancelFlag")].isNull() && m_disable_cancel_flag_isValid;

    m_disable_correct_flag_isValid = ::OpenAPI::fromJsonValue(m_disable_correct_flag, json[QString("DisableCorrectFlag")]);
    m_disable_correct_flag_isSet = !json[QString("DisableCorrectFlag")].isNull() && m_disable_correct_flag_isValid;

    m_disable_valid_flag_isValid = ::OpenAPI::fromJsonValue(m_disable_valid_flag, json[QString("DisableValidFlag")]);
    m_disable_valid_flag_isSet = !json[QString("DisableValidFlag")].isNull() && m_disable_valid_flag_isValid;

    m_from_right_to_left_flag_isValid = ::OpenAPI::fromJsonValue(m_from_right_to_left_flag, json[QString("FromRightToLeftFlag")]);
    m_from_right_to_left_flag_isSet = !json[QString("FromRightToLeftFlag")].isNull() && m_from_right_to_left_flag_isValid;

    m_global_correction_flag_isValid = ::OpenAPI::fromJsonValue(m_global_correction_flag, json[QString("GlobalCorrectionFlag")]);
    m_global_correction_flag_isSet = !json[QString("GlobalCorrectionFlag")].isNull() && m_global_correction_flag_isValid;

    m_immediate_response_flag_isValid = ::OpenAPI::fromJsonValue(m_immediate_response_flag, json[QString("ImmediateResponseFlag")]);
    m_immediate_response_flag_isSet = !json[QString("ImmediateResponseFlag")].isNull() && m_immediate_response_flag_isValid;

    m_info_qualify_isValid = ::OpenAPI::fromJsonValue(m_info_qualify, json[QString("InfoQualify")]);
    m_info_qualify_isSet = !json[QString("InfoQualify")].isNull() && m_info_qualify_isValid;

    m_input_command_isValid = ::OpenAPI::fromJsonValue(m_input_command, json[QString("InputCommand")]);
    m_input_command_isSet = !json[QString("InputCommand")].isNull() && m_input_command_isValid;

    m_mask_characters_flag_isValid = ::OpenAPI::fromJsonValue(m_mask_characters_flag, json[QString("MaskCharactersFlag")]);
    m_mask_characters_flag_isSet = !json[QString("MaskCharactersFlag")].isNull() && m_mask_characters_flag_isValid;

    m_max_decimal_length_isValid = ::OpenAPI::fromJsonValue(m_max_decimal_length, json[QString("MaxDecimalLength")]);
    m_max_decimal_length_isSet = !json[QString("MaxDecimalLength")].isNull() && m_max_decimal_length_isValid;

    m_max_input_time_isValid = ::OpenAPI::fromJsonValue(m_max_input_time, json[QString("MaxInputTime")]);
    m_max_input_time_isSet = !json[QString("MaxInputTime")].isNull() && m_max_input_time_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("MaxLength")]);
    m_max_length_isSet = !json[QString("MaxLength")].isNull() && m_max_length_isValid;

    m_menu_back_flag_isValid = ::OpenAPI::fromJsonValue(m_menu_back_flag, json[QString("MenuBackFlag")]);
    m_menu_back_flag_isSet = !json[QString("MenuBackFlag")].isNull() && m_menu_back_flag_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("MinLength")]);
    m_min_length_isSet = !json[QString("MinLength")].isNull() && m_min_length_isValid;

    m_notify_card_input_flag_isValid = ::OpenAPI::fromJsonValue(m_notify_card_input_flag, json[QString("NotifyCardInputFlag")]);
    m_notify_card_input_flag_isSet = !json[QString("NotifyCardInputFlag")].isNull() && m_notify_card_input_flag_isValid;

    m_string_mask_isValid = ::OpenAPI::fromJsonValue(m_string_mask, json[QString("StringMask")]);
    m_string_mask_isSet = !json[QString("StringMask")].isNull() && m_string_mask_isValid;

    m_wait_user_validation_flag_isValid = ::OpenAPI::fromJsonValue(m_wait_user_validation_flag, json[QString("WaitUserValidationFlag")]);
    m_wait_user_validation_flag_isSet = !json[QString("WaitUserValidationFlag")].isNull() && m_wait_user_validation_flag_isValid;
}

QString OAIInputData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputData::asJsonObject() const {
    QJsonObject obj;
    if (m_beep_key_flag_isSet) {
        obj.insert(QString("BeepKeyFlag"), ::OpenAPI::toJsonValue(m_beep_key_flag));
    }
    if (m_default_input_string_isSet) {
        obj.insert(QString("DefaultInputString"), ::OpenAPI::toJsonValue(m_default_input_string));
    }
    if (m_default_layout_string_isSet) {
        obj.insert(QString("DefaultLayoutString"), ::OpenAPI::toJsonValue(m_default_layout_string));
    }
    if (m_device.isSet()) {
        obj.insert(QString("Device"), ::OpenAPI::toJsonValue(m_device));
    }
    if (m_disable_cancel_flag_isSet) {
        obj.insert(QString("DisableCancelFlag"), ::OpenAPI::toJsonValue(m_disable_cancel_flag));
    }
    if (m_disable_correct_flag_isSet) {
        obj.insert(QString("DisableCorrectFlag"), ::OpenAPI::toJsonValue(m_disable_correct_flag));
    }
    if (m_disable_valid_flag_isSet) {
        obj.insert(QString("DisableValidFlag"), ::OpenAPI::toJsonValue(m_disable_valid_flag));
    }
    if (m_from_right_to_left_flag_isSet) {
        obj.insert(QString("FromRightToLeftFlag"), ::OpenAPI::toJsonValue(m_from_right_to_left_flag));
    }
    if (m_global_correction_flag_isSet) {
        obj.insert(QString("GlobalCorrectionFlag"), ::OpenAPI::toJsonValue(m_global_correction_flag));
    }
    if (m_immediate_response_flag_isSet) {
        obj.insert(QString("ImmediateResponseFlag"), ::OpenAPI::toJsonValue(m_immediate_response_flag));
    }
    if (m_info_qualify.isSet()) {
        obj.insert(QString("InfoQualify"), ::OpenAPI::toJsonValue(m_info_qualify));
    }
    if (m_input_command.isSet()) {
        obj.insert(QString("InputCommand"), ::OpenAPI::toJsonValue(m_input_command));
    }
    if (m_mask_characters_flag_isSet) {
        obj.insert(QString("MaskCharactersFlag"), ::OpenAPI::toJsonValue(m_mask_characters_flag));
    }
    if (m_max_decimal_length_isSet) {
        obj.insert(QString("MaxDecimalLength"), ::OpenAPI::toJsonValue(m_max_decimal_length));
    }
    if (m_max_input_time_isSet) {
        obj.insert(QString("MaxInputTime"), ::OpenAPI::toJsonValue(m_max_input_time));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("MaxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_menu_back_flag_isSet) {
        obj.insert(QString("MenuBackFlag"), ::OpenAPI::toJsonValue(m_menu_back_flag));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("MinLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_notify_card_input_flag_isSet) {
        obj.insert(QString("NotifyCardInputFlag"), ::OpenAPI::toJsonValue(m_notify_card_input_flag));
    }
    if (m_string_mask_isSet) {
        obj.insert(QString("StringMask"), ::OpenAPI::toJsonValue(m_string_mask));
    }
    if (m_wait_user_validation_flag_isSet) {
        obj.insert(QString("WaitUserValidationFlag"), ::OpenAPI::toJsonValue(m_wait_user_validation_flag));
    }
    return obj;
}

bool OAIInputData::isBeepKeyFlag() const {
    return m_beep_key_flag;
}
void OAIInputData::setBeepKeyFlag(const bool &beep_key_flag) {
    m_beep_key_flag = beep_key_flag;
    m_beep_key_flag_isSet = true;
}

bool OAIInputData::is_beep_key_flag_Set() const{
    return m_beep_key_flag_isSet;
}

bool OAIInputData::is_beep_key_flag_Valid() const{
    return m_beep_key_flag_isValid;
}

QString OAIInputData::getDefaultInputString() const {
    return m_default_input_string;
}
void OAIInputData::setDefaultInputString(const QString &default_input_string) {
    m_default_input_string = default_input_string;
    m_default_input_string_isSet = true;
}

bool OAIInputData::is_default_input_string_Set() const{
    return m_default_input_string_isSet;
}

bool OAIInputData::is_default_input_string_Valid() const{
    return m_default_input_string_isValid;
}

QString OAIInputData::getDefaultLayoutString() const {
    return m_default_layout_string;
}
void OAIInputData::setDefaultLayoutString(const QString &default_layout_string) {
    m_default_layout_string = default_layout_string;
    m_default_layout_string_isSet = true;
}

bool OAIInputData::is_default_layout_string_Set() const{
    return m_default_layout_string_isSet;
}

bool OAIInputData::is_default_layout_string_Valid() const{
    return m_default_layout_string_isValid;
}

OAIDevice OAIInputData::getDevice() const {
    return m_device;
}
void OAIInputData::setDevice(const OAIDevice &device) {
    m_device = device;
    m_device_isSet = true;
}

bool OAIInputData::is_device_Set() const{
    return m_device_isSet;
}

bool OAIInputData::is_device_Valid() const{
    return m_device_isValid;
}

bool OAIInputData::isDisableCancelFlag() const {
    return m_disable_cancel_flag;
}
void OAIInputData::setDisableCancelFlag(const bool &disable_cancel_flag) {
    m_disable_cancel_flag = disable_cancel_flag;
    m_disable_cancel_flag_isSet = true;
}

bool OAIInputData::is_disable_cancel_flag_Set() const{
    return m_disable_cancel_flag_isSet;
}

bool OAIInputData::is_disable_cancel_flag_Valid() const{
    return m_disable_cancel_flag_isValid;
}

bool OAIInputData::isDisableCorrectFlag() const {
    return m_disable_correct_flag;
}
void OAIInputData::setDisableCorrectFlag(const bool &disable_correct_flag) {
    m_disable_correct_flag = disable_correct_flag;
    m_disable_correct_flag_isSet = true;
}

bool OAIInputData::is_disable_correct_flag_Set() const{
    return m_disable_correct_flag_isSet;
}

bool OAIInputData::is_disable_correct_flag_Valid() const{
    return m_disable_correct_flag_isValid;
}

bool OAIInputData::isDisableValidFlag() const {
    return m_disable_valid_flag;
}
void OAIInputData::setDisableValidFlag(const bool &disable_valid_flag) {
    m_disable_valid_flag = disable_valid_flag;
    m_disable_valid_flag_isSet = true;
}

bool OAIInputData::is_disable_valid_flag_Set() const{
    return m_disable_valid_flag_isSet;
}

bool OAIInputData::is_disable_valid_flag_Valid() const{
    return m_disable_valid_flag_isValid;
}

bool OAIInputData::isFromRightToLeftFlag() const {
    return m_from_right_to_left_flag;
}
void OAIInputData::setFromRightToLeftFlag(const bool &from_right_to_left_flag) {
    m_from_right_to_left_flag = from_right_to_left_flag;
    m_from_right_to_left_flag_isSet = true;
}

bool OAIInputData::is_from_right_to_left_flag_Set() const{
    return m_from_right_to_left_flag_isSet;
}

bool OAIInputData::is_from_right_to_left_flag_Valid() const{
    return m_from_right_to_left_flag_isValid;
}

bool OAIInputData::isGlobalCorrectionFlag() const {
    return m_global_correction_flag;
}
void OAIInputData::setGlobalCorrectionFlag(const bool &global_correction_flag) {
    m_global_correction_flag = global_correction_flag;
    m_global_correction_flag_isSet = true;
}

bool OAIInputData::is_global_correction_flag_Set() const{
    return m_global_correction_flag_isSet;
}

bool OAIInputData::is_global_correction_flag_Valid() const{
    return m_global_correction_flag_isValid;
}

bool OAIInputData::isImmediateResponseFlag() const {
    return m_immediate_response_flag;
}
void OAIInputData::setImmediateResponseFlag(const bool &immediate_response_flag) {
    m_immediate_response_flag = immediate_response_flag;
    m_immediate_response_flag_isSet = true;
}

bool OAIInputData::is_immediate_response_flag_Set() const{
    return m_immediate_response_flag_isSet;
}

bool OAIInputData::is_immediate_response_flag_Valid() const{
    return m_immediate_response_flag_isValid;
}

OAIInfoQualify OAIInputData::getInfoQualify() const {
    return m_info_qualify;
}
void OAIInputData::setInfoQualify(const OAIInfoQualify &info_qualify) {
    m_info_qualify = info_qualify;
    m_info_qualify_isSet = true;
}

bool OAIInputData::is_info_qualify_Set() const{
    return m_info_qualify_isSet;
}

bool OAIInputData::is_info_qualify_Valid() const{
    return m_info_qualify_isValid;
}

OAIInputCommand OAIInputData::getInputCommand() const {
    return m_input_command;
}
void OAIInputData::setInputCommand(const OAIInputCommand &input_command) {
    m_input_command = input_command;
    m_input_command_isSet = true;
}

bool OAIInputData::is_input_command_Set() const{
    return m_input_command_isSet;
}

bool OAIInputData::is_input_command_Valid() const{
    return m_input_command_isValid;
}

bool OAIInputData::isMaskCharactersFlag() const {
    return m_mask_characters_flag;
}
void OAIInputData::setMaskCharactersFlag(const bool &mask_characters_flag) {
    m_mask_characters_flag = mask_characters_flag;
    m_mask_characters_flag_isSet = true;
}

bool OAIInputData::is_mask_characters_flag_Set() const{
    return m_mask_characters_flag_isSet;
}

bool OAIInputData::is_mask_characters_flag_Valid() const{
    return m_mask_characters_flag_isValid;
}

qint32 OAIInputData::getMaxDecimalLength() const {
    return m_max_decimal_length;
}
void OAIInputData::setMaxDecimalLength(const qint32 &max_decimal_length) {
    m_max_decimal_length = max_decimal_length;
    m_max_decimal_length_isSet = true;
}

bool OAIInputData::is_max_decimal_length_Set() const{
    return m_max_decimal_length_isSet;
}

bool OAIInputData::is_max_decimal_length_Valid() const{
    return m_max_decimal_length_isValid;
}

qint32 OAIInputData::getMaxInputTime() const {
    return m_max_input_time;
}
void OAIInputData::setMaxInputTime(const qint32 &max_input_time) {
    m_max_input_time = max_input_time;
    m_max_input_time_isSet = true;
}

bool OAIInputData::is_max_input_time_Set() const{
    return m_max_input_time_isSet;
}

bool OAIInputData::is_max_input_time_Valid() const{
    return m_max_input_time_isValid;
}

qint32 OAIInputData::getMaxLength() const {
    return m_max_length;
}
void OAIInputData::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIInputData::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIInputData::is_max_length_Valid() const{
    return m_max_length_isValid;
}

bool OAIInputData::isMenuBackFlag() const {
    return m_menu_back_flag;
}
void OAIInputData::setMenuBackFlag(const bool &menu_back_flag) {
    m_menu_back_flag = menu_back_flag;
    m_menu_back_flag_isSet = true;
}

bool OAIInputData::is_menu_back_flag_Set() const{
    return m_menu_back_flag_isSet;
}

bool OAIInputData::is_menu_back_flag_Valid() const{
    return m_menu_back_flag_isValid;
}

qint32 OAIInputData::getMinLength() const {
    return m_min_length;
}
void OAIInputData::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIInputData::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIInputData::is_min_length_Valid() const{
    return m_min_length_isValid;
}

bool OAIInputData::isNotifyCardInputFlag() const {
    return m_notify_card_input_flag;
}
void OAIInputData::setNotifyCardInputFlag(const bool &notify_card_input_flag) {
    m_notify_card_input_flag = notify_card_input_flag;
    m_notify_card_input_flag_isSet = true;
}

bool OAIInputData::is_notify_card_input_flag_Set() const{
    return m_notify_card_input_flag_isSet;
}

bool OAIInputData::is_notify_card_input_flag_Valid() const{
    return m_notify_card_input_flag_isValid;
}

QString OAIInputData::getStringMask() const {
    return m_string_mask;
}
void OAIInputData::setStringMask(const QString &string_mask) {
    m_string_mask = string_mask;
    m_string_mask_isSet = true;
}

bool OAIInputData::is_string_mask_Set() const{
    return m_string_mask_isSet;
}

bool OAIInputData::is_string_mask_Valid() const{
    return m_string_mask_isValid;
}

bool OAIInputData::isWaitUserValidationFlag() const {
    return m_wait_user_validation_flag;
}
void OAIInputData::setWaitUserValidationFlag(const bool &wait_user_validation_flag) {
    m_wait_user_validation_flag = wait_user_validation_flag;
    m_wait_user_validation_flag_isSet = true;
}

bool OAIInputData::is_wait_user_validation_flag_Set() const{
    return m_wait_user_validation_flag_isSet;
}

bool OAIInputData::is_wait_user_validation_flag_Valid() const{
    return m_wait_user_validation_flag_isValid;
}

bool OAIInputData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beep_key_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_input_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_layout_string_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_cancel_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_correct_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disable_valid_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_right_to_left_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_correction_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_immediate_response_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_info_qualify.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_command.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_characters_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_decimal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_input_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_back_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_card_input_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wait_user_validation_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_device_isValid && m_info_qualify_isValid && m_input_command_isValid && true;
}

} // namespace OpenAPI
