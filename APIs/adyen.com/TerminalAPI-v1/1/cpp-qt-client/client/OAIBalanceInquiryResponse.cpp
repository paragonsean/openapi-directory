/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceInquiryResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceInquiryResponse::OAIBalanceInquiryResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceInquiryResponse::OAIBalanceInquiryResponse() {
    this->initializeModel();
}

OAIBalanceInquiryResponse::~OAIBalanceInquiryResponse() {}

void OAIBalanceInquiryResponse::initializeModel() {

    m_loyalty_account_status_isSet = false;
    m_loyalty_account_status_isValid = false;

    m_payment_account_status_isSet = false;
    m_payment_account_status_isValid = false;

    m_payment_receipt_isSet = false;
    m_payment_receipt_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAIBalanceInquiryResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceInquiryResponse::fromJsonObject(QJsonObject json) {

    m_loyalty_account_status_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_status, json[QString("LoyaltyAccountStatus")]);
    m_loyalty_account_status_isSet = !json[QString("LoyaltyAccountStatus")].isNull() && m_loyalty_account_status_isValid;

    m_payment_account_status_isValid = ::OpenAPI::fromJsonValue(m_payment_account_status, json[QString("PaymentAccountStatus")]);
    m_payment_account_status_isSet = !json[QString("PaymentAccountStatus")].isNull() && m_payment_account_status_isValid;

    m_payment_receipt_isValid = ::OpenAPI::fromJsonValue(m_payment_receipt, json[QString("PaymentReceipt")]);
    m_payment_receipt_isSet = !json[QString("PaymentReceipt")].isNull() && m_payment_receipt_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;
}

QString OAIBalanceInquiryResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceInquiryResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_account_status.isSet()) {
        obj.insert(QString("LoyaltyAccountStatus"), ::OpenAPI::toJsonValue(m_loyalty_account_status));
    }
    if (m_payment_account_status.isSet()) {
        obj.insert(QString("PaymentAccountStatus"), ::OpenAPI::toJsonValue(m_payment_account_status));
    }
    if (m_payment_receipt.size() > 0) {
        obj.insert(QString("PaymentReceipt"), ::OpenAPI::toJsonValue(m_payment_receipt));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

OAILoyaltyAccountStatus OAIBalanceInquiryResponse::getLoyaltyAccountStatus() const {
    return m_loyalty_account_status;
}
void OAIBalanceInquiryResponse::setLoyaltyAccountStatus(const OAILoyaltyAccountStatus &loyalty_account_status) {
    m_loyalty_account_status = loyalty_account_status;
    m_loyalty_account_status_isSet = true;
}

bool OAIBalanceInquiryResponse::is_loyalty_account_status_Set() const{
    return m_loyalty_account_status_isSet;
}

bool OAIBalanceInquiryResponse::is_loyalty_account_status_Valid() const{
    return m_loyalty_account_status_isValid;
}

OAIPaymentAccountStatus OAIBalanceInquiryResponse::getPaymentAccountStatus() const {
    return m_payment_account_status;
}
void OAIBalanceInquiryResponse::setPaymentAccountStatus(const OAIPaymentAccountStatus &payment_account_status) {
    m_payment_account_status = payment_account_status;
    m_payment_account_status_isSet = true;
}

bool OAIBalanceInquiryResponse::is_payment_account_status_Set() const{
    return m_payment_account_status_isSet;
}

bool OAIBalanceInquiryResponse::is_payment_account_status_Valid() const{
    return m_payment_account_status_isValid;
}

QList<OAIPaymentReceipt> OAIBalanceInquiryResponse::getPaymentReceipt() const {
    return m_payment_receipt;
}
void OAIBalanceInquiryResponse::setPaymentReceipt(const QList<OAIPaymentReceipt> &payment_receipt) {
    m_payment_receipt = payment_receipt;
    m_payment_receipt_isSet = true;
}

bool OAIBalanceInquiryResponse::is_payment_receipt_Set() const{
    return m_payment_receipt_isSet;
}

bool OAIBalanceInquiryResponse::is_payment_receipt_Valid() const{
    return m_payment_receipt_isValid;
}

OAIResponse OAIBalanceInquiryResponse::getResponse() const {
    return m_response;
}
void OAIBalanceInquiryResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIBalanceInquiryResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAIBalanceInquiryResponse::is_response_Valid() const{
    return m_response_isValid;
}

bool OAIBalanceInquiryResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_account_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_receipt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceInquiryResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_response_isValid && true;
}

} // namespace OpenAPI
