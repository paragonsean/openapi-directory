/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDisplayOutput.h
 *
 * It contains a complete display operation for a Display or an Input Device type. For the Input Devices, Diagnosis and EnableService, ResponseRequiredFlag and MinimumDisplayTime shall be absent. Information to display and the way to process the display.
 */

#ifndef OAIDisplayOutput_H
#define OAIDisplayOutput_H

#include <QJsonObject>

#include "OAIDevice.h"
#include "OAIInfoQualify.h"
#include "OAIMenuEntry.h"
#include "OAIOutputContent.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMenuEntry;
class OAIOutputContent;

class OAIDisplayOutput : public OAIObject {
public:
    OAIDisplayOutput();
    OAIDisplayOutput(QString json);
    ~OAIDisplayOutput() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDevice getDevice() const;
    void setDevice(const OAIDevice &device);
    bool is_device_Set() const;
    bool is_device_Valid() const;

    OAIInfoQualify getInfoQualify() const;
    void setInfoQualify(const OAIInfoQualify &info_qualify);
    bool is_info_qualify_Set() const;
    bool is_info_qualify_Valid() const;

    QList<OAIMenuEntry> getMenuEntry() const;
    void setMenuEntry(const QList<OAIMenuEntry> &menu_entry);
    bool is_menu_entry_Set() const;
    bool is_menu_entry_Valid() const;

    qint32 getMinimumDisplayTime() const;
    void setMinimumDisplayTime(const qint32 &minimum_display_time);
    bool is_minimum_display_time_Set() const;
    bool is_minimum_display_time_Valid() const;

    OAIOutputContent getOutputContent() const;
    void setOutputContent(const OAIOutputContent &output_content);
    bool is_output_content_Set() const;
    bool is_output_content_Valid() const;

    QString getOutputSignature() const;
    void setOutputSignature(const QString &output_signature);
    bool is_output_signature_Set() const;
    bool is_output_signature_Valid() const;

    bool isResponseRequiredFlag() const;
    void setResponseRequiredFlag(const bool &response_required_flag);
    bool is_response_required_flag_Set() const;
    bool is_response_required_flag_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDevice m_device;
    bool m_device_isSet;
    bool m_device_isValid;

    OAIInfoQualify m_info_qualify;
    bool m_info_qualify_isSet;
    bool m_info_qualify_isValid;

    QList<OAIMenuEntry> m_menu_entry;
    bool m_menu_entry_isSet;
    bool m_menu_entry_isValid;

    qint32 m_minimum_display_time;
    bool m_minimum_display_time_isSet;
    bool m_minimum_display_time_isValid;

    OAIOutputContent m_output_content;
    bool m_output_content_isSet;
    bool m_output_content_isValid;

    QString m_output_signature;
    bool m_output_signature_isSet;
    bool m_output_signature_isValid;

    bool m_response_required_flag;
    bool m_response_required_flag_isSet;
    bool m_response_required_flag_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDisplayOutput)

#endif // OAIDisplayOutput_H
