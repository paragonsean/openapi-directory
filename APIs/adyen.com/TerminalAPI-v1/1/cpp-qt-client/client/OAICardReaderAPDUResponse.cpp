/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardReaderAPDUResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardReaderAPDUResponse::OAICardReaderAPDUResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardReaderAPDUResponse::OAICardReaderAPDUResponse() {
    this->initializeModel();
}

OAICardReaderAPDUResponse::~OAICardReaderAPDUResponse() {}

void OAICardReaderAPDUResponse::initializeModel() {

    m_apdu_data_isSet = false;
    m_apdu_data_isValid = false;

    m_card_status_words_isSet = false;
    m_card_status_words_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAICardReaderAPDUResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardReaderAPDUResponse::fromJsonObject(QJsonObject json) {

    m_apdu_data_isValid = ::OpenAPI::fromJsonValue(m_apdu_data, json[QString("APDUData")]);
    m_apdu_data_isSet = !json[QString("APDUData")].isNull() && m_apdu_data_isValid;

    m_card_status_words_isValid = ::OpenAPI::fromJsonValue(m_card_status_words, json[QString("CardStatusWords")]);
    m_card_status_words_isSet = !json[QString("CardStatusWords")].isNull() && m_card_status_words_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;
}

QString OAICardReaderAPDUResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardReaderAPDUResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_apdu_data_isSet) {
        obj.insert(QString("APDUData"), ::OpenAPI::toJsonValue(m_apdu_data));
    }
    if (m_card_status_words_isSet) {
        obj.insert(QString("CardStatusWords"), ::OpenAPI::toJsonValue(m_card_status_words));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

QString OAICardReaderAPDUResponse::getApduData() const {
    return m_apdu_data;
}
void OAICardReaderAPDUResponse::setApduData(const QString &apdu_data) {
    m_apdu_data = apdu_data;
    m_apdu_data_isSet = true;
}

bool OAICardReaderAPDUResponse::is_apdu_data_Set() const{
    return m_apdu_data_isSet;
}

bool OAICardReaderAPDUResponse::is_apdu_data_Valid() const{
    return m_apdu_data_isValid;
}

QString OAICardReaderAPDUResponse::getCardStatusWords() const {
    return m_card_status_words;
}
void OAICardReaderAPDUResponse::setCardStatusWords(const QString &card_status_words) {
    m_card_status_words = card_status_words;
    m_card_status_words_isSet = true;
}

bool OAICardReaderAPDUResponse::is_card_status_words_Set() const{
    return m_card_status_words_isSet;
}

bool OAICardReaderAPDUResponse::is_card_status_words_Valid() const{
    return m_card_status_words_isValid;
}

OAIResponse OAICardReaderAPDUResponse::getResponse() const {
    return m_response;
}
void OAICardReaderAPDUResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAICardReaderAPDUResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAICardReaderAPDUResponse::is_response_Valid() const{
    return m_response_isValid;
}

bool OAICardReaderAPDUResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apdu_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_status_words_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardReaderAPDUResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_card_status_words_isValid && m_response_isValid && true;
}

} // namespace OpenAPI
