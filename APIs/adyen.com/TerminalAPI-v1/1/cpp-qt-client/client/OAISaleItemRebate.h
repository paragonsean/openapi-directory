/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISaleItemRebate.h
 *
 * To be differentiated from the award which is the amount or quantity earned on the loyalty account. The awarded amount that is attached to an item as a rebate.
 */

#ifndef OAISaleItemRebate_H
#define OAISaleItemRebate_H

#include <QJsonObject>

#include "OAIUnitOfMeasure.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISaleItemRebate : public OAIObject {
public:
    OAISaleItemRebate();
    OAISaleItemRebate(QString json);
    ~OAISaleItemRebate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getEanUpc() const;
    void setEanUpc(const qint32 &ean_upc);
    bool is_ean_upc_Set() const;
    bool is_ean_upc_Valid() const;

    double getItemAmount() const;
    void setItemAmount(const double &item_amount);
    bool is_item_amount_Set() const;
    bool is_item_amount_Valid() const;

    qint32 getItemId() const;
    void setItemId(const qint32 &item_id);
    bool is_item_id_Set() const;
    bool is_item_id_Valid() const;

    qint32 getProductCode() const;
    void setProductCode(const qint32 &product_code);
    bool is_product_code_Set() const;
    bool is_product_code_Valid() const;

    QString getQuantity() const;
    void setQuantity(const QString &quantity);
    bool is_quantity_Set() const;
    bool is_quantity_Valid() const;

    QString getRebateLabel() const;
    void setRebateLabel(const QString &rebate_label);
    bool is_rebate_label_Set() const;
    bool is_rebate_label_Valid() const;

    OAIUnitOfMeasure getUnitOfMeasure() const;
    void setUnitOfMeasure(const OAIUnitOfMeasure &unit_of_measure);
    bool is_unit_of_measure_Set() const;
    bool is_unit_of_measure_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_ean_upc;
    bool m_ean_upc_isSet;
    bool m_ean_upc_isValid;

    double m_item_amount;
    bool m_item_amount_isSet;
    bool m_item_amount_isValid;

    qint32 m_item_id;
    bool m_item_id_isSet;
    bool m_item_id_isValid;

    qint32 m_product_code;
    bool m_product_code_isSet;
    bool m_product_code_isValid;

    QString m_quantity;
    bool m_quantity_isSet;
    bool m_quantity_isValid;

    QString m_rebate_label;
    bool m_rebate_label_isSet;
    bool m_rebate_label_isValid;

    OAIUnitOfMeasure m_unit_of_measure;
    bool m_unit_of_measure_isSet;
    bool m_unit_of_measure_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISaleItemRebate)

#endif // OAISaleItemRebate_H
