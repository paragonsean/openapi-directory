/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyTotals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyTotals::OAILoyaltyTotals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyTotals::OAILoyaltyTotals() {
    this->initializeModel();
}

OAILoyaltyTotals::~OAILoyaltyTotals() {}

void OAILoyaltyTotals::initializeModel() {

    m_transaction_amount_isSet = false;
    m_transaction_amount_isValid = false;

    m_transaction_count_isSet = false;
    m_transaction_count_isValid = false;

    m_transaction_type_isSet = false;
    m_transaction_type_isValid = false;
}

void OAILoyaltyTotals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyTotals::fromJsonObject(QJsonObject json) {

    m_transaction_amount_isValid = ::OpenAPI::fromJsonValue(m_transaction_amount, json[QString("TransactionAmount")]);
    m_transaction_amount_isSet = !json[QString("TransactionAmount")].isNull() && m_transaction_amount_isValid;

    m_transaction_count_isValid = ::OpenAPI::fromJsonValue(m_transaction_count, json[QString("TransactionCount")]);
    m_transaction_count_isSet = !json[QString("TransactionCount")].isNull() && m_transaction_count_isValid;

    m_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_transaction_type, json[QString("TransactionType")]);
    m_transaction_type_isSet = !json[QString("TransactionType")].isNull() && m_transaction_type_isValid;
}

QString OAILoyaltyTotals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyTotals::asJsonObject() const {
    QJsonObject obj;
    if (m_transaction_amount_isSet) {
        obj.insert(QString("TransactionAmount"), ::OpenAPI::toJsonValue(m_transaction_amount));
    }
    if (m_transaction_count_isSet) {
        obj.insert(QString("TransactionCount"), ::OpenAPI::toJsonValue(m_transaction_count));
    }
    if (m_transaction_type.isSet()) {
        obj.insert(QString("TransactionType"), ::OpenAPI::toJsonValue(m_transaction_type));
    }
    return obj;
}

double OAILoyaltyTotals::getTransactionAmount() const {
    return m_transaction_amount;
}
void OAILoyaltyTotals::setTransactionAmount(const double &transaction_amount) {
    m_transaction_amount = transaction_amount;
    m_transaction_amount_isSet = true;
}

bool OAILoyaltyTotals::is_transaction_amount_Set() const{
    return m_transaction_amount_isSet;
}

bool OAILoyaltyTotals::is_transaction_amount_Valid() const{
    return m_transaction_amount_isValid;
}

qint32 OAILoyaltyTotals::getTransactionCount() const {
    return m_transaction_count;
}
void OAILoyaltyTotals::setTransactionCount(const qint32 &transaction_count) {
    m_transaction_count = transaction_count;
    m_transaction_count_isSet = true;
}

bool OAILoyaltyTotals::is_transaction_count_Set() const{
    return m_transaction_count_isSet;
}

bool OAILoyaltyTotals::is_transaction_count_Valid() const{
    return m_transaction_count_isValid;
}

OAITransactionType OAILoyaltyTotals::getTransactionType() const {
    return m_transaction_type;
}
void OAILoyaltyTotals::setTransactionType(const OAITransactionType &transaction_type) {
    m_transaction_type = transaction_type;
    m_transaction_type_isSet = true;
}

bool OAILoyaltyTotals::is_transaction_type_Set() const{
    return m_transaction_type_isSet;
}

bool OAILoyaltyTotals::is_transaction_type_Valid() const{
    return m_transaction_type_isValid;
}

bool OAILoyaltyTotals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_transaction_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyTotals::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_transaction_amount_isValid && m_transaction_count_isValid && m_transaction_type_isValid && true;
}

} // namespace OpenAPI
