/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAmountsReq.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAmountsReq::OAIAmountsReq(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAmountsReq::OAIAmountsReq() {
    this->initializeModel();
}

OAIAmountsReq::~OAIAmountsReq() {}

void OAIAmountsReq::initializeModel() {

    m_cash_back_amount_isSet = false;
    m_cash_back_amount_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_maximum_cash_back_amount_isSet = false;
    m_maximum_cash_back_amount_isValid = false;

    m_minimum_amount_to_deliver_isSet = false;
    m_minimum_amount_to_deliver_isValid = false;

    m_minimum_split_amount_isSet = false;
    m_minimum_split_amount_isValid = false;

    m_paid_amount_isSet = false;
    m_paid_amount_isValid = false;

    m_requested_amount_isSet = false;
    m_requested_amount_isValid = false;

    m_tip_amount_isSet = false;
    m_tip_amount_isValid = false;
}

void OAIAmountsReq::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAmountsReq::fromJsonObject(QJsonObject json) {

    m_cash_back_amount_isValid = ::OpenAPI::fromJsonValue(m_cash_back_amount, json[QString("CashBackAmount")]);
    m_cash_back_amount_isSet = !json[QString("CashBackAmount")].isNull() && m_cash_back_amount_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_maximum_cash_back_amount_isValid = ::OpenAPI::fromJsonValue(m_maximum_cash_back_amount, json[QString("MaximumCashBackAmount")]);
    m_maximum_cash_back_amount_isSet = !json[QString("MaximumCashBackAmount")].isNull() && m_maximum_cash_back_amount_isValid;

    m_minimum_amount_to_deliver_isValid = ::OpenAPI::fromJsonValue(m_minimum_amount_to_deliver, json[QString("MinimumAmountToDeliver")]);
    m_minimum_amount_to_deliver_isSet = !json[QString("MinimumAmountToDeliver")].isNull() && m_minimum_amount_to_deliver_isValid;

    m_minimum_split_amount_isValid = ::OpenAPI::fromJsonValue(m_minimum_split_amount, json[QString("MinimumSplitAmount")]);
    m_minimum_split_amount_isSet = !json[QString("MinimumSplitAmount")].isNull() && m_minimum_split_amount_isValid;

    m_paid_amount_isValid = ::OpenAPI::fromJsonValue(m_paid_amount, json[QString("PaidAmount")]);
    m_paid_amount_isSet = !json[QString("PaidAmount")].isNull() && m_paid_amount_isValid;

    m_requested_amount_isValid = ::OpenAPI::fromJsonValue(m_requested_amount, json[QString("RequestedAmount")]);
    m_requested_amount_isSet = !json[QString("RequestedAmount")].isNull() && m_requested_amount_isValid;

    m_tip_amount_isValid = ::OpenAPI::fromJsonValue(m_tip_amount, json[QString("TipAmount")]);
    m_tip_amount_isSet = !json[QString("TipAmount")].isNull() && m_tip_amount_isValid;
}

QString OAIAmountsReq::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAmountsReq::asJsonObject() const {
    QJsonObject obj;
    if (m_cash_back_amount_isSet) {
        obj.insert(QString("CashBackAmount"), ::OpenAPI::toJsonValue(m_cash_back_amount));
    }
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_maximum_cash_back_amount_isSet) {
        obj.insert(QString("MaximumCashBackAmount"), ::OpenAPI::toJsonValue(m_maximum_cash_back_amount));
    }
    if (m_minimum_amount_to_deliver_isSet) {
        obj.insert(QString("MinimumAmountToDeliver"), ::OpenAPI::toJsonValue(m_minimum_amount_to_deliver));
    }
    if (m_minimum_split_amount_isSet) {
        obj.insert(QString("MinimumSplitAmount"), ::OpenAPI::toJsonValue(m_minimum_split_amount));
    }
    if (m_paid_amount_isSet) {
        obj.insert(QString("PaidAmount"), ::OpenAPI::toJsonValue(m_paid_amount));
    }
    if (m_requested_amount_isSet) {
        obj.insert(QString("RequestedAmount"), ::OpenAPI::toJsonValue(m_requested_amount));
    }
    if (m_tip_amount_isSet) {
        obj.insert(QString("TipAmount"), ::OpenAPI::toJsonValue(m_tip_amount));
    }
    return obj;
}

double OAIAmountsReq::getCashBackAmount() const {
    return m_cash_back_amount;
}
void OAIAmountsReq::setCashBackAmount(const double &cash_back_amount) {
    m_cash_back_amount = cash_back_amount;
    m_cash_back_amount_isSet = true;
}

bool OAIAmountsReq::is_cash_back_amount_Set() const{
    return m_cash_back_amount_isSet;
}

bool OAIAmountsReq::is_cash_back_amount_Valid() const{
    return m_cash_back_amount_isValid;
}

QString OAIAmountsReq::getCurrency() const {
    return m_currency;
}
void OAIAmountsReq::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIAmountsReq::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIAmountsReq::is_currency_Valid() const{
    return m_currency_isValid;
}

double OAIAmountsReq::getMaximumCashBackAmount() const {
    return m_maximum_cash_back_amount;
}
void OAIAmountsReq::setMaximumCashBackAmount(const double &maximum_cash_back_amount) {
    m_maximum_cash_back_amount = maximum_cash_back_amount;
    m_maximum_cash_back_amount_isSet = true;
}

bool OAIAmountsReq::is_maximum_cash_back_amount_Set() const{
    return m_maximum_cash_back_amount_isSet;
}

bool OAIAmountsReq::is_maximum_cash_back_amount_Valid() const{
    return m_maximum_cash_back_amount_isValid;
}

double OAIAmountsReq::getMinimumAmountToDeliver() const {
    return m_minimum_amount_to_deliver;
}
void OAIAmountsReq::setMinimumAmountToDeliver(const double &minimum_amount_to_deliver) {
    m_minimum_amount_to_deliver = minimum_amount_to_deliver;
    m_minimum_amount_to_deliver_isSet = true;
}

bool OAIAmountsReq::is_minimum_amount_to_deliver_Set() const{
    return m_minimum_amount_to_deliver_isSet;
}

bool OAIAmountsReq::is_minimum_amount_to_deliver_Valid() const{
    return m_minimum_amount_to_deliver_isValid;
}

double OAIAmountsReq::getMinimumSplitAmount() const {
    return m_minimum_split_amount;
}
void OAIAmountsReq::setMinimumSplitAmount(const double &minimum_split_amount) {
    m_minimum_split_amount = minimum_split_amount;
    m_minimum_split_amount_isSet = true;
}

bool OAIAmountsReq::is_minimum_split_amount_Set() const{
    return m_minimum_split_amount_isSet;
}

bool OAIAmountsReq::is_minimum_split_amount_Valid() const{
    return m_minimum_split_amount_isValid;
}

double OAIAmountsReq::getPaidAmount() const {
    return m_paid_amount;
}
void OAIAmountsReq::setPaidAmount(const double &paid_amount) {
    m_paid_amount = paid_amount;
    m_paid_amount_isSet = true;
}

bool OAIAmountsReq::is_paid_amount_Set() const{
    return m_paid_amount_isSet;
}

bool OAIAmountsReq::is_paid_amount_Valid() const{
    return m_paid_amount_isValid;
}

double OAIAmountsReq::getRequestedAmount() const {
    return m_requested_amount;
}
void OAIAmountsReq::setRequestedAmount(const double &requested_amount) {
    m_requested_amount = requested_amount;
    m_requested_amount_isSet = true;
}

bool OAIAmountsReq::is_requested_amount_Set() const{
    return m_requested_amount_isSet;
}

bool OAIAmountsReq::is_requested_amount_Valid() const{
    return m_requested_amount_isValid;
}

double OAIAmountsReq::getTipAmount() const {
    return m_tip_amount;
}
void OAIAmountsReq::setTipAmount(const double &tip_amount) {
    m_tip_amount = tip_amount;
    m_tip_amount_isSet = true;
}

bool OAIAmountsReq::is_tip_amount_Set() const{
    return m_tip_amount_isSet;
}

bool OAIAmountsReq::is_tip_amount_Valid() const{
    return m_tip_amount_isValid;
}

bool OAIAmountsReq::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cash_back_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_cash_back_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_amount_to_deliver_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_split_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paid_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tip_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAmountsReq::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_requested_amount_isValid && true;
}

} // namespace OpenAPI
