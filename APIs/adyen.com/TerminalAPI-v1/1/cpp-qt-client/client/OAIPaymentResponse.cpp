/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPaymentResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPaymentResponse::OAIPaymentResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPaymentResponse::OAIPaymentResponse() {
    this->initializeModel();
}

OAIPaymentResponse::~OAIPaymentResponse() {}

void OAIPaymentResponse::initializeModel() {

    m_customer_order_isSet = false;
    m_customer_order_isValid = false;

    m_loyalty_result_isSet = false;
    m_loyalty_result_isValid = false;

    m_poi_data_isSet = false;
    m_poi_data_isValid = false;

    m_payment_receipt_isSet = false;
    m_payment_receipt_isValid = false;

    m_payment_result_isSet = false;
    m_payment_result_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;
}

void OAIPaymentResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPaymentResponse::fromJsonObject(QJsonObject json) {

    m_customer_order_isValid = ::OpenAPI::fromJsonValue(m_customer_order, json[QString("CustomerOrder")]);
    m_customer_order_isSet = !json[QString("CustomerOrder")].isNull() && m_customer_order_isValid;

    m_loyalty_result_isValid = ::OpenAPI::fromJsonValue(m_loyalty_result, json[QString("LoyaltyResult")]);
    m_loyalty_result_isSet = !json[QString("LoyaltyResult")].isNull() && m_loyalty_result_isValid;

    m_poi_data_isValid = ::OpenAPI::fromJsonValue(m_poi_data, json[QString("POIData")]);
    m_poi_data_isSet = !json[QString("POIData")].isNull() && m_poi_data_isValid;

    m_payment_receipt_isValid = ::OpenAPI::fromJsonValue(m_payment_receipt, json[QString("PaymentReceipt")]);
    m_payment_receipt_isSet = !json[QString("PaymentReceipt")].isNull() && m_payment_receipt_isValid;

    m_payment_result_isValid = ::OpenAPI::fromJsonValue(m_payment_result, json[QString("PaymentResult")]);
    m_payment_result_isSet = !json[QString("PaymentResult")].isNull() && m_payment_result_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;
}

QString OAIPaymentResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPaymentResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order.size() > 0) {
        obj.insert(QString("CustomerOrder"), ::OpenAPI::toJsonValue(m_customer_order));
    }
    if (m_loyalty_result.size() > 0) {
        obj.insert(QString("LoyaltyResult"), ::OpenAPI::toJsonValue(m_loyalty_result));
    }
    if (m_poi_data.isSet()) {
        obj.insert(QString("POIData"), ::OpenAPI::toJsonValue(m_poi_data));
    }
    if (m_payment_receipt.size() > 0) {
        obj.insert(QString("PaymentReceipt"), ::OpenAPI::toJsonValue(m_payment_receipt));
    }
    if (m_payment_result.isSet()) {
        obj.insert(QString("PaymentResult"), ::OpenAPI::toJsonValue(m_payment_result));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    return obj;
}

QList<OAICustomerOrder> OAIPaymentResponse::getCustomerOrder() const {
    return m_customer_order;
}
void OAIPaymentResponse::setCustomerOrder(const QList<OAICustomerOrder> &customer_order) {
    m_customer_order = customer_order;
    m_customer_order_isSet = true;
}

bool OAIPaymentResponse::is_customer_order_Set() const{
    return m_customer_order_isSet;
}

bool OAIPaymentResponse::is_customer_order_Valid() const{
    return m_customer_order_isValid;
}

QList<OAILoyaltyResult> OAIPaymentResponse::getLoyaltyResult() const {
    return m_loyalty_result;
}
void OAIPaymentResponse::setLoyaltyResult(const QList<OAILoyaltyResult> &loyalty_result) {
    m_loyalty_result = loyalty_result;
    m_loyalty_result_isSet = true;
}

bool OAIPaymentResponse::is_loyalty_result_Set() const{
    return m_loyalty_result_isSet;
}

bool OAIPaymentResponse::is_loyalty_result_Valid() const{
    return m_loyalty_result_isValid;
}

OAIPOIData OAIPaymentResponse::getPoiData() const {
    return m_poi_data;
}
void OAIPaymentResponse::setPoiData(const OAIPOIData &poi_data) {
    m_poi_data = poi_data;
    m_poi_data_isSet = true;
}

bool OAIPaymentResponse::is_poi_data_Set() const{
    return m_poi_data_isSet;
}

bool OAIPaymentResponse::is_poi_data_Valid() const{
    return m_poi_data_isValid;
}

QList<OAIPaymentReceipt> OAIPaymentResponse::getPaymentReceipt() const {
    return m_payment_receipt;
}
void OAIPaymentResponse::setPaymentReceipt(const QList<OAIPaymentReceipt> &payment_receipt) {
    m_payment_receipt = payment_receipt;
    m_payment_receipt_isSet = true;
}

bool OAIPaymentResponse::is_payment_receipt_Set() const{
    return m_payment_receipt_isSet;
}

bool OAIPaymentResponse::is_payment_receipt_Valid() const{
    return m_payment_receipt_isValid;
}

OAIPaymentResult OAIPaymentResponse::getPaymentResult() const {
    return m_payment_result;
}
void OAIPaymentResponse::setPaymentResult(const OAIPaymentResult &payment_result) {
    m_payment_result = payment_result;
    m_payment_result_isSet = true;
}

bool OAIPaymentResponse::is_payment_result_Set() const{
    return m_payment_result_isSet;
}

bool OAIPaymentResponse::is_payment_result_Valid() const{
    return m_payment_result_isValid;
}

OAIResponse OAIPaymentResponse::getResponse() const {
    return m_response;
}
void OAIPaymentResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIPaymentResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAIPaymentResponse::is_response_Valid() const{
    return m_response_isValid;
}

OAISaleData OAIPaymentResponse::getSaleData() const {
    return m_sale_data;
}
void OAIPaymentResponse::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAIPaymentResponse::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAIPaymentResponse::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

bool OAIPaymentResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_receipt.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_result.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPaymentResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_poi_data_isValid && m_response_isValid && m_sale_data_isValid && true;
}

} // namespace OpenAPI
