/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepeatedResponseMessageBody.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepeatedResponseMessageBody::OAIRepeatedResponseMessageBody(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepeatedResponseMessageBody::OAIRepeatedResponseMessageBody() {
    this->initializeModel();
}

OAIRepeatedResponseMessageBody::~OAIRepeatedResponseMessageBody() {}

void OAIRepeatedResponseMessageBody::initializeModel() {

    m_card_acquisition_response_isSet = false;
    m_card_acquisition_response_isValid = false;

    m_card_reader_apdu_response_isSet = false;
    m_card_reader_apdu_response_isValid = false;

    m_loyalty_response_isSet = false;
    m_loyalty_response_isValid = false;

    m_payment_response_isSet = false;
    m_payment_response_isValid = false;

    m_reversal_response_isSet = false;
    m_reversal_response_isValid = false;

    m_stored_value_response_isSet = false;
    m_stored_value_response_isValid = false;
}

void OAIRepeatedResponseMessageBody::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepeatedResponseMessageBody::fromJsonObject(QJsonObject json) {

    m_card_acquisition_response_isValid = ::OpenAPI::fromJsonValue(m_card_acquisition_response, json[QString("CardAcquisitionResponse")]);
    m_card_acquisition_response_isSet = !json[QString("CardAcquisitionResponse")].isNull() && m_card_acquisition_response_isValid;

    m_card_reader_apdu_response_isValid = ::OpenAPI::fromJsonValue(m_card_reader_apdu_response, json[QString("CardReaderAPDUResponse")]);
    m_card_reader_apdu_response_isSet = !json[QString("CardReaderAPDUResponse")].isNull() && m_card_reader_apdu_response_isValid;

    m_loyalty_response_isValid = ::OpenAPI::fromJsonValue(m_loyalty_response, json[QString("LoyaltyResponse")]);
    m_loyalty_response_isSet = !json[QString("LoyaltyResponse")].isNull() && m_loyalty_response_isValid;

    m_payment_response_isValid = ::OpenAPI::fromJsonValue(m_payment_response, json[QString("PaymentResponse")]);
    m_payment_response_isSet = !json[QString("PaymentResponse")].isNull() && m_payment_response_isValid;

    m_reversal_response_isValid = ::OpenAPI::fromJsonValue(m_reversal_response, json[QString("ReversalResponse")]);
    m_reversal_response_isSet = !json[QString("ReversalResponse")].isNull() && m_reversal_response_isValid;

    m_stored_value_response_isValid = ::OpenAPI::fromJsonValue(m_stored_value_response, json[QString("StoredValueResponse")]);
    m_stored_value_response_isSet = !json[QString("StoredValueResponse")].isNull() && m_stored_value_response_isValid;
}

QString OAIRepeatedResponseMessageBody::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepeatedResponseMessageBody::asJsonObject() const {
    QJsonObject obj;
    if (m_card_acquisition_response.isSet()) {
        obj.insert(QString("CardAcquisitionResponse"), ::OpenAPI::toJsonValue(m_card_acquisition_response));
    }
    if (m_card_reader_apdu_response.isSet()) {
        obj.insert(QString("CardReaderAPDUResponse"), ::OpenAPI::toJsonValue(m_card_reader_apdu_response));
    }
    if (m_loyalty_response.isSet()) {
        obj.insert(QString("LoyaltyResponse"), ::OpenAPI::toJsonValue(m_loyalty_response));
    }
    if (m_payment_response.isSet()) {
        obj.insert(QString("PaymentResponse"), ::OpenAPI::toJsonValue(m_payment_response));
    }
    if (m_reversal_response.isSet()) {
        obj.insert(QString("ReversalResponse"), ::OpenAPI::toJsonValue(m_reversal_response));
    }
    if (m_stored_value_response.isSet()) {
        obj.insert(QString("StoredValueResponse"), ::OpenAPI::toJsonValue(m_stored_value_response));
    }
    return obj;
}

OAICardAcquisitionResponse OAIRepeatedResponseMessageBody::getCardAcquisitionResponse() const {
    return m_card_acquisition_response;
}
void OAIRepeatedResponseMessageBody::setCardAcquisitionResponse(const OAICardAcquisitionResponse &card_acquisition_response) {
    m_card_acquisition_response = card_acquisition_response;
    m_card_acquisition_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_card_acquisition_response_Set() const{
    return m_card_acquisition_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_card_acquisition_response_Valid() const{
    return m_card_acquisition_response_isValid;
}

OAICardReaderAPDUResponse OAIRepeatedResponseMessageBody::getCardReaderApduResponse() const {
    return m_card_reader_apdu_response;
}
void OAIRepeatedResponseMessageBody::setCardReaderApduResponse(const OAICardReaderAPDUResponse &card_reader_apdu_response) {
    m_card_reader_apdu_response = card_reader_apdu_response;
    m_card_reader_apdu_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_card_reader_apdu_response_Set() const{
    return m_card_reader_apdu_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_card_reader_apdu_response_Valid() const{
    return m_card_reader_apdu_response_isValid;
}

OAILoyaltyResponse OAIRepeatedResponseMessageBody::getLoyaltyResponse() const {
    return m_loyalty_response;
}
void OAIRepeatedResponseMessageBody::setLoyaltyResponse(const OAILoyaltyResponse &loyalty_response) {
    m_loyalty_response = loyalty_response;
    m_loyalty_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_loyalty_response_Set() const{
    return m_loyalty_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_loyalty_response_Valid() const{
    return m_loyalty_response_isValid;
}

OAIPaymentResponse OAIRepeatedResponseMessageBody::getPaymentResponse() const {
    return m_payment_response;
}
void OAIRepeatedResponseMessageBody::setPaymentResponse(const OAIPaymentResponse &payment_response) {
    m_payment_response = payment_response;
    m_payment_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_payment_response_Set() const{
    return m_payment_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_payment_response_Valid() const{
    return m_payment_response_isValid;
}

OAIReversalResponse OAIRepeatedResponseMessageBody::getReversalResponse() const {
    return m_reversal_response;
}
void OAIRepeatedResponseMessageBody::setReversalResponse(const OAIReversalResponse &reversal_response) {
    m_reversal_response = reversal_response;
    m_reversal_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_reversal_response_Set() const{
    return m_reversal_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_reversal_response_Valid() const{
    return m_reversal_response_isValid;
}

OAIStoredValueResponse OAIRepeatedResponseMessageBody::getStoredValueResponse() const {
    return m_stored_value_response;
}
void OAIRepeatedResponseMessageBody::setStoredValueResponse(const OAIStoredValueResponse &stored_value_response) {
    m_stored_value_response = stored_value_response;
    m_stored_value_response_isSet = true;
}

bool OAIRepeatedResponseMessageBody::is_stored_value_response_Set() const{
    return m_stored_value_response_isSet;
}

bool OAIRepeatedResponseMessageBody::is_stored_value_response_Valid() const{
    return m_stored_value_response_isValid;
}

bool OAIRepeatedResponseMessageBody::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_card_acquisition_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_card_reader_apdu_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reversal_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepeatedResponseMessageBody::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
