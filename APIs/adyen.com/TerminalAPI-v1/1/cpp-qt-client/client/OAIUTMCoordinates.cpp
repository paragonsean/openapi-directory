/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUTMCoordinates.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUTMCoordinates::OAIUTMCoordinates(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUTMCoordinates::OAIUTMCoordinates() {
    this->initializeModel();
}

OAIUTMCoordinates::~OAIUTMCoordinates() {}

void OAIUTMCoordinates::initializeModel() {

    m_utm_eastward_isSet = false;
    m_utm_eastward_isValid = false;

    m_utm_northward_isSet = false;
    m_utm_northward_isValid = false;

    m_utm_zone_isSet = false;
    m_utm_zone_isValid = false;
}

void OAIUTMCoordinates::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUTMCoordinates::fromJsonObject(QJsonObject json) {

    m_utm_eastward_isValid = ::OpenAPI::fromJsonValue(m_utm_eastward, json[QString("UTMEastward")]);
    m_utm_eastward_isSet = !json[QString("UTMEastward")].isNull() && m_utm_eastward_isValid;

    m_utm_northward_isValid = ::OpenAPI::fromJsonValue(m_utm_northward, json[QString("UTMNorthward")]);
    m_utm_northward_isSet = !json[QString("UTMNorthward")].isNull() && m_utm_northward_isValid;

    m_utm_zone_isValid = ::OpenAPI::fromJsonValue(m_utm_zone, json[QString("UTMZone")]);
    m_utm_zone_isSet = !json[QString("UTMZone")].isNull() && m_utm_zone_isValid;
}

QString OAIUTMCoordinates::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUTMCoordinates::asJsonObject() const {
    QJsonObject obj;
    if (m_utm_eastward_isSet) {
        obj.insert(QString("UTMEastward"), ::OpenAPI::toJsonValue(m_utm_eastward));
    }
    if (m_utm_northward_isSet) {
        obj.insert(QString("UTMNorthward"), ::OpenAPI::toJsonValue(m_utm_northward));
    }
    if (m_utm_zone_isSet) {
        obj.insert(QString("UTMZone"), ::OpenAPI::toJsonValue(m_utm_zone));
    }
    return obj;
}

QString OAIUTMCoordinates::getUtmEastward() const {
    return m_utm_eastward;
}
void OAIUTMCoordinates::setUtmEastward(const QString &utm_eastward) {
    m_utm_eastward = utm_eastward;
    m_utm_eastward_isSet = true;
}

bool OAIUTMCoordinates::is_utm_eastward_Set() const{
    return m_utm_eastward_isSet;
}

bool OAIUTMCoordinates::is_utm_eastward_Valid() const{
    return m_utm_eastward_isValid;
}

QString OAIUTMCoordinates::getUtmNorthward() const {
    return m_utm_northward;
}
void OAIUTMCoordinates::setUtmNorthward(const QString &utm_northward) {
    m_utm_northward = utm_northward;
    m_utm_northward_isSet = true;
}

bool OAIUTMCoordinates::is_utm_northward_Set() const{
    return m_utm_northward_isSet;
}

bool OAIUTMCoordinates::is_utm_northward_Valid() const{
    return m_utm_northward_isValid;
}

QString OAIUTMCoordinates::getUtmZone() const {
    return m_utm_zone;
}
void OAIUTMCoordinates::setUtmZone(const QString &utm_zone) {
    m_utm_zone = utm_zone;
    m_utm_zone_isSet = true;
}

bool OAIUTMCoordinates::is_utm_zone_Set() const{
    return m_utm_zone_isSet;
}

bool OAIUTMCoordinates::is_utm_zone_Valid() const{
    return m_utm_zone_isValid;
}

bool OAIUTMCoordinates::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_utm_eastward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_northward_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_utm_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUTMCoordinates::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_utm_eastward_isValid && m_utm_northward_isValid && m_utm_zone_isValid && true;
}

} // namespace OpenAPI
