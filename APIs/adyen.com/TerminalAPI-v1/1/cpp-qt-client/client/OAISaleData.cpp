/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaleData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaleData::OAISaleData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaleData::OAISaleData() {
    this->initializeModel();
}

OAISaleData::~OAISaleData() {}

void OAISaleData::initializeModel() {

    m_customer_order_id_isSet = false;
    m_customer_order_id_isValid = false;

    m_customer_order_req_isSet = false;
    m_customer_order_req_isValid = false;

    m_operator_id_isSet = false;
    m_operator_id_isValid = false;

    m_operator_language_isSet = false;
    m_operator_language_isValid = false;

    m_sale_reference_id_isSet = false;
    m_sale_reference_id_isValid = false;

    m_sale_terminal_data_isSet = false;
    m_sale_terminal_data_isValid = false;

    m_sale_to_acquirer_data_isSet = false;
    m_sale_to_acquirer_data_isValid = false;

    m_sale_to_issuer_data_isSet = false;
    m_sale_to_issuer_data_isValid = false;

    m_sale_to_poi_data_isSet = false;
    m_sale_to_poi_data_isValid = false;

    m_sale_transaction_id_isSet = false;
    m_sale_transaction_id_isValid = false;

    m_shift_number_isSet = false;
    m_shift_number_isValid = false;

    m_token_requested_type_isSet = false;
    m_token_requested_type_isValid = false;
}

void OAISaleData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaleData::fromJsonObject(QJsonObject json) {

    m_customer_order_id_isValid = ::OpenAPI::fromJsonValue(m_customer_order_id, json[QString("CustomerOrderID")]);
    m_customer_order_id_isSet = !json[QString("CustomerOrderID")].isNull() && m_customer_order_id_isValid;

    m_customer_order_req_isValid = ::OpenAPI::fromJsonValue(m_customer_order_req, json[QString("CustomerOrderReq")]);
    m_customer_order_req_isSet = !json[QString("CustomerOrderReq")].isNull() && m_customer_order_req_isValid;

    m_operator_id_isValid = ::OpenAPI::fromJsonValue(m_operator_id, json[QString("OperatorID")]);
    m_operator_id_isSet = !json[QString("OperatorID")].isNull() && m_operator_id_isValid;

    m_operator_language_isValid = ::OpenAPI::fromJsonValue(m_operator_language, json[QString("OperatorLanguage")]);
    m_operator_language_isSet = !json[QString("OperatorLanguage")].isNull() && m_operator_language_isValid;

    m_sale_reference_id_isValid = ::OpenAPI::fromJsonValue(m_sale_reference_id, json[QString("SaleReferenceID")]);
    m_sale_reference_id_isSet = !json[QString("SaleReferenceID")].isNull() && m_sale_reference_id_isValid;

    m_sale_terminal_data_isValid = ::OpenAPI::fromJsonValue(m_sale_terminal_data, json[QString("SaleTerminalData")]);
    m_sale_terminal_data_isSet = !json[QString("SaleTerminalData")].isNull() && m_sale_terminal_data_isValid;

    m_sale_to_acquirer_data_isValid = ::OpenAPI::fromJsonValue(m_sale_to_acquirer_data, json[QString("SaleToAcquirerData")]);
    m_sale_to_acquirer_data_isSet = !json[QString("SaleToAcquirerData")].isNull() && m_sale_to_acquirer_data_isValid;

    m_sale_to_issuer_data_isValid = ::OpenAPI::fromJsonValue(m_sale_to_issuer_data, json[QString("SaleToIssuerData")]);
    m_sale_to_issuer_data_isSet = !json[QString("SaleToIssuerData")].isNull() && m_sale_to_issuer_data_isValid;

    m_sale_to_poi_data_isValid = ::OpenAPI::fromJsonValue(m_sale_to_poi_data, json[QString("SaleToPOIData")]);
    m_sale_to_poi_data_isSet = !json[QString("SaleToPOIData")].isNull() && m_sale_to_poi_data_isValid;

    m_sale_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_sale_transaction_id, json[QString("SaleTransactionID")]);
    m_sale_transaction_id_isSet = !json[QString("SaleTransactionID")].isNull() && m_sale_transaction_id_isValid;

    m_shift_number_isValid = ::OpenAPI::fromJsonValue(m_shift_number, json[QString("ShiftNumber")]);
    m_shift_number_isSet = !json[QString("ShiftNumber")].isNull() && m_shift_number_isValid;

    m_token_requested_type_isValid = ::OpenAPI::fromJsonValue(m_token_requested_type, json[QString("TokenRequestedType")]);
    m_token_requested_type_isSet = !json[QString("TokenRequestedType")].isNull() && m_token_requested_type_isValid;
}

QString OAISaleData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaleData::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_order_id_isSet) {
        obj.insert(QString("CustomerOrderID"), ::OpenAPI::toJsonValue(m_customer_order_id));
    }
    if (m_customer_order_req.size() > 0) {
        obj.insert(QString("CustomerOrderReq"), ::OpenAPI::toJsonValue(m_customer_order_req));
    }
    if (m_operator_id_isSet) {
        obj.insert(QString("OperatorID"), ::OpenAPI::toJsonValue(m_operator_id));
    }
    if (m_operator_language_isSet) {
        obj.insert(QString("OperatorLanguage"), ::OpenAPI::toJsonValue(m_operator_language));
    }
    if (m_sale_reference_id_isSet) {
        obj.insert(QString("SaleReferenceID"), ::OpenAPI::toJsonValue(m_sale_reference_id));
    }
    if (m_sale_terminal_data.isSet()) {
        obj.insert(QString("SaleTerminalData"), ::OpenAPI::toJsonValue(m_sale_terminal_data));
    }
    if (m_sale_to_acquirer_data_isSet) {
        obj.insert(QString("SaleToAcquirerData"), ::OpenAPI::toJsonValue(m_sale_to_acquirer_data));
    }
    if (m_sale_to_issuer_data.isSet()) {
        obj.insert(QString("SaleToIssuerData"), ::OpenAPI::toJsonValue(m_sale_to_issuer_data));
    }
    if (m_sale_to_poi_data_isSet) {
        obj.insert(QString("SaleToPOIData"), ::OpenAPI::toJsonValue(m_sale_to_poi_data));
    }
    if (m_sale_transaction_id.isSet()) {
        obj.insert(QString("SaleTransactionID"), ::OpenAPI::toJsonValue(m_sale_transaction_id));
    }
    if (m_shift_number_isSet) {
        obj.insert(QString("ShiftNumber"), ::OpenAPI::toJsonValue(m_shift_number));
    }
    if (m_token_requested_type.isSet()) {
        obj.insert(QString("TokenRequestedType"), ::OpenAPI::toJsonValue(m_token_requested_type));
    }
    return obj;
}

QString OAISaleData::getCustomerOrderId() const {
    return m_customer_order_id;
}
void OAISaleData::setCustomerOrderId(const QString &customer_order_id) {
    m_customer_order_id = customer_order_id;
    m_customer_order_id_isSet = true;
}

bool OAISaleData::is_customer_order_id_Set() const{
    return m_customer_order_id_isSet;
}

bool OAISaleData::is_customer_order_id_Valid() const{
    return m_customer_order_id_isValid;
}

QList<QString> OAISaleData::getCustomerOrderReq() const {
    return m_customer_order_req;
}
void OAISaleData::setCustomerOrderReq(const QList<QString> &customer_order_req) {
    m_customer_order_req = customer_order_req;
    m_customer_order_req_isSet = true;
}

bool OAISaleData::is_customer_order_req_Set() const{
    return m_customer_order_req_isSet;
}

bool OAISaleData::is_customer_order_req_Valid() const{
    return m_customer_order_req_isValid;
}

QString OAISaleData::getOperatorId() const {
    return m_operator_id;
}
void OAISaleData::setOperatorId(const QString &operator_id) {
    m_operator_id = operator_id;
    m_operator_id_isSet = true;
}

bool OAISaleData::is_operator_id_Set() const{
    return m_operator_id_isSet;
}

bool OAISaleData::is_operator_id_Valid() const{
    return m_operator_id_isValid;
}

QString OAISaleData::getOperatorLanguage() const {
    return m_operator_language;
}
void OAISaleData::setOperatorLanguage(const QString &operator_language) {
    m_operator_language = operator_language;
    m_operator_language_isSet = true;
}

bool OAISaleData::is_operator_language_Set() const{
    return m_operator_language_isSet;
}

bool OAISaleData::is_operator_language_Valid() const{
    return m_operator_language_isValid;
}

QString OAISaleData::getSaleReferenceId() const {
    return m_sale_reference_id;
}
void OAISaleData::setSaleReferenceId(const QString &sale_reference_id) {
    m_sale_reference_id = sale_reference_id;
    m_sale_reference_id_isSet = true;
}

bool OAISaleData::is_sale_reference_id_Set() const{
    return m_sale_reference_id_isSet;
}

bool OAISaleData::is_sale_reference_id_Valid() const{
    return m_sale_reference_id_isValid;
}

OAISaleTerminalData OAISaleData::getSaleTerminalData() const {
    return m_sale_terminal_data;
}
void OAISaleData::setSaleTerminalData(const OAISaleTerminalData &sale_terminal_data) {
    m_sale_terminal_data = sale_terminal_data;
    m_sale_terminal_data_isSet = true;
}

bool OAISaleData::is_sale_terminal_data_Set() const{
    return m_sale_terminal_data_isSet;
}

bool OAISaleData::is_sale_terminal_data_Valid() const{
    return m_sale_terminal_data_isValid;
}

QString OAISaleData::getSaleToAcquirerData() const {
    return m_sale_to_acquirer_data;
}
void OAISaleData::setSaleToAcquirerData(const QString &sale_to_acquirer_data) {
    m_sale_to_acquirer_data = sale_to_acquirer_data;
    m_sale_to_acquirer_data_isSet = true;
}

bool OAISaleData::is_sale_to_acquirer_data_Set() const{
    return m_sale_to_acquirer_data_isSet;
}

bool OAISaleData::is_sale_to_acquirer_data_Valid() const{
    return m_sale_to_acquirer_data_isValid;
}

OAISaleToIssuerData OAISaleData::getSaleToIssuerData() const {
    return m_sale_to_issuer_data;
}
void OAISaleData::setSaleToIssuerData(const OAISaleToIssuerData &sale_to_issuer_data) {
    m_sale_to_issuer_data = sale_to_issuer_data;
    m_sale_to_issuer_data_isSet = true;
}

bool OAISaleData::is_sale_to_issuer_data_Set() const{
    return m_sale_to_issuer_data_isSet;
}

bool OAISaleData::is_sale_to_issuer_data_Valid() const{
    return m_sale_to_issuer_data_isValid;
}

QString OAISaleData::getSaleToPoiData() const {
    return m_sale_to_poi_data;
}
void OAISaleData::setSaleToPoiData(const QString &sale_to_poi_data) {
    m_sale_to_poi_data = sale_to_poi_data;
    m_sale_to_poi_data_isSet = true;
}

bool OAISaleData::is_sale_to_poi_data_Set() const{
    return m_sale_to_poi_data_isSet;
}

bool OAISaleData::is_sale_to_poi_data_Valid() const{
    return m_sale_to_poi_data_isValid;
}

OAITransactionIDType OAISaleData::getSaleTransactionId() const {
    return m_sale_transaction_id;
}
void OAISaleData::setSaleTransactionId(const OAITransactionIDType &sale_transaction_id) {
    m_sale_transaction_id = sale_transaction_id;
    m_sale_transaction_id_isSet = true;
}

bool OAISaleData::is_sale_transaction_id_Set() const{
    return m_sale_transaction_id_isSet;
}

bool OAISaleData::is_sale_transaction_id_Valid() const{
    return m_sale_transaction_id_isValid;
}

QString OAISaleData::getShiftNumber() const {
    return m_shift_number;
}
void OAISaleData::setShiftNumber(const QString &shift_number) {
    m_shift_number = shift_number;
    m_shift_number_isSet = true;
}

bool OAISaleData::is_shift_number_Set() const{
    return m_shift_number_isSet;
}

bool OAISaleData::is_shift_number_Valid() const{
    return m_shift_number_isValid;
}

OAITokenRequestedType OAISaleData::getTokenRequestedType() const {
    return m_token_requested_type;
}
void OAISaleData::setTokenRequestedType(const OAITokenRequestedType &token_requested_type) {
    m_token_requested_type = token_requested_type;
    m_token_requested_type_isSet = true;
}

bool OAISaleData::is_token_requested_type_Set() const{
    return m_token_requested_type_isSet;
}

bool OAISaleData::is_token_requested_type_Valid() const{
    return m_token_requested_type_isValid;
}

bool OAISaleData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_order_req.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_terminal_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_to_acquirer_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_to_issuer_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_to_poi_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_transaction_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shift_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_requested_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaleData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sale_transaction_id_isValid && true;
}

} // namespace OpenAPI
