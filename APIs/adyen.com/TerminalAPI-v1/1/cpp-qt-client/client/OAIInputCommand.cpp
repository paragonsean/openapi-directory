/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputCommand::OAIInputCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputCommand::OAIInputCommand() {
    this->initializeModel();
}

OAIInputCommand::~OAIInputCommand() {}

void OAIInputCommand::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIInputCommand::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIInputCommand::fromJson(QString jsonString) {
    
    if ( jsonString.compare("DecimalString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::DECIMALSTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DigitString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::DIGITSTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetAnyKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::GETANYKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetConfirmation", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::GETCONFIRMATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetFunctionKey", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::GETFUNCTIONKEY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("GetMenuEntry", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::GETMENUENTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Password", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::PASSWORD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SiteManager", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::SITEMANAGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TextString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIInputCommand::TEXTSTRING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIInputCommand::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIInputCommand::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIInputCommand::DECIMALSTRING:
            val = "DecimalString";
            break;
        case eOAIInputCommand::DIGITSTRING:
            val = "DigitString";
            break;
        case eOAIInputCommand::GETANYKEY:
            val = "GetAnyKey";
            break;
        case eOAIInputCommand::GETCONFIRMATION:
            val = "GetConfirmation";
            break;
        case eOAIInputCommand::GETFUNCTIONKEY:
            val = "GetFunctionKey";
            break;
        case eOAIInputCommand::GETMENUENTRY:
            val = "GetMenuEntry";
            break;
        case eOAIInputCommand::PASSWORD:
            val = "Password";
            break;
        case eOAIInputCommand::SITEMANAGER:
            val = "SiteManager";
            break;
        case eOAIInputCommand::TEXTSTRING:
            val = "TextString";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIInputCommand::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIInputCommand::eOAIInputCommand OAIInputCommand::getValue() const {
    return m_value;
}

void OAIInputCommand::setValue(const OAIInputCommand::eOAIInputCommand& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIInputCommand::isSet() const {
    
    return m_value_isSet;
}

bool OAIInputCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
