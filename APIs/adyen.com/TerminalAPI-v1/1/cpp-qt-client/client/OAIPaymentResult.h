/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPaymentResult.h
 *
 * 
 */

#ifndef OAIPaymentResult_H
#define OAIPaymentResult_H

#include <QJsonObject>

#include "OAIAmountsResp.h"
#include "OAICapturedSignature.h"
#include "OAICurrencyConversion.h"
#include "OAIInstalment.h"
#include "OAIPaymentAcquirerData.h"
#include "OAIPaymentInstrumentData.h"
#include "OAIPaymentType.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAmountsResp;
class OAICapturedSignature;
class OAICurrencyConversion;
class OAIInstalment;
class OAIPaymentAcquirerData;
class OAIPaymentInstrumentData;

class OAIPaymentResult : public OAIObject {
public:
    OAIPaymentResult();
    OAIPaymentResult(QString json);
    ~OAIPaymentResult() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAmountsResp getAmountsResp() const;
    void setAmountsResp(const OAIAmountsResp &amounts_resp);
    bool is_amounts_resp_Set() const;
    bool is_amounts_resp_Valid() const;

    QList<QString> getAuthenticationMethod() const;
    void setAuthenticationMethod(const QList<QString> &authentication_method);
    bool is_authentication_method_Set() const;
    bool is_authentication_method_Valid() const;

    OAICapturedSignature getCapturedSignature() const;
    void setCapturedSignature(const OAICapturedSignature &captured_signature);
    bool is_captured_signature_Set() const;
    bool is_captured_signature_Valid() const;

    QList<OAICurrencyConversion> getCurrencyConversion() const;
    void setCurrencyConversion(const QList<OAICurrencyConversion> &currency_conversion);
    bool is_currency_conversion_Set() const;
    bool is_currency_conversion_Valid() const;

    QString getCustomerLanguage() const;
    void setCustomerLanguage(const QString &customer_language);
    bool is_customer_language_Set() const;
    bool is_customer_language_Valid() const;

    OAIInstalment getInstalment() const;
    void setInstalment(const OAIInstalment &instalment);
    bool is_instalment_Set() const;
    bool is_instalment_Valid() const;

    bool isMerchantOverrideFlag() const;
    void setMerchantOverrideFlag(const bool &merchant_override_flag);
    bool is_merchant_override_flag_Set() const;
    bool is_merchant_override_flag_Valid() const;

    bool isOnlineFlag() const;
    void setOnlineFlag(const bool &online_flag);
    bool is_online_flag_Set() const;
    bool is_online_flag_Valid() const;

    OAIPaymentAcquirerData getPaymentAcquirerData() const;
    void setPaymentAcquirerData(const OAIPaymentAcquirerData &payment_acquirer_data);
    bool is_payment_acquirer_data_Set() const;
    bool is_payment_acquirer_data_Valid() const;

    OAIPaymentInstrumentData getPaymentInstrumentData() const;
    void setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data);
    bool is_payment_instrument_data_Set() const;
    bool is_payment_instrument_data_Valid() const;

    OAIPaymentType getPaymentType() const;
    void setPaymentType(const OAIPaymentType &payment_type);
    bool is_payment_type_Set() const;
    bool is_payment_type_Valid() const;

    QString getProtectedSignature() const;
    void setProtectedSignature(const QString &protected_signature);
    bool is_protected_signature_Set() const;
    bool is_protected_signature_Valid() const;

    QDate getValidityDate() const;
    void setValidityDate(const QDate &validity_date);
    bool is_validity_date_Set() const;
    bool is_validity_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAmountsResp m_amounts_resp;
    bool m_amounts_resp_isSet;
    bool m_amounts_resp_isValid;

    QList<QString> m_authentication_method;
    bool m_authentication_method_isSet;
    bool m_authentication_method_isValid;

    OAICapturedSignature m_captured_signature;
    bool m_captured_signature_isSet;
    bool m_captured_signature_isValid;

    QList<OAICurrencyConversion> m_currency_conversion;
    bool m_currency_conversion_isSet;
    bool m_currency_conversion_isValid;

    QString m_customer_language;
    bool m_customer_language_isSet;
    bool m_customer_language_isValid;

    OAIInstalment m_instalment;
    bool m_instalment_isSet;
    bool m_instalment_isValid;

    bool m_merchant_override_flag;
    bool m_merchant_override_flag_isSet;
    bool m_merchant_override_flag_isValid;

    bool m_online_flag;
    bool m_online_flag_isSet;
    bool m_online_flag_isValid;

    OAIPaymentAcquirerData m_payment_acquirer_data;
    bool m_payment_acquirer_data_isSet;
    bool m_payment_acquirer_data_isValid;

    OAIPaymentInstrumentData m_payment_instrument_data;
    bool m_payment_instrument_data_isSet;
    bool m_payment_instrument_data_isValid;

    OAIPaymentType m_payment_type;
    bool m_payment_type_isSet;
    bool m_payment_type_isValid;

    QString m_protected_signature;
    bool m_protected_signature_isSet;
    bool m_protected_signature_isValid;

    QDate m_validity_date;
    bool m_validity_date_isSet;
    bool m_validity_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPaymentResult)

#endif // OAIPaymentResult_H
