/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaleItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaleItem::OAISaleItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaleItem::OAISaleItem() {
    this->initializeModel();
}

OAISaleItem::~OAISaleItem() {}

void OAISaleItem::initializeModel() {

    m_additional_product_info_isSet = false;
    m_additional_product_info_isValid = false;

    m_ean_upc_isSet = false;
    m_ean_upc_isValid = false;

    m_item_amount_isSet = false;
    m_item_amount_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_product_label_isSet = false;
    m_product_label_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sale_channel_isSet = false;
    m_sale_channel_isValid = false;

    m_tax_code_isSet = false;
    m_tax_code_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAISaleItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaleItem::fromJsonObject(QJsonObject json) {

    m_additional_product_info_isValid = ::OpenAPI::fromJsonValue(m_additional_product_info, json[QString("AdditionalProductInfo")]);
    m_additional_product_info_isSet = !json[QString("AdditionalProductInfo")].isNull() && m_additional_product_info_isValid;

    m_ean_upc_isValid = ::OpenAPI::fromJsonValue(m_ean_upc, json[QString("EanUpc")]);
    m_ean_upc_isSet = !json[QString("EanUpc")].isNull() && m_ean_upc_isValid;

    m_item_amount_isValid = ::OpenAPI::fromJsonValue(m_item_amount, json[QString("ItemAmount")]);
    m_item_amount_isSet = !json[QString("ItemAmount")].isNull() && m_item_amount_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("ItemID")]);
    m_item_id_isSet = !json[QString("ItemID")].isNull() && m_item_id_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_product_label_isValid = ::OpenAPI::fromJsonValue(m_product_label, json[QString("ProductLabel")]);
    m_product_label_isSet = !json[QString("ProductLabel")].isNull() && m_product_label_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("Quantity")]);
    m_quantity_isSet = !json[QString("Quantity")].isNull() && m_quantity_isValid;

    m_sale_channel_isValid = ::OpenAPI::fromJsonValue(m_sale_channel, json[QString("SaleChannel")]);
    m_sale_channel_isSet = !json[QString("SaleChannel")].isNull() && m_sale_channel_isValid;

    m_tax_code_isValid = ::OpenAPI::fromJsonValue(m_tax_code, json[QString("TaxCode")]);
    m_tax_code_isSet = !json[QString("TaxCode")].isNull() && m_tax_code_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("UnitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("UnitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("UnitPrice")]);
    m_unit_price_isSet = !json[QString("UnitPrice")].isNull() && m_unit_price_isValid;
}

QString OAISaleItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaleItem::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_product_info_isSet) {
        obj.insert(QString("AdditionalProductInfo"), ::OpenAPI::toJsonValue(m_additional_product_info));
    }
    if (m_ean_upc_isSet) {
        obj.insert(QString("EanUpc"), ::OpenAPI::toJsonValue(m_ean_upc));
    }
    if (m_item_amount_isSet) {
        obj.insert(QString("ItemAmount"), ::OpenAPI::toJsonValue(m_item_amount));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("ItemID"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_product_label_isSet) {
        obj.insert(QString("ProductLabel"), ::OpenAPI::toJsonValue(m_product_label));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("Quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sale_channel_isSet) {
        obj.insert(QString("SaleChannel"), ::OpenAPI::toJsonValue(m_sale_channel));
    }
    if (m_tax_code_isSet) {
        obj.insert(QString("TaxCode"), ::OpenAPI::toJsonValue(m_tax_code));
    }
    if (m_unit_of_measure.isSet()) {
        obj.insert(QString("UnitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("UnitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAISaleItem::getAdditionalProductInfo() const {
    return m_additional_product_info;
}
void OAISaleItem::setAdditionalProductInfo(const QString &additional_product_info) {
    m_additional_product_info = additional_product_info;
    m_additional_product_info_isSet = true;
}

bool OAISaleItem::is_additional_product_info_Set() const{
    return m_additional_product_info_isSet;
}

bool OAISaleItem::is_additional_product_info_Valid() const{
    return m_additional_product_info_isValid;
}

qint32 OAISaleItem::getEanUpc() const {
    return m_ean_upc;
}
void OAISaleItem::setEanUpc(const qint32 &ean_upc) {
    m_ean_upc = ean_upc;
    m_ean_upc_isSet = true;
}

bool OAISaleItem::is_ean_upc_Set() const{
    return m_ean_upc_isSet;
}

bool OAISaleItem::is_ean_upc_Valid() const{
    return m_ean_upc_isValid;
}

double OAISaleItem::getItemAmount() const {
    return m_item_amount;
}
void OAISaleItem::setItemAmount(const double &item_amount) {
    m_item_amount = item_amount;
    m_item_amount_isSet = true;
}

bool OAISaleItem::is_item_amount_Set() const{
    return m_item_amount_isSet;
}

bool OAISaleItem::is_item_amount_Valid() const{
    return m_item_amount_isValid;
}

qint32 OAISaleItem::getItemId() const {
    return m_item_id;
}
void OAISaleItem::setItemId(const qint32 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISaleItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISaleItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

qint32 OAISaleItem::getProductCode() const {
    return m_product_code;
}
void OAISaleItem::setProductCode(const qint32 &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAISaleItem::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAISaleItem::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAISaleItem::getProductLabel() const {
    return m_product_label;
}
void OAISaleItem::setProductLabel(const QString &product_label) {
    m_product_label = product_label;
    m_product_label_isSet = true;
}

bool OAISaleItem::is_product_label_Set() const{
    return m_product_label_isSet;
}

bool OAISaleItem::is_product_label_Valid() const{
    return m_product_label_isValid;
}

QString OAISaleItem::getQuantity() const {
    return m_quantity;
}
void OAISaleItem::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAISaleItem::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAISaleItem::is_quantity_Valid() const{
    return m_quantity_isValid;
}

qint32 OAISaleItem::getSaleChannel() const {
    return m_sale_channel;
}
void OAISaleItem::setSaleChannel(const qint32 &sale_channel) {
    m_sale_channel = sale_channel;
    m_sale_channel_isSet = true;
}

bool OAISaleItem::is_sale_channel_Set() const{
    return m_sale_channel_isSet;
}

bool OAISaleItem::is_sale_channel_Valid() const{
    return m_sale_channel_isValid;
}

qint32 OAISaleItem::getTaxCode() const {
    return m_tax_code;
}
void OAISaleItem::setTaxCode(const qint32 &tax_code) {
    m_tax_code = tax_code;
    m_tax_code_isSet = true;
}

bool OAISaleItem::is_tax_code_Set() const{
    return m_tax_code_isSet;
}

bool OAISaleItem::is_tax_code_Valid() const{
    return m_tax_code_isValid;
}

OAIUnitOfMeasure OAISaleItem::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAISaleItem::setUnitOfMeasure(const OAIUnitOfMeasure &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAISaleItem::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAISaleItem::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAISaleItem::getUnitPrice() const {
    return m_unit_price;
}
void OAISaleItem::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAISaleItem::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAISaleItem::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAISaleItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_product_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_channel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaleItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_item_amount_isValid && m_item_id_isValid && m_product_code_isValid && true;
}

} // namespace OpenAPI
