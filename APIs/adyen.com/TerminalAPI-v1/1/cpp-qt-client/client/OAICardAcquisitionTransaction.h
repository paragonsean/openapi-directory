/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICardAcquisitionTransaction.h
 *
 * 
 */

#ifndef OAICardAcquisitionTransaction_H
#define OAICardAcquisitionTransaction_H

#include <QJsonObject>

#include "OAILoyaltyHandling.h"
#include "OAIPaymentType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICardAcquisitionTransaction : public OAIObject {
public:
    OAICardAcquisitionTransaction();
    OAICardAcquisitionTransaction(QString json);
    ~OAICardAcquisitionTransaction() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowedLoyaltyBrand() const;
    void setAllowedLoyaltyBrand(const QList<QString> &allowed_loyalty_brand);
    bool is_allowed_loyalty_brand_Set() const;
    bool is_allowed_loyalty_brand_Valid() const;

    QList<QString> getAllowedPaymentBrand() const;
    void setAllowedPaymentBrand(const QList<QString> &allowed_payment_brand);
    bool is_allowed_payment_brand_Set() const;
    bool is_allowed_payment_brand_Valid() const;

    bool isCashBackFlag() const;
    void setCashBackFlag(const bool &cash_back_flag);
    bool is_cash_back_flag_Set() const;
    bool is_cash_back_flag_Valid() const;

    QString getCustomerLanguage() const;
    void setCustomerLanguage(const QString &customer_language);
    bool is_customer_language_Set() const;
    bool is_customer_language_Valid() const;

    bool isForceCustomerSelectionFlag() const;
    void setForceCustomerSelectionFlag(const bool &force_customer_selection_flag);
    bool is_force_customer_selection_flag_Set() const;
    bool is_force_customer_selection_flag_Valid() const;

    QList<QString> getForceEntryMode() const;
    void setForceEntryMode(const QList<QString> &force_entry_mode);
    bool is_force_entry_mode_Set() const;
    bool is_force_entry_mode_Valid() const;

    OAILoyaltyHandling getLoyaltyHandling() const;
    void setLoyaltyHandling(const OAILoyaltyHandling &loyalty_handling);
    bool is_loyalty_handling_Set() const;
    bool is_loyalty_handling_Valid() const;

    OAIPaymentType getPaymentType() const;
    void setPaymentType(const OAIPaymentType &payment_type);
    bool is_payment_type_Set() const;
    bool is_payment_type_Valid() const;

    double getTotalAmount() const;
    void setTotalAmount(const double &total_amount);
    bool is_total_amount_Set() const;
    bool is_total_amount_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allowed_loyalty_brand;
    bool m_allowed_loyalty_brand_isSet;
    bool m_allowed_loyalty_brand_isValid;

    QList<QString> m_allowed_payment_brand;
    bool m_allowed_payment_brand_isSet;
    bool m_allowed_payment_brand_isValid;

    bool m_cash_back_flag;
    bool m_cash_back_flag_isSet;
    bool m_cash_back_flag_isValid;

    QString m_customer_language;
    bool m_customer_language_isSet;
    bool m_customer_language_isValid;

    bool m_force_customer_selection_flag;
    bool m_force_customer_selection_flag_isSet;
    bool m_force_customer_selection_flag_isValid;

    QList<QString> m_force_entry_mode;
    bool m_force_entry_mode_isSet;
    bool m_force_entry_mode_isValid;

    OAILoyaltyHandling m_loyalty_handling;
    bool m_loyalty_handling_isSet;
    bool m_loyalty_handling_isValid;

    OAIPaymentType m_payment_type;
    bool m_payment_type_isSet;
    bool m_payment_type_isValid;

    double m_total_amount;
    bool m_total_amount_isSet;
    bool m_total_amount_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICardAcquisitionTransaction)

#endif // OAICardAcquisitionTransaction_H
