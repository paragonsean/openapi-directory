/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutputContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutputContent::OAIOutputContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutputContent::OAIOutputContent() {
    this->initializeModel();
}

OAIOutputContent::~OAIOutputContent() {}

void OAIOutputContent::initializeModel() {

    m_output_barcode_isSet = false;
    m_output_barcode_isValid = false;

    m_output_format_isSet = false;
    m_output_format_isValid = false;

    m_output_text_isSet = false;
    m_output_text_isValid = false;

    m_output_xhtml_isSet = false;
    m_output_xhtml_isValid = false;

    m_predefined_content_isSet = false;
    m_predefined_content_isValid = false;
}

void OAIOutputContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutputContent::fromJsonObject(QJsonObject json) {

    m_output_barcode_isValid = ::OpenAPI::fromJsonValue(m_output_barcode, json[QString("OutputBarcode")]);
    m_output_barcode_isSet = !json[QString("OutputBarcode")].isNull() && m_output_barcode_isValid;

    m_output_format_isValid = ::OpenAPI::fromJsonValue(m_output_format, json[QString("OutputFormat")]);
    m_output_format_isSet = !json[QString("OutputFormat")].isNull() && m_output_format_isValid;

    m_output_text_isValid = ::OpenAPI::fromJsonValue(m_output_text, json[QString("OutputText")]);
    m_output_text_isSet = !json[QString("OutputText")].isNull() && m_output_text_isValid;

    m_output_xhtml_isValid = ::OpenAPI::fromJsonValue(m_output_xhtml, json[QString("OutputXHTML")]);
    m_output_xhtml_isSet = !json[QString("OutputXHTML")].isNull() && m_output_xhtml_isValid;

    m_predefined_content_isValid = ::OpenAPI::fromJsonValue(m_predefined_content, json[QString("PredefinedContent")]);
    m_predefined_content_isSet = !json[QString("PredefinedContent")].isNull() && m_predefined_content_isValid;
}

QString OAIOutputContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutputContent::asJsonObject() const {
    QJsonObject obj;
    if (m_output_barcode.isSet()) {
        obj.insert(QString("OutputBarcode"), ::OpenAPI::toJsonValue(m_output_barcode));
    }
    if (m_output_format.isSet()) {
        obj.insert(QString("OutputFormat"), ::OpenAPI::toJsonValue(m_output_format));
    }
    if (m_output_text.size() > 0) {
        obj.insert(QString("OutputText"), ::OpenAPI::toJsonValue(m_output_text));
    }
    if (m_output_xhtml_isSet) {
        obj.insert(QString("OutputXHTML"), ::OpenAPI::toJsonValue(m_output_xhtml));
    }
    if (m_predefined_content.isSet()) {
        obj.insert(QString("PredefinedContent"), ::OpenAPI::toJsonValue(m_predefined_content));
    }
    return obj;
}

OAIOutputBarcode OAIOutputContent::getOutputBarcode() const {
    return m_output_barcode;
}
void OAIOutputContent::setOutputBarcode(const OAIOutputBarcode &output_barcode) {
    m_output_barcode = output_barcode;
    m_output_barcode_isSet = true;
}

bool OAIOutputContent::is_output_barcode_Set() const{
    return m_output_barcode_isSet;
}

bool OAIOutputContent::is_output_barcode_Valid() const{
    return m_output_barcode_isValid;
}

OAIOutputFormat OAIOutputContent::getOutputFormat() const {
    return m_output_format;
}
void OAIOutputContent::setOutputFormat(const OAIOutputFormat &output_format) {
    m_output_format = output_format;
    m_output_format_isSet = true;
}

bool OAIOutputContent::is_output_format_Set() const{
    return m_output_format_isSet;
}

bool OAIOutputContent::is_output_format_Valid() const{
    return m_output_format_isValid;
}

QList<OAIOutputText> OAIOutputContent::getOutputText() const {
    return m_output_text;
}
void OAIOutputContent::setOutputText(const QList<OAIOutputText> &output_text) {
    m_output_text = output_text;
    m_output_text_isSet = true;
}

bool OAIOutputContent::is_output_text_Set() const{
    return m_output_text_isSet;
}

bool OAIOutputContent::is_output_text_Valid() const{
    return m_output_text_isValid;
}

QString OAIOutputContent::getOutputXhtml() const {
    return m_output_xhtml;
}
void OAIOutputContent::setOutputXhtml(const QString &output_xhtml) {
    m_output_xhtml = output_xhtml;
    m_output_xhtml_isSet = true;
}

bool OAIOutputContent::is_output_xhtml_Set() const{
    return m_output_xhtml_isSet;
}

bool OAIOutputContent::is_output_xhtml_Valid() const{
    return m_output_xhtml_isValid;
}

OAIPredefinedContent OAIOutputContent::getPredefinedContent() const {
    return m_predefined_content;
}
void OAIOutputContent::setPredefinedContent(const OAIPredefinedContent &predefined_content) {
    m_predefined_content = predefined_content;
    m_predefined_content_isSet = true;
}

bool OAIOutputContent::is_predefined_content_Set() const{
    return m_predefined_content_isSet;
}

bool OAIOutputContent::is_predefined_content_Valid() const{
    return m_predefined_content_isValid;
}

bool OAIOutputContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_barcode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_text.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_xhtml_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_predefined_content.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutputContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_output_format_isValid && true;
}

} // namespace OpenAPI
