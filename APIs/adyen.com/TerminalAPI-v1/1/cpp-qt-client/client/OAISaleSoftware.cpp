/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISaleSoftware.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISaleSoftware::OAISaleSoftware(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISaleSoftware::OAISaleSoftware() {
    this->initializeModel();
}

OAISaleSoftware::~OAISaleSoftware() {}

void OAISaleSoftware::initializeModel() {

    m_application_name_isSet = false;
    m_application_name_isValid = false;

    m_certification_code_isSet = false;
    m_certification_code_isValid = false;

    m_manufacturer_id_isSet = false;
    m_manufacturer_id_isValid = false;

    m_software_version_isSet = false;
    m_software_version_isValid = false;
}

void OAISaleSoftware::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISaleSoftware::fromJsonObject(QJsonObject json) {

    m_application_name_isValid = ::OpenAPI::fromJsonValue(m_application_name, json[QString("ApplicationName")]);
    m_application_name_isSet = !json[QString("ApplicationName")].isNull() && m_application_name_isValid;

    m_certification_code_isValid = ::OpenAPI::fromJsonValue(m_certification_code, json[QString("CertificationCode")]);
    m_certification_code_isSet = !json[QString("CertificationCode")].isNull() && m_certification_code_isValid;

    m_manufacturer_id_isValid = ::OpenAPI::fromJsonValue(m_manufacturer_id, json[QString("ManufacturerID")]);
    m_manufacturer_id_isSet = !json[QString("ManufacturerID")].isNull() && m_manufacturer_id_isValid;

    m_software_version_isValid = ::OpenAPI::fromJsonValue(m_software_version, json[QString("SoftwareVersion")]);
    m_software_version_isSet = !json[QString("SoftwareVersion")].isNull() && m_software_version_isValid;
}

QString OAISaleSoftware::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISaleSoftware::asJsonObject() const {
    QJsonObject obj;
    if (m_application_name_isSet) {
        obj.insert(QString("ApplicationName"), ::OpenAPI::toJsonValue(m_application_name));
    }
    if (m_certification_code_isSet) {
        obj.insert(QString("CertificationCode"), ::OpenAPI::toJsonValue(m_certification_code));
    }
    if (m_manufacturer_id_isSet) {
        obj.insert(QString("ManufacturerID"), ::OpenAPI::toJsonValue(m_manufacturer_id));
    }
    if (m_software_version_isSet) {
        obj.insert(QString("SoftwareVersion"), ::OpenAPI::toJsonValue(m_software_version));
    }
    return obj;
}

QString OAISaleSoftware::getApplicationName() const {
    return m_application_name;
}
void OAISaleSoftware::setApplicationName(const QString &application_name) {
    m_application_name = application_name;
    m_application_name_isSet = true;
}

bool OAISaleSoftware::is_application_name_Set() const{
    return m_application_name_isSet;
}

bool OAISaleSoftware::is_application_name_Valid() const{
    return m_application_name_isValid;
}

QString OAISaleSoftware::getCertificationCode() const {
    return m_certification_code;
}
void OAISaleSoftware::setCertificationCode(const QString &certification_code) {
    m_certification_code = certification_code;
    m_certification_code_isSet = true;
}

bool OAISaleSoftware::is_certification_code_Set() const{
    return m_certification_code_isSet;
}

bool OAISaleSoftware::is_certification_code_Valid() const{
    return m_certification_code_isValid;
}

QString OAISaleSoftware::getManufacturerId() const {
    return m_manufacturer_id;
}
void OAISaleSoftware::setManufacturerId(const QString &manufacturer_id) {
    m_manufacturer_id = manufacturer_id;
    m_manufacturer_id_isSet = true;
}

bool OAISaleSoftware::is_manufacturer_id_Set() const{
    return m_manufacturer_id_isSet;
}

bool OAISaleSoftware::is_manufacturer_id_Valid() const{
    return m_manufacturer_id_isValid;
}

QString OAISaleSoftware::getSoftwareVersion() const {
    return m_software_version;
}
void OAISaleSoftware::setSoftwareVersion(const QString &software_version) {
    m_software_version = software_version;
    m_software_version_isSet = true;
}

bool OAISaleSoftware::is_software_version_Set() const{
    return m_software_version_isSet;
}

bool OAISaleSoftware::is_software_version_Valid() const{
    return m_software_version_isValid;
}

bool OAISaleSoftware::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certification_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISaleSoftware::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_application_name_isValid && m_certification_code_isValid && m_manufacturer_id_isValid && m_software_version_isValid && true;
}

} // namespace OpenAPI
