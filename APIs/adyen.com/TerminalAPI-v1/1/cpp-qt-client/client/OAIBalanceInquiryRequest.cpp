/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBalanceInquiryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBalanceInquiryRequest::OAIBalanceInquiryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBalanceInquiryRequest::OAIBalanceInquiryRequest() {
    this->initializeModel();
}

OAIBalanceInquiryRequest::~OAIBalanceInquiryRequest() {}

void OAIBalanceInquiryRequest::initializeModel() {

    m_loyalty_account_req_isSet = false;
    m_loyalty_account_req_isValid = false;

    m_payment_account_req_isSet = false;
    m_payment_account_req_isValid = false;
}

void OAIBalanceInquiryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBalanceInquiryRequest::fromJsonObject(QJsonObject json) {

    m_loyalty_account_req_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account_req, json[QString("LoyaltyAccountReq")]);
    m_loyalty_account_req_isSet = !json[QString("LoyaltyAccountReq")].isNull() && m_loyalty_account_req_isValid;

    m_payment_account_req_isValid = ::OpenAPI::fromJsonValue(m_payment_account_req, json[QString("PaymentAccountReq")]);
    m_payment_account_req_isSet = !json[QString("PaymentAccountReq")].isNull() && m_payment_account_req_isValid;
}

QString OAIBalanceInquiryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBalanceInquiryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_account_req.isSet()) {
        obj.insert(QString("LoyaltyAccountReq"), ::OpenAPI::toJsonValue(m_loyalty_account_req));
    }
    if (m_payment_account_req.isSet()) {
        obj.insert(QString("PaymentAccountReq"), ::OpenAPI::toJsonValue(m_payment_account_req));
    }
    return obj;
}

OAILoyaltyAccountReq OAIBalanceInquiryRequest::getLoyaltyAccountReq() const {
    return m_loyalty_account_req;
}
void OAIBalanceInquiryRequest::setLoyaltyAccountReq(const OAILoyaltyAccountReq &loyalty_account_req) {
    m_loyalty_account_req = loyalty_account_req;
    m_loyalty_account_req_isSet = true;
}

bool OAIBalanceInquiryRequest::is_loyalty_account_req_Set() const{
    return m_loyalty_account_req_isSet;
}

bool OAIBalanceInquiryRequest::is_loyalty_account_req_Valid() const{
    return m_loyalty_account_req_isValid;
}

OAIPaymentAccountReq OAIBalanceInquiryRequest::getPaymentAccountReq() const {
    return m_payment_account_req;
}
void OAIBalanceInquiryRequest::setPaymentAccountReq(const OAIPaymentAccountReq &payment_account_req) {
    m_payment_account_req = payment_account_req;
    m_payment_account_req_isSet = true;
}

bool OAIBalanceInquiryRequest::is_payment_account_req_Set() const{
    return m_payment_account_req_isSet;
}

bool OAIBalanceInquiryRequest::is_payment_account_req_Valid() const{
    return m_payment_account_req_isValid;
}

bool OAIBalanceInquiryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_account_req.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_account_req.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBalanceInquiryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
