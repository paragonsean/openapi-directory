/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInputUpdate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInputUpdate::OAIInputUpdate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInputUpdate::OAIInputUpdate() {
    this->initializeModel();
}

OAIInputUpdate::~OAIInputUpdate() {}

void OAIInputUpdate::initializeModel() {

    m_max_decimal_length_isSet = false;
    m_max_decimal_length_isValid = false;

    m_max_length_isSet = false;
    m_max_length_isValid = false;

    m_menu_entry_isSet = false;
    m_menu_entry_isValid = false;

    m_message_reference_isSet = false;
    m_message_reference_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_output_content_isSet = false;
    m_output_content_isValid = false;

    m_output_signature_isSet = false;
    m_output_signature_isValid = false;
}

void OAIInputUpdate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInputUpdate::fromJsonObject(QJsonObject json) {

    m_max_decimal_length_isValid = ::OpenAPI::fromJsonValue(m_max_decimal_length, json[QString("MaxDecimalLength")]);
    m_max_decimal_length_isSet = !json[QString("MaxDecimalLength")].isNull() && m_max_decimal_length_isValid;

    m_max_length_isValid = ::OpenAPI::fromJsonValue(m_max_length, json[QString("MaxLength")]);
    m_max_length_isSet = !json[QString("MaxLength")].isNull() && m_max_length_isValid;

    m_menu_entry_isValid = ::OpenAPI::fromJsonValue(m_menu_entry, json[QString("MenuEntry")]);
    m_menu_entry_isSet = !json[QString("MenuEntry")].isNull() && m_menu_entry_isValid;

    m_message_reference_isValid = ::OpenAPI::fromJsonValue(m_message_reference, json[QString("MessageReference")]);
    m_message_reference_isSet = !json[QString("MessageReference")].isNull() && m_message_reference_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("MinLength")]);
    m_min_length_isSet = !json[QString("MinLength")].isNull() && m_min_length_isValid;

    m_output_content_isValid = ::OpenAPI::fromJsonValue(m_output_content, json[QString("OutputContent")]);
    m_output_content_isSet = !json[QString("OutputContent")].isNull() && m_output_content_isValid;

    m_output_signature_isValid = ::OpenAPI::fromJsonValue(m_output_signature, json[QString("OutputSignature")]);
    m_output_signature_isSet = !json[QString("OutputSignature")].isNull() && m_output_signature_isValid;
}

QString OAIInputUpdate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInputUpdate::asJsonObject() const {
    QJsonObject obj;
    if (m_max_decimal_length_isSet) {
        obj.insert(QString("MaxDecimalLength"), ::OpenAPI::toJsonValue(m_max_decimal_length));
    }
    if (m_max_length_isSet) {
        obj.insert(QString("MaxLength"), ::OpenAPI::toJsonValue(m_max_length));
    }
    if (m_menu_entry.size() > 0) {
        obj.insert(QString("MenuEntry"), ::OpenAPI::toJsonValue(m_menu_entry));
    }
    if (m_message_reference.isSet()) {
        obj.insert(QString("MessageReference"), ::OpenAPI::toJsonValue(m_message_reference));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("MinLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_output_content.isSet()) {
        obj.insert(QString("OutputContent"), ::OpenAPI::toJsonValue(m_output_content));
    }
    if (m_output_signature_isSet) {
        obj.insert(QString("OutputSignature"), ::OpenAPI::toJsonValue(m_output_signature));
    }
    return obj;
}

qint32 OAIInputUpdate::getMaxDecimalLength() const {
    return m_max_decimal_length;
}
void OAIInputUpdate::setMaxDecimalLength(const qint32 &max_decimal_length) {
    m_max_decimal_length = max_decimal_length;
    m_max_decimal_length_isSet = true;
}

bool OAIInputUpdate::is_max_decimal_length_Set() const{
    return m_max_decimal_length_isSet;
}

bool OAIInputUpdate::is_max_decimal_length_Valid() const{
    return m_max_decimal_length_isValid;
}

qint32 OAIInputUpdate::getMaxLength() const {
    return m_max_length;
}
void OAIInputUpdate::setMaxLength(const qint32 &max_length) {
    m_max_length = max_length;
    m_max_length_isSet = true;
}

bool OAIInputUpdate::is_max_length_Set() const{
    return m_max_length_isSet;
}

bool OAIInputUpdate::is_max_length_Valid() const{
    return m_max_length_isValid;
}

QList<OAIMenuEntry> OAIInputUpdate::getMenuEntry() const {
    return m_menu_entry;
}
void OAIInputUpdate::setMenuEntry(const QList<OAIMenuEntry> &menu_entry) {
    m_menu_entry = menu_entry;
    m_menu_entry_isSet = true;
}

bool OAIInputUpdate::is_menu_entry_Set() const{
    return m_menu_entry_isSet;
}

bool OAIInputUpdate::is_menu_entry_Valid() const{
    return m_menu_entry_isValid;
}

OAIMessageReference OAIInputUpdate::getMessageReference() const {
    return m_message_reference;
}
void OAIInputUpdate::setMessageReference(const OAIMessageReference &message_reference) {
    m_message_reference = message_reference;
    m_message_reference_isSet = true;
}

bool OAIInputUpdate::is_message_reference_Set() const{
    return m_message_reference_isSet;
}

bool OAIInputUpdate::is_message_reference_Valid() const{
    return m_message_reference_isValid;
}

qint32 OAIInputUpdate::getMinLength() const {
    return m_min_length;
}
void OAIInputUpdate::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIInputUpdate::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIInputUpdate::is_min_length_Valid() const{
    return m_min_length_isValid;
}

OAIOutputContent OAIInputUpdate::getOutputContent() const {
    return m_output_content;
}
void OAIInputUpdate::setOutputContent(const OAIOutputContent &output_content) {
    m_output_content = output_content;
    m_output_content_isSet = true;
}

bool OAIInputUpdate::is_output_content_Set() const{
    return m_output_content_isSet;
}

bool OAIInputUpdate::is_output_content_Valid() const{
    return m_output_content_isValid;
}

QString OAIInputUpdate::getOutputSignature() const {
    return m_output_signature;
}
void OAIInputUpdate::setOutputSignature(const QString &output_signature) {
    m_output_signature = output_signature;
    m_output_signature_isSet = true;
}

bool OAIInputUpdate::is_output_signature_Set() const{
    return m_output_signature_isSet;
}

bool OAIInputUpdate::is_output_signature_Valid() const{
    return m_output_signature_isValid;
}

bool OAIInputUpdate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_decimal_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_menu_entry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_signature_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInputUpdate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_reference_isValid && m_output_content_isValid && true;
}

} // namespace OpenAPI
