/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardAcquisitionResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardAcquisitionResponse::OAICardAcquisitionResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardAcquisitionResponse::OAICardAcquisitionResponse() {
    this->initializeModel();
}

OAICardAcquisitionResponse::~OAICardAcquisitionResponse() {}

void OAICardAcquisitionResponse::initializeModel() {

    m_customer_language_isSet = false;
    m_customer_language_isValid = false;

    m_loyalty_account_isSet = false;
    m_loyalty_account_isValid = false;

    m_poi_data_isSet = false;
    m_poi_data_isValid = false;

    m_payment_brand_isSet = false;
    m_payment_brand_isValid = false;

    m_payment_instrument_data_isSet = false;
    m_payment_instrument_data_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;
}

void OAICardAcquisitionResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardAcquisitionResponse::fromJsonObject(QJsonObject json) {

    m_customer_language_isValid = ::OpenAPI::fromJsonValue(m_customer_language, json[QString("CustomerLanguage")]);
    m_customer_language_isSet = !json[QString("CustomerLanguage")].isNull() && m_customer_language_isValid;

    m_loyalty_account_isValid = ::OpenAPI::fromJsonValue(m_loyalty_account, json[QString("LoyaltyAccount")]);
    m_loyalty_account_isSet = !json[QString("LoyaltyAccount")].isNull() && m_loyalty_account_isValid;

    m_poi_data_isValid = ::OpenAPI::fromJsonValue(m_poi_data, json[QString("POIData")]);
    m_poi_data_isSet = !json[QString("POIData")].isNull() && m_poi_data_isValid;

    m_payment_brand_isValid = ::OpenAPI::fromJsonValue(m_payment_brand, json[QString("PaymentBrand")]);
    m_payment_brand_isSet = !json[QString("PaymentBrand")].isNull() && m_payment_brand_isValid;

    m_payment_instrument_data_isValid = ::OpenAPI::fromJsonValue(m_payment_instrument_data, json[QString("PaymentInstrumentData")]);
    m_payment_instrument_data_isSet = !json[QString("PaymentInstrumentData")].isNull() && m_payment_instrument_data_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;
}

QString OAICardAcquisitionResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardAcquisitionResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_language_isSet) {
        obj.insert(QString("CustomerLanguage"), ::OpenAPI::toJsonValue(m_customer_language));
    }
    if (m_loyalty_account.size() > 0) {
        obj.insert(QString("LoyaltyAccount"), ::OpenAPI::toJsonValue(m_loyalty_account));
    }
    if (m_poi_data.isSet()) {
        obj.insert(QString("POIData"), ::OpenAPI::toJsonValue(m_poi_data));
    }
    if (m_payment_brand.size() > 0) {
        obj.insert(QString("PaymentBrand"), ::OpenAPI::toJsonValue(m_payment_brand));
    }
    if (m_payment_instrument_data.isSet()) {
        obj.insert(QString("PaymentInstrumentData"), ::OpenAPI::toJsonValue(m_payment_instrument_data));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    return obj;
}

QString OAICardAcquisitionResponse::getCustomerLanguage() const {
    return m_customer_language;
}
void OAICardAcquisitionResponse::setCustomerLanguage(const QString &customer_language) {
    m_customer_language = customer_language;
    m_customer_language_isSet = true;
}

bool OAICardAcquisitionResponse::is_customer_language_Set() const{
    return m_customer_language_isSet;
}

bool OAICardAcquisitionResponse::is_customer_language_Valid() const{
    return m_customer_language_isValid;
}

QList<OAILoyaltyAccount> OAICardAcquisitionResponse::getLoyaltyAccount() const {
    return m_loyalty_account;
}
void OAICardAcquisitionResponse::setLoyaltyAccount(const QList<OAILoyaltyAccount> &loyalty_account) {
    m_loyalty_account = loyalty_account;
    m_loyalty_account_isSet = true;
}

bool OAICardAcquisitionResponse::is_loyalty_account_Set() const{
    return m_loyalty_account_isSet;
}

bool OAICardAcquisitionResponse::is_loyalty_account_Valid() const{
    return m_loyalty_account_isValid;
}

OAIPOIData OAICardAcquisitionResponse::getPoiData() const {
    return m_poi_data;
}
void OAICardAcquisitionResponse::setPoiData(const OAIPOIData &poi_data) {
    m_poi_data = poi_data;
    m_poi_data_isSet = true;
}

bool OAICardAcquisitionResponse::is_poi_data_Set() const{
    return m_poi_data_isSet;
}

bool OAICardAcquisitionResponse::is_poi_data_Valid() const{
    return m_poi_data_isValid;
}

QList<QString> OAICardAcquisitionResponse::getPaymentBrand() const {
    return m_payment_brand;
}
void OAICardAcquisitionResponse::setPaymentBrand(const QList<QString> &payment_brand) {
    m_payment_brand = payment_brand;
    m_payment_brand_isSet = true;
}

bool OAICardAcquisitionResponse::is_payment_brand_Set() const{
    return m_payment_brand_isSet;
}

bool OAICardAcquisitionResponse::is_payment_brand_Valid() const{
    return m_payment_brand_isValid;
}

OAIPaymentInstrumentData OAICardAcquisitionResponse::getPaymentInstrumentData() const {
    return m_payment_instrument_data;
}
void OAICardAcquisitionResponse::setPaymentInstrumentData(const OAIPaymentInstrumentData &payment_instrument_data) {
    m_payment_instrument_data = payment_instrument_data;
    m_payment_instrument_data_isSet = true;
}

bool OAICardAcquisitionResponse::is_payment_instrument_data_Set() const{
    return m_payment_instrument_data_isSet;
}

bool OAICardAcquisitionResponse::is_payment_instrument_data_Valid() const{
    return m_payment_instrument_data_isValid;
}

OAIResponse OAICardAcquisitionResponse::getResponse() const {
    return m_response;
}
void OAICardAcquisitionResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAICardAcquisitionResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAICardAcquisitionResponse::is_response_Valid() const{
    return m_response_isValid;
}

OAISaleData OAICardAcquisitionResponse::getSaleData() const {
    return m_sale_data;
}
void OAICardAcquisitionResponse::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAICardAcquisitionResponse::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAICardAcquisitionResponse::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

bool OAICardAcquisitionResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_account.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_poi_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_brand.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_instrument_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardAcquisitionResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_poi_data_isValid && m_response_isValid && m_sale_data_isValid && true;
}

} // namespace OpenAPI
