/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStoredValueData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStoredValueData::OAIStoredValueData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStoredValueData::OAIStoredValueData() {
    this->initializeModel();
}

OAIStoredValueData::~OAIStoredValueData() {}

void OAIStoredValueData::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_ean_upc_isSet = false;
    m_ean_upc_isValid = false;

    m_item_amount_isSet = false;
    m_item_amount_isValid = false;

    m_original_poi_transaction_isSet = false;
    m_original_poi_transaction_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_stored_value_account_id_isSet = false;
    m_stored_value_account_id_isValid = false;

    m_stored_value_provider_isSet = false;
    m_stored_value_provider_isValid = false;

    m_stored_value_transaction_type_isSet = false;
    m_stored_value_transaction_type_isValid = false;
}

void OAIStoredValueData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStoredValueData::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("Currency")]);
    m_currency_isSet = !json[QString("Currency")].isNull() && m_currency_isValid;

    m_ean_upc_isValid = ::OpenAPI::fromJsonValue(m_ean_upc, json[QString("EanUpc")]);
    m_ean_upc_isSet = !json[QString("EanUpc")].isNull() && m_ean_upc_isValid;

    m_item_amount_isValid = ::OpenAPI::fromJsonValue(m_item_amount, json[QString("ItemAmount")]);
    m_item_amount_isSet = !json[QString("ItemAmount")].isNull() && m_item_amount_isValid;

    m_original_poi_transaction_isValid = ::OpenAPI::fromJsonValue(m_original_poi_transaction, json[QString("OriginalPOITransaction")]);
    m_original_poi_transaction_isSet = !json[QString("OriginalPOITransaction")].isNull() && m_original_poi_transaction_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("ProductCode")]);
    m_product_code_isSet = !json[QString("ProductCode")].isNull() && m_product_code_isValid;

    m_stored_value_account_id_isValid = ::OpenAPI::fromJsonValue(m_stored_value_account_id, json[QString("StoredValueAccountID")]);
    m_stored_value_account_id_isSet = !json[QString("StoredValueAccountID")].isNull() && m_stored_value_account_id_isValid;

    m_stored_value_provider_isValid = ::OpenAPI::fromJsonValue(m_stored_value_provider, json[QString("StoredValueProvider")]);
    m_stored_value_provider_isSet = !json[QString("StoredValueProvider")].isNull() && m_stored_value_provider_isValid;

    m_stored_value_transaction_type_isValid = ::OpenAPI::fromJsonValue(m_stored_value_transaction_type, json[QString("StoredValueTransactionType")]);
    m_stored_value_transaction_type_isSet = !json[QString("StoredValueTransactionType")].isNull() && m_stored_value_transaction_type_isValid;
}

QString OAIStoredValueData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStoredValueData::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("Currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_ean_upc_isSet) {
        obj.insert(QString("EanUpc"), ::OpenAPI::toJsonValue(m_ean_upc));
    }
    if (m_item_amount_isSet) {
        obj.insert(QString("ItemAmount"), ::OpenAPI::toJsonValue(m_item_amount));
    }
    if (m_original_poi_transaction.isSet()) {
        obj.insert(QString("OriginalPOITransaction"), ::OpenAPI::toJsonValue(m_original_poi_transaction));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("ProductCode"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_stored_value_account_id.isSet()) {
        obj.insert(QString("StoredValueAccountID"), ::OpenAPI::toJsonValue(m_stored_value_account_id));
    }
    if (m_stored_value_provider_isSet) {
        obj.insert(QString("StoredValueProvider"), ::OpenAPI::toJsonValue(m_stored_value_provider));
    }
    if (m_stored_value_transaction_type.isSet()) {
        obj.insert(QString("StoredValueTransactionType"), ::OpenAPI::toJsonValue(m_stored_value_transaction_type));
    }
    return obj;
}

QString OAIStoredValueData::getCurrency() const {
    return m_currency;
}
void OAIStoredValueData::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIStoredValueData::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIStoredValueData::is_currency_Valid() const{
    return m_currency_isValid;
}

qint32 OAIStoredValueData::getEanUpc() const {
    return m_ean_upc;
}
void OAIStoredValueData::setEanUpc(const qint32 &ean_upc) {
    m_ean_upc = ean_upc;
    m_ean_upc_isSet = true;
}

bool OAIStoredValueData::is_ean_upc_Set() const{
    return m_ean_upc_isSet;
}

bool OAIStoredValueData::is_ean_upc_Valid() const{
    return m_ean_upc_isValid;
}

double OAIStoredValueData::getItemAmount() const {
    return m_item_amount;
}
void OAIStoredValueData::setItemAmount(const double &item_amount) {
    m_item_amount = item_amount;
    m_item_amount_isSet = true;
}

bool OAIStoredValueData::is_item_amount_Set() const{
    return m_item_amount_isSet;
}

bool OAIStoredValueData::is_item_amount_Valid() const{
    return m_item_amount_isValid;
}

OAIOriginalPOITransaction OAIStoredValueData::getOriginalPoiTransaction() const {
    return m_original_poi_transaction;
}
void OAIStoredValueData::setOriginalPoiTransaction(const OAIOriginalPOITransaction &original_poi_transaction) {
    m_original_poi_transaction = original_poi_transaction;
    m_original_poi_transaction_isSet = true;
}

bool OAIStoredValueData::is_original_poi_transaction_Set() const{
    return m_original_poi_transaction_isSet;
}

bool OAIStoredValueData::is_original_poi_transaction_Valid() const{
    return m_original_poi_transaction_isValid;
}

qint32 OAIStoredValueData::getProductCode() const {
    return m_product_code;
}
void OAIStoredValueData::setProductCode(const qint32 &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAIStoredValueData::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAIStoredValueData::is_product_code_Valid() const{
    return m_product_code_isValid;
}

OAIStoredValueAccountID OAIStoredValueData::getStoredValueAccountId() const {
    return m_stored_value_account_id;
}
void OAIStoredValueData::setStoredValueAccountId(const OAIStoredValueAccountID &stored_value_account_id) {
    m_stored_value_account_id = stored_value_account_id;
    m_stored_value_account_id_isSet = true;
}

bool OAIStoredValueData::is_stored_value_account_id_Set() const{
    return m_stored_value_account_id_isSet;
}

bool OAIStoredValueData::is_stored_value_account_id_Valid() const{
    return m_stored_value_account_id_isValid;
}

QString OAIStoredValueData::getStoredValueProvider() const {
    return m_stored_value_provider;
}
void OAIStoredValueData::setStoredValueProvider(const QString &stored_value_provider) {
    m_stored_value_provider = stored_value_provider;
    m_stored_value_provider_isSet = true;
}

bool OAIStoredValueData::is_stored_value_provider_Set() const{
    return m_stored_value_provider_isSet;
}

bool OAIStoredValueData::is_stored_value_provider_Valid() const{
    return m_stored_value_provider_isValid;
}

OAIStoredValueTransactionType OAIStoredValueData::getStoredValueTransactionType() const {
    return m_stored_value_transaction_type;
}
void OAIStoredValueData::setStoredValueTransactionType(const OAIStoredValueTransactionType &stored_value_transaction_type) {
    m_stored_value_transaction_type = stored_value_transaction_type;
    m_stored_value_transaction_type_isSet = true;
}

bool OAIStoredValueData::is_stored_value_transaction_type_Set() const{
    return m_stored_value_transaction_type_isSet;
}

bool OAIStoredValueData::is_stored_value_transaction_type_Valid() const{
    return m_stored_value_transaction_type_isValid;
}

bool OAIStoredValueData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_upc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_poi_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_account_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stored_value_transaction_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStoredValueData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_stored_value_transaction_type_isValid && true;
}

} // namespace OpenAPI
