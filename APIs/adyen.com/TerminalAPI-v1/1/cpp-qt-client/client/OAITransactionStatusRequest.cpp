/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionStatusRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionStatusRequest::OAITransactionStatusRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionStatusRequest::OAITransactionStatusRequest() {
    this->initializeModel();
}

OAITransactionStatusRequest::~OAITransactionStatusRequest() {}

void OAITransactionStatusRequest::initializeModel() {

    m_document_qualifier_isSet = false;
    m_document_qualifier_isValid = false;

    m_message_reference_isSet = false;
    m_message_reference_isValid = false;

    m_receipt_reprint_flag_isSet = false;
    m_receipt_reprint_flag_isValid = false;
}

void OAITransactionStatusRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionStatusRequest::fromJsonObject(QJsonObject json) {

    m_document_qualifier_isValid = ::OpenAPI::fromJsonValue(m_document_qualifier, json[QString("DocumentQualifier")]);
    m_document_qualifier_isSet = !json[QString("DocumentQualifier")].isNull() && m_document_qualifier_isValid;

    m_message_reference_isValid = ::OpenAPI::fromJsonValue(m_message_reference, json[QString("MessageReference")]);
    m_message_reference_isSet = !json[QString("MessageReference")].isNull() && m_message_reference_isValid;

    m_receipt_reprint_flag_isValid = ::OpenAPI::fromJsonValue(m_receipt_reprint_flag, json[QString("ReceiptReprintFlag")]);
    m_receipt_reprint_flag_isSet = !json[QString("ReceiptReprintFlag")].isNull() && m_receipt_reprint_flag_isValid;
}

QString OAITransactionStatusRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionStatusRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_document_qualifier.size() > 0) {
        obj.insert(QString("DocumentQualifier"), ::OpenAPI::toJsonValue(m_document_qualifier));
    }
    if (m_message_reference.isSet()) {
        obj.insert(QString("MessageReference"), ::OpenAPI::toJsonValue(m_message_reference));
    }
    if (m_receipt_reprint_flag_isSet) {
        obj.insert(QString("ReceiptReprintFlag"), ::OpenAPI::toJsonValue(m_receipt_reprint_flag));
    }
    return obj;
}

QList<OAIDocumentQualifier> OAITransactionStatusRequest::getDocumentQualifier() const {
    return m_document_qualifier;
}
void OAITransactionStatusRequest::setDocumentQualifier(const QList<OAIDocumentQualifier> &document_qualifier) {
    m_document_qualifier = document_qualifier;
    m_document_qualifier_isSet = true;
}

bool OAITransactionStatusRequest::is_document_qualifier_Set() const{
    return m_document_qualifier_isSet;
}

bool OAITransactionStatusRequest::is_document_qualifier_Valid() const{
    return m_document_qualifier_isValid;
}

OAIMessageReference OAITransactionStatusRequest::getMessageReference() const {
    return m_message_reference;
}
void OAITransactionStatusRequest::setMessageReference(const OAIMessageReference &message_reference) {
    m_message_reference = message_reference;
    m_message_reference_isSet = true;
}

bool OAITransactionStatusRequest::is_message_reference_Set() const{
    return m_message_reference_isSet;
}

bool OAITransactionStatusRequest::is_message_reference_Valid() const{
    return m_message_reference_isValid;
}

bool OAITransactionStatusRequest::isReceiptReprintFlag() const {
    return m_receipt_reprint_flag;
}
void OAITransactionStatusRequest::setReceiptReprintFlag(const bool &receipt_reprint_flag) {
    m_receipt_reprint_flag = receipt_reprint_flag;
    m_receipt_reprint_flag_isSet = true;
}

bool OAITransactionStatusRequest::is_receipt_reprint_flag_Set() const{
    return m_receipt_reprint_flag_isSet;
}

bool OAITransactionStatusRequest::is_receipt_reprint_flag_Valid() const{
    return m_receipt_reprint_flag_isValid;
}

bool OAITransactionStatusRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_qualifier.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_reprint_flag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionStatusRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
