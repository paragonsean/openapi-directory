/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountType::OAIAccountType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountType::OAIAccountType() {
    this->initializeModel();
}

OAIAccountType::~OAIAccountType() {}

void OAIAccountType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIAccountType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIAccountType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("CardTotals", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::CARDTOTALS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Checking", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::CHECKING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CreditCard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::CREDITCARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Default", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::DEFAULT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EpurseCard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::EPURSECARD;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Investment", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::INVESTMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Savings", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::SAVINGS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Universal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIAccountType::UNIVERSAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIAccountType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIAccountType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIAccountType::CARDTOTALS:
            val = "CardTotals";
            break;
        case eOAIAccountType::CHECKING:
            val = "Checking";
            break;
        case eOAIAccountType::CREDITCARD:
            val = "CreditCard";
            break;
        case eOAIAccountType::DEFAULT:
            val = "Default";
            break;
        case eOAIAccountType::EPURSECARD:
            val = "EpurseCard";
            break;
        case eOAIAccountType::INVESTMENT:
            val = "Investment";
            break;
        case eOAIAccountType::SAVINGS:
            val = "Savings";
            break;
        case eOAIAccountType::UNIVERSAL:
            val = "Universal";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIAccountType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIAccountType::eOAIAccountType OAIAccountType::getValue() const {
    return m_value;
}

void OAIAccountType::setValue(const OAIAccountType::eOAIAccountType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIAccountType::isSet() const {
    
    return m_value_isSet;
}

bool OAIAccountType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
