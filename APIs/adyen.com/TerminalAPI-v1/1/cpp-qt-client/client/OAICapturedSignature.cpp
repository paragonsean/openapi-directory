/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapturedSignature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapturedSignature::OAICapturedSignature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapturedSignature::OAICapturedSignature() {
    this->initializeModel();
}

OAICapturedSignature::~OAICapturedSignature() {}

void OAICapturedSignature::initializeModel() {

    m_area_size_isSet = false;
    m_area_size_isValid = false;

    m_signature_point_isSet = false;
    m_signature_point_isValid = false;
}

void OAICapturedSignature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapturedSignature::fromJsonObject(QJsonObject json) {

    m_area_size_isValid = ::OpenAPI::fromJsonValue(m_area_size, json[QString("AreaSize")]);
    m_area_size_isSet = !json[QString("AreaSize")].isNull() && m_area_size_isValid;

    m_signature_point_isValid = ::OpenAPI::fromJsonValue(m_signature_point, json[QString("SignaturePoint")]);
    m_signature_point_isSet = !json[QString("SignaturePoint")].isNull() && m_signature_point_isValid;
}

QString OAICapturedSignature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapturedSignature::asJsonObject() const {
    QJsonObject obj;
    if (m_area_size.isSet()) {
        obj.insert(QString("AreaSize"), ::OpenAPI::toJsonValue(m_area_size));
    }
    if (m_signature_point.size() > 0) {
        obj.insert(QString("SignaturePoint"), ::OpenAPI::toJsonValue(m_signature_point));
    }
    return obj;
}

OAIAreaSize OAICapturedSignature::getAreaSize() const {
    return m_area_size;
}
void OAICapturedSignature::setAreaSize(const OAIAreaSize &area_size) {
    m_area_size = area_size;
    m_area_size_isSet = true;
}

bool OAICapturedSignature::is_area_size_Set() const{
    return m_area_size_isSet;
}

bool OAICapturedSignature::is_area_size_Valid() const{
    return m_area_size_isValid;
}

QList<OAIPoint> OAICapturedSignature::getSignaturePoint() const {
    return m_signature_point;
}
void OAICapturedSignature::setSignaturePoint(const QList<OAIPoint> &signature_point) {
    m_signature_point = signature_point;
    m_signature_point_isSet = true;
}

bool OAICapturedSignature::is_signature_point_Set() const{
    return m_signature_point_isSet;
}

bool OAICapturedSignature::is_signature_point_Valid() const{
    return m_signature_point_isValid;
}

bool OAICapturedSignature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_area_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_signature_point.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapturedSignature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
