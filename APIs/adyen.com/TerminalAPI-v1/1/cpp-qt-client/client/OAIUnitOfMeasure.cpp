/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUnitOfMeasure.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUnitOfMeasure::OAIUnitOfMeasure(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUnitOfMeasure::OAIUnitOfMeasure() {
    this->initializeModel();
}

OAIUnitOfMeasure::~OAIUnitOfMeasure() {}

void OAIUnitOfMeasure::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIUnitOfMeasure::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIUnitOfMeasure::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Case", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::CASE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Centilitre", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::CENTILITRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Centimetre", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::CENTIMETRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Foot", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::FOOT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Gram", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::GRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Inch", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::INCH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilogram", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::KILOGRAM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Kilometre", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::KILOMETRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Litre", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::LITRE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Meter", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::METER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Mile", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::MILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Other", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::OTHER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ounce", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::OUNCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pint", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::PINT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Pound", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::POUND;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Quart", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::QUART;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("UKGallon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::UKGALLON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("USGallon", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::USGALLON;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Yard", Qt::CaseInsensitive) == 0) {
        m_value = eOAIUnitOfMeasure::YARD;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIUnitOfMeasure::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIUnitOfMeasure::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIUnitOfMeasure::CASE:
            val = "Case";
            break;
        case eOAIUnitOfMeasure::CENTILITRE:
            val = "Centilitre";
            break;
        case eOAIUnitOfMeasure::CENTIMETRE:
            val = "Centimetre";
            break;
        case eOAIUnitOfMeasure::FOOT:
            val = "Foot";
            break;
        case eOAIUnitOfMeasure::GRAM:
            val = "Gram";
            break;
        case eOAIUnitOfMeasure::INCH:
            val = "Inch";
            break;
        case eOAIUnitOfMeasure::KILOGRAM:
            val = "Kilogram";
            break;
        case eOAIUnitOfMeasure::KILOMETRE:
            val = "Kilometre";
            break;
        case eOAIUnitOfMeasure::LITRE:
            val = "Litre";
            break;
        case eOAIUnitOfMeasure::METER:
            val = "Meter";
            break;
        case eOAIUnitOfMeasure::MILE:
            val = "Mile";
            break;
        case eOAIUnitOfMeasure::OTHER:
            val = "Other";
            break;
        case eOAIUnitOfMeasure::OUNCE:
            val = "Ounce";
            break;
        case eOAIUnitOfMeasure::PINT:
            val = "Pint";
            break;
        case eOAIUnitOfMeasure::POUND:
            val = "Pound";
            break;
        case eOAIUnitOfMeasure::QUART:
            val = "Quart";
            break;
        case eOAIUnitOfMeasure::UKGALLON:
            val = "UKGallon";
            break;
        case eOAIUnitOfMeasure::USGALLON:
            val = "USGallon";
            break;
        case eOAIUnitOfMeasure::YARD:
            val = "Yard";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIUnitOfMeasure::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIUnitOfMeasure::eOAIUnitOfMeasure OAIUnitOfMeasure::getValue() const {
    return m_value;
}

void OAIUnitOfMeasure::setValue(const OAIUnitOfMeasure::eOAIUnitOfMeasure& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIUnitOfMeasure::isSet() const {
    
    return m_value_isSet;
}

bool OAIUnitOfMeasure::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
