/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAdminRequest.h"
#include "OAIAdminResponse.h"
#include "OAIBalanceInquiryRequest.h"
#include "OAIBalanceInquiryResponse.h"
#include "OAICardAcquisitionRequest.h"
#include "OAICardAcquisitionResponse.h"
#include "OAICardReaderAPDURequest.h"
#include "OAICardReaderAPDUResponse.h"
#include "OAIDiagnosisRequest.h"
#include "OAIDiagnosisResponse.h"
#include "OAIDisplayRequest.h"
#include "OAIDisplayResponse.h"
#include "OAIEnableServiceRequest.h"
#include "OAIEnableServiceResponse.h"
#include "OAIGetTotalsRequest.h"
#include "OAIGetTotalsResponse.h"
#include "OAIInputRequest.h"
#include "OAIInputResponse.h"
#include "OAILoginRequest.h"
#include "OAILoginResponse.h"
#include "OAILogoutRequest.h"
#include "OAILogoutResponse.h"
#include "OAILoyaltyRequest.h"
#include "OAILoyaltyResponse.h"
#include "OAIPaymentRequest.h"
#include "OAIPaymentResponse.h"
#include "OAIPrintRequest.h"
#include "OAIPrintResponse.h"
#include "OAIReconciliationRequest.h"
#include "OAIReconciliationResponse.h"
#include "OAIReversalRequest.h"
#include "OAIReversalResponse.h"
#include "OAIStoredValueRequest.h"
#include "OAIStoredValueResponse.h"
#include "OAITransactionStatusRequest.h"
#include "OAITransactionStatusResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_admin_request OAIAdminRequest [optional]
    */
    virtual void adminPost(const ::OpenAPI::OptionalParam<OAIAdminRequest> &oai_admin_request = ::OpenAPI::OptionalParam<OAIAdminRequest>());

    /**
    * @param[in]  oai_balance_inquiry_request OAIBalanceInquiryRequest [optional]
    */
    virtual void balanceinquiryPost(const ::OpenAPI::OptionalParam<OAIBalanceInquiryRequest> &oai_balance_inquiry_request = ::OpenAPI::OptionalParam<OAIBalanceInquiryRequest>());

    /**
    * @param[in]  oai_card_acquisition_request OAICardAcquisitionRequest [optional]
    */
    virtual void cardacquisitionPost(const ::OpenAPI::OptionalParam<OAICardAcquisitionRequest> &oai_card_acquisition_request = ::OpenAPI::OptionalParam<OAICardAcquisitionRequest>());

    /**
    * @param[in]  oai_card_reader_apdu_request OAICardReaderAPDURequest [optional]
    */
    virtual void cardreaderapduPost(const ::OpenAPI::OptionalParam<OAICardReaderAPDURequest> &oai_card_reader_apdu_request = ::OpenAPI::OptionalParam<OAICardReaderAPDURequest>());

    /**
    * @param[in]  oai_diagnosis_request OAIDiagnosisRequest [optional]
    */
    virtual void diagnosisPost(const ::OpenAPI::OptionalParam<OAIDiagnosisRequest> &oai_diagnosis_request = ::OpenAPI::OptionalParam<OAIDiagnosisRequest>());

    /**
    * @param[in]  oai_display_request OAIDisplayRequest [optional]
    */
    virtual void displayPost(const ::OpenAPI::OptionalParam<OAIDisplayRequest> &oai_display_request = ::OpenAPI::OptionalParam<OAIDisplayRequest>());

    /**
    * @param[in]  oai_enable_service_request OAIEnableServiceRequest [optional]
    */
    virtual void enableservicePost(const ::OpenAPI::OptionalParam<OAIEnableServiceRequest> &oai_enable_service_request = ::OpenAPI::OptionalParam<OAIEnableServiceRequest>());

    /**
    * @param[in]  oai_get_totals_request OAIGetTotalsRequest [optional]
    */
    virtual void gettotalsPost(const ::OpenAPI::OptionalParam<OAIGetTotalsRequest> &oai_get_totals_request = ::OpenAPI::OptionalParam<OAIGetTotalsRequest>());

    /**
    * @param[in]  oai_input_request OAIInputRequest [optional]
    */
    virtual void inputPost(const ::OpenAPI::OptionalParam<OAIInputRequest> &oai_input_request = ::OpenAPI::OptionalParam<OAIInputRequest>());

    /**
    * @param[in]  oai_login_request OAILoginRequest [optional]
    */
    virtual void loginPost(const ::OpenAPI::OptionalParam<OAILoginRequest> &oai_login_request = ::OpenAPI::OptionalParam<OAILoginRequest>());

    /**
    * @param[in]  oai_logout_request OAILogoutRequest [optional]
    */
    virtual void logoutPost(const ::OpenAPI::OptionalParam<OAILogoutRequest> &oai_logout_request = ::OpenAPI::OptionalParam<OAILogoutRequest>());

    /**
    * @param[in]  oai_loyalty_request OAILoyaltyRequest [optional]
    */
    virtual void loyaltyPost(const ::OpenAPI::OptionalParam<OAILoyaltyRequest> &oai_loyalty_request = ::OpenAPI::OptionalParam<OAILoyaltyRequest>());

    /**
    * @param[in]  oai_payment_request OAIPaymentRequest [optional]
    */
    virtual void paymentPost(const ::OpenAPI::OptionalParam<OAIPaymentRequest> &oai_payment_request = ::OpenAPI::OptionalParam<OAIPaymentRequest>());

    /**
    * @param[in]  oai_print_request OAIPrintRequest [optional]
    */
    virtual void printPost(const ::OpenAPI::OptionalParam<OAIPrintRequest> &oai_print_request = ::OpenAPI::OptionalParam<OAIPrintRequest>());

    /**
    * @param[in]  oai_reconciliation_request OAIReconciliationRequest [optional]
    */
    virtual void reconciliationPost(const ::OpenAPI::OptionalParam<OAIReconciliationRequest> &oai_reconciliation_request = ::OpenAPI::OptionalParam<OAIReconciliationRequest>());

    /**
    * @param[in]  oai_reversal_request OAIReversalRequest [optional]
    */
    virtual void reversalPost(const ::OpenAPI::OptionalParam<OAIReversalRequest> &oai_reversal_request = ::OpenAPI::OptionalParam<OAIReversalRequest>());

    /**
    * @param[in]  oai_stored_value_request OAIStoredValueRequest [optional]
    */
    virtual void storedvaluePost(const ::OpenAPI::OptionalParam<OAIStoredValueRequest> &oai_stored_value_request = ::OpenAPI::OptionalParam<OAIStoredValueRequest>());

    /**
    * @param[in]  oai_transaction_status_request OAITransactionStatusRequest [optional]
    */
    virtual void transactionstatusPost(const ::OpenAPI::OptionalParam<OAITransactionStatusRequest> &oai_transaction_status_request = ::OpenAPI::OptionalParam<OAITransactionStatusRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void adminPostCallback(OAIHttpRequestWorker *worker);
    void balanceinquiryPostCallback(OAIHttpRequestWorker *worker);
    void cardacquisitionPostCallback(OAIHttpRequestWorker *worker);
    void cardreaderapduPostCallback(OAIHttpRequestWorker *worker);
    void diagnosisPostCallback(OAIHttpRequestWorker *worker);
    void displayPostCallback(OAIHttpRequestWorker *worker);
    void enableservicePostCallback(OAIHttpRequestWorker *worker);
    void gettotalsPostCallback(OAIHttpRequestWorker *worker);
    void inputPostCallback(OAIHttpRequestWorker *worker);
    void loginPostCallback(OAIHttpRequestWorker *worker);
    void logoutPostCallback(OAIHttpRequestWorker *worker);
    void loyaltyPostCallback(OAIHttpRequestWorker *worker);
    void paymentPostCallback(OAIHttpRequestWorker *worker);
    void printPostCallback(OAIHttpRequestWorker *worker);
    void reconciliationPostCallback(OAIHttpRequestWorker *worker);
    void reversalPostCallback(OAIHttpRequestWorker *worker);
    void storedvaluePostCallback(OAIHttpRequestWorker *worker);
    void transactionstatusPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void adminPostSignal(OAIAdminResponse summary);
    void balanceinquiryPostSignal(OAIBalanceInquiryResponse summary);
    void cardacquisitionPostSignal(OAICardAcquisitionResponse summary);
    void cardreaderapduPostSignal(OAICardReaderAPDUResponse summary);
    void diagnosisPostSignal(OAIDiagnosisResponse summary);
    void displayPostSignal(OAIDisplayResponse summary);
    void enableservicePostSignal(OAIEnableServiceResponse summary);
    void gettotalsPostSignal(OAIGetTotalsResponse summary);
    void inputPostSignal(OAIInputResponse summary);
    void loginPostSignal(OAILoginResponse summary);
    void logoutPostSignal(OAILogoutResponse summary);
    void loyaltyPostSignal(OAILoyaltyResponse summary);
    void paymentPostSignal(OAIPaymentResponse summary);
    void printPostSignal(OAIPrintResponse summary);
    void reconciliationPostSignal(OAIReconciliationResponse summary);
    void reversalPostSignal(OAIReversalResponse summary);
    void storedvaluePostSignal(OAIStoredValueResponse summary);
    void transactionstatusPostSignal(OAITransactionStatusResponse summary);


    void adminPostSignalFull(OAIHttpRequestWorker *worker, OAIAdminResponse summary);
    void balanceinquiryPostSignalFull(OAIHttpRequestWorker *worker, OAIBalanceInquiryResponse summary);
    void cardacquisitionPostSignalFull(OAIHttpRequestWorker *worker, OAICardAcquisitionResponse summary);
    void cardreaderapduPostSignalFull(OAIHttpRequestWorker *worker, OAICardReaderAPDUResponse summary);
    void diagnosisPostSignalFull(OAIHttpRequestWorker *worker, OAIDiagnosisResponse summary);
    void displayPostSignalFull(OAIHttpRequestWorker *worker, OAIDisplayResponse summary);
    void enableservicePostSignalFull(OAIHttpRequestWorker *worker, OAIEnableServiceResponse summary);
    void gettotalsPostSignalFull(OAIHttpRequestWorker *worker, OAIGetTotalsResponse summary);
    void inputPostSignalFull(OAIHttpRequestWorker *worker, OAIInputResponse summary);
    void loginPostSignalFull(OAIHttpRequestWorker *worker, OAILoginResponse summary);
    void logoutPostSignalFull(OAIHttpRequestWorker *worker, OAILogoutResponse summary);
    void loyaltyPostSignalFull(OAIHttpRequestWorker *worker, OAILoyaltyResponse summary);
    void paymentPostSignalFull(OAIHttpRequestWorker *worker, OAIPaymentResponse summary);
    void printPostSignalFull(OAIHttpRequestWorker *worker, OAIPrintResponse summary);
    void reconciliationPostSignalFull(OAIHttpRequestWorker *worker, OAIReconciliationResponse summary);
    void reversalPostSignalFull(OAIHttpRequestWorker *worker, OAIReversalResponse summary);
    void storedvaluePostSignalFull(OAIHttpRequestWorker *worker, OAIStoredValueResponse summary);
    void transactionstatusPostSignalFull(OAIHttpRequestWorker *worker, OAITransactionStatusResponse summary);

    Q_DECL_DEPRECATED_X("Use adminPostSignalError() instead")
    void adminPostSignalE(OAIAdminResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void adminPostSignalError(OAIAdminResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use balanceinquiryPostSignalError() instead")
    void balanceinquiryPostSignalE(OAIBalanceInquiryResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void balanceinquiryPostSignalError(OAIBalanceInquiryResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cardacquisitionPostSignalError() instead")
    void cardacquisitionPostSignalE(OAICardAcquisitionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cardacquisitionPostSignalError(OAICardAcquisitionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cardreaderapduPostSignalError() instead")
    void cardreaderapduPostSignalE(OAICardReaderAPDUResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cardreaderapduPostSignalError(OAICardReaderAPDUResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosisPostSignalError() instead")
    void diagnosisPostSignalE(OAIDiagnosisResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosisPostSignalError(OAIDiagnosisResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayPostSignalError() instead")
    void displayPostSignalE(OAIDisplayResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void displayPostSignalError(OAIDisplayResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableservicePostSignalError() instead")
    void enableservicePostSignalE(OAIEnableServiceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void enableservicePostSignalError(OAIEnableServiceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gettotalsPostSignalError() instead")
    void gettotalsPostSignalE(OAIGetTotalsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gettotalsPostSignalError(OAIGetTotalsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inputPostSignalError() instead")
    void inputPostSignalE(OAIInputResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inputPostSignalError(OAIInputResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginPostSignalError() instead")
    void loginPostSignalE(OAILoginResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginPostSignalError(OAILoginResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutPostSignalError() instead")
    void logoutPostSignalE(OAILogoutResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutPostSignalError(OAILogoutResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loyaltyPostSignalError() instead")
    void loyaltyPostSignalE(OAILoyaltyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loyaltyPostSignalError(OAILoyaltyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentPostSignalError() instead")
    void paymentPostSignalE(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentPostSignalError(OAIPaymentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use printPostSignalError() instead")
    void printPostSignalE(OAIPrintResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void printPostSignalError(OAIPrintResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reconciliationPostSignalError() instead")
    void reconciliationPostSignalE(OAIReconciliationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reconciliationPostSignalError(OAIReconciliationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reversalPostSignalError() instead")
    void reversalPostSignalE(OAIReversalResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reversalPostSignalError(OAIReversalResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storedvaluePostSignalError() instead")
    void storedvaluePostSignalE(OAIStoredValueResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void storedvaluePostSignalError(OAIStoredValueResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionstatusPostSignalError() instead")
    void transactionstatusPostSignalE(OAITransactionStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionstatusPostSignalError(OAITransactionStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use adminPostSignalErrorFull() instead")
    void adminPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void adminPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use balanceinquiryPostSignalErrorFull() instead")
    void balanceinquiryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void balanceinquiryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cardacquisitionPostSignalErrorFull() instead")
    void cardacquisitionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cardacquisitionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cardreaderapduPostSignalErrorFull() instead")
    void cardreaderapduPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cardreaderapduPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use diagnosisPostSignalErrorFull() instead")
    void diagnosisPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void diagnosisPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use displayPostSignalErrorFull() instead")
    void displayPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void displayPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableservicePostSignalErrorFull() instead")
    void enableservicePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableservicePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gettotalsPostSignalErrorFull() instead")
    void gettotalsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gettotalsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inputPostSignalErrorFull() instead")
    void inputPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inputPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginPostSignalErrorFull() instead")
    void loginPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutPostSignalErrorFull() instead")
    void logoutPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loyaltyPostSignalErrorFull() instead")
    void loyaltyPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loyaltyPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use paymentPostSignalErrorFull() instead")
    void paymentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void paymentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use printPostSignalErrorFull() instead")
    void printPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void printPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reconciliationPostSignalErrorFull() instead")
    void reconciliationPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reconciliationPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reversalPostSignalErrorFull() instead")
    void reversalPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reversalPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use storedvaluePostSignalErrorFull() instead")
    void storedvaluePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void storedvaluePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionstatusPostSignalErrorFull() instead")
    void transactionstatusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionstatusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
