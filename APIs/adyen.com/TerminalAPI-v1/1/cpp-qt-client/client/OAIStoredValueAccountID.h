/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIStoredValueAccountID.h
 *
 * It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.
 */

#ifndef OAIStoredValueAccountID_H
#define OAIStoredValueAccountID_H

#include <QJsonObject>

#include "OAIIdentificationType.h"
#include "OAIStoredValueAccountType.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIStoredValueAccountID : public OAIObject {
public:
    OAIStoredValueAccountID();
    OAIStoredValueAccountID(QString json);
    ~OAIStoredValueAccountID() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getEntryMode() const;
    void setEntryMode(const QList<QString> &entry_mode);
    bool is_entry_mode_Set() const;
    bool is_entry_mode_Valid() const;

    qint32 getExpiryDate() const;
    void setExpiryDate(const qint32 &expiry_date);
    bool is_expiry_date_Set() const;
    bool is_expiry_date_Valid() const;

    OAIIdentificationType getIdentificationType() const;
    void setIdentificationType(const OAIIdentificationType &identification_type);
    bool is_identification_type_Set() const;
    bool is_identification_type_Valid() const;

    QString getOwnerName() const;
    void setOwnerName(const QString &owner_name);
    bool is_owner_name_Set() const;
    bool is_owner_name_Valid() const;

    OAIStoredValueAccountType getStoredValueAccountType() const;
    void setStoredValueAccountType(const OAIStoredValueAccountType &stored_value_account_type);
    bool is_stored_value_account_type_Set() const;
    bool is_stored_value_account_type_Valid() const;

    QString getStoredValueId() const;
    void setStoredValueId(const QString &stored_value_id);
    bool is_stored_value_id_Set() const;
    bool is_stored_value_id_Valid() const;

    QString getStoredValueProvider() const;
    void setStoredValueProvider(const QString &stored_value_provider);
    bool is_stored_value_provider_Set() const;
    bool is_stored_value_provider_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_entry_mode;
    bool m_entry_mode_isSet;
    bool m_entry_mode_isValid;

    qint32 m_expiry_date;
    bool m_expiry_date_isSet;
    bool m_expiry_date_isValid;

    OAIIdentificationType m_identification_type;
    bool m_identification_type_isSet;
    bool m_identification_type_isValid;

    QString m_owner_name;
    bool m_owner_name_isSet;
    bool m_owner_name_isValid;

    OAIStoredValueAccountType m_stored_value_account_type;
    bool m_stored_value_account_type_isSet;
    bool m_stored_value_account_type_isValid;

    QString m_stored_value_id;
    bool m_stored_value_id_isSet;
    bool m_stored_value_id_isValid;

    QString m_stored_value_provider;
    bool m_stored_value_provider_isSet;
    bool m_stored_value_provider_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIStoredValueAccountID)

#endif // OAIStoredValueAccountID_H
