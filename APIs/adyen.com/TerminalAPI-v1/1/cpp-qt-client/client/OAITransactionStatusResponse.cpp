/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransactionStatusResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransactionStatusResponse::OAITransactionStatusResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransactionStatusResponse::OAITransactionStatusResponse() {
    this->initializeModel();
}

OAITransactionStatusResponse::~OAITransactionStatusResponse() {}

void OAITransactionStatusResponse::initializeModel() {

    m_message_reference_isSet = false;
    m_message_reference_isValid = false;

    m_repeated_message_response_isSet = false;
    m_repeated_message_response_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;
}

void OAITransactionStatusResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransactionStatusResponse::fromJsonObject(QJsonObject json) {

    m_message_reference_isValid = ::OpenAPI::fromJsonValue(m_message_reference, json[QString("MessageReference")]);
    m_message_reference_isSet = !json[QString("MessageReference")].isNull() && m_message_reference_isValid;

    m_repeated_message_response_isValid = ::OpenAPI::fromJsonValue(m_repeated_message_response, json[QString("RepeatedMessageResponse")]);
    m_repeated_message_response_isSet = !json[QString("RepeatedMessageResponse")].isNull() && m_repeated_message_response_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("Response")]);
    m_response_isSet = !json[QString("Response")].isNull() && m_response_isValid;
}

QString OAITransactionStatusResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransactionStatusResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_message_reference.isSet()) {
        obj.insert(QString("MessageReference"), ::OpenAPI::toJsonValue(m_message_reference));
    }
    if (m_repeated_message_response.isSet()) {
        obj.insert(QString("RepeatedMessageResponse"), ::OpenAPI::toJsonValue(m_repeated_message_response));
    }
    if (m_response.isSet()) {
        obj.insert(QString("Response"), ::OpenAPI::toJsonValue(m_response));
    }
    return obj;
}

OAIMessageReference OAITransactionStatusResponse::getMessageReference() const {
    return m_message_reference;
}
void OAITransactionStatusResponse::setMessageReference(const OAIMessageReference &message_reference) {
    m_message_reference = message_reference;
    m_message_reference_isSet = true;
}

bool OAITransactionStatusResponse::is_message_reference_Set() const{
    return m_message_reference_isSet;
}

bool OAITransactionStatusResponse::is_message_reference_Valid() const{
    return m_message_reference_isValid;
}

OAIRepeatedMessageResponse OAITransactionStatusResponse::getRepeatedMessageResponse() const {
    return m_repeated_message_response;
}
void OAITransactionStatusResponse::setRepeatedMessageResponse(const OAIRepeatedMessageResponse &repeated_message_response) {
    m_repeated_message_response = repeated_message_response;
    m_repeated_message_response_isSet = true;
}

bool OAITransactionStatusResponse::is_repeated_message_response_Set() const{
    return m_repeated_message_response_isSet;
}

bool OAITransactionStatusResponse::is_repeated_message_response_Valid() const{
    return m_repeated_message_response_isValid;
}

OAIResponse OAITransactionStatusResponse::getResponse() const {
    return m_response;
}
void OAITransactionStatusResponse::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAITransactionStatusResponse::is_response_Set() const{
    return m_response_isSet;
}

bool OAITransactionStatusResponse::is_response_Valid() const{
    return m_response_isValid;
}

bool OAITransactionStatusResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_reference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_repeated_message_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransactionStatusResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_response_isValid && true;
}

} // namespace OpenAPI
