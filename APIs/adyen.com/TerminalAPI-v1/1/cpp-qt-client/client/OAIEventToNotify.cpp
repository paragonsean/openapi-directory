/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventToNotify.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventToNotify::OAIEventToNotify(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventToNotify::OAIEventToNotify() {
    this->initializeModel();
}

OAIEventToNotify::~OAIEventToNotify() {}

void OAIEventToNotify::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEventToNotify::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEventToNotify::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Abort", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::ABORT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("BeginMaintenance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::BEGINMAINTENANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CardInserted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::CARDINSERTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CardRemoved", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::CARDREMOVED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("CustomerLanguage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::CUSTOMERLANGUAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("EndMaintenance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::ENDMAINTENANCE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Initialised", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::INITIALISED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("KeyPressed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::KEYPRESSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("OutOfOrder", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::OUTOFORDER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Reject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::REJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SaleAdmin", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::SALEADMIN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SaleWakeUp", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::SALEWAKEUP;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecurityAlarm", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::SECURITYALARM;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Shutdown", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::SHUTDOWN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("StopAssistance", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEventToNotify::STOPASSISTANCE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEventToNotify::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEventToNotify::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEventToNotify::ABORT:
            val = "Abort";
            break;
        case eOAIEventToNotify::BEGINMAINTENANCE:
            val = "BeginMaintenance";
            break;
        case eOAIEventToNotify::CARDINSERTED:
            val = "CardInserted";
            break;
        case eOAIEventToNotify::CARDREMOVED:
            val = "CardRemoved";
            break;
        case eOAIEventToNotify::COMPLETED:
            val = "Completed";
            break;
        case eOAIEventToNotify::CUSTOMERLANGUAGE:
            val = "CustomerLanguage";
            break;
        case eOAIEventToNotify::ENDMAINTENANCE:
            val = "EndMaintenance";
            break;
        case eOAIEventToNotify::INITIALISED:
            val = "Initialised";
            break;
        case eOAIEventToNotify::KEYPRESSED:
            val = "KeyPressed";
            break;
        case eOAIEventToNotify::OUTOFORDER:
            val = "OutOfOrder";
            break;
        case eOAIEventToNotify::REJECT:
            val = "Reject";
            break;
        case eOAIEventToNotify::SALEADMIN:
            val = "SaleAdmin";
            break;
        case eOAIEventToNotify::SALEWAKEUP:
            val = "SaleWakeUp";
            break;
        case eOAIEventToNotify::SECURITYALARM:
            val = "SecurityAlarm";
            break;
        case eOAIEventToNotify::SHUTDOWN:
            val = "Shutdown";
            break;
        case eOAIEventToNotify::STOPASSISTANCE:
            val = "StopAssistance";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEventToNotify::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEventToNotify::eOAIEventToNotify OAIEventToNotify::getValue() const {
    return m_value;
}

void OAIEventToNotify::setValue(const OAIEventToNotify::eOAIEventToNotify& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEventToNotify::isSet() const {
    
    return m_value_isSet;
}

bool OAIEventToNotify::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
