/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoyaltyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoyaltyRequest::OAILoyaltyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoyaltyRequest::OAILoyaltyRequest() {
    this->initializeModel();
}

OAILoyaltyRequest::~OAILoyaltyRequest() {}

void OAILoyaltyRequest::initializeModel() {

    m_loyalty_data_isSet = false;
    m_loyalty_data_isValid = false;

    m_loyalty_transaction_isSet = false;
    m_loyalty_transaction_isValid = false;

    m_sale_data_isSet = false;
    m_sale_data_isValid = false;
}

void OAILoyaltyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoyaltyRequest::fromJsonObject(QJsonObject json) {

    m_loyalty_data_isValid = ::OpenAPI::fromJsonValue(m_loyalty_data, json[QString("LoyaltyData")]);
    m_loyalty_data_isSet = !json[QString("LoyaltyData")].isNull() && m_loyalty_data_isValid;

    m_loyalty_transaction_isValid = ::OpenAPI::fromJsonValue(m_loyalty_transaction, json[QString("LoyaltyTransaction")]);
    m_loyalty_transaction_isSet = !json[QString("LoyaltyTransaction")].isNull() && m_loyalty_transaction_isValid;

    m_sale_data_isValid = ::OpenAPI::fromJsonValue(m_sale_data, json[QString("SaleData")]);
    m_sale_data_isSet = !json[QString("SaleData")].isNull() && m_sale_data_isValid;
}

QString OAILoyaltyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoyaltyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_loyalty_data.isSet()) {
        obj.insert(QString("LoyaltyData"), ::OpenAPI::toJsonValue(m_loyalty_data));
    }
    if (m_loyalty_transaction.isSet()) {
        obj.insert(QString("LoyaltyTransaction"), ::OpenAPI::toJsonValue(m_loyalty_transaction));
    }
    if (m_sale_data.isSet()) {
        obj.insert(QString("SaleData"), ::OpenAPI::toJsonValue(m_sale_data));
    }
    return obj;
}

OAILoyaltyData OAILoyaltyRequest::getLoyaltyData() const {
    return m_loyalty_data;
}
void OAILoyaltyRequest::setLoyaltyData(const OAILoyaltyData &loyalty_data) {
    m_loyalty_data = loyalty_data;
    m_loyalty_data_isSet = true;
}

bool OAILoyaltyRequest::is_loyalty_data_Set() const{
    return m_loyalty_data_isSet;
}

bool OAILoyaltyRequest::is_loyalty_data_Valid() const{
    return m_loyalty_data_isValid;
}

OAILoyaltyTransaction OAILoyaltyRequest::getLoyaltyTransaction() const {
    return m_loyalty_transaction;
}
void OAILoyaltyRequest::setLoyaltyTransaction(const OAILoyaltyTransaction &loyalty_transaction) {
    m_loyalty_transaction = loyalty_transaction;
    m_loyalty_transaction_isSet = true;
}

bool OAILoyaltyRequest::is_loyalty_transaction_Set() const{
    return m_loyalty_transaction_isSet;
}

bool OAILoyaltyRequest::is_loyalty_transaction_Valid() const{
    return m_loyalty_transaction_isValid;
}

OAISaleData OAILoyaltyRequest::getSaleData() const {
    return m_sale_data;
}
void OAILoyaltyRequest::setSaleData(const OAISaleData &sale_data) {
    m_sale_data = sale_data;
    m_sale_data_isSet = true;
}

bool OAILoyaltyRequest::is_sale_data_Set() const{
    return m_sale_data_isSet;
}

bool OAILoyaltyRequest::is_sale_data_Valid() const{
    return m_sale_data_isValid;
}

bool OAILoyaltyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loyalty_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_loyalty_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sale_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoyaltyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_loyalty_data_isValid && m_loyalty_transaction_isValid && m_sale_data_isValid && true;
}

} // namespace OpenAPI
