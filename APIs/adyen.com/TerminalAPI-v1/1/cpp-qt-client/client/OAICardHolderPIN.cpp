/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICardHolderPIN.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICardHolderPIN::OAICardHolderPIN(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICardHolderPIN::OAICardHolderPIN() {
    this->initializeModel();
}

OAICardHolderPIN::~OAICardHolderPIN() {}

void OAICardHolderPIN::initializeModel() {

    m_additional_input_isSet = false;
    m_additional_input_isValid = false;

    m_encr_pin_block_isSet = false;
    m_encr_pin_block_isValid = false;

    m_pin_format_isSet = false;
    m_pin_format_isValid = false;
}

void OAICardHolderPIN::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICardHolderPIN::fromJsonObject(QJsonObject json) {

    m_additional_input_isValid = ::OpenAPI::fromJsonValue(m_additional_input, json[QString("AdditionalInput")]);
    m_additional_input_isSet = !json[QString("AdditionalInput")].isNull() && m_additional_input_isValid;

    m_encr_pin_block_isValid = ::OpenAPI::fromJsonValue(m_encr_pin_block, json[QString("EncrPINBlock")]);
    m_encr_pin_block_isSet = !json[QString("EncrPINBlock")].isNull() && m_encr_pin_block_isValid;

    m_pin_format_isValid = ::OpenAPI::fromJsonValue(m_pin_format, json[QString("PINFormat")]);
    m_pin_format_isSet = !json[QString("PINFormat")].isNull() && m_pin_format_isValid;
}

QString OAICardHolderPIN::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICardHolderPIN::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_input_isSet) {
        obj.insert(QString("AdditionalInput"), ::OpenAPI::toJsonValue(m_additional_input));
    }
    if (m_encr_pin_block_isSet) {
        obj.insert(QString("EncrPINBlock"), ::OpenAPI::toJsonValue(m_encr_pin_block));
    }
    if (m_pin_format.isSet()) {
        obj.insert(QString("PINFormat"), ::OpenAPI::toJsonValue(m_pin_format));
    }
    return obj;
}

QString OAICardHolderPIN::getAdditionalInput() const {
    return m_additional_input;
}
void OAICardHolderPIN::setAdditionalInput(const QString &additional_input) {
    m_additional_input = additional_input;
    m_additional_input_isSet = true;
}

bool OAICardHolderPIN::is_additional_input_Set() const{
    return m_additional_input_isSet;
}

bool OAICardHolderPIN::is_additional_input_Valid() const{
    return m_additional_input_isValid;
}

QString OAICardHolderPIN::getEncrPinBlock() const {
    return m_encr_pin_block;
}
void OAICardHolderPIN::setEncrPinBlock(const QString &encr_pin_block) {
    m_encr_pin_block = encr_pin_block;
    m_encr_pin_block_isSet = true;
}

bool OAICardHolderPIN::is_encr_pin_block_Set() const{
    return m_encr_pin_block_isSet;
}

bool OAICardHolderPIN::is_encr_pin_block_Valid() const{
    return m_encr_pin_block_isValid;
}

OAIPINFormat OAICardHolderPIN::getPinFormat() const {
    return m_pin_format;
}
void OAICardHolderPIN::setPinFormat(const OAIPINFormat &pin_format) {
    m_pin_format = pin_format;
    m_pin_format_isSet = true;
}

bool OAICardHolderPIN::is_pin_format_Set() const{
    return m_pin_format_isSet;
}

bool OAICardHolderPIN::is_pin_format_Valid() const{
    return m_pin_format_isValid;
}

bool OAICardHolderPIN::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encr_pin_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_format.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICardHolderPIN::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encr_pin_block_isValid && m_pin_format_isValid && true;
}

} // namespace OpenAPI
