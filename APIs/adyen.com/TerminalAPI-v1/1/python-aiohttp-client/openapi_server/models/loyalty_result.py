# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_account import LoyaltyAccount
from openapi_server.models.loyalty_acquirer_data import LoyaltyAcquirerData
from openapi_server.models.loyalty_amount import LoyaltyAmount
from openapi_server.models.rebates import Rebates
from openapi_server import util


class LoyaltyResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_balance: float=None, loyalty_account: LoyaltyAccount=None, loyalty_acquirer_data: LoyaltyAcquirerData=None, loyalty_amount: LoyaltyAmount=None, rebates: Rebates=None):
        """LoyaltyResult - a model defined in OpenAPI

        :param current_balance: The current_balance of this LoyaltyResult.
        :param loyalty_account: The loyalty_account of this LoyaltyResult.
        :param loyalty_acquirer_data: The loyalty_acquirer_data of this LoyaltyResult.
        :param loyalty_amount: The loyalty_amount of this LoyaltyResult.
        :param rebates: The rebates of this LoyaltyResult.
        """
        self.openapi_types = {
            'current_balance': float,
            'loyalty_account': LoyaltyAccount,
            'loyalty_acquirer_data': LoyaltyAcquirerData,
            'loyalty_amount': LoyaltyAmount,
            'rebates': Rebates
        }

        self.attribute_map = {
            'current_balance': 'CurrentBalance',
            'loyalty_account': 'LoyaltyAccount',
            'loyalty_acquirer_data': 'LoyaltyAcquirerData',
            'loyalty_amount': 'LoyaltyAmount',
            'rebates': 'Rebates'
        }

        self._current_balance = current_balance
        self._loyalty_account = loyalty_account
        self._loyalty_acquirer_data = loyalty_acquirer_data
        self._loyalty_amount = loyalty_amount
        self._rebates = rebates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyResult of this LoyaltyResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_balance(self):
        """Gets the current_balance of this LoyaltyResult.

        if known (provided by the card or an external host).

        :return: The current_balance of this LoyaltyResult.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LoyaltyResult.

        if known (provided by the card or an external host).

        :param current_balance: The current_balance of this LoyaltyResult.
        :type current_balance: float
        """
        if current_balance is not None and current_balance > 99999999.999999:
            raise ValueError("Invalid value for `current_balance`, must be a value less than or equal to `99999999.999999`")
        if current_balance is not None and current_balance < 0:
            raise ValueError("Invalid value for `current_balance`, must be a value greater than or equal to `0`")

        self._current_balance = current_balance

    @property
    def loyalty_account(self):
        """Gets the loyalty_account of this LoyaltyResult.


        :return: The loyalty_account of this LoyaltyResult.
        :rtype: LoyaltyAccount
        """
        return self._loyalty_account

    @loyalty_account.setter
    def loyalty_account(self, loyalty_account):
        """Sets the loyalty_account of this LoyaltyResult.


        :param loyalty_account: The loyalty_account of this LoyaltyResult.
        :type loyalty_account: LoyaltyAccount
        """
        if loyalty_account is None:
            raise ValueError("Invalid value for `loyalty_account`, must not be `None`")

        self._loyalty_account = loyalty_account

    @property
    def loyalty_acquirer_data(self):
        """Gets the loyalty_acquirer_data of this LoyaltyResult.


        :return: The loyalty_acquirer_data of this LoyaltyResult.
        :rtype: LoyaltyAcquirerData
        """
        return self._loyalty_acquirer_data

    @loyalty_acquirer_data.setter
    def loyalty_acquirer_data(self, loyalty_acquirer_data):
        """Sets the loyalty_acquirer_data of this LoyaltyResult.


        :param loyalty_acquirer_data: The loyalty_acquirer_data of this LoyaltyResult.
        :type loyalty_acquirer_data: LoyaltyAcquirerData
        """

        self._loyalty_acquirer_data = loyalty_acquirer_data

    @property
    def loyalty_amount(self):
        """Gets the loyalty_amount of this LoyaltyResult.


        :return: The loyalty_amount of this LoyaltyResult.
        :rtype: LoyaltyAmount
        """
        return self._loyalty_amount

    @loyalty_amount.setter
    def loyalty_amount(self, loyalty_amount):
        """Sets the loyalty_amount of this LoyaltyResult.


        :param loyalty_amount: The loyalty_amount of this LoyaltyResult.
        :type loyalty_amount: LoyaltyAmount
        """

        self._loyalty_amount = loyalty_amount

    @property
    def rebates(self):
        """Gets the rebates of this LoyaltyResult.


        :return: The rebates of this LoyaltyResult.
        :rtype: Rebates
        """
        return self._rebates

    @rebates.setter
    def rebates(self, rebates):
        """Sets the rebates of this LoyaltyResult.


        :param rebates: The rebates of this LoyaltyResult.
        :type rebates: Rebates
        """

        self._rebates = rebates
