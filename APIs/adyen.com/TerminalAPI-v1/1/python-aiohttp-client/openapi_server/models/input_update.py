# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.menu_entry import MenuEntry
from openapi_server.models.message_reference import MessageReference
from openapi_server.models.output_content import OutputContent
import re
from openapi_server import util


class InputUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_decimal_length: int=None, max_length: int=None, menu_entry: List[MenuEntry]=None, message_reference: MessageReference=None, min_length: int=None, output_content: OutputContent=None, output_signature: str=None):
        """InputUpdate - a model defined in OpenAPI

        :param max_decimal_length: The max_decimal_length of this InputUpdate.
        :param max_length: The max_length of this InputUpdate.
        :param menu_entry: The menu_entry of this InputUpdate.
        :param message_reference: The message_reference of this InputUpdate.
        :param min_length: The min_length of this InputUpdate.
        :param output_content: The output_content of this InputUpdate.
        :param output_signature: The output_signature of this InputUpdate.
        """
        self.openapi_types = {
            'max_decimal_length': int,
            'max_length': int,
            'menu_entry': List[MenuEntry],
            'message_reference': MessageReference,
            'min_length': int,
            'output_content': OutputContent,
            'output_signature': str
        }

        self.attribute_map = {
            'max_decimal_length': 'MaxDecimalLength',
            'max_length': 'MaxLength',
            'menu_entry': 'MenuEntry',
            'message_reference': 'MessageReference',
            'min_length': 'MinLength',
            'output_content': 'OutputContent',
            'output_signature': 'OutputSignature'
        }

        self._max_decimal_length = max_decimal_length
        self._max_length = max_length
        self._menu_entry = menu_entry
        self._message_reference = message_reference
        self._min_length = min_length
        self._output_content = output_content
        self._output_signature = output_signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputUpdate of this InputUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_decimal_length(self):
        """Gets the max_decimal_length of this InputUpdate.


        :return: The max_decimal_length of this InputUpdate.
        :rtype: int
        """
        return self._max_decimal_length

    @max_decimal_length.setter
    def max_decimal_length(self, max_decimal_length):
        """Sets the max_decimal_length of this InputUpdate.


        :param max_decimal_length: The max_decimal_length of this InputUpdate.
        :type max_decimal_length: int
        """

        self._max_decimal_length = max_decimal_length

    @property
    def max_length(self):
        """Gets the max_length of this InputUpdate.


        :return: The max_length of this InputUpdate.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this InputUpdate.


        :param max_length: The max_length of this InputUpdate.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def menu_entry(self):
        """Gets the menu_entry of this InputUpdate.


        :return: The menu_entry of this InputUpdate.
        :rtype: List[MenuEntry]
        """
        return self._menu_entry

    @menu_entry.setter
    def menu_entry(self, menu_entry):
        """Sets the menu_entry of this InputUpdate.


        :param menu_entry: The menu_entry of this InputUpdate.
        :type menu_entry: List[MenuEntry]
        """

        self._menu_entry = menu_entry

    @property
    def message_reference(self):
        """Gets the message_reference of this InputUpdate.


        :return: The message_reference of this InputUpdate.
        :rtype: MessageReference
        """
        return self._message_reference

    @message_reference.setter
    def message_reference(self, message_reference):
        """Sets the message_reference of this InputUpdate.


        :param message_reference: The message_reference of this InputUpdate.
        :type message_reference: MessageReference
        """
        if message_reference is None:
            raise ValueError("Invalid value for `message_reference`, must not be `None`")

        self._message_reference = message_reference

    @property
    def min_length(self):
        """Gets the min_length of this InputUpdate.


        :return: The min_length of this InputUpdate.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this InputUpdate.


        :param min_length: The min_length of this InputUpdate.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def output_content(self):
        """Gets the output_content of this InputUpdate.


        :return: The output_content of this InputUpdate.
        :rtype: OutputContent
        """
        return self._output_content

    @output_content.setter
    def output_content(self, output_content):
        """Sets the output_content of this InputUpdate.


        :param output_content: The output_content of this InputUpdate.
        :type output_content: OutputContent
        """
        if output_content is None:
            raise ValueError("Invalid value for `output_content`, must not be `None`")

        self._output_content = output_content

    @property
    def output_signature(self):
        """Gets the output_signature of this InputUpdate.


        :return: The output_signature of this InputUpdate.
        :rtype: str
        """
        return self._output_signature

    @output_signature.setter
    def output_signature(self, output_signature):
        """Sets the output_signature of this InputUpdate.


        :param output_signature: The output_signature of this InputUpdate.
        :type output_signature: str
        """
        if output_signature is not None and not re.search(r'^.+$', output_signature):
            raise ValueError("Invalid value for `output_signature`, must be a follow pattern or equal to `/^.+$/`")

        self._output_signature = output_signature
