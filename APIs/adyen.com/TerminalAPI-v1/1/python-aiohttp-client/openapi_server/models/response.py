# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_condition import ErrorCondition
from openapi_server.models.result import Result
import re
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_response: str=None, error_condition: ErrorCondition=None, result: Result=None):
        """Response - a model defined in OpenAPI

        :param additional_response: The additional_response of this Response.
        :param error_condition: The error_condition of this Response.
        :param result: The result of this Response.
        """
        self.openapi_types = {
            'additional_response': str,
            'error_condition': ErrorCondition,
            'result': Result
        }

        self.attribute_map = {
            'additional_response': 'AdditionalResponse',
            'error_condition': 'ErrorCondition',
            'result': 'Result'
        }

        self._additional_response = additional_response
        self._error_condition = error_condition
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_response(self):
        """Gets the additional_response of this Response.

        If present, the POI logs it for further examination.

        :return: The additional_response of this Response.
        :rtype: str
        """
        return self._additional_response

    @additional_response.setter
    def additional_response(self, additional_response):
        """Sets the additional_response of this Response.

        If present, the POI logs it for further examination.

        :param additional_response: The additional_response of this Response.
        :type additional_response: str
        """
        if additional_response is not None and not re.search(r'^.+$', additional_response):
            raise ValueError("Invalid value for `additional_response`, must be a follow pattern or equal to `/^.+$/`")

        self._additional_response = additional_response

    @property
    def error_condition(self):
        """Gets the error_condition of this Response.


        :return: The error_condition of this Response.
        :rtype: ErrorCondition
        """
        return self._error_condition

    @error_condition.setter
    def error_condition(self, error_condition):
        """Sets the error_condition of this Response.


        :param error_condition: The error_condition of this Response.
        :type error_condition: ErrorCondition
        """

        self._error_condition = error_condition

    @property
    def result(self):
        """Gets the result of this Response.


        :return: The result of this Response.
        :rtype: Result
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Response.


        :param result: The result of this Response.
        :type result: Result
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")

        self._result = result
