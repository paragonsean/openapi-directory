# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_id_type import TransactionIDType
import re
from openapi_server import util


class LoyaltyAcquirerData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_code: str=None, host_reconciliation_id: str=None, loyalty_acquirer_id: str=None, loyalty_transaction_id: TransactionIDType=None):
        """LoyaltyAcquirerData - a model defined in OpenAPI

        :param approval_code: The approval_code of this LoyaltyAcquirerData.
        :param host_reconciliation_id: The host_reconciliation_id of this LoyaltyAcquirerData.
        :param loyalty_acquirer_id: The loyalty_acquirer_id of this LoyaltyAcquirerData.
        :param loyalty_transaction_id: The loyalty_transaction_id of this LoyaltyAcquirerData.
        """
        self.openapi_types = {
            'approval_code': str,
            'host_reconciliation_id': str,
            'loyalty_acquirer_id': str,
            'loyalty_transaction_id': TransactionIDType
        }

        self.attribute_map = {
            'approval_code': 'ApprovalCode',
            'host_reconciliation_id': 'HostReconciliationID',
            'loyalty_acquirer_id': 'LoyaltyAcquirerID',
            'loyalty_transaction_id': 'LoyaltyTransactionID'
        }

        self._approval_code = approval_code
        self._host_reconciliation_id = host_reconciliation_id
        self._loyalty_acquirer_id = loyalty_acquirer_id
        self._loyalty_transaction_id = loyalty_transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAcquirerData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAcquirerData of this LoyaltyAcquirerData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_code(self):
        """Gets the approval_code of this LoyaltyAcquirerData.


        :return: The approval_code of this LoyaltyAcquirerData.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """Sets the approval_code of this LoyaltyAcquirerData.


        :param approval_code: The approval_code of this LoyaltyAcquirerData.
        :type approval_code: str
        """
        if approval_code is not None and not re.search(r'^.+$', approval_code):
            raise ValueError("Invalid value for `approval_code`, must be a follow pattern or equal to `/^.+$/`")

        self._approval_code = approval_code

    @property
    def host_reconciliation_id(self):
        """Gets the host_reconciliation_id of this LoyaltyAcquirerData.


        :return: The host_reconciliation_id of this LoyaltyAcquirerData.
        :rtype: str
        """
        return self._host_reconciliation_id

    @host_reconciliation_id.setter
    def host_reconciliation_id(self, host_reconciliation_id):
        """Sets the host_reconciliation_id of this LoyaltyAcquirerData.


        :param host_reconciliation_id: The host_reconciliation_id of this LoyaltyAcquirerData.
        :type host_reconciliation_id: str
        """
        if host_reconciliation_id is not None and not re.search(r'^.+$', host_reconciliation_id):
            raise ValueError("Invalid value for `host_reconciliation_id`, must be a follow pattern or equal to `/^.+$/`")

        self._host_reconciliation_id = host_reconciliation_id

    @property
    def loyalty_acquirer_id(self):
        """Gets the loyalty_acquirer_id of this LoyaltyAcquirerData.


        :return: The loyalty_acquirer_id of this LoyaltyAcquirerData.
        :rtype: str
        """
        return self._loyalty_acquirer_id

    @loyalty_acquirer_id.setter
    def loyalty_acquirer_id(self, loyalty_acquirer_id):
        """Sets the loyalty_acquirer_id of this LoyaltyAcquirerData.


        :param loyalty_acquirer_id: The loyalty_acquirer_id of this LoyaltyAcquirerData.
        :type loyalty_acquirer_id: str
        """
        if loyalty_acquirer_id is not None and not re.search(r'^.+$', loyalty_acquirer_id):
            raise ValueError("Invalid value for `loyalty_acquirer_id`, must be a follow pattern or equal to `/^.+$/`")

        self._loyalty_acquirer_id = loyalty_acquirer_id

    @property
    def loyalty_transaction_id(self):
        """Gets the loyalty_transaction_id of this LoyaltyAcquirerData.


        :return: The loyalty_transaction_id of this LoyaltyAcquirerData.
        :rtype: TransactionIDType
        """
        return self._loyalty_transaction_id

    @loyalty_transaction_id.setter
    def loyalty_transaction_id(self, loyalty_transaction_id):
        """Sets the loyalty_transaction_id of this LoyaltyAcquirerData.


        :param loyalty_transaction_id: The loyalty_transaction_id of this LoyaltyAcquirerData.
        :type loyalty_transaction_id: TransactionIDType
        """

        self._loyalty_transaction_id = loyalty_transaction_id
