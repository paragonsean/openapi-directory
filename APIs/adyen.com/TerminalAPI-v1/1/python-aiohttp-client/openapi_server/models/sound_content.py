# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sound_format import SoundFormat
import re
from openapi_server import util


class SoundContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, reference_id: str=None, sound_format: SoundFormat=None, text: str=None):
        """SoundContent - a model defined in OpenAPI

        :param language: The language of this SoundContent.
        :param reference_id: The reference_id of this SoundContent.
        :param sound_format: The sound_format of this SoundContent.
        :param text: The text of this SoundContent.
        """
        self.openapi_types = {
            'language': str,
            'reference_id': str,
            'sound_format': SoundFormat,
            'text': str
        }

        self.attribute_map = {
            'language': 'Language',
            'reference_id': 'ReferenceID',
            'sound_format': 'SoundFormat',
            'text': 'Text'
        }

        self._language = language
        self._reference_id = reference_id
        self._sound_format = sound_format
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoundContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoundContent of this SoundContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this SoundContent.


        :return: The language of this SoundContent.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SoundContent.


        :param language: The language of this SoundContent.
        :type language: str
        """
        if language is not None and not re.search(r'^[a-z]{2,2}$', language):
            raise ValueError("Invalid value for `language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._language = language

    @property
    def reference_id(self):
        """Gets the reference_id of this SoundContent.


        :return: The reference_id of this SoundContent.
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this SoundContent.


        :param reference_id: The reference_id of this SoundContent.
        :type reference_id: str
        """
        if reference_id is not None and not re.search(r'^.+$', reference_id):
            raise ValueError("Invalid value for `reference_id`, must be a follow pattern or equal to `/^.+$/`")

        self._reference_id = reference_id

    @property
    def sound_format(self):
        """Gets the sound_format of this SoundContent.


        :return: The sound_format of this SoundContent.
        :rtype: SoundFormat
        """
        return self._sound_format

    @sound_format.setter
    def sound_format(self, sound_format):
        """Sets the sound_format of this SoundContent.


        :param sound_format: The sound_format of this SoundContent.
        :type sound_format: SoundFormat
        """
        if sound_format is None:
            raise ValueError("Invalid value for `sound_format`, must not be `None`")

        self._sound_format = sound_format

    @property
    def text(self):
        """Gets the text of this SoundContent.


        :return: The text of this SoundContent.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this SoundContent.


        :param text: The text of this SoundContent.
        :type text: str
        """
        if text is not None and not re.search(r'^.+$', text):
            raise ValueError("Invalid value for `text`, must be a follow pattern or equal to `/^.+$/`")

        self._text = text
