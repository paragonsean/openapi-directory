# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_account import LoyaltyAccount
from openapi_server.models.poi_data import POIData
from openapi_server.models.payment_instrument_data import PaymentInstrumentData
from openapi_server.models.response import Response
from openapi_server.models.sale_data import SaleData
import re
from openapi_server import util


class CardAcquisitionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_language: str=None, loyalty_account: List[LoyaltyAccount]=None, poi_data: POIData=None, payment_brand: List[str]=None, payment_instrument_data: PaymentInstrumentData=None, response: Response=None, sale_data: SaleData=None):
        """CardAcquisitionResponse - a model defined in OpenAPI

        :param customer_language: The customer_language of this CardAcquisitionResponse.
        :param loyalty_account: The loyalty_account of this CardAcquisitionResponse.
        :param poi_data: The poi_data of this CardAcquisitionResponse.
        :param payment_brand: The payment_brand of this CardAcquisitionResponse.
        :param payment_instrument_data: The payment_instrument_data of this CardAcquisitionResponse.
        :param response: The response of this CardAcquisitionResponse.
        :param sale_data: The sale_data of this CardAcquisitionResponse.
        """
        self.openapi_types = {
            'customer_language': str,
            'loyalty_account': List[LoyaltyAccount],
            'poi_data': POIData,
            'payment_brand': List[str],
            'payment_instrument_data': PaymentInstrumentData,
            'response': Response,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'customer_language': 'CustomerLanguage',
            'loyalty_account': 'LoyaltyAccount',
            'poi_data': 'POIData',
            'payment_brand': 'PaymentBrand',
            'payment_instrument_data': 'PaymentInstrumentData',
            'response': 'Response',
            'sale_data': 'SaleData'
        }

        self._customer_language = customer_language
        self._loyalty_account = loyalty_account
        self._poi_data = poi_data
        self._payment_brand = payment_brand
        self._payment_instrument_data = payment_instrument_data
        self._response = response
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAcquisitionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardAcquisitionResponse of this CardAcquisitionResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_language(self):
        """Gets the customer_language of this CardAcquisitionResponse.

        Data related to the POI System.

        :return: The customer_language of this CardAcquisitionResponse.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this CardAcquisitionResponse.

        Data related to the POI System.

        :param customer_language: The customer_language of this CardAcquisitionResponse.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def loyalty_account(self):
        """Gets the loyalty_account of this CardAcquisitionResponse.


        :return: The loyalty_account of this CardAcquisitionResponse.
        :rtype: List[LoyaltyAccount]
        """
        return self._loyalty_account

    @loyalty_account.setter
    def loyalty_account(self, loyalty_account):
        """Sets the loyalty_account of this CardAcquisitionResponse.


        :param loyalty_account: The loyalty_account of this CardAcquisitionResponse.
        :type loyalty_account: List[LoyaltyAccount]
        """

        self._loyalty_account = loyalty_account

    @property
    def poi_data(self):
        """Gets the poi_data of this CardAcquisitionResponse.


        :return: The poi_data of this CardAcquisitionResponse.
        :rtype: POIData
        """
        return self._poi_data

    @poi_data.setter
    def poi_data(self, poi_data):
        """Sets the poi_data of this CardAcquisitionResponse.


        :param poi_data: The poi_data of this CardAcquisitionResponse.
        :type poi_data: POIData
        """
        if poi_data is None:
            raise ValueError("Invalid value for `poi_data`, must not be `None`")

        self._poi_data = poi_data

    @property
    def payment_brand(self):
        """Gets the payment_brand of this CardAcquisitionResponse.


        :return: The payment_brand of this CardAcquisitionResponse.
        :rtype: List[str]
        """
        return self._payment_brand

    @payment_brand.setter
    def payment_brand(self, payment_brand):
        """Sets the payment_brand of this CardAcquisitionResponse.


        :param payment_brand: The payment_brand of this CardAcquisitionResponse.
        :type payment_brand: List[str]
        """

        self._payment_brand = payment_brand

    @property
    def payment_instrument_data(self):
        """Gets the payment_instrument_data of this CardAcquisitionResponse.


        :return: The payment_instrument_data of this CardAcquisitionResponse.
        :rtype: PaymentInstrumentData
        """
        return self._payment_instrument_data

    @payment_instrument_data.setter
    def payment_instrument_data(self, payment_instrument_data):
        """Sets the payment_instrument_data of this CardAcquisitionResponse.


        :param payment_instrument_data: The payment_instrument_data of this CardAcquisitionResponse.
        :type payment_instrument_data: PaymentInstrumentData
        """

        self._payment_instrument_data = payment_instrument_data

    @property
    def response(self):
        """Gets the response of this CardAcquisitionResponse.


        :return: The response of this CardAcquisitionResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this CardAcquisitionResponse.


        :param response: The response of this CardAcquisitionResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def sale_data(self):
        """Gets the sale_data of this CardAcquisitionResponse.


        :return: The sale_data of this CardAcquisitionResponse.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this CardAcquisitionResponse.


        :param sale_data: The sale_data of this CardAcquisitionResponse.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data
