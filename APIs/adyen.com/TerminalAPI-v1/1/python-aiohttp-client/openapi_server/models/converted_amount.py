# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ConvertedAmount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_value: float=None, currency: str=None):
        """ConvertedAmount - a model defined in OpenAPI

        :param amount_value: The amount_value of this ConvertedAmount.
        :param currency: The currency of this ConvertedAmount.
        """
        self.openapi_types = {
            'amount_value': float,
            'currency': str
        }

        self.attribute_map = {
            'amount_value': 'AmountValue',
            'currency': 'Currency'
        }

        self._amount_value = amount_value
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConvertedAmount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConvertedAmount of this ConvertedAmount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_value(self):
        """Gets the amount_value of this ConvertedAmount.


        :return: The amount_value of this ConvertedAmount.
        :rtype: float
        """
        return self._amount_value

    @amount_value.setter
    def amount_value(self, amount_value):
        """Sets the amount_value of this ConvertedAmount.


        :param amount_value: The amount_value of this ConvertedAmount.
        :type amount_value: float
        """
        if amount_value is None:
            raise ValueError("Invalid value for `amount_value`, must not be `None`")
        if amount_value is not None and amount_value > 99999999.999999:
            raise ValueError("Invalid value for `amount_value`, must be a value less than or equal to `99999999.999999`")
        if amount_value is not None and amount_value < 0:
            raise ValueError("Invalid value for `amount_value`, must be a value greater than or equal to `0`")

        self._amount_value = amount_value

    @property
    def currency(self):
        """Gets the currency of this ConvertedAmount.


        :return: The currency of this ConvertedAmount.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ConvertedAmount.


        :param currency: The currency of this ConvertedAmount.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency
