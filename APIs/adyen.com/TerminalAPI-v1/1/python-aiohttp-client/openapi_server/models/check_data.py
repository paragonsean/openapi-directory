# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_data import TrackData
from openapi_server.models.type_code import TypeCode
import re
from openapi_server import util


class CheckData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, bank_id: str=None, check_card_number: str=None, check_number: str=None, country: str=None, track_data: TrackData=None, type_code: TypeCode=None):
        """CheckData - a model defined in OpenAPI

        :param account_number: The account_number of this CheckData.
        :param bank_id: The bank_id of this CheckData.
        :param check_card_number: The check_card_number of this CheckData.
        :param check_number: The check_number of this CheckData.
        :param country: The country of this CheckData.
        :param track_data: The track_data of this CheckData.
        :param type_code: The type_code of this CheckData.
        """
        self.openapi_types = {
            'account_number': str,
            'bank_id': str,
            'check_card_number': str,
            'check_number': str,
            'country': str,
            'track_data': TrackData,
            'type_code': TypeCode
        }

        self.attribute_map = {
            'account_number': 'AccountNumber',
            'bank_id': 'BankID',
            'check_card_number': 'CheckCardNumber',
            'check_number': 'CheckNumber',
            'country': 'Country',
            'track_data': 'TrackData',
            'type_code': 'TypeCode'
        }

        self._account_number = account_number
        self._bank_id = bank_id
        self._check_card_number = check_card_number
        self._check_number = check_number
        self._country = country
        self._track_data = track_data
        self._type_code = type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckData of this CheckData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this CheckData.

        Mandatory if TrackData absent.

        :return: The account_number of this CheckData.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CheckData.

        Mandatory if TrackData absent.

        :param account_number: The account_number of this CheckData.
        :type account_number: str
        """
        if account_number is not None and not re.search(r'^.+$', account_number):
            raise ValueError("Invalid value for `account_number`, must be a follow pattern or equal to `/^.+$/`")

        self._account_number = account_number

    @property
    def bank_id(self):
        """Gets the bank_id of this CheckData.

        Mandatory if TrackData absent.

        :return: The bank_id of this CheckData.
        :rtype: str
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this CheckData.

        Mandatory if TrackData absent.

        :param bank_id: The bank_id of this CheckData.
        :type bank_id: str
        """
        if bank_id is not None and not re.search(r'^.+$', bank_id):
            raise ValueError("Invalid value for `bank_id`, must be a follow pattern or equal to `/^.+$/`")

        self._bank_id = bank_id

    @property
    def check_card_number(self):
        """Gets the check_card_number of this CheckData.

        If provided by the customer.

        :return: The check_card_number of this CheckData.
        :rtype: str
        """
        return self._check_card_number

    @check_card_number.setter
    def check_card_number(self, check_card_number):
        """Sets the check_card_number of this CheckData.

        If provided by the customer.

        :param check_card_number: The check_card_number of this CheckData.
        :type check_card_number: str
        """
        if check_card_number is not None and not re.search(r'^.+$', check_card_number):
            raise ValueError("Invalid value for `check_card_number`, must be a follow pattern or equal to `/^.+$/`")

        self._check_card_number = check_card_number

    @property
    def check_number(self):
        """Gets the check_number of this CheckData.

        Mandatory if TrackData absent.

        :return: The check_number of this CheckData.
        :rtype: str
        """
        return self._check_number

    @check_number.setter
    def check_number(self, check_number):
        """Sets the check_number of this CheckData.

        Mandatory if TrackData absent.

        :param check_number: The check_number of this CheckData.
        :type check_number: str
        """
        if check_number is not None and not re.search(r'^.+$', check_number):
            raise ValueError("Invalid value for `check_number`, must be a follow pattern or equal to `/^.+$/`")

        self._check_number = check_number

    @property
    def country(self):
        """Gets the country of this CheckData.

        Absent if country of the Sale system.

        :return: The country of this CheckData.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CheckData.

        Absent if country of the Sale system.

        :param country: The country of this CheckData.
        :type country: str
        """
        if country is not None and not re.search(r'^[A-Z]{3,3}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._country = country

    @property
    def track_data(self):
        """Gets the track_data of this CheckData.


        :return: The track_data of this CheckData.
        :rtype: TrackData
        """
        return self._track_data

    @track_data.setter
    def track_data(self, track_data):
        """Sets the track_data of this CheckData.


        :param track_data: The track_data of this CheckData.
        :type track_data: TrackData
        """

        self._track_data = track_data

    @property
    def type_code(self):
        """Gets the type_code of this CheckData.


        :return: The type_code of this CheckData.
        :rtype: TypeCode
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this CheckData.


        :param type_code: The type_code of this CheckData.
        :type type_code: TypeCode
        """

        self._type_code = type_code
