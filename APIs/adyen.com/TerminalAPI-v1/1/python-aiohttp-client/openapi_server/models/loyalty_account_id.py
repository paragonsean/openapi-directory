# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identification_support import IdentificationSupport
from openapi_server.models.identification_type import IdentificationType
from openapi_server import util


class LoyaltyAccountID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_mode: List[str]=None, identification_support: IdentificationSupport=None, identification_type: IdentificationType=None, loyalty_id: str=None):
        """LoyaltyAccountID - a model defined in OpenAPI

        :param entry_mode: The entry_mode of this LoyaltyAccountID.
        :param identification_support: The identification_support of this LoyaltyAccountID.
        :param identification_type: The identification_type of this LoyaltyAccountID.
        :param loyalty_id: The loyalty_id of this LoyaltyAccountID.
        """
        self.openapi_types = {
            'entry_mode': List[str],
            'identification_support': IdentificationSupport,
            'identification_type': IdentificationType,
            'loyalty_id': str
        }

        self.attribute_map = {
            'entry_mode': 'EntryMode',
            'identification_support': 'IdentificationSupport',
            'identification_type': 'IdentificationType',
            'loyalty_id': 'LoyaltyID'
        }

        self._entry_mode = entry_mode
        self._identification_support = identification_support
        self._identification_type = identification_type
        self._loyalty_id = loyalty_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAccountID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAccountID of this LoyaltyAccountID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_mode(self):
        """Gets the entry_mode of this LoyaltyAccountID.


        :return: The entry_mode of this LoyaltyAccountID.
        :rtype: List[str]
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this LoyaltyAccountID.


        :param entry_mode: The entry_mode of this LoyaltyAccountID.
        :type entry_mode: List[str]
        """
        allowed_values = ["Contactless", "File", "ICC", "Keyed", "MagStripe", "Manual", "Mobile", "RFID", "Scanned", "SynchronousICC", "Tapped"]  # noqa: E501
        if not set(entry_mode).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entry_mode` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entry_mode) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entry_mode = entry_mode

    @property
    def identification_support(self):
        """Gets the identification_support of this LoyaltyAccountID.


        :return: The identification_support of this LoyaltyAccountID.
        :rtype: IdentificationSupport
        """
        return self._identification_support

    @identification_support.setter
    def identification_support(self, identification_support):
        """Sets the identification_support of this LoyaltyAccountID.


        :param identification_support: The identification_support of this LoyaltyAccountID.
        :type identification_support: IdentificationSupport
        """

        self._identification_support = identification_support

    @property
    def identification_type(self):
        """Gets the identification_type of this LoyaltyAccountID.


        :return: The identification_type of this LoyaltyAccountID.
        :rtype: IdentificationType
        """
        return self._identification_type

    @identification_type.setter
    def identification_type(self, identification_type):
        """Sets the identification_type of this LoyaltyAccountID.


        :param identification_type: The identification_type of this LoyaltyAccountID.
        :type identification_type: IdentificationType
        """
        if identification_type is None:
            raise ValueError("Invalid value for `identification_type`, must not be `None`")

        self._identification_type = identification_type

    @property
    def loyalty_id(self):
        """Gets the loyalty_id of this LoyaltyAccountID.


        :return: The loyalty_id of this LoyaltyAccountID.
        :rtype: str
        """
        return self._loyalty_id

    @loyalty_id.setter
    def loyalty_id(self, loyalty_id):
        """Sets the loyalty_id of this LoyaltyAccountID.


        :param loyalty_id: The loyalty_id of this LoyaltyAccountID.
        :type loyalty_id: str
        """
        if loyalty_id is None:
            raise ValueError("Invalid value for `loyalty_id`, must not be `None`")

        self._loyalty_id = loyalty_id
