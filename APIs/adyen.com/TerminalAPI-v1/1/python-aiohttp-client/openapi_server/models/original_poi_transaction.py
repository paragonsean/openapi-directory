# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_id_type import TransactionIDType
import re
from openapi_server import util


class OriginalPOITransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: int=None, amount_value: float=None, approval_code: str=None, customer_language: str=None, host_transaction_id: TransactionIDType=None, poiid: str=None, poi_transaction_id: TransactionIDType=None, reuse_card_data_flag: bool=True, sale_id: str=None):
        """OriginalPOITransaction - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this OriginalPOITransaction.
        :param amount_value: The amount_value of this OriginalPOITransaction.
        :param approval_code: The approval_code of this OriginalPOITransaction.
        :param customer_language: The customer_language of this OriginalPOITransaction.
        :param host_transaction_id: The host_transaction_id of this OriginalPOITransaction.
        :param poiid: The poiid of this OriginalPOITransaction.
        :param poi_transaction_id: The poi_transaction_id of this OriginalPOITransaction.
        :param reuse_card_data_flag: The reuse_card_data_flag of this OriginalPOITransaction.
        :param sale_id: The sale_id of this OriginalPOITransaction.
        """
        self.openapi_types = {
            'acquirer_id': int,
            'amount_value': float,
            'approval_code': str,
            'customer_language': str,
            'host_transaction_id': TransactionIDType,
            'poiid': str,
            'poi_transaction_id': TransactionIDType,
            'reuse_card_data_flag': bool,
            'sale_id': str
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'amount_value': 'AmountValue',
            'approval_code': 'ApprovalCode',
            'customer_language': 'CustomerLanguage',
            'host_transaction_id': 'HostTransactionID',
            'poiid': 'POIID',
            'poi_transaction_id': 'POITransactionID',
            'reuse_card_data_flag': 'ReuseCardDataFlag',
            'sale_id': 'SaleID'
        }

        self._acquirer_id = acquirer_id
        self._amount_value = amount_value
        self._approval_code = approval_code
        self._customer_language = customer_language
        self._host_transaction_id = host_transaction_id
        self._poiid = poiid
        self._poi_transaction_id = poi_transaction_id
        self._reuse_card_data_flag = reuse_card_data_flag
        self._sale_id = sale_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OriginalPOITransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OriginalPOITransaction of this OriginalPOITransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this OriginalPOITransaction.

        Restrict to these Acquirer if present.

        :return: The acquirer_id of this OriginalPOITransaction.
        :rtype: int
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this OriginalPOITransaction.

        Restrict to these Acquirer if present.

        :param acquirer_id: The acquirer_id of this OriginalPOITransaction.
        :type acquirer_id: int
        """

        self._acquirer_id = acquirer_id

    @property
    def amount_value(self):
        """Gets the amount_value of this OriginalPOITransaction.


        :return: The amount_value of this OriginalPOITransaction.
        :rtype: float
        """
        return self._amount_value

    @amount_value.setter
    def amount_value(self, amount_value):
        """Sets the amount_value of this OriginalPOITransaction.


        :param amount_value: The amount_value of this OriginalPOITransaction.
        :type amount_value: float
        """
        if amount_value is not None and amount_value > 99999999.999999:
            raise ValueError("Invalid value for `amount_value`, must be a value less than or equal to `99999999.999999`")
        if amount_value is not None and amount_value < 0:
            raise ValueError("Invalid value for `amount_value`, must be a value greater than or equal to `0`")

        self._amount_value = amount_value

    @property
    def approval_code(self):
        """Gets the approval_code of this OriginalPOITransaction.

        If referral.

        :return: The approval_code of this OriginalPOITransaction.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """Sets the approval_code of this OriginalPOITransaction.

        If referral.

        :param approval_code: The approval_code of this OriginalPOITransaction.
        :type approval_code: str
        """
        if approval_code is not None and not re.search(r'^.+$', approval_code):
            raise ValueError("Invalid value for `approval_code`, must be a follow pattern or equal to `/^.+$/`")

        self._approval_code = approval_code

    @property
    def customer_language(self):
        """Gets the customer_language of this OriginalPOITransaction.

        If the language is selected by the Sale System before the request to the POI.

        :return: The customer_language of this OriginalPOITransaction.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this OriginalPOITransaction.

        If the language is selected by the Sale System before the request to the POI.

        :param customer_language: The customer_language of this OriginalPOITransaction.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def host_transaction_id(self):
        """Gets the host_transaction_id of this OriginalPOITransaction.


        :return: The host_transaction_id of this OriginalPOITransaction.
        :rtype: TransactionIDType
        """
        return self._host_transaction_id

    @host_transaction_id.setter
    def host_transaction_id(self, host_transaction_id):
        """Sets the host_transaction_id of this OriginalPOITransaction.


        :param host_transaction_id: The host_transaction_id of this OriginalPOITransaction.
        :type host_transaction_id: TransactionIDType
        """

        self._host_transaction_id = host_transaction_id

    @property
    def poiid(self):
        """Gets the poiid of this OriginalPOITransaction.

        If original transaction is coming from another POI.

        :return: The poiid of this OriginalPOITransaction.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this OriginalPOITransaction.

        If original transaction is coming from another POI.

        :param poiid: The poiid of this OriginalPOITransaction.
        :type poiid: str
        """
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid

    @property
    def poi_transaction_id(self):
        """Gets the poi_transaction_id of this OriginalPOITransaction.


        :return: The poi_transaction_id of this OriginalPOITransaction.
        :rtype: TransactionIDType
        """
        return self._poi_transaction_id

    @poi_transaction_id.setter
    def poi_transaction_id(self, poi_transaction_id):
        """Sets the poi_transaction_id of this OriginalPOITransaction.


        :param poi_transaction_id: The poi_transaction_id of this OriginalPOITransaction.
        :type poi_transaction_id: TransactionIDType
        """

        self._poi_transaction_id = poi_transaction_id

    @property
    def reuse_card_data_flag(self):
        """Gets the reuse_card_data_flag of this OriginalPOITransaction.

        Indicate if the card data has to be got from a previous transaction.

        :return: The reuse_card_data_flag of this OriginalPOITransaction.
        :rtype: bool
        """
        return self._reuse_card_data_flag

    @reuse_card_data_flag.setter
    def reuse_card_data_flag(self, reuse_card_data_flag):
        """Sets the reuse_card_data_flag of this OriginalPOITransaction.

        Indicate if the card data has to be got from a previous transaction.

        :param reuse_card_data_flag: The reuse_card_data_flag of this OriginalPOITransaction.
        :type reuse_card_data_flag: bool
        """

        self._reuse_card_data_flag = reuse_card_data_flag

    @property
    def sale_id(self):
        """Gets the sale_id of this OriginalPOITransaction.

        Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.

        :return: The sale_id of this OriginalPOITransaction.
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this OriginalPOITransaction.

        Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.

        :param sale_id: The sale_id of this OriginalPOITransaction.
        :type sale_id: str
        """
        if sale_id is not None and not re.search(r'^.+$', sale_id):
            raise ValueError("Invalid value for `sale_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_id = sale_id
