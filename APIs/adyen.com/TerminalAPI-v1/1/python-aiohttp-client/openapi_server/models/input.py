# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_command import InputCommand
from openapi_server import util


class Input(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confirmed_flag: bool=None, digit_input: int=None, function_key: int=None, input_command: InputCommand=None, menu_entry_number: List[int]=None, password: str=None, text_input: str=None):
        """Input - a model defined in OpenAPI

        :param confirmed_flag: The confirmed_flag of this Input.
        :param digit_input: The digit_input of this Input.
        :param function_key: The function_key of this Input.
        :param input_command: The input_command of this Input.
        :param menu_entry_number: The menu_entry_number of this Input.
        :param password: The password of this Input.
        :param text_input: The text_input of this Input.
        """
        self.openapi_types = {
            'confirmed_flag': bool,
            'digit_input': int,
            'function_key': int,
            'input_command': InputCommand,
            'menu_entry_number': List[int],
            'password': str,
            'text_input': str
        }

        self.attribute_map = {
            'confirmed_flag': 'ConfirmedFlag',
            'digit_input': 'DigitInput',
            'function_key': 'FunctionKey',
            'input_command': 'InputCommand',
            'menu_entry_number': 'MenuEntryNumber',
            'password': 'Password',
            'text_input': 'TextInput'
        }

        self._confirmed_flag = confirmed_flag
        self._digit_input = digit_input
        self._function_key = function_key
        self._input_command = input_command
        self._menu_entry_number = menu_entry_number
        self._password = password
        self._text_input = text_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Input':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Input of this Input.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confirmed_flag(self):
        """Gets the confirmed_flag of this Input.


        :return: The confirmed_flag of this Input.
        :rtype: bool
        """
        return self._confirmed_flag

    @confirmed_flag.setter
    def confirmed_flag(self, confirmed_flag):
        """Sets the confirmed_flag of this Input.


        :param confirmed_flag: The confirmed_flag of this Input.
        :type confirmed_flag: bool
        """

        self._confirmed_flag = confirmed_flag

    @property
    def digit_input(self):
        """Gets the digit_input of this Input.


        :return: The digit_input of this Input.
        :rtype: int
        """
        return self._digit_input

    @digit_input.setter
    def digit_input(self, digit_input):
        """Sets the digit_input of this Input.


        :param digit_input: The digit_input of this Input.
        :type digit_input: int
        """

        self._digit_input = digit_input

    @property
    def function_key(self):
        """Gets the function_key of this Input.


        :return: The function_key of this Input.
        :rtype: int
        """
        return self._function_key

    @function_key.setter
    def function_key(self, function_key):
        """Sets the function_key of this Input.


        :param function_key: The function_key of this Input.
        :type function_key: int
        """

        self._function_key = function_key

    @property
    def input_command(self):
        """Gets the input_command of this Input.


        :return: The input_command of this Input.
        :rtype: InputCommand
        """
        return self._input_command

    @input_command.setter
    def input_command(self, input_command):
        """Sets the input_command of this Input.


        :param input_command: The input_command of this Input.
        :type input_command: InputCommand
        """
        if input_command is None:
            raise ValueError("Invalid value for `input_command`, must not be `None`")

        self._input_command = input_command

    @property
    def menu_entry_number(self):
        """Gets the menu_entry_number of this Input.


        :return: The menu_entry_number of this Input.
        :rtype: List[int]
        """
        return self._menu_entry_number

    @menu_entry_number.setter
    def menu_entry_number(self, menu_entry_number):
        """Sets the menu_entry_number of this Input.


        :param menu_entry_number: The menu_entry_number of this Input.
        :type menu_entry_number: List[int]
        """

        self._menu_entry_number = menu_entry_number

    @property
    def password(self):
        """Gets the password of this Input.


        :return: The password of this Input.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Input.


        :param password: The password of this Input.
        :type password: str
        """

        self._password = password

    @property
    def text_input(self):
        """Gets the text_input of this Input.


        :return: The text_input of this Input.
        :rtype: str
        """
        return self._text_input

    @text_input.setter
    def text_input(self, text_input):
        """Sets the text_input of this Input.


        :param text_input: The text_input of this Input.
        :type text_input: str
        """

        self._text_input = text_input
