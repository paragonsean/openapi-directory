# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_transaction_type import LoyaltyTransactionType
from openapi_server.models.original_poi_transaction import OriginalPOITransaction
from openapi_server.models.sale_item import SaleItem
from openapi_server.models.transaction_conditions import TransactionConditions
import re
from openapi_server import util


class LoyaltyTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, loyalty_transaction_type: LoyaltyTransactionType=None, original_poi_transaction: OriginalPOITransaction=None, sale_item: List[SaleItem]=None, total_amount: float=None, transaction_conditions: TransactionConditions=None):
        """LoyaltyTransaction - a model defined in OpenAPI

        :param currency: The currency of this LoyaltyTransaction.
        :param loyalty_transaction_type: The loyalty_transaction_type of this LoyaltyTransaction.
        :param original_poi_transaction: The original_poi_transaction of this LoyaltyTransaction.
        :param sale_item: The sale_item of this LoyaltyTransaction.
        :param total_amount: The total_amount of this LoyaltyTransaction.
        :param transaction_conditions: The transaction_conditions of this LoyaltyTransaction.
        """
        self.openapi_types = {
            'currency': str,
            'loyalty_transaction_type': LoyaltyTransactionType,
            'original_poi_transaction': OriginalPOITransaction,
            'sale_item': List[SaleItem],
            'total_amount': float,
            'transaction_conditions': TransactionConditions
        }

        self.attribute_map = {
            'currency': 'Currency',
            'loyalty_transaction_type': 'LoyaltyTransactionType',
            'original_poi_transaction': 'OriginalPOITransaction',
            'sale_item': 'SaleItem',
            'total_amount': 'TotalAmount',
            'transaction_conditions': 'TransactionConditions'
        }

        self._currency = currency
        self._loyalty_transaction_type = loyalty_transaction_type
        self._original_poi_transaction = original_poi_transaction
        self._sale_item = sale_item
        self._total_amount = total_amount
        self._transaction_conditions = transaction_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyTransaction of this LoyaltyTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this LoyaltyTransaction.


        :return: The currency of this LoyaltyTransaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoyaltyTransaction.


        :param currency: The currency of this LoyaltyTransaction.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def loyalty_transaction_type(self):
        """Gets the loyalty_transaction_type of this LoyaltyTransaction.


        :return: The loyalty_transaction_type of this LoyaltyTransaction.
        :rtype: LoyaltyTransactionType
        """
        return self._loyalty_transaction_type

    @loyalty_transaction_type.setter
    def loyalty_transaction_type(self, loyalty_transaction_type):
        """Sets the loyalty_transaction_type of this LoyaltyTransaction.


        :param loyalty_transaction_type: The loyalty_transaction_type of this LoyaltyTransaction.
        :type loyalty_transaction_type: LoyaltyTransactionType
        """
        if loyalty_transaction_type is None:
            raise ValueError("Invalid value for `loyalty_transaction_type`, must not be `None`")

        self._loyalty_transaction_type = loyalty_transaction_type

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this LoyaltyTransaction.


        :return: The original_poi_transaction of this LoyaltyTransaction.
        :rtype: OriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this LoyaltyTransaction.


        :param original_poi_transaction: The original_poi_transaction of this LoyaltyTransaction.
        :type original_poi_transaction: OriginalPOITransaction
        """

        self._original_poi_transaction = original_poi_transaction

    @property
    def sale_item(self):
        """Gets the sale_item of this LoyaltyTransaction.


        :return: The sale_item of this LoyaltyTransaction.
        :rtype: List[SaleItem]
        """
        return self._sale_item

    @sale_item.setter
    def sale_item(self, sale_item):
        """Sets the sale_item of this LoyaltyTransaction.


        :param sale_item: The sale_item of this LoyaltyTransaction.
        :type sale_item: List[SaleItem]
        """

        self._sale_item = sale_item

    @property
    def total_amount(self):
        """Gets the total_amount of this LoyaltyTransaction.


        :return: The total_amount of this LoyaltyTransaction.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this LoyaltyTransaction.


        :param total_amount: The total_amount of this LoyaltyTransaction.
        :type total_amount: float
        """
        if total_amount is not None and total_amount > 99999999.999999:
            raise ValueError("Invalid value for `total_amount`, must be a value less than or equal to `99999999.999999`")
        if total_amount is not None and total_amount < 0:
            raise ValueError("Invalid value for `total_amount`, must be a value greater than or equal to `0`")

        self._total_amount = total_amount

    @property
    def transaction_conditions(self):
        """Gets the transaction_conditions of this LoyaltyTransaction.


        :return: The transaction_conditions of this LoyaltyTransaction.
        :rtype: TransactionConditions
        """
        return self._transaction_conditions

    @transaction_conditions.setter
    def transaction_conditions(self, transaction_conditions):
        """Sets the transaction_conditions of this LoyaltyTransaction.


        :param transaction_conditions: The transaction_conditions of this LoyaltyTransaction.
        :type transaction_conditions: TransactionConditions
        """

        self._transaction_conditions = transaction_conditions
