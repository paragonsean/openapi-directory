# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.generic_profile import GenericProfile
from openapi_server import util


class POIProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generic_profile: GenericProfile=None, service_profiles: List[str]=None):
        """POIProfile - a model defined in OpenAPI

        :param generic_profile: The generic_profile of this POIProfile.
        :param service_profiles: The service_profiles of this POIProfile.
        """
        self.openapi_types = {
            'generic_profile': GenericProfile,
            'service_profiles': List[str]
        }

        self.attribute_map = {
            'generic_profile': 'GenericProfile',
            'service_profiles': 'ServiceProfiles'
        }

        self._generic_profile = generic_profile
        self._service_profiles = service_profiles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'POIProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The POIProfile of this POIProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generic_profile(self):
        """Gets the generic_profile of this POIProfile.


        :return: The generic_profile of this POIProfile.
        :rtype: GenericProfile
        """
        return self._generic_profile

    @generic_profile.setter
    def generic_profile(self, generic_profile):
        """Sets the generic_profile of this POIProfile.


        :param generic_profile: The generic_profile of this POIProfile.
        :type generic_profile: GenericProfile
        """

        self._generic_profile = generic_profile

    @property
    def service_profiles(self):
        """Gets the service_profiles of this POIProfile.


        :return: The service_profiles of this POIProfile.
        :rtype: List[str]
        """
        return self._service_profiles

    @service_profiles.setter
    def service_profiles(self, service_profiles):
        """Sets the service_profiles of this POIProfile.


        :param service_profiles: The service_profiles of this POIProfile.
        :type service_profiles: List[str]
        """
        allowed_values = ["Batch", "CardReader", "Communication", "Loyalty", "OneTimeRes", "PIN", "Reservation", "Sound", "StoredValue", "Synchro"]  # noqa: E501
        if not set(service_profiles).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `service_profiles` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(service_profiles) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._service_profiles = service_profiles
