# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.menu_entry_tag import MenuEntryTag
from openapi_server.models.output_format import OutputFormat
from openapi_server.models.output_text import OutputText
from openapi_server.models.predefined_content import PredefinedContent
import re
from openapi_server import util


class MenuEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_selected_flag: bool=False, menu_entry_tag: MenuEntryTag=None, output_format: OutputFormat=None, output_text: List[OutputText]=None, output_xhtml: str=None, predefined_content: PredefinedContent=None):
        """MenuEntry - a model defined in OpenAPI

        :param default_selected_flag: The default_selected_flag of this MenuEntry.
        :param menu_entry_tag: The menu_entry_tag of this MenuEntry.
        :param output_format: The output_format of this MenuEntry.
        :param output_text: The output_text of this MenuEntry.
        :param output_xhtml: The output_xhtml of this MenuEntry.
        :param predefined_content: The predefined_content of this MenuEntry.
        """
        self.openapi_types = {
            'default_selected_flag': bool,
            'menu_entry_tag': MenuEntryTag,
            'output_format': OutputFormat,
            'output_text': List[OutputText],
            'output_xhtml': str,
            'predefined_content': PredefinedContent
        }

        self.attribute_map = {
            'default_selected_flag': 'DefaultSelectedFlag',
            'menu_entry_tag': 'MenuEntryTag',
            'output_format': 'OutputFormat',
            'output_text': 'OutputText',
            'output_xhtml': 'OutputXHTML',
            'predefined_content': 'PredefinedContent'
        }

        self._default_selected_flag = default_selected_flag
        self._menu_entry_tag = menu_entry_tag
        self._output_format = output_format
        self._output_text = output_text
        self._output_xhtml = output_xhtml
        self._predefined_content = predefined_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MenuEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MenuEntry of this MenuEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_selected_flag(self):
        """Gets the default_selected_flag of this MenuEntry.


        :return: The default_selected_flag of this MenuEntry.
        :rtype: bool
        """
        return self._default_selected_flag

    @default_selected_flag.setter
    def default_selected_flag(self, default_selected_flag):
        """Sets the default_selected_flag of this MenuEntry.


        :param default_selected_flag: The default_selected_flag of this MenuEntry.
        :type default_selected_flag: bool
        """

        self._default_selected_flag = default_selected_flag

    @property
    def menu_entry_tag(self):
        """Gets the menu_entry_tag of this MenuEntry.


        :return: The menu_entry_tag of this MenuEntry.
        :rtype: MenuEntryTag
        """
        return self._menu_entry_tag

    @menu_entry_tag.setter
    def menu_entry_tag(self, menu_entry_tag):
        """Sets the menu_entry_tag of this MenuEntry.


        :param menu_entry_tag: The menu_entry_tag of this MenuEntry.
        :type menu_entry_tag: MenuEntryTag
        """

        self._menu_entry_tag = menu_entry_tag

    @property
    def output_format(self):
        """Gets the output_format of this MenuEntry.


        :return: The output_format of this MenuEntry.
        :rtype: OutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this MenuEntry.


        :param output_format: The output_format of this MenuEntry.
        :type output_format: OutputFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")

        self._output_format = output_format

    @property
    def output_text(self):
        """Gets the output_text of this MenuEntry.


        :return: The output_text of this MenuEntry.
        :rtype: List[OutputText]
        """
        return self._output_text

    @output_text.setter
    def output_text(self, output_text):
        """Sets the output_text of this MenuEntry.


        :param output_text: The output_text of this MenuEntry.
        :type output_text: List[OutputText]
        """

        self._output_text = output_text

    @property
    def output_xhtml(self):
        """Gets the output_xhtml of this MenuEntry.


        :return: The output_xhtml of this MenuEntry.
        :rtype: str
        """
        return self._output_xhtml

    @output_xhtml.setter
    def output_xhtml(self, output_xhtml):
        """Sets the output_xhtml of this MenuEntry.


        :param output_xhtml: The output_xhtml of this MenuEntry.
        :type output_xhtml: str
        """
        if output_xhtml is not None and not re.search(r'^.+$', output_xhtml):
            raise ValueError("Invalid value for `output_xhtml`, must be a follow pattern or equal to `/^.+$/`")

        self._output_xhtml = output_xhtml

    @property
    def predefined_content(self):
        """Gets the predefined_content of this MenuEntry.


        :return: The predefined_content of this MenuEntry.
        :rtype: PredefinedContent
        """
        return self._predefined_content

    @predefined_content.setter
    def predefined_content(self, predefined_content):
        """Sets the predefined_content of this MenuEntry.


        :param predefined_content: The predefined_content of this MenuEntry.
        :type predefined_content: PredefinedContent
        """

        self._predefined_content = predefined_content
