# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_order import CustomerOrder
from openapi_server.models.original_poi_transaction import OriginalPOITransaction
from openapi_server.models.poi_data import POIData
from openapi_server.models.payment_receipt import PaymentReceipt
from openapi_server.models.response import Response
from openapi_server import util


class ReversalResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_order: List[CustomerOrder]=None, original_poi_transaction: OriginalPOITransaction=None, poi_data: POIData=None, payment_receipt: List[PaymentReceipt]=None, response: Response=None, reversed_amount: float=None):
        """ReversalResponse - a model defined in OpenAPI

        :param customer_order: The customer_order of this ReversalResponse.
        :param original_poi_transaction: The original_poi_transaction of this ReversalResponse.
        :param poi_data: The poi_data of this ReversalResponse.
        :param payment_receipt: The payment_receipt of this ReversalResponse.
        :param response: The response of this ReversalResponse.
        :param reversed_amount: The reversed_amount of this ReversalResponse.
        """
        self.openapi_types = {
            'customer_order': List[CustomerOrder],
            'original_poi_transaction': OriginalPOITransaction,
            'poi_data': POIData,
            'payment_receipt': List[PaymentReceipt],
            'response': Response,
            'reversed_amount': float
        }

        self.attribute_map = {
            'customer_order': 'CustomerOrder',
            'original_poi_transaction': 'OriginalPOITransaction',
            'poi_data': 'POIData',
            'payment_receipt': 'PaymentReceipt',
            'response': 'Response',
            'reversed_amount': 'ReversedAmount'
        }

        self._customer_order = customer_order
        self._original_poi_transaction = original_poi_transaction
        self._poi_data = poi_data
        self._payment_receipt = payment_receipt
        self._response = response
        self._reversed_amount = reversed_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReversalResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReversalResponse of this ReversalResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_order(self):
        """Gets the customer_order of this ReversalResponse.


        :return: The customer_order of this ReversalResponse.
        :rtype: List[CustomerOrder]
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this ReversalResponse.


        :param customer_order: The customer_order of this ReversalResponse.
        :type customer_order: List[CustomerOrder]
        """

        self._customer_order = customer_order

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this ReversalResponse.


        :return: The original_poi_transaction of this ReversalResponse.
        :rtype: OriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this ReversalResponse.


        :param original_poi_transaction: The original_poi_transaction of this ReversalResponse.
        :type original_poi_transaction: OriginalPOITransaction
        """

        self._original_poi_transaction = original_poi_transaction

    @property
    def poi_data(self):
        """Gets the poi_data of this ReversalResponse.


        :return: The poi_data of this ReversalResponse.
        :rtype: POIData
        """
        return self._poi_data

    @poi_data.setter
    def poi_data(self, poi_data):
        """Sets the poi_data of this ReversalResponse.


        :param poi_data: The poi_data of this ReversalResponse.
        :type poi_data: POIData
        """

        self._poi_data = poi_data

    @property
    def payment_receipt(self):
        """Gets the payment_receipt of this ReversalResponse.


        :return: The payment_receipt of this ReversalResponse.
        :rtype: List[PaymentReceipt]
        """
        return self._payment_receipt

    @payment_receipt.setter
    def payment_receipt(self, payment_receipt):
        """Sets the payment_receipt of this ReversalResponse.


        :param payment_receipt: The payment_receipt of this ReversalResponse.
        :type payment_receipt: List[PaymentReceipt]
        """

        self._payment_receipt = payment_receipt

    @property
    def response(self):
        """Gets the response of this ReversalResponse.


        :return: The response of this ReversalResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this ReversalResponse.


        :param response: The response of this ReversalResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def reversed_amount(self):
        """Gets the reversed_amount of this ReversalResponse.

        Copy.

        :return: The reversed_amount of this ReversalResponse.
        :rtype: float
        """
        return self._reversed_amount

    @reversed_amount.setter
    def reversed_amount(self, reversed_amount):
        """Sets the reversed_amount of this ReversalResponse.

        Copy.

        :param reversed_amount: The reversed_amount of this ReversalResponse.
        :type reversed_amount: float
        """
        if reversed_amount is not None and reversed_amount > 99999999.999999:
            raise ValueError("Invalid value for `reversed_amount`, must be a value less than or equal to `99999999.999999`")
        if reversed_amount is not None and reversed_amount < 0:
            raise ValueError("Invalid value for `reversed_amount`, must be a value greater than or equal to `0`")

        self._reversed_amount = reversed_amount
