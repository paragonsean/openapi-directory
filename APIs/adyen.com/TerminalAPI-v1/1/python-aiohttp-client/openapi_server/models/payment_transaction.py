# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amounts_req import AmountsReq
from openapi_server.models.original_poi_transaction import OriginalPOITransaction
from openapi_server.models.sale_item import SaleItem
from openapi_server.models.transaction_conditions import TransactionConditions
from openapi_server import util


class PaymentTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amounts_req: AmountsReq=None, original_poi_transaction: OriginalPOITransaction=None, sale_item: List[SaleItem]=None, transaction_conditions: TransactionConditions=None):
        """PaymentTransaction - a model defined in OpenAPI

        :param amounts_req: The amounts_req of this PaymentTransaction.
        :param original_poi_transaction: The original_poi_transaction of this PaymentTransaction.
        :param sale_item: The sale_item of this PaymentTransaction.
        :param transaction_conditions: The transaction_conditions of this PaymentTransaction.
        """
        self.openapi_types = {
            'amounts_req': AmountsReq,
            'original_poi_transaction': OriginalPOITransaction,
            'sale_item': List[SaleItem],
            'transaction_conditions': TransactionConditions
        }

        self.attribute_map = {
            'amounts_req': 'AmountsReq',
            'original_poi_transaction': 'OriginalPOITransaction',
            'sale_item': 'SaleItem',
            'transaction_conditions': 'TransactionConditions'
        }

        self._amounts_req = amounts_req
        self._original_poi_transaction = original_poi_transaction
        self._sale_item = sale_item
        self._transaction_conditions = transaction_conditions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentTransaction of this PaymentTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amounts_req(self):
        """Gets the amounts_req of this PaymentTransaction.


        :return: The amounts_req of this PaymentTransaction.
        :rtype: AmountsReq
        """
        return self._amounts_req

    @amounts_req.setter
    def amounts_req(self, amounts_req):
        """Sets the amounts_req of this PaymentTransaction.


        :param amounts_req: The amounts_req of this PaymentTransaction.
        :type amounts_req: AmountsReq
        """
        if amounts_req is None:
            raise ValueError("Invalid value for `amounts_req`, must not be `None`")

        self._amounts_req = amounts_req

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this PaymentTransaction.


        :return: The original_poi_transaction of this PaymentTransaction.
        :rtype: OriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this PaymentTransaction.


        :param original_poi_transaction: The original_poi_transaction of this PaymentTransaction.
        :type original_poi_transaction: OriginalPOITransaction
        """

        self._original_poi_transaction = original_poi_transaction

    @property
    def sale_item(self):
        """Gets the sale_item of this PaymentTransaction.


        :return: The sale_item of this PaymentTransaction.
        :rtype: List[SaleItem]
        """
        return self._sale_item

    @sale_item.setter
    def sale_item(self, sale_item):
        """Sets the sale_item of this PaymentTransaction.


        :param sale_item: The sale_item of this PaymentTransaction.
        :type sale_item: List[SaleItem]
        """

        self._sale_item = sale_item

    @property
    def transaction_conditions(self):
        """Gets the transaction_conditions of this PaymentTransaction.


        :return: The transaction_conditions of this PaymentTransaction.
        :rtype: TransactionConditions
        """
        return self._transaction_conditions

    @transaction_conditions.setter
    def transaction_conditions(self, transaction_conditions):
        """Sets the transaction_conditions of this PaymentTransaction.


        :param transaction_conditions: The transaction_conditions of this PaymentTransaction.
        :type transaction_conditions: TransactionConditions
        """

        self._transaction_conditions = transaction_conditions
