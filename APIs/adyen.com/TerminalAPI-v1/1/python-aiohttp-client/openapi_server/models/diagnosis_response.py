# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.host_status import HostStatus
from openapi_server.models.poi_status import POIStatus
from openapi_server.models.response import Response
from openapi_server import util


class DiagnosisResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, host_status: List[HostStatus]=None, logged_sale_id: List[str]=None, poi_status: POIStatus=None, response: Response=None):
        """DiagnosisResponse - a model defined in OpenAPI

        :param host_status: The host_status of this DiagnosisResponse.
        :param logged_sale_id: The logged_sale_id of this DiagnosisResponse.
        :param poi_status: The poi_status of this DiagnosisResponse.
        :param response: The response of this DiagnosisResponse.
        """
        self.openapi_types = {
            'host_status': List[HostStatus],
            'logged_sale_id': List[str],
            'poi_status': POIStatus,
            'response': Response
        }

        self.attribute_map = {
            'host_status': 'HostStatus',
            'logged_sale_id': 'LoggedSaleID',
            'poi_status': 'POIStatus',
            'response': 'Response'
        }

        self._host_status = host_status
        self._logged_sale_id = logged_sale_id
        self._poi_status = poi_status
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosisResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosisResponse of this DiagnosisResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def host_status(self):
        """Gets the host_status of this DiagnosisResponse.


        :return: The host_status of this DiagnosisResponse.
        :rtype: List[HostStatus]
        """
        return self._host_status

    @host_status.setter
    def host_status(self, host_status):
        """Sets the host_status of this DiagnosisResponse.


        :param host_status: The host_status of this DiagnosisResponse.
        :type host_status: List[HostStatus]
        """

        self._host_status = host_status

    @property
    def logged_sale_id(self):
        """Gets the logged_sale_id of this DiagnosisResponse.


        :return: The logged_sale_id of this DiagnosisResponse.
        :rtype: List[str]
        """
        return self._logged_sale_id

    @logged_sale_id.setter
    def logged_sale_id(self, logged_sale_id):
        """Sets the logged_sale_id of this DiagnosisResponse.


        :param logged_sale_id: The logged_sale_id of this DiagnosisResponse.
        :type logged_sale_id: List[str]
        """

        self._logged_sale_id = logged_sale_id

    @property
    def poi_status(self):
        """Gets the poi_status of this DiagnosisResponse.


        :return: The poi_status of this DiagnosisResponse.
        :rtype: POIStatus
        """
        return self._poi_status

    @poi_status.setter
    def poi_status(self, poi_status):
        """Sets the poi_status of this DiagnosisResponse.


        :param poi_status: The poi_status of this DiagnosisResponse.
        :type poi_status: POIStatus
        """

        self._poi_status = poi_status

    @property
    def response(self):
        """Gets the response of this DiagnosisResponse.


        :return: The response of this DiagnosisResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this DiagnosisResponse.


        :param response: The response of this DiagnosisResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response
