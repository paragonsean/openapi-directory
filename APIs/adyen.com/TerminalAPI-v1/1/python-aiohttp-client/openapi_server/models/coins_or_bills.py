# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CoinsOrBills(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, number: int=None, unit_value: float=None):
        """CoinsOrBills - a model defined in OpenAPI

        :param number: The number of this CoinsOrBills.
        :param unit_value: The unit_value of this CoinsOrBills.
        """
        self.openapi_types = {
            'number': int,
            'unit_value': float
        }

        self.attribute_map = {
            'number': 'Number',
            'unit_value': 'UnitValue'
        }

        self._number = number
        self._unit_value = unit_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoinsOrBills':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoinsOrBills of this CoinsOrBills.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def number(self):
        """Gets the number of this CoinsOrBills.

        Number of elements.

        :return: The number of this CoinsOrBills.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CoinsOrBills.

        Number of elements.

        :param number: The number of this CoinsOrBills.
        :type number: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")

        self._number = number

    @property
    def unit_value(self):
        """Gets the unit_value of this CoinsOrBills.

        Value of a coin or bill.

        :return: The unit_value of this CoinsOrBills.
        :rtype: float
        """
        return self._unit_value

    @unit_value.setter
    def unit_value(self, unit_value):
        """Sets the unit_value of this CoinsOrBills.

        Value of a coin or bill.

        :param unit_value: The unit_value of this CoinsOrBills.
        :type unit_value: float
        """
        if unit_value is None:
            raise ValueError("Invalid value for `unit_value`, must not be `None`")
        if unit_value is not None and unit_value > 99999999.999999:
            raise ValueError("Invalid value for `unit_value`, must be a value less than or equal to `99999999.999999`")
        if unit_value is not None and unit_value < 0:
            raise ValueError("Invalid value for `unit_value`, must be a value greater than or equal to `0`")

        self._unit_value = unit_value
