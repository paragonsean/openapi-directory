# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class DiagnosisRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: List[int]=None, host_diagnosis_flag: bool=False, poiid: str=None):
        """DiagnosisRequest - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this DiagnosisRequest.
        :param host_diagnosis_flag: The host_diagnosis_flag of this DiagnosisRequest.
        :param poiid: The poiid of this DiagnosisRequest.
        """
        self.openapi_types = {
            'acquirer_id': List[int],
            'host_diagnosis_flag': bool,
            'poiid': str
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'host_diagnosis_flag': 'HostDiagnosisFlag',
            'poiid': 'POIID'
        }

        self._acquirer_id = acquirer_id
        self._host_diagnosis_flag = host_diagnosis_flag
        self._poiid = poiid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DiagnosisRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DiagnosisRequest of this DiagnosisRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this DiagnosisRequest.


        :return: The acquirer_id of this DiagnosisRequest.
        :rtype: List[int]
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this DiagnosisRequest.


        :param acquirer_id: The acquirer_id of this DiagnosisRequest.
        :type acquirer_id: List[int]
        """

        self._acquirer_id = acquirer_id

    @property
    def host_diagnosis_flag(self):
        """Gets the host_diagnosis_flag of this DiagnosisRequest.

        Indicates if Host Diagnosis are required.

        :return: The host_diagnosis_flag of this DiagnosisRequest.
        :rtype: bool
        """
        return self._host_diagnosis_flag

    @host_diagnosis_flag.setter
    def host_diagnosis_flag(self, host_diagnosis_flag):
        """Sets the host_diagnosis_flag of this DiagnosisRequest.

        Indicates if Host Diagnosis are required.

        :param host_diagnosis_flag: The host_diagnosis_flag of this DiagnosisRequest.
        :type host_diagnosis_flag: bool
        """

        self._host_diagnosis_flag = host_diagnosis_flag

    @property
    def poiid(self):
        """Gets the poiid of this DiagnosisRequest.

        MessageHeader.POIID.

        :return: The poiid of this DiagnosisRequest.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this DiagnosisRequest.

        MessageHeader.POIID.

        :param poiid: The poiid of this DiagnosisRequest.
        :type poiid: str
        """
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid
