# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_handling import LoyaltyHandling
from openapi_server.models.payment_type import PaymentType
import re
from openapi_server import util


class CardAcquisitionTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_loyalty_brand: List[str]=None, allowed_payment_brand: List[str]=None, cash_back_flag: bool=None, customer_language: str=None, force_customer_selection_flag: bool=None, force_entry_mode: List[str]=None, loyalty_handling: LoyaltyHandling=None, payment_type: PaymentType=None, total_amount: float=None):
        """CardAcquisitionTransaction - a model defined in OpenAPI

        :param allowed_loyalty_brand: The allowed_loyalty_brand of this CardAcquisitionTransaction.
        :param allowed_payment_brand: The allowed_payment_brand of this CardAcquisitionTransaction.
        :param cash_back_flag: The cash_back_flag of this CardAcquisitionTransaction.
        :param customer_language: The customer_language of this CardAcquisitionTransaction.
        :param force_customer_selection_flag: The force_customer_selection_flag of this CardAcquisitionTransaction.
        :param force_entry_mode: The force_entry_mode of this CardAcquisitionTransaction.
        :param loyalty_handling: The loyalty_handling of this CardAcquisitionTransaction.
        :param payment_type: The payment_type of this CardAcquisitionTransaction.
        :param total_amount: The total_amount of this CardAcquisitionTransaction.
        """
        self.openapi_types = {
            'allowed_loyalty_brand': List[str],
            'allowed_payment_brand': List[str],
            'cash_back_flag': bool,
            'customer_language': str,
            'force_customer_selection_flag': bool,
            'force_entry_mode': List[str],
            'loyalty_handling': LoyaltyHandling,
            'payment_type': PaymentType,
            'total_amount': float
        }

        self.attribute_map = {
            'allowed_loyalty_brand': 'AllowedLoyaltyBrand',
            'allowed_payment_brand': 'AllowedPaymentBrand',
            'cash_back_flag': 'CashBackFlag',
            'customer_language': 'CustomerLanguage',
            'force_customer_selection_flag': 'ForceCustomerSelectionFlag',
            'force_entry_mode': 'ForceEntryMode',
            'loyalty_handling': 'LoyaltyHandling',
            'payment_type': 'PaymentType',
            'total_amount': 'TotalAmount'
        }

        self._allowed_loyalty_brand = allowed_loyalty_brand
        self._allowed_payment_brand = allowed_payment_brand
        self._cash_back_flag = cash_back_flag
        self._customer_language = customer_language
        self._force_customer_selection_flag = force_customer_selection_flag
        self._force_entry_mode = force_entry_mode
        self._loyalty_handling = loyalty_handling
        self._payment_type = payment_type
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAcquisitionTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardAcquisitionTransaction of this CardAcquisitionTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_loyalty_brand(self):
        """Gets the allowed_loyalty_brand of this CardAcquisitionTransaction.


        :return: The allowed_loyalty_brand of this CardAcquisitionTransaction.
        :rtype: List[str]
        """
        return self._allowed_loyalty_brand

    @allowed_loyalty_brand.setter
    def allowed_loyalty_brand(self, allowed_loyalty_brand):
        """Sets the allowed_loyalty_brand of this CardAcquisitionTransaction.


        :param allowed_loyalty_brand: The allowed_loyalty_brand of this CardAcquisitionTransaction.
        :type allowed_loyalty_brand: List[str]
        """

        self._allowed_loyalty_brand = allowed_loyalty_brand

    @property
    def allowed_payment_brand(self):
        """Gets the allowed_payment_brand of this CardAcquisitionTransaction.


        :return: The allowed_payment_brand of this CardAcquisitionTransaction.
        :rtype: List[str]
        """
        return self._allowed_payment_brand

    @allowed_payment_brand.setter
    def allowed_payment_brand(self, allowed_payment_brand):
        """Sets the allowed_payment_brand of this CardAcquisitionTransaction.


        :param allowed_payment_brand: The allowed_payment_brand of this CardAcquisitionTransaction.
        :type allowed_payment_brand: List[str]
        """

        self._allowed_payment_brand = allowed_payment_brand

    @property
    def cash_back_flag(self):
        """Gets the cash_back_flag of this CardAcquisitionTransaction.


        :return: The cash_back_flag of this CardAcquisitionTransaction.
        :rtype: bool
        """
        return self._cash_back_flag

    @cash_back_flag.setter
    def cash_back_flag(self, cash_back_flag):
        """Sets the cash_back_flag of this CardAcquisitionTransaction.


        :param cash_back_flag: The cash_back_flag of this CardAcquisitionTransaction.
        :type cash_back_flag: bool
        """

        self._cash_back_flag = cash_back_flag

    @property
    def customer_language(self):
        """Gets the customer_language of this CardAcquisitionTransaction.


        :return: The customer_language of this CardAcquisitionTransaction.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this CardAcquisitionTransaction.


        :param customer_language: The customer_language of this CardAcquisitionTransaction.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def force_customer_selection_flag(self):
        """Gets the force_customer_selection_flag of this CardAcquisitionTransaction.


        :return: The force_customer_selection_flag of this CardAcquisitionTransaction.
        :rtype: bool
        """
        return self._force_customer_selection_flag

    @force_customer_selection_flag.setter
    def force_customer_selection_flag(self, force_customer_selection_flag):
        """Sets the force_customer_selection_flag of this CardAcquisitionTransaction.


        :param force_customer_selection_flag: The force_customer_selection_flag of this CardAcquisitionTransaction.
        :type force_customer_selection_flag: bool
        """

        self._force_customer_selection_flag = force_customer_selection_flag

    @property
    def force_entry_mode(self):
        """Gets the force_entry_mode of this CardAcquisitionTransaction.


        :return: The force_entry_mode of this CardAcquisitionTransaction.
        :rtype: List[str]
        """
        return self._force_entry_mode

    @force_entry_mode.setter
    def force_entry_mode(self, force_entry_mode):
        """Sets the force_entry_mode of this CardAcquisitionTransaction.


        :param force_entry_mode: The force_entry_mode of this CardAcquisitionTransaction.
        :type force_entry_mode: List[str]
        """
        allowed_values = ["CheckReader", "Contactless", "File", "ICC", "Keyed", "MagStripe", "Manual", "RFID", "Scanned", "SynchronousICC", "Tapped"]  # noqa: E501
        if not set(force_entry_mode).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `force_entry_mode` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(force_entry_mode) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._force_entry_mode = force_entry_mode

    @property
    def loyalty_handling(self):
        """Gets the loyalty_handling of this CardAcquisitionTransaction.


        :return: The loyalty_handling of this CardAcquisitionTransaction.
        :rtype: LoyaltyHandling
        """
        return self._loyalty_handling

    @loyalty_handling.setter
    def loyalty_handling(self, loyalty_handling):
        """Sets the loyalty_handling of this CardAcquisitionTransaction.


        :param loyalty_handling: The loyalty_handling of this CardAcquisitionTransaction.
        :type loyalty_handling: LoyaltyHandling
        """

        self._loyalty_handling = loyalty_handling

    @property
    def payment_type(self):
        """Gets the payment_type of this CardAcquisitionTransaction.


        :return: The payment_type of this CardAcquisitionTransaction.
        :rtype: PaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this CardAcquisitionTransaction.


        :param payment_type: The payment_type of this CardAcquisitionTransaction.
        :type payment_type: PaymentType
        """

        self._payment_type = payment_type

    @property
    def total_amount(self):
        """Gets the total_amount of this CardAcquisitionTransaction.


        :return: The total_amount of this CardAcquisitionTransaction.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CardAcquisitionTransaction.


        :param total_amount: The total_amount of this CardAcquisitionTransaction.
        :type total_amount: float
        """
        if total_amount is not None and total_amount > 99999999.999999:
            raise ValueError("Invalid value for `total_amount`, must be a value less than or equal to `99999999.999999`")
        if total_amount is not None and total_amount < 0:
            raise ValueError("Invalid value for `total_amount`, must be a value greater than or equal to `0`")

        self._total_amount = total_amount
