# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AmountsReq(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_back_amount: float=None, currency: str=None, maximum_cash_back_amount: float=None, minimum_amount_to_deliver: float=None, minimum_split_amount: float=None, paid_amount: float=None, requested_amount: float=None, tip_amount: float=None):
        """AmountsReq - a model defined in OpenAPI

        :param cash_back_amount: The cash_back_amount of this AmountsReq.
        :param currency: The currency of this AmountsReq.
        :param maximum_cash_back_amount: The maximum_cash_back_amount of this AmountsReq.
        :param minimum_amount_to_deliver: The minimum_amount_to_deliver of this AmountsReq.
        :param minimum_split_amount: The minimum_split_amount of this AmountsReq.
        :param paid_amount: The paid_amount of this AmountsReq.
        :param requested_amount: The requested_amount of this AmountsReq.
        :param tip_amount: The tip_amount of this AmountsReq.
        """
        self.openapi_types = {
            'cash_back_amount': float,
            'currency': str,
            'maximum_cash_back_amount': float,
            'minimum_amount_to_deliver': float,
            'minimum_split_amount': float,
            'paid_amount': float,
            'requested_amount': float,
            'tip_amount': float
        }

        self.attribute_map = {
            'cash_back_amount': 'CashBackAmount',
            'currency': 'Currency',
            'maximum_cash_back_amount': 'MaximumCashBackAmount',
            'minimum_amount_to_deliver': 'MinimumAmountToDeliver',
            'minimum_split_amount': 'MinimumSplitAmount',
            'paid_amount': 'PaidAmount',
            'requested_amount': 'RequestedAmount',
            'tip_amount': 'TipAmount'
        }

        self._cash_back_amount = cash_back_amount
        self._currency = currency
        self._maximum_cash_back_amount = maximum_cash_back_amount
        self._minimum_amount_to_deliver = minimum_amount_to_deliver
        self._minimum_split_amount = minimum_split_amount
        self._paid_amount = paid_amount
        self._requested_amount = requested_amount
        self._tip_amount = tip_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmountsReq':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmountsReq of this AmountsReq.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_back_amount(self):
        """Gets the cash_back_amount of this AmountsReq.


        :return: The cash_back_amount of this AmountsReq.
        :rtype: float
        """
        return self._cash_back_amount

    @cash_back_amount.setter
    def cash_back_amount(self, cash_back_amount):
        """Sets the cash_back_amount of this AmountsReq.


        :param cash_back_amount: The cash_back_amount of this AmountsReq.
        :type cash_back_amount: float
        """
        if cash_back_amount is not None and cash_back_amount > 99999999.999999:
            raise ValueError("Invalid value for `cash_back_amount`, must be a value less than or equal to `99999999.999999`")
        if cash_back_amount is not None and cash_back_amount < 0:
            raise ValueError("Invalid value for `cash_back_amount`, must be a value greater than or equal to `0`")

        self._cash_back_amount = cash_back_amount

    @property
    def currency(self):
        """Gets the currency of this AmountsReq.


        :return: The currency of this AmountsReq.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AmountsReq.


        :param currency: The currency of this AmountsReq.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def maximum_cash_back_amount(self):
        """Gets the maximum_cash_back_amount of this AmountsReq.


        :return: The maximum_cash_back_amount of this AmountsReq.
        :rtype: float
        """
        return self._maximum_cash_back_amount

    @maximum_cash_back_amount.setter
    def maximum_cash_back_amount(self, maximum_cash_back_amount):
        """Sets the maximum_cash_back_amount of this AmountsReq.


        :param maximum_cash_back_amount: The maximum_cash_back_amount of this AmountsReq.
        :type maximum_cash_back_amount: float
        """
        if maximum_cash_back_amount is not None and maximum_cash_back_amount > 99999999.999999:
            raise ValueError("Invalid value for `maximum_cash_back_amount`, must be a value less than or equal to `99999999.999999`")
        if maximum_cash_back_amount is not None and maximum_cash_back_amount < 0:
            raise ValueError("Invalid value for `maximum_cash_back_amount`, must be a value greater than or equal to `0`")

        self._maximum_cash_back_amount = maximum_cash_back_amount

    @property
    def minimum_amount_to_deliver(self):
        """Gets the minimum_amount_to_deliver of this AmountsReq.


        :return: The minimum_amount_to_deliver of this AmountsReq.
        :rtype: float
        """
        return self._minimum_amount_to_deliver

    @minimum_amount_to_deliver.setter
    def minimum_amount_to_deliver(self, minimum_amount_to_deliver):
        """Sets the minimum_amount_to_deliver of this AmountsReq.


        :param minimum_amount_to_deliver: The minimum_amount_to_deliver of this AmountsReq.
        :type minimum_amount_to_deliver: float
        """
        if minimum_amount_to_deliver is not None and minimum_amount_to_deliver > 99999999.999999:
            raise ValueError("Invalid value for `minimum_amount_to_deliver`, must be a value less than or equal to `99999999.999999`")
        if minimum_amount_to_deliver is not None and minimum_amount_to_deliver < 0:
            raise ValueError("Invalid value for `minimum_amount_to_deliver`, must be a value greater than or equal to `0`")

        self._minimum_amount_to_deliver = minimum_amount_to_deliver

    @property
    def minimum_split_amount(self):
        """Gets the minimum_split_amount of this AmountsReq.


        :return: The minimum_split_amount of this AmountsReq.
        :rtype: float
        """
        return self._minimum_split_amount

    @minimum_split_amount.setter
    def minimum_split_amount(self, minimum_split_amount):
        """Sets the minimum_split_amount of this AmountsReq.


        :param minimum_split_amount: The minimum_split_amount of this AmountsReq.
        :type minimum_split_amount: float
        """
        if minimum_split_amount is not None and minimum_split_amount > 99999999.999999:
            raise ValueError("Invalid value for `minimum_split_amount`, must be a value less than or equal to `99999999.999999`")
        if minimum_split_amount is not None and minimum_split_amount < 0:
            raise ValueError("Invalid value for `minimum_split_amount`, must be a value greater than or equal to `0`")

        self._minimum_split_amount = minimum_split_amount

    @property
    def paid_amount(self):
        """Gets the paid_amount of this AmountsReq.


        :return: The paid_amount of this AmountsReq.
        :rtype: float
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this AmountsReq.


        :param paid_amount: The paid_amount of this AmountsReq.
        :type paid_amount: float
        """
        if paid_amount is not None and paid_amount > 99999999.999999:
            raise ValueError("Invalid value for `paid_amount`, must be a value less than or equal to `99999999.999999`")
        if paid_amount is not None and paid_amount < 0:
            raise ValueError("Invalid value for `paid_amount`, must be a value greater than or equal to `0`")

        self._paid_amount = paid_amount

    @property
    def requested_amount(self):
        """Gets the requested_amount of this AmountsReq.


        :return: The requested_amount of this AmountsReq.
        :rtype: float
        """
        return self._requested_amount

    @requested_amount.setter
    def requested_amount(self, requested_amount):
        """Sets the requested_amount of this AmountsReq.


        :param requested_amount: The requested_amount of this AmountsReq.
        :type requested_amount: float
        """
        if requested_amount is None:
            raise ValueError("Invalid value for `requested_amount`, must not be `None`")
        if requested_amount is not None and requested_amount > 99999999.999999:
            raise ValueError("Invalid value for `requested_amount`, must be a value less than or equal to `99999999.999999`")
        if requested_amount is not None and requested_amount < 0:
            raise ValueError("Invalid value for `requested_amount`, must be a value greater than or equal to `0`")

        self._requested_amount = requested_amount

    @property
    def tip_amount(self):
        """Gets the tip_amount of this AmountsReq.


        :return: The tip_amount of this AmountsReq.
        :rtype: float
        """
        return self._tip_amount

    @tip_amount.setter
    def tip_amount(self, tip_amount):
        """Sets the tip_amount of this AmountsReq.


        :param tip_amount: The tip_amount of this AmountsReq.
        :type tip_amount: float
        """
        if tip_amount is not None and tip_amount > 99999999.999999:
            raise ValueError("Invalid value for `tip_amount`, must be a value less than or equal to `99999999.999999`")
        if tip_amount is not None and tip_amount < 0:
            raise ValueError("Invalid value for `tip_amount`, must be a value greater than or equal to `0`")

        self._tip_amount = tip_amount
