# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instalment_type import InstalmentType
from openapi_server.models.period_unit import PeriodUnit
import re
from openapi_server import util


class Instalment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, charges: float=None, cumulative_amount: float=None, first_amount: float=None, first_payment_date: date=None, instalment_type: InstalmentType=None, period: int=None, period_unit: PeriodUnit=None, plan_id: str=None, sequence_number: int=None, total_nb_of_payments: int=None):
        """Instalment - a model defined in OpenAPI

        :param charges: The charges of this Instalment.
        :param cumulative_amount: The cumulative_amount of this Instalment.
        :param first_amount: The first_amount of this Instalment.
        :param first_payment_date: The first_payment_date of this Instalment.
        :param instalment_type: The instalment_type of this Instalment.
        :param period: The period of this Instalment.
        :param period_unit: The period_unit of this Instalment.
        :param plan_id: The plan_id of this Instalment.
        :param sequence_number: The sequence_number of this Instalment.
        :param total_nb_of_payments: The total_nb_of_payments of this Instalment.
        """
        self.openapi_types = {
            'charges': float,
            'cumulative_amount': float,
            'first_amount': float,
            'first_payment_date': date,
            'instalment_type': InstalmentType,
            'period': int,
            'period_unit': PeriodUnit,
            'plan_id': str,
            'sequence_number': int,
            'total_nb_of_payments': int
        }

        self.attribute_map = {
            'charges': 'Charges',
            'cumulative_amount': 'CumulativeAmount',
            'first_amount': 'FirstAmount',
            'first_payment_date': 'FirstPaymentDate',
            'instalment_type': 'InstalmentType',
            'period': 'Period',
            'period_unit': 'PeriodUnit',
            'plan_id': 'PlanID',
            'sequence_number': 'SequenceNumber',
            'total_nb_of_payments': 'TotalNbOfPayments'
        }

        self._charges = charges
        self._cumulative_amount = cumulative_amount
        self._first_amount = first_amount
        self._first_payment_date = first_payment_date
        self._instalment_type = instalment_type
        self._period = period
        self._period_unit = period_unit
        self._plan_id = plan_id
        self._sequence_number = sequence_number
        self._total_nb_of_payments = total_nb_of_payments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instalment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instalment of this Instalment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def charges(self):
        """Gets the charges of this Instalment.


        :return: The charges of this Instalment.
        :rtype: float
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this Instalment.


        :param charges: The charges of this Instalment.
        :type charges: float
        """
        if charges is not None and charges > 99999999.999999:
            raise ValueError("Invalid value for `charges`, must be a value less than or equal to `99999999.999999`")
        if charges is not None and charges < 0:
            raise ValueError("Invalid value for `charges`, must be a value greater than or equal to `0`")

        self._charges = charges

    @property
    def cumulative_amount(self):
        """Gets the cumulative_amount of this Instalment.


        :return: The cumulative_amount of this Instalment.
        :rtype: float
        """
        return self._cumulative_amount

    @cumulative_amount.setter
    def cumulative_amount(self, cumulative_amount):
        """Sets the cumulative_amount of this Instalment.


        :param cumulative_amount: The cumulative_amount of this Instalment.
        :type cumulative_amount: float
        """
        if cumulative_amount is not None and cumulative_amount > 99999999.999999:
            raise ValueError("Invalid value for `cumulative_amount`, must be a value less than or equal to `99999999.999999`")
        if cumulative_amount is not None and cumulative_amount < 0:
            raise ValueError("Invalid value for `cumulative_amount`, must be a value greater than or equal to `0`")

        self._cumulative_amount = cumulative_amount

    @property
    def first_amount(self):
        """Gets the first_amount of this Instalment.


        :return: The first_amount of this Instalment.
        :rtype: float
        """
        return self._first_amount

    @first_amount.setter
    def first_amount(self, first_amount):
        """Sets the first_amount of this Instalment.


        :param first_amount: The first_amount of this Instalment.
        :type first_amount: float
        """
        if first_amount is not None and first_amount > 99999999.999999:
            raise ValueError("Invalid value for `first_amount`, must be a value less than or equal to `99999999.999999`")
        if first_amount is not None and first_amount < 0:
            raise ValueError("Invalid value for `first_amount`, must be a value greater than or equal to `0`")

        self._first_amount = first_amount

    @property
    def first_payment_date(self):
        """Gets the first_payment_date of this Instalment.


        :return: The first_payment_date of this Instalment.
        :rtype: date
        """
        return self._first_payment_date

    @first_payment_date.setter
    def first_payment_date(self, first_payment_date):
        """Sets the first_payment_date of this Instalment.


        :param first_payment_date: The first_payment_date of this Instalment.
        :type first_payment_date: date
        """

        self._first_payment_date = first_payment_date

    @property
    def instalment_type(self):
        """Gets the instalment_type of this Instalment.


        :return: The instalment_type of this Instalment.
        :rtype: InstalmentType
        """
        return self._instalment_type

    @instalment_type.setter
    def instalment_type(self, instalment_type):
        """Sets the instalment_type of this Instalment.


        :param instalment_type: The instalment_type of this Instalment.
        :type instalment_type: InstalmentType
        """

        self._instalment_type = instalment_type

    @property
    def period(self):
        """Gets the period of this Instalment.


        :return: The period of this Instalment.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Instalment.


        :param period: The period of this Instalment.
        :type period: int
        """

        self._period = period

    @property
    def period_unit(self):
        """Gets the period_unit of this Instalment.


        :return: The period_unit of this Instalment.
        :rtype: PeriodUnit
        """
        return self._period_unit

    @period_unit.setter
    def period_unit(self, period_unit):
        """Sets the period_unit of this Instalment.


        :param period_unit: The period_unit of this Instalment.
        :type period_unit: PeriodUnit
        """

        self._period_unit = period_unit

    @property
    def plan_id(self):
        """Gets the plan_id of this Instalment.


        :return: The plan_id of this Instalment.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this Instalment.


        :param plan_id: The plan_id of this Instalment.
        :type plan_id: str
        """
        if plan_id is not None and not re.search(r'^.+$', plan_id):
            raise ValueError("Invalid value for `plan_id`, must be a follow pattern or equal to `/^.+$/`")

        self._plan_id = plan_id

    @property
    def sequence_number(self):
        """Gets the sequence_number of this Instalment.


        :return: The sequence_number of this Instalment.
        :rtype: int
        """
        return self._sequence_number

    @sequence_number.setter
    def sequence_number(self, sequence_number):
        """Sets the sequence_number of this Instalment.


        :param sequence_number: The sequence_number of this Instalment.
        :type sequence_number: int
        """

        self._sequence_number = sequence_number

    @property
    def total_nb_of_payments(self):
        """Gets the total_nb_of_payments of this Instalment.


        :return: The total_nb_of_payments of this Instalment.
        :rtype: int
        """
        return self._total_nb_of_payments

    @total_nb_of_payments.setter
    def total_nb_of_payments(self, total_nb_of_payments):
        """Sets the total_nb_of_payments of this Instalment.


        :param total_nb_of_payments: The total_nb_of_payments of this Instalment.
        :type total_nb_of_payments: int
        """

        self._total_nb_of_payments = total_nb_of_payments
