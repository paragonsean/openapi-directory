# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.token_requested_type import TokenRequestedType
import re
from openapi_server import util


class PaymentToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiry_date_time: datetime=None, token_requested_type: TokenRequestedType=None, token_value: str=None):
        """PaymentToken - a model defined in OpenAPI

        :param expiry_date_time: The expiry_date_time of this PaymentToken.
        :param token_requested_type: The token_requested_type of this PaymentToken.
        :param token_value: The token_value of this PaymentToken.
        """
        self.openapi_types = {
            'expiry_date_time': datetime,
            'token_requested_type': TokenRequestedType,
            'token_value': str
        }

        self.attribute_map = {
            'expiry_date_time': 'ExpiryDateTime',
            'token_requested_type': 'TokenRequestedType',
            'token_value': 'TokenValue'
        }

        self._expiry_date_time = expiry_date_time
        self._token_requested_type = token_requested_type
        self._token_value = token_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentToken of this PaymentToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiry_date_time(self):
        """Gets the expiry_date_time of this PaymentToken.

        Expiry date and time. Limits the validity of a payment token.

        :return: The expiry_date_time of this PaymentToken.
        :rtype: datetime
        """
        return self._expiry_date_time

    @expiry_date_time.setter
    def expiry_date_time(self, expiry_date_time):
        """Sets the expiry_date_time of this PaymentToken.

        Expiry date and time. Limits the validity of a payment token.

        :param expiry_date_time: The expiry_date_time of this PaymentToken.
        :type expiry_date_time: datetime
        """

        self._expiry_date_time = expiry_date_time

    @property
    def token_requested_type(self):
        """Gets the token_requested_type of this PaymentToken.


        :return: The token_requested_type of this PaymentToken.
        :rtype: TokenRequestedType
        """
        return self._token_requested_type

    @token_requested_type.setter
    def token_requested_type(self, token_requested_type):
        """Sets the token_requested_type of this PaymentToken.


        :param token_requested_type: The token_requested_type of this PaymentToken.
        :type token_requested_type: TokenRequestedType
        """
        if token_requested_type is None:
            raise ValueError("Invalid value for `token_requested_type`, must not be `None`")

        self._token_requested_type = token_requested_type

    @property
    def token_value(self):
        """Gets the token_value of this PaymentToken.


        :return: The token_value of this PaymentToken.
        :rtype: str
        """
        return self._token_value

    @token_value.setter
    def token_value(self, token_value):
        """Sets the token_value of this PaymentToken.


        :param token_value: The token_value of this PaymentToken.
        :type token_value: str
        """
        if token_value is None:
            raise ValueError("Invalid value for `token_value`, must not be `None`")
        if token_value is not None and not re.search(r'^.+$', token_value):
            raise ValueError("Invalid value for `token_value`, must be a follow pattern or equal to `/^.+$/`")

        self._token_value = token_value
