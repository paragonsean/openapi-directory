# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CustomerOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accessed_by: str=None, additional_information: str=None, currency: str=None, current_amount: float=None, customer_order_id: str=None, end_date: datetime=None, forecasted_amount: float=None, open_order_state: bool=True, sale_reference_id: str=None, start_date: datetime=None):
        """CustomerOrder - a model defined in OpenAPI

        :param accessed_by: The accessed_by of this CustomerOrder.
        :param additional_information: The additional_information of this CustomerOrder.
        :param currency: The currency of this CustomerOrder.
        :param current_amount: The current_amount of this CustomerOrder.
        :param customer_order_id: The customer_order_id of this CustomerOrder.
        :param end_date: The end_date of this CustomerOrder.
        :param forecasted_amount: The forecasted_amount of this CustomerOrder.
        :param open_order_state: The open_order_state of this CustomerOrder.
        :param sale_reference_id: The sale_reference_id of this CustomerOrder.
        :param start_date: The start_date of this CustomerOrder.
        """
        self.openapi_types = {
            'accessed_by': str,
            'additional_information': str,
            'currency': str,
            'current_amount': float,
            'customer_order_id': str,
            'end_date': datetime,
            'forecasted_amount': float,
            'open_order_state': bool,
            'sale_reference_id': str,
            'start_date': datetime
        }

        self.attribute_map = {
            'accessed_by': 'AccessedBy',
            'additional_information': 'AdditionalInformation',
            'currency': 'Currency',
            'current_amount': 'CurrentAmount',
            'customer_order_id': 'CustomerOrderID',
            'end_date': 'EndDate',
            'forecasted_amount': 'ForecastedAmount',
            'open_order_state': 'OpenOrderState',
            'sale_reference_id': 'SaleReferenceID',
            'start_date': 'StartDate'
        }

        self._accessed_by = accessed_by
        self._additional_information = additional_information
        self._currency = currency
        self._current_amount = current_amount
        self._customer_order_id = customer_order_id
        self._end_date = end_date
        self._forecasted_amount = forecasted_amount
        self._open_order_state = open_order_state
        self._sale_reference_id = sale_reference_id
        self._start_date = start_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerOrder of this CustomerOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accessed_by(self):
        """Gets the accessed_by of this CustomerOrder.


        :return: The accessed_by of this CustomerOrder.
        :rtype: str
        """
        return self._accessed_by

    @accessed_by.setter
    def accessed_by(self, accessed_by):
        """Sets the accessed_by of this CustomerOrder.


        :param accessed_by: The accessed_by of this CustomerOrder.
        :type accessed_by: str
        """
        if accessed_by is not None and not re.search(r'^.+$', accessed_by):
            raise ValueError("Invalid value for `accessed_by`, must be a follow pattern or equal to `/^.+$/`")

        self._accessed_by = accessed_by

    @property
    def additional_information(self):
        """Gets the additional_information of this CustomerOrder.

        Unqualified information.

        :return: The additional_information of this CustomerOrder.
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this CustomerOrder.

        Unqualified information.

        :param additional_information: The additional_information of this CustomerOrder.
        :type additional_information: str
        """
        if additional_information is not None and not re.search(r'^.+$', additional_information):
            raise ValueError("Invalid value for `additional_information`, must be a follow pattern or equal to `/^.+$/`")

        self._additional_information = additional_information

    @property
    def currency(self):
        """Gets the currency of this CustomerOrder.

        Currency of a monetary amount.

        :return: The currency of this CustomerOrder.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CustomerOrder.

        Currency of a monetary amount.

        :param currency: The currency of this CustomerOrder.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def current_amount(self):
        """Gets the current_amount of this CustomerOrder.

        Total amount of all completed transactions of a customer order.

        :return: The current_amount of this CustomerOrder.
        :rtype: float
        """
        return self._current_amount

    @current_amount.setter
    def current_amount(self, current_amount):
        """Sets the current_amount of this CustomerOrder.

        Total amount of all completed transactions of a customer order.

        :param current_amount: The current_amount of this CustomerOrder.
        :type current_amount: float
        """
        if current_amount is None:
            raise ValueError("Invalid value for `current_amount`, must not be `None`")
        if current_amount is not None and current_amount > 99999999.999999:
            raise ValueError("Invalid value for `current_amount`, must be a value less than or equal to `99999999.999999`")
        if current_amount is not None and current_amount < 0:
            raise ValueError("Invalid value for `current_amount`, must be a value greater than or equal to `0`")

        self._current_amount = current_amount

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this CustomerOrder.

        Additional and optional identification of a customer order.

        :return: The customer_order_id of this CustomerOrder.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this CustomerOrder.

        Additional and optional identification of a customer order.

        :param customer_order_id: The customer_order_id of this CustomerOrder.
        :type customer_order_id: str
        """
        if customer_order_id is not None and not re.search(r'^.+$', customer_order_id):
            raise ValueError("Invalid value for `customer_order_id`, must be a follow pattern or equal to `/^.+$/`")

        self._customer_order_id = customer_order_id

    @property
    def end_date(self):
        """Gets the end_date of this CustomerOrder.

        Date time of the end of an operation.

        :return: The end_date of this CustomerOrder.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CustomerOrder.

        Date time of the end of an operation.

        :param end_date: The end_date of this CustomerOrder.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def forecasted_amount(self):
        """Gets the forecasted_amount of this CustomerOrder.


        :return: The forecasted_amount of this CustomerOrder.
        :rtype: float
        """
        return self._forecasted_amount

    @forecasted_amount.setter
    def forecasted_amount(self, forecasted_amount):
        """Sets the forecasted_amount of this CustomerOrder.


        :param forecasted_amount: The forecasted_amount of this CustomerOrder.
        :type forecasted_amount: float
        """
        if forecasted_amount is None:
            raise ValueError("Invalid value for `forecasted_amount`, must not be `None`")
        if forecasted_amount is not None and forecasted_amount > 99999999.999999:
            raise ValueError("Invalid value for `forecasted_amount`, must be a value less than or equal to `99999999.999999`")
        if forecasted_amount is not None and forecasted_amount < 0:
            raise ValueError("Invalid value for `forecasted_amount`, must be a value greater than or equal to `0`")

        self._forecasted_amount = forecasted_amount

    @property
    def open_order_state(self):
        """Gets the open_order_state of this CustomerOrder.


        :return: The open_order_state of this CustomerOrder.
        :rtype: bool
        """
        return self._open_order_state

    @open_order_state.setter
    def open_order_state(self, open_order_state):
        """Sets the open_order_state of this CustomerOrder.


        :param open_order_state: The open_order_state of this CustomerOrder.
        :type open_order_state: bool
        """

        self._open_order_state = open_order_state

    @property
    def sale_reference_id(self):
        """Gets the sale_reference_id of this CustomerOrder.


        :return: The sale_reference_id of this CustomerOrder.
        :rtype: str
        """
        return self._sale_reference_id

    @sale_reference_id.setter
    def sale_reference_id(self, sale_reference_id):
        """Sets the sale_reference_id of this CustomerOrder.


        :param sale_reference_id: The sale_reference_id of this CustomerOrder.
        :type sale_reference_id: str
        """
        if sale_reference_id is None:
            raise ValueError("Invalid value for `sale_reference_id`, must not be `None`")
        if sale_reference_id is not None and not re.search(r'^.+$', sale_reference_id):
            raise ValueError("Invalid value for `sale_reference_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_reference_id = sale_reference_id

    @property
    def start_date(self):
        """Gets the start_date of this CustomerOrder.

        Date time of the beginning of an operation.

        :return: The start_date of this CustomerOrder.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CustomerOrder.

        Date time of the beginning of an operation.

        :param start_date: The start_date of this CustomerOrder.
        :type start_date: datetime
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")

        self._start_date = start_date
