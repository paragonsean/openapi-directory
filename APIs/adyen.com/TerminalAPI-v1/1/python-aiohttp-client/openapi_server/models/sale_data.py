# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sale_terminal_data import SaleTerminalData
from openapi_server.models.sale_to_issuer_data import SaleToIssuerData
from openapi_server.models.token_requested_type import TokenRequestedType
from openapi_server.models.transaction_id_type import TransactionIDType
import re
from openapi_server import util


class SaleData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_order_id: str=None, customer_order_req: List[str]=None, operator_id: str=None, operator_language: str=None, sale_reference_id: str=None, sale_terminal_data: SaleTerminalData=None, sale_to_acquirer_data: str=None, sale_to_issuer_data: SaleToIssuerData=None, sale_to_poi_data: str=None, sale_transaction_id: TransactionIDType=None, shift_number: str=None, token_requested_type: TokenRequestedType=None):
        """SaleData - a model defined in OpenAPI

        :param customer_order_id: The customer_order_id of this SaleData.
        :param customer_order_req: The customer_order_req of this SaleData.
        :param operator_id: The operator_id of this SaleData.
        :param operator_language: The operator_language of this SaleData.
        :param sale_reference_id: The sale_reference_id of this SaleData.
        :param sale_terminal_data: The sale_terminal_data of this SaleData.
        :param sale_to_acquirer_data: The sale_to_acquirer_data of this SaleData.
        :param sale_to_issuer_data: The sale_to_issuer_data of this SaleData.
        :param sale_to_poi_data: The sale_to_poi_data of this SaleData.
        :param sale_transaction_id: The sale_transaction_id of this SaleData.
        :param shift_number: The shift_number of this SaleData.
        :param token_requested_type: The token_requested_type of this SaleData.
        """
        self.openapi_types = {
            'customer_order_id': str,
            'customer_order_req': List[str],
            'operator_id': str,
            'operator_language': str,
            'sale_reference_id': str,
            'sale_terminal_data': SaleTerminalData,
            'sale_to_acquirer_data': str,
            'sale_to_issuer_data': SaleToIssuerData,
            'sale_to_poi_data': str,
            'sale_transaction_id': TransactionIDType,
            'shift_number': str,
            'token_requested_type': TokenRequestedType
        }

        self.attribute_map = {
            'customer_order_id': 'CustomerOrderID',
            'customer_order_req': 'CustomerOrderReq',
            'operator_id': 'OperatorID',
            'operator_language': 'OperatorLanguage',
            'sale_reference_id': 'SaleReferenceID',
            'sale_terminal_data': 'SaleTerminalData',
            'sale_to_acquirer_data': 'SaleToAcquirerData',
            'sale_to_issuer_data': 'SaleToIssuerData',
            'sale_to_poi_data': 'SaleToPOIData',
            'sale_transaction_id': 'SaleTransactionID',
            'shift_number': 'ShiftNumber',
            'token_requested_type': 'TokenRequestedType'
        }

        self._customer_order_id = customer_order_id
        self._customer_order_req = customer_order_req
        self._operator_id = operator_id
        self._operator_language = operator_language
        self._sale_reference_id = sale_reference_id
        self._sale_terminal_data = sale_terminal_data
        self._sale_to_acquirer_data = sale_to_acquirer_data
        self._sale_to_issuer_data = sale_to_issuer_data
        self._sale_to_poi_data = sale_to_poi_data
        self._sale_transaction_id = sale_transaction_id
        self._shift_number = shift_number
        self._token_requested_type = token_requested_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaleData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaleData of this SaleData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_order_id(self):
        """Gets the customer_order_id of this SaleData.

        Additional and optional identification of a customer order.

        :return: The customer_order_id of this SaleData.
        :rtype: str
        """
        return self._customer_order_id

    @customer_order_id.setter
    def customer_order_id(self, customer_order_id):
        """Sets the customer_order_id of this SaleData.

        Additional and optional identification of a customer order.

        :param customer_order_id: The customer_order_id of this SaleData.
        :type customer_order_id: str
        """
        if customer_order_id is not None and not re.search(r'^.+$', customer_order_id):
            raise ValueError("Invalid value for `customer_order_id`, must be a follow pattern or equal to `/^.+$/`")

        self._customer_order_id = customer_order_id

    @property
    def customer_order_req(self):
        """Gets the customer_order_req of this SaleData.


        :return: The customer_order_req of this SaleData.
        :rtype: List[str]
        """
        return self._customer_order_req

    @customer_order_req.setter
    def customer_order_req(self, customer_order_req):
        """Sets the customer_order_req of this SaleData.


        :param customer_order_req: The customer_order_req of this SaleData.
        :type customer_order_req: List[str]
        """
        allowed_values = ["Both", "Closed", "Open"]  # noqa: E501
        if not set(customer_order_req).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `customer_order_req` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(customer_order_req) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._customer_order_req = customer_order_req

    @property
    def operator_id(self):
        """Gets the operator_id of this SaleData.


        :return: The operator_id of this SaleData.
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this SaleData.


        :param operator_id: The operator_id of this SaleData.
        :type operator_id: str
        """
        if operator_id is not None and not re.search(r'^.+$', operator_id):
            raise ValueError("Invalid value for `operator_id`, must be a follow pattern or equal to `/^.+$/`")

        self._operator_id = operator_id

    @property
    def operator_language(self):
        """Gets the operator_language of this SaleData.

        if different from the Login.

        :return: The operator_language of this SaleData.
        :rtype: str
        """
        return self._operator_language

    @operator_language.setter
    def operator_language(self, operator_language):
        """Sets the operator_language of this SaleData.

        if different from the Login.

        :param operator_language: The operator_language of this SaleData.
        :type operator_language: str
        """
        if operator_language is not None and not re.search(r'^[a-z]{2,2}$', operator_language):
            raise ValueError("Invalid value for `operator_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._operator_language = operator_language

    @property
    def sale_reference_id(self):
        """Gets the sale_reference_id of this SaleData.

        If payment reservation.

        :return: The sale_reference_id of this SaleData.
        :rtype: str
        """
        return self._sale_reference_id

    @sale_reference_id.setter
    def sale_reference_id(self, sale_reference_id):
        """Sets the sale_reference_id of this SaleData.

        If payment reservation.

        :param sale_reference_id: The sale_reference_id of this SaleData.
        :type sale_reference_id: str
        """
        if sale_reference_id is not None and not re.search(r'^.+$', sale_reference_id):
            raise ValueError("Invalid value for `sale_reference_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_reference_id = sale_reference_id

    @property
    def sale_terminal_data(self):
        """Gets the sale_terminal_data of this SaleData.


        :return: The sale_terminal_data of this SaleData.
        :rtype: SaleTerminalData
        """
        return self._sale_terminal_data

    @sale_terminal_data.setter
    def sale_terminal_data(self, sale_terminal_data):
        """Sets the sale_terminal_data of this SaleData.


        :param sale_terminal_data: The sale_terminal_data of this SaleData.
        :type sale_terminal_data: SaleTerminalData
        """

        self._sale_terminal_data = sale_terminal_data

    @property
    def sale_to_acquirer_data(self):
        """Gets the sale_to_acquirer_data of this SaleData.

        Send to the Acquirer if present.

        :return: The sale_to_acquirer_data of this SaleData.
        :rtype: str
        """
        return self._sale_to_acquirer_data

    @sale_to_acquirer_data.setter
    def sale_to_acquirer_data(self, sale_to_acquirer_data):
        """Sets the sale_to_acquirer_data of this SaleData.

        Send to the Acquirer if present.

        :param sale_to_acquirer_data: The sale_to_acquirer_data of this SaleData.
        :type sale_to_acquirer_data: str
        """
        if sale_to_acquirer_data is not None and not re.search(r'^.+$', sale_to_acquirer_data):
            raise ValueError("Invalid value for `sale_to_acquirer_data`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_to_acquirer_data = sale_to_acquirer_data

    @property
    def sale_to_issuer_data(self):
        """Gets the sale_to_issuer_data of this SaleData.


        :return: The sale_to_issuer_data of this SaleData.
        :rtype: SaleToIssuerData
        """
        return self._sale_to_issuer_data

    @sale_to_issuer_data.setter
    def sale_to_issuer_data(self, sale_to_issuer_data):
        """Sets the sale_to_issuer_data of this SaleData.


        :param sale_to_issuer_data: The sale_to_issuer_data of this SaleData.
        :type sale_to_issuer_data: SaleToIssuerData
        """

        self._sale_to_issuer_data = sale_to_issuer_data

    @property
    def sale_to_poi_data(self):
        """Gets the sale_to_poi_data of this SaleData.

        Stored with the transaction.

        :return: The sale_to_poi_data of this SaleData.
        :rtype: str
        """
        return self._sale_to_poi_data

    @sale_to_poi_data.setter
    def sale_to_poi_data(self, sale_to_poi_data):
        """Sets the sale_to_poi_data of this SaleData.

        Stored with the transaction.

        :param sale_to_poi_data: The sale_to_poi_data of this SaleData.
        :type sale_to_poi_data: str
        """
        if sale_to_poi_data is not None and not re.search(r'^.+$', sale_to_poi_data):
            raise ValueError("Invalid value for `sale_to_poi_data`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_to_poi_data = sale_to_poi_data

    @property
    def sale_transaction_id(self):
        """Gets the sale_transaction_id of this SaleData.


        :return: The sale_transaction_id of this SaleData.
        :rtype: TransactionIDType
        """
        return self._sale_transaction_id

    @sale_transaction_id.setter
    def sale_transaction_id(self, sale_transaction_id):
        """Sets the sale_transaction_id of this SaleData.


        :param sale_transaction_id: The sale_transaction_id of this SaleData.
        :type sale_transaction_id: TransactionIDType
        """
        if sale_transaction_id is None:
            raise ValueError("Invalid value for `sale_transaction_id`, must not be `None`")

        self._sale_transaction_id = sale_transaction_id

    @property
    def shift_number(self):
        """Gets the shift_number of this SaleData.

        if different from the Login and  see Login .SaleData.

        :return: The shift_number of this SaleData.
        :rtype: str
        """
        return self._shift_number

    @shift_number.setter
    def shift_number(self, shift_number):
        """Sets the shift_number of this SaleData.

        if different from the Login and  see Login .SaleData.

        :param shift_number: The shift_number of this SaleData.
        :type shift_number: str
        """
        if shift_number is not None and not re.search(r'^.+$', shift_number):
            raise ValueError("Invalid value for `shift_number`, must be a follow pattern or equal to `/^.+$/`")

        self._shift_number = shift_number

    @property
    def token_requested_type(self):
        """Gets the token_requested_type of this SaleData.


        :return: The token_requested_type of this SaleData.
        :rtype: TokenRequestedType
        """
        return self._token_requested_type

    @token_requested_type.setter
    def token_requested_type(self, token_requested_type):
        """Sets the token_requested_type of this SaleData.


        :param token_requested_type: The token_requested_type of this SaleData.
        :type token_requested_type: TokenRequestedType
        """

        self._token_requested_type = token_requested_type
