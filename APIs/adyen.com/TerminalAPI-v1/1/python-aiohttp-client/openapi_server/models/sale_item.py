# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unit_of_measure import UnitOfMeasure
import re
from openapi_server import util


class SaleItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_product_info: str=None, ean_upc: int=None, item_amount: float=None, item_id: int=None, product_code: int=None, product_label: str=None, quantity: str=None, sale_channel: int=None, tax_code: int=None, unit_of_measure: UnitOfMeasure=None, unit_price: float=None):
        """SaleItem - a model defined in OpenAPI

        :param additional_product_info: The additional_product_info of this SaleItem.
        :param ean_upc: The ean_upc of this SaleItem.
        :param item_amount: The item_amount of this SaleItem.
        :param item_id: The item_id of this SaleItem.
        :param product_code: The product_code of this SaleItem.
        :param product_label: The product_label of this SaleItem.
        :param quantity: The quantity of this SaleItem.
        :param sale_channel: The sale_channel of this SaleItem.
        :param tax_code: The tax_code of this SaleItem.
        :param unit_of_measure: The unit_of_measure of this SaleItem.
        :param unit_price: The unit_price of this SaleItem.
        """
        self.openapi_types = {
            'additional_product_info': str,
            'ean_upc': int,
            'item_amount': float,
            'item_id': int,
            'product_code': int,
            'product_label': str,
            'quantity': str,
            'sale_channel': int,
            'tax_code': int,
            'unit_of_measure': UnitOfMeasure,
            'unit_price': float
        }

        self.attribute_map = {
            'additional_product_info': 'AdditionalProductInfo',
            'ean_upc': 'EanUpc',
            'item_amount': 'ItemAmount',
            'item_id': 'ItemID',
            'product_code': 'ProductCode',
            'product_label': 'ProductLabel',
            'quantity': 'Quantity',
            'sale_channel': 'SaleChannel',
            'tax_code': 'TaxCode',
            'unit_of_measure': 'UnitOfMeasure',
            'unit_price': 'UnitPrice'
        }

        self._additional_product_info = additional_product_info
        self._ean_upc = ean_upc
        self._item_amount = item_amount
        self._item_id = item_id
        self._product_code = product_code
        self._product_label = product_label
        self._quantity = quantity
        self._sale_channel = sale_channel
        self._tax_code = tax_code
        self._unit_of_measure = unit_of_measure
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaleItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaleItem of this SaleItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_product_info(self):
        """Gets the additional_product_info of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :return: The additional_product_info of this SaleItem.
        :rtype: str
        """
        return self._additional_product_info

    @additional_product_info.setter
    def additional_product_info(self, additional_product_info):
        """Sets the additional_product_info of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :param additional_product_info: The additional_product_info of this SaleItem.
        :type additional_product_info: str
        """
        if additional_product_info is not None and not re.search(r'^.+$', additional_product_info):
            raise ValueError("Invalid value for `additional_product_info`, must be a follow pattern or equal to `/^.+$/`")

        self._additional_product_info = additional_product_info

    @property
    def ean_upc(self):
        """Gets the ean_upc of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :return: The ean_upc of this SaleItem.
        :rtype: int
        """
        return self._ean_upc

    @ean_upc.setter
    def ean_upc(self, ean_upc):
        """Sets the ean_upc of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :param ean_upc: The ean_upc of this SaleItem.
        :type ean_upc: int
        """

        self._ean_upc = ean_upc

    @property
    def item_amount(self):
        """Gets the item_amount of this SaleItem.

        Total amount of the item line.

        :return: The item_amount of this SaleItem.
        :rtype: float
        """
        return self._item_amount

    @item_amount.setter
    def item_amount(self, item_amount):
        """Sets the item_amount of this SaleItem.

        Total amount of the item line.

        :param item_amount: The item_amount of this SaleItem.
        :type item_amount: float
        """
        if item_amount is None:
            raise ValueError("Invalid value for `item_amount`, must not be `None`")
        if item_amount is not None and item_amount > 99999999.999999:
            raise ValueError("Invalid value for `item_amount`, must be a value less than or equal to `99999999.999999`")
        if item_amount is not None and item_amount < 0:
            raise ValueError("Invalid value for `item_amount`, must be a value greater than or equal to `0`")

        self._item_amount = item_amount

    @property
    def item_id(self):
        """Gets the item_id of this SaleItem.

        Item identification inside a transaction (0 to n).

        :return: The item_id of this SaleItem.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SaleItem.

        Item identification inside a transaction (0 to n).

        :param item_id: The item_id of this SaleItem.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def product_code(self):
        """Gets the product_code of this SaleItem.

        Product code of item purchased with the transaction.

        :return: The product_code of this SaleItem.
        :rtype: int
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this SaleItem.

        Product code of item purchased with the transaction.

        :param product_code: The product_code of this SaleItem.
        :type product_code: int
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")
        if product_code is not None and product_code > 20:
            raise ValueError("Invalid value for `product_code`, must be a value less than or equal to `20`")
        if product_code is not None and product_code < 1:
            raise ValueError("Invalid value for `product_code`, must be a value greater than or equal to `1`")

        self._product_code = product_code

    @property
    def product_label(self):
        """Gets the product_label of this SaleItem.


        :return: The product_label of this SaleItem.
        :rtype: str
        """
        return self._product_label

    @product_label.setter
    def product_label(self, product_label):
        """Sets the product_label of this SaleItem.


        :param product_label: The product_label of this SaleItem.
        :type product_label: str
        """
        if product_label is not None and not re.search(r'^.+$', product_label):
            raise ValueError("Invalid value for `product_label`, must be a follow pattern or equal to `/^.+$/`")

        self._product_label = product_label

    @property
    def quantity(self):
        """Gets the quantity of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :return: The quantity of this SaleItem.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :param quantity: The quantity of this SaleItem.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def sale_channel(self):
        """Gets the sale_channel of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :return: The sale_channel of this SaleItem.
        :rtype: int
        """
        return self._sale_channel

    @sale_channel.setter
    def sale_channel(self, sale_channel):
        """Sets the sale_channel of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :param sale_channel: The sale_channel of this SaleItem.
        :type sale_channel: int
        """

        self._sale_channel = sale_channel

    @property
    def tax_code(self):
        """Gets the tax_code of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :return: The tax_code of this SaleItem.
        :rtype: int
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this SaleItem.

        If data sent, POI has to store it and send it if the host protocol allows it.

        :param tax_code: The tax_code of this SaleItem.
        :type tax_code: int
        """

        self._tax_code = tax_code

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this SaleItem.


        :return: The unit_of_measure of this SaleItem.
        :rtype: UnitOfMeasure
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this SaleItem.


        :param unit_of_measure: The unit_of_measure of this SaleItem.
        :type unit_of_measure: UnitOfMeasure
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this SaleItem.

        if Quantity present.

        :return: The unit_price of this SaleItem.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this SaleItem.

        if Quantity present.

        :param unit_price: The unit_price of this SaleItem.
        :type unit_price: float
        """
        if unit_price is not None and unit_price > 99999999.999999:
            raise ValueError("Invalid value for `unit_price`, must be a value less than or equal to `99999999.999999`")
        if unit_price is not None and unit_price < 0:
            raise ValueError("Invalid value for `unit_price`, must be a value greater than or equal to `0`")

        self._unit_price = unit_price
