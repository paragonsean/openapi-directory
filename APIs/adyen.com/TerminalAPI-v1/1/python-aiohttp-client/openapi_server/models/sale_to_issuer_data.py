# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SaleToIssuerData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, statement_reference: str=None):
        """SaleToIssuerData - a model defined in OpenAPI

        :param statement_reference: The statement_reference of this SaleToIssuerData.
        """
        self.openapi_types = {
            'statement_reference': str
        }

        self.attribute_map = {
            'statement_reference': 'StatementReference'
        }

        self._statement_reference = statement_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaleToIssuerData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaleToIssuerData of this SaleToIssuerData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def statement_reference(self):
        """Gets the statement_reference of this SaleToIssuerData.

        Information to print on the bank statement.

        :return: The statement_reference of this SaleToIssuerData.
        :rtype: str
        """
        return self._statement_reference

    @statement_reference.setter
    def statement_reference(self, statement_reference):
        """Sets the statement_reference of this SaleToIssuerData.

        Information to print on the bank statement.

        :param statement_reference: The statement_reference of this SaleToIssuerData.
        :type statement_reference: str
        """
        if statement_reference is not None and not re.search(r'^.+$', statement_reference):
            raise ValueError("Invalid value for `statement_reference`, must be a follow pattern or equal to `/^.+$/`")

        self._statement_reference = statement_reference
