# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pin_format import PINFormat
import re
from openapi_server import util


class CardHolderPIN(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_input: str=None, encr_pin_block: str=None, pin_format: PINFormat=None):
        """CardHolderPIN - a model defined in OpenAPI

        :param additional_input: The additional_input of this CardHolderPIN.
        :param encr_pin_block: The encr_pin_block of this CardHolderPIN.
        :param pin_format: The pin_format of this CardHolderPIN.
        """
        self.openapi_types = {
            'additional_input': str,
            'encr_pin_block': str,
            'pin_format': PINFormat
        }

        self.attribute_map = {
            'additional_input': 'AdditionalInput',
            'encr_pin_block': 'EncrPINBlock',
            'pin_format': 'PINFormat'
        }

        self._additional_input = additional_input
        self._encr_pin_block = encr_pin_block
        self._pin_format = pin_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardHolderPIN':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardHolderPIN of this CardHolderPIN.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_input(self):
        """Gets the additional_input of this CardHolderPIN.


        :return: The additional_input of this CardHolderPIN.
        :rtype: str
        """
        return self._additional_input

    @additional_input.setter
    def additional_input(self, additional_input):
        """Sets the additional_input of this CardHolderPIN.


        :param additional_input: The additional_input of this CardHolderPIN.
        :type additional_input: str
        """
        if additional_input is not None and not re.search(r'^.+$', additional_input):
            raise ValueError("Invalid value for `additional_input`, must be a follow pattern or equal to `/^.+$/`")

        self._additional_input = additional_input

    @property
    def encr_pin_block(self):
        """Gets the encr_pin_block of this CardHolderPIN.


        :return: The encr_pin_block of this CardHolderPIN.
        :rtype: str
        """
        return self._encr_pin_block

    @encr_pin_block.setter
    def encr_pin_block(self, encr_pin_block):
        """Sets the encr_pin_block of this CardHolderPIN.


        :param encr_pin_block: The encr_pin_block of this CardHolderPIN.
        :type encr_pin_block: str
        """
        if encr_pin_block is None:
            raise ValueError("Invalid value for `encr_pin_block`, must not be `None`")

        self._encr_pin_block = encr_pin_block

    @property
    def pin_format(self):
        """Gets the pin_format of this CardHolderPIN.


        :return: The pin_format of this CardHolderPIN.
        :rtype: PINFormat
        """
        return self._pin_format

    @pin_format.setter
    def pin_format(self, pin_format):
        """Sets the pin_format of this CardHolderPIN.


        :param pin_format: The pin_format of this CardHolderPIN.
        :type pin_format: PINFormat
        """
        if pin_format is None:
            raise ValueError("Invalid value for `pin_format`, must not be `None`")

        self._pin_format = pin_format
