# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_type import TransactionType
from openapi_server import util


class LoyaltyTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_amount: float=None, transaction_count: int=None, transaction_type: TransactionType=None):
        """LoyaltyTotals - a model defined in OpenAPI

        :param transaction_amount: The transaction_amount of this LoyaltyTotals.
        :param transaction_count: The transaction_count of this LoyaltyTotals.
        :param transaction_type: The transaction_type of this LoyaltyTotals.
        """
        self.openapi_types = {
            'transaction_amount': float,
            'transaction_count': int,
            'transaction_type': TransactionType
        }

        self.attribute_map = {
            'transaction_amount': 'TransactionAmount',
            'transaction_count': 'TransactionCount',
            'transaction_type': 'TransactionType'
        }

        self._transaction_amount = transaction_amount
        self._transaction_count = transaction_count
        self._transaction_type = transaction_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyTotals of this LoyaltyTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_amount(self):
        """Gets the transaction_amount of this LoyaltyTotals.

        Sum of amount of processed transaction during the period.

        :return: The transaction_amount of this LoyaltyTotals.
        :rtype: float
        """
        return self._transaction_amount

    @transaction_amount.setter
    def transaction_amount(self, transaction_amount):
        """Sets the transaction_amount of this LoyaltyTotals.

        Sum of amount of processed transaction during the period.

        :param transaction_amount: The transaction_amount of this LoyaltyTotals.
        :type transaction_amount: float
        """
        if transaction_amount is None:
            raise ValueError("Invalid value for `transaction_amount`, must not be `None`")
        if transaction_amount is not None and transaction_amount > 99999999.999999:
            raise ValueError("Invalid value for `transaction_amount`, must be a value less than or equal to `99999999.999999`")
        if transaction_amount is not None and transaction_amount < 0:
            raise ValueError("Invalid value for `transaction_amount`, must be a value greater than or equal to `0`")

        self._transaction_amount = transaction_amount

    @property
    def transaction_count(self):
        """Gets the transaction_count of this LoyaltyTotals.

        Number of processed transaction during the period.

        :return: The transaction_count of this LoyaltyTotals.
        :rtype: int
        """
        return self._transaction_count

    @transaction_count.setter
    def transaction_count(self, transaction_count):
        """Sets the transaction_count of this LoyaltyTotals.

        Number of processed transaction during the period.

        :param transaction_count: The transaction_count of this LoyaltyTotals.
        :type transaction_count: int
        """
        if transaction_count is None:
            raise ValueError("Invalid value for `transaction_count`, must not be `None`")

        self._transaction_count = transaction_count

    @property
    def transaction_type(self):
        """Gets the transaction_type of this LoyaltyTotals.


        :return: The transaction_type of this LoyaltyTotals.
        :rtype: TransactionType
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this LoyaltyTotals.


        :param transaction_type: The transaction_type of this LoyaltyTotals.
        :type transaction_type: TransactionType
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")

        self._transaction_type = transaction_type
