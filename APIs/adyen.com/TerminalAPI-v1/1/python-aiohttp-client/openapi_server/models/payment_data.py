# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_order import CustomerOrder
from openapi_server.models.instalment import Instalment
from openapi_server.models.payment_instrument_data import PaymentInstrumentData
from openapi_server.models.payment_type import PaymentType
from openapi_server.models.transaction_id_type import TransactionIDType
from openapi_server import util


class PaymentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_acquisition_reference: TransactionIDType=None, customer_order: CustomerOrder=None, instalment: Instalment=None, payment_instrument_data: PaymentInstrumentData=None, payment_type: PaymentType=None, requested_validity_date: date=None, split_payment_flag: bool=False):
        """PaymentData - a model defined in OpenAPI

        :param card_acquisition_reference: The card_acquisition_reference of this PaymentData.
        :param customer_order: The customer_order of this PaymentData.
        :param instalment: The instalment of this PaymentData.
        :param payment_instrument_data: The payment_instrument_data of this PaymentData.
        :param payment_type: The payment_type of this PaymentData.
        :param requested_validity_date: The requested_validity_date of this PaymentData.
        :param split_payment_flag: The split_payment_flag of this PaymentData.
        """
        self.openapi_types = {
            'card_acquisition_reference': TransactionIDType,
            'customer_order': CustomerOrder,
            'instalment': Instalment,
            'payment_instrument_data': PaymentInstrumentData,
            'payment_type': PaymentType,
            'requested_validity_date': date,
            'split_payment_flag': bool
        }

        self.attribute_map = {
            'card_acquisition_reference': 'CardAcquisitionReference',
            'customer_order': 'CustomerOrder',
            'instalment': 'Instalment',
            'payment_instrument_data': 'PaymentInstrumentData',
            'payment_type': 'PaymentType',
            'requested_validity_date': 'RequestedValidityDate',
            'split_payment_flag': 'SplitPaymentFlag'
        }

        self._card_acquisition_reference = card_acquisition_reference
        self._customer_order = customer_order
        self._instalment = instalment
        self._payment_instrument_data = payment_instrument_data
        self._payment_type = payment_type
        self._requested_validity_date = requested_validity_date
        self._split_payment_flag = split_payment_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentData of this PaymentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_acquisition_reference(self):
        """Gets the card_acquisition_reference of this PaymentData.


        :return: The card_acquisition_reference of this PaymentData.
        :rtype: TransactionIDType
        """
        return self._card_acquisition_reference

    @card_acquisition_reference.setter
    def card_acquisition_reference(self, card_acquisition_reference):
        """Sets the card_acquisition_reference of this PaymentData.


        :param card_acquisition_reference: The card_acquisition_reference of this PaymentData.
        :type card_acquisition_reference: TransactionIDType
        """

        self._card_acquisition_reference = card_acquisition_reference

    @property
    def customer_order(self):
        """Gets the customer_order of this PaymentData.


        :return: The customer_order of this PaymentData.
        :rtype: CustomerOrder
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this PaymentData.


        :param customer_order: The customer_order of this PaymentData.
        :type customer_order: CustomerOrder
        """

        self._customer_order = customer_order

    @property
    def instalment(self):
        """Gets the instalment of this PaymentData.


        :return: The instalment of this PaymentData.
        :rtype: Instalment
        """
        return self._instalment

    @instalment.setter
    def instalment(self, instalment):
        """Sets the instalment of this PaymentData.


        :param instalment: The instalment of this PaymentData.
        :type instalment: Instalment
        """

        self._instalment = instalment

    @property
    def payment_instrument_data(self):
        """Gets the payment_instrument_data of this PaymentData.


        :return: The payment_instrument_data of this PaymentData.
        :rtype: PaymentInstrumentData
        """
        return self._payment_instrument_data

    @payment_instrument_data.setter
    def payment_instrument_data(self, payment_instrument_data):
        """Sets the payment_instrument_data of this PaymentData.


        :param payment_instrument_data: The payment_instrument_data of this PaymentData.
        :type payment_instrument_data: PaymentInstrumentData
        """

        self._payment_instrument_data = payment_instrument_data

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentData.


        :return: The payment_type of this PaymentData.
        :rtype: PaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentData.


        :param payment_type: The payment_type of this PaymentData.
        :type payment_type: PaymentType
        """

        self._payment_type = payment_type

    @property
    def requested_validity_date(self):
        """Gets the requested_validity_date of this PaymentData.


        :return: The requested_validity_date of this PaymentData.
        :rtype: date
        """
        return self._requested_validity_date

    @requested_validity_date.setter
    def requested_validity_date(self, requested_validity_date):
        """Sets the requested_validity_date of this PaymentData.


        :param requested_validity_date: The requested_validity_date of this PaymentData.
        :type requested_validity_date: date
        """

        self._requested_validity_date = requested_validity_date

    @property
    def split_payment_flag(self):
        """Gets the split_payment_flag of this PaymentData.


        :return: The split_payment_flag of this PaymentData.
        :rtype: bool
        """
        return self._split_payment_flag

    @split_payment_flag.setter
    def split_payment_flag(self, split_payment_flag):
        """Sets the split_payment_flag of this PaymentData.


        :param split_payment_flag: The split_payment_flag of this PaymentData.
        :type split_payment_flag: bool
        """

        self._split_payment_flag = split_payment_flag
