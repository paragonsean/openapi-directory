# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.info_qualify import InfoQualify
from openapi_server.models.menu_entry import MenuEntry
from openapi_server.models.output_content import OutputContent
import re
from openapi_server import util


class DisplayOutput(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: Device=None, info_qualify: InfoQualify=None, menu_entry: List[MenuEntry]=None, minimum_display_time: int=0, output_content: OutputContent=None, output_signature: str=None, response_required_flag: bool=True):
        """DisplayOutput - a model defined in OpenAPI

        :param device: The device of this DisplayOutput.
        :param info_qualify: The info_qualify of this DisplayOutput.
        :param menu_entry: The menu_entry of this DisplayOutput.
        :param minimum_display_time: The minimum_display_time of this DisplayOutput.
        :param output_content: The output_content of this DisplayOutput.
        :param output_signature: The output_signature of this DisplayOutput.
        :param response_required_flag: The response_required_flag of this DisplayOutput.
        """
        self.openapi_types = {
            'device': Device,
            'info_qualify': InfoQualify,
            'menu_entry': List[MenuEntry],
            'minimum_display_time': int,
            'output_content': OutputContent,
            'output_signature': str,
            'response_required_flag': bool
        }

        self.attribute_map = {
            'device': 'Device',
            'info_qualify': 'InfoQualify',
            'menu_entry': 'MenuEntry',
            'minimum_display_time': 'MinimumDisplayTime',
            'output_content': 'OutputContent',
            'output_signature': 'OutputSignature',
            'response_required_flag': 'ResponseRequiredFlag'
        }

        self._device = device
        self._info_qualify = info_qualify
        self._menu_entry = menu_entry
        self._minimum_display_time = minimum_display_time
        self._output_content = output_content
        self._output_signature = output_signature
        self._response_required_flag = response_required_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayOutput':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayOutput of this DisplayOutput.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this DisplayOutput.


        :return: The device of this DisplayOutput.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DisplayOutput.


        :param device: The device of this DisplayOutput.
        :type device: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def info_qualify(self):
        """Gets the info_qualify of this DisplayOutput.


        :return: The info_qualify of this DisplayOutput.
        :rtype: InfoQualify
        """
        return self._info_qualify

    @info_qualify.setter
    def info_qualify(self, info_qualify):
        """Sets the info_qualify of this DisplayOutput.


        :param info_qualify: The info_qualify of this DisplayOutput.
        :type info_qualify: InfoQualify
        """
        if info_qualify is None:
            raise ValueError("Invalid value for `info_qualify`, must not be `None`")

        self._info_qualify = info_qualify

    @property
    def menu_entry(self):
        """Gets the menu_entry of this DisplayOutput.


        :return: The menu_entry of this DisplayOutput.
        :rtype: List[MenuEntry]
        """
        return self._menu_entry

    @menu_entry.setter
    def menu_entry(self, menu_entry):
        """Sets the menu_entry of this DisplayOutput.


        :param menu_entry: The menu_entry of this DisplayOutput.
        :type menu_entry: List[MenuEntry]
        """

        self._menu_entry = menu_entry

    @property
    def minimum_display_time(self):
        """Gets the minimum_display_time of this DisplayOutput.

        Number of seconds the message has to be displayed.

        :return: The minimum_display_time of this DisplayOutput.
        :rtype: int
        """
        return self._minimum_display_time

    @minimum_display_time.setter
    def minimum_display_time(self, minimum_display_time):
        """Sets the minimum_display_time of this DisplayOutput.

        Number of seconds the message has to be displayed.

        :param minimum_display_time: The minimum_display_time of this DisplayOutput.
        :type minimum_display_time: int
        """
        if minimum_display_time is not None and minimum_display_time > 999:
            raise ValueError("Invalid value for `minimum_display_time`, must be a value less than or equal to `999`")
        if minimum_display_time is not None and minimum_display_time < 0:
            raise ValueError("Invalid value for `minimum_display_time`, must be a value greater than or equal to `0`")

        self._minimum_display_time = minimum_display_time

    @property
    def output_content(self):
        """Gets the output_content of this DisplayOutput.


        :return: The output_content of this DisplayOutput.
        :rtype: OutputContent
        """
        return self._output_content

    @output_content.setter
    def output_content(self, output_content):
        """Sets the output_content of this DisplayOutput.


        :param output_content: The output_content of this DisplayOutput.
        :type output_content: OutputContent
        """
        if output_content is None:
            raise ValueError("Invalid value for `output_content`, must not be `None`")

        self._output_content = output_content

    @property
    def output_signature(self):
        """Gets the output_signature of this DisplayOutput.

        If protection has to be provided to the vendor on the text to display or print.

        :return: The output_signature of this DisplayOutput.
        :rtype: str
        """
        return self._output_signature

    @output_signature.setter
    def output_signature(self, output_signature):
        """Sets the output_signature of this DisplayOutput.

        If protection has to be provided to the vendor on the text to display or print.

        :param output_signature: The output_signature of this DisplayOutput.
        :type output_signature: str
        """
        if output_signature is not None and not re.search(r'^.+$', output_signature):
            raise ValueError("Invalid value for `output_signature`, must be a follow pattern or equal to `/^.+$/`")

        self._output_signature = output_signature

    @property
    def response_required_flag(self):
        """Gets the response_required_flag of this DisplayOutput.

        Request of a message response.

        :return: The response_required_flag of this DisplayOutput.
        :rtype: bool
        """
        return self._response_required_flag

    @response_required_flag.setter
    def response_required_flag(self, response_required_flag):
        """Sets the response_required_flag of this DisplayOutput.

        Request of a message response.

        :param response_required_flag: The response_required_flag of this DisplayOutput.
        :type response_required_flag: bool
        """

        self._response_required_flag = response_required_flag
