# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.converted_amount import ConvertedAmount
import re
from openapi_server import util


class CurrencyConversion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, commission: float=None, converted_amount: ConvertedAmount=None, customer_approved_flag: bool=True, declaration: str=None, markup: str=None, rate: str=None):
        """CurrencyConversion - a model defined in OpenAPI

        :param commission: The commission of this CurrencyConversion.
        :param converted_amount: The converted_amount of this CurrencyConversion.
        :param customer_approved_flag: The customer_approved_flag of this CurrencyConversion.
        :param declaration: The declaration of this CurrencyConversion.
        :param markup: The markup of this CurrencyConversion.
        :param rate: The rate of this CurrencyConversion.
        """
        self.openapi_types = {
            'commission': float,
            'converted_amount': ConvertedAmount,
            'customer_approved_flag': bool,
            'declaration': str,
            'markup': str,
            'rate': str
        }

        self.attribute_map = {
            'commission': 'Commission',
            'converted_amount': 'ConvertedAmount',
            'customer_approved_flag': 'CustomerApprovedFlag',
            'declaration': 'Declaration',
            'markup': 'Markup',
            'rate': 'Rate'
        }

        self._commission = commission
        self._converted_amount = converted_amount
        self._customer_approved_flag = customer_approved_flag
        self._declaration = declaration
        self._markup = markup
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencyConversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CurrencyConversion of this CurrencyConversion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def commission(self):
        """Gets the commission of this CurrencyConversion.

        Commission for a currency conversion.

        :return: The commission of this CurrencyConversion.
        :rtype: float
        """
        return self._commission

    @commission.setter
    def commission(self, commission):
        """Sets the commission of this CurrencyConversion.

        Commission for a currency conversion.

        :param commission: The commission of this CurrencyConversion.
        :type commission: float
        """
        if commission is not None and commission > 99999999.999999:
            raise ValueError("Invalid value for `commission`, must be a value less than or equal to `99999999.999999`")
        if commission is not None and commission < 0:
            raise ValueError("Invalid value for `commission`, must be a value greater than or equal to `0`")

        self._commission = commission

    @property
    def converted_amount(self):
        """Gets the converted_amount of this CurrencyConversion.


        :return: The converted_amount of this CurrencyConversion.
        :rtype: ConvertedAmount
        """
        return self._converted_amount

    @converted_amount.setter
    def converted_amount(self, converted_amount):
        """Sets the converted_amount of this CurrencyConversion.


        :param converted_amount: The converted_amount of this CurrencyConversion.
        :type converted_amount: ConvertedAmount
        """
        if converted_amount is None:
            raise ValueError("Invalid value for `converted_amount`, must not be `None`")

        self._converted_amount = converted_amount

    @property
    def customer_approved_flag(self):
        """Gets the customer_approved_flag of this CurrencyConversion.

        Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.

        :return: The customer_approved_flag of this CurrencyConversion.
        :rtype: bool
        """
        return self._customer_approved_flag

    @customer_approved_flag.setter
    def customer_approved_flag(self, customer_approved_flag):
        """Sets the customer_approved_flag of this CurrencyConversion.

        Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.

        :param customer_approved_flag: The customer_approved_flag of this CurrencyConversion.
        :type customer_approved_flag: bool
        """

        self._customer_approved_flag = customer_approved_flag

    @property
    def declaration(self):
        """Gets the declaration of this CurrencyConversion.

        If a declaration has to be presented to the customer.

        :return: The declaration of this CurrencyConversion.
        :rtype: str
        """
        return self._declaration

    @declaration.setter
    def declaration(self, declaration):
        """Sets the declaration of this CurrencyConversion.

        If a declaration has to be presented to the customer.

        :param declaration: The declaration of this CurrencyConversion.
        :type declaration: str
        """
        if declaration is not None and not re.search(r'^.+$', declaration):
            raise ValueError("Invalid value for `declaration`, must be a follow pattern or equal to `/^.+$/`")

        self._declaration = declaration

    @property
    def markup(self):
        """Gets the markup of this CurrencyConversion.

        Markup of a currency conversion amount as a percentage.

        :return: The markup of this CurrencyConversion.
        :rtype: str
        """
        return self._markup

    @markup.setter
    def markup(self, markup):
        """Sets the markup of this CurrencyConversion.

        Markup of a currency conversion amount as a percentage.

        :param markup: The markup of this CurrencyConversion.
        :type markup: str
        """

        self._markup = markup

    @property
    def rate(self):
        """Gets the rate of this CurrencyConversion.

        Rate of currency conversion.

        :return: The rate of this CurrencyConversion.
        :rtype: str
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """Sets the rate of this CurrencyConversion.

        Rate of currency conversion.

        :param rate: The rate of this CurrencyConversion.
        :type rate: str
        """

        self._rate = rate
