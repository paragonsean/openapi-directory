# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TransactionIDType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, time_stamp: datetime=None, transaction_id: str=None):
        """TransactionIDType - a model defined in OpenAPI

        :param time_stamp: The time_stamp of this TransactionIDType.
        :param transaction_id: The transaction_id of this TransactionIDType.
        """
        self.openapi_types = {
            'time_stamp': datetime,
            'transaction_id': str
        }

        self.attribute_map = {
            'time_stamp': 'TimeStamp',
            'transaction_id': 'TransactionID'
        }

        self._time_stamp = time_stamp
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionIDType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionIDType of this TransactionIDType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def time_stamp(self):
        """Gets the time_stamp of this TransactionIDType.


        :return: The time_stamp of this TransactionIDType.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this TransactionIDType.


        :param time_stamp: The time_stamp of this TransactionIDType.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionIDType.


        :return: The transaction_id of this TransactionIDType.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionIDType.


        :param transaction_id: The transaction_id of this TransactionIDType.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")
        if transaction_id is not None and not re.search(r'^.+$', transaction_id):
            raise ValueError("Invalid value for `transaction_id`, must be a follow pattern or equal to `/^.+$/`")

        self._transaction_id = transaction_id
