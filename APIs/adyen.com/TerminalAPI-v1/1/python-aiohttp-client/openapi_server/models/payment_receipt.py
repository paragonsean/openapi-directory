# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_qualifier import DocumentQualifier
from openapi_server.models.output_content import OutputContent
from openapi_server import util


class PaymentReceipt(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_qualifier: DocumentQualifier=None, integrated_print_flag: bool=None, output_content: OutputContent=None, required_signature_flag: bool=False):
        """PaymentReceipt - a model defined in OpenAPI

        :param document_qualifier: The document_qualifier of this PaymentReceipt.
        :param integrated_print_flag: The integrated_print_flag of this PaymentReceipt.
        :param output_content: The output_content of this PaymentReceipt.
        :param required_signature_flag: The required_signature_flag of this PaymentReceipt.
        """
        self.openapi_types = {
            'document_qualifier': DocumentQualifier,
            'integrated_print_flag': bool,
            'output_content': OutputContent,
            'required_signature_flag': bool
        }

        self.attribute_map = {
            'document_qualifier': 'DocumentQualifier',
            'integrated_print_flag': 'IntegratedPrintFlag',
            'output_content': 'OutputContent',
            'required_signature_flag': 'RequiredSignatureFlag'
        }

        self._document_qualifier = document_qualifier
        self._integrated_print_flag = integrated_print_flag
        self._output_content = output_content
        self._required_signature_flag = required_signature_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentReceipt':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentReceipt of this PaymentReceipt.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_qualifier(self):
        """Gets the document_qualifier of this PaymentReceipt.


        :return: The document_qualifier of this PaymentReceipt.
        :rtype: DocumentQualifier
        """
        return self._document_qualifier

    @document_qualifier.setter
    def document_qualifier(self, document_qualifier):
        """Sets the document_qualifier of this PaymentReceipt.


        :param document_qualifier: The document_qualifier of this PaymentReceipt.
        :type document_qualifier: DocumentQualifier
        """
        if document_qualifier is None:
            raise ValueError("Invalid value for `document_qualifier`, must not be `None`")

        self._document_qualifier = document_qualifier

    @property
    def integrated_print_flag(self):
        """Gets the integrated_print_flag of this PaymentReceipt.

        Type of the print integrated to other prints.

        :return: The integrated_print_flag of this PaymentReceipt.
        :rtype: bool
        """
        return self._integrated_print_flag

    @integrated_print_flag.setter
    def integrated_print_flag(self, integrated_print_flag):
        """Sets the integrated_print_flag of this PaymentReceipt.

        Type of the print integrated to other prints.

        :param integrated_print_flag: The integrated_print_flag of this PaymentReceipt.
        :type integrated_print_flag: bool
        """

        self._integrated_print_flag = integrated_print_flag

    @property
    def output_content(self):
        """Gets the output_content of this PaymentReceipt.


        :return: The output_content of this PaymentReceipt.
        :rtype: OutputContent
        """
        return self._output_content

    @output_content.setter
    def output_content(self, output_content):
        """Sets the output_content of this PaymentReceipt.


        :param output_content: The output_content of this PaymentReceipt.
        :type output_content: OutputContent
        """
        if output_content is None:
            raise ValueError("Invalid value for `output_content`, must not be `None`")

        self._output_content = output_content

    @property
    def required_signature_flag(self):
        """Gets the required_signature_flag of this PaymentReceipt.

        Indicate that the cardholder payment receipt requires a physical signature by the Customer.

        :return: The required_signature_flag of this PaymentReceipt.
        :rtype: bool
        """
        return self._required_signature_flag

    @required_signature_flag.setter
    def required_signature_flag(self, required_signature_flag):
        """Sets the required_signature_flag of this PaymentReceipt.

        Indicate that the cardholder payment receipt requires a physical signature by the Customer.

        :param required_signature_flag: The required_signature_flag of this PaymentReceipt.
        :type required_signature_flag: bool
        """

        self._required_signature_flag = required_signature_flag
