# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AmountsResp(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorized_amount: float=None, cash_back_amount: float=None, currency: str=None, tip_amount: float=None, total_fees_amount: float=None, total_rebates_amount: float=None):
        """AmountsResp - a model defined in OpenAPI

        :param authorized_amount: The authorized_amount of this AmountsResp.
        :param cash_back_amount: The cash_back_amount of this AmountsResp.
        :param currency: The currency of this AmountsResp.
        :param tip_amount: The tip_amount of this AmountsResp.
        :param total_fees_amount: The total_fees_amount of this AmountsResp.
        :param total_rebates_amount: The total_rebates_amount of this AmountsResp.
        """
        self.openapi_types = {
            'authorized_amount': float,
            'cash_back_amount': float,
            'currency': str,
            'tip_amount': float,
            'total_fees_amount': float,
            'total_rebates_amount': float
        }

        self.attribute_map = {
            'authorized_amount': 'AuthorizedAmount',
            'cash_back_amount': 'CashBackAmount',
            'currency': 'Currency',
            'tip_amount': 'TipAmount',
            'total_fees_amount': 'TotalFeesAmount',
            'total_rebates_amount': 'TotalRebatesAmount'
        }

        self._authorized_amount = authorized_amount
        self._cash_back_amount = cash_back_amount
        self._currency = currency
        self._tip_amount = tip_amount
        self._total_fees_amount = total_fees_amount
        self._total_rebates_amount = total_rebates_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmountsResp':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmountsResp of this AmountsResp.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorized_amount(self):
        """Gets the authorized_amount of this AmountsResp.


        :return: The authorized_amount of this AmountsResp.
        :rtype: float
        """
        return self._authorized_amount

    @authorized_amount.setter
    def authorized_amount(self, authorized_amount):
        """Sets the authorized_amount of this AmountsResp.


        :param authorized_amount: The authorized_amount of this AmountsResp.
        :type authorized_amount: float
        """
        if authorized_amount is None:
            raise ValueError("Invalid value for `authorized_amount`, must not be `None`")
        if authorized_amount is not None and authorized_amount > 99999999.999999:
            raise ValueError("Invalid value for `authorized_amount`, must be a value less than or equal to `99999999.999999`")
        if authorized_amount is not None and authorized_amount < 0:
            raise ValueError("Invalid value for `authorized_amount`, must be a value greater than or equal to `0`")

        self._authorized_amount = authorized_amount

    @property
    def cash_back_amount(self):
        """Gets the cash_back_amount of this AmountsResp.


        :return: The cash_back_amount of this AmountsResp.
        :rtype: float
        """
        return self._cash_back_amount

    @cash_back_amount.setter
    def cash_back_amount(self, cash_back_amount):
        """Sets the cash_back_amount of this AmountsResp.


        :param cash_back_amount: The cash_back_amount of this AmountsResp.
        :type cash_back_amount: float
        """
        if cash_back_amount is not None and cash_back_amount > 99999999.999999:
            raise ValueError("Invalid value for `cash_back_amount`, must be a value less than or equal to `99999999.999999`")
        if cash_back_amount is not None and cash_back_amount < 0:
            raise ValueError("Invalid value for `cash_back_amount`, must be a value greater than or equal to `0`")

        self._cash_back_amount = cash_back_amount

    @property
    def currency(self):
        """Gets the currency of this AmountsResp.


        :return: The currency of this AmountsResp.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AmountsResp.


        :param currency: The currency of this AmountsResp.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def tip_amount(self):
        """Gets the tip_amount of this AmountsResp.


        :return: The tip_amount of this AmountsResp.
        :rtype: float
        """
        return self._tip_amount

    @tip_amount.setter
    def tip_amount(self, tip_amount):
        """Sets the tip_amount of this AmountsResp.


        :param tip_amount: The tip_amount of this AmountsResp.
        :type tip_amount: float
        """
        if tip_amount is not None and tip_amount > 99999999.999999:
            raise ValueError("Invalid value for `tip_amount`, must be a value less than or equal to `99999999.999999`")
        if tip_amount is not None and tip_amount < 0:
            raise ValueError("Invalid value for `tip_amount`, must be a value greater than or equal to `0`")

        self._tip_amount = tip_amount

    @property
    def total_fees_amount(self):
        """Gets the total_fees_amount of this AmountsResp.


        :return: The total_fees_amount of this AmountsResp.
        :rtype: float
        """
        return self._total_fees_amount

    @total_fees_amount.setter
    def total_fees_amount(self, total_fees_amount):
        """Sets the total_fees_amount of this AmountsResp.


        :param total_fees_amount: The total_fees_amount of this AmountsResp.
        :type total_fees_amount: float
        """
        if total_fees_amount is not None and total_fees_amount > 99999999.999999:
            raise ValueError("Invalid value for `total_fees_amount`, must be a value less than or equal to `99999999.999999`")
        if total_fees_amount is not None and total_fees_amount < 0:
            raise ValueError("Invalid value for `total_fees_amount`, must be a value greater than or equal to `0`")

        self._total_fees_amount = total_fees_amount

    @property
    def total_rebates_amount(self):
        """Gets the total_rebates_amount of this AmountsResp.


        :return: The total_rebates_amount of this AmountsResp.
        :rtype: float
        """
        return self._total_rebates_amount

    @total_rebates_amount.setter
    def total_rebates_amount(self, total_rebates_amount):
        """Sets the total_rebates_amount of this AmountsResp.


        :param total_rebates_amount: The total_rebates_amount of this AmountsResp.
        :type total_rebates_amount: float
        """
        if total_rebates_amount is not None and total_rebates_amount > 99999999.999999:
            raise ValueError("Invalid value for `total_rebates_amount`, must be a value less than or equal to `99999999.999999`")
        if total_rebates_amount is not None and total_rebates_amount < 0:
            raise ValueError("Invalid value for `total_rebates_amount`, must be a value greater than or equal to `0`")

        self._total_rebates_amount = total_rebates_amount
