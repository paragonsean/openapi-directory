# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SecurityTrailer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adyen_crypto_version: int=None, hmac: str=None, key_identifier: str=None, key_version: int=None, nonce: str=None):
        """SecurityTrailer - a model defined in OpenAPI

        :param adyen_crypto_version: The adyen_crypto_version of this SecurityTrailer.
        :param hmac: The hmac of this SecurityTrailer.
        :param key_identifier: The key_identifier of this SecurityTrailer.
        :param key_version: The key_version of this SecurityTrailer.
        :param nonce: The nonce of this SecurityTrailer.
        """
        self.openapi_types = {
            'adyen_crypto_version': int,
            'hmac': str,
            'key_identifier': str,
            'key_version': int,
            'nonce': str
        }

        self.attribute_map = {
            'adyen_crypto_version': 'AdyenCryptoVersion',
            'hmac': 'Hmac',
            'key_identifier': 'KeyIdentifier',
            'key_version': 'KeyVersion',
            'nonce': 'Nonce'
        }

        self._adyen_crypto_version = adyen_crypto_version
        self._hmac = hmac
        self._key_identifier = key_identifier
        self._key_version = key_version
        self._nonce = nonce

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityTrailer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityTrailer of this SecurityTrailer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adyen_crypto_version(self):
        """Gets the adyen_crypto_version of this SecurityTrailer.


        :return: The adyen_crypto_version of this SecurityTrailer.
        :rtype: int
        """
        return self._adyen_crypto_version

    @adyen_crypto_version.setter
    def adyen_crypto_version(self, adyen_crypto_version):
        """Sets the adyen_crypto_version of this SecurityTrailer.


        :param adyen_crypto_version: The adyen_crypto_version of this SecurityTrailer.
        :type adyen_crypto_version: int
        """
        if adyen_crypto_version is None:
            raise ValueError("Invalid value for `adyen_crypto_version`, must not be `None`")

        self._adyen_crypto_version = adyen_crypto_version

    @property
    def hmac(self):
        """Gets the hmac of this SecurityTrailer.


        :return: The hmac of this SecurityTrailer.
        :rtype: str
        """
        return self._hmac

    @hmac.setter
    def hmac(self, hmac):
        """Sets the hmac of this SecurityTrailer.


        :param hmac: The hmac of this SecurityTrailer.
        :type hmac: str
        """
        if hmac is None:
            raise ValueError("Invalid value for `hmac`, must not be `None`")
        if hmac is not None and not re.search(r'^.+$', hmac):
            raise ValueError("Invalid value for `hmac`, must be a follow pattern or equal to `/^.+$/`")

        self._hmac = hmac

    @property
    def key_identifier(self):
        """Gets the key_identifier of this SecurityTrailer.


        :return: The key_identifier of this SecurityTrailer.
        :rtype: str
        """
        return self._key_identifier

    @key_identifier.setter
    def key_identifier(self, key_identifier):
        """Sets the key_identifier of this SecurityTrailer.


        :param key_identifier: The key_identifier of this SecurityTrailer.
        :type key_identifier: str
        """
        if key_identifier is None:
            raise ValueError("Invalid value for `key_identifier`, must not be `None`")
        if key_identifier is not None and not re.search(r'^.+$', key_identifier):
            raise ValueError("Invalid value for `key_identifier`, must be a follow pattern or equal to `/^.+$/`")

        self._key_identifier = key_identifier

    @property
    def key_version(self):
        """Gets the key_version of this SecurityTrailer.


        :return: The key_version of this SecurityTrailer.
        :rtype: int
        """
        return self._key_version

    @key_version.setter
    def key_version(self, key_version):
        """Sets the key_version of this SecurityTrailer.


        :param key_version: The key_version of this SecurityTrailer.
        :type key_version: int
        """
        if key_version is None:
            raise ValueError("Invalid value for `key_version`, must not be `None`")

        self._key_version = key_version

    @property
    def nonce(self):
        """Gets the nonce of this SecurityTrailer.


        :return: The nonce of this SecurityTrailer.
        :rtype: str
        """
        return self._nonce

    @nonce.setter
    def nonce(self, nonce):
        """Sets the nonce of this SecurityTrailer.


        :param nonce: The nonce of this SecurityTrailer.
        :type nonce: str
        """
        if nonce is None:
            raise ValueError("Invalid value for `nonce`, must not be `None`")
        if nonce is not None and not re.search(r'^.+$', nonce):
            raise ValueError("Invalid value for `nonce`, must be a follow pattern or equal to `/^.+$/`")

        self._nonce = nonce
