# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sale_software import SaleSoftware
from openapi_server.models.sale_terminal_data import SaleTerminalData
from openapi_server.models.token_requested_type import TokenRequestedType
import re
from openapi_server import util


class LoginRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_order_req: List[str]=None, date_time: datetime=None, operator_id: str=None, operator_language: str=None, poi_serial_number: str=None, sale_software: SaleSoftware=None, sale_terminal_data: SaleTerminalData=None, shift_number: str=None, token_requested_type: TokenRequestedType=None, training_mode_flag: bool=False):
        """LoginRequest - a model defined in OpenAPI

        :param customer_order_req: The customer_order_req of this LoginRequest.
        :param date_time: The date_time of this LoginRequest.
        :param operator_id: The operator_id of this LoginRequest.
        :param operator_language: The operator_language of this LoginRequest.
        :param poi_serial_number: The poi_serial_number of this LoginRequest.
        :param sale_software: The sale_software of this LoginRequest.
        :param sale_terminal_data: The sale_terminal_data of this LoginRequest.
        :param shift_number: The shift_number of this LoginRequest.
        :param token_requested_type: The token_requested_type of this LoginRequest.
        :param training_mode_flag: The training_mode_flag of this LoginRequest.
        """
        self.openapi_types = {
            'customer_order_req': List[str],
            'date_time': datetime,
            'operator_id': str,
            'operator_language': str,
            'poi_serial_number': str,
            'sale_software': SaleSoftware,
            'sale_terminal_data': SaleTerminalData,
            'shift_number': str,
            'token_requested_type': TokenRequestedType,
            'training_mode_flag': bool
        }

        self.attribute_map = {
            'customer_order_req': 'CustomerOrderReq',
            'date_time': 'DateTime',
            'operator_id': 'OperatorID',
            'operator_language': 'OperatorLanguage',
            'poi_serial_number': 'POISerialNumber',
            'sale_software': 'SaleSoftware',
            'sale_terminal_data': 'SaleTerminalData',
            'shift_number': 'ShiftNumber',
            'token_requested_type': 'TokenRequestedType',
            'training_mode_flag': 'TrainingModeFlag'
        }

        self._customer_order_req = customer_order_req
        self._date_time = date_time
        self._operator_id = operator_id
        self._operator_language = operator_language
        self._poi_serial_number = poi_serial_number
        self._sale_software = sale_software
        self._sale_terminal_data = sale_terminal_data
        self._shift_number = shift_number
        self._token_requested_type = token_requested_type
        self._training_mode_flag = training_mode_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoginRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoginRequest of this LoginRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_order_req(self):
        """Gets the customer_order_req of this LoginRequest.


        :return: The customer_order_req of this LoginRequest.
        :rtype: List[str]
        """
        return self._customer_order_req

    @customer_order_req.setter
    def customer_order_req(self, customer_order_req):
        """Sets the customer_order_req of this LoginRequest.


        :param customer_order_req: The customer_order_req of this LoginRequest.
        :type customer_order_req: List[str]
        """
        allowed_values = ["Both", "Closed", "Open"]  # noqa: E501
        if not set(customer_order_req).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `customer_order_req` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(customer_order_req) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._customer_order_req = customer_order_req

    @property
    def date_time(self):
        """Gets the date_time of this LoginRequest.

        Date and Time.

        :return: The date_time of this LoginRequest.
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this LoginRequest.

        Date and Time.

        :param date_time: The date_time of this LoginRequest.
        :type date_time: datetime
        """
        if date_time is None:
            raise ValueError("Invalid value for `date_time`, must not be `None`")

        self._date_time = date_time

    @property
    def operator_id(self):
        """Gets the operator_id of this LoginRequest.

        4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation.

        :return: The operator_id of this LoginRequest.
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this LoginRequest.

        4 conditions to send it: a) the Sale System wants the POI log it in the transaction log b) because of reconciliation.

        :param operator_id: The operator_id of this LoginRequest.
        :type operator_id: str
        """
        if operator_id is not None and not re.search(r'^.+$', operator_id):
            raise ValueError("Invalid value for `operator_id`, must be a follow pattern or equal to `/^.+$/`")

        self._operator_id = operator_id

    @property
    def operator_language(self):
        """Gets the operator_language of this LoginRequest.

        Default value for Device type displays.

        :return: The operator_language of this LoginRequest.
        :rtype: str
        """
        return self._operator_language

    @operator_language.setter
    def operator_language(self, operator_language):
        """Sets the operator_language of this LoginRequest.

        Default value for Device type displays.

        :param operator_language: The operator_language of this LoginRequest.
        :type operator_language: str
        """
        if operator_language is None:
            raise ValueError("Invalid value for `operator_language`, must not be `None`")
        if operator_language is not None and not re.search(r'^[a-z]{2,2}$', operator_language):
            raise ValueError("Invalid value for `operator_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._operator_language = operator_language

    @property
    def poi_serial_number(self):
        """Gets the poi_serial_number of this LoginRequest.

        If the login involve a POI Terminal and not the first Login to the POI System.

        :return: The poi_serial_number of this LoginRequest.
        :rtype: str
        """
        return self._poi_serial_number

    @poi_serial_number.setter
    def poi_serial_number(self, poi_serial_number):
        """Sets the poi_serial_number of this LoginRequest.

        If the login involve a POI Terminal and not the first Login to the POI System.

        :param poi_serial_number: The poi_serial_number of this LoginRequest.
        :type poi_serial_number: str
        """
        if poi_serial_number is not None and not re.search(r'^.+$', poi_serial_number):
            raise ValueError("Invalid value for `poi_serial_number`, must be a follow pattern or equal to `/^.+$/`")

        self._poi_serial_number = poi_serial_number

    @property
    def sale_software(self):
        """Gets the sale_software of this LoginRequest.


        :return: The sale_software of this LoginRequest.
        :rtype: SaleSoftware
        """
        return self._sale_software

    @sale_software.setter
    def sale_software(self, sale_software):
        """Sets the sale_software of this LoginRequest.


        :param sale_software: The sale_software of this LoginRequest.
        :type sale_software: SaleSoftware
        """
        if sale_software is None:
            raise ValueError("Invalid value for `sale_software`, must not be `None`")

        self._sale_software = sale_software

    @property
    def sale_terminal_data(self):
        """Gets the sale_terminal_data of this LoginRequest.


        :return: The sale_terminal_data of this LoginRequest.
        :rtype: SaleTerminalData
        """
        return self._sale_terminal_data

    @sale_terminal_data.setter
    def sale_terminal_data(self, sale_terminal_data):
        """Sets the sale_terminal_data of this LoginRequest.


        :param sale_terminal_data: The sale_terminal_data of this LoginRequest.
        :type sale_terminal_data: SaleTerminalData
        """

        self._sale_terminal_data = sale_terminal_data

    @property
    def shift_number(self):
        """Gets the shift_number of this LoginRequest.

        Same as OperatorID.

        :return: The shift_number of this LoginRequest.
        :rtype: str
        """
        return self._shift_number

    @shift_number.setter
    def shift_number(self, shift_number):
        """Sets the shift_number of this LoginRequest.

        Same as OperatorID.

        :param shift_number: The shift_number of this LoginRequest.
        :type shift_number: str
        """
        if shift_number is not None and not re.search(r'^.+$', shift_number):
            raise ValueError("Invalid value for `shift_number`, must be a follow pattern or equal to `/^.+$/`")

        self._shift_number = shift_number

    @property
    def token_requested_type(self):
        """Gets the token_requested_type of this LoginRequest.


        :return: The token_requested_type of this LoginRequest.
        :rtype: TokenRequestedType
        """
        return self._token_requested_type

    @token_requested_type.setter
    def token_requested_type(self, token_requested_type):
        """Sets the token_requested_type of this LoginRequest.


        :param token_requested_type: The token_requested_type of this LoginRequest.
        :type token_requested_type: TokenRequestedType
        """

        self._token_requested_type = token_requested_type

    @property
    def training_mode_flag(self):
        """Gets the training_mode_flag of this LoginRequest.

        The POI does not realise the transaction with the Acquirer.

        :return: The training_mode_flag of this LoginRequest.
        :rtype: bool
        """
        return self._training_mode_flag

    @training_mode_flag.setter
    def training_mode_flag(self, training_mode_flag):
        """Sets the training_mode_flag of this LoginRequest.

        The POI does not realise the transaction with the Acquirer.

        :param training_mode_flag: The training_mode_flag of this LoginRequest.
        :type training_mode_flag: bool
        """

        self._training_mode_flag = training_mode_flag
