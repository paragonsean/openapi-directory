# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sale_item_rebate import SaleItemRebate
import re
from openapi_server import util


class Rebates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rebate_label: str=None, sale_item_rebate: List[SaleItemRebate]=None, total_rebate: float=None):
        """Rebates - a model defined in OpenAPI

        :param rebate_label: The rebate_label of this Rebates.
        :param sale_item_rebate: The sale_item_rebate of this Rebates.
        :param total_rebate: The total_rebate of this Rebates.
        """
        self.openapi_types = {
            'rebate_label': str,
            'sale_item_rebate': List[SaleItemRebate],
            'total_rebate': float
        }

        self.attribute_map = {
            'rebate_label': 'RebateLabel',
            'sale_item_rebate': 'SaleItemRebate',
            'total_rebate': 'TotalRebate'
        }

        self._rebate_label = rebate_label
        self._sale_item_rebate = sale_item_rebate
        self._total_rebate = total_rebate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rebates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rebates of this Rebates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rebate_label(self):
        """Gets the rebate_label of this Rebates.


        :return: The rebate_label of this Rebates.
        :rtype: str
        """
        return self._rebate_label

    @rebate_label.setter
    def rebate_label(self, rebate_label):
        """Sets the rebate_label of this Rebates.


        :param rebate_label: The rebate_label of this Rebates.
        :type rebate_label: str
        """
        if rebate_label is not None and not re.search(r'^.+$', rebate_label):
            raise ValueError("Invalid value for `rebate_label`, must be a follow pattern or equal to `/^.+$/`")

        self._rebate_label = rebate_label

    @property
    def sale_item_rebate(self):
        """Gets the sale_item_rebate of this Rebates.


        :return: The sale_item_rebate of this Rebates.
        :rtype: List[SaleItemRebate]
        """
        return self._sale_item_rebate

    @sale_item_rebate.setter
    def sale_item_rebate(self, sale_item_rebate):
        """Sets the sale_item_rebate of this Rebates.


        :param sale_item_rebate: The sale_item_rebate of this Rebates.
        :type sale_item_rebate: List[SaleItemRebate]
        """

        self._sale_item_rebate = sale_item_rebate

    @property
    def total_rebate(self):
        """Gets the total_rebate of this Rebates.


        :return: The total_rebate of this Rebates.
        :rtype: float
        """
        return self._total_rebate

    @total_rebate.setter
    def total_rebate(self, total_rebate):
        """Sets the total_rebate of this Rebates.


        :param total_rebate: The total_rebate of this Rebates.
        :type total_rebate: float
        """
        if total_rebate is not None and total_rebate > 99999999.999999:
            raise ValueError("Invalid value for `total_rebate`, must be a value less than or equal to `99999999.999999`")
        if total_rebate is not None and total_rebate < 0:
            raise ValueError("Invalid value for `total_rebate`, must be a value greater than or equal to `0`")

        self._total_rebate = total_rebate
