# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.info_qualify import InfoQualify
from openapi_server.models.input_command import InputCommand
import re
from openapi_server import util


class InputData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beep_key_flag: bool=False, default_input_string: str=None, default_layout_string: str=None, device: Device=None, disable_cancel_flag: bool=False, disable_correct_flag: bool=False, disable_valid_flag: bool=False, from_right_to_left_flag: bool=False, global_correction_flag: bool=False, immediate_response_flag: bool=False, info_qualify: InfoQualify=None, input_command: InputCommand=None, mask_characters_flag: bool=False, max_decimal_length: int=None, max_input_time: int=None, max_length: int=None, menu_back_flag: bool=False, min_length: int=None, notify_card_input_flag: bool=False, string_mask: str=None, wait_user_validation_flag: bool=True):
        """InputData - a model defined in OpenAPI

        :param beep_key_flag: The beep_key_flag of this InputData.
        :param default_input_string: The default_input_string of this InputData.
        :param default_layout_string: The default_layout_string of this InputData.
        :param device: The device of this InputData.
        :param disable_cancel_flag: The disable_cancel_flag of this InputData.
        :param disable_correct_flag: The disable_correct_flag of this InputData.
        :param disable_valid_flag: The disable_valid_flag of this InputData.
        :param from_right_to_left_flag: The from_right_to_left_flag of this InputData.
        :param global_correction_flag: The global_correction_flag of this InputData.
        :param immediate_response_flag: The immediate_response_flag of this InputData.
        :param info_qualify: The info_qualify of this InputData.
        :param input_command: The input_command of this InputData.
        :param mask_characters_flag: The mask_characters_flag of this InputData.
        :param max_decimal_length: The max_decimal_length of this InputData.
        :param max_input_time: The max_input_time of this InputData.
        :param max_length: The max_length of this InputData.
        :param menu_back_flag: The menu_back_flag of this InputData.
        :param min_length: The min_length of this InputData.
        :param notify_card_input_flag: The notify_card_input_flag of this InputData.
        :param string_mask: The string_mask of this InputData.
        :param wait_user_validation_flag: The wait_user_validation_flag of this InputData.
        """
        self.openapi_types = {
            'beep_key_flag': bool,
            'default_input_string': str,
            'default_layout_string': str,
            'device': Device,
            'disable_cancel_flag': bool,
            'disable_correct_flag': bool,
            'disable_valid_flag': bool,
            'from_right_to_left_flag': bool,
            'global_correction_flag': bool,
            'immediate_response_flag': bool,
            'info_qualify': InfoQualify,
            'input_command': InputCommand,
            'mask_characters_flag': bool,
            'max_decimal_length': int,
            'max_input_time': int,
            'max_length': int,
            'menu_back_flag': bool,
            'min_length': int,
            'notify_card_input_flag': bool,
            'string_mask': str,
            'wait_user_validation_flag': bool
        }

        self.attribute_map = {
            'beep_key_flag': 'BeepKeyFlag',
            'default_input_string': 'DefaultInputString',
            'default_layout_string': 'DefaultLayoutString',
            'device': 'Device',
            'disable_cancel_flag': 'DisableCancelFlag',
            'disable_correct_flag': 'DisableCorrectFlag',
            'disable_valid_flag': 'DisableValidFlag',
            'from_right_to_left_flag': 'FromRightToLeftFlag',
            'global_correction_flag': 'GlobalCorrectionFlag',
            'immediate_response_flag': 'ImmediateResponseFlag',
            'info_qualify': 'InfoQualify',
            'input_command': 'InputCommand',
            'mask_characters_flag': 'MaskCharactersFlag',
            'max_decimal_length': 'MaxDecimalLength',
            'max_input_time': 'MaxInputTime',
            'max_length': 'MaxLength',
            'menu_back_flag': 'MenuBackFlag',
            'min_length': 'MinLength',
            'notify_card_input_flag': 'NotifyCardInputFlag',
            'string_mask': 'StringMask',
            'wait_user_validation_flag': 'WaitUserValidationFlag'
        }

        self._beep_key_flag = beep_key_flag
        self._default_input_string = default_input_string
        self._default_layout_string = default_layout_string
        self._device = device
        self._disable_cancel_flag = disable_cancel_flag
        self._disable_correct_flag = disable_correct_flag
        self._disable_valid_flag = disable_valid_flag
        self._from_right_to_left_flag = from_right_to_left_flag
        self._global_correction_flag = global_correction_flag
        self._immediate_response_flag = immediate_response_flag
        self._info_qualify = info_qualify
        self._input_command = input_command
        self._mask_characters_flag = mask_characters_flag
        self._max_decimal_length = max_decimal_length
        self._max_input_time = max_input_time
        self._max_length = max_length
        self._menu_back_flag = menu_back_flag
        self._min_length = min_length
        self._notify_card_input_flag = notify_card_input_flag
        self._string_mask = string_mask
        self._wait_user_validation_flag = wait_user_validation_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputData of this InputData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beep_key_flag(self):
        """Gets the beep_key_flag of this InputData.


        :return: The beep_key_flag of this InputData.
        :rtype: bool
        """
        return self._beep_key_flag

    @beep_key_flag.setter
    def beep_key_flag(self, beep_key_flag):
        """Sets the beep_key_flag of this InputData.


        :param beep_key_flag: The beep_key_flag of this InputData.
        :type beep_key_flag: bool
        """

        self._beep_key_flag = beep_key_flag

    @property
    def default_input_string(self):
        """Gets the default_input_string of this InputData.


        :return: The default_input_string of this InputData.
        :rtype: str
        """
        return self._default_input_string

    @default_input_string.setter
    def default_input_string(self, default_input_string):
        """Sets the default_input_string of this InputData.


        :param default_input_string: The default_input_string of this InputData.
        :type default_input_string: str
        """
        if default_input_string is not None and not re.search(r'^.+$', default_input_string):
            raise ValueError("Invalid value for `default_input_string`, must be a follow pattern or equal to `/^.+$/`")

        self._default_input_string = default_input_string

    @property
    def default_layout_string(self):
        """Gets the default_layout_string of this InputData.


        :return: The default_layout_string of this InputData.
        :rtype: str
        """
        return self._default_layout_string

    @default_layout_string.setter
    def default_layout_string(self, default_layout_string):
        """Sets the default_layout_string of this InputData.


        :param default_layout_string: The default_layout_string of this InputData.
        :type default_layout_string: str
        """
        if default_layout_string is not None and not re.search(r'^.+$', default_layout_string):
            raise ValueError("Invalid value for `default_layout_string`, must be a follow pattern or equal to `/^.+$/`")

        self._default_layout_string = default_layout_string

    @property
    def device(self):
        """Gets the device of this InputData.


        :return: The device of this InputData.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InputData.


        :param device: The device of this InputData.
        :type device: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def disable_cancel_flag(self):
        """Gets the disable_cancel_flag of this InputData.


        :return: The disable_cancel_flag of this InputData.
        :rtype: bool
        """
        return self._disable_cancel_flag

    @disable_cancel_flag.setter
    def disable_cancel_flag(self, disable_cancel_flag):
        """Sets the disable_cancel_flag of this InputData.


        :param disable_cancel_flag: The disable_cancel_flag of this InputData.
        :type disable_cancel_flag: bool
        """

        self._disable_cancel_flag = disable_cancel_flag

    @property
    def disable_correct_flag(self):
        """Gets the disable_correct_flag of this InputData.


        :return: The disable_correct_flag of this InputData.
        :rtype: bool
        """
        return self._disable_correct_flag

    @disable_correct_flag.setter
    def disable_correct_flag(self, disable_correct_flag):
        """Sets the disable_correct_flag of this InputData.


        :param disable_correct_flag: The disable_correct_flag of this InputData.
        :type disable_correct_flag: bool
        """

        self._disable_correct_flag = disable_correct_flag

    @property
    def disable_valid_flag(self):
        """Gets the disable_valid_flag of this InputData.


        :return: The disable_valid_flag of this InputData.
        :rtype: bool
        """
        return self._disable_valid_flag

    @disable_valid_flag.setter
    def disable_valid_flag(self, disable_valid_flag):
        """Sets the disable_valid_flag of this InputData.


        :param disable_valid_flag: The disable_valid_flag of this InputData.
        :type disable_valid_flag: bool
        """

        self._disable_valid_flag = disable_valid_flag

    @property
    def from_right_to_left_flag(self):
        """Gets the from_right_to_left_flag of this InputData.


        :return: The from_right_to_left_flag of this InputData.
        :rtype: bool
        """
        return self._from_right_to_left_flag

    @from_right_to_left_flag.setter
    def from_right_to_left_flag(self, from_right_to_left_flag):
        """Sets the from_right_to_left_flag of this InputData.


        :param from_right_to_left_flag: The from_right_to_left_flag of this InputData.
        :type from_right_to_left_flag: bool
        """

        self._from_right_to_left_flag = from_right_to_left_flag

    @property
    def global_correction_flag(self):
        """Gets the global_correction_flag of this InputData.


        :return: The global_correction_flag of this InputData.
        :rtype: bool
        """
        return self._global_correction_flag

    @global_correction_flag.setter
    def global_correction_flag(self, global_correction_flag):
        """Sets the global_correction_flag of this InputData.


        :param global_correction_flag: The global_correction_flag of this InputData.
        :type global_correction_flag: bool
        """

        self._global_correction_flag = global_correction_flag

    @property
    def immediate_response_flag(self):
        """Gets the immediate_response_flag of this InputData.


        :return: The immediate_response_flag of this InputData.
        :rtype: bool
        """
        return self._immediate_response_flag

    @immediate_response_flag.setter
    def immediate_response_flag(self, immediate_response_flag):
        """Sets the immediate_response_flag of this InputData.


        :param immediate_response_flag: The immediate_response_flag of this InputData.
        :type immediate_response_flag: bool
        """

        self._immediate_response_flag = immediate_response_flag

    @property
    def info_qualify(self):
        """Gets the info_qualify of this InputData.


        :return: The info_qualify of this InputData.
        :rtype: InfoQualify
        """
        return self._info_qualify

    @info_qualify.setter
    def info_qualify(self, info_qualify):
        """Sets the info_qualify of this InputData.


        :param info_qualify: The info_qualify of this InputData.
        :type info_qualify: InfoQualify
        """
        if info_qualify is None:
            raise ValueError("Invalid value for `info_qualify`, must not be `None`")

        self._info_qualify = info_qualify

    @property
    def input_command(self):
        """Gets the input_command of this InputData.


        :return: The input_command of this InputData.
        :rtype: InputCommand
        """
        return self._input_command

    @input_command.setter
    def input_command(self, input_command):
        """Sets the input_command of this InputData.


        :param input_command: The input_command of this InputData.
        :type input_command: InputCommand
        """
        if input_command is None:
            raise ValueError("Invalid value for `input_command`, must not be `None`")

        self._input_command = input_command

    @property
    def mask_characters_flag(self):
        """Gets the mask_characters_flag of this InputData.


        :return: The mask_characters_flag of this InputData.
        :rtype: bool
        """
        return self._mask_characters_flag

    @mask_characters_flag.setter
    def mask_characters_flag(self, mask_characters_flag):
        """Sets the mask_characters_flag of this InputData.


        :param mask_characters_flag: The mask_characters_flag of this InputData.
        :type mask_characters_flag: bool
        """

        self._mask_characters_flag = mask_characters_flag

    @property
    def max_decimal_length(self):
        """Gets the max_decimal_length of this InputData.


        :return: The max_decimal_length of this InputData.
        :rtype: int
        """
        return self._max_decimal_length

    @max_decimal_length.setter
    def max_decimal_length(self, max_decimal_length):
        """Sets the max_decimal_length of this InputData.


        :param max_decimal_length: The max_decimal_length of this InputData.
        :type max_decimal_length: int
        """

        self._max_decimal_length = max_decimal_length

    @property
    def max_input_time(self):
        """Gets the max_input_time of this InputData.


        :return: The max_input_time of this InputData.
        :rtype: int
        """
        return self._max_input_time

    @max_input_time.setter
    def max_input_time(self, max_input_time):
        """Sets the max_input_time of this InputData.


        :param max_input_time: The max_input_time of this InputData.
        :type max_input_time: int
        """

        self._max_input_time = max_input_time

    @property
    def max_length(self):
        """Gets the max_length of this InputData.


        :return: The max_length of this InputData.
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this InputData.


        :param max_length: The max_length of this InputData.
        :type max_length: int
        """

        self._max_length = max_length

    @property
    def menu_back_flag(self):
        """Gets the menu_back_flag of this InputData.


        :return: The menu_back_flag of this InputData.
        :rtype: bool
        """
        return self._menu_back_flag

    @menu_back_flag.setter
    def menu_back_flag(self, menu_back_flag):
        """Sets the menu_back_flag of this InputData.


        :param menu_back_flag: The menu_back_flag of this InputData.
        :type menu_back_flag: bool
        """

        self._menu_back_flag = menu_back_flag

    @property
    def min_length(self):
        """Gets the min_length of this InputData.


        :return: The min_length of this InputData.
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this InputData.


        :param min_length: The min_length of this InputData.
        :type min_length: int
        """

        self._min_length = min_length

    @property
    def notify_card_input_flag(self):
        """Gets the notify_card_input_flag of this InputData.


        :return: The notify_card_input_flag of this InputData.
        :rtype: bool
        """
        return self._notify_card_input_flag

    @notify_card_input_flag.setter
    def notify_card_input_flag(self, notify_card_input_flag):
        """Sets the notify_card_input_flag of this InputData.


        :param notify_card_input_flag: The notify_card_input_flag of this InputData.
        :type notify_card_input_flag: bool
        """

        self._notify_card_input_flag = notify_card_input_flag

    @property
    def string_mask(self):
        """Gets the string_mask of this InputData.


        :return: The string_mask of this InputData.
        :rtype: str
        """
        return self._string_mask

    @string_mask.setter
    def string_mask(self, string_mask):
        """Sets the string_mask of this InputData.


        :param string_mask: The string_mask of this InputData.
        :type string_mask: str
        """
        if string_mask is not None and not re.search(r'^.+$', string_mask):
            raise ValueError("Invalid value for `string_mask`, must be a follow pattern or equal to `/^.+$/`")

        self._string_mask = string_mask

    @property
    def wait_user_validation_flag(self):
        """Gets the wait_user_validation_flag of this InputData.


        :return: The wait_user_validation_flag of this InputData.
        :rtype: bool
        """
        return self._wait_user_validation_flag

    @wait_user_validation_flag.setter
    def wait_user_validation_flag(self, wait_user_validation_flag):
        """Sets the wait_user_validation_flag of this InputData.


        :param wait_user_validation_flag: The wait_user_validation_flag of this InputData.
        :type wait_user_validation_flag: bool
        """

        self._wait_user_validation_flag = wait_user_validation_flag
