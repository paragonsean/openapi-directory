# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_id_type import TransactionIDType
import re
from openapi_server import util


class PaymentAcquirerData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: int=None, acquirer_poiid: str=None, acquirer_transaction_id: TransactionIDType=None, approval_code: str=None, host_reconciliation_id: str=None, merchant_id: str=None):
        """PaymentAcquirerData - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this PaymentAcquirerData.
        :param acquirer_poiid: The acquirer_poiid of this PaymentAcquirerData.
        :param acquirer_transaction_id: The acquirer_transaction_id of this PaymentAcquirerData.
        :param approval_code: The approval_code of this PaymentAcquirerData.
        :param host_reconciliation_id: The host_reconciliation_id of this PaymentAcquirerData.
        :param merchant_id: The merchant_id of this PaymentAcquirerData.
        """
        self.openapi_types = {
            'acquirer_id': int,
            'acquirer_poiid': str,
            'acquirer_transaction_id': TransactionIDType,
            'approval_code': str,
            'host_reconciliation_id': str,
            'merchant_id': str
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'acquirer_poiid': 'AcquirerPOIID',
            'acquirer_transaction_id': 'AcquirerTransactionID',
            'approval_code': 'ApprovalCode',
            'host_reconciliation_id': 'HostReconciliationID',
            'merchant_id': 'MerchantID'
        }

        self._acquirer_id = acquirer_id
        self._acquirer_poiid = acquirer_poiid
        self._acquirer_transaction_id = acquirer_transaction_id
        self._approval_code = approval_code
        self._host_reconciliation_id = host_reconciliation_id
        self._merchant_id = merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentAcquirerData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentAcquirerData of this PaymentAcquirerData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this PaymentAcquirerData.

        If several Acquirers.

        :return: The acquirer_id of this PaymentAcquirerData.
        :rtype: int
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this PaymentAcquirerData.

        If several Acquirers.

        :param acquirer_id: The acquirer_id of this PaymentAcquirerData.
        :type acquirer_id: int
        """

        self._acquirer_id = acquirer_id

    @property
    def acquirer_poiid(self):
        """Gets the acquirer_poiid of this PaymentAcquirerData.

        Identification of the POI for the payment Acquirer.

        :return: The acquirer_poiid of this PaymentAcquirerData.
        :rtype: str
        """
        return self._acquirer_poiid

    @acquirer_poiid.setter
    def acquirer_poiid(self, acquirer_poiid):
        """Sets the acquirer_poiid of this PaymentAcquirerData.

        Identification of the POI for the payment Acquirer.

        :param acquirer_poiid: The acquirer_poiid of this PaymentAcquirerData.
        :type acquirer_poiid: str
        """
        if acquirer_poiid is None:
            raise ValueError("Invalid value for `acquirer_poiid`, must not be `None`")
        if acquirer_poiid is not None and not re.search(r'^.+$', acquirer_poiid):
            raise ValueError("Invalid value for `acquirer_poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._acquirer_poiid = acquirer_poiid

    @property
    def acquirer_transaction_id(self):
        """Gets the acquirer_transaction_id of this PaymentAcquirerData.


        :return: The acquirer_transaction_id of this PaymentAcquirerData.
        :rtype: TransactionIDType
        """
        return self._acquirer_transaction_id

    @acquirer_transaction_id.setter
    def acquirer_transaction_id(self, acquirer_transaction_id):
        """Sets the acquirer_transaction_id of this PaymentAcquirerData.


        :param acquirer_transaction_id: The acquirer_transaction_id of this PaymentAcquirerData.
        :type acquirer_transaction_id: TransactionIDType
        """

        self._acquirer_transaction_id = acquirer_transaction_id

    @property
    def approval_code(self):
        """Gets the approval_code of this PaymentAcquirerData.

        If available.

        :return: The approval_code of this PaymentAcquirerData.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """Sets the approval_code of this PaymentAcquirerData.

        If available.

        :param approval_code: The approval_code of this PaymentAcquirerData.
        :type approval_code: str
        """
        if approval_code is not None and not re.search(r'^.+$', approval_code):
            raise ValueError("Invalid value for `approval_code`, must be a follow pattern or equal to `/^.+$/`")

        self._approval_code = approval_code

    @property
    def host_reconciliation_id(self):
        """Gets the host_reconciliation_id of this PaymentAcquirerData.


        :return: The host_reconciliation_id of this PaymentAcquirerData.
        :rtype: str
        """
        return self._host_reconciliation_id

    @host_reconciliation_id.setter
    def host_reconciliation_id(self, host_reconciliation_id):
        """Sets the host_reconciliation_id of this PaymentAcquirerData.


        :param host_reconciliation_id: The host_reconciliation_id of this PaymentAcquirerData.
        :type host_reconciliation_id: str
        """
        if host_reconciliation_id is not None and not re.search(r'^.+$', host_reconciliation_id):
            raise ValueError("Invalid value for `host_reconciliation_id`, must be a follow pattern or equal to `/^.+$/`")

        self._host_reconciliation_id = host_reconciliation_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PaymentAcquirerData.

        Identification of the Merchant for the Acquirer.

        :return: The merchant_id of this PaymentAcquirerData.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PaymentAcquirerData.

        Identification of the Merchant for the Acquirer.

        :param merchant_id: The merchant_id of this PaymentAcquirerData.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")
        if merchant_id is not None and not re.search(r'^.+$', merchant_id):
            raise ValueError("Invalid value for `merchant_id`, must be a follow pattern or equal to `/^.+$/`")

        self._merchant_id = merchant_id
