# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_order import CustomerOrder
from openapi_server.models.original_poi_transaction import OriginalPOITransaction
from openapi_server.models.reversal_reason import ReversalReason
from openapi_server.models.sale_data import SaleData
from openapi_server import util


class ReversalRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_order: CustomerOrder=None, original_poi_transaction: OriginalPOITransaction=None, reversal_reason: ReversalReason=None, reversed_amount: float=None, sale_data: SaleData=None):
        """ReversalRequest - a model defined in OpenAPI

        :param customer_order: The customer_order of this ReversalRequest.
        :param original_poi_transaction: The original_poi_transaction of this ReversalRequest.
        :param reversal_reason: The reversal_reason of this ReversalRequest.
        :param reversed_amount: The reversed_amount of this ReversalRequest.
        :param sale_data: The sale_data of this ReversalRequest.
        """
        self.openapi_types = {
            'customer_order': CustomerOrder,
            'original_poi_transaction': OriginalPOITransaction,
            'reversal_reason': ReversalReason,
            'reversed_amount': float,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'customer_order': 'CustomerOrder',
            'original_poi_transaction': 'OriginalPOITransaction',
            'reversal_reason': 'ReversalReason',
            'reversed_amount': 'ReversedAmount',
            'sale_data': 'SaleData'
        }

        self._customer_order = customer_order
        self._original_poi_transaction = original_poi_transaction
        self._reversal_reason = reversal_reason
        self._reversed_amount = reversed_amount
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReversalRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReversalRequest of this ReversalRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_order(self):
        """Gets the customer_order of this ReversalRequest.


        :return: The customer_order of this ReversalRequest.
        :rtype: CustomerOrder
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this ReversalRequest.


        :param customer_order: The customer_order of this ReversalRequest.
        :type customer_order: CustomerOrder
        """

        self._customer_order = customer_order

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this ReversalRequest.


        :return: The original_poi_transaction of this ReversalRequest.
        :rtype: OriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this ReversalRequest.


        :param original_poi_transaction: The original_poi_transaction of this ReversalRequest.
        :type original_poi_transaction: OriginalPOITransaction
        """
        if original_poi_transaction is None:
            raise ValueError("Invalid value for `original_poi_transaction`, must not be `None`")

        self._original_poi_transaction = original_poi_transaction

    @property
    def reversal_reason(self):
        """Gets the reversal_reason of this ReversalRequest.


        :return: The reversal_reason of this ReversalRequest.
        :rtype: ReversalReason
        """
        return self._reversal_reason

    @reversal_reason.setter
    def reversal_reason(self, reversal_reason):
        """Sets the reversal_reason of this ReversalRequest.


        :param reversal_reason: The reversal_reason of this ReversalRequest.
        :type reversal_reason: ReversalReason
        """
        if reversal_reason is None:
            raise ValueError("Invalid value for `reversal_reason`, must not be `None`")

        self._reversal_reason = reversal_reason

    @property
    def reversed_amount(self):
        """Gets the reversed_amount of this ReversalRequest.

        ReversedAmount is implicitely the AuthorizedAmount if absent.

        :return: The reversed_amount of this ReversalRequest.
        :rtype: float
        """
        return self._reversed_amount

    @reversed_amount.setter
    def reversed_amount(self, reversed_amount):
        """Sets the reversed_amount of this ReversalRequest.

        ReversedAmount is implicitely the AuthorizedAmount if absent.

        :param reversed_amount: The reversed_amount of this ReversalRequest.
        :type reversed_amount: float
        """
        if reversed_amount is not None and reversed_amount > 99999999.999999:
            raise ValueError("Invalid value for `reversed_amount`, must be a value less than or equal to `99999999.999999`")
        if reversed_amount is not None and reversed_amount < 0:
            raise ValueError("Invalid value for `reversed_amount`, must be a value greater than or equal to `0`")

        self._reversed_amount = reversed_amount

    @property
    def sale_data(self):
        """Gets the sale_data of this ReversalRequest.


        :return: The sale_data of this ReversalRequest.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this ReversalRequest.


        :param sale_data: The sale_data of this ReversalRequest.
        :type sale_data: SaleData
        """

        self._sale_data = sale_data
