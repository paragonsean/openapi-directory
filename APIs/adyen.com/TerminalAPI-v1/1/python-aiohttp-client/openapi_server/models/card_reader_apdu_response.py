# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.response import Response
import re
from openapi_server import util


class CardReaderAPDUResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apdu_data: str=None, card_status_words: str=None, response: Response=None):
        """CardReaderAPDUResponse - a model defined in OpenAPI

        :param apdu_data: The apdu_data of this CardReaderAPDUResponse.
        :param card_status_words: The card_status_words of this CardReaderAPDUResponse.
        :param response: The response of this CardReaderAPDUResponse.
        """
        self.openapi_types = {
            'apdu_data': str,
            'card_status_words': str,
            'response': Response
        }

        self.attribute_map = {
            'apdu_data': 'APDUData',
            'card_status_words': 'CardStatusWords',
            'response': 'Response'
        }

        self._apdu_data = apdu_data
        self._card_status_words = card_status_words
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardReaderAPDUResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardReaderAPDUResponse of this CardReaderAPDUResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apdu_data(self):
        """Gets the apdu_data of this CardReaderAPDUResponse.

        Data field of the APDU command (Lc + Data).

        :return: The apdu_data of this CardReaderAPDUResponse.
        :rtype: str
        """
        return self._apdu_data

    @apdu_data.setter
    def apdu_data(self, apdu_data):
        """Sets the apdu_data of this CardReaderAPDUResponse.

        Data field of the APDU command (Lc + Data).

        :param apdu_data: The apdu_data of this CardReaderAPDUResponse.
        :type apdu_data: str
        """
        if apdu_data is not None and not re.search(r'^.+$', apdu_data):
            raise ValueError("Invalid value for `apdu_data`, must be a follow pattern or equal to `/^.+$/`")

        self._apdu_data = apdu_data

    @property
    def card_status_words(self):
        """Gets the card_status_words of this CardReaderAPDUResponse.

        Status of a smartcard response to a command (SW1-SW2).

        :return: The card_status_words of this CardReaderAPDUResponse.
        :rtype: str
        """
        return self._card_status_words

    @card_status_words.setter
    def card_status_words(self, card_status_words):
        """Sets the card_status_words of this CardReaderAPDUResponse.

        Status of a smartcard response to a command (SW1-SW2).

        :param card_status_words: The card_status_words of this CardReaderAPDUResponse.
        :type card_status_words: str
        """
        if card_status_words is None:
            raise ValueError("Invalid value for `card_status_words`, must not be `None`")
        if card_status_words is not None and not re.search(r'^.{2,2}$', card_status_words):
            raise ValueError("Invalid value for `card_status_words`, must be a follow pattern or equal to `/^.{2,2}$/`")

        self._card_status_words = card_status_words

    @property
    def response(self):
        """Gets the response of this CardReaderAPDUResponse.


        :return: The response of this CardReaderAPDUResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this CardReaderAPDUResponse.


        :param response: The response of this CardReaderAPDUResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response
