# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class CardReaderAPDURequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apdu_class: str=None, apdu_data: str=None, apdu_expected_length: str=None, apdu_instruction: str=None, apdu_par1: str=None, apdu_par2: str=None):
        """CardReaderAPDURequest - a model defined in OpenAPI

        :param apdu_class: The apdu_class of this CardReaderAPDURequest.
        :param apdu_data: The apdu_data of this CardReaderAPDURequest.
        :param apdu_expected_length: The apdu_expected_length of this CardReaderAPDURequest.
        :param apdu_instruction: The apdu_instruction of this CardReaderAPDURequest.
        :param apdu_par1: The apdu_par1 of this CardReaderAPDURequest.
        :param apdu_par2: The apdu_par2 of this CardReaderAPDURequest.
        """
        self.openapi_types = {
            'apdu_class': str,
            'apdu_data': str,
            'apdu_expected_length': str,
            'apdu_instruction': str,
            'apdu_par1': str,
            'apdu_par2': str
        }

        self.attribute_map = {
            'apdu_class': 'APDUClass',
            'apdu_data': 'APDUData',
            'apdu_expected_length': 'APDUExpectedLength',
            'apdu_instruction': 'APDUInstruction',
            'apdu_par1': 'APDUPar1',
            'apdu_par2': 'APDUPar2'
        }

        self._apdu_class = apdu_class
        self._apdu_data = apdu_data
        self._apdu_expected_length = apdu_expected_length
        self._apdu_instruction = apdu_instruction
        self._apdu_par1 = apdu_par1
        self._apdu_par2 = apdu_par2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardReaderAPDURequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardReaderAPDURequest of this CardReaderAPDURequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apdu_class(self):
        """Gets the apdu_class of this CardReaderAPDURequest.

        Class field of the APDU command (CLA).

        :return: The apdu_class of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_class

    @apdu_class.setter
    def apdu_class(self, apdu_class):
        """Sets the apdu_class of this CardReaderAPDURequest.

        Class field of the APDU command (CLA).

        :param apdu_class: The apdu_class of this CardReaderAPDURequest.
        :type apdu_class: str
        """
        if apdu_class is None:
            raise ValueError("Invalid value for `apdu_class`, must not be `None`")
        if apdu_class is not None and not re.search(r'^.{1,1}$', apdu_class):
            raise ValueError("Invalid value for `apdu_class`, must be a follow pattern or equal to `/^.{1,1}$/`")

        self._apdu_class = apdu_class

    @property
    def apdu_data(self):
        """Gets the apdu_data of this CardReaderAPDURequest.

        Data field of the APDU command (Lc + Data).

        :return: The apdu_data of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_data

    @apdu_data.setter
    def apdu_data(self, apdu_data):
        """Sets the apdu_data of this CardReaderAPDURequest.

        Data field of the APDU command (Lc + Data).

        :param apdu_data: The apdu_data of this CardReaderAPDURequest.
        :type apdu_data: str
        """
        if apdu_data is not None and not re.search(r'^.+$', apdu_data):
            raise ValueError("Invalid value for `apdu_data`, must be a follow pattern or equal to `/^.+$/`")

        self._apdu_data = apdu_data

    @property
    def apdu_expected_length(self):
        """Gets the apdu_expected_length of this CardReaderAPDURequest.

        Expected length of the data field of the APDU response to the command (Le).

        :return: The apdu_expected_length of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_expected_length

    @apdu_expected_length.setter
    def apdu_expected_length(self, apdu_expected_length):
        """Sets the apdu_expected_length of this CardReaderAPDURequest.

        Expected length of the data field of the APDU response to the command (Le).

        :param apdu_expected_length: The apdu_expected_length of this CardReaderAPDURequest.
        :type apdu_expected_length: str
        """
        if apdu_expected_length is not None and not re.search(r'^.{1,1}$', apdu_expected_length):
            raise ValueError("Invalid value for `apdu_expected_length`, must be a follow pattern or equal to `/^.{1,1}$/`")

        self._apdu_expected_length = apdu_expected_length

    @property
    def apdu_instruction(self):
        """Gets the apdu_instruction of this CardReaderAPDURequest.

        Instruction field of the APDU command (INS).

        :return: The apdu_instruction of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_instruction

    @apdu_instruction.setter
    def apdu_instruction(self, apdu_instruction):
        """Sets the apdu_instruction of this CardReaderAPDURequest.

        Instruction field of the APDU command (INS).

        :param apdu_instruction: The apdu_instruction of this CardReaderAPDURequest.
        :type apdu_instruction: str
        """
        if apdu_instruction is None:
            raise ValueError("Invalid value for `apdu_instruction`, must not be `None`")
        if apdu_instruction is not None and not re.search(r'^.{1,1}$', apdu_instruction):
            raise ValueError("Invalid value for `apdu_instruction`, must be a follow pattern or equal to `/^.{1,1}$/`")

        self._apdu_instruction = apdu_instruction

    @property
    def apdu_par1(self):
        """Gets the apdu_par1 of this CardReaderAPDURequest.

        Parameter 1 field of the APDU command (P1).

        :return: The apdu_par1 of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_par1

    @apdu_par1.setter
    def apdu_par1(self, apdu_par1):
        """Sets the apdu_par1 of this CardReaderAPDURequest.

        Parameter 1 field of the APDU command (P1).

        :param apdu_par1: The apdu_par1 of this CardReaderAPDURequest.
        :type apdu_par1: str
        """
        if apdu_par1 is None:
            raise ValueError("Invalid value for `apdu_par1`, must not be `None`")
        if apdu_par1 is not None and not re.search(r'^.{1,1}$', apdu_par1):
            raise ValueError("Invalid value for `apdu_par1`, must be a follow pattern or equal to `/^.{1,1}$/`")

        self._apdu_par1 = apdu_par1

    @property
    def apdu_par2(self):
        """Gets the apdu_par2 of this CardReaderAPDURequest.

        Parameter 2 field of the APDU command(P2).

        :return: The apdu_par2 of this CardReaderAPDURequest.
        :rtype: str
        """
        return self._apdu_par2

    @apdu_par2.setter
    def apdu_par2(self, apdu_par2):
        """Sets the apdu_par2 of this CardReaderAPDURequest.

        Parameter 2 field of the APDU command(P2).

        :param apdu_par2: The apdu_par2 of this CardReaderAPDURequest.
        :type apdu_par2: str
        """
        if apdu_par2 is None:
            raise ValueError("Invalid value for `apdu_par2`, must not be `None`")
        if apdu_par2 is not None and not re.search(r'^.{1,1}$', apdu_par2):
            raise ValueError("Invalid value for `apdu_par2`, must be a follow pattern or equal to `/^.{1,1}$/`")

        self._apdu_par2 = apdu_par2
