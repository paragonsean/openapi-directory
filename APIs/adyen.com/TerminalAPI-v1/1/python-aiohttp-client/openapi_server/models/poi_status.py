# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cash_handling_device import CashHandlingDevice
from openapi_server.models.global_status import GlobalStatus
from openapi_server.models.printer_status import PrinterStatus
from openapi_server import util


class POIStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_reader_ok_flag: bool=None, cash_handling_device: List[CashHandlingDevice]=None, communication_ok_flag: bool=None, fraud_prevention_flag: bool=None, global_status: GlobalStatus=None, pedok_flag: bool=None, printer_status: PrinterStatus=None, security_ok_flag: bool=None):
        """POIStatus - a model defined in OpenAPI

        :param card_reader_ok_flag: The card_reader_ok_flag of this POIStatus.
        :param cash_handling_device: The cash_handling_device of this POIStatus.
        :param communication_ok_flag: The communication_ok_flag of this POIStatus.
        :param fraud_prevention_flag: The fraud_prevention_flag of this POIStatus.
        :param global_status: The global_status of this POIStatus.
        :param pedok_flag: The pedok_flag of this POIStatus.
        :param printer_status: The printer_status of this POIStatus.
        :param security_ok_flag: The security_ok_flag of this POIStatus.
        """
        self.openapi_types = {
            'card_reader_ok_flag': bool,
            'cash_handling_device': List[CashHandlingDevice],
            'communication_ok_flag': bool,
            'fraud_prevention_flag': bool,
            'global_status': GlobalStatus,
            'pedok_flag': bool,
            'printer_status': PrinterStatus,
            'security_ok_flag': bool
        }

        self.attribute_map = {
            'card_reader_ok_flag': 'CardReaderOKFlag',
            'cash_handling_device': 'CashHandlingDevice',
            'communication_ok_flag': 'CommunicationOKFlag',
            'fraud_prevention_flag': 'FraudPreventionFlag',
            'global_status': 'GlobalStatus',
            'pedok_flag': 'PEDOKFlag',
            'printer_status': 'PrinterStatus',
            'security_ok_flag': 'SecurityOKFlag'
        }

        self._card_reader_ok_flag = card_reader_ok_flag
        self._cash_handling_device = cash_handling_device
        self._communication_ok_flag = communication_ok_flag
        self._fraud_prevention_flag = fraud_prevention_flag
        self._global_status = global_status
        self._pedok_flag = pedok_flag
        self._printer_status = printer_status
        self._security_ok_flag = security_ok_flag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'POIStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The POIStatus of this POIStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_reader_ok_flag(self):
        """Gets the card_reader_ok_flag of this POIStatus.

        If card reader device present.

        :return: The card_reader_ok_flag of this POIStatus.
        :rtype: bool
        """
        return self._card_reader_ok_flag

    @card_reader_ok_flag.setter
    def card_reader_ok_flag(self, card_reader_ok_flag):
        """Sets the card_reader_ok_flag of this POIStatus.

        If card reader device present.

        :param card_reader_ok_flag: The card_reader_ok_flag of this POIStatus.
        :type card_reader_ok_flag: bool
        """

        self._card_reader_ok_flag = card_reader_ok_flag

    @property
    def cash_handling_device(self):
        """Gets the cash_handling_device of this POIStatus.


        :return: The cash_handling_device of this POIStatus.
        :rtype: List[CashHandlingDevice]
        """
        return self._cash_handling_device

    @cash_handling_device.setter
    def cash_handling_device(self, cash_handling_device):
        """Sets the cash_handling_device of this POIStatus.


        :param cash_handling_device: The cash_handling_device of this POIStatus.
        :type cash_handling_device: List[CashHandlingDevice]
        """

        self._cash_handling_device = cash_handling_device

    @property
    def communication_ok_flag(self):
        """Gets the communication_ok_flag of this POIStatus.

        If communication infrastructure present.

        :return: The communication_ok_flag of this POIStatus.
        :rtype: bool
        """
        return self._communication_ok_flag

    @communication_ok_flag.setter
    def communication_ok_flag(self, communication_ok_flag):
        """Sets the communication_ok_flag of this POIStatus.

        If communication infrastructure present.

        :param communication_ok_flag: The communication_ok_flag of this POIStatus.
        :type communication_ok_flag: bool
        """

        self._communication_ok_flag = communication_ok_flag

    @property
    def fraud_prevention_flag(self):
        """Gets the fraud_prevention_flag of this POIStatus.

        default False.

        :return: The fraud_prevention_flag of this POIStatus.
        :rtype: bool
        """
        return self._fraud_prevention_flag

    @fraud_prevention_flag.setter
    def fraud_prevention_flag(self, fraud_prevention_flag):
        """Sets the fraud_prevention_flag of this POIStatus.

        default False.

        :param fraud_prevention_flag: The fraud_prevention_flag of this POIStatus.
        :type fraud_prevention_flag: bool
        """

        self._fraud_prevention_flag = fraud_prevention_flag

    @property
    def global_status(self):
        """Gets the global_status of this POIStatus.


        :return: The global_status of this POIStatus.
        :rtype: GlobalStatus
        """
        return self._global_status

    @global_status.setter
    def global_status(self, global_status):
        """Sets the global_status of this POIStatus.


        :param global_status: The global_status of this POIStatus.
        :type global_status: GlobalStatus
        """
        if global_status is None:
            raise ValueError("Invalid value for `global_status`, must not be `None`")

        self._global_status = global_status

    @property
    def pedok_flag(self):
        """Gets the pedok_flag of this POIStatus.

        If PED present.

        :return: The pedok_flag of this POIStatus.
        :rtype: bool
        """
        return self._pedok_flag

    @pedok_flag.setter
    def pedok_flag(self, pedok_flag):
        """Sets the pedok_flag of this POIStatus.

        If PED present.

        :param pedok_flag: The pedok_flag of this POIStatus.
        :type pedok_flag: bool
        """

        self._pedok_flag = pedok_flag

    @property
    def printer_status(self):
        """Gets the printer_status of this POIStatus.


        :return: The printer_status of this POIStatus.
        :rtype: PrinterStatus
        """
        return self._printer_status

    @printer_status.setter
    def printer_status(self, printer_status):
        """Sets the printer_status of this POIStatus.


        :param printer_status: The printer_status of this POIStatus.
        :type printer_status: PrinterStatus
        """

        self._printer_status = printer_status

    @property
    def security_ok_flag(self):
        """Gets the security_ok_flag of this POIStatus.

        If security module present.

        :return: The security_ok_flag of this POIStatus.
        :rtype: bool
        """
        return self._security_ok_flag

    @security_ok_flag.setter
    def security_ok_flag(self, security_ok_flag):
        """Sets the security_ok_flag of this POIStatus.

        If security module present.

        :param security_ok_flag: The security_ok_flag of this POIStatus.
        :type security_ok_flag: bool
        """

        self._security_ok_flag = security_ok_flag
