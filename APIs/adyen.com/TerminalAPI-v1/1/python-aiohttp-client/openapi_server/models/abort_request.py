# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_output import DisplayOutput
from openapi_server.models.message_reference import MessageReference
import re
from openapi_server import util


class AbortRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abort_reason: str=None, display_output: DisplayOutput=None, message_reference: MessageReference=None):
        """AbortRequest - a model defined in OpenAPI

        :param abort_reason: The abort_reason of this AbortRequest.
        :param display_output: The display_output of this AbortRequest.
        :param message_reference: The message_reference of this AbortRequest.
        """
        self.openapi_types = {
            'abort_reason': str,
            'display_output': DisplayOutput,
            'message_reference': MessageReference
        }

        self.attribute_map = {
            'abort_reason': 'AbortReason',
            'display_output': 'DisplayOutput',
            'message_reference': 'MessageReference'
        }

        self._abort_reason = abort_reason
        self._display_output = display_output
        self._message_reference = message_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AbortRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AbortRequest of this AbortRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abort_reason(self):
        """Gets the abort_reason of this AbortRequest.

        Reason of aborting a transaction.

        :return: The abort_reason of this AbortRequest.
        :rtype: str
        """
        return self._abort_reason

    @abort_reason.setter
    def abort_reason(self, abort_reason):
        """Sets the abort_reason of this AbortRequest.

        Reason of aborting a transaction.

        :param abort_reason: The abort_reason of this AbortRequest.
        :type abort_reason: str
        """
        if abort_reason is None:
            raise ValueError("Invalid value for `abort_reason`, must not be `None`")
        if abort_reason is not None and not re.search(r'^.+$', abort_reason):
            raise ValueError("Invalid value for `abort_reason`, must be a follow pattern or equal to `/^.+$/`")

        self._abort_reason = abort_reason

    @property
    def display_output(self):
        """Gets the display_output of this AbortRequest.


        :return: The display_output of this AbortRequest.
        :rtype: DisplayOutput
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this AbortRequest.


        :param display_output: The display_output of this AbortRequest.
        :type display_output: DisplayOutput
        """

        self._display_output = display_output

    @property
    def message_reference(self):
        """Gets the message_reference of this AbortRequest.


        :return: The message_reference of this AbortRequest.
        :rtype: MessageReference
        """
        return self._message_reference

    @message_reference.setter
    def message_reference(self, message_reference):
        """Sets the message_reference of this AbortRequest.


        :param message_reference: The message_reference of this AbortRequest.
        :type message_reference: MessageReference
        """
        if message_reference is None:
            raise ValueError("Invalid value for `message_reference`, must not be `None`")

        self._message_reference = message_reference
