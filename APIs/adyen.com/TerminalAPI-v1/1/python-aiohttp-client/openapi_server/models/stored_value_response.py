# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.poi_data import POIData
from openapi_server.models.payment_receipt import PaymentReceipt
from openapi_server.models.response import Response
from openapi_server.models.sale_data import SaleData
from openapi_server.models.stored_value_result import StoredValueResult
from openapi_server import util


class StoredValueResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, poi_data: POIData=None, payment_receipt: List[PaymentReceipt]=None, response: Response=None, sale_data: SaleData=None, stored_value_result: List[StoredValueResult]=None):
        """StoredValueResponse - a model defined in OpenAPI

        :param poi_data: The poi_data of this StoredValueResponse.
        :param payment_receipt: The payment_receipt of this StoredValueResponse.
        :param response: The response of this StoredValueResponse.
        :param sale_data: The sale_data of this StoredValueResponse.
        :param stored_value_result: The stored_value_result of this StoredValueResponse.
        """
        self.openapi_types = {
            'poi_data': POIData,
            'payment_receipt': List[PaymentReceipt],
            'response': Response,
            'sale_data': SaleData,
            'stored_value_result': List[StoredValueResult]
        }

        self.attribute_map = {
            'poi_data': 'POIData',
            'payment_receipt': 'PaymentReceipt',
            'response': 'Response',
            'sale_data': 'SaleData',
            'stored_value_result': 'StoredValueResult'
        }

        self._poi_data = poi_data
        self._payment_receipt = payment_receipt
        self._response = response
        self._sale_data = sale_data
        self._stored_value_result = stored_value_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueResponse of this StoredValueResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def poi_data(self):
        """Gets the poi_data of this StoredValueResponse.


        :return: The poi_data of this StoredValueResponse.
        :rtype: POIData
        """
        return self._poi_data

    @poi_data.setter
    def poi_data(self, poi_data):
        """Sets the poi_data of this StoredValueResponse.


        :param poi_data: The poi_data of this StoredValueResponse.
        :type poi_data: POIData
        """
        if poi_data is None:
            raise ValueError("Invalid value for `poi_data`, must not be `None`")

        self._poi_data = poi_data

    @property
    def payment_receipt(self):
        """Gets the payment_receipt of this StoredValueResponse.


        :return: The payment_receipt of this StoredValueResponse.
        :rtype: List[PaymentReceipt]
        """
        return self._payment_receipt

    @payment_receipt.setter
    def payment_receipt(self, payment_receipt):
        """Sets the payment_receipt of this StoredValueResponse.


        :param payment_receipt: The payment_receipt of this StoredValueResponse.
        :type payment_receipt: List[PaymentReceipt]
        """

        self._payment_receipt = payment_receipt

    @property
    def response(self):
        """Gets the response of this StoredValueResponse.


        :return: The response of this StoredValueResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this StoredValueResponse.


        :param response: The response of this StoredValueResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def sale_data(self):
        """Gets the sale_data of this StoredValueResponse.


        :return: The sale_data of this StoredValueResponse.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this StoredValueResponse.


        :param sale_data: The sale_data of this StoredValueResponse.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data

    @property
    def stored_value_result(self):
        """Gets the stored_value_result of this StoredValueResponse.


        :return: The stored_value_result of this StoredValueResponse.
        :rtype: List[StoredValueResult]
        """
        return self._stored_value_result

    @stored_value_result.setter
    def stored_value_result(self, stored_value_result):
        """Sets the stored_value_result of this StoredValueResponse.


        :param stored_value_result: The stored_value_result of this StoredValueResponse.
        :type stored_value_result: List[StoredValueResult]
        """

        self._stored_value_result = stored_value_result
