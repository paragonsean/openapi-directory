# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AllowedProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_product_info: str=None, ean_upc: int=None, product_code: int=None, product_label: str=None):
        """AllowedProduct - a model defined in OpenAPI

        :param additional_product_info: The additional_product_info of this AllowedProduct.
        :param ean_upc: The ean_upc of this AllowedProduct.
        :param product_code: The product_code of this AllowedProduct.
        :param product_label: The product_label of this AllowedProduct.
        """
        self.openapi_types = {
            'additional_product_info': str,
            'ean_upc': int,
            'product_code': int,
            'product_label': str
        }

        self.attribute_map = {
            'additional_product_info': 'AdditionalProductInfo',
            'ean_upc': 'EanUpc',
            'product_code': 'ProductCode',
            'product_label': 'ProductLabel'
        }

        self._additional_product_info = additional_product_info
        self._ean_upc = ean_upc
        self._product_code = product_code
        self._product_label = product_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllowedProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllowedProduct of this AllowedProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_product_info(self):
        """Gets the additional_product_info of this AllowedProduct.

        Additionl information related to the line item.

        :return: The additional_product_info of this AllowedProduct.
        :rtype: str
        """
        return self._additional_product_info

    @additional_product_info.setter
    def additional_product_info(self, additional_product_info):
        """Sets the additional_product_info of this AllowedProduct.

        Additionl information related to the line item.

        :param additional_product_info: The additional_product_info of this AllowedProduct.
        :type additional_product_info: str
        """
        if additional_product_info is not None and not re.search(r'^.+$', additional_product_info):
            raise ValueError("Invalid value for `additional_product_info`, must be a follow pattern or equal to `/^.+$/`")

        self._additional_product_info = additional_product_info

    @property
    def ean_upc(self):
        """Gets the ean_upc of this AllowedProduct.

        Standard product code of item purchased with the transaction.

        :return: The ean_upc of this AllowedProduct.
        :rtype: int
        """
        return self._ean_upc

    @ean_upc.setter
    def ean_upc(self, ean_upc):
        """Sets the ean_upc of this AllowedProduct.

        Standard product code of item purchased with the transaction.

        :param ean_upc: The ean_upc of this AllowedProduct.
        :type ean_upc: int
        """

        self._ean_upc = ean_upc

    @property
    def product_code(self):
        """Gets the product_code of this AllowedProduct.

        Product code of item purchased with the transaction.

        :return: The product_code of this AllowedProduct.
        :rtype: int
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this AllowedProduct.

        Product code of item purchased with the transaction.

        :param product_code: The product_code of this AllowedProduct.
        :type product_code: int
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")
        if product_code is not None and product_code > 20:
            raise ValueError("Invalid value for `product_code`, must be a value less than or equal to `20`")
        if product_code is not None and product_code < 1:
            raise ValueError("Invalid value for `product_code`, must be a value greater than or equal to `1`")

        self._product_code = product_code

    @property
    def product_label(self):
        """Gets the product_label of this AllowedProduct.

        Product name of an item purchased with the transaction.

        :return: The product_label of this AllowedProduct.
        :rtype: str
        """
        return self._product_label

    @product_label.setter
    def product_label(self, product_label):
        """Sets the product_label of this AllowedProduct.

        Product name of an item purchased with the transaction.

        :param product_label: The product_label of this AllowedProduct.
        :type product_label: str
        """
        if product_label is not None and not re.search(r'^.+$', product_label):
            raise ValueError("Invalid value for `product_label`, must be a follow pattern or equal to `/^.+$/`")

        self._product_label = product_label
