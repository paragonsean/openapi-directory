# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amounts_resp import AmountsResp
from openapi_server.models.captured_signature import CapturedSignature
from openapi_server.models.currency_conversion import CurrencyConversion
from openapi_server.models.instalment import Instalment
from openapi_server.models.payment_acquirer_data import PaymentAcquirerData
from openapi_server.models.payment_instrument_data import PaymentInstrumentData
from openapi_server.models.payment_type import PaymentType
import re
from openapi_server import util


class PaymentResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amounts_resp: AmountsResp=None, authentication_method: List[str]=None, captured_signature: CapturedSignature=None, currency_conversion: List[CurrencyConversion]=None, customer_language: str=None, instalment: Instalment=None, merchant_override_flag: bool=False, online_flag: bool=True, payment_acquirer_data: PaymentAcquirerData=None, payment_instrument_data: PaymentInstrumentData=None, payment_type: PaymentType=None, protected_signature: str=None, validity_date: date=None):
        """PaymentResult - a model defined in OpenAPI

        :param amounts_resp: The amounts_resp of this PaymentResult.
        :param authentication_method: The authentication_method of this PaymentResult.
        :param captured_signature: The captured_signature of this PaymentResult.
        :param currency_conversion: The currency_conversion of this PaymentResult.
        :param customer_language: The customer_language of this PaymentResult.
        :param instalment: The instalment of this PaymentResult.
        :param merchant_override_flag: The merchant_override_flag of this PaymentResult.
        :param online_flag: The online_flag of this PaymentResult.
        :param payment_acquirer_data: The payment_acquirer_data of this PaymentResult.
        :param payment_instrument_data: The payment_instrument_data of this PaymentResult.
        :param payment_type: The payment_type of this PaymentResult.
        :param protected_signature: The protected_signature of this PaymentResult.
        :param validity_date: The validity_date of this PaymentResult.
        """
        self.openapi_types = {
            'amounts_resp': AmountsResp,
            'authentication_method': List[str],
            'captured_signature': CapturedSignature,
            'currency_conversion': List[CurrencyConversion],
            'customer_language': str,
            'instalment': Instalment,
            'merchant_override_flag': bool,
            'online_flag': bool,
            'payment_acquirer_data': PaymentAcquirerData,
            'payment_instrument_data': PaymentInstrumentData,
            'payment_type': PaymentType,
            'protected_signature': str,
            'validity_date': date
        }

        self.attribute_map = {
            'amounts_resp': 'AmountsResp',
            'authentication_method': 'AuthenticationMethod',
            'captured_signature': 'CapturedSignature',
            'currency_conversion': 'CurrencyConversion',
            'customer_language': 'CustomerLanguage',
            'instalment': 'Instalment',
            'merchant_override_flag': 'MerchantOverrideFlag',
            'online_flag': 'OnlineFlag',
            'payment_acquirer_data': 'PaymentAcquirerData',
            'payment_instrument_data': 'PaymentInstrumentData',
            'payment_type': 'PaymentType',
            'protected_signature': 'ProtectedSignature',
            'validity_date': 'ValidityDate'
        }

        self._amounts_resp = amounts_resp
        self._authentication_method = authentication_method
        self._captured_signature = captured_signature
        self._currency_conversion = currency_conversion
        self._customer_language = customer_language
        self._instalment = instalment
        self._merchant_override_flag = merchant_override_flag
        self._online_flag = online_flag
        self._payment_acquirer_data = payment_acquirer_data
        self._payment_instrument_data = payment_instrument_data
        self._payment_type = payment_type
        self._protected_signature = protected_signature
        self._validity_date = validity_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentResult of this PaymentResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amounts_resp(self):
        """Gets the amounts_resp of this PaymentResult.


        :return: The amounts_resp of this PaymentResult.
        :rtype: AmountsResp
        """
        return self._amounts_resp

    @amounts_resp.setter
    def amounts_resp(self, amounts_resp):
        """Sets the amounts_resp of this PaymentResult.


        :param amounts_resp: The amounts_resp of this PaymentResult.
        :type amounts_resp: AmountsResp
        """

        self._amounts_resp = amounts_resp

    @property
    def authentication_method(self):
        """Gets the authentication_method of this PaymentResult.


        :return: The authentication_method of this PaymentResult.
        :rtype: List[str]
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this PaymentResult.


        :param authentication_method: The authentication_method of this PaymentResult.
        :type authentication_method: List[str]
        """
        allowed_values = ["Bypass", "ManualVerification", "MerchantAuthentication", "OfflinePIN", "OnlinePIN", "PaperSignature", "SecureCertificate", "SecureNoCertificate", "SecuredChannel", "SignatureCapture", "UnknownMethod"]  # noqa: E501
        if not set(authentication_method).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `authentication_method` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(authentication_method) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._authentication_method = authentication_method

    @property
    def captured_signature(self):
        """Gets the captured_signature of this PaymentResult.


        :return: The captured_signature of this PaymentResult.
        :rtype: CapturedSignature
        """
        return self._captured_signature

    @captured_signature.setter
    def captured_signature(self, captured_signature):
        """Sets the captured_signature of this PaymentResult.


        :param captured_signature: The captured_signature of this PaymentResult.
        :type captured_signature: CapturedSignature
        """

        self._captured_signature = captured_signature

    @property
    def currency_conversion(self):
        """Gets the currency_conversion of this PaymentResult.


        :return: The currency_conversion of this PaymentResult.
        :rtype: List[CurrencyConversion]
        """
        return self._currency_conversion

    @currency_conversion.setter
    def currency_conversion(self, currency_conversion):
        """Sets the currency_conversion of this PaymentResult.


        :param currency_conversion: The currency_conversion of this PaymentResult.
        :type currency_conversion: List[CurrencyConversion]
        """

        self._currency_conversion = currency_conversion

    @property
    def customer_language(self):
        """Gets the customer_language of this PaymentResult.


        :return: The customer_language of this PaymentResult.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this PaymentResult.


        :param customer_language: The customer_language of this PaymentResult.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def instalment(self):
        """Gets the instalment of this PaymentResult.


        :return: The instalment of this PaymentResult.
        :rtype: Instalment
        """
        return self._instalment

    @instalment.setter
    def instalment(self, instalment):
        """Sets the instalment of this PaymentResult.


        :param instalment: The instalment of this PaymentResult.
        :type instalment: Instalment
        """

        self._instalment = instalment

    @property
    def merchant_override_flag(self):
        """Gets the merchant_override_flag of this PaymentResult.


        :return: The merchant_override_flag of this PaymentResult.
        :rtype: bool
        """
        return self._merchant_override_flag

    @merchant_override_flag.setter
    def merchant_override_flag(self, merchant_override_flag):
        """Sets the merchant_override_flag of this PaymentResult.


        :param merchant_override_flag: The merchant_override_flag of this PaymentResult.
        :type merchant_override_flag: bool
        """

        self._merchant_override_flag = merchant_override_flag

    @property
    def online_flag(self):
        """Gets the online_flag of this PaymentResult.


        :return: The online_flag of this PaymentResult.
        :rtype: bool
        """
        return self._online_flag

    @online_flag.setter
    def online_flag(self, online_flag):
        """Sets the online_flag of this PaymentResult.


        :param online_flag: The online_flag of this PaymentResult.
        :type online_flag: bool
        """

        self._online_flag = online_flag

    @property
    def payment_acquirer_data(self):
        """Gets the payment_acquirer_data of this PaymentResult.


        :return: The payment_acquirer_data of this PaymentResult.
        :rtype: PaymentAcquirerData
        """
        return self._payment_acquirer_data

    @payment_acquirer_data.setter
    def payment_acquirer_data(self, payment_acquirer_data):
        """Sets the payment_acquirer_data of this PaymentResult.


        :param payment_acquirer_data: The payment_acquirer_data of this PaymentResult.
        :type payment_acquirer_data: PaymentAcquirerData
        """

        self._payment_acquirer_data = payment_acquirer_data

    @property
    def payment_instrument_data(self):
        """Gets the payment_instrument_data of this PaymentResult.


        :return: The payment_instrument_data of this PaymentResult.
        :rtype: PaymentInstrumentData
        """
        return self._payment_instrument_data

    @payment_instrument_data.setter
    def payment_instrument_data(self, payment_instrument_data):
        """Sets the payment_instrument_data of this PaymentResult.


        :param payment_instrument_data: The payment_instrument_data of this PaymentResult.
        :type payment_instrument_data: PaymentInstrumentData
        """

        self._payment_instrument_data = payment_instrument_data

    @property
    def payment_type(self):
        """Gets the payment_type of this PaymentResult.


        :return: The payment_type of this PaymentResult.
        :rtype: PaymentType
        """
        return self._payment_type

    @payment_type.setter
    def payment_type(self, payment_type):
        """Sets the payment_type of this PaymentResult.


        :param payment_type: The payment_type of this PaymentResult.
        :type payment_type: PaymentType
        """

        self._payment_type = payment_type

    @property
    def protected_signature(self):
        """Gets the protected_signature of this PaymentResult.


        :return: The protected_signature of this PaymentResult.
        :rtype: str
        """
        return self._protected_signature

    @protected_signature.setter
    def protected_signature(self, protected_signature):
        """Sets the protected_signature of this PaymentResult.


        :param protected_signature: The protected_signature of this PaymentResult.
        :type protected_signature: str
        """

        self._protected_signature = protected_signature

    @property
    def validity_date(self):
        """Gets the validity_date of this PaymentResult.


        :return: The validity_date of this PaymentResult.
        :rtype: date
        """
        return self._validity_date

    @validity_date.setter
    def validity_date(self, validity_date):
        """Sets the validity_date of this PaymentResult.


        :param validity_date: The validity_date of this PaymentResult.
        :type validity_date: date
        """

        self._validity_date = validity_date
