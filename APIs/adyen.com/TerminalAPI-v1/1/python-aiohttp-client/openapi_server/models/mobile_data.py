# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geolocation import Geolocation
from openapi_server.models.sensitive_mobile_data import SensitiveMobileData
from openapi_server import util


class MobileData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, geolocation: Geolocation=None, masked_msisdn: int=None, mobile_country_code: int=None, mobile_network_code: int=None, protected_mobile_data: str=None, sensitive_mobile_data: SensitiveMobileData=None):
        """MobileData - a model defined in OpenAPI

        :param geolocation: The geolocation of this MobileData.
        :param masked_msisdn: The masked_msisdn of this MobileData.
        :param mobile_country_code: The mobile_country_code of this MobileData.
        :param mobile_network_code: The mobile_network_code of this MobileData.
        :param protected_mobile_data: The protected_mobile_data of this MobileData.
        :param sensitive_mobile_data: The sensitive_mobile_data of this MobileData.
        """
        self.openapi_types = {
            'geolocation': Geolocation,
            'masked_msisdn': int,
            'mobile_country_code': int,
            'mobile_network_code': int,
            'protected_mobile_data': str,
            'sensitive_mobile_data': SensitiveMobileData
        }

        self.attribute_map = {
            'geolocation': 'Geolocation',
            'masked_msisdn': 'MaskedMSISDN',
            'mobile_country_code': 'MobileCountryCode',
            'mobile_network_code': 'MobileNetworkCode',
            'protected_mobile_data': 'ProtectedMobileData',
            'sensitive_mobile_data': 'SensitiveMobileData'
        }

        self._geolocation = geolocation
        self._masked_msisdn = masked_msisdn
        self._mobile_country_code = mobile_country_code
        self._mobile_network_code = mobile_network_code
        self._protected_mobile_data = protected_mobile_data
        self._sensitive_mobile_data = sensitive_mobile_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MobileData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MobileData of this MobileData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def geolocation(self):
        """Gets the geolocation of this MobileData.


        :return: The geolocation of this MobileData.
        :rtype: Geolocation
        """
        return self._geolocation

    @geolocation.setter
    def geolocation(self, geolocation):
        """Sets the geolocation of this MobileData.


        :param geolocation: The geolocation of this MobileData.
        :type geolocation: Geolocation
        """

        self._geolocation = geolocation

    @property
    def masked_msisdn(self):
        """Gets the masked_msisdn of this MobileData.

        If data available.

        :return: The masked_msisdn of this MobileData.
        :rtype: int
        """
        return self._masked_msisdn

    @masked_msisdn.setter
    def masked_msisdn(self, masked_msisdn):
        """Sets the masked_msisdn of this MobileData.

        If data available.

        :param masked_msisdn: The masked_msisdn of this MobileData.
        :type masked_msisdn: int
        """

        self._masked_msisdn = masked_msisdn

    @property
    def mobile_country_code(self):
        """Gets the mobile_country_code of this MobileData.

        If data available.

        :return: The mobile_country_code of this MobileData.
        :rtype: int
        """
        return self._mobile_country_code

    @mobile_country_code.setter
    def mobile_country_code(self, mobile_country_code):
        """Sets the mobile_country_code of this MobileData.

        If data available.

        :param mobile_country_code: The mobile_country_code of this MobileData.
        :type mobile_country_code: int
        """
        if mobile_country_code is not None and mobile_country_code > 3:
            raise ValueError("Invalid value for `mobile_country_code`, must be a value less than or equal to `3`")
        if mobile_country_code is not None and mobile_country_code < 3:
            raise ValueError("Invalid value for `mobile_country_code`, must be a value greater than or equal to `3`")

        self._mobile_country_code = mobile_country_code

    @property
    def mobile_network_code(self):
        """Gets the mobile_network_code of this MobileData.

        If data available.

        :return: The mobile_network_code of this MobileData.
        :rtype: int
        """
        return self._mobile_network_code

    @mobile_network_code.setter
    def mobile_network_code(self, mobile_network_code):
        """Sets the mobile_network_code of this MobileData.

        If data available.

        :param mobile_network_code: The mobile_network_code of this MobileData.
        :type mobile_network_code: int
        """
        if mobile_network_code is not None and mobile_network_code > 3:
            raise ValueError("Invalid value for `mobile_network_code`, must be a value less than or equal to `3`")
        if mobile_network_code is not None and mobile_network_code < 2:
            raise ValueError("Invalid value for `mobile_network_code`, must be a value greater than or equal to `2`")

        self._mobile_network_code = mobile_network_code

    @property
    def protected_mobile_data(self):
        """Gets the protected_mobile_data of this MobileData.

        SensitiveMobileData.

        :return: The protected_mobile_data of this MobileData.
        :rtype: str
        """
        return self._protected_mobile_data

    @protected_mobile_data.setter
    def protected_mobile_data(self, protected_mobile_data):
        """Sets the protected_mobile_data of this MobileData.

        SensitiveMobileData.

        :param protected_mobile_data: The protected_mobile_data of this MobileData.
        :type protected_mobile_data: str
        """

        self._protected_mobile_data = protected_mobile_data

    @property
    def sensitive_mobile_data(self):
        """Gets the sensitive_mobile_data of this MobileData.


        :return: The sensitive_mobile_data of this MobileData.
        :rtype: SensitiveMobileData
        """
        return self._sensitive_mobile_data

    @sensitive_mobile_data.setter
    def sensitive_mobile_data(self, sensitive_mobile_data):
        """Sets the sensitive_mobile_data of this MobileData.


        :param sensitive_mobile_data: The sensitive_mobile_data of this MobileData.
        :type sensitive_mobile_data: SensitiveMobileData
        """

        self._sensitive_mobile_data = sensitive_mobile_data
