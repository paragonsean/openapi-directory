# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_data import LoyaltyData
from openapi_server.models.payment_data import PaymentData
from openapi_server.models.payment_transaction import PaymentTransaction
from openapi_server.models.sale_data import SaleData
from openapi_server import util


class PaymentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loyalty_data: List[LoyaltyData]=None, payment_data: PaymentData=None, payment_transaction: PaymentTransaction=None, sale_data: SaleData=None):
        """PaymentRequest - a model defined in OpenAPI

        :param loyalty_data: The loyalty_data of this PaymentRequest.
        :param payment_data: The payment_data of this PaymentRequest.
        :param payment_transaction: The payment_transaction of this PaymentRequest.
        :param sale_data: The sale_data of this PaymentRequest.
        """
        self.openapi_types = {
            'loyalty_data': List[LoyaltyData],
            'payment_data': PaymentData,
            'payment_transaction': PaymentTransaction,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'loyalty_data': 'LoyaltyData',
            'payment_data': 'PaymentData',
            'payment_transaction': 'PaymentTransaction',
            'sale_data': 'SaleData'
        }

        self._loyalty_data = loyalty_data
        self._payment_data = payment_data
        self._payment_transaction = payment_transaction
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRequest of this PaymentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loyalty_data(self):
        """Gets the loyalty_data of this PaymentRequest.


        :return: The loyalty_data of this PaymentRequest.
        :rtype: List[LoyaltyData]
        """
        return self._loyalty_data

    @loyalty_data.setter
    def loyalty_data(self, loyalty_data):
        """Sets the loyalty_data of this PaymentRequest.


        :param loyalty_data: The loyalty_data of this PaymentRequest.
        :type loyalty_data: List[LoyaltyData]
        """

        self._loyalty_data = loyalty_data

    @property
    def payment_data(self):
        """Gets the payment_data of this PaymentRequest.


        :return: The payment_data of this PaymentRequest.
        :rtype: PaymentData
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this PaymentRequest.


        :param payment_data: The payment_data of this PaymentRequest.
        :type payment_data: PaymentData
        """

        self._payment_data = payment_data

    @property
    def payment_transaction(self):
        """Gets the payment_transaction of this PaymentRequest.


        :return: The payment_transaction of this PaymentRequest.
        :rtype: PaymentTransaction
        """
        return self._payment_transaction

    @payment_transaction.setter
    def payment_transaction(self, payment_transaction):
        """Sets the payment_transaction of this PaymentRequest.


        :param payment_transaction: The payment_transaction of this PaymentRequest.
        :type payment_transaction: PaymentTransaction
        """
        if payment_transaction is None:
            raise ValueError("Invalid value for `payment_transaction`, must not be `None`")

        self._payment_transaction = payment_transaction

    @property
    def sale_data(self):
        """Gets the sale_data of this PaymentRequest.


        :return: The sale_data of this PaymentRequest.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this PaymentRequest.


        :param sale_data: The sale_data of this PaymentRequest.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data
