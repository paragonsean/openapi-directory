# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class TotalFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator_id: str=None, poiid: str=None, sale_id: str=None, shift_number: str=None, totals_group_id: str=None):
        """TotalFilter - a model defined in OpenAPI

        :param operator_id: The operator_id of this TotalFilter.
        :param poiid: The poiid of this TotalFilter.
        :param sale_id: The sale_id of this TotalFilter.
        :param shift_number: The shift_number of this TotalFilter.
        :param totals_group_id: The totals_group_id of this TotalFilter.
        """
        self.openapi_types = {
            'operator_id': str,
            'poiid': str,
            'sale_id': str,
            'shift_number': str,
            'totals_group_id': str
        }

        self.attribute_map = {
            'operator_id': 'OperatorID',
            'poiid': 'POIID',
            'sale_id': 'SaleID',
            'shift_number': 'ShiftNumber',
            'totals_group_id': 'TotalsGroupID'
        }

        self._operator_id = operator_id
        self._poiid = poiid
        self._sale_id = sale_id
        self._shift_number = shift_number
        self._totals_group_id = totals_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TotalFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TotalFilter of this TotalFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator_id(self):
        """Gets the operator_id of this TotalFilter.


        :return: The operator_id of this TotalFilter.
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this TotalFilter.


        :param operator_id: The operator_id of this TotalFilter.
        :type operator_id: str
        """
        if operator_id is not None and not re.search(r'^.+$', operator_id):
            raise ValueError("Invalid value for `operator_id`, must be a follow pattern or equal to `/^.+$/`")

        self._operator_id = operator_id

    @property
    def poiid(self):
        """Gets the poiid of this TotalFilter.


        :return: The poiid of this TotalFilter.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this TotalFilter.


        :param poiid: The poiid of this TotalFilter.
        :type poiid: str
        """
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid

    @property
    def sale_id(self):
        """Gets the sale_id of this TotalFilter.


        :return: The sale_id of this TotalFilter.
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this TotalFilter.


        :param sale_id: The sale_id of this TotalFilter.
        :type sale_id: str
        """
        if sale_id is not None and not re.search(r'^.+$', sale_id):
            raise ValueError("Invalid value for `sale_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_id = sale_id

    @property
    def shift_number(self):
        """Gets the shift_number of this TotalFilter.


        :return: The shift_number of this TotalFilter.
        :rtype: str
        """
        return self._shift_number

    @shift_number.setter
    def shift_number(self, shift_number):
        """Sets the shift_number of this TotalFilter.


        :param shift_number: The shift_number of this TotalFilter.
        :type shift_number: str
        """
        if shift_number is not None and not re.search(r'^.+$', shift_number):
            raise ValueError("Invalid value for `shift_number`, must be a follow pattern or equal to `/^.+$/`")

        self._shift_number = shift_number

    @property
    def totals_group_id(self):
        """Gets the totals_group_id of this TotalFilter.


        :return: The totals_group_id of this TotalFilter.
        :rtype: str
        """
        return self._totals_group_id

    @totals_group_id.setter
    def totals_group_id(self, totals_group_id):
        """Sets the totals_group_id of this TotalFilter.


        :param totals_group_id: The totals_group_id of this TotalFilter.
        :type totals_group_id: str
        """
        if totals_group_id is not None and not re.search(r'^.{1,16}$', totals_group_id):
            raise ValueError("Invalid value for `totals_group_id`, must be a follow pattern or equal to `/^.{1,16}$/`")

        self._totals_group_id = totals_group_id
