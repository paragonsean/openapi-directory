# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_format import TrackFormat
import re
from openapi_server import util


class TrackData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, track_format: TrackFormat=None, track_numb: int=2, track_value: str=None):
        """TrackData - a model defined in OpenAPI

        :param track_format: The track_format of this TrackData.
        :param track_numb: The track_numb of this TrackData.
        :param track_value: The track_value of this TrackData.
        """
        self.openapi_types = {
            'track_format': TrackFormat,
            'track_numb': int,
            'track_value': str
        }

        self.attribute_map = {
            'track_format': 'TrackFormat',
            'track_numb': 'TrackNumb',
            'track_value': 'TrackValue'
        }

        self._track_format = track_format
        self._track_numb = track_numb
        self._track_value = track_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackData of this TrackData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def track_format(self):
        """Gets the track_format of this TrackData.


        :return: The track_format of this TrackData.
        :rtype: TrackFormat
        """
        return self._track_format

    @track_format.setter
    def track_format(self, track_format):
        """Sets the track_format of this TrackData.


        :param track_format: The track_format of this TrackData.
        :type track_format: TrackFormat
        """

        self._track_format = track_format

    @property
    def track_numb(self):
        """Gets the track_numb of this TrackData.


        :return: The track_numb of this TrackData.
        :rtype: int
        """
        return self._track_numb

    @track_numb.setter
    def track_numb(self, track_numb):
        """Sets the track_numb of this TrackData.


        :param track_numb: The track_numb of this TrackData.
        :type track_numb: int
        """
        if track_numb is not None and track_numb > 3:
            raise ValueError("Invalid value for `track_numb`, must be a value less than or equal to `3`")
        if track_numb is not None and track_numb < 1:
            raise ValueError("Invalid value for `track_numb`, must be a value greater than or equal to `1`")

        self._track_numb = track_numb

    @property
    def track_value(self):
        """Gets the track_value of this TrackData.


        :return: The track_value of this TrackData.
        :rtype: str
        """
        return self._track_value

    @track_value.setter
    def track_value(self, track_value):
        """Sets the track_value of this TrackData.


        :param track_value: The track_value of this TrackData.
        :type track_value: str
        """
        if track_value is None:
            raise ValueError("Invalid value for `track_value`, must not be `None`")
        if track_value is not None and not re.search(r'^.{1,104}$', track_value):
            raise ValueError("Invalid value for `track_value`, must be a follow pattern or equal to `/^.{1,104}$/`")

        self._track_value = track_value
