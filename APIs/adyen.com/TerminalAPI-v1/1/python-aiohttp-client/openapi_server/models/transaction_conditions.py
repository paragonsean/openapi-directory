# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_handling import LoyaltyHandling
import re
from openapi_server import util


class TransactionConditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: List[int]=None, allowed_loyalty_brand: List[str]=None, allowed_payment_brand: List[str]=None, customer_language: str=None, debit_preferred_flag: bool=None, force_entry_mode: List[str]=None, force_online_flag: bool=False, loyalty_handling: LoyaltyHandling=None, merchant_category_code: str=None):
        """TransactionConditions - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this TransactionConditions.
        :param allowed_loyalty_brand: The allowed_loyalty_brand of this TransactionConditions.
        :param allowed_payment_brand: The allowed_payment_brand of this TransactionConditions.
        :param customer_language: The customer_language of this TransactionConditions.
        :param debit_preferred_flag: The debit_preferred_flag of this TransactionConditions.
        :param force_entry_mode: The force_entry_mode of this TransactionConditions.
        :param force_online_flag: The force_online_flag of this TransactionConditions.
        :param loyalty_handling: The loyalty_handling of this TransactionConditions.
        :param merchant_category_code: The merchant_category_code of this TransactionConditions.
        """
        self.openapi_types = {
            'acquirer_id': List[int],
            'allowed_loyalty_brand': List[str],
            'allowed_payment_brand': List[str],
            'customer_language': str,
            'debit_preferred_flag': bool,
            'force_entry_mode': List[str],
            'force_online_flag': bool,
            'loyalty_handling': LoyaltyHandling,
            'merchant_category_code': str
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'allowed_loyalty_brand': 'AllowedLoyaltyBrand',
            'allowed_payment_brand': 'AllowedPaymentBrand',
            'customer_language': 'CustomerLanguage',
            'debit_preferred_flag': 'DebitPreferredFlag',
            'force_entry_mode': 'ForceEntryMode',
            'force_online_flag': 'ForceOnlineFlag',
            'loyalty_handling': 'LoyaltyHandling',
            'merchant_category_code': 'MerchantCategoryCode'
        }

        self._acquirer_id = acquirer_id
        self._allowed_loyalty_brand = allowed_loyalty_brand
        self._allowed_payment_brand = allowed_payment_brand
        self._customer_language = customer_language
        self._debit_preferred_flag = debit_preferred_flag
        self._force_entry_mode = force_entry_mode
        self._force_online_flag = force_online_flag
        self._loyalty_handling = loyalty_handling
        self._merchant_category_code = merchant_category_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionConditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionConditions of this TransactionConditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this TransactionConditions.


        :return: The acquirer_id of this TransactionConditions.
        :rtype: List[int]
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this TransactionConditions.


        :param acquirer_id: The acquirer_id of this TransactionConditions.
        :type acquirer_id: List[int]
        """

        self._acquirer_id = acquirer_id

    @property
    def allowed_loyalty_brand(self):
        """Gets the allowed_loyalty_brand of this TransactionConditions.


        :return: The allowed_loyalty_brand of this TransactionConditions.
        :rtype: List[str]
        """
        return self._allowed_loyalty_brand

    @allowed_loyalty_brand.setter
    def allowed_loyalty_brand(self, allowed_loyalty_brand):
        """Sets the allowed_loyalty_brand of this TransactionConditions.


        :param allowed_loyalty_brand: The allowed_loyalty_brand of this TransactionConditions.
        :type allowed_loyalty_brand: List[str]
        """

        self._allowed_loyalty_brand = allowed_loyalty_brand

    @property
    def allowed_payment_brand(self):
        """Gets the allowed_payment_brand of this TransactionConditions.


        :return: The allowed_payment_brand of this TransactionConditions.
        :rtype: List[str]
        """
        return self._allowed_payment_brand

    @allowed_payment_brand.setter
    def allowed_payment_brand(self, allowed_payment_brand):
        """Sets the allowed_payment_brand of this TransactionConditions.


        :param allowed_payment_brand: The allowed_payment_brand of this TransactionConditions.
        :type allowed_payment_brand: List[str]
        """

        self._allowed_payment_brand = allowed_payment_brand

    @property
    def customer_language(self):
        """Gets the customer_language of this TransactionConditions.

        If the language is selected by the Sale System before the request to the POI.

        :return: The customer_language of this TransactionConditions.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this TransactionConditions.

        If the language is selected by the Sale System before the request to the POI.

        :param customer_language: The customer_language of this TransactionConditions.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def debit_preferred_flag(self):
        """Gets the debit_preferred_flag of this TransactionConditions.

        The preferred type of payment is a debit transaction rather a credit transaction.

        :return: The debit_preferred_flag of this TransactionConditions.
        :rtype: bool
        """
        return self._debit_preferred_flag

    @debit_preferred_flag.setter
    def debit_preferred_flag(self, debit_preferred_flag):
        """Sets the debit_preferred_flag of this TransactionConditions.

        The preferred type of payment is a debit transaction rather a credit transaction.

        :param debit_preferred_flag: The debit_preferred_flag of this TransactionConditions.
        :type debit_preferred_flag: bool
        """

        self._debit_preferred_flag = debit_preferred_flag

    @property
    def force_entry_mode(self):
        """Gets the force_entry_mode of this TransactionConditions.


        :return: The force_entry_mode of this TransactionConditions.
        :rtype: List[str]
        """
        return self._force_entry_mode

    @force_entry_mode.setter
    def force_entry_mode(self, force_entry_mode):
        """Sets the force_entry_mode of this TransactionConditions.


        :param force_entry_mode: The force_entry_mode of this TransactionConditions.
        :type force_entry_mode: List[str]
        """
        allowed_values = ["CheckReader", "Contactless", "File", "ICC", "Keyed", "MagStripe", "Manual", "RFID", "Scanned", "SynchronousICC", "Tapped"]  # noqa: E501
        if not set(force_entry_mode).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `force_entry_mode` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(force_entry_mode) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._force_entry_mode = force_entry_mode

    @property
    def force_online_flag(self):
        """Gets the force_online_flag of this TransactionConditions.

        Go online if data sent.

        :return: The force_online_flag of this TransactionConditions.
        :rtype: bool
        """
        return self._force_online_flag

    @force_online_flag.setter
    def force_online_flag(self, force_online_flag):
        """Sets the force_online_flag of this TransactionConditions.

        Go online if data sent.

        :param force_online_flag: The force_online_flag of this TransactionConditions.
        :type force_online_flag: bool
        """

        self._force_online_flag = force_online_flag

    @property
    def loyalty_handling(self):
        """Gets the loyalty_handling of this TransactionConditions.


        :return: The loyalty_handling of this TransactionConditions.
        :rtype: LoyaltyHandling
        """
        return self._loyalty_handling

    @loyalty_handling.setter
    def loyalty_handling(self, loyalty_handling):
        """Sets the loyalty_handling of this TransactionConditions.


        :param loyalty_handling: The loyalty_handling of this TransactionConditions.
        :type loyalty_handling: LoyaltyHandling
        """

        self._loyalty_handling = loyalty_handling

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this TransactionConditions.

        The payment implies a specific MCC.

        :return: The merchant_category_code of this TransactionConditions.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this TransactionConditions.

        The payment implies a specific MCC.

        :param merchant_category_code: The merchant_category_code of this TransactionConditions.
        :type merchant_category_code: str
        """
        if merchant_category_code is not None and not re.search(r'^.{3,4}$', merchant_category_code):
            raise ValueError("Invalid value for `merchant_category_code`, must be a follow pattern or equal to `/^.{3,4}$/`")

        self._merchant_category_code = merchant_category_code
