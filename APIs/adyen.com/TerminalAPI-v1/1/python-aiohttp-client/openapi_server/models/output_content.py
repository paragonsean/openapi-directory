# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.output_barcode import OutputBarcode
from openapi_server.models.output_format import OutputFormat
from openapi_server.models.output_text import OutputText
from openapi_server.models.predefined_content import PredefinedContent
import re
from openapi_server import util


class OutputContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, output_barcode: OutputBarcode=None, output_format: OutputFormat=None, output_text: List[OutputText]=None, output_xhtml: str=None, predefined_content: PredefinedContent=None):
        """OutputContent - a model defined in OpenAPI

        :param output_barcode: The output_barcode of this OutputContent.
        :param output_format: The output_format of this OutputContent.
        :param output_text: The output_text of this OutputContent.
        :param output_xhtml: The output_xhtml of this OutputContent.
        :param predefined_content: The predefined_content of this OutputContent.
        """
        self.openapi_types = {
            'output_barcode': OutputBarcode,
            'output_format': OutputFormat,
            'output_text': List[OutputText],
            'output_xhtml': str,
            'predefined_content': PredefinedContent
        }

        self.attribute_map = {
            'output_barcode': 'OutputBarcode',
            'output_format': 'OutputFormat',
            'output_text': 'OutputText',
            'output_xhtml': 'OutputXHTML',
            'predefined_content': 'PredefinedContent'
        }

        self._output_barcode = output_barcode
        self._output_format = output_format
        self._output_text = output_text
        self._output_xhtml = output_xhtml
        self._predefined_content = predefined_content

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputContent of this OutputContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def output_barcode(self):
        """Gets the output_barcode of this OutputContent.


        :return: The output_barcode of this OutputContent.
        :rtype: OutputBarcode
        """
        return self._output_barcode

    @output_barcode.setter
    def output_barcode(self, output_barcode):
        """Sets the output_barcode of this OutputContent.


        :param output_barcode: The output_barcode of this OutputContent.
        :type output_barcode: OutputBarcode
        """

        self._output_barcode = output_barcode

    @property
    def output_format(self):
        """Gets the output_format of this OutputContent.


        :return: The output_format of this OutputContent.
        :rtype: OutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this OutputContent.


        :param output_format: The output_format of this OutputContent.
        :type output_format: OutputFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")

        self._output_format = output_format

    @property
    def output_text(self):
        """Gets the output_text of this OutputContent.


        :return: The output_text of this OutputContent.
        :rtype: List[OutputText]
        """
        return self._output_text

    @output_text.setter
    def output_text(self, output_text):
        """Sets the output_text of this OutputContent.


        :param output_text: The output_text of this OutputContent.
        :type output_text: List[OutputText]
        """

        self._output_text = output_text

    @property
    def output_xhtml(self):
        """Gets the output_xhtml of this OutputContent.

        Mandatory, if OutputFormat is XHTML, not allowed otherwise.

        :return: The output_xhtml of this OutputContent.
        :rtype: str
        """
        return self._output_xhtml

    @output_xhtml.setter
    def output_xhtml(self, output_xhtml):
        """Sets the output_xhtml of this OutputContent.

        Mandatory, if OutputFormat is XHTML, not allowed otherwise.

        :param output_xhtml: The output_xhtml of this OutputContent.
        :type output_xhtml: str
        """
        if output_xhtml is not None and not re.search(r'^.{0,262144}$', output_xhtml):
            raise ValueError("Invalid value for `output_xhtml`, must be a follow pattern or equal to `/^.{0,262144}$/`")

        self._output_xhtml = output_xhtml

    @property
    def predefined_content(self):
        """Gets the predefined_content of this OutputContent.


        :return: The predefined_content of this OutputContent.
        :rtype: PredefinedContent
        """
        return self._predefined_content

    @predefined_content.setter
    def predefined_content(self, predefined_content):
        """Sets the predefined_content of this OutputContent.


        :param predefined_content: The predefined_content of this OutputContent.
        :type predefined_content: PredefinedContent
        """

        self._predefined_content = predefined_content
