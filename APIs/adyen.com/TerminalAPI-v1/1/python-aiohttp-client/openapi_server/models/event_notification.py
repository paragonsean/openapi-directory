# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_output import DisplayOutput
from openapi_server.models.event_to_notify import EventToNotify
import re
from openapi_server import util


class EventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_language: str=None, display_output: List[DisplayOutput]=None, event_details: str=None, event_to_notify: EventToNotify=None, maintenance_required_flag: bool=False, rejected_message: str=None, time_stamp: datetime=None):
        """EventNotification - a model defined in OpenAPI

        :param customer_language: The customer_language of this EventNotification.
        :param display_output: The display_output of this EventNotification.
        :param event_details: The event_details of this EventNotification.
        :param event_to_notify: The event_to_notify of this EventNotification.
        :param maintenance_required_flag: The maintenance_required_flag of this EventNotification.
        :param rejected_message: The rejected_message of this EventNotification.
        :param time_stamp: The time_stamp of this EventNotification.
        """
        self.openapi_types = {
            'customer_language': str,
            'display_output': List[DisplayOutput],
            'event_details': str,
            'event_to_notify': EventToNotify,
            'maintenance_required_flag': bool,
            'rejected_message': str,
            'time_stamp': datetime
        }

        self.attribute_map = {
            'customer_language': 'CustomerLanguage',
            'display_output': 'DisplayOutput',
            'event_details': 'EventDetails',
            'event_to_notify': 'EventToNotify',
            'maintenance_required_flag': 'MaintenanceRequiredFlag',
            'rejected_message': 'RejectedMessage',
            'time_stamp': 'TimeStamp'
        }

        self._customer_language = customer_language
        self._display_output = display_output
        self._event_details = event_details
        self._event_to_notify = event_to_notify
        self._maintenance_required_flag = maintenance_required_flag
        self._rejected_message = rejected_message
        self._time_stamp = time_stamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventNotification of this EventNotification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_language(self):
        """Gets the customer_language of this EventNotification.

        If the language is selected by the Sale System before the request to the POI.

        :return: The customer_language of this EventNotification.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this EventNotification.

        If the language is selected by the Sale System before the request to the POI.

        :param customer_language: The customer_language of this EventNotification.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def display_output(self):
        """Gets the display_output of this EventNotification.


        :return: The display_output of this EventNotification.
        :rtype: List[DisplayOutput]
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this EventNotification.


        :param display_output: The display_output of this EventNotification.
        :type display_output: List[DisplayOutput]
        """

        self._display_output = display_output

    @property
    def event_details(self):
        """Gets the event_details of this EventNotification.

        If present, the Sale logs it for further examination.

        :return: The event_details of this EventNotification.
        :rtype: str
        """
        return self._event_details

    @event_details.setter
    def event_details(self, event_details):
        """Sets the event_details of this EventNotification.

        If present, the Sale logs it for further examination.

        :param event_details: The event_details of this EventNotification.
        :type event_details: str
        """
        if event_details is not None and not re.search(r'^.+$', event_details):
            raise ValueError("Invalid value for `event_details`, must be a follow pattern or equal to `/^.+$/`")

        self._event_details = event_details

    @property
    def event_to_notify(self):
        """Gets the event_to_notify of this EventNotification.


        :return: The event_to_notify of this EventNotification.
        :rtype: EventToNotify
        """
        return self._event_to_notify

    @event_to_notify.setter
    def event_to_notify(self, event_to_notify):
        """Sets the event_to_notify of this EventNotification.


        :param event_to_notify: The event_to_notify of this EventNotification.
        :type event_to_notify: EventToNotify
        """
        if event_to_notify is None:
            raise ValueError("Invalid value for `event_to_notify`, must not be `None`")

        self._event_to_notify = event_to_notify

    @property
    def maintenance_required_flag(self):
        """Gets the maintenance_required_flag of this EventNotification.

        Indicates if the occurred event requires maintenance call or action.

        :return: The maintenance_required_flag of this EventNotification.
        :rtype: bool
        """
        return self._maintenance_required_flag

    @maintenance_required_flag.setter
    def maintenance_required_flag(self, maintenance_required_flag):
        """Sets the maintenance_required_flag of this EventNotification.

        Indicates if the occurred event requires maintenance call or action.

        :param maintenance_required_flag: The maintenance_required_flag of this EventNotification.
        :type maintenance_required_flag: bool
        """

        self._maintenance_required_flag = maintenance_required_flag

    @property
    def rejected_message(self):
        """Gets the rejected_message of this EventNotification.

        Mandatory if EventToNotify is Reject, absent in other cases.

        :return: The rejected_message of this EventNotification.
        :rtype: str
        """
        return self._rejected_message

    @rejected_message.setter
    def rejected_message(self, rejected_message):
        """Sets the rejected_message of this EventNotification.

        Mandatory if EventToNotify is Reject, absent in other cases.

        :param rejected_message: The rejected_message of this EventNotification.
        :type rejected_message: str
        """
        if rejected_message is not None and not re.search(r'^.+$', rejected_message):
            raise ValueError("Invalid value for `rejected_message`, must be a follow pattern or equal to `/^.+$/`")

        self._rejected_message = rejected_message

    @property
    def time_stamp(self):
        """Gets the time_stamp of this EventNotification.

        Date and time of a transaction for the Sale System, the POI System or the Acquirer.

        :return: The time_stamp of this EventNotification.
        :rtype: datetime
        """
        return self._time_stamp

    @time_stamp.setter
    def time_stamp(self, time_stamp):
        """Sets the time_stamp of this EventNotification.

        Date and time of a transaction for the Sale System, the POI System or the Acquirer.

        :param time_stamp: The time_stamp of this EventNotification.
        :type time_stamp: datetime
        """
        if time_stamp is None:
            raise ValueError("Invalid value for `time_stamp`, must not be `None`")

        self._time_stamp = time_stamp
