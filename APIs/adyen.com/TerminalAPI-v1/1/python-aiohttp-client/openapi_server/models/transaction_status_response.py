# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_reference import MessageReference
from openapi_server.models.repeated_message_response import RepeatedMessageResponse
from openapi_server.models.response import Response
from openapi_server import util


class TransactionStatusResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, message_reference: MessageReference=None, repeated_message_response: RepeatedMessageResponse=None, response: Response=None):
        """TransactionStatusResponse - a model defined in OpenAPI

        :param message_reference: The message_reference of this TransactionStatusResponse.
        :param repeated_message_response: The repeated_message_response of this TransactionStatusResponse.
        :param response: The response of this TransactionStatusResponse.
        """
        self.openapi_types = {
            'message_reference': MessageReference,
            'repeated_message_response': RepeatedMessageResponse,
            'response': Response
        }

        self.attribute_map = {
            'message_reference': 'MessageReference',
            'repeated_message_response': 'RepeatedMessageResponse',
            'response': 'Response'
        }

        self._message_reference = message_reference
        self._repeated_message_response = repeated_message_response
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionStatusResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionStatusResponse of this TransactionStatusResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def message_reference(self):
        """Gets the message_reference of this TransactionStatusResponse.


        :return: The message_reference of this TransactionStatusResponse.
        :rtype: MessageReference
        """
        return self._message_reference

    @message_reference.setter
    def message_reference(self, message_reference):
        """Sets the message_reference of this TransactionStatusResponse.


        :param message_reference: The message_reference of this TransactionStatusResponse.
        :type message_reference: MessageReference
        """

        self._message_reference = message_reference

    @property
    def repeated_message_response(self):
        """Gets the repeated_message_response of this TransactionStatusResponse.


        :return: The repeated_message_response of this TransactionStatusResponse.
        :rtype: RepeatedMessageResponse
        """
        return self._repeated_message_response

    @repeated_message_response.setter
    def repeated_message_response(self, repeated_message_response):
        """Sets the repeated_message_response of this TransactionStatusResponse.


        :param repeated_message_response: The repeated_message_response of this TransactionStatusResponse.
        :type repeated_message_response: RepeatedMessageResponse
        """

        self._repeated_message_response = repeated_message_response

    @property
    def response(self):
        """Gets the response of this TransactionStatusResponse.


        :return: The response of this TransactionStatusResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this TransactionStatusResponse.


        :param response: The response of this TransactionStatusResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response
