# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_output import DisplayOutput
from openapi_server.models.transaction_action import TransactionAction
from openapi_server import util


class EnableServiceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_output: DisplayOutput=None, services_enabled: List[str]=None, transaction_action: TransactionAction=None):
        """EnableServiceRequest - a model defined in OpenAPI

        :param display_output: The display_output of this EnableServiceRequest.
        :param services_enabled: The services_enabled of this EnableServiceRequest.
        :param transaction_action: The transaction_action of this EnableServiceRequest.
        """
        self.openapi_types = {
            'display_output': DisplayOutput,
            'services_enabled': List[str],
            'transaction_action': TransactionAction
        }

        self.attribute_map = {
            'display_output': 'DisplayOutput',
            'services_enabled': 'ServicesEnabled',
            'transaction_action': 'TransactionAction'
        }

        self._display_output = display_output
        self._services_enabled = services_enabled
        self._transaction_action = transaction_action

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnableServiceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnableServiceRequest of this EnableServiceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_output(self):
        """Gets the display_output of this EnableServiceRequest.


        :return: The display_output of this EnableServiceRequest.
        :rtype: DisplayOutput
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this EnableServiceRequest.


        :param display_output: The display_output of this EnableServiceRequest.
        :type display_output: DisplayOutput
        """

        self._display_output = display_output

    @property
    def services_enabled(self):
        """Gets the services_enabled of this EnableServiceRequest.


        :return: The services_enabled of this EnableServiceRequest.
        :rtype: List[str]
        """
        return self._services_enabled

    @services_enabled.setter
    def services_enabled(self, services_enabled):
        """Sets the services_enabled of this EnableServiceRequest.


        :param services_enabled: The services_enabled of this EnableServiceRequest.
        :type services_enabled: List[str]
        """
        allowed_values = ["CardAcquisition", "Loyalty", "Payment"]  # noqa: E501
        if not set(services_enabled).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `services_enabled` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(services_enabled) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._services_enabled = services_enabled

    @property
    def transaction_action(self):
        """Gets the transaction_action of this EnableServiceRequest.


        :return: The transaction_action of this EnableServiceRequest.
        :rtype: TransactionAction
        """
        return self._transaction_action

    @transaction_action.setter
    def transaction_action(self, transaction_action):
        """Sets the transaction_action of this EnableServiceRequest.


        :param transaction_action: The transaction_action of this EnableServiceRequest.
        :type transaction_action: TransactionAction
        """
        if transaction_action is None:
            raise ValueError("Invalid value for `transaction_action`, must not be `None`")

        self._transaction_action = transaction_action
