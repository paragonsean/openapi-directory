# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_category import MessageCategory
from openapi_server.models.message_class import MessageClass
from openapi_server.models.message_type import MessageType
import re
from openapi_server import util


class MessageHeader(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, message_category: MessageCategory=None, message_class: MessageClass=None, message_type: MessageType=None, poiid: str=None, protocol_version: str=None, sale_id: str=None, service_id: str=None):
        """MessageHeader - a model defined in OpenAPI

        :param device_id: The device_id of this MessageHeader.
        :param message_category: The message_category of this MessageHeader.
        :param message_class: The message_class of this MessageHeader.
        :param message_type: The message_type of this MessageHeader.
        :param poiid: The poiid of this MessageHeader.
        :param protocol_version: The protocol_version of this MessageHeader.
        :param sale_id: The sale_id of this MessageHeader.
        :param service_id: The service_id of this MessageHeader.
        """
        self.openapi_types = {
            'device_id': str,
            'message_category': MessageCategory,
            'message_class': MessageClass,
            'message_type': MessageType,
            'poiid': str,
            'protocol_version': str,
            'sale_id': str,
            'service_id': str
        }

        self.attribute_map = {
            'device_id': 'DeviceID',
            'message_category': 'MessageCategory',
            'message_class': 'MessageClass',
            'message_type': 'MessageType',
            'poiid': 'POIID',
            'protocol_version': 'ProtocolVersion',
            'sale_id': 'SaleID',
            'service_id': 'ServiceID'
        }

        self._device_id = device_id
        self._message_category = message_category
        self._message_class = message_class
        self._message_type = message_type
        self._poiid = poiid
        self._protocol_version = protocol_version
        self._sale_id = sale_id
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageHeader':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageHeader of this MessageHeader.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this MessageHeader.

        If Device MessageClass.

        :return: The device_id of this MessageHeader.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MessageHeader.

        If Device MessageClass.

        :param device_id: The device_id of this MessageHeader.
        :type device_id: str
        """
        if device_id is not None and not re.search(r'^.{1,10}$', device_id):
            raise ValueError("Invalid value for `device_id`, must be a follow pattern or equal to `/^.{1,10}$/`")

        self._device_id = device_id

    @property
    def message_category(self):
        """Gets the message_category of this MessageHeader.


        :return: The message_category of this MessageHeader.
        :rtype: MessageCategory
        """
        return self._message_category

    @message_category.setter
    def message_category(self, message_category):
        """Sets the message_category of this MessageHeader.


        :param message_category: The message_category of this MessageHeader.
        :type message_category: MessageCategory
        """
        if message_category is None:
            raise ValueError("Invalid value for `message_category`, must not be `None`")

        self._message_category = message_category

    @property
    def message_class(self):
        """Gets the message_class of this MessageHeader.


        :return: The message_class of this MessageHeader.
        :rtype: MessageClass
        """
        return self._message_class

    @message_class.setter
    def message_class(self, message_class):
        """Sets the message_class of this MessageHeader.


        :param message_class: The message_class of this MessageHeader.
        :type message_class: MessageClass
        """
        if message_class is None:
            raise ValueError("Invalid value for `message_class`, must not be `None`")

        self._message_class = message_class

    @property
    def message_type(self):
        """Gets the message_type of this MessageHeader.


        :return: The message_type of this MessageHeader.
        :rtype: MessageType
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this MessageHeader.


        :param message_type: The message_type of this MessageHeader.
        :type message_type: MessageType
        """
        if message_type is None:
            raise ValueError("Invalid value for `message_type`, must not be `None`")

        self._message_type = message_type

    @property
    def poiid(self):
        """Gets the poiid of this MessageHeader.

        Identification of a POI System or a POI Terminal for the Sale to POI protocol.

        :return: The poiid of this MessageHeader.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this MessageHeader.

        Identification of a POI System or a POI Terminal for the Sale to POI protocol.

        :param poiid: The poiid of this MessageHeader.
        :type poiid: str
        """
        if poiid is None:
            raise ValueError("Invalid value for `poiid`, must not be `None`")
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid

    @property
    def protocol_version(self):
        """Gets the protocol_version of this MessageHeader.

        If MessageCategory is Login or Diagnosis.

        :return: The protocol_version of this MessageHeader.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this MessageHeader.

        If MessageCategory is Login or Diagnosis.

        :param protocol_version: The protocol_version of this MessageHeader.
        :type protocol_version: str
        """
        if protocol_version is not None and not re.search(r'^.+$', protocol_version):
            raise ValueError("Invalid value for `protocol_version`, must be a follow pattern or equal to `/^.+$/`")

        self._protocol_version = protocol_version

    @property
    def sale_id(self):
        """Gets the sale_id of this MessageHeader.

        Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.

        :return: The sale_id of this MessageHeader.
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this MessageHeader.

        Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.

        :param sale_id: The sale_id of this MessageHeader.
        :type sale_id: str
        """
        if sale_id is None:
            raise ValueError("Invalid value for `sale_id`, must not be `None`")
        if sale_id is not None and not re.search(r'^.+$', sale_id):
            raise ValueError("Invalid value for `sale_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_id = sale_id

    @property
    def service_id(self):
        """Gets the service_id of this MessageHeader.

        Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.

        :return: The service_id of this MessageHeader.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this MessageHeader.

        Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.

        :param service_id: The service_id of this MessageHeader.
        :type service_id: str
        """
        if service_id is not None and not re.search(r'^.{1,10}$', service_id):
            raise ValueError("Invalid value for `service_id`, must be a follow pattern or equal to `/^.{1,10}$/`")

        self._service_id = service_id
