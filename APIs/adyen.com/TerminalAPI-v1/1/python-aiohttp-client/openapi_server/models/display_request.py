# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_output import DisplayOutput
from openapi_server import util


class DisplayRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_output: List[DisplayOutput]=None):
        """DisplayRequest - a model defined in OpenAPI

        :param display_output: The display_output of this DisplayRequest.
        """
        self.openapi_types = {
            'display_output': List[DisplayOutput]
        }

        self.attribute_map = {
            'display_output': 'DisplayOutput'
        }

        self._display_output = display_output

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisplayRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisplayRequest of this DisplayRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_output(self):
        """Gets the display_output of this DisplayRequest.


        :return: The display_output of this DisplayRequest.
        :rtype: List[DisplayOutput]
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this DisplayRequest.


        :param display_output: The display_output of this DisplayRequest.
        :type display_output: List[DisplayOutput]
        """
        if display_output is None:
            raise ValueError("Invalid value for `display_output`, must not be `None`")

        self._display_output = display_output
