# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_account_id import LoyaltyAccountID
import re
from openapi_server import util


class LoyaltyAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loyalty_account_id: LoyaltyAccountID=None, loyalty_brand: str=None):
        """LoyaltyAccount - a model defined in OpenAPI

        :param loyalty_account_id: The loyalty_account_id of this LoyaltyAccount.
        :param loyalty_brand: The loyalty_brand of this LoyaltyAccount.
        """
        self.openapi_types = {
            'loyalty_account_id': LoyaltyAccountID,
            'loyalty_brand': str
        }

        self.attribute_map = {
            'loyalty_account_id': 'LoyaltyAccountID',
            'loyalty_brand': 'LoyaltyBrand'
        }

        self._loyalty_account_id = loyalty_account_id
        self._loyalty_brand = loyalty_brand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAccount of this LoyaltyAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loyalty_account_id(self):
        """Gets the loyalty_account_id of this LoyaltyAccount.


        :return: The loyalty_account_id of this LoyaltyAccount.
        :rtype: LoyaltyAccountID
        """
        return self._loyalty_account_id

    @loyalty_account_id.setter
    def loyalty_account_id(self, loyalty_account_id):
        """Sets the loyalty_account_id of this LoyaltyAccount.


        :param loyalty_account_id: The loyalty_account_id of this LoyaltyAccount.
        :type loyalty_account_id: LoyaltyAccountID
        """
        if loyalty_account_id is None:
            raise ValueError("Invalid value for `loyalty_account_id`, must not be `None`")

        self._loyalty_account_id = loyalty_account_id

    @property
    def loyalty_brand(self):
        """Gets the loyalty_brand of this LoyaltyAccount.

        If a card is analysed.

        :return: The loyalty_brand of this LoyaltyAccount.
        :rtype: str
        """
        return self._loyalty_brand

    @loyalty_brand.setter
    def loyalty_brand(self, loyalty_brand):
        """Sets the loyalty_brand of this LoyaltyAccount.

        If a card is analysed.

        :param loyalty_brand: The loyalty_brand of this LoyaltyAccount.
        :type loyalty_brand: str
        """
        if loyalty_brand is not None and not re.search(r'^.+$', loyalty_brand):
            raise ValueError("Invalid value for `loyalty_brand`, must be a follow pattern or equal to `/^.+$/`")

        self._loyalty_brand = loyalty_brand
