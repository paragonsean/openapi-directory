# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stored_value_account_id import StoredValueAccountID
from openapi_server import util


class StoredValueAccountStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_balance: float=None, stored_value_account_id: StoredValueAccountID=None):
        """StoredValueAccountStatus - a model defined in OpenAPI

        :param current_balance: The current_balance of this StoredValueAccountStatus.
        :param stored_value_account_id: The stored_value_account_id of this StoredValueAccountStatus.
        """
        self.openapi_types = {
            'current_balance': float,
            'stored_value_account_id': StoredValueAccountID
        }

        self.attribute_map = {
            'current_balance': 'CurrentBalance',
            'stored_value_account_id': 'StoredValueAccountID'
        }

        self._current_balance = current_balance
        self._stored_value_account_id = stored_value_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueAccountStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueAccountStatus of this StoredValueAccountStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_balance(self):
        """Gets the current_balance of this StoredValueAccountStatus.


        :return: The current_balance of this StoredValueAccountStatus.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this StoredValueAccountStatus.


        :param current_balance: The current_balance of this StoredValueAccountStatus.
        :type current_balance: float
        """
        if current_balance is not None and current_balance > 99999999.999999:
            raise ValueError("Invalid value for `current_balance`, must be a value less than or equal to `99999999.999999`")
        if current_balance is not None and current_balance < 0:
            raise ValueError("Invalid value for `current_balance`, must be a value greater than or equal to `0`")

        self._current_balance = current_balance

    @property
    def stored_value_account_id(self):
        """Gets the stored_value_account_id of this StoredValueAccountStatus.


        :return: The stored_value_account_id of this StoredValueAccountStatus.
        :rtype: StoredValueAccountID
        """
        return self._stored_value_account_id

    @stored_value_account_id.setter
    def stored_value_account_id(self, stored_value_account_id):
        """Sets the stored_value_account_id of this StoredValueAccountStatus.


        :param stored_value_account_id: The stored_value_account_id of this StoredValueAccountStatus.
        :type stored_value_account_id: StoredValueAccountID
        """
        if stored_value_account_id is None:
            raise ValueError("Invalid value for `stored_value_account_id`, must not be `None`")

        self._stored_value_account_id = stored_value_account_id
