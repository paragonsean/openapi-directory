# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allowed_product import AllowedProduct
from openapi_server.models.customer_order import CustomerOrder
from openapi_server.models.payment_token import PaymentToken
from openapi_server.models.sensitive_card_data import SensitiveCardData
import re
from openapi_server import util


class CardData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_product: List[AllowedProduct]=None, allowed_product_code: List[int]=None, card_country_code: int=None, customer_order: List[CustomerOrder]=None, entry_mode: List[str]=None, masked_pan: str=None, payment_account_ref: str=None, payment_brand: str=None, payment_token: PaymentToken=None, protected_card_data: str=None, sensitive_card_data: SensitiveCardData=None):
        """CardData - a model defined in OpenAPI

        :param allowed_product: The allowed_product of this CardData.
        :param allowed_product_code: The allowed_product_code of this CardData.
        :param card_country_code: The card_country_code of this CardData.
        :param customer_order: The customer_order of this CardData.
        :param entry_mode: The entry_mode of this CardData.
        :param masked_pan: The masked_pan of this CardData.
        :param payment_account_ref: The payment_account_ref of this CardData.
        :param payment_brand: The payment_brand of this CardData.
        :param payment_token: The payment_token of this CardData.
        :param protected_card_data: The protected_card_data of this CardData.
        :param sensitive_card_data: The sensitive_card_data of this CardData.
        """
        self.openapi_types = {
            'allowed_product': List[AllowedProduct],
            'allowed_product_code': List[int],
            'card_country_code': int,
            'customer_order': List[CustomerOrder],
            'entry_mode': List[str],
            'masked_pan': str,
            'payment_account_ref': str,
            'payment_brand': str,
            'payment_token': PaymentToken,
            'protected_card_data': str,
            'sensitive_card_data': SensitiveCardData
        }

        self.attribute_map = {
            'allowed_product': 'AllowedProduct',
            'allowed_product_code': 'AllowedProductCode',
            'card_country_code': 'CardCountryCode',
            'customer_order': 'CustomerOrder',
            'entry_mode': 'EntryMode',
            'masked_pan': 'MaskedPan',
            'payment_account_ref': 'PaymentAccountRef',
            'payment_brand': 'PaymentBrand',
            'payment_token': 'PaymentToken',
            'protected_card_data': 'ProtectedCardData',
            'sensitive_card_data': 'SensitiveCardData'
        }

        self._allowed_product = allowed_product
        self._allowed_product_code = allowed_product_code
        self._card_country_code = card_country_code
        self._customer_order = customer_order
        self._entry_mode = entry_mode
        self._masked_pan = masked_pan
        self._payment_account_ref = payment_account_ref
        self._payment_brand = payment_brand
        self._payment_token = payment_token
        self._protected_card_data = protected_card_data
        self._sensitive_card_data = sensitive_card_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardData of this CardData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_product(self):
        """Gets the allowed_product of this CardData.


        :return: The allowed_product of this CardData.
        :rtype: List[AllowedProduct]
        """
        return self._allowed_product

    @allowed_product.setter
    def allowed_product(self, allowed_product):
        """Sets the allowed_product of this CardData.


        :param allowed_product: The allowed_product of this CardData.
        :type allowed_product: List[AllowedProduct]
        """

        self._allowed_product = allowed_product

    @property
    def allowed_product_code(self):
        """Gets the allowed_product_code of this CardData.


        :return: The allowed_product_code of this CardData.
        :rtype: List[int]
        """
        return self._allowed_product_code

    @allowed_product_code.setter
    def allowed_product_code(self, allowed_product_code):
        """Sets the allowed_product_code of this CardData.


        :param allowed_product_code: The allowed_product_code of this CardData.
        :type allowed_product_code: List[int]
        """

        self._allowed_product_code = allowed_product_code

    @property
    def card_country_code(self):
        """Gets the card_country_code of this CardData.

        If available in the card.

        :return: The card_country_code of this CardData.
        :rtype: int
        """
        return self._card_country_code

    @card_country_code.setter
    def card_country_code(self, card_country_code):
        """Sets the card_country_code of this CardData.

        If available in the card.

        :param card_country_code: The card_country_code of this CardData.
        :type card_country_code: int
        """
        if card_country_code is not None and card_country_code > 3:
            raise ValueError("Invalid value for `card_country_code`, must be a value less than or equal to `3`")
        if card_country_code is not None and card_country_code < 3:
            raise ValueError("Invalid value for `card_country_code`, must be a value greater than or equal to `3`")

        self._card_country_code = card_country_code

    @property
    def customer_order(self):
        """Gets the customer_order of this CardData.


        :return: The customer_order of this CardData.
        :rtype: List[CustomerOrder]
        """
        return self._customer_order

    @customer_order.setter
    def customer_order(self, customer_order):
        """Sets the customer_order of this CardData.


        :param customer_order: The customer_order of this CardData.
        :type customer_order: List[CustomerOrder]
        """

        self._customer_order = customer_order

    @property
    def entry_mode(self):
        """Gets the entry_mode of this CardData.


        :return: The entry_mode of this CardData.
        :rtype: List[str]
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this CardData.


        :param entry_mode: The entry_mode of this CardData.
        :type entry_mode: List[str]
        """
        allowed_values = ["Contactless", "File", "ICC", "Keyed", "MagStripe", "Manual", "Mobile", "RFID", "Scanned", "SynchronousICC", "Tapped"]  # noqa: E501
        if not set(entry_mode).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entry_mode` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entry_mode) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entry_mode = entry_mode

    @property
    def masked_pan(self):
        """Gets the masked_pan of this CardData.


        :return: The masked_pan of this CardData.
        :rtype: str
        """
        return self._masked_pan

    @masked_pan.setter
    def masked_pan(self, masked_pan):
        """Sets the masked_pan of this CardData.


        :param masked_pan: The masked_pan of this CardData.
        :type masked_pan: str
        """
        if masked_pan is not None and not re.search(r'^.+$', masked_pan):
            raise ValueError("Invalid value for `masked_pan`, must be a follow pattern or equal to `/^.+$/`")

        self._masked_pan = masked_pan

    @property
    def payment_account_ref(self):
        """Gets the payment_account_ref of this CardData.


        :return: The payment_account_ref of this CardData.
        :rtype: str
        """
        return self._payment_account_ref

    @payment_account_ref.setter
    def payment_account_ref(self, payment_account_ref):
        """Sets the payment_account_ref of this CardData.


        :param payment_account_ref: The payment_account_ref of this CardData.
        :type payment_account_ref: str
        """
        if payment_account_ref is not None and not re.search(r'^.+$', payment_account_ref):
            raise ValueError("Invalid value for `payment_account_ref`, must be a follow pattern or equal to `/^.+$/`")

        self._payment_account_ref = payment_account_ref

    @property
    def payment_brand(self):
        """Gets the payment_brand of this CardData.

        If card PAN is readable .

        :return: The payment_brand of this CardData.
        :rtype: str
        """
        return self._payment_brand

    @payment_brand.setter
    def payment_brand(self, payment_brand):
        """Sets the payment_brand of this CardData.

        If card PAN is readable .

        :param payment_brand: The payment_brand of this CardData.
        :type payment_brand: str
        """
        if payment_brand is not None and not re.search(r'^.+$', payment_brand):
            raise ValueError("Invalid value for `payment_brand`, must be a follow pattern or equal to `/^.+$/`")

        self._payment_brand = payment_brand

    @property
    def payment_token(self):
        """Gets the payment_token of this CardData.


        :return: The payment_token of this CardData.
        :rtype: PaymentToken
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this CardData.


        :param payment_token: The payment_token of this CardData.
        :type payment_token: PaymentToken
        """

        self._payment_token = payment_token

    @property
    def protected_card_data(self):
        """Gets the protected_card_data of this CardData.

        SensitiveCardData protected by CMS EnvelopedData.

        :return: The protected_card_data of this CardData.
        :rtype: str
        """
        return self._protected_card_data

    @protected_card_data.setter
    def protected_card_data(self, protected_card_data):
        """Sets the protected_card_data of this CardData.

        SensitiveCardData protected by CMS EnvelopedData.

        :param protected_card_data: The protected_card_data of this CardData.
        :type protected_card_data: str
        """

        self._protected_card_data = protected_card_data

    @property
    def sensitive_card_data(self):
        """Gets the sensitive_card_data of this CardData.


        :return: The sensitive_card_data of this CardData.
        :rtype: SensitiveCardData
        """
        return self._sensitive_card_data

    @sensitive_card_data.setter
    def sensitive_card_data(self, sensitive_card_data):
        """Sets the sensitive_card_data of this CardData.


        :param sensitive_card_data: The sensitive_card_data of this CardData.
        :type sensitive_card_data: SensitiveCardData
        """

        self._sensitive_card_data = sensitive_card_data
