# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_data import TrackData
from openapi_server import util


class SensitiveCardData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_seq_numb: int=None, expiry_date: int=None, pan: int=None, track_data: List[TrackData]=None):
        """SensitiveCardData - a model defined in OpenAPI

        :param card_seq_numb: The card_seq_numb of this SensitiveCardData.
        :param expiry_date: The expiry_date of this SensitiveCardData.
        :param pan: The pan of this SensitiveCardData.
        :param track_data: The track_data of this SensitiveCardData.
        """
        self.openapi_types = {
            'card_seq_numb': int,
            'expiry_date': int,
            'pan': int,
            'track_data': List[TrackData]
        }

        self.attribute_map = {
            'card_seq_numb': 'CardSeqNumb',
            'expiry_date': 'ExpiryDate',
            'pan': 'PAN',
            'track_data': 'TrackData'
        }

        self._card_seq_numb = card_seq_numb
        self._expiry_date = expiry_date
        self._pan = pan
        self._track_data = track_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SensitiveCardData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SensitiveCardData of this SensitiveCardData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_seq_numb(self):
        """Gets the card_seq_numb of this SensitiveCardData.

        if EntryMode is File, Keyed or Manual.

        :return: The card_seq_numb of this SensitiveCardData.
        :rtype: int
        """
        return self._card_seq_numb

    @card_seq_numb.setter
    def card_seq_numb(self, card_seq_numb):
        """Sets the card_seq_numb of this SensitiveCardData.

        if EntryMode is File, Keyed or Manual.

        :param card_seq_numb: The card_seq_numb of this SensitiveCardData.
        :type card_seq_numb: int
        """
        if card_seq_numb is not None and card_seq_numb > 3:
            raise ValueError("Invalid value for `card_seq_numb`, must be a value less than or equal to `3`")
        if card_seq_numb is not None and card_seq_numb < 2:
            raise ValueError("Invalid value for `card_seq_numb`, must be a value greater than or equal to `2`")

        self._card_seq_numb = card_seq_numb

    @property
    def expiry_date(self):
        """Gets the expiry_date of this SensitiveCardData.

        if EntryMode is File.

        :return: The expiry_date of this SensitiveCardData.
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this SensitiveCardData.

        if EntryMode is File.

        :param expiry_date: The expiry_date of this SensitiveCardData.
        :type expiry_date: int
        """
        if expiry_date is not None and expiry_date > 4:
            raise ValueError("Invalid value for `expiry_date`, must be a value less than or equal to `4`")
        if expiry_date is not None and expiry_date < 4:
            raise ValueError("Invalid value for `expiry_date`, must be a value greater than or equal to `4`")

        self._expiry_date = expiry_date

    @property
    def pan(self):
        """Gets the pan of this SensitiveCardData.


        :return: The pan of this SensitiveCardData.
        :rtype: int
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this SensitiveCardData.


        :param pan: The pan of this SensitiveCardData.
        :type pan: int
        """
        if pan is not None and pan > 28:
            raise ValueError("Invalid value for `pan`, must be a value less than or equal to `28`")
        if pan is not None and pan < 8:
            raise ValueError("Invalid value for `pan`, must be a value greater than or equal to `8`")

        self._pan = pan

    @property
    def track_data(self):
        """Gets the track_data of this SensitiveCardData.


        :return: The track_data of this SensitiveCardData.
        :rtype: List[TrackData]
        """
        return self._track_data

    @track_data.setter
    def track_data(self, track_data):
        """Sets the track_data of this SensitiveCardData.


        :param track_data: The track_data of this SensitiveCardData.
        :type track_data: List[TrackData]
        """

        self._track_data = track_data
