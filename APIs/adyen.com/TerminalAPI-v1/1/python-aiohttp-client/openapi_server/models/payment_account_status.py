# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_acquirer_data import PaymentAcquirerData
from openapi_server.models.payment_instrument_data import PaymentInstrumentData
import re
from openapi_server import util


class PaymentAccountStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, current_balance: float=None, payment_acquirer_data: PaymentAcquirerData=None, payment_instrument_data: PaymentInstrumentData=None):
        """PaymentAccountStatus - a model defined in OpenAPI

        :param currency: The currency of this PaymentAccountStatus.
        :param current_balance: The current_balance of this PaymentAccountStatus.
        :param payment_acquirer_data: The payment_acquirer_data of this PaymentAccountStatus.
        :param payment_instrument_data: The payment_instrument_data of this PaymentAccountStatus.
        """
        self.openapi_types = {
            'currency': str,
            'current_balance': float,
            'payment_acquirer_data': PaymentAcquirerData,
            'payment_instrument_data': PaymentInstrumentData
        }

        self.attribute_map = {
            'currency': 'Currency',
            'current_balance': 'CurrentBalance',
            'payment_acquirer_data': 'PaymentAcquirerData',
            'payment_instrument_data': 'PaymentInstrumentData'
        }

        self._currency = currency
        self._current_balance = current_balance
        self._payment_acquirer_data = payment_acquirer_data
        self._payment_instrument_data = payment_instrument_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentAccountStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentAccountStatus of this PaymentAccountStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this PaymentAccountStatus.


        :return: The currency of this PaymentAccountStatus.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentAccountStatus.


        :param currency: The currency of this PaymentAccountStatus.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def current_balance(self):
        """Gets the current_balance of this PaymentAccountStatus.


        :return: The current_balance of this PaymentAccountStatus.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this PaymentAccountStatus.


        :param current_balance: The current_balance of this PaymentAccountStatus.
        :type current_balance: float
        """
        if current_balance is not None and current_balance > 99999999.999999:
            raise ValueError("Invalid value for `current_balance`, must be a value less than or equal to `99999999.999999`")
        if current_balance is not None and current_balance < 0:
            raise ValueError("Invalid value for `current_balance`, must be a value greater than or equal to `0`")

        self._current_balance = current_balance

    @property
    def payment_acquirer_data(self):
        """Gets the payment_acquirer_data of this PaymentAccountStatus.


        :return: The payment_acquirer_data of this PaymentAccountStatus.
        :rtype: PaymentAcquirerData
        """
        return self._payment_acquirer_data

    @payment_acquirer_data.setter
    def payment_acquirer_data(self, payment_acquirer_data):
        """Sets the payment_acquirer_data of this PaymentAccountStatus.


        :param payment_acquirer_data: The payment_acquirer_data of this PaymentAccountStatus.
        :type payment_acquirer_data: PaymentAcquirerData
        """

        self._payment_acquirer_data = payment_acquirer_data

    @property
    def payment_instrument_data(self):
        """Gets the payment_instrument_data of this PaymentAccountStatus.


        :return: The payment_instrument_data of this PaymentAccountStatus.
        :rtype: PaymentInstrumentData
        """
        return self._payment_instrument_data

    @payment_instrument_data.setter
    def payment_instrument_data(self, payment_instrument_data):
        """Sets the payment_instrument_data of this PaymentAccountStatus.


        :param payment_instrument_data: The payment_instrument_data of this PaymentAccountStatus.
        :type payment_instrument_data: PaymentInstrumentData
        """

        self._payment_instrument_data = payment_instrument_data
