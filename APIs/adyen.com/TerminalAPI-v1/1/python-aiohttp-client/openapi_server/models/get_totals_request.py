# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.total_filter import TotalFilter
from openapi_server import util


class GetTotalsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_details: List[str]=None, total_filter: TotalFilter=None):
        """GetTotalsRequest - a model defined in OpenAPI

        :param total_details: The total_details of this GetTotalsRequest.
        :param total_filter: The total_filter of this GetTotalsRequest.
        """
        self.openapi_types = {
            'total_details': List[str],
            'total_filter': TotalFilter
        }

        self.attribute_map = {
            'total_details': 'TotalDetails',
            'total_filter': 'TotalFilter'
        }

        self._total_details = total_details
        self._total_filter = total_filter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTotalsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetTotalsRequest of this GetTotalsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_details(self):
        """Gets the total_details of this GetTotalsRequest.


        :return: The total_details of this GetTotalsRequest.
        :rtype: List[str]
        """
        return self._total_details

    @total_details.setter
    def total_details(self, total_details):
        """Sets the total_details of this GetTotalsRequest.


        :param total_details: The total_details of this GetTotalsRequest.
        :type total_details: List[str]
        """
        allowed_values = ["OperatorID", "POIID", "SaleID", "ShiftNumber", "TotalsGroupID"]  # noqa: E501
        if not set(total_details).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `total_details` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(total_details) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._total_details = total_details

    @property
    def total_filter(self):
        """Gets the total_filter of this GetTotalsRequest.


        :return: The total_filter of this GetTotalsRequest.
        :rtype: TotalFilter
        """
        return self._total_filter

    @total_filter.setter
    def total_filter(self, total_filter):
        """Sets the total_filter of this GetTotalsRequest.


        :param total_filter: The total_filter of this GetTotalsRequest.
        :type total_filter: TotalFilter
        """

        self._total_filter = total_filter
