# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_result import LoyaltyResult
from openapi_server.models.poi_data import POIData
from openapi_server.models.payment_result import PaymentResult
from openapi_server.models.response import Response
from openapi_server.models.sale_data import SaleData
from openapi_server import util


class PerformedTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loyalty_result: List[LoyaltyResult]=None, poi_data: POIData=None, payment_result: PaymentResult=None, response: Response=None, reversed_amount: float=None, sale_data: SaleData=None):
        """PerformedTransaction - a model defined in OpenAPI

        :param loyalty_result: The loyalty_result of this PerformedTransaction.
        :param poi_data: The poi_data of this PerformedTransaction.
        :param payment_result: The payment_result of this PerformedTransaction.
        :param response: The response of this PerformedTransaction.
        :param reversed_amount: The reversed_amount of this PerformedTransaction.
        :param sale_data: The sale_data of this PerformedTransaction.
        """
        self.openapi_types = {
            'loyalty_result': List[LoyaltyResult],
            'poi_data': POIData,
            'payment_result': PaymentResult,
            'response': Response,
            'reversed_amount': float,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'loyalty_result': 'LoyaltyResult',
            'poi_data': 'POIData',
            'payment_result': 'PaymentResult',
            'response': 'Response',
            'reversed_amount': 'ReversedAmount',
            'sale_data': 'SaleData'
        }

        self._loyalty_result = loyalty_result
        self._poi_data = poi_data
        self._payment_result = payment_result
        self._response = response
        self._reversed_amount = reversed_amount
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformedTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformedTransaction of this PerformedTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loyalty_result(self):
        """Gets the loyalty_result of this PerformedTransaction.


        :return: The loyalty_result of this PerformedTransaction.
        :rtype: List[LoyaltyResult]
        """
        return self._loyalty_result

    @loyalty_result.setter
    def loyalty_result(self, loyalty_result):
        """Sets the loyalty_result of this PerformedTransaction.


        :param loyalty_result: The loyalty_result of this PerformedTransaction.
        :type loyalty_result: List[LoyaltyResult]
        """

        self._loyalty_result = loyalty_result

    @property
    def poi_data(self):
        """Gets the poi_data of this PerformedTransaction.


        :return: The poi_data of this PerformedTransaction.
        :rtype: POIData
        """
        return self._poi_data

    @poi_data.setter
    def poi_data(self, poi_data):
        """Sets the poi_data of this PerformedTransaction.


        :param poi_data: The poi_data of this PerformedTransaction.
        :type poi_data: POIData
        """

        self._poi_data = poi_data

    @property
    def payment_result(self):
        """Gets the payment_result of this PerformedTransaction.


        :return: The payment_result of this PerformedTransaction.
        :rtype: PaymentResult
        """
        return self._payment_result

    @payment_result.setter
    def payment_result(self, payment_result):
        """Sets the payment_result of this PerformedTransaction.


        :param payment_result: The payment_result of this PerformedTransaction.
        :type payment_result: PaymentResult
        """

        self._payment_result = payment_result

    @property
    def response(self):
        """Gets the response of this PerformedTransaction.


        :return: The response of this PerformedTransaction.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this PerformedTransaction.


        :param response: The response of this PerformedTransaction.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def reversed_amount(self):
        """Gets the reversed_amount of this PerformedTransaction.


        :return: The reversed_amount of this PerformedTransaction.
        :rtype: float
        """
        return self._reversed_amount

    @reversed_amount.setter
    def reversed_amount(self, reversed_amount):
        """Sets the reversed_amount of this PerformedTransaction.


        :param reversed_amount: The reversed_amount of this PerformedTransaction.
        :type reversed_amount: float
        """
        if reversed_amount is not None and reversed_amount > 99999999.999999:
            raise ValueError("Invalid value for `reversed_amount`, must be a value less than or equal to `99999999.999999`")
        if reversed_amount is not None and reversed_amount < 0:
            raise ValueError("Invalid value for `reversed_amount`, must be a value greater than or equal to `0`")

        self._reversed_amount = reversed_amount

    @property
    def sale_data(self):
        """Gets the sale_data of this PerformedTransaction.


        :return: The sale_data of this PerformedTransaction.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this PerformedTransaction.


        :param sale_data: The sale_data of this PerformedTransaction.
        :type sale_data: SaleData
        """

        self._sale_data = sale_data
