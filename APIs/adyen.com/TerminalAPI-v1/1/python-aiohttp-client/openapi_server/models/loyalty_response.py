# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_result import LoyaltyResult
from openapi_server.models.poi_data import POIData
from openapi_server.models.payment_receipt import PaymentReceipt
from openapi_server.models.response import Response
from openapi_server.models.sale_data import SaleData
from openapi_server import util


class LoyaltyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loyalty_result: List[LoyaltyResult]=None, poi_data: POIData=None, payment_receipt: List[PaymentReceipt]=None, response: Response=None, sale_data: SaleData=None):
        """LoyaltyResponse - a model defined in OpenAPI

        :param loyalty_result: The loyalty_result of this LoyaltyResponse.
        :param poi_data: The poi_data of this LoyaltyResponse.
        :param payment_receipt: The payment_receipt of this LoyaltyResponse.
        :param response: The response of this LoyaltyResponse.
        :param sale_data: The sale_data of this LoyaltyResponse.
        """
        self.openapi_types = {
            'loyalty_result': List[LoyaltyResult],
            'poi_data': POIData,
            'payment_receipt': List[PaymentReceipt],
            'response': Response,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'loyalty_result': 'LoyaltyResult',
            'poi_data': 'POIData',
            'payment_receipt': 'PaymentReceipt',
            'response': 'Response',
            'sale_data': 'SaleData'
        }

        self._loyalty_result = loyalty_result
        self._poi_data = poi_data
        self._payment_receipt = payment_receipt
        self._response = response
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyResponse of this LoyaltyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loyalty_result(self):
        """Gets the loyalty_result of this LoyaltyResponse.


        :return: The loyalty_result of this LoyaltyResponse.
        :rtype: List[LoyaltyResult]
        """
        return self._loyalty_result

    @loyalty_result.setter
    def loyalty_result(self, loyalty_result):
        """Sets the loyalty_result of this LoyaltyResponse.


        :param loyalty_result: The loyalty_result of this LoyaltyResponse.
        :type loyalty_result: List[LoyaltyResult]
        """

        self._loyalty_result = loyalty_result

    @property
    def poi_data(self):
        """Gets the poi_data of this LoyaltyResponse.


        :return: The poi_data of this LoyaltyResponse.
        :rtype: POIData
        """
        return self._poi_data

    @poi_data.setter
    def poi_data(self, poi_data):
        """Sets the poi_data of this LoyaltyResponse.


        :param poi_data: The poi_data of this LoyaltyResponse.
        :type poi_data: POIData
        """
        if poi_data is None:
            raise ValueError("Invalid value for `poi_data`, must not be `None`")

        self._poi_data = poi_data

    @property
    def payment_receipt(self):
        """Gets the payment_receipt of this LoyaltyResponse.


        :return: The payment_receipt of this LoyaltyResponse.
        :rtype: List[PaymentReceipt]
        """
        return self._payment_receipt

    @payment_receipt.setter
    def payment_receipt(self, payment_receipt):
        """Sets the payment_receipt of this LoyaltyResponse.


        :param payment_receipt: The payment_receipt of this LoyaltyResponse.
        :type payment_receipt: List[PaymentReceipt]
        """

        self._payment_receipt = payment_receipt

    @property
    def response(self):
        """Gets the response of this LoyaltyResponse.


        :return: The response of this LoyaltyResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this LoyaltyResponse.


        :param response: The response of this LoyaltyResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response

    @property
    def sale_data(self):
        """Gets the sale_data of this LoyaltyResponse.


        :return: The sale_data of this LoyaltyResponse.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this LoyaltyResponse.


        :param sale_data: The sale_data of this LoyaltyResponse.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data
