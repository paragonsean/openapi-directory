# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.display_output import DisplayOutput
from openapi_server.models.input_data import InputData
from openapi_server import util


class InputRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_output: DisplayOutput=None, input_data: InputData=None):
        """InputRequest - a model defined in OpenAPI

        :param display_output: The display_output of this InputRequest.
        :param input_data: The input_data of this InputRequest.
        """
        self.openapi_types = {
            'display_output': DisplayOutput,
            'input_data': InputData
        }

        self.attribute_map = {
            'display_output': 'DisplayOutput',
            'input_data': 'InputData'
        }

        self._display_output = display_output
        self._input_data = input_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputRequest of this InputRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_output(self):
        """Gets the display_output of this InputRequest.


        :return: The display_output of this InputRequest.
        :rtype: DisplayOutput
        """
        return self._display_output

    @display_output.setter
    def display_output(self, display_output):
        """Sets the display_output of this InputRequest.


        :param display_output: The display_output of this InputRequest.
        :type display_output: DisplayOutput
        """

        self._display_output = display_output

    @property
    def input_data(self):
        """Gets the input_data of this InputRequest.


        :return: The input_data of this InputRequest.
        :rtype: InputData
        """
        return self._input_data

    @input_data.setter
    def input_data(self, input_data):
        """Sets the input_data of this InputRequest.


        :param input_data: The input_data of this InputRequest.
        :type input_data: InputData
        """
        if input_data is None:
            raise ValueError("Invalid value for `input_data`, must not be `None`")

        self._input_data = input_data
