# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_qualifier import DocumentQualifier
from openapi_server.models.response import Response
from openapi_server import util


class PrintResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_qualifier: DocumentQualifier=None, response: Response=None):
        """PrintResponse - a model defined in OpenAPI

        :param document_qualifier: The document_qualifier of this PrintResponse.
        :param response: The response of this PrintResponse.
        """
        self.openapi_types = {
            'document_qualifier': DocumentQualifier,
            'response': Response
        }

        self.attribute_map = {
            'document_qualifier': 'DocumentQualifier',
            'response': 'Response'
        }

        self._document_qualifier = document_qualifier
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrintResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrintResponse of this PrintResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_qualifier(self):
        """Gets the document_qualifier of this PrintResponse.


        :return: The document_qualifier of this PrintResponse.
        :rtype: DocumentQualifier
        """
        return self._document_qualifier

    @document_qualifier.setter
    def document_qualifier(self, document_qualifier):
        """Sets the document_qualifier of this PrintResponse.


        :param document_qualifier: The document_qualifier of this PrintResponse.
        :type document_qualifier: DocumentQualifier
        """
        if document_qualifier is None:
            raise ValueError("Invalid value for `document_qualifier`, must not be `None`")

        self._document_qualifier = document_qualifier

    @property
    def response(self):
        """Gets the response of this PrintResponse.


        :return: The response of this PrintResponse.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this PrintResponse.


        :param response: The response of this PrintResponse.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response
