# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alignment import Alignment
from openapi_server.models.character_height import CharacterHeight
from openapi_server.models.character_style import CharacterStyle
from openapi_server.models.character_width import CharacterWidth
from openapi_server.models.color import Color
import re
from openapi_server import util


class OutputText(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: Alignment=None, character_height: CharacterHeight=None, character_set: int=None, character_style: CharacterStyle=None, character_width: CharacterWidth=None, color: Color=None, end_of_line_flag: bool=True, font: str=None, start_column: int=None, start_row: int=None, text: str=None):
        """OutputText - a model defined in OpenAPI

        :param alignment: The alignment of this OutputText.
        :param character_height: The character_height of this OutputText.
        :param character_set: The character_set of this OutputText.
        :param character_style: The character_style of this OutputText.
        :param character_width: The character_width of this OutputText.
        :param color: The color of this OutputText.
        :param end_of_line_flag: The end_of_line_flag of this OutputText.
        :param font: The font of this OutputText.
        :param start_column: The start_column of this OutputText.
        :param start_row: The start_row of this OutputText.
        :param text: The text of this OutputText.
        """
        self.openapi_types = {
            'alignment': Alignment,
            'character_height': CharacterHeight,
            'character_set': int,
            'character_style': CharacterStyle,
            'character_width': CharacterWidth,
            'color': Color,
            'end_of_line_flag': bool,
            'font': str,
            'start_column': int,
            'start_row': int,
            'text': str
        }

        self.attribute_map = {
            'alignment': 'Alignment',
            'character_height': 'CharacterHeight',
            'character_set': 'CharacterSet',
            'character_style': 'CharacterStyle',
            'character_width': 'CharacterWidth',
            'color': 'Color',
            'end_of_line_flag': 'EndOfLineFlag',
            'font': 'Font',
            'start_column': 'StartColumn',
            'start_row': 'StartRow',
            'text': 'Text'
        }

        self._alignment = alignment
        self._character_height = character_height
        self._character_set = character_set
        self._character_style = character_style
        self._character_width = character_width
        self._color = color
        self._end_of_line_flag = end_of_line_flag
        self._font = font
        self._start_column = start_column
        self._start_row = start_row
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputText':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputText of this OutputText.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this OutputText.


        :return: The alignment of this OutputText.
        :rtype: Alignment
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this OutputText.


        :param alignment: The alignment of this OutputText.
        :type alignment: Alignment
        """

        self._alignment = alignment

    @property
    def character_height(self):
        """Gets the character_height of this OutputText.


        :return: The character_height of this OutputText.
        :rtype: CharacterHeight
        """
        return self._character_height

    @character_height.setter
    def character_height(self, character_height):
        """Sets the character_height of this OutputText.


        :param character_height: The character_height of this OutputText.
        :type character_height: CharacterHeight
        """

        self._character_height = character_height

    @property
    def character_set(self):
        """Gets the character_set of this OutputText.


        :return: The character_set of this OutputText.
        :rtype: int
        """
        return self._character_set

    @character_set.setter
    def character_set(self, character_set):
        """Sets the character_set of this OutputText.


        :param character_set: The character_set of this OutputText.
        :type character_set: int
        """

        self._character_set = character_set

    @property
    def character_style(self):
        """Gets the character_style of this OutputText.


        :return: The character_style of this OutputText.
        :rtype: CharacterStyle
        """
        return self._character_style

    @character_style.setter
    def character_style(self, character_style):
        """Sets the character_style of this OutputText.


        :param character_style: The character_style of this OutputText.
        :type character_style: CharacterStyle
        """

        self._character_style = character_style

    @property
    def character_width(self):
        """Gets the character_width of this OutputText.


        :return: The character_width of this OutputText.
        :rtype: CharacterWidth
        """
        return self._character_width

    @character_width.setter
    def character_width(self, character_width):
        """Sets the character_width of this OutputText.


        :param character_width: The character_width of this OutputText.
        :type character_width: CharacterWidth
        """

        self._character_width = character_width

    @property
    def color(self):
        """Gets the color of this OutputText.


        :return: The color of this OutputText.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this OutputText.


        :param color: The color of this OutputText.
        :type color: Color
        """

        self._color = color

    @property
    def end_of_line_flag(self):
        """Gets the end_of_line_flag of this OutputText.


        :return: The end_of_line_flag of this OutputText.
        :rtype: bool
        """
        return self._end_of_line_flag

    @end_of_line_flag.setter
    def end_of_line_flag(self, end_of_line_flag):
        """Sets the end_of_line_flag of this OutputText.


        :param end_of_line_flag: The end_of_line_flag of this OutputText.
        :type end_of_line_flag: bool
        """

        self._end_of_line_flag = end_of_line_flag

    @property
    def font(self):
        """Gets the font of this OutputText.


        :return: The font of this OutputText.
        :rtype: str
        """
        return self._font

    @font.setter
    def font(self, font):
        """Sets the font of this OutputText.


        :param font: The font of this OutputText.
        :type font: str
        """
        if font is not None and not re.search(r'^.+$', font):
            raise ValueError("Invalid value for `font`, must be a follow pattern or equal to `/^.+$/`")

        self._font = font

    @property
    def start_column(self):
        """Gets the start_column of this OutputText.


        :return: The start_column of this OutputText.
        :rtype: int
        """
        return self._start_column

    @start_column.setter
    def start_column(self, start_column):
        """Sets the start_column of this OutputText.


        :param start_column: The start_column of this OutputText.
        :type start_column: int
        """
        if start_column is not None and start_column > 500:
            raise ValueError("Invalid value for `start_column`, must be a value less than or equal to `500`")
        if start_column is not None and start_column < 1:
            raise ValueError("Invalid value for `start_column`, must be a value greater than or equal to `1`")

        self._start_column = start_column

    @property
    def start_row(self):
        """Gets the start_row of this OutputText.


        :return: The start_row of this OutputText.
        :rtype: int
        """
        return self._start_row

    @start_row.setter
    def start_row(self, start_row):
        """Sets the start_row of this OutputText.


        :param start_row: The start_row of this OutputText.
        :type start_row: int
        """
        if start_row is not None and start_row > 500:
            raise ValueError("Invalid value for `start_row`, must be a value less than or equal to `500`")
        if start_row is not None and start_row < 1:
            raise ValueError("Invalid value for `start_row`, must be a value greater than or equal to `1`")

        self._start_row = start_row

    @property
    def text(self):
        """Gets the text of this OutputText.


        :return: The text of this OutputText.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this OutputText.


        :param text: The text of this OutputText.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")

        self._text = text
