# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sale_data import SaleData
from openapi_server.models.stored_value_data import StoredValueData
import re
from openapi_server import util


class StoredValueRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_language: str=None, sale_data: SaleData=None, stored_value_data: List[StoredValueData]=None):
        """StoredValueRequest - a model defined in OpenAPI

        :param customer_language: The customer_language of this StoredValueRequest.
        :param sale_data: The sale_data of this StoredValueRequest.
        :param stored_value_data: The stored_value_data of this StoredValueRequest.
        """
        self.openapi_types = {
            'customer_language': str,
            'sale_data': SaleData,
            'stored_value_data': List[StoredValueData]
        }

        self.attribute_map = {
            'customer_language': 'CustomerLanguage',
            'sale_data': 'SaleData',
            'stored_value_data': 'StoredValueData'
        }

        self._customer_language = customer_language
        self._sale_data = sale_data
        self._stored_value_data = stored_value_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueRequest of this StoredValueRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_language(self):
        """Gets the customer_language of this StoredValueRequest.

        If the language is selected by the Sale System before the request to the POI.

        :return: The customer_language of this StoredValueRequest.
        :rtype: str
        """
        return self._customer_language

    @customer_language.setter
    def customer_language(self, customer_language):
        """Sets the customer_language of this StoredValueRequest.

        If the language is selected by the Sale System before the request to the POI.

        :param customer_language: The customer_language of this StoredValueRequest.
        :type customer_language: str
        """
        if customer_language is not None and not re.search(r'^[a-z]{2,2}$', customer_language):
            raise ValueError("Invalid value for `customer_language`, must be a follow pattern or equal to `/^[a-z]{2,2}$/`")

        self._customer_language = customer_language

    @property
    def sale_data(self):
        """Gets the sale_data of this StoredValueRequest.


        :return: The sale_data of this StoredValueRequest.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this StoredValueRequest.


        :param sale_data: The sale_data of this StoredValueRequest.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data

    @property
    def stored_value_data(self):
        """Gets the stored_value_data of this StoredValueRequest.


        :return: The stored_value_data of this StoredValueRequest.
        :rtype: List[StoredValueData]
        """
        return self._stored_value_data

    @stored_value_data.setter
    def stored_value_data(self, stored_value_data):
        """Sets the stored_value_data of this StoredValueRequest.


        :param stored_value_data: The stored_value_data of this StoredValueRequest.
        :type stored_value_data: List[StoredValueData]
        """
        if stored_value_data is None:
            raise ValueError("Invalid value for `stored_value_data`, must not be `None`")

        self._stored_value_data = stored_value_data
