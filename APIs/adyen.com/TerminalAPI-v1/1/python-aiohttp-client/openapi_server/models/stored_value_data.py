# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.original_poi_transaction import OriginalPOITransaction
from openapi_server.models.stored_value_account_id import StoredValueAccountID
from openapi_server.models.stored_value_transaction_type import StoredValueTransactionType
import re
from openapi_server import util


class StoredValueData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, ean_upc: int=None, item_amount: float=None, original_poi_transaction: OriginalPOITransaction=None, product_code: int=None, stored_value_account_id: StoredValueAccountID=None, stored_value_provider: str=None, stored_value_transaction_type: StoredValueTransactionType=None):
        """StoredValueData - a model defined in OpenAPI

        :param currency: The currency of this StoredValueData.
        :param ean_upc: The ean_upc of this StoredValueData.
        :param item_amount: The item_amount of this StoredValueData.
        :param original_poi_transaction: The original_poi_transaction of this StoredValueData.
        :param product_code: The product_code of this StoredValueData.
        :param stored_value_account_id: The stored_value_account_id of this StoredValueData.
        :param stored_value_provider: The stored_value_provider of this StoredValueData.
        :param stored_value_transaction_type: The stored_value_transaction_type of this StoredValueData.
        """
        self.openapi_types = {
            'currency': str,
            'ean_upc': int,
            'item_amount': float,
            'original_poi_transaction': OriginalPOITransaction,
            'product_code': int,
            'stored_value_account_id': StoredValueAccountID,
            'stored_value_provider': str,
            'stored_value_transaction_type': StoredValueTransactionType
        }

        self.attribute_map = {
            'currency': 'Currency',
            'ean_upc': 'EanUpc',
            'item_amount': 'ItemAmount',
            'original_poi_transaction': 'OriginalPOITransaction',
            'product_code': 'ProductCode',
            'stored_value_account_id': 'StoredValueAccountID',
            'stored_value_provider': 'StoredValueProvider',
            'stored_value_transaction_type': 'StoredValueTransactionType'
        }

        self._currency = currency
        self._ean_upc = ean_upc
        self._item_amount = item_amount
        self._original_poi_transaction = original_poi_transaction
        self._product_code = product_code
        self._stored_value_account_id = stored_value_account_id
        self._stored_value_provider = stored_value_provider
        self._stored_value_transaction_type = stored_value_transaction_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueData of this StoredValueData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this StoredValueData.

        Currency of a monetary amount.

        :return: The currency of this StoredValueData.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this StoredValueData.

        Currency of a monetary amount.

        :param currency: The currency of this StoredValueData.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def ean_upc(self):
        """Gets the ean_upc of this StoredValueData.

        Standard product code of item purchased with the transaction.

        :return: The ean_upc of this StoredValueData.
        :rtype: int
        """
        return self._ean_upc

    @ean_upc.setter
    def ean_upc(self, ean_upc):
        """Sets the ean_upc of this StoredValueData.

        Standard product code of item purchased with the transaction.

        :param ean_upc: The ean_upc of this StoredValueData.
        :type ean_upc: int
        """

        self._ean_upc = ean_upc

    @property
    def item_amount(self):
        """Gets the item_amount of this StoredValueData.

        Total amount of the item line.

        :return: The item_amount of this StoredValueData.
        :rtype: float
        """
        return self._item_amount

    @item_amount.setter
    def item_amount(self, item_amount):
        """Sets the item_amount of this StoredValueData.

        Total amount of the item line.

        :param item_amount: The item_amount of this StoredValueData.
        :type item_amount: float
        """
        if item_amount is not None and item_amount > 99999999.999999:
            raise ValueError("Invalid value for `item_amount`, must be a value less than or equal to `99999999.999999`")
        if item_amount is not None and item_amount < 0:
            raise ValueError("Invalid value for `item_amount`, must be a value greater than or equal to `0`")

        self._item_amount = item_amount

    @property
    def original_poi_transaction(self):
        """Gets the original_poi_transaction of this StoredValueData.


        :return: The original_poi_transaction of this StoredValueData.
        :rtype: OriginalPOITransaction
        """
        return self._original_poi_transaction

    @original_poi_transaction.setter
    def original_poi_transaction(self, original_poi_transaction):
        """Sets the original_poi_transaction of this StoredValueData.


        :param original_poi_transaction: The original_poi_transaction of this StoredValueData.
        :type original_poi_transaction: OriginalPOITransaction
        """

        self._original_poi_transaction = original_poi_transaction

    @property
    def product_code(self):
        """Gets the product_code of this StoredValueData.

        Product code of item purchased with the transaction.

        :return: The product_code of this StoredValueData.
        :rtype: int
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this StoredValueData.

        Product code of item purchased with the transaction.

        :param product_code: The product_code of this StoredValueData.
        :type product_code: int
        """
        if product_code is not None and product_code > 20:
            raise ValueError("Invalid value for `product_code`, must be a value less than or equal to `20`")
        if product_code is not None and product_code < 1:
            raise ValueError("Invalid value for `product_code`, must be a value greater than or equal to `1`")

        self._product_code = product_code

    @property
    def stored_value_account_id(self):
        """Gets the stored_value_account_id of this StoredValueData.


        :return: The stored_value_account_id of this StoredValueData.
        :rtype: StoredValueAccountID
        """
        return self._stored_value_account_id

    @stored_value_account_id.setter
    def stored_value_account_id(self, stored_value_account_id):
        """Sets the stored_value_account_id of this StoredValueData.


        :param stored_value_account_id: The stored_value_account_id of this StoredValueData.
        :type stored_value_account_id: StoredValueAccountID
        """

        self._stored_value_account_id = stored_value_account_id

    @property
    def stored_value_provider(self):
        """Gets the stored_value_provider of this StoredValueData.

        If more than one provider to manage on the POI, and StoredValueAccountID absent.

        :return: The stored_value_provider of this StoredValueData.
        :rtype: str
        """
        return self._stored_value_provider

    @stored_value_provider.setter
    def stored_value_provider(self, stored_value_provider):
        """Sets the stored_value_provider of this StoredValueData.

        If more than one provider to manage on the POI, and StoredValueAccountID absent.

        :param stored_value_provider: The stored_value_provider of this StoredValueData.
        :type stored_value_provider: str
        """
        if stored_value_provider is not None and not re.search(r'^.+$', stored_value_provider):
            raise ValueError("Invalid value for `stored_value_provider`, must be a follow pattern or equal to `/^.+$/`")

        self._stored_value_provider = stored_value_provider

    @property
    def stored_value_transaction_type(self):
        """Gets the stored_value_transaction_type of this StoredValueData.


        :return: The stored_value_transaction_type of this StoredValueData.
        :rtype: StoredValueTransactionType
        """
        return self._stored_value_transaction_type

    @stored_value_transaction_type.setter
    def stored_value_transaction_type(self, stored_value_transaction_type):
        """Sets the stored_value_transaction_type of this StoredValueData.


        :param stored_value_transaction_type: The stored_value_transaction_type of this StoredValueData.
        :type stored_value_transaction_type: StoredValueTransactionType
        """
        if stored_value_transaction_type is None:
            raise ValueError("Invalid value for `stored_value_transaction_type`, must not be `None`")

        self._stored_value_transaction_type = stored_value_transaction_type
