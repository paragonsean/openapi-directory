# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coins_or_bills import CoinsOrBills
import re
from openapi_server import util


class CashHandlingDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_handling_ok_flag: bool=None, coins_or_bills: List[CoinsOrBills]=None, currency: str=None):
        """CashHandlingDevice - a model defined in OpenAPI

        :param cash_handling_ok_flag: The cash_handling_ok_flag of this CashHandlingDevice.
        :param coins_or_bills: The coins_or_bills of this CashHandlingDevice.
        :param currency: The currency of this CashHandlingDevice.
        """
        self.openapi_types = {
            'cash_handling_ok_flag': bool,
            'coins_or_bills': List[CoinsOrBills],
            'currency': str
        }

        self.attribute_map = {
            'cash_handling_ok_flag': 'CashHandlingOKFlag',
            'coins_or_bills': 'CoinsOrBills',
            'currency': 'Currency'
        }

        self._cash_handling_ok_flag = cash_handling_ok_flag
        self._coins_or_bills = coins_or_bills
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CashHandlingDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CashHandlingDevice of this CashHandlingDevice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_handling_ok_flag(self):
        """Gets the cash_handling_ok_flag of this CashHandlingDevice.

        Indicates if the cash handling device is working and usable.

        :return: The cash_handling_ok_flag of this CashHandlingDevice.
        :rtype: bool
        """
        return self._cash_handling_ok_flag

    @cash_handling_ok_flag.setter
    def cash_handling_ok_flag(self, cash_handling_ok_flag):
        """Sets the cash_handling_ok_flag of this CashHandlingDevice.

        Indicates if the cash handling device is working and usable.

        :param cash_handling_ok_flag: The cash_handling_ok_flag of this CashHandlingDevice.
        :type cash_handling_ok_flag: bool
        """
        if cash_handling_ok_flag is None:
            raise ValueError("Invalid value for `cash_handling_ok_flag`, must not be `None`")

        self._cash_handling_ok_flag = cash_handling_ok_flag

    @property
    def coins_or_bills(self):
        """Gets the coins_or_bills of this CashHandlingDevice.


        :return: The coins_or_bills of this CashHandlingDevice.
        :rtype: List[CoinsOrBills]
        """
        return self._coins_or_bills

    @coins_or_bills.setter
    def coins_or_bills(self, coins_or_bills):
        """Sets the coins_or_bills of this CashHandlingDevice.


        :param coins_or_bills: The coins_or_bills of this CashHandlingDevice.
        :type coins_or_bills: List[CoinsOrBills]
        """
        if coins_or_bills is None:
            raise ValueError("Invalid value for `coins_or_bills`, must not be `None`")

        self._coins_or_bills = coins_or_bills

    @property
    def currency(self):
        """Gets the currency of this CashHandlingDevice.

        Currency of a monetary amount.

        :return: The currency of this CashHandlingDevice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CashHandlingDevice.

        Currency of a monetary amount.

        :param currency: The currency of this CashHandlingDevice.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency
