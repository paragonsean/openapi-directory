# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reconciliation_type import ReconciliationType
from openapi_server import util


class ReconciliationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: List[int]=None, poi_reconciliation_id: int=None, reconciliation_type: ReconciliationType=None):
        """ReconciliationRequest - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this ReconciliationRequest.
        :param poi_reconciliation_id: The poi_reconciliation_id of this ReconciliationRequest.
        :param reconciliation_type: The reconciliation_type of this ReconciliationRequest.
        """
        self.openapi_types = {
            'acquirer_id': List[int],
            'poi_reconciliation_id': int,
            'reconciliation_type': ReconciliationType
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'poi_reconciliation_id': 'POIReconciliationID',
            'reconciliation_type': 'ReconciliationType'
        }

        self._acquirer_id = acquirer_id
        self._poi_reconciliation_id = poi_reconciliation_id
        self._reconciliation_type = reconciliation_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReconciliationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReconciliationRequest of this ReconciliationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this ReconciliationRequest.


        :return: The acquirer_id of this ReconciliationRequest.
        :rtype: List[int]
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this ReconciliationRequest.


        :param acquirer_id: The acquirer_id of this ReconciliationRequest.
        :type acquirer_id: List[int]
        """

        self._acquirer_id = acquirer_id

    @property
    def poi_reconciliation_id(self):
        """Gets the poi_reconciliation_id of this ReconciliationRequest.

        Absent if ReconciliationType is not PreviousReconciliation.

        :return: The poi_reconciliation_id of this ReconciliationRequest.
        :rtype: int
        """
        return self._poi_reconciliation_id

    @poi_reconciliation_id.setter
    def poi_reconciliation_id(self, poi_reconciliation_id):
        """Sets the poi_reconciliation_id of this ReconciliationRequest.

        Absent if ReconciliationType is not PreviousReconciliation.

        :param poi_reconciliation_id: The poi_reconciliation_id of this ReconciliationRequest.
        :type poi_reconciliation_id: int
        """

        self._poi_reconciliation_id = poi_reconciliation_id

    @property
    def reconciliation_type(self):
        """Gets the reconciliation_type of this ReconciliationRequest.


        :return: The reconciliation_type of this ReconciliationRequest.
        :rtype: ReconciliationType
        """
        return self._reconciliation_type

    @reconciliation_type.setter
    def reconciliation_type(self, reconciliation_type):
        """Sets the reconciliation_type of this ReconciliationRequest.


        :param reconciliation_type: The reconciliation_type of this ReconciliationRequest.
        :type reconciliation_type: ReconciliationType
        """
        if reconciliation_type is None:
            raise ValueError("Invalid value for `reconciliation_type`, must not be `None`")

        self._reconciliation_type = reconciliation_type
