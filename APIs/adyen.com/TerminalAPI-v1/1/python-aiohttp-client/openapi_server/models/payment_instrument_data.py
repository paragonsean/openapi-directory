# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_data import CardData
from openapi_server.models.check_data import CheckData
from openapi_server.models.mobile_data import MobileData
from openapi_server.models.payment_instrument_type import PaymentInstrumentType
from openapi_server.models.stored_value_account_id import StoredValueAccountID
from openapi_server import util


class PaymentInstrumentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_data: CardData=None, check_data: CheckData=None, mobile_data: MobileData=None, payment_instrument_type: PaymentInstrumentType=None, protected_card_data: str=None, stored_value_account_id: StoredValueAccountID=None):
        """PaymentInstrumentData - a model defined in OpenAPI

        :param card_data: The card_data of this PaymentInstrumentData.
        :param check_data: The check_data of this PaymentInstrumentData.
        :param mobile_data: The mobile_data of this PaymentInstrumentData.
        :param payment_instrument_type: The payment_instrument_type of this PaymentInstrumentData.
        :param protected_card_data: The protected_card_data of this PaymentInstrumentData.
        :param stored_value_account_id: The stored_value_account_id of this PaymentInstrumentData.
        """
        self.openapi_types = {
            'card_data': CardData,
            'check_data': CheckData,
            'mobile_data': MobileData,
            'payment_instrument_type': PaymentInstrumentType,
            'protected_card_data': str,
            'stored_value_account_id': StoredValueAccountID
        }

        self.attribute_map = {
            'card_data': 'CardData',
            'check_data': 'CheckData',
            'mobile_data': 'MobileData',
            'payment_instrument_type': 'PaymentInstrumentType',
            'protected_card_data': 'ProtectedCardData',
            'stored_value_account_id': 'StoredValueAccountID'
        }

        self._card_data = card_data
        self._check_data = check_data
        self._mobile_data = mobile_data
        self._payment_instrument_type = payment_instrument_type
        self._protected_card_data = protected_card_data
        self._stored_value_account_id = stored_value_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrumentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrumentData of this PaymentInstrumentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_data(self):
        """Gets the card_data of this PaymentInstrumentData.


        :return: The card_data of this PaymentInstrumentData.
        :rtype: CardData
        """
        return self._card_data

    @card_data.setter
    def card_data(self, card_data):
        """Sets the card_data of this PaymentInstrumentData.


        :param card_data: The card_data of this PaymentInstrumentData.
        :type card_data: CardData
        """

        self._card_data = card_data

    @property
    def check_data(self):
        """Gets the check_data of this PaymentInstrumentData.


        :return: The check_data of this PaymentInstrumentData.
        :rtype: CheckData
        """
        return self._check_data

    @check_data.setter
    def check_data(self, check_data):
        """Sets the check_data of this PaymentInstrumentData.


        :param check_data: The check_data of this PaymentInstrumentData.
        :type check_data: CheckData
        """

        self._check_data = check_data

    @property
    def mobile_data(self):
        """Gets the mobile_data of this PaymentInstrumentData.


        :return: The mobile_data of this PaymentInstrumentData.
        :rtype: MobileData
        """
        return self._mobile_data

    @mobile_data.setter
    def mobile_data(self, mobile_data):
        """Sets the mobile_data of this PaymentInstrumentData.


        :param mobile_data: The mobile_data of this PaymentInstrumentData.
        :type mobile_data: MobileData
        """

        self._mobile_data = mobile_data

    @property
    def payment_instrument_type(self):
        """Gets the payment_instrument_type of this PaymentInstrumentData.


        :return: The payment_instrument_type of this PaymentInstrumentData.
        :rtype: PaymentInstrumentType
        """
        return self._payment_instrument_type

    @payment_instrument_type.setter
    def payment_instrument_type(self, payment_instrument_type):
        """Sets the payment_instrument_type of this PaymentInstrumentData.


        :param payment_instrument_type: The payment_instrument_type of this PaymentInstrumentData.
        :type payment_instrument_type: PaymentInstrumentType
        """
        if payment_instrument_type is None:
            raise ValueError("Invalid value for `payment_instrument_type`, must not be `None`")

        self._payment_instrument_type = payment_instrument_type

    @property
    def protected_card_data(self):
        """Gets the protected_card_data of this PaymentInstrumentData.


        :return: The protected_card_data of this PaymentInstrumentData.
        :rtype: str
        """
        return self._protected_card_data

    @protected_card_data.setter
    def protected_card_data(self, protected_card_data):
        """Sets the protected_card_data of this PaymentInstrumentData.


        :param protected_card_data: The protected_card_data of this PaymentInstrumentData.
        :type protected_card_data: str
        """

        self._protected_card_data = protected_card_data

    @property
    def stored_value_account_id(self):
        """Gets the stored_value_account_id of this PaymentInstrumentData.


        :return: The stored_value_account_id of this PaymentInstrumentData.
        :rtype: StoredValueAccountID
        """
        return self._stored_value_account_id

    @stored_value_account_id.setter
    def stored_value_account_id(self, stored_value_account_id):
        """Sets the stored_value_account_id of this PaymentInstrumentData.


        :param stored_value_account_id: The stored_value_account_id of this PaymentInstrumentData.
        :type stored_value_account_id: StoredValueAccountID
        """

        self._stored_value_account_id = stored_value_account_id
