# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class POISoftware(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_name: str=None, certification_code: str=None, manufacturer_id: str=None, software_version: str=None):
        """POISoftware - a model defined in OpenAPI

        :param application_name: The application_name of this POISoftware.
        :param certification_code: The certification_code of this POISoftware.
        :param manufacturer_id: The manufacturer_id of this POISoftware.
        :param software_version: The software_version of this POISoftware.
        """
        self.openapi_types = {
            'application_name': str,
            'certification_code': str,
            'manufacturer_id': str,
            'software_version': str
        }

        self.attribute_map = {
            'application_name': 'ApplicationName',
            'certification_code': 'CertificationCode',
            'manufacturer_id': 'ManufacturerID',
            'software_version': 'SoftwareVersion'
        }

        self._application_name = application_name
        self._certification_code = certification_code
        self._manufacturer_id = manufacturer_id
        self._software_version = software_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'POISoftware':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The POISoftware of this POISoftware.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_name(self):
        """Gets the application_name of this POISoftware.


        :return: The application_name of this POISoftware.
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this POISoftware.


        :param application_name: The application_name of this POISoftware.
        :type application_name: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")
        if application_name is not None and not re.search(r'^.+$', application_name):
            raise ValueError("Invalid value for `application_name`, must be a follow pattern or equal to `/^.+$/`")

        self._application_name = application_name

    @property
    def certification_code(self):
        """Gets the certification_code of this POISoftware.


        :return: The certification_code of this POISoftware.
        :rtype: str
        """
        return self._certification_code

    @certification_code.setter
    def certification_code(self, certification_code):
        """Sets the certification_code of this POISoftware.


        :param certification_code: The certification_code of this POISoftware.
        :type certification_code: str
        """
        if certification_code is None:
            raise ValueError("Invalid value for `certification_code`, must not be `None`")
        if certification_code is not None and not re.search(r'^.+$', certification_code):
            raise ValueError("Invalid value for `certification_code`, must be a follow pattern or equal to `/^.+$/`")

        self._certification_code = certification_code

    @property
    def manufacturer_id(self):
        """Gets the manufacturer_id of this POISoftware.


        :return: The manufacturer_id of this POISoftware.
        :rtype: str
        """
        return self._manufacturer_id

    @manufacturer_id.setter
    def manufacturer_id(self, manufacturer_id):
        """Sets the manufacturer_id of this POISoftware.


        :param manufacturer_id: The manufacturer_id of this POISoftware.
        :type manufacturer_id: str
        """
        if manufacturer_id is None:
            raise ValueError("Invalid value for `manufacturer_id`, must not be `None`")
        if manufacturer_id is not None and not re.search(r'^.+$', manufacturer_id):
            raise ValueError("Invalid value for `manufacturer_id`, must be a follow pattern or equal to `/^.+$/`")

        self._manufacturer_id = manufacturer_id

    @property
    def software_version(self):
        """Gets the software_version of this POISoftware.


        :return: The software_version of this POISoftware.
        :rtype: str
        """
        return self._software_version

    @software_version.setter
    def software_version(self, software_version):
        """Sets the software_version of this POISoftware.


        :param software_version: The software_version of this POISoftware.
        :type software_version: str
        """
        if software_version is None:
            raise ValueError("Invalid value for `software_version`, must not be `None`")
        if software_version is not None and not re.search(r'^.+$', software_version):
            raise ValueError("Invalid value for `software_version`, must be a follow pattern or equal to `/^.+$/`")

        self._software_version = software_version
