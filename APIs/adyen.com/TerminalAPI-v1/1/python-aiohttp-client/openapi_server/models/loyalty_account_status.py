# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_account import LoyaltyAccount
from openapi_server.models.loyalty_unit import LoyaltyUnit
import re
from openapi_server import util


class LoyaltyAccountStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, current_balance: float=None, loyalty_account: LoyaltyAccount=None, loyalty_unit: LoyaltyUnit=None):
        """LoyaltyAccountStatus - a model defined in OpenAPI

        :param currency: The currency of this LoyaltyAccountStatus.
        :param current_balance: The current_balance of this LoyaltyAccountStatus.
        :param loyalty_account: The loyalty_account of this LoyaltyAccountStatus.
        :param loyalty_unit: The loyalty_unit of this LoyaltyAccountStatus.
        """
        self.openapi_types = {
            'currency': str,
            'current_balance': float,
            'loyalty_account': LoyaltyAccount,
            'loyalty_unit': LoyaltyUnit
        }

        self.attribute_map = {
            'currency': 'Currency',
            'current_balance': 'CurrentBalance',
            'loyalty_account': 'LoyaltyAccount',
            'loyalty_unit': 'LoyaltyUnit'
        }

        self._currency = currency
        self._current_balance = current_balance
        self._loyalty_account = loyalty_account
        self._loyalty_unit = loyalty_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LoyaltyAccountStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LoyaltyAccountStatus of this LoyaltyAccountStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this LoyaltyAccountStatus.


        :return: The currency of this LoyaltyAccountStatus.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this LoyaltyAccountStatus.


        :param currency: The currency of this LoyaltyAccountStatus.
        :type currency: str
        """
        if currency is not None and not re.search(r'^[A-Z]{3,3}$', currency):
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._currency = currency

    @property
    def current_balance(self):
        """Gets the current_balance of this LoyaltyAccountStatus.


        :return: The current_balance of this LoyaltyAccountStatus.
        :rtype: float
        """
        return self._current_balance

    @current_balance.setter
    def current_balance(self, current_balance):
        """Sets the current_balance of this LoyaltyAccountStatus.


        :param current_balance: The current_balance of this LoyaltyAccountStatus.
        :type current_balance: float
        """
        if current_balance is not None and current_balance > 99999999.999999:
            raise ValueError("Invalid value for `current_balance`, must be a value less than or equal to `99999999.999999`")
        if current_balance is not None and current_balance < 0:
            raise ValueError("Invalid value for `current_balance`, must be a value greater than or equal to `0`")

        self._current_balance = current_balance

    @property
    def loyalty_account(self):
        """Gets the loyalty_account of this LoyaltyAccountStatus.


        :return: The loyalty_account of this LoyaltyAccountStatus.
        :rtype: LoyaltyAccount
        """
        return self._loyalty_account

    @loyalty_account.setter
    def loyalty_account(self, loyalty_account):
        """Sets the loyalty_account of this LoyaltyAccountStatus.


        :param loyalty_account: The loyalty_account of this LoyaltyAccountStatus.
        :type loyalty_account: LoyaltyAccount
        """
        if loyalty_account is None:
            raise ValueError("Invalid value for `loyalty_account`, must not be `None`")

        self._loyalty_account = loyalty_account

    @property
    def loyalty_unit(self):
        """Gets the loyalty_unit of this LoyaltyAccountStatus.


        :return: The loyalty_unit of this LoyaltyAccountStatus.
        :rtype: LoyaltyUnit
        """
        return self._loyalty_unit

    @loyalty_unit.setter
    def loyalty_unit(self, loyalty_unit):
        """Sets the loyalty_unit of this LoyaltyAccountStatus.


        :param loyalty_unit: The loyalty_unit of this LoyaltyAccountStatus.
        :type loyalty_unit: LoyaltyUnit
        """

        self._loyalty_unit = loyalty_unit
