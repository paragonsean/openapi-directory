# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.card_acquisition_transaction import CardAcquisitionTransaction
from openapi_server.models.sale_data import SaleData
from openapi_server import util


class CardAcquisitionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_acquisition_transaction: CardAcquisitionTransaction=None, sale_data: SaleData=None):
        """CardAcquisitionRequest - a model defined in OpenAPI

        :param card_acquisition_transaction: The card_acquisition_transaction of this CardAcquisitionRequest.
        :param sale_data: The sale_data of this CardAcquisitionRequest.
        """
        self.openapi_types = {
            'card_acquisition_transaction': CardAcquisitionTransaction,
            'sale_data': SaleData
        }

        self.attribute_map = {
            'card_acquisition_transaction': 'CardAcquisitionTransaction',
            'sale_data': 'SaleData'
        }

        self._card_acquisition_transaction = card_acquisition_transaction
        self._sale_data = sale_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardAcquisitionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardAcquisitionRequest of this CardAcquisitionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_acquisition_transaction(self):
        """Gets the card_acquisition_transaction of this CardAcquisitionRequest.


        :return: The card_acquisition_transaction of this CardAcquisitionRequest.
        :rtype: CardAcquisitionTransaction
        """
        return self._card_acquisition_transaction

    @card_acquisition_transaction.setter
    def card_acquisition_transaction(self, card_acquisition_transaction):
        """Sets the card_acquisition_transaction of this CardAcquisitionRequest.


        :param card_acquisition_transaction: The card_acquisition_transaction of this CardAcquisitionRequest.
        :type card_acquisition_transaction: CardAcquisitionTransaction
        """
        if card_acquisition_transaction is None:
            raise ValueError("Invalid value for `card_acquisition_transaction`, must not be `None`")

        self._card_acquisition_transaction = card_acquisition_transaction

    @property
    def sale_data(self):
        """Gets the sale_data of this CardAcquisitionRequest.


        :return: The sale_data of this CardAcquisitionRequest.
        :rtype: SaleData
        """
        return self._sale_data

    @sale_data.setter
    def sale_data(self, sale_data):
        """Sets the sale_data of this CardAcquisitionRequest.


        :param sale_data: The sale_data of this CardAcquisitionRequest.
        :type sale_data: SaleData
        """
        if sale_data is None:
            raise ValueError("Invalid value for `sale_data`, must not be `None`")

        self._sale_data = sale_data
