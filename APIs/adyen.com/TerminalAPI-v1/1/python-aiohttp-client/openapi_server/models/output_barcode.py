# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.barcode_type import BarcodeType
import re
from openapi_server import util


class OutputBarcode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode_type: BarcodeType=None, barcode_value: str=None):
        """OutputBarcode - a model defined in OpenAPI

        :param barcode_type: The barcode_type of this OutputBarcode.
        :param barcode_value: The barcode_value of this OutputBarcode.
        """
        self.openapi_types = {
            'barcode_type': BarcodeType,
            'barcode_value': str
        }

        self.attribute_map = {
            'barcode_type': 'BarcodeType',
            'barcode_value': 'BarcodeValue'
        }

        self._barcode_type = barcode_type
        self._barcode_value = barcode_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OutputBarcode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OutputBarcode of this OutputBarcode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode_type(self):
        """Gets the barcode_type of this OutputBarcode.


        :return: The barcode_type of this OutputBarcode.
        :rtype: BarcodeType
        """
        return self._barcode_type

    @barcode_type.setter
    def barcode_type(self, barcode_type):
        """Sets the barcode_type of this OutputBarcode.


        :param barcode_type: The barcode_type of this OutputBarcode.
        :type barcode_type: BarcodeType
        """

        self._barcode_type = barcode_type

    @property
    def barcode_value(self):
        """Gets the barcode_value of this OutputBarcode.


        :return: The barcode_value of this OutputBarcode.
        :rtype: str
        """
        return self._barcode_value

    @barcode_value.setter
    def barcode_value(self, barcode_value):
        """Sets the barcode_value of this OutputBarcode.


        :param barcode_value: The barcode_value of this OutputBarcode.
        :type barcode_value: str
        """
        if barcode_value is None:
            raise ValueError("Invalid value for `barcode_value`, must not be `None`")
        if barcode_value is not None and not re.search(r'^.+$', barcode_value):
            raise ValueError("Invalid value for `barcode_value`, must be a follow pattern or equal to `/^.+$/`")

        self._barcode_value = barcode_value
