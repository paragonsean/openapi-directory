# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class AdminRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, service_identification: str=None):
        """AdminRequest - a model defined in OpenAPI

        :param service_identification: The service_identification of this AdminRequest.
        """
        self.openapi_types = {
            'service_identification': str
        }

        self.attribute_map = {
            'service_identification': 'ServiceIdentification'
        }

        self._service_identification = service_identification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdminRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AdminRequest of this AdminRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def service_identification(self):
        """Gets the service_identification of this AdminRequest.

        Identification of the administrative service to process.

        :return: The service_identification of this AdminRequest.
        :rtype: str
        """
        return self._service_identification

    @service_identification.setter
    def service_identification(self, service_identification):
        """Sets the service_identification of this AdminRequest.

        Identification of the administrative service to process.

        :param service_identification: The service_identification of this AdminRequest.
        :type service_identification: str
        """
        if service_identification is not None and not re.search(r'^.+$', service_identification):
            raise ValueError("Invalid value for `service_identification`, must be a follow pattern or equal to `/^.+$/`")

        self._service_identification = service_identification
