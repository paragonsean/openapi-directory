# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.message_category import MessageCategory
import re
from openapi_server import util


class MessageReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_id: str=None, message_category: MessageCategory=None, poiid: str=None, sale_id: str=None, service_id: str=None):
        """MessageReference - a model defined in OpenAPI

        :param device_id: The device_id of this MessageReference.
        :param message_category: The message_category of this MessageReference.
        :param poiid: The poiid of this MessageReference.
        :param sale_id: The sale_id of this MessageReference.
        :param service_id: The service_id of this MessageReference.
        """
        self.openapi_types = {
            'device_id': str,
            'message_category': MessageCategory,
            'poiid': str,
            'sale_id': str,
            'service_id': str
        }

        self.attribute_map = {
            'device_id': 'DeviceID',
            'message_category': 'MessageCategory',
            'poiid': 'POIID',
            'sale_id': 'SaleID',
            'service_id': 'ServiceID'
        }

        self._device_id = device_id
        self._message_category = message_category
        self._poiid = poiid
        self._sale_id = sale_id
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MessageReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MessageReference of this MessageReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_id(self):
        """Gets the device_id of this MessageReference.

        Identification of a device message pair.

        :return: The device_id of this MessageReference.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this MessageReference.

        Identification of a device message pair.

        :param device_id: The device_id of this MessageReference.
        :type device_id: str
        """
        if device_id is not None and not re.search(r'^.{1,10}$', device_id):
            raise ValueError("Invalid value for `device_id`, must be a follow pattern or equal to `/^.{1,10}$/`")

        self._device_id = device_id

    @property
    def message_category(self):
        """Gets the message_category of this MessageReference.


        :return: The message_category of this MessageReference.
        :rtype: MessageCategory
        """
        return self._message_category

    @message_category.setter
    def message_category(self, message_category):
        """Sets the message_category of this MessageReference.


        :param message_category: The message_category of this MessageReference.
        :type message_category: MessageCategory
        """

        self._message_category = message_category

    @property
    def poiid(self):
        """Gets the poiid of this MessageReference.

        default MessageHeader.POIID.

        :return: The poiid of this MessageReference.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this MessageReference.

        default MessageHeader.POIID.

        :param poiid: The poiid of this MessageReference.
        :type poiid: str
        """
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid

    @property
    def sale_id(self):
        """Gets the sale_id of this MessageReference.

        default MessageHeader.SaleID.

        :return: The sale_id of this MessageReference.
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this MessageReference.

        default MessageHeader.SaleID.

        :param sale_id: The sale_id of this MessageReference.
        :type sale_id: str
        """
        if sale_id is not None and not re.search(r'^.+$', sale_id):
            raise ValueError("Invalid value for `sale_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_id = sale_id

    @property
    def service_id(self):
        """Gets the service_id of this MessageReference.

        Identification of a message pair, which processes a transaction.

        :return: The service_id of this MessageReference.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this MessageReference.

        Identification of a message pair, which processes a transaction.

        :param service_id: The service_id of this MessageReference.
        :type service_id: str
        """
        if service_id is not None and not re.search(r'^.{1,10}$', service_id):
            raise ValueError("Invalid value for `service_id`, must be a follow pattern or equal to `/^.{1,10}$/`")

        self._service_id = service_id
