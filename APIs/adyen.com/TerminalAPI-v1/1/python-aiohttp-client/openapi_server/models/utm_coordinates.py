# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class UTMCoordinates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, utm_eastward: str=None, utm_northward: str=None, utm_zone: str=None):
        """UTMCoordinates - a model defined in OpenAPI

        :param utm_eastward: The utm_eastward of this UTMCoordinates.
        :param utm_northward: The utm_northward of this UTMCoordinates.
        :param utm_zone: The utm_zone of this UTMCoordinates.
        """
        self.openapi_types = {
            'utm_eastward': str,
            'utm_northward': str,
            'utm_zone': str
        }

        self.attribute_map = {
            'utm_eastward': 'UTMEastward',
            'utm_northward': 'UTMNorthward',
            'utm_zone': 'UTMZone'
        }

        self._utm_eastward = utm_eastward
        self._utm_northward = utm_northward
        self._utm_zone = utm_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UTMCoordinates':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UTMCoordinates of this UTMCoordinates.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def utm_eastward(self):
        """Gets the utm_eastward of this UTMCoordinates.


        :return: The utm_eastward of this UTMCoordinates.
        :rtype: str
        """
        return self._utm_eastward

    @utm_eastward.setter
    def utm_eastward(self, utm_eastward):
        """Sets the utm_eastward of this UTMCoordinates.


        :param utm_eastward: The utm_eastward of this UTMCoordinates.
        :type utm_eastward: str
        """
        if utm_eastward is None:
            raise ValueError("Invalid value for `utm_eastward`, must not be `None`")
        if utm_eastward is not None and not re.search(r'^.+$', utm_eastward):
            raise ValueError("Invalid value for `utm_eastward`, must be a follow pattern or equal to `/^.+$/`")

        self._utm_eastward = utm_eastward

    @property
    def utm_northward(self):
        """Gets the utm_northward of this UTMCoordinates.


        :return: The utm_northward of this UTMCoordinates.
        :rtype: str
        """
        return self._utm_northward

    @utm_northward.setter
    def utm_northward(self, utm_northward):
        """Sets the utm_northward of this UTMCoordinates.


        :param utm_northward: The utm_northward of this UTMCoordinates.
        :type utm_northward: str
        """
        if utm_northward is None:
            raise ValueError("Invalid value for `utm_northward`, must not be `None`")
        if utm_northward is not None and not re.search(r'^.+$', utm_northward):
            raise ValueError("Invalid value for `utm_northward`, must be a follow pattern or equal to `/^.+$/`")

        self._utm_northward = utm_northward

    @property
    def utm_zone(self):
        """Gets the utm_zone of this UTMCoordinates.


        :return: The utm_zone of this UTMCoordinates.
        :rtype: str
        """
        return self._utm_zone

    @utm_zone.setter
    def utm_zone(self, utm_zone):
        """Sets the utm_zone of this UTMCoordinates.


        :param utm_zone: The utm_zone of this UTMCoordinates.
        :type utm_zone: str
        """
        if utm_zone is None:
            raise ValueError("Invalid value for `utm_zone`, must not be `None`")
        if utm_zone is not None and not re.search(r'^.+$', utm_zone):
            raise ValueError("Invalid value for `utm_zone`, must be a follow pattern or equal to `/^.+$/`")

        self._utm_zone = utm_zone
