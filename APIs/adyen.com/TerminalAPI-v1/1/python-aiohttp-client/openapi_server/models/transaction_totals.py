# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.loyalty_totals import LoyaltyTotals
from openapi_server.models.loyalty_unit import LoyaltyUnit
from openapi_server.models.payment_instrument_type import PaymentInstrumentType
from openapi_server.models.payment_totals import PaymentTotals
import re
from openapi_server import util


class TransactionTotals(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acquirer_id: int=None, card_brand: str=None, host_reconciliation_id: str=None, loyalty_currency: str=None, loyalty_totals: List[LoyaltyTotals]=None, loyalty_unit: LoyaltyUnit=None, operator_id: str=None, poiid: str=None, payment_currency: str=None, payment_instrument_type: PaymentInstrumentType=None, payment_totals: List[PaymentTotals]=None, sale_id: str=None, shift_number: str=None, totals_group_id: str=None):
        """TransactionTotals - a model defined in OpenAPI

        :param acquirer_id: The acquirer_id of this TransactionTotals.
        :param card_brand: The card_brand of this TransactionTotals.
        :param host_reconciliation_id: The host_reconciliation_id of this TransactionTotals.
        :param loyalty_currency: The loyalty_currency of this TransactionTotals.
        :param loyalty_totals: The loyalty_totals of this TransactionTotals.
        :param loyalty_unit: The loyalty_unit of this TransactionTotals.
        :param operator_id: The operator_id of this TransactionTotals.
        :param poiid: The poiid of this TransactionTotals.
        :param payment_currency: The payment_currency of this TransactionTotals.
        :param payment_instrument_type: The payment_instrument_type of this TransactionTotals.
        :param payment_totals: The payment_totals of this TransactionTotals.
        :param sale_id: The sale_id of this TransactionTotals.
        :param shift_number: The shift_number of this TransactionTotals.
        :param totals_group_id: The totals_group_id of this TransactionTotals.
        """
        self.openapi_types = {
            'acquirer_id': int,
            'card_brand': str,
            'host_reconciliation_id': str,
            'loyalty_currency': str,
            'loyalty_totals': List[LoyaltyTotals],
            'loyalty_unit': LoyaltyUnit,
            'operator_id': str,
            'poiid': str,
            'payment_currency': str,
            'payment_instrument_type': PaymentInstrumentType,
            'payment_totals': List[PaymentTotals],
            'sale_id': str,
            'shift_number': str,
            'totals_group_id': str
        }

        self.attribute_map = {
            'acquirer_id': 'AcquirerID',
            'card_brand': 'CardBrand',
            'host_reconciliation_id': 'HostReconciliationID',
            'loyalty_currency': 'LoyaltyCurrency',
            'loyalty_totals': 'LoyaltyTotals',
            'loyalty_unit': 'LoyaltyUnit',
            'operator_id': 'OperatorID',
            'poiid': 'POIID',
            'payment_currency': 'PaymentCurrency',
            'payment_instrument_type': 'PaymentInstrumentType',
            'payment_totals': 'PaymentTotals',
            'sale_id': 'SaleID',
            'shift_number': 'ShiftNumber',
            'totals_group_id': 'TotalsGroupID'
        }

        self._acquirer_id = acquirer_id
        self._card_brand = card_brand
        self._host_reconciliation_id = host_reconciliation_id
        self._loyalty_currency = loyalty_currency
        self._loyalty_totals = loyalty_totals
        self._loyalty_unit = loyalty_unit
        self._operator_id = operator_id
        self._poiid = poiid
        self._payment_currency = payment_currency
        self._payment_instrument_type = payment_instrument_type
        self._payment_totals = payment_totals
        self._sale_id = sale_id
        self._shift_number = shift_number
        self._totals_group_id = totals_group_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionTotals':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionTotals of this TransactionTotals.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acquirer_id(self):
        """Gets the acquirer_id of this TransactionTotals.

        If available.

        :return: The acquirer_id of this TransactionTotals.
        :rtype: int
        """
        return self._acquirer_id

    @acquirer_id.setter
    def acquirer_id(self, acquirer_id):
        """Sets the acquirer_id of this TransactionTotals.

        If available.

        :param acquirer_id: The acquirer_id of this TransactionTotals.
        :type acquirer_id: int
        """

        self._acquirer_id = acquirer_id

    @property
    def card_brand(self):
        """Gets the card_brand of this TransactionTotals.

        If configured to present totals per card brand, and Response.Result is Success.

        :return: The card_brand of this TransactionTotals.
        :rtype: str
        """
        return self._card_brand

    @card_brand.setter
    def card_brand(self, card_brand):
        """Sets the card_brand of this TransactionTotals.

        If configured to present totals per card brand, and Response.Result is Success.

        :param card_brand: The card_brand of this TransactionTotals.
        :type card_brand: str
        """
        if card_brand is not None and not re.search(r'^.+$', card_brand):
            raise ValueError("Invalid value for `card_brand`, must be a follow pattern or equal to `/^.+$/`")

        self._card_brand = card_brand

    @property
    def host_reconciliation_id(self):
        """Gets the host_reconciliation_id of this TransactionTotals.

        If available.

        :return: The host_reconciliation_id of this TransactionTotals.
        :rtype: str
        """
        return self._host_reconciliation_id

    @host_reconciliation_id.setter
    def host_reconciliation_id(self, host_reconciliation_id):
        """Sets the host_reconciliation_id of this TransactionTotals.

        If available.

        :param host_reconciliation_id: The host_reconciliation_id of this TransactionTotals.
        :type host_reconciliation_id: str
        """
        if host_reconciliation_id is not None and not re.search(r'^.+$', host_reconciliation_id):
            raise ValueError("Invalid value for `host_reconciliation_id`, must be a follow pattern or equal to `/^.+$/`")

        self._host_reconciliation_id = host_reconciliation_id

    @property
    def loyalty_currency(self):
        """Gets the loyalty_currency of this TransactionTotals.

        If LoyaltyUnit is Monetary.

        :return: The loyalty_currency of this TransactionTotals.
        :rtype: str
        """
        return self._loyalty_currency

    @loyalty_currency.setter
    def loyalty_currency(self, loyalty_currency):
        """Sets the loyalty_currency of this TransactionTotals.

        If LoyaltyUnit is Monetary.

        :param loyalty_currency: The loyalty_currency of this TransactionTotals.
        :type loyalty_currency: str
        """
        if loyalty_currency is not None and not re.search(r'^[A-Z]{3,3}$', loyalty_currency):
            raise ValueError("Invalid value for `loyalty_currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._loyalty_currency = loyalty_currency

    @property
    def loyalty_totals(self):
        """Gets the loyalty_totals of this TransactionTotals.


        :return: The loyalty_totals of this TransactionTotals.
        :rtype: List[LoyaltyTotals]
        """
        return self._loyalty_totals

    @loyalty_totals.setter
    def loyalty_totals(self, loyalty_totals):
        """Sets the loyalty_totals of this TransactionTotals.


        :param loyalty_totals: The loyalty_totals of this TransactionTotals.
        :type loyalty_totals: List[LoyaltyTotals]
        """

        self._loyalty_totals = loyalty_totals

    @property
    def loyalty_unit(self):
        """Gets the loyalty_unit of this TransactionTotals.


        :return: The loyalty_unit of this TransactionTotals.
        :rtype: LoyaltyUnit
        """
        return self._loyalty_unit

    @loyalty_unit.setter
    def loyalty_unit(self, loyalty_unit):
        """Sets the loyalty_unit of this TransactionTotals.


        :param loyalty_unit: The loyalty_unit of this TransactionTotals.
        :type loyalty_unit: LoyaltyUnit
        """

        self._loyalty_unit = loyalty_unit

    @property
    def operator_id(self):
        """Gets the operator_id of this TransactionTotals.

        If requested in the message request.

        :return: The operator_id of this TransactionTotals.
        :rtype: str
        """
        return self._operator_id

    @operator_id.setter
    def operator_id(self, operator_id):
        """Sets the operator_id of this TransactionTotals.

        If requested in the message request.

        :param operator_id: The operator_id of this TransactionTotals.
        :type operator_id: str
        """
        if operator_id is not None and not re.search(r'^.+$', operator_id):
            raise ValueError("Invalid value for `operator_id`, must be a follow pattern or equal to `/^.+$/`")

        self._operator_id = operator_id

    @property
    def poiid(self):
        """Gets the poiid of this TransactionTotals.

        If requested in the message request.

        :return: The poiid of this TransactionTotals.
        :rtype: str
        """
        return self._poiid

    @poiid.setter
    def poiid(self, poiid):
        """Sets the poiid of this TransactionTotals.

        If requested in the message request.

        :param poiid: The poiid of this TransactionTotals.
        :type poiid: str
        """
        if poiid is not None and not re.search(r'^.+$', poiid):
            raise ValueError("Invalid value for `poiid`, must be a follow pattern or equal to `/^.+$/`")

        self._poiid = poiid

    @property
    def payment_currency(self):
        """Gets the payment_currency of this TransactionTotals.

        Currency of a monetary amount.

        :return: The payment_currency of this TransactionTotals.
        :rtype: str
        """
        return self._payment_currency

    @payment_currency.setter
    def payment_currency(self, payment_currency):
        """Sets the payment_currency of this TransactionTotals.

        Currency of a monetary amount.

        :param payment_currency: The payment_currency of this TransactionTotals.
        :type payment_currency: str
        """
        if payment_currency is not None and not re.search(r'^[A-Z]{3,3}$', payment_currency):
            raise ValueError("Invalid value for `payment_currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")

        self._payment_currency = payment_currency

    @property
    def payment_instrument_type(self):
        """Gets the payment_instrument_type of this TransactionTotals.


        :return: The payment_instrument_type of this TransactionTotals.
        :rtype: PaymentInstrumentType
        """
        return self._payment_instrument_type

    @payment_instrument_type.setter
    def payment_instrument_type(self, payment_instrument_type):
        """Sets the payment_instrument_type of this TransactionTotals.


        :param payment_instrument_type: The payment_instrument_type of this TransactionTotals.
        :type payment_instrument_type: PaymentInstrumentType
        """
        if payment_instrument_type is None:
            raise ValueError("Invalid value for `payment_instrument_type`, must not be `None`")

        self._payment_instrument_type = payment_instrument_type

    @property
    def payment_totals(self):
        """Gets the payment_totals of this TransactionTotals.


        :return: The payment_totals of this TransactionTotals.
        :rtype: List[PaymentTotals]
        """
        return self._payment_totals

    @payment_totals.setter
    def payment_totals(self, payment_totals):
        """Sets the payment_totals of this TransactionTotals.


        :param payment_totals: The payment_totals of this TransactionTotals.
        :type payment_totals: List[PaymentTotals]
        """

        self._payment_totals = payment_totals

    @property
    def sale_id(self):
        """Gets the sale_id of this TransactionTotals.

        If requested in the message request.

        :return: The sale_id of this TransactionTotals.
        :rtype: str
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this TransactionTotals.

        If requested in the message request.

        :param sale_id: The sale_id of this TransactionTotals.
        :type sale_id: str
        """
        if sale_id is not None and not re.search(r'^.+$', sale_id):
            raise ValueError("Invalid value for `sale_id`, must be a follow pattern or equal to `/^.+$/`")

        self._sale_id = sale_id

    @property
    def shift_number(self):
        """Gets the shift_number of this TransactionTotals.

        If requested in the message request.

        :return: The shift_number of this TransactionTotals.
        :rtype: str
        """
        return self._shift_number

    @shift_number.setter
    def shift_number(self, shift_number):
        """Sets the shift_number of this TransactionTotals.

        If requested in the message request.

        :param shift_number: The shift_number of this TransactionTotals.
        :type shift_number: str
        """
        if shift_number is not None and not re.search(r'^.+$', shift_number):
            raise ValueError("Invalid value for `shift_number`, must be a follow pattern or equal to `/^.+$/`")

        self._shift_number = shift_number

    @property
    def totals_group_id(self):
        """Gets the totals_group_id of this TransactionTotals.

        If requested in the message request.

        :return: The totals_group_id of this TransactionTotals.
        :rtype: str
        """
        return self._totals_group_id

    @totals_group_id.setter
    def totals_group_id(self, totals_group_id):
        """Sets the totals_group_id of this TransactionTotals.

        If requested in the message request.

        :param totals_group_id: The totals_group_id of this TransactionTotals.
        :type totals_group_id: str
        """
        if totals_group_id is not None and not re.search(r'^.{1,16}$', totals_group_id):
            raise ValueError("Invalid value for `totals_group_id`, must be a follow pattern or equal to `/^.{1,16}$/`")

        self._totals_group_id = totals_group_id
