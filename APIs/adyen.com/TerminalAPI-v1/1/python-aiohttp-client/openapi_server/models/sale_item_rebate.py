# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.unit_of_measure import UnitOfMeasure
import re
from openapi_server import util


class SaleItemRebate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean_upc: int=None, item_amount: float=None, item_id: int=None, product_code: int=None, quantity: str=None, rebate_label: str=None, unit_of_measure: UnitOfMeasure=None):
        """SaleItemRebate - a model defined in OpenAPI

        :param ean_upc: The ean_upc of this SaleItemRebate.
        :param item_amount: The item_amount of this SaleItemRebate.
        :param item_id: The item_id of this SaleItemRebate.
        :param product_code: The product_code of this SaleItemRebate.
        :param quantity: The quantity of this SaleItemRebate.
        :param rebate_label: The rebate_label of this SaleItemRebate.
        :param unit_of_measure: The unit_of_measure of this SaleItemRebate.
        """
        self.openapi_types = {
            'ean_upc': int,
            'item_amount': float,
            'item_id': int,
            'product_code': int,
            'quantity': str,
            'rebate_label': str,
            'unit_of_measure': UnitOfMeasure
        }

        self.attribute_map = {
            'ean_upc': 'EanUpc',
            'item_amount': 'ItemAmount',
            'item_id': 'ItemID',
            'product_code': 'ProductCode',
            'quantity': 'Quantity',
            'rebate_label': 'RebateLabel',
            'unit_of_measure': 'UnitOfMeasure'
        }

        self._ean_upc = ean_upc
        self._item_amount = item_amount
        self._item_id = item_id
        self._product_code = product_code
        self._quantity = quantity
        self._rebate_label = rebate_label
        self._unit_of_measure = unit_of_measure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SaleItemRebate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SaleItemRebate of this SaleItemRebate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean_upc(self):
        """Gets the ean_upc of this SaleItemRebate.


        :return: The ean_upc of this SaleItemRebate.
        :rtype: int
        """
        return self._ean_upc

    @ean_upc.setter
    def ean_upc(self, ean_upc):
        """Sets the ean_upc of this SaleItemRebate.


        :param ean_upc: The ean_upc of this SaleItemRebate.
        :type ean_upc: int
        """

        self._ean_upc = ean_upc

    @property
    def item_amount(self):
        """Gets the item_amount of this SaleItemRebate.

        if rebate on the line item amount.

        :return: The item_amount of this SaleItemRebate.
        :rtype: float
        """
        return self._item_amount

    @item_amount.setter
    def item_amount(self, item_amount):
        """Sets the item_amount of this SaleItemRebate.

        if rebate on the line item amount.

        :param item_amount: The item_amount of this SaleItemRebate.
        :type item_amount: float
        """
        if item_amount is not None and item_amount > 99999999.999999:
            raise ValueError("Invalid value for `item_amount`, must be a value less than or equal to `99999999.999999`")
        if item_amount is not None and item_amount < 0:
            raise ValueError("Invalid value for `item_amount`, must be a value greater than or equal to `0`")

        self._item_amount = item_amount

    @property
    def item_id(self):
        """Gets the item_id of this SaleItemRebate.

        Item identification inside a transaction (0 to n).

        :return: The item_id of this SaleItemRebate.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SaleItemRebate.

        Item identification inside a transaction (0 to n).

        :param item_id: The item_id of this SaleItemRebate.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")

        self._item_id = item_id

    @property
    def product_code(self):
        """Gets the product_code of this SaleItemRebate.

        Product code of item purchased with the transaction.

        :return: The product_code of this SaleItemRebate.
        :rtype: int
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this SaleItemRebate.

        Product code of item purchased with the transaction.

        :param product_code: The product_code of this SaleItemRebate.
        :type product_code: int
        """
        if product_code is None:
            raise ValueError("Invalid value for `product_code`, must not be `None`")
        if product_code is not None and product_code > 20:
            raise ValueError("Invalid value for `product_code`, must be a value less than or equal to `20`")
        if product_code is not None and product_code < 1:
            raise ValueError("Invalid value for `product_code`, must be a value greater than or equal to `1`")

        self._product_code = product_code

    @property
    def quantity(self):
        """Gets the quantity of this SaleItemRebate.

        if rebate is additional units.

        :return: The quantity of this SaleItemRebate.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this SaleItemRebate.

        if rebate is additional units.

        :param quantity: The quantity of this SaleItemRebate.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def rebate_label(self):
        """Gets the rebate_label of this SaleItemRebate.

        If provided by the Acquirer.

        :return: The rebate_label of this SaleItemRebate.
        :rtype: str
        """
        return self._rebate_label

    @rebate_label.setter
    def rebate_label(self, rebate_label):
        """Sets the rebate_label of this SaleItemRebate.

        If provided by the Acquirer.

        :param rebate_label: The rebate_label of this SaleItemRebate.
        :type rebate_label: str
        """
        if rebate_label is not None and not re.search(r'^.+$', rebate_label):
            raise ValueError("Invalid value for `rebate_label`, must be a follow pattern or equal to `/^.+$/`")

        self._rebate_label = rebate_label

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this SaleItemRebate.


        :return: The unit_of_measure of this SaleItemRebate.
        :rtype: UnitOfMeasure
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this SaleItemRebate.


        :param unit_of_measure: The unit_of_measure of this SaleItemRebate.
        :type unit_of_measure: UnitOfMeasure
        """

        self._unit_of_measure = unit_of_measure
