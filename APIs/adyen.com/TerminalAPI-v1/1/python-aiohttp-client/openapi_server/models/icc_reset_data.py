# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class ICCResetData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, atr_value: str=None, card_status_words: str=None):
        """ICCResetData - a model defined in OpenAPI

        :param atr_value: The atr_value of this ICCResetData.
        :param card_status_words: The card_status_words of this ICCResetData.
        """
        self.openapi_types = {
            'atr_value': str,
            'card_status_words': str
        }

        self.attribute_map = {
            'atr_value': 'ATRValue',
            'card_status_words': 'CardStatusWords'
        }

        self._atr_value = atr_value
        self._card_status_words = card_status_words

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICCResetData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ICCResetData of this ICCResetData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def atr_value(self):
        """Gets the atr_value of this ICCResetData.


        :return: The atr_value of this ICCResetData.
        :rtype: str
        """
        return self._atr_value

    @atr_value.setter
    def atr_value(self, atr_value):
        """Sets the atr_value of this ICCResetData.


        :param atr_value: The atr_value of this ICCResetData.
        :type atr_value: str
        """
        if atr_value is not None and not re.search(r'^.{1,100}$', atr_value):
            raise ValueError("Invalid value for `atr_value`, must be a follow pattern or equal to `/^.{1,100}$/`")

        self._atr_value = atr_value

    @property
    def card_status_words(self):
        """Gets the card_status_words of this ICCResetData.


        :return: The card_status_words of this ICCResetData.
        :rtype: str
        """
        return self._card_status_words

    @card_status_words.setter
    def card_status_words(self, card_status_words):
        """Sets the card_status_words of this ICCResetData.


        :param card_status_words: The card_status_words of this ICCResetData.
        :type card_status_words: str
        """
        if card_status_words is not None and not re.search(r'^.{2,2}$', card_status_words):
            raise ValueError("Invalid value for `card_status_words`, must be a follow pattern or equal to `/^.{2,2}$/`")

        self._card_status_words = card_status_words
