# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identification_type import IdentificationType
from openapi_server.models.stored_value_account_type import StoredValueAccountType
import re
from openapi_server import util


class StoredValueAccountID(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entry_mode: List[str]=None, expiry_date: int=None, identification_type: IdentificationType=None, owner_name: str=None, stored_value_account_type: StoredValueAccountType=None, stored_value_id: str=None, stored_value_provider: str=None):
        """StoredValueAccountID - a model defined in OpenAPI

        :param entry_mode: The entry_mode of this StoredValueAccountID.
        :param expiry_date: The expiry_date of this StoredValueAccountID.
        :param identification_type: The identification_type of this StoredValueAccountID.
        :param owner_name: The owner_name of this StoredValueAccountID.
        :param stored_value_account_type: The stored_value_account_type of this StoredValueAccountID.
        :param stored_value_id: The stored_value_id of this StoredValueAccountID.
        :param stored_value_provider: The stored_value_provider of this StoredValueAccountID.
        """
        self.openapi_types = {
            'entry_mode': List[str],
            'expiry_date': int,
            'identification_type': IdentificationType,
            'owner_name': str,
            'stored_value_account_type': StoredValueAccountType,
            'stored_value_id': str,
            'stored_value_provider': str
        }

        self.attribute_map = {
            'entry_mode': 'EntryMode',
            'expiry_date': 'ExpiryDate',
            'identification_type': 'IdentificationType',
            'owner_name': 'OwnerName',
            'stored_value_account_type': 'StoredValueAccountType',
            'stored_value_id': 'StoredValueID',
            'stored_value_provider': 'StoredValueProvider'
        }

        self._entry_mode = entry_mode
        self._expiry_date = expiry_date
        self._identification_type = identification_type
        self._owner_name = owner_name
        self._stored_value_account_type = stored_value_account_type
        self._stored_value_id = stored_value_id
        self._stored_value_provider = stored_value_provider

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StoredValueAccountID':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StoredValueAccountID of this StoredValueAccountID.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entry_mode(self):
        """Gets the entry_mode of this StoredValueAccountID.


        :return: The entry_mode of this StoredValueAccountID.
        :rtype: List[str]
        """
        return self._entry_mode

    @entry_mode.setter
    def entry_mode(self, entry_mode):
        """Sets the entry_mode of this StoredValueAccountID.


        :param entry_mode: The entry_mode of this StoredValueAccountID.
        :type entry_mode: List[str]
        """
        allowed_values = ["Contactless", "File", "ICC", "Keyed", "MagStripe", "Manual", "Mobile", "RFID", "Scanned", "SynchronousICC", "Tapped"]  # noqa: E501
        if not set(entry_mode).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `entry_mode` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(entry_mode) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._entry_mode = entry_mode

    @property
    def expiry_date(self):
        """Gets the expiry_date of this StoredValueAccountID.


        :return: The expiry_date of this StoredValueAccountID.
        :rtype: int
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this StoredValueAccountID.


        :param expiry_date: The expiry_date of this StoredValueAccountID.
        :type expiry_date: int
        """
        if expiry_date is not None and expiry_date > 4:
            raise ValueError("Invalid value for `expiry_date`, must be a value less than or equal to `4`")
        if expiry_date is not None and expiry_date < 4:
            raise ValueError("Invalid value for `expiry_date`, must be a value greater than or equal to `4`")

        self._expiry_date = expiry_date

    @property
    def identification_type(self):
        """Gets the identification_type of this StoredValueAccountID.


        :return: The identification_type of this StoredValueAccountID.
        :rtype: IdentificationType
        """
        return self._identification_type

    @identification_type.setter
    def identification_type(self, identification_type):
        """Sets the identification_type of this StoredValueAccountID.


        :param identification_type: The identification_type of this StoredValueAccountID.
        :type identification_type: IdentificationType
        """
        if identification_type is None:
            raise ValueError("Invalid value for `identification_type`, must not be `None`")

        self._identification_type = identification_type

    @property
    def owner_name(self):
        """Gets the owner_name of this StoredValueAccountID.


        :return: The owner_name of this StoredValueAccountID.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this StoredValueAccountID.


        :param owner_name: The owner_name of this StoredValueAccountID.
        :type owner_name: str
        """
        if owner_name is not None and not re.search(r'^.+$', owner_name):
            raise ValueError("Invalid value for `owner_name`, must be a follow pattern or equal to `/^.+$/`")

        self._owner_name = owner_name

    @property
    def stored_value_account_type(self):
        """Gets the stored_value_account_type of this StoredValueAccountID.


        :return: The stored_value_account_type of this StoredValueAccountID.
        :rtype: StoredValueAccountType
        """
        return self._stored_value_account_type

    @stored_value_account_type.setter
    def stored_value_account_type(self, stored_value_account_type):
        """Sets the stored_value_account_type of this StoredValueAccountID.


        :param stored_value_account_type: The stored_value_account_type of this StoredValueAccountID.
        :type stored_value_account_type: StoredValueAccountType
        """
        if stored_value_account_type is None:
            raise ValueError("Invalid value for `stored_value_account_type`, must not be `None`")

        self._stored_value_account_type = stored_value_account_type

    @property
    def stored_value_id(self):
        """Gets the stored_value_id of this StoredValueAccountID.


        :return: The stored_value_id of this StoredValueAccountID.
        :rtype: str
        """
        return self._stored_value_id

    @stored_value_id.setter
    def stored_value_id(self, stored_value_id):
        """Sets the stored_value_id of this StoredValueAccountID.


        :param stored_value_id: The stored_value_id of this StoredValueAccountID.
        :type stored_value_id: str
        """
        if stored_value_id is None:
            raise ValueError("Invalid value for `stored_value_id`, must not be `None`")
        if stored_value_id is not None and not re.search(r'^.+$', stored_value_id):
            raise ValueError("Invalid value for `stored_value_id`, must be a follow pattern or equal to `/^.+$/`")

        self._stored_value_id = stored_value_id

    @property
    def stored_value_provider(self):
        """Gets the stored_value_provider of this StoredValueAccountID.


        :return: The stored_value_provider of this StoredValueAccountID.
        :rtype: str
        """
        return self._stored_value_provider

    @stored_value_provider.setter
    def stored_value_provider(self, stored_value_provider):
        """Sets the stored_value_provider of this StoredValueAccountID.


        :param stored_value_provider: The stored_value_provider of this StoredValueAccountID.
        :type stored_value_provider: str
        """
        if stored_value_provider is not None and not re.search(r'^.+$', stored_value_provider):
            raise ValueError("Invalid value for `stored_value_provider`, must be a follow pattern or equal to `/^.+$/`")

        self._stored_value_provider = stored_value_provider
