# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.device import Device
from openapi_server.models.info_qualify import InfoQualify
from openapi_server.models.input import Input
from openapi_server.models.response import Response
from openapi_server import util


class InputResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device: Device=None, info_qualify: InfoQualify=None, input: Input=None, response: Response=None):
        """InputResult - a model defined in OpenAPI

        :param device: The device of this InputResult.
        :param info_qualify: The info_qualify of this InputResult.
        :param input: The input of this InputResult.
        :param response: The response of this InputResult.
        """
        self.openapi_types = {
            'device': Device,
            'info_qualify': InfoQualify,
            'input': Input,
            'response': Response
        }

        self.attribute_map = {
            'device': 'Device',
            'info_qualify': 'InfoQualify',
            'input': 'Input',
            'response': 'Response'
        }

        self._device = device
        self._info_qualify = info_qualify
        self._input = input
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputResult of this InputResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device(self):
        """Gets the device of this InputResult.


        :return: The device of this InputResult.
        :rtype: Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InputResult.


        :param device: The device of this InputResult.
        :type device: Device
        """
        if device is None:
            raise ValueError("Invalid value for `device`, must not be `None`")

        self._device = device

    @property
    def info_qualify(self):
        """Gets the info_qualify of this InputResult.


        :return: The info_qualify of this InputResult.
        :rtype: InfoQualify
        """
        return self._info_qualify

    @info_qualify.setter
    def info_qualify(self, info_qualify):
        """Sets the info_qualify of this InputResult.


        :param info_qualify: The info_qualify of this InputResult.
        :type info_qualify: InfoQualify
        """
        if info_qualify is None:
            raise ValueError("Invalid value for `info_qualify`, must not be `None`")

        self._info_qualify = info_qualify

    @property
    def input(self):
        """Gets the input of this InputResult.


        :return: The input of this InputResult.
        :rtype: Input
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this InputResult.


        :param input: The input of this InputResult.
        :type input: Input
        """

        self._input = input

    @property
    def response(self):
        """Gets the response of this InputResult.


        :return: The response of this InputResult.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this InputResult.


        :param response: The response of this InputResult.
        :type response: Response
        """
        if response is None:
            raise ValueError("Invalid value for `response`, must not be `None`")

        self._response = response
