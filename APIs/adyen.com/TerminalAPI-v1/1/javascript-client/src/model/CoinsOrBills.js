/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CoinsOrBills model module.
 * @module model/CoinsOrBills
 * @version 1
 */
class CoinsOrBills {
    /**
     * Constructs a new <code>CoinsOrBills</code>.
     * Indicates the remaining number of coins or bills of a given value in a cash handling device. When the cash handling machine does not have any more coins or bills of a certain value, the number must be equal to 0. Number of coins or bills of a given value.
     * @alias module:model/CoinsOrBills
     * @param number {Number} Number of elements.
     * @param unitValue {Number} Value of a coin or bill.
     */
    constructor(number, unitValue) { 
        
        CoinsOrBills.initialize(this, number, unitValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, number, unitValue) { 
        obj['Number'] = number;
        obj['UnitValue'] = unitValue;
    }

    /**
     * Constructs a <code>CoinsOrBills</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CoinsOrBills} obj Optional instance to populate.
     * @return {module:model/CoinsOrBills} The populated <code>CoinsOrBills</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CoinsOrBills();

            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('UnitValue')) {
                obj['UnitValue'] = ApiClient.convertToType(data['UnitValue'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CoinsOrBills</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CoinsOrBills</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CoinsOrBills.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

CoinsOrBills.RequiredProperties = ["Number", "UnitValue"];

/**
 * Number of elements.
 * @member {Number} Number
 */
CoinsOrBills.prototype['Number'] = undefined;

/**
 * Value of a coin or bill.
 * @member {Number} UnitValue
 */
CoinsOrBills.prototype['UnitValue'] = undefined;






export default CoinsOrBills;

