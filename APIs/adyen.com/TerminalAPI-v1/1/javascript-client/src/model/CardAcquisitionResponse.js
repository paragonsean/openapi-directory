/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyAccount from './LoyaltyAccount';
import POIData from './POIData';
import PaymentInstrumentData from './PaymentInstrumentData';
import Response from './Response';
import SaleData from './SaleData';

/**
 * The CardAcquisitionResponse model module.
 * @module model/CardAcquisitionResponse
 * @version 1
 */
class CardAcquisitionResponse {
    /**
     * Constructs a new <code>CardAcquisitionResponse</code>.
     * It conveys Information related to the payment and loyalty cards read and processed by the POI System and entered by the Customer. Content of the Card Acquisition Response message.
     * @alias module:model/CardAcquisitionResponse
     * @param pOIData {module:model/POIData} 
     * @param response {module:model/Response} 
     * @param saleData {module:model/SaleData} 
     */
    constructor(pOIData, response, saleData) { 
        
        CardAcquisitionResponse.initialize(this, pOIData, response, saleData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, pOIData, response, saleData) { 
        obj['POIData'] = pOIData;
        obj['Response'] = response;
        obj['SaleData'] = saleData;
    }

    /**
     * Constructs a <code>CardAcquisitionResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardAcquisitionResponse} obj Optional instance to populate.
     * @return {module:model/CardAcquisitionResponse} The populated <code>CardAcquisitionResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardAcquisitionResponse();

            if (data.hasOwnProperty('CustomerLanguage')) {
                obj['CustomerLanguage'] = ApiClient.convertToType(data['CustomerLanguage'], 'String');
            }
            if (data.hasOwnProperty('LoyaltyAccount')) {
                obj['LoyaltyAccount'] = ApiClient.convertToType(data['LoyaltyAccount'], [LoyaltyAccount]);
            }
            if (data.hasOwnProperty('POIData')) {
                obj['POIData'] = POIData.constructFromObject(data['POIData']);
            }
            if (data.hasOwnProperty('PaymentBrand')) {
                obj['PaymentBrand'] = ApiClient.convertToType(data['PaymentBrand'], ['String']);
            }
            if (data.hasOwnProperty('PaymentInstrumentData')) {
                obj['PaymentInstrumentData'] = PaymentInstrumentData.constructFromObject(data['PaymentInstrumentData']);
            }
            if (data.hasOwnProperty('Response')) {
                obj['Response'] = Response.constructFromObject(data['Response']);
            }
            if (data.hasOwnProperty('SaleData')) {
                obj['SaleData'] = SaleData.constructFromObject(data['SaleData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardAcquisitionResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardAcquisitionResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CardAcquisitionResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CustomerLanguage'] && !(typeof data['CustomerLanguage'] === 'string' || data['CustomerLanguage'] instanceof String)) {
            throw new Error("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got " + data['CustomerLanguage']);
        }
        if (data['LoyaltyAccount']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LoyaltyAccount'])) {
                throw new Error("Expected the field `LoyaltyAccount` to be an array in the JSON data but got " + data['LoyaltyAccount']);
            }
            // validate the optional field `LoyaltyAccount` (array)
            for (const item of data['LoyaltyAccount']) {
                LoyaltyAccount.validateJSON(item);
            };
        }
        // validate the optional field `POIData`
        if (data['POIData']) { // data not null
          POIData.validateJSON(data['POIData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['PaymentBrand'])) {
            throw new Error("Expected the field `PaymentBrand` to be an array in the JSON data but got " + data['PaymentBrand']);
        }
        // validate the optional field `PaymentInstrumentData`
        if (data['PaymentInstrumentData']) { // data not null
          PaymentInstrumentData.validateJSON(data['PaymentInstrumentData']);
        }
        // validate the optional field `Response`
        if (data['Response']) { // data not null
          Response.validateJSON(data['Response']);
        }
        // validate the optional field `SaleData`
        if (data['SaleData']) { // data not null
          SaleData.validateJSON(data['SaleData']);
        }

        return true;
    }


}

CardAcquisitionResponse.RequiredProperties = ["POIData", "Response", "SaleData"];

/**
 * Data related to the POI System.
 * @member {String} CustomerLanguage
 */
CardAcquisitionResponse.prototype['CustomerLanguage'] = undefined;

/**
 * @member {Array.<module:model/LoyaltyAccount>} LoyaltyAccount
 */
CardAcquisitionResponse.prototype['LoyaltyAccount'] = undefined;

/**
 * @member {module:model/POIData} POIData
 */
CardAcquisitionResponse.prototype['POIData'] = undefined;

/**
 * @member {Array.<String>} PaymentBrand
 */
CardAcquisitionResponse.prototype['PaymentBrand'] = undefined;

/**
 * @member {module:model/PaymentInstrumentData} PaymentInstrumentData
 */
CardAcquisitionResponse.prototype['PaymentInstrumentData'] = undefined;

/**
 * @member {module:model/Response} Response
 */
CardAcquisitionResponse.prototype['Response'] = undefined;

/**
 * @member {module:model/SaleData} SaleData
 */
CardAcquisitionResponse.prototype['SaleData'] = undefined;






export default CardAcquisitionResponse;

