/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MenuEntryTag from './MenuEntryTag';
import OutputFormat from './OutputFormat';
import OutputText from './OutputText';
import PredefinedContent from './PredefinedContent';

/**
 * The MenuEntry model module.
 * @module model/MenuEntry
 * @version 1
 */
class MenuEntry {
    /**
     * Constructs a new <code>MenuEntry</code>.
     * It conveys message text and parameters of the menu entry. This output data could be only provided for an input command, in order to choose an entryof the menu. An entryof the menu to present to the Cashier.
     * @alias module:model/MenuEntry
     * @param outputFormat {module:model/OutputFormat} 
     */
    constructor(outputFormat) { 
        
        MenuEntry.initialize(this, outputFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outputFormat) { 
        obj['DefaultSelectedFlag'] = false;
        obj['OutputFormat'] = outputFormat;
    }

    /**
     * Constructs a <code>MenuEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MenuEntry} obj Optional instance to populate.
     * @return {module:model/MenuEntry} The populated <code>MenuEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MenuEntry();

            if (data.hasOwnProperty('DefaultSelectedFlag')) {
                obj['DefaultSelectedFlag'] = ApiClient.convertToType(data['DefaultSelectedFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('MenuEntryTag')) {
                obj['MenuEntryTag'] = MenuEntryTag.constructFromObject(data['MenuEntryTag']);
            }
            if (data.hasOwnProperty('OutputFormat')) {
                obj['OutputFormat'] = OutputFormat.constructFromObject(data['OutputFormat']);
            }
            if (data.hasOwnProperty('OutputText')) {
                obj['OutputText'] = ApiClient.convertToType(data['OutputText'], [OutputText]);
            }
            if (data.hasOwnProperty('OutputXHTML')) {
                obj['OutputXHTML'] = ApiClient.convertToType(data['OutputXHTML'], 'String');
            }
            if (data.hasOwnProperty('PredefinedContent')) {
                obj['PredefinedContent'] = PredefinedContent.constructFromObject(data['PredefinedContent']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MenuEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MenuEntry</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MenuEntry.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['OutputText']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OutputText'])) {
                throw new Error("Expected the field `OutputText` to be an array in the JSON data but got " + data['OutputText']);
            }
            // validate the optional field `OutputText` (array)
            for (const item of data['OutputText']) {
                OutputText.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['OutputXHTML'] && !(typeof data['OutputXHTML'] === 'string' || data['OutputXHTML'] instanceof String)) {
            throw new Error("Expected the field `OutputXHTML` to be a primitive type in the JSON string but got " + data['OutputXHTML']);
        }
        // validate the optional field `PredefinedContent`
        if (data['PredefinedContent']) { // data not null
          PredefinedContent.validateJSON(data['PredefinedContent']);
        }

        return true;
    }


}

MenuEntry.RequiredProperties = ["OutputFormat"];

/**
 * @member {Boolean} DefaultSelectedFlag
 * @default false
 */
MenuEntry.prototype['DefaultSelectedFlag'] = false;

/**
 * @member {module:model/MenuEntryTag} MenuEntryTag
 */
MenuEntry.prototype['MenuEntryTag'] = undefined;

/**
 * @member {module:model/OutputFormat} OutputFormat
 */
MenuEntry.prototype['OutputFormat'] = undefined;

/**
 * @member {Array.<module:model/OutputText>} OutputText
 */
MenuEntry.prototype['OutputText'] = undefined;

/**
 * @member {String} OutputXHTML
 */
MenuEntry.prototype['OutputXHTML'] = undefined;

/**
 * @member {module:model/PredefinedContent} PredefinedContent
 */
MenuEntry.prototype['PredefinedContent'] = undefined;






export default MenuEntry;

