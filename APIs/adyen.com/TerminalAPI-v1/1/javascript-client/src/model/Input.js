/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputCommand from './InputCommand';

/**
 * The Input model module.
 * @module model/Input
 * @version 1
 */
class Input {
    /**
     * Constructs a new <code>Input</code>.
     * @alias module:model/Input
     * @param inputCommand {module:model/InputCommand} 
     */
    constructor(inputCommand) { 
        
        Input.initialize(this, inputCommand);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputCommand) { 
        obj['InputCommand'] = inputCommand;
    }

    /**
     * Constructs a <code>Input</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Input} obj Optional instance to populate.
     * @return {module:model/Input} The populated <code>Input</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Input();

            if (data.hasOwnProperty('ConfirmedFlag')) {
                obj['ConfirmedFlag'] = ApiClient.convertToType(data['ConfirmedFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('DigitInput')) {
                obj['DigitInput'] = ApiClient.convertToType(data['DigitInput'], 'Number');
            }
            if (data.hasOwnProperty('FunctionKey')) {
                obj['FunctionKey'] = ApiClient.convertToType(data['FunctionKey'], 'Number');
            }
            if (data.hasOwnProperty('InputCommand')) {
                obj['InputCommand'] = InputCommand.constructFromObject(data['InputCommand']);
            }
            if (data.hasOwnProperty('MenuEntryNumber')) {
                obj['MenuEntryNumber'] = ApiClient.convertToType(data['MenuEntryNumber'], ['Number']);
            }
            if (data.hasOwnProperty('Password')) {
                obj['Password'] = ApiClient.convertToType(data['Password'], 'String');
            }
            if (data.hasOwnProperty('TextInput')) {
                obj['TextInput'] = ApiClient.convertToType(data['TextInput'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Input</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Input</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Input.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['MenuEntryNumber'])) {
            throw new Error("Expected the field `MenuEntryNumber` to be an array in the JSON data but got " + data['MenuEntryNumber']);
        }
        // ensure the json data is a string
        if (data['Password'] && !(typeof data['Password'] === 'string' || data['Password'] instanceof String)) {
            throw new Error("Expected the field `Password` to be a primitive type in the JSON string but got " + data['Password']);
        }
        // ensure the json data is a string
        if (data['TextInput'] && !(typeof data['TextInput'] === 'string' || data['TextInput'] instanceof String)) {
            throw new Error("Expected the field `TextInput` to be a primitive type in the JSON string but got " + data['TextInput']);
        }

        return true;
    }


}

Input.RequiredProperties = ["InputCommand"];

/**
 * @member {Boolean} ConfirmedFlag
 */
Input.prototype['ConfirmedFlag'] = undefined;

/**
 * @member {Number} DigitInput
 */
Input.prototype['DigitInput'] = undefined;

/**
 * @member {Number} FunctionKey
 */
Input.prototype['FunctionKey'] = undefined;

/**
 * @member {module:model/InputCommand} InputCommand
 */
Input.prototype['InputCommand'] = undefined;

/**
 * @member {Array.<Number>} MenuEntryNumber
 */
Input.prototype['MenuEntryNumber'] = undefined;

/**
 * @member {String} Password
 */
Input.prototype['Password'] = undefined;

/**
 * @member {String} TextInput
 */
Input.prototype['TextInput'] = undefined;






export default Input;

