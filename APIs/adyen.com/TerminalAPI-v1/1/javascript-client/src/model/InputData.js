/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Device from './Device';
import InfoQualify from './InfoQualify';
import InputCommand from './InputCommand';

/**
 * The InputData model module.
 * @module model/InputData
 * @version 1
 */
class InputData {
    /**
     * Constructs a new <code>InputData</code>.
     * @alias module:model/InputData
     * @param device {module:model/Device} 
     * @param infoQualify {module:model/InfoQualify} 
     * @param inputCommand {module:model/InputCommand} 
     */
    constructor(device, infoQualify, inputCommand) { 
        
        InputData.initialize(this, device, infoQualify, inputCommand);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, device, infoQualify, inputCommand) { 
        obj['BeepKeyFlag'] = false;
        obj['Device'] = device;
        obj['DisableCancelFlag'] = false;
        obj['DisableCorrectFlag'] = false;
        obj['DisableValidFlag'] = false;
        obj['FromRightToLeftFlag'] = false;
        obj['GlobalCorrectionFlag'] = false;
        obj['ImmediateResponseFlag'] = false;
        obj['InfoQualify'] = infoQualify;
        obj['InputCommand'] = inputCommand;
        obj['MaskCharactersFlag'] = false;
        obj['MenuBackFlag'] = false;
        obj['NotifyCardInputFlag'] = false;
        obj['WaitUserValidationFlag'] = true;
    }

    /**
     * Constructs a <code>InputData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputData} obj Optional instance to populate.
     * @return {module:model/InputData} The populated <code>InputData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputData();

            if (data.hasOwnProperty('BeepKeyFlag')) {
                obj['BeepKeyFlag'] = ApiClient.convertToType(data['BeepKeyFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('DefaultInputString')) {
                obj['DefaultInputString'] = ApiClient.convertToType(data['DefaultInputString'], 'String');
            }
            if (data.hasOwnProperty('DefaultLayoutString')) {
                obj['DefaultLayoutString'] = ApiClient.convertToType(data['DefaultLayoutString'], 'String');
            }
            if (data.hasOwnProperty('Device')) {
                obj['Device'] = Device.constructFromObject(data['Device']);
            }
            if (data.hasOwnProperty('DisableCancelFlag')) {
                obj['DisableCancelFlag'] = ApiClient.convertToType(data['DisableCancelFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('DisableCorrectFlag')) {
                obj['DisableCorrectFlag'] = ApiClient.convertToType(data['DisableCorrectFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('DisableValidFlag')) {
                obj['DisableValidFlag'] = ApiClient.convertToType(data['DisableValidFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('FromRightToLeftFlag')) {
                obj['FromRightToLeftFlag'] = ApiClient.convertToType(data['FromRightToLeftFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('GlobalCorrectionFlag')) {
                obj['GlobalCorrectionFlag'] = ApiClient.convertToType(data['GlobalCorrectionFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('ImmediateResponseFlag')) {
                obj['ImmediateResponseFlag'] = ApiClient.convertToType(data['ImmediateResponseFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('InfoQualify')) {
                obj['InfoQualify'] = InfoQualify.constructFromObject(data['InfoQualify']);
            }
            if (data.hasOwnProperty('InputCommand')) {
                obj['InputCommand'] = InputCommand.constructFromObject(data['InputCommand']);
            }
            if (data.hasOwnProperty('MaskCharactersFlag')) {
                obj['MaskCharactersFlag'] = ApiClient.convertToType(data['MaskCharactersFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('MaxDecimalLength')) {
                obj['MaxDecimalLength'] = ApiClient.convertToType(data['MaxDecimalLength'], 'Number');
            }
            if (data.hasOwnProperty('MaxInputTime')) {
                obj['MaxInputTime'] = ApiClient.convertToType(data['MaxInputTime'], 'Number');
            }
            if (data.hasOwnProperty('MaxLength')) {
                obj['MaxLength'] = ApiClient.convertToType(data['MaxLength'], 'Number');
            }
            if (data.hasOwnProperty('MenuBackFlag')) {
                obj['MenuBackFlag'] = ApiClient.convertToType(data['MenuBackFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('MinLength')) {
                obj['MinLength'] = ApiClient.convertToType(data['MinLength'], 'Number');
            }
            if (data.hasOwnProperty('NotifyCardInputFlag')) {
                obj['NotifyCardInputFlag'] = ApiClient.convertToType(data['NotifyCardInputFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('StringMask')) {
                obj['StringMask'] = ApiClient.convertToType(data['StringMask'], 'String');
            }
            if (data.hasOwnProperty('WaitUserValidationFlag')) {
                obj['WaitUserValidationFlag'] = ApiClient.convertToType(data['WaitUserValidationFlag'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DefaultInputString'] && !(typeof data['DefaultInputString'] === 'string' || data['DefaultInputString'] instanceof String)) {
            throw new Error("Expected the field `DefaultInputString` to be a primitive type in the JSON string but got " + data['DefaultInputString']);
        }
        // ensure the json data is a string
        if (data['DefaultLayoutString'] && !(typeof data['DefaultLayoutString'] === 'string' || data['DefaultLayoutString'] instanceof String)) {
            throw new Error("Expected the field `DefaultLayoutString` to be a primitive type in the JSON string but got " + data['DefaultLayoutString']);
        }
        // ensure the json data is a string
        if (data['StringMask'] && !(typeof data['StringMask'] === 'string' || data['StringMask'] instanceof String)) {
            throw new Error("Expected the field `StringMask` to be a primitive type in the JSON string but got " + data['StringMask']);
        }

        return true;
    }


}

InputData.RequiredProperties = ["Device", "InfoQualify", "InputCommand"];

/**
 * @member {Boolean} BeepKeyFlag
 * @default false
 */
InputData.prototype['BeepKeyFlag'] = false;

/**
 * @member {String} DefaultInputString
 */
InputData.prototype['DefaultInputString'] = undefined;

/**
 * @member {String} DefaultLayoutString
 */
InputData.prototype['DefaultLayoutString'] = undefined;

/**
 * @member {module:model/Device} Device
 */
InputData.prototype['Device'] = undefined;

/**
 * @member {Boolean} DisableCancelFlag
 * @default false
 */
InputData.prototype['DisableCancelFlag'] = false;

/**
 * @member {Boolean} DisableCorrectFlag
 * @default false
 */
InputData.prototype['DisableCorrectFlag'] = false;

/**
 * @member {Boolean} DisableValidFlag
 * @default false
 */
InputData.prototype['DisableValidFlag'] = false;

/**
 * @member {Boolean} FromRightToLeftFlag
 * @default false
 */
InputData.prototype['FromRightToLeftFlag'] = false;

/**
 * @member {Boolean} GlobalCorrectionFlag
 * @default false
 */
InputData.prototype['GlobalCorrectionFlag'] = false;

/**
 * @member {Boolean} ImmediateResponseFlag
 * @default false
 */
InputData.prototype['ImmediateResponseFlag'] = false;

/**
 * @member {module:model/InfoQualify} InfoQualify
 */
InputData.prototype['InfoQualify'] = undefined;

/**
 * @member {module:model/InputCommand} InputCommand
 */
InputData.prototype['InputCommand'] = undefined;

/**
 * @member {Boolean} MaskCharactersFlag
 * @default false
 */
InputData.prototype['MaskCharactersFlag'] = false;

/**
 * @member {Number} MaxDecimalLength
 */
InputData.prototype['MaxDecimalLength'] = undefined;

/**
 * @member {Number} MaxInputTime
 */
InputData.prototype['MaxInputTime'] = undefined;

/**
 * @member {Number} MaxLength
 */
InputData.prototype['MaxLength'] = undefined;

/**
 * @member {Boolean} MenuBackFlag
 * @default false
 */
InputData.prototype['MenuBackFlag'] = false;

/**
 * @member {Number} MinLength
 */
InputData.prototype['MinLength'] = undefined;

/**
 * @member {Boolean} NotifyCardInputFlag
 * @default false
 */
InputData.prototype['NotifyCardInputFlag'] = false;

/**
 * @member {String} StringMask
 */
InputData.prototype['StringMask'] = undefined;

/**
 * @member {Boolean} WaitUserValidationFlag
 * @default true
 */
InputData.prototype['WaitUserValidationFlag'] = true;






export default InputData;

