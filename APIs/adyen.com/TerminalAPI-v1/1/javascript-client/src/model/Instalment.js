/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstalmentType from './InstalmentType';
import PeriodUnit from './PeriodUnit';

/**
 * The Instalment model module.
 * @module model/Instalment
 * @version 1
 */
class Instalment {
    /**
     * Constructs a new <code>Instalment</code>.
     * @alias module:model/Instalment
     */
    constructor() { 
        
        Instalment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instalment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instalment} obj Optional instance to populate.
     * @return {module:model/Instalment} The populated <code>Instalment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instalment();

            if (data.hasOwnProperty('Charges')) {
                obj['Charges'] = ApiClient.convertToType(data['Charges'], 'Number');
            }
            if (data.hasOwnProperty('CumulativeAmount')) {
                obj['CumulativeAmount'] = ApiClient.convertToType(data['CumulativeAmount'], 'Number');
            }
            if (data.hasOwnProperty('FirstAmount')) {
                obj['FirstAmount'] = ApiClient.convertToType(data['FirstAmount'], 'Number');
            }
            if (data.hasOwnProperty('FirstPaymentDate')) {
                obj['FirstPaymentDate'] = ApiClient.convertToType(data['FirstPaymentDate'], 'Date');
            }
            if (data.hasOwnProperty('InstalmentType')) {
                obj['InstalmentType'] = InstalmentType.constructFromObject(data['InstalmentType']);
            }
            if (data.hasOwnProperty('Period')) {
                obj['Period'] = ApiClient.convertToType(data['Period'], 'Number');
            }
            if (data.hasOwnProperty('PeriodUnit')) {
                obj['PeriodUnit'] = PeriodUnit.constructFromObject(data['PeriodUnit']);
            }
            if (data.hasOwnProperty('PlanID')) {
                obj['PlanID'] = ApiClient.convertToType(data['PlanID'], 'String');
            }
            if (data.hasOwnProperty('SequenceNumber')) {
                obj['SequenceNumber'] = ApiClient.convertToType(data['SequenceNumber'], 'Number');
            }
            if (data.hasOwnProperty('TotalNbOfPayments')) {
                obj['TotalNbOfPayments'] = ApiClient.convertToType(data['TotalNbOfPayments'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instalment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instalment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['PlanID'] && !(typeof data['PlanID'] === 'string' || data['PlanID'] instanceof String)) {
            throw new Error("Expected the field `PlanID` to be a primitive type in the JSON string but got " + data['PlanID']);
        }

        return true;
    }


}



/**
 * @member {Number} Charges
 */
Instalment.prototype['Charges'] = undefined;

/**
 * @member {Number} CumulativeAmount
 */
Instalment.prototype['CumulativeAmount'] = undefined;

/**
 * @member {Number} FirstAmount
 */
Instalment.prototype['FirstAmount'] = undefined;

/**
 * @member {Date} FirstPaymentDate
 */
Instalment.prototype['FirstPaymentDate'] = undefined;

/**
 * @member {module:model/InstalmentType} InstalmentType
 */
Instalment.prototype['InstalmentType'] = undefined;

/**
 * @member {Number} Period
 */
Instalment.prototype['Period'] = undefined;

/**
 * @member {module:model/PeriodUnit} PeriodUnit
 */
Instalment.prototype['PeriodUnit'] = undefined;

/**
 * @member {String} PlanID
 */
Instalment.prototype['PlanID'] = undefined;

/**
 * @member {Number} SequenceNumber
 */
Instalment.prototype['SequenceNumber'] = undefined;

/**
 * @member {Number} TotalNbOfPayments
 */
Instalment.prototype['TotalNbOfPayments'] = undefined;






export default Instalment;

