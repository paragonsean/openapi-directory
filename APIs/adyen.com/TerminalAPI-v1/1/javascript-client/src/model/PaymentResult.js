/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmountsResp from './AmountsResp';
import CapturedSignature from './CapturedSignature';
import CurrencyConversion from './CurrencyConversion';
import Instalment from './Instalment';
import PaymentAcquirerData from './PaymentAcquirerData';
import PaymentInstrumentData from './PaymentInstrumentData';
import PaymentType from './PaymentType';

/**
 * The PaymentResult model module.
 * @module model/PaymentResult
 * @version 1
 */
class PaymentResult {
    /**
     * Constructs a new <code>PaymentResult</code>.
     * @alias module:model/PaymentResult
     */
    constructor() { 
        
        PaymentResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['MerchantOverrideFlag'] = false;
        obj['OnlineFlag'] = true;
    }

    /**
     * Constructs a <code>PaymentResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentResult} obj Optional instance to populate.
     * @return {module:model/PaymentResult} The populated <code>PaymentResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentResult();

            if (data.hasOwnProperty('AmountsResp')) {
                obj['AmountsResp'] = AmountsResp.constructFromObject(data['AmountsResp']);
            }
            if (data.hasOwnProperty('AuthenticationMethod')) {
                obj['AuthenticationMethod'] = ApiClient.convertToType(data['AuthenticationMethod'], ['String']);
            }
            if (data.hasOwnProperty('CapturedSignature')) {
                obj['CapturedSignature'] = CapturedSignature.constructFromObject(data['CapturedSignature']);
            }
            if (data.hasOwnProperty('CurrencyConversion')) {
                obj['CurrencyConversion'] = ApiClient.convertToType(data['CurrencyConversion'], [CurrencyConversion]);
            }
            if (data.hasOwnProperty('CustomerLanguage')) {
                obj['CustomerLanguage'] = ApiClient.convertToType(data['CustomerLanguage'], 'String');
            }
            if (data.hasOwnProperty('Instalment')) {
                obj['Instalment'] = Instalment.constructFromObject(data['Instalment']);
            }
            if (data.hasOwnProperty('MerchantOverrideFlag')) {
                obj['MerchantOverrideFlag'] = ApiClient.convertToType(data['MerchantOverrideFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('OnlineFlag')) {
                obj['OnlineFlag'] = ApiClient.convertToType(data['OnlineFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('PaymentAcquirerData')) {
                obj['PaymentAcquirerData'] = PaymentAcquirerData.constructFromObject(data['PaymentAcquirerData']);
            }
            if (data.hasOwnProperty('PaymentInstrumentData')) {
                obj['PaymentInstrumentData'] = PaymentInstrumentData.constructFromObject(data['PaymentInstrumentData']);
            }
            if (data.hasOwnProperty('PaymentType')) {
                obj['PaymentType'] = PaymentType.constructFromObject(data['PaymentType']);
            }
            if (data.hasOwnProperty('ProtectedSignature')) {
                obj['ProtectedSignature'] = ApiClient.convertToType(data['ProtectedSignature'], 'String');
            }
            if (data.hasOwnProperty('ValidityDate')) {
                obj['ValidityDate'] = ApiClient.convertToType(data['ValidityDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentResult</code>.
     */
    static validateJSON(data) {
        // validate the optional field `AmountsResp`
        if (data['AmountsResp']) { // data not null
          AmountsResp.validateJSON(data['AmountsResp']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AuthenticationMethod'])) {
            throw new Error("Expected the field `AuthenticationMethod` to be an array in the JSON data but got " + data['AuthenticationMethod']);
        }
        // validate the optional field `CapturedSignature`
        if (data['CapturedSignature']) { // data not null
          CapturedSignature.validateJSON(data['CapturedSignature']);
        }
        if (data['CurrencyConversion']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CurrencyConversion'])) {
                throw new Error("Expected the field `CurrencyConversion` to be an array in the JSON data but got " + data['CurrencyConversion']);
            }
            // validate the optional field `CurrencyConversion` (array)
            for (const item of data['CurrencyConversion']) {
                CurrencyConversion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['CustomerLanguage'] && !(typeof data['CustomerLanguage'] === 'string' || data['CustomerLanguage'] instanceof String)) {
            throw new Error("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got " + data['CustomerLanguage']);
        }
        // validate the optional field `Instalment`
        if (data['Instalment']) { // data not null
          Instalment.validateJSON(data['Instalment']);
        }
        // validate the optional field `PaymentAcquirerData`
        if (data['PaymentAcquirerData']) { // data not null
          PaymentAcquirerData.validateJSON(data['PaymentAcquirerData']);
        }
        // validate the optional field `PaymentInstrumentData`
        if (data['PaymentInstrumentData']) { // data not null
          PaymentInstrumentData.validateJSON(data['PaymentInstrumentData']);
        }
        // ensure the json data is a string
        if (data['ProtectedSignature'] && !(typeof data['ProtectedSignature'] === 'string' || data['ProtectedSignature'] instanceof String)) {
            throw new Error("Expected the field `ProtectedSignature` to be a primitive type in the JSON string but got " + data['ProtectedSignature']);
        }

        return true;
    }


}



/**
 * @member {module:model/AmountsResp} AmountsResp
 */
PaymentResult.prototype['AmountsResp'] = undefined;

/**
 * @member {Array.<module:model/PaymentResult.AuthenticationMethodEnum>} AuthenticationMethod
 */
PaymentResult.prototype['AuthenticationMethod'] = undefined;

/**
 * @member {module:model/CapturedSignature} CapturedSignature
 */
PaymentResult.prototype['CapturedSignature'] = undefined;

/**
 * @member {Array.<module:model/CurrencyConversion>} CurrencyConversion
 */
PaymentResult.prototype['CurrencyConversion'] = undefined;

/**
 * @member {String} CustomerLanguage
 */
PaymentResult.prototype['CustomerLanguage'] = undefined;

/**
 * @member {module:model/Instalment} Instalment
 */
PaymentResult.prototype['Instalment'] = undefined;

/**
 * @member {Boolean} MerchantOverrideFlag
 * @default false
 */
PaymentResult.prototype['MerchantOverrideFlag'] = false;

/**
 * @member {Boolean} OnlineFlag
 * @default true
 */
PaymentResult.prototype['OnlineFlag'] = true;

/**
 * @member {module:model/PaymentAcquirerData} PaymentAcquirerData
 */
PaymentResult.prototype['PaymentAcquirerData'] = undefined;

/**
 * @member {module:model/PaymentInstrumentData} PaymentInstrumentData
 */
PaymentResult.prototype['PaymentInstrumentData'] = undefined;

/**
 * @member {module:model/PaymentType} PaymentType
 */
PaymentResult.prototype['PaymentType'] = undefined;

/**
 * @member {String} ProtectedSignature
 */
PaymentResult.prototype['ProtectedSignature'] = undefined;

/**
 * @member {Date} ValidityDate
 */
PaymentResult.prototype['ValidityDate'] = undefined;





/**
 * Allowed values for the <code>authenticationMethod</code> property.
 * @enum {String}
 * @readonly
 */
PaymentResult['AuthenticationMethodEnum'] = {

    /**
     * value: "Bypass"
     * @const
     */
    "Bypass": "Bypass",

    /**
     * value: "ManualVerification"
     * @const
     */
    "ManualVerification": "ManualVerification",

    /**
     * value: "MerchantAuthentication"
     * @const
     */
    "MerchantAuthentication": "MerchantAuthentication",

    /**
     * value: "OfflinePIN"
     * @const
     */
    "OfflinePIN": "OfflinePIN",

    /**
     * value: "OnlinePIN"
     * @const
     */
    "OnlinePIN": "OnlinePIN",

    /**
     * value: "PaperSignature"
     * @const
     */
    "PaperSignature": "PaperSignature",

    /**
     * value: "SecureCertificate"
     * @const
     */
    "SecureCertificate": "SecureCertificate",

    /**
     * value: "SecureNoCertificate"
     * @const
     */
    "SecureNoCertificate": "SecureNoCertificate",

    /**
     * value: "SecuredChannel"
     * @const
     */
    "SecuredChannel": "SecuredChannel",

    /**
     * value: "SignatureCapture"
     * @const
     */
    "SignatureCapture": "SignatureCapture",

    /**
     * value: "UnknownMethod"
     * @const
     */
    "UnknownMethod": "UnknownMethod"
};



export default PaymentResult;

