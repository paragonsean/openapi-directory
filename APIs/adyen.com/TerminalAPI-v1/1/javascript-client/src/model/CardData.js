/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowedProduct from './AllowedProduct';
import CustomerOrder from './CustomerOrder';
import PaymentToken from './PaymentToken';
import SensitiveCardData from './SensitiveCardData';

/**
 * The CardData model module.
 * @module model/CardData
 * @version 1
 */
class CardData {
    /**
     * Constructs a new <code>CardData</code>.
     * Allows acquisition of the card data by the Sale System before the Payment, CardAcquisition  or BalanceInquiry request to the POI. It could also be sent in the CardAcquisition response, to be processed by the Sale System. Information related to the payment card used for the transaction.
     * @alias module:model/CardData
     */
    constructor() { 
        
        CardData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardData} obj Optional instance to populate.
     * @return {module:model/CardData} The populated <code>CardData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardData();

            if (data.hasOwnProperty('AllowedProduct')) {
                obj['AllowedProduct'] = ApiClient.convertToType(data['AllowedProduct'], [AllowedProduct]);
            }
            if (data.hasOwnProperty('AllowedProductCode')) {
                obj['AllowedProductCode'] = ApiClient.convertToType(data['AllowedProductCode'], ['Number']);
            }
            if (data.hasOwnProperty('CardCountryCode')) {
                obj['CardCountryCode'] = ApiClient.convertToType(data['CardCountryCode'], 'Number');
            }
            if (data.hasOwnProperty('CustomerOrder')) {
                obj['CustomerOrder'] = ApiClient.convertToType(data['CustomerOrder'], [CustomerOrder]);
            }
            if (data.hasOwnProperty('EntryMode')) {
                obj['EntryMode'] = ApiClient.convertToType(data['EntryMode'], ['String']);
            }
            if (data.hasOwnProperty('MaskedPan')) {
                obj['MaskedPan'] = ApiClient.convertToType(data['MaskedPan'], 'String');
            }
            if (data.hasOwnProperty('PaymentAccountRef')) {
                obj['PaymentAccountRef'] = ApiClient.convertToType(data['PaymentAccountRef'], 'String');
            }
            if (data.hasOwnProperty('PaymentBrand')) {
                obj['PaymentBrand'] = ApiClient.convertToType(data['PaymentBrand'], 'String');
            }
            if (data.hasOwnProperty('PaymentToken')) {
                obj['PaymentToken'] = PaymentToken.constructFromObject(data['PaymentToken']);
            }
            if (data.hasOwnProperty('ProtectedCardData')) {
                obj['ProtectedCardData'] = ApiClient.convertToType(data['ProtectedCardData'], 'String');
            }
            if (data.hasOwnProperty('SensitiveCardData')) {
                obj['SensitiveCardData'] = SensitiveCardData.constructFromObject(data['SensitiveCardData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardData</code>.
     */
    static validateJSON(data) {
        if (data['AllowedProduct']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['AllowedProduct'])) {
                throw new Error("Expected the field `AllowedProduct` to be an array in the JSON data but got " + data['AllowedProduct']);
            }
            // validate the optional field `AllowedProduct` (array)
            for (const item of data['AllowedProduct']) {
                AllowedProduct.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AllowedProductCode'])) {
            throw new Error("Expected the field `AllowedProductCode` to be an array in the JSON data but got " + data['AllowedProductCode']);
        }
        if (data['CustomerOrder']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CustomerOrder'])) {
                throw new Error("Expected the field `CustomerOrder` to be an array in the JSON data but got " + data['CustomerOrder']);
            }
            // validate the optional field `CustomerOrder` (array)
            for (const item of data['CustomerOrder']) {
                CustomerOrder.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EntryMode'])) {
            throw new Error("Expected the field `EntryMode` to be an array in the JSON data but got " + data['EntryMode']);
        }
        // ensure the json data is a string
        if (data['MaskedPan'] && !(typeof data['MaskedPan'] === 'string' || data['MaskedPan'] instanceof String)) {
            throw new Error("Expected the field `MaskedPan` to be a primitive type in the JSON string but got " + data['MaskedPan']);
        }
        // ensure the json data is a string
        if (data['PaymentAccountRef'] && !(typeof data['PaymentAccountRef'] === 'string' || data['PaymentAccountRef'] instanceof String)) {
            throw new Error("Expected the field `PaymentAccountRef` to be a primitive type in the JSON string but got " + data['PaymentAccountRef']);
        }
        // ensure the json data is a string
        if (data['PaymentBrand'] && !(typeof data['PaymentBrand'] === 'string' || data['PaymentBrand'] instanceof String)) {
            throw new Error("Expected the field `PaymentBrand` to be a primitive type in the JSON string but got " + data['PaymentBrand']);
        }
        // validate the optional field `PaymentToken`
        if (data['PaymentToken']) { // data not null
          PaymentToken.validateJSON(data['PaymentToken']);
        }
        // ensure the json data is a string
        if (data['ProtectedCardData'] && !(typeof data['ProtectedCardData'] === 'string' || data['ProtectedCardData'] instanceof String)) {
            throw new Error("Expected the field `ProtectedCardData` to be a primitive type in the JSON string but got " + data['ProtectedCardData']);
        }
        // validate the optional field `SensitiveCardData`
        if (data['SensitiveCardData']) { // data not null
          SensitiveCardData.validateJSON(data['SensitiveCardData']);
        }

        return true;
    }


}



/**
 * @member {Array.<module:model/AllowedProduct>} AllowedProduct
 */
CardData.prototype['AllowedProduct'] = undefined;

/**
 * @member {Array.<Number>} AllowedProductCode
 */
CardData.prototype['AllowedProductCode'] = undefined;

/**
 * If available in the card.
 * @member {Number} CardCountryCode
 */
CardData.prototype['CardCountryCode'] = undefined;

/**
 * @member {Array.<module:model/CustomerOrder>} CustomerOrder
 */
CardData.prototype['CustomerOrder'] = undefined;

/**
 * @member {Array.<module:model/CardData.EntryModeEnum>} EntryMode
 */
CardData.prototype['EntryMode'] = undefined;

/**
 * @member {String} MaskedPan
 */
CardData.prototype['MaskedPan'] = undefined;

/**
 * @member {String} PaymentAccountRef
 */
CardData.prototype['PaymentAccountRef'] = undefined;

/**
 * If card PAN is readable .
 * @member {String} PaymentBrand
 */
CardData.prototype['PaymentBrand'] = undefined;

/**
 * @member {module:model/PaymentToken} PaymentToken
 */
CardData.prototype['PaymentToken'] = undefined;

/**
 * SensitiveCardData protected by CMS EnvelopedData.
 * @member {String} ProtectedCardData
 */
CardData.prototype['ProtectedCardData'] = undefined;

/**
 * @member {module:model/SensitiveCardData} SensitiveCardData
 */
CardData.prototype['SensitiveCardData'] = undefined;





/**
 * Allowed values for the <code>entryMode</code> property.
 * @enum {String}
 * @readonly
 */
CardData['EntryModeEnum'] = {

    /**
     * value: "Contactless"
     * @const
     */
    "Contactless": "Contactless",

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "ICC"
     * @const
     */
    "ICC": "ICC",

    /**
     * value: "Keyed"
     * @const
     */
    "Keyed": "Keyed",

    /**
     * value: "MagStripe"
     * @const
     */
    "MagStripe": "MagStripe",

    /**
     * value: "Manual"
     * @const
     */
    "Manual": "Manual",

    /**
     * value: "Mobile"
     * @const
     */
    "Mobile": "Mobile",

    /**
     * value: "RFID"
     * @const
     */
    "RFID": "RFID",

    /**
     * value: "Scanned"
     * @const
     */
    "Scanned": "Scanned",

    /**
     * value: "SynchronousICC"
     * @const
     */
    "SynchronousICC": "SynchronousICC",

    /**
     * value: "Tapped"
     * @const
     */
    "Tapped": "Tapped"
};



export default CardData;

