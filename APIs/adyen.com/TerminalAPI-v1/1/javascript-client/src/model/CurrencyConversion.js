/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConvertedAmount from './ConvertedAmount';

/**
 * The CurrencyConversion model module.
 * @module model/CurrencyConversion
 * @version 1
 */
class CurrencyConversion {
    /**
     * Constructs a new <code>CurrencyConversion</code>.
     * A currency conversion occurred in the payment, and the merchant needs to know information related to this conversion (e.g. to print on the sale receipt). Information related to a currency conversion.
     * @alias module:model/CurrencyConversion
     * @param convertedAmount {module:model/ConvertedAmount} 
     */
    constructor(convertedAmount) { 
        
        CurrencyConversion.initialize(this, convertedAmount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, convertedAmount) { 
        obj['ConvertedAmount'] = convertedAmount;
        obj['CustomerApprovedFlag'] = true;
    }

    /**
     * Constructs a <code>CurrencyConversion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrencyConversion} obj Optional instance to populate.
     * @return {module:model/CurrencyConversion} The populated <code>CurrencyConversion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrencyConversion();

            if (data.hasOwnProperty('Commission')) {
                obj['Commission'] = ApiClient.convertToType(data['Commission'], 'Number');
            }
            if (data.hasOwnProperty('ConvertedAmount')) {
                obj['ConvertedAmount'] = ConvertedAmount.constructFromObject(data['ConvertedAmount']);
            }
            if (data.hasOwnProperty('CustomerApprovedFlag')) {
                obj['CustomerApprovedFlag'] = ApiClient.convertToType(data['CustomerApprovedFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('Declaration')) {
                obj['Declaration'] = ApiClient.convertToType(data['Declaration'], 'String');
            }
            if (data.hasOwnProperty('Markup')) {
                obj['Markup'] = ApiClient.convertToType(data['Markup'], 'String');
            }
            if (data.hasOwnProperty('Rate')) {
                obj['Rate'] = ApiClient.convertToType(data['Rate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrencyConversion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrencyConversion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CurrencyConversion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `ConvertedAmount`
        if (data['ConvertedAmount']) { // data not null
          ConvertedAmount.validateJSON(data['ConvertedAmount']);
        }
        // ensure the json data is a string
        if (data['Declaration'] && !(typeof data['Declaration'] === 'string' || data['Declaration'] instanceof String)) {
            throw new Error("Expected the field `Declaration` to be a primitive type in the JSON string but got " + data['Declaration']);
        }
        // ensure the json data is a string
        if (data['Markup'] && !(typeof data['Markup'] === 'string' || data['Markup'] instanceof String)) {
            throw new Error("Expected the field `Markup` to be a primitive type in the JSON string but got " + data['Markup']);
        }
        // ensure the json data is a string
        if (data['Rate'] && !(typeof data['Rate'] === 'string' || data['Rate'] instanceof String)) {
            throw new Error("Expected the field `Rate` to be a primitive type in the JSON string but got " + data['Rate']);
        }

        return true;
    }


}

CurrencyConversion.RequiredProperties = ["ConvertedAmount"];

/**
 * Commission for a currency conversion.
 * @member {Number} Commission
 */
CurrencyConversion.prototype['Commission'] = undefined;

/**
 * @member {module:model/ConvertedAmount} ConvertedAmount
 */
CurrencyConversion.prototype['ConvertedAmount'] = undefined;

/**
 * Notify if the customer has approved something. Indicates if the customer has accepted a currency conversion.
 * @member {Boolean} CustomerApprovedFlag
 * @default true
 */
CurrencyConversion.prototype['CustomerApprovedFlag'] = true;

/**
 * If a declaration has to be presented to the customer.
 * @member {String} Declaration
 */
CurrencyConversion.prototype['Declaration'] = undefined;

/**
 * Markup of a currency conversion amount as a percentage.
 * @member {String} Markup
 */
CurrencyConversion.prototype['Markup'] = undefined;

/**
 * Rate of currency conversion.
 * @member {String} Rate
 */
CurrencyConversion.prototype['Rate'] = undefined;






export default CurrencyConversion;

