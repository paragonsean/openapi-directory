/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OutputBarcode from './OutputBarcode';
import OutputFormat from './OutputFormat';
import OutputText from './OutputText';
import PredefinedContent from './PredefinedContent';

/**
 * The OutputContent model module.
 * @module model/OutputContent
 * @version 1
 */
class OutputContent {
    /**
     * Constructs a new <code>OutputContent</code>.
     * This is a sequence of elements if they have different formats. Content to display or print.
     * @alias module:model/OutputContent
     * @param outputFormat {module:model/OutputFormat} 
     */
    constructor(outputFormat) { 
        
        OutputContent.initialize(this, outputFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, outputFormat) { 
        obj['OutputFormat'] = outputFormat;
    }

    /**
     * Constructs a <code>OutputContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputContent} obj Optional instance to populate.
     * @return {module:model/OutputContent} The populated <code>OutputContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputContent();

            if (data.hasOwnProperty('OutputBarcode')) {
                obj['OutputBarcode'] = OutputBarcode.constructFromObject(data['OutputBarcode']);
            }
            if (data.hasOwnProperty('OutputFormat')) {
                obj['OutputFormat'] = OutputFormat.constructFromObject(data['OutputFormat']);
            }
            if (data.hasOwnProperty('OutputText')) {
                obj['OutputText'] = ApiClient.convertToType(data['OutputText'], [OutputText]);
            }
            if (data.hasOwnProperty('OutputXHTML')) {
                obj['OutputXHTML'] = ApiClient.convertToType(data['OutputXHTML'], 'String');
            }
            if (data.hasOwnProperty('PredefinedContent')) {
                obj['PredefinedContent'] = PredefinedContent.constructFromObject(data['PredefinedContent']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `OutputBarcode`
        if (data['OutputBarcode']) { // data not null
          OutputBarcode.validateJSON(data['OutputBarcode']);
        }
        if (data['OutputText']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['OutputText'])) {
                throw new Error("Expected the field `OutputText` to be an array in the JSON data but got " + data['OutputText']);
            }
            // validate the optional field `OutputText` (array)
            for (const item of data['OutputText']) {
                OutputText.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['OutputXHTML'] && !(typeof data['OutputXHTML'] === 'string' || data['OutputXHTML'] instanceof String)) {
            throw new Error("Expected the field `OutputXHTML` to be a primitive type in the JSON string but got " + data['OutputXHTML']);
        }
        // validate the optional field `PredefinedContent`
        if (data['PredefinedContent']) { // data not null
          PredefinedContent.validateJSON(data['PredefinedContent']);
        }

        return true;
    }


}

OutputContent.RequiredProperties = ["OutputFormat"];

/**
 * @member {module:model/OutputBarcode} OutputBarcode
 */
OutputContent.prototype['OutputBarcode'] = undefined;

/**
 * @member {module:model/OutputFormat} OutputFormat
 */
OutputContent.prototype['OutputFormat'] = undefined;

/**
 * @member {Array.<module:model/OutputText>} OutputText
 */
OutputContent.prototype['OutputText'] = undefined;

/**
 * Mandatory, if OutputFormat is XHTML, not allowed otherwise.
 * @member {String} OutputXHTML
 */
OutputContent.prototype['OutputXHTML'] = undefined;

/**
 * @member {module:model/PredefinedContent} PredefinedContent
 */
OutputContent.prototype['PredefinedContent'] = undefined;






export default OutputContent;

