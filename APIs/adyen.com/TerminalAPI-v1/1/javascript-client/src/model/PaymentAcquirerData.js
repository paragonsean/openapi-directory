/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionIDType from './TransactionIDType';

/**
 * The PaymentAcquirerData model module.
 * @module model/PaymentAcquirerData
 * @version 1
 */
class PaymentAcquirerData {
    /**
     * Constructs a new <code>PaymentAcquirerData</code>.
     * Data related to the response from the payment Acquirer.
     * @alias module:model/PaymentAcquirerData
     * @param acquirerPOIID {String} Identification of the POI for the payment Acquirer.
     * @param merchantID {String} Identification of the Merchant for the Acquirer.
     */
    constructor(acquirerPOIID, merchantID) { 
        
        PaymentAcquirerData.initialize(this, acquirerPOIID, merchantID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acquirerPOIID, merchantID) { 
        obj['AcquirerPOIID'] = acquirerPOIID;
        obj['MerchantID'] = merchantID;
    }

    /**
     * Constructs a <code>PaymentAcquirerData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentAcquirerData} obj Optional instance to populate.
     * @return {module:model/PaymentAcquirerData} The populated <code>PaymentAcquirerData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentAcquirerData();

            if (data.hasOwnProperty('AcquirerID')) {
                obj['AcquirerID'] = ApiClient.convertToType(data['AcquirerID'], 'Number');
            }
            if (data.hasOwnProperty('AcquirerPOIID')) {
                obj['AcquirerPOIID'] = ApiClient.convertToType(data['AcquirerPOIID'], 'String');
            }
            if (data.hasOwnProperty('AcquirerTransactionID')) {
                obj['AcquirerTransactionID'] = TransactionIDType.constructFromObject(data['AcquirerTransactionID']);
            }
            if (data.hasOwnProperty('ApprovalCode')) {
                obj['ApprovalCode'] = ApiClient.convertToType(data['ApprovalCode'], 'String');
            }
            if (data.hasOwnProperty('HostReconciliationID')) {
                obj['HostReconciliationID'] = ApiClient.convertToType(data['HostReconciliationID'], 'String');
            }
            if (data.hasOwnProperty('MerchantID')) {
                obj['MerchantID'] = ApiClient.convertToType(data['MerchantID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentAcquirerData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentAcquirerData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentAcquirerData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AcquirerPOIID'] && !(typeof data['AcquirerPOIID'] === 'string' || data['AcquirerPOIID'] instanceof String)) {
            throw new Error("Expected the field `AcquirerPOIID` to be a primitive type in the JSON string but got " + data['AcquirerPOIID']);
        }
        // validate the optional field `AcquirerTransactionID`
        if (data['AcquirerTransactionID']) { // data not null
          TransactionIDType.validateJSON(data['AcquirerTransactionID']);
        }
        // ensure the json data is a string
        if (data['ApprovalCode'] && !(typeof data['ApprovalCode'] === 'string' || data['ApprovalCode'] instanceof String)) {
            throw new Error("Expected the field `ApprovalCode` to be a primitive type in the JSON string but got " + data['ApprovalCode']);
        }
        // ensure the json data is a string
        if (data['HostReconciliationID'] && !(typeof data['HostReconciliationID'] === 'string' || data['HostReconciliationID'] instanceof String)) {
            throw new Error("Expected the field `HostReconciliationID` to be a primitive type in the JSON string but got " + data['HostReconciliationID']);
        }
        // ensure the json data is a string
        if (data['MerchantID'] && !(typeof data['MerchantID'] === 'string' || data['MerchantID'] instanceof String)) {
            throw new Error("Expected the field `MerchantID` to be a primitive type in the JSON string but got " + data['MerchantID']);
        }

        return true;
    }


}

PaymentAcquirerData.RequiredProperties = ["AcquirerPOIID", "MerchantID"];

/**
 * If several Acquirers.
 * @member {Number} AcquirerID
 */
PaymentAcquirerData.prototype['AcquirerID'] = undefined;

/**
 * Identification of the POI for the payment Acquirer.
 * @member {String} AcquirerPOIID
 */
PaymentAcquirerData.prototype['AcquirerPOIID'] = undefined;

/**
 * @member {module:model/TransactionIDType} AcquirerTransactionID
 */
PaymentAcquirerData.prototype['AcquirerTransactionID'] = undefined;

/**
 * If available.
 * @member {String} ApprovalCode
 */
PaymentAcquirerData.prototype['ApprovalCode'] = undefined;

/**
 * @member {String} HostReconciliationID
 */
PaymentAcquirerData.prototype['HostReconciliationID'] = undefined;

/**
 * Identification of the Merchant for the Acquirer.
 * @member {String} MerchantID
 */
PaymentAcquirerData.prototype['MerchantID'] = undefined;






export default PaymentAcquirerData;

