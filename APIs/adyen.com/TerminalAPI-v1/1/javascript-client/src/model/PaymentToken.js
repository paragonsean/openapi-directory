/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TokenRequestedType from './TokenRequestedType';

/**
 * The PaymentToken model module.
 * @module model/PaymentToken
 * @version 1
 */
class PaymentToken {
    /**
     * Constructs a new <code>PaymentToken</code>.
     * Surrogate of the PAN (Primary Account Number) of the payment card to  identify the payment mean of the customer. It allows, for a merchant, to identify   the customer.
     * @alias module:model/PaymentToken
     * @param tokenRequestedType {module:model/TokenRequestedType} 
     * @param tokenValue {String} 
     */
    constructor(tokenRequestedType, tokenValue) { 
        
        PaymentToken.initialize(this, tokenRequestedType, tokenValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tokenRequestedType, tokenValue) { 
        obj['TokenRequestedType'] = tokenRequestedType;
        obj['TokenValue'] = tokenValue;
    }

    /**
     * Constructs a <code>PaymentToken</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentToken} obj Optional instance to populate.
     * @return {module:model/PaymentToken} The populated <code>PaymentToken</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentToken();

            if (data.hasOwnProperty('ExpiryDateTime')) {
                obj['ExpiryDateTime'] = ApiClient.convertToType(data['ExpiryDateTime'], 'Date');
            }
            if (data.hasOwnProperty('TokenRequestedType')) {
                obj['TokenRequestedType'] = TokenRequestedType.constructFromObject(data['TokenRequestedType']);
            }
            if (data.hasOwnProperty('TokenValue')) {
                obj['TokenValue'] = ApiClient.convertToType(data['TokenValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentToken</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentToken</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentToken.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['TokenValue'] && !(typeof data['TokenValue'] === 'string' || data['TokenValue'] instanceof String)) {
            throw new Error("Expected the field `TokenValue` to be a primitive type in the JSON string but got " + data['TokenValue']);
        }

        return true;
    }


}

PaymentToken.RequiredProperties = ["TokenRequestedType", "TokenValue"];

/**
 * Expiry date and time. Limits the validity of a payment token.
 * @member {Date} ExpiryDateTime
 */
PaymentToken.prototype['ExpiryDateTime'] = undefined;

/**
 * @member {module:model/TokenRequestedType} TokenRequestedType
 */
PaymentToken.prototype['TokenRequestedType'] = undefined;

/**
 * @member {String} TokenValue
 */
PaymentToken.prototype['TokenValue'] = undefined;






export default PaymentToken;

