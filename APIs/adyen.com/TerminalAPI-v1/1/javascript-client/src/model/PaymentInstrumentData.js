/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CardData from './CardData';
import CheckData from './CheckData';
import MobileData from './MobileData';
import PaymentInstrumentType from './PaymentInstrumentType';
import StoredValueAccountID from './StoredValueAccountID';

/**
 * The PaymentInstrumentData model module.
 * @module model/PaymentInstrumentData
 * @version 1
 */
class PaymentInstrumentData {
    /**
     * Constructs a new <code>PaymentInstrumentData</code>.
     * Sent in the result of the payment transaction. For a card, it could also be sent in the CardAcquisition response, to be processed by the Sale System. Data related to the instrument of payment for the transaction.
     * @alias module:model/PaymentInstrumentData
     * @param paymentInstrumentType {module:model/PaymentInstrumentType} 
     */
    constructor(paymentInstrumentType) { 
        
        PaymentInstrumentData.initialize(this, paymentInstrumentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, paymentInstrumentType) { 
        obj['PaymentInstrumentType'] = paymentInstrumentType;
    }

    /**
     * Constructs a <code>PaymentInstrumentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentInstrumentData} obj Optional instance to populate.
     * @return {module:model/PaymentInstrumentData} The populated <code>PaymentInstrumentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentInstrumentData();

            if (data.hasOwnProperty('CardData')) {
                obj['CardData'] = CardData.constructFromObject(data['CardData']);
            }
            if (data.hasOwnProperty('CheckData')) {
                obj['CheckData'] = CheckData.constructFromObject(data['CheckData']);
            }
            if (data.hasOwnProperty('MobileData')) {
                obj['MobileData'] = MobileData.constructFromObject(data['MobileData']);
            }
            if (data.hasOwnProperty('PaymentInstrumentType')) {
                obj['PaymentInstrumentType'] = PaymentInstrumentType.constructFromObject(data['PaymentInstrumentType']);
            }
            if (data.hasOwnProperty('ProtectedCardData')) {
                obj['ProtectedCardData'] = ApiClient.convertToType(data['ProtectedCardData'], 'String');
            }
            if (data.hasOwnProperty('StoredValueAccountID')) {
                obj['StoredValueAccountID'] = StoredValueAccountID.constructFromObject(data['StoredValueAccountID']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentInstrumentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentInstrumentData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentInstrumentData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `CardData`
        if (data['CardData']) { // data not null
          CardData.validateJSON(data['CardData']);
        }
        // validate the optional field `CheckData`
        if (data['CheckData']) { // data not null
          CheckData.validateJSON(data['CheckData']);
        }
        // validate the optional field `MobileData`
        if (data['MobileData']) { // data not null
          MobileData.validateJSON(data['MobileData']);
        }
        // ensure the json data is a string
        if (data['ProtectedCardData'] && !(typeof data['ProtectedCardData'] === 'string' || data['ProtectedCardData'] instanceof String)) {
            throw new Error("Expected the field `ProtectedCardData` to be a primitive type in the JSON string but got " + data['ProtectedCardData']);
        }
        // validate the optional field `StoredValueAccountID`
        if (data['StoredValueAccountID']) { // data not null
          StoredValueAccountID.validateJSON(data['StoredValueAccountID']);
        }

        return true;
    }


}

PaymentInstrumentData.RequiredProperties = ["PaymentInstrumentType"];

/**
 * @member {module:model/CardData} CardData
 */
PaymentInstrumentData.prototype['CardData'] = undefined;

/**
 * @member {module:model/CheckData} CheckData
 */
PaymentInstrumentData.prototype['CheckData'] = undefined;

/**
 * @member {module:model/MobileData} MobileData
 */
PaymentInstrumentData.prototype['MobileData'] = undefined;

/**
 * @member {module:model/PaymentInstrumentType} PaymentInstrumentType
 */
PaymentInstrumentData.prototype['PaymentInstrumentType'] = undefined;

/**
 * @member {String} ProtectedCardData
 */
PaymentInstrumentData.prototype['ProtectedCardData'] = undefined;

/**
 * @member {module:model/StoredValueAccountID} StoredValueAccountID
 */
PaymentInstrumentData.prototype['StoredValueAccountID'] = undefined;






export default PaymentInstrumentData;

