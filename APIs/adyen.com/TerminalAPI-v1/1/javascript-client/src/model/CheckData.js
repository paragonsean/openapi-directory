/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackData from './TrackData';
import TypeCode from './TypeCode';

/**
 * The CheckData model module.
 * @module model/CheckData
 * @version 1
 */
class CheckData {
    /**
     * Constructs a new <code>CheckData</code>.
     * Allows the check information to be provided by the Sale System before requesting the payment, or stored by the Sale System after processing of the payment. Information related to the paper check used for the transaction.
     * @alias module:model/CheckData
     */
    constructor() { 
        
        CheckData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckData} obj Optional instance to populate.
     * @return {module:model/CheckData} The populated <code>CheckData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckData();

            if (data.hasOwnProperty('AccountNumber')) {
                obj['AccountNumber'] = ApiClient.convertToType(data['AccountNumber'], 'String');
            }
            if (data.hasOwnProperty('BankID')) {
                obj['BankID'] = ApiClient.convertToType(data['BankID'], 'String');
            }
            if (data.hasOwnProperty('CheckCardNumber')) {
                obj['CheckCardNumber'] = ApiClient.convertToType(data['CheckCardNumber'], 'String');
            }
            if (data.hasOwnProperty('CheckNumber')) {
                obj['CheckNumber'] = ApiClient.convertToType(data['CheckNumber'], 'String');
            }
            if (data.hasOwnProperty('Country')) {
                obj['Country'] = ApiClient.convertToType(data['Country'], 'String');
            }
            if (data.hasOwnProperty('TrackData')) {
                obj['TrackData'] = TrackData.constructFromObject(data['TrackData']);
            }
            if (data.hasOwnProperty('TypeCode')) {
                obj['TypeCode'] = TypeCode.constructFromObject(data['TypeCode']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['AccountNumber'] && !(typeof data['AccountNumber'] === 'string' || data['AccountNumber'] instanceof String)) {
            throw new Error("Expected the field `AccountNumber` to be a primitive type in the JSON string but got " + data['AccountNumber']);
        }
        // ensure the json data is a string
        if (data['BankID'] && !(typeof data['BankID'] === 'string' || data['BankID'] instanceof String)) {
            throw new Error("Expected the field `BankID` to be a primitive type in the JSON string but got " + data['BankID']);
        }
        // ensure the json data is a string
        if (data['CheckCardNumber'] && !(typeof data['CheckCardNumber'] === 'string' || data['CheckCardNumber'] instanceof String)) {
            throw new Error("Expected the field `CheckCardNumber` to be a primitive type in the JSON string but got " + data['CheckCardNumber']);
        }
        // ensure the json data is a string
        if (data['CheckNumber'] && !(typeof data['CheckNumber'] === 'string' || data['CheckNumber'] instanceof String)) {
            throw new Error("Expected the field `CheckNumber` to be a primitive type in the JSON string but got " + data['CheckNumber']);
        }
        // ensure the json data is a string
        if (data['Country'] && !(typeof data['Country'] === 'string' || data['Country'] instanceof String)) {
            throw new Error("Expected the field `Country` to be a primitive type in the JSON string but got " + data['Country']);
        }
        // validate the optional field `TrackData`
        if (data['TrackData']) { // data not null
          TrackData.validateJSON(data['TrackData']);
        }

        return true;
    }


}



/**
 * Mandatory if TrackData absent.
 * @member {String} AccountNumber
 */
CheckData.prototype['AccountNumber'] = undefined;

/**
 * Mandatory if TrackData absent.
 * @member {String} BankID
 */
CheckData.prototype['BankID'] = undefined;

/**
 * If provided by the customer.
 * @member {String} CheckCardNumber
 */
CheckData.prototype['CheckCardNumber'] = undefined;

/**
 * Mandatory if TrackData absent.
 * @member {String} CheckNumber
 */
CheckData.prototype['CheckNumber'] = undefined;

/**
 * Absent if country of the Sale system.
 * @member {String} Country
 */
CheckData.prototype['Country'] = undefined;

/**
 * @member {module:model/TrackData} TrackData
 */
CheckData.prototype['TrackData'] = undefined;

/**
 * @member {module:model/TypeCode} TypeCode
 */
CheckData.prototype['TypeCode'] = undefined;






export default CheckData;

