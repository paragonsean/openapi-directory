/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentificationType from './IdentificationType';
import StoredValueAccountType from './StoredValueAccountType';

/**
 * The StoredValueAccountID model module.
 * @module model/StoredValueAccountID
 * @version 1
 */
class StoredValueAccountID {
    /**
     * Constructs a new <code>StoredValueAccountID</code>.
     * It contains the identifications of the stored value account or the stored value card, and the associated product sold by the Sale System for stored value requests. Identification of the stored value account or the stored value card.
     * @alias module:model/StoredValueAccountID
     * @param entryMode {Array.<module:model/StoredValueAccountID.EntryModeEnum>} 
     * @param identificationType {module:model/IdentificationType} 
     * @param storedValueAccountType {module:model/StoredValueAccountType} 
     * @param storedValueID {String} 
     */
    constructor(entryMode, identificationType, storedValueAccountType, storedValueID) { 
        
        StoredValueAccountID.initialize(this, entryMode, identificationType, storedValueAccountType, storedValueID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entryMode, identificationType, storedValueAccountType, storedValueID) { 
        obj['EntryMode'] = entryMode;
        obj['IdentificationType'] = identificationType;
        obj['StoredValueAccountType'] = storedValueAccountType;
        obj['StoredValueID'] = storedValueID;
    }

    /**
     * Constructs a <code>StoredValueAccountID</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredValueAccountID} obj Optional instance to populate.
     * @return {module:model/StoredValueAccountID} The populated <code>StoredValueAccountID</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredValueAccountID();

            if (data.hasOwnProperty('EntryMode')) {
                obj['EntryMode'] = ApiClient.convertToType(data['EntryMode'], ['String']);
            }
            if (data.hasOwnProperty('ExpiryDate')) {
                obj['ExpiryDate'] = ApiClient.convertToType(data['ExpiryDate'], 'Number');
            }
            if (data.hasOwnProperty('IdentificationType')) {
                obj['IdentificationType'] = IdentificationType.constructFromObject(data['IdentificationType']);
            }
            if (data.hasOwnProperty('OwnerName')) {
                obj['OwnerName'] = ApiClient.convertToType(data['OwnerName'], 'String');
            }
            if (data.hasOwnProperty('StoredValueAccountType')) {
                obj['StoredValueAccountType'] = StoredValueAccountType.constructFromObject(data['StoredValueAccountType']);
            }
            if (data.hasOwnProperty('StoredValueID')) {
                obj['StoredValueID'] = ApiClient.convertToType(data['StoredValueID'], 'String');
            }
            if (data.hasOwnProperty('StoredValueProvider')) {
                obj['StoredValueProvider'] = ApiClient.convertToType(data['StoredValueProvider'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredValueAccountID</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredValueAccountID</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoredValueAccountID.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EntryMode'])) {
            throw new Error("Expected the field `EntryMode` to be an array in the JSON data but got " + data['EntryMode']);
        }
        // ensure the json data is a string
        if (data['OwnerName'] && !(typeof data['OwnerName'] === 'string' || data['OwnerName'] instanceof String)) {
            throw new Error("Expected the field `OwnerName` to be a primitive type in the JSON string but got " + data['OwnerName']);
        }
        // ensure the json data is a string
        if (data['StoredValueID'] && !(typeof data['StoredValueID'] === 'string' || data['StoredValueID'] instanceof String)) {
            throw new Error("Expected the field `StoredValueID` to be a primitive type in the JSON string but got " + data['StoredValueID']);
        }
        // ensure the json data is a string
        if (data['StoredValueProvider'] && !(typeof data['StoredValueProvider'] === 'string' || data['StoredValueProvider'] instanceof String)) {
            throw new Error("Expected the field `StoredValueProvider` to be a primitive type in the JSON string but got " + data['StoredValueProvider']);
        }

        return true;
    }


}

StoredValueAccountID.RequiredProperties = ["EntryMode", "IdentificationType", "StoredValueAccountType", "StoredValueID"];

/**
 * @member {Array.<module:model/StoredValueAccountID.EntryModeEnum>} EntryMode
 */
StoredValueAccountID.prototype['EntryMode'] = undefined;

/**
 * @member {Number} ExpiryDate
 */
StoredValueAccountID.prototype['ExpiryDate'] = undefined;

/**
 * @member {module:model/IdentificationType} IdentificationType
 */
StoredValueAccountID.prototype['IdentificationType'] = undefined;

/**
 * @member {String} OwnerName
 */
StoredValueAccountID.prototype['OwnerName'] = undefined;

/**
 * @member {module:model/StoredValueAccountType} StoredValueAccountType
 */
StoredValueAccountID.prototype['StoredValueAccountType'] = undefined;

/**
 * @member {String} StoredValueID
 */
StoredValueAccountID.prototype['StoredValueID'] = undefined;

/**
 * @member {String} StoredValueProvider
 */
StoredValueAccountID.prototype['StoredValueProvider'] = undefined;





/**
 * Allowed values for the <code>entryMode</code> property.
 * @enum {String}
 * @readonly
 */
StoredValueAccountID['EntryModeEnum'] = {

    /**
     * value: "Contactless"
     * @const
     */
    "Contactless": "Contactless",

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "ICC"
     * @const
     */
    "ICC": "ICC",

    /**
     * value: "Keyed"
     * @const
     */
    "Keyed": "Keyed",

    /**
     * value: "MagStripe"
     * @const
     */
    "MagStripe": "MagStripe",

    /**
     * value: "Manual"
     * @const
     */
    "Manual": "Manual",

    /**
     * value: "Mobile"
     * @const
     */
    "Mobile": "Mobile",

    /**
     * value: "RFID"
     * @const
     */
    "RFID": "RFID",

    /**
     * value: "Scanned"
     * @const
     */
    "Scanned": "Scanned",

    /**
     * value: "SynchronousICC"
     * @const
     */
    "SynchronousICC": "SynchronousICC",

    /**
     * value: "Tapped"
     * @const
     */
    "Tapped": "Tapped"
};



export default StoredValueAccountID;

