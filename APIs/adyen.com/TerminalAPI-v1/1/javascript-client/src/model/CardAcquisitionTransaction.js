/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyHandling from './LoyaltyHandling';
import PaymentType from './PaymentType';

/**
 * The CardAcquisitionTransaction model module.
 * @module model/CardAcquisitionTransaction
 * @version 1
 */
class CardAcquisitionTransaction {
    /**
     * Constructs a new <code>CardAcquisitionTransaction</code>.
     * @alias module:model/CardAcquisitionTransaction
     */
    constructor() { 
        
        CardAcquisitionTransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CardAcquisitionTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CardAcquisitionTransaction} obj Optional instance to populate.
     * @return {module:model/CardAcquisitionTransaction} The populated <code>CardAcquisitionTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CardAcquisitionTransaction();

            if (data.hasOwnProperty('AllowedLoyaltyBrand')) {
                obj['AllowedLoyaltyBrand'] = ApiClient.convertToType(data['AllowedLoyaltyBrand'], ['String']);
            }
            if (data.hasOwnProperty('AllowedPaymentBrand')) {
                obj['AllowedPaymentBrand'] = ApiClient.convertToType(data['AllowedPaymentBrand'], ['String']);
            }
            if (data.hasOwnProperty('CashBackFlag')) {
                obj['CashBackFlag'] = ApiClient.convertToType(data['CashBackFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('CustomerLanguage')) {
                obj['CustomerLanguage'] = ApiClient.convertToType(data['CustomerLanguage'], 'String');
            }
            if (data.hasOwnProperty('ForceCustomerSelectionFlag')) {
                obj['ForceCustomerSelectionFlag'] = ApiClient.convertToType(data['ForceCustomerSelectionFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('ForceEntryMode')) {
                obj['ForceEntryMode'] = ApiClient.convertToType(data['ForceEntryMode'], ['String']);
            }
            if (data.hasOwnProperty('LoyaltyHandling')) {
                obj['LoyaltyHandling'] = LoyaltyHandling.constructFromObject(data['LoyaltyHandling']);
            }
            if (data.hasOwnProperty('PaymentType')) {
                obj['PaymentType'] = PaymentType.constructFromObject(data['PaymentType']);
            }
            if (data.hasOwnProperty('TotalAmount')) {
                obj['TotalAmount'] = ApiClient.convertToType(data['TotalAmount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CardAcquisitionTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CardAcquisitionTransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['AllowedLoyaltyBrand'])) {
            throw new Error("Expected the field `AllowedLoyaltyBrand` to be an array in the JSON data but got " + data['AllowedLoyaltyBrand']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AllowedPaymentBrand'])) {
            throw new Error("Expected the field `AllowedPaymentBrand` to be an array in the JSON data but got " + data['AllowedPaymentBrand']);
        }
        // ensure the json data is a string
        if (data['CustomerLanguage'] && !(typeof data['CustomerLanguage'] === 'string' || data['CustomerLanguage'] instanceof String)) {
            throw new Error("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got " + data['CustomerLanguage']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ForceEntryMode'])) {
            throw new Error("Expected the field `ForceEntryMode` to be an array in the JSON data but got " + data['ForceEntryMode']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} AllowedLoyaltyBrand
 */
CardAcquisitionTransaction.prototype['AllowedLoyaltyBrand'] = undefined;

/**
 * @member {Array.<String>} AllowedPaymentBrand
 */
CardAcquisitionTransaction.prototype['AllowedPaymentBrand'] = undefined;

/**
 * @member {Boolean} CashBackFlag
 */
CardAcquisitionTransaction.prototype['CashBackFlag'] = undefined;

/**
 * @member {String} CustomerLanguage
 */
CardAcquisitionTransaction.prototype['CustomerLanguage'] = undefined;

/**
 * @member {Boolean} ForceCustomerSelectionFlag
 */
CardAcquisitionTransaction.prototype['ForceCustomerSelectionFlag'] = undefined;

/**
 * @member {Array.<module:model/CardAcquisitionTransaction.ForceEntryModeEnum>} ForceEntryMode
 */
CardAcquisitionTransaction.prototype['ForceEntryMode'] = undefined;

/**
 * @member {module:model/LoyaltyHandling} LoyaltyHandling
 */
CardAcquisitionTransaction.prototype['LoyaltyHandling'] = undefined;

/**
 * @member {module:model/PaymentType} PaymentType
 */
CardAcquisitionTransaction.prototype['PaymentType'] = undefined;

/**
 * @member {Number} TotalAmount
 */
CardAcquisitionTransaction.prototype['TotalAmount'] = undefined;





/**
 * Allowed values for the <code>forceEntryMode</code> property.
 * @enum {String}
 * @readonly
 */
CardAcquisitionTransaction['ForceEntryModeEnum'] = {

    /**
     * value: "CheckReader"
     * @const
     */
    "CheckReader": "CheckReader",

    /**
     * value: "Contactless"
     * @const
     */
    "Contactless": "Contactless",

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "ICC"
     * @const
     */
    "ICC": "ICC",

    /**
     * value: "Keyed"
     * @const
     */
    "Keyed": "Keyed",

    /**
     * value: "MagStripe"
     * @const
     */
    "MagStripe": "MagStripe",

    /**
     * value: "Manual"
     * @const
     */
    "Manual": "Manual",

    /**
     * value: "RFID"
     * @const
     */
    "RFID": "RFID",

    /**
     * value: "Scanned"
     * @const
     */
    "Scanned": "Scanned",

    /**
     * value: "SynchronousICC"
     * @const
     */
    "SynchronousICC": "SynchronousICC",

    /**
     * value: "Tapped"
     * @const
     */
    "Tapped": "Tapped"
};



export default CardAcquisitionTransaction;

