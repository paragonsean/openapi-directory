/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayOutput from './DisplayOutput';
import InputData from './InputData';

/**
 * The InputRequest model module.
 * @module model/InputRequest
 * @version 1
 */
class InputRequest {
    /**
     * Constructs a new <code>InputRequest</code>.
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     * @alias module:model/InputRequest
     * @param inputData {module:model/InputData} 
     */
    constructor(inputData) { 
        
        InputRequest.initialize(this, inputData);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, inputData) { 
        obj['InputData'] = inputData;
    }

    /**
     * Constructs a <code>InputRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputRequest} obj Optional instance to populate.
     * @return {module:model/InputRequest} The populated <code>InputRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputRequest();

            if (data.hasOwnProperty('DisplayOutput')) {
                obj['DisplayOutput'] = DisplayOutput.constructFromObject(data['DisplayOutput']);
            }
            if (data.hasOwnProperty('InputData')) {
                obj['InputData'] = InputData.constructFromObject(data['InputData']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `DisplayOutput`
        if (data['DisplayOutput']) { // data not null
          DisplayOutput.validateJSON(data['DisplayOutput']);
        }
        // validate the optional field `InputData`
        if (data['InputData']) { // data not null
          InputData.validateJSON(data['InputData']);
        }

        return true;
    }


}

InputRequest.RequiredProperties = ["InputData"];

/**
 * @member {module:model/DisplayOutput} DisplayOutput
 */
InputRequest.prototype['DisplayOutput'] = undefined;

/**
 * @member {module:model/InputData} InputData
 */
InputRequest.prototype['InputData'] = undefined;






export default InputRequest;

