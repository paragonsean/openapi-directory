/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionIDType from './TransactionIDType';

/**
 * The OriginalPOITransaction model module.
 * @module model/OriginalPOITransaction
 * @version 1
 */
class OriginalPOITransaction {
    /**
     * Constructs a new <code>OriginalPOITransaction</code>.
     * In the Payment or the Loyalty Request message, it allows using the card of a previous CardAcquisition or Payment/Loyalty request. Identification of a previous POI transaction.
     * @alias module:model/OriginalPOITransaction
     */
    constructor() { 
        
        OriginalPOITransaction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['ReuseCardDataFlag'] = true;
    }

    /**
     * Constructs a <code>OriginalPOITransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OriginalPOITransaction} obj Optional instance to populate.
     * @return {module:model/OriginalPOITransaction} The populated <code>OriginalPOITransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OriginalPOITransaction();

            if (data.hasOwnProperty('AcquirerID')) {
                obj['AcquirerID'] = ApiClient.convertToType(data['AcquirerID'], 'Number');
            }
            if (data.hasOwnProperty('AmountValue')) {
                obj['AmountValue'] = ApiClient.convertToType(data['AmountValue'], 'Number');
            }
            if (data.hasOwnProperty('ApprovalCode')) {
                obj['ApprovalCode'] = ApiClient.convertToType(data['ApprovalCode'], 'String');
            }
            if (data.hasOwnProperty('CustomerLanguage')) {
                obj['CustomerLanguage'] = ApiClient.convertToType(data['CustomerLanguage'], 'String');
            }
            if (data.hasOwnProperty('HostTransactionID')) {
                obj['HostTransactionID'] = TransactionIDType.constructFromObject(data['HostTransactionID']);
            }
            if (data.hasOwnProperty('POIID')) {
                obj['POIID'] = ApiClient.convertToType(data['POIID'], 'String');
            }
            if (data.hasOwnProperty('POITransactionID')) {
                obj['POITransactionID'] = TransactionIDType.constructFromObject(data['POITransactionID']);
            }
            if (data.hasOwnProperty('ReuseCardDataFlag')) {
                obj['ReuseCardDataFlag'] = ApiClient.convertToType(data['ReuseCardDataFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('SaleID')) {
                obj['SaleID'] = ApiClient.convertToType(data['SaleID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OriginalPOITransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OriginalPOITransaction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ApprovalCode'] && !(typeof data['ApprovalCode'] === 'string' || data['ApprovalCode'] instanceof String)) {
            throw new Error("Expected the field `ApprovalCode` to be a primitive type in the JSON string but got " + data['ApprovalCode']);
        }
        // ensure the json data is a string
        if (data['CustomerLanguage'] && !(typeof data['CustomerLanguage'] === 'string' || data['CustomerLanguage'] instanceof String)) {
            throw new Error("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got " + data['CustomerLanguage']);
        }
        // validate the optional field `HostTransactionID`
        if (data['HostTransactionID']) { // data not null
          TransactionIDType.validateJSON(data['HostTransactionID']);
        }
        // ensure the json data is a string
        if (data['POIID'] && !(typeof data['POIID'] === 'string' || data['POIID'] instanceof String)) {
            throw new Error("Expected the field `POIID` to be a primitive type in the JSON string but got " + data['POIID']);
        }
        // validate the optional field `POITransactionID`
        if (data['POITransactionID']) { // data not null
          TransactionIDType.validateJSON(data['POITransactionID']);
        }
        // ensure the json data is a string
        if (data['SaleID'] && !(typeof data['SaleID'] === 'string' || data['SaleID'] instanceof String)) {
            throw new Error("Expected the field `SaleID` to be a primitive type in the JSON string but got " + data['SaleID']);
        }

        return true;
    }


}



/**
 * Restrict to these Acquirer if present.
 * @member {Number} AcquirerID
 */
OriginalPOITransaction.prototype['AcquirerID'] = undefined;

/**
 * @member {Number} AmountValue
 */
OriginalPOITransaction.prototype['AmountValue'] = undefined;

/**
 * If referral.
 * @member {String} ApprovalCode
 */
OriginalPOITransaction.prototype['ApprovalCode'] = undefined;

/**
 * If the language is selected by the Sale System before the request to the POI.
 * @member {String} CustomerLanguage
 */
OriginalPOITransaction.prototype['CustomerLanguage'] = undefined;

/**
 * @member {module:model/TransactionIDType} HostTransactionID
 */
OriginalPOITransaction.prototype['HostTransactionID'] = undefined;

/**
 * If original transaction is coming from another POI.
 * @member {String} POIID
 */
OriginalPOITransaction.prototype['POIID'] = undefined;

/**
 * @member {module:model/TransactionIDType} POITransactionID
 */
OriginalPOITransaction.prototype['POITransactionID'] = undefined;

/**
 * Indicate if the card data has to be got from a previous transaction.
 * @member {Boolean} ReuseCardDataFlag
 * @default true
 */
OriginalPOITransaction.prototype['ReuseCardDataFlag'] = true;

/**
 * Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
 * @member {String} SaleID
 */
OriginalPOITransaction.prototype['SaleID'] = undefined;






export default OriginalPOITransaction;

