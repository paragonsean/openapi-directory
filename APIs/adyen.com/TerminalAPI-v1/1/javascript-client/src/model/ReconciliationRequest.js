/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReconciliationType from './ReconciliationType';

/**
 * The ReconciliationRequest model module.
 * @module model/ReconciliationRequest
 * @version 1
 */
class ReconciliationRequest {
    /**
     * Constructs a new <code>ReconciliationRequest</code>.
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     * @alias module:model/ReconciliationRequest
     * @param reconciliationType {module:model/ReconciliationType} 
     */
    constructor(reconciliationType) { 
        
        ReconciliationRequest.initialize(this, reconciliationType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, reconciliationType) { 
        obj['ReconciliationType'] = reconciliationType;
    }

    /**
     * Constructs a <code>ReconciliationRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReconciliationRequest} obj Optional instance to populate.
     * @return {module:model/ReconciliationRequest} The populated <code>ReconciliationRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReconciliationRequest();

            if (data.hasOwnProperty('AcquirerID')) {
                obj['AcquirerID'] = ApiClient.convertToType(data['AcquirerID'], ['Number']);
            }
            if (data.hasOwnProperty('POIReconciliationID')) {
                obj['POIReconciliationID'] = ApiClient.convertToType(data['POIReconciliationID'], 'Number');
            }
            if (data.hasOwnProperty('ReconciliationType')) {
                obj['ReconciliationType'] = ReconciliationType.constructFromObject(data['ReconciliationType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReconciliationRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReconciliationRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ReconciliationRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['AcquirerID'])) {
            throw new Error("Expected the field `AcquirerID` to be an array in the JSON data but got " + data['AcquirerID']);
        }

        return true;
    }


}

ReconciliationRequest.RequiredProperties = ["ReconciliationType"];

/**
 * @member {Array.<Number>} AcquirerID
 */
ReconciliationRequest.prototype['AcquirerID'] = undefined;

/**
 * Absent if ReconciliationType is not PreviousReconciliation.
 * @member {Number} POIReconciliationID
 */
ReconciliationRequest.prototype['POIReconciliationID'] = undefined;

/**
 * @member {module:model/ReconciliationType} ReconciliationType
 */
ReconciliationRequest.prototype['ReconciliationType'] = undefined;






export default ReconciliationRequest;

