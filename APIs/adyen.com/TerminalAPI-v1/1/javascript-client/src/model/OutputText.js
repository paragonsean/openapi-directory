/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Alignment from './Alignment';
import CharacterHeight from './CharacterHeight';
import CharacterStyle from './CharacterStyle';
import CharacterWidth from './CharacterWidth';
import Color from './Color';

/**
 * The OutputText model module.
 * @module model/OutputText
 * @version 1
 */
class OutputText {
    /**
     * Constructs a new <code>OutputText</code>.
     * It conveys Information related to the content of the text message and its format. All the data elements related to the format of the text to display or print are parameters valid for the whole Text content. Content of text message to display or print.
     * @alias module:model/OutputText
     * @param text {String} 
     */
    constructor(text) { 
        
        OutputText.initialize(this, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, text) { 
        obj['EndOfLineFlag'] = true;
        obj['Text'] = text;
    }

    /**
     * Constructs a <code>OutputText</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputText} obj Optional instance to populate.
     * @return {module:model/OutputText} The populated <code>OutputText</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputText();

            if (data.hasOwnProperty('Alignment')) {
                obj['Alignment'] = Alignment.constructFromObject(data['Alignment']);
            }
            if (data.hasOwnProperty('CharacterHeight')) {
                obj['CharacterHeight'] = CharacterHeight.constructFromObject(data['CharacterHeight']);
            }
            if (data.hasOwnProperty('CharacterSet')) {
                obj['CharacterSet'] = ApiClient.convertToType(data['CharacterSet'], 'Number');
            }
            if (data.hasOwnProperty('CharacterStyle')) {
                obj['CharacterStyle'] = CharacterStyle.constructFromObject(data['CharacterStyle']);
            }
            if (data.hasOwnProperty('CharacterWidth')) {
                obj['CharacterWidth'] = CharacterWidth.constructFromObject(data['CharacterWidth']);
            }
            if (data.hasOwnProperty('Color')) {
                obj['Color'] = Color.constructFromObject(data['Color']);
            }
            if (data.hasOwnProperty('EndOfLineFlag')) {
                obj['EndOfLineFlag'] = ApiClient.convertToType(data['EndOfLineFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('Font')) {
                obj['Font'] = ApiClient.convertToType(data['Font'], 'String');
            }
            if (data.hasOwnProperty('StartColumn')) {
                obj['StartColumn'] = ApiClient.convertToType(data['StartColumn'], 'Number');
            }
            if (data.hasOwnProperty('StartRow')) {
                obj['StartRow'] = ApiClient.convertToType(data['StartRow'], 'Number');
            }
            if (data.hasOwnProperty('Text')) {
                obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputText</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputText</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutputText.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Font'] && !(typeof data['Font'] === 'string' || data['Font'] instanceof String)) {
            throw new Error("Expected the field `Font` to be a primitive type in the JSON string but got " + data['Font']);
        }
        // ensure the json data is a string
        if (data['Text'] && !(typeof data['Text'] === 'string' || data['Text'] instanceof String)) {
            throw new Error("Expected the field `Text` to be a primitive type in the JSON string but got " + data['Text']);
        }

        return true;
    }


}

OutputText.RequiredProperties = ["Text"];

/**
 * @member {module:model/Alignment} Alignment
 */
OutputText.prototype['Alignment'] = undefined;

/**
 * @member {module:model/CharacterHeight} CharacterHeight
 */
OutputText.prototype['CharacterHeight'] = undefined;

/**
 * @member {Number} CharacterSet
 */
OutputText.prototype['CharacterSet'] = undefined;

/**
 * @member {module:model/CharacterStyle} CharacterStyle
 */
OutputText.prototype['CharacterStyle'] = undefined;

/**
 * @member {module:model/CharacterWidth} CharacterWidth
 */
OutputText.prototype['CharacterWidth'] = undefined;

/**
 * @member {module:model/Color} Color
 */
OutputText.prototype['Color'] = undefined;

/**
 * @member {Boolean} EndOfLineFlag
 * @default true
 */
OutputText.prototype['EndOfLineFlag'] = true;

/**
 * @member {String} Font
 */
OutputText.prototype['Font'] = undefined;

/**
 * @member {Number} StartColumn
 */
OutputText.prototype['StartColumn'] = undefined;

/**
 * @member {Number} StartRow
 */
OutputText.prototype['StartRow'] = undefined;

/**
 * @member {String} Text
 */
OutputText.prototype['Text'] = undefined;






export default OutputText;

