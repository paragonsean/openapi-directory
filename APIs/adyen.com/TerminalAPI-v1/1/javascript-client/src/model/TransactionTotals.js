/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyTotals from './LoyaltyTotals';
import LoyaltyUnit from './LoyaltyUnit';
import PaymentInstrumentType from './PaymentInstrumentType';
import PaymentTotals from './PaymentTotals';

/**
 * The TransactionTotals model module.
 * @module model/TransactionTotals
 * @version 1
 */
class TransactionTotals {
    /**
     * Constructs a new <code>TransactionTotals</code>.
     * If Result is Success, contains all the totals, classified as required by the Sale in the message request. At least, transaction totals are provided per Acquirer, Acquirer Settlement, and Card Brand. Result of the Sale to POI Reconciliation processing.
     * @alias module:model/TransactionTotals
     * @param paymentInstrumentType {module:model/PaymentInstrumentType} 
     */
    constructor(paymentInstrumentType) { 
        
        TransactionTotals.initialize(this, paymentInstrumentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, paymentInstrumentType) { 
        obj['PaymentInstrumentType'] = paymentInstrumentType;
    }

    /**
     * Constructs a <code>TransactionTotals</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionTotals} obj Optional instance to populate.
     * @return {module:model/TransactionTotals} The populated <code>TransactionTotals</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionTotals();

            if (data.hasOwnProperty('AcquirerID')) {
                obj['AcquirerID'] = ApiClient.convertToType(data['AcquirerID'], 'Number');
            }
            if (data.hasOwnProperty('CardBrand')) {
                obj['CardBrand'] = ApiClient.convertToType(data['CardBrand'], 'String');
            }
            if (data.hasOwnProperty('HostReconciliationID')) {
                obj['HostReconciliationID'] = ApiClient.convertToType(data['HostReconciliationID'], 'String');
            }
            if (data.hasOwnProperty('LoyaltyCurrency')) {
                obj['LoyaltyCurrency'] = ApiClient.convertToType(data['LoyaltyCurrency'], 'String');
            }
            if (data.hasOwnProperty('LoyaltyTotals')) {
                obj['LoyaltyTotals'] = ApiClient.convertToType(data['LoyaltyTotals'], [LoyaltyTotals]);
            }
            if (data.hasOwnProperty('LoyaltyUnit')) {
                obj['LoyaltyUnit'] = LoyaltyUnit.constructFromObject(data['LoyaltyUnit']);
            }
            if (data.hasOwnProperty('OperatorID')) {
                obj['OperatorID'] = ApiClient.convertToType(data['OperatorID'], 'String');
            }
            if (data.hasOwnProperty('POIID')) {
                obj['POIID'] = ApiClient.convertToType(data['POIID'], 'String');
            }
            if (data.hasOwnProperty('PaymentCurrency')) {
                obj['PaymentCurrency'] = ApiClient.convertToType(data['PaymentCurrency'], 'String');
            }
            if (data.hasOwnProperty('PaymentInstrumentType')) {
                obj['PaymentInstrumentType'] = PaymentInstrumentType.constructFromObject(data['PaymentInstrumentType']);
            }
            if (data.hasOwnProperty('PaymentTotals')) {
                obj['PaymentTotals'] = ApiClient.convertToType(data['PaymentTotals'], [PaymentTotals]);
            }
            if (data.hasOwnProperty('SaleID')) {
                obj['SaleID'] = ApiClient.convertToType(data['SaleID'], 'String');
            }
            if (data.hasOwnProperty('ShiftNumber')) {
                obj['ShiftNumber'] = ApiClient.convertToType(data['ShiftNumber'], 'String');
            }
            if (data.hasOwnProperty('TotalsGroupID')) {
                obj['TotalsGroupID'] = ApiClient.convertToType(data['TotalsGroupID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionTotals</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionTotals</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TransactionTotals.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CardBrand'] && !(typeof data['CardBrand'] === 'string' || data['CardBrand'] instanceof String)) {
            throw new Error("Expected the field `CardBrand` to be a primitive type in the JSON string but got " + data['CardBrand']);
        }
        // ensure the json data is a string
        if (data['HostReconciliationID'] && !(typeof data['HostReconciliationID'] === 'string' || data['HostReconciliationID'] instanceof String)) {
            throw new Error("Expected the field `HostReconciliationID` to be a primitive type in the JSON string but got " + data['HostReconciliationID']);
        }
        // ensure the json data is a string
        if (data['LoyaltyCurrency'] && !(typeof data['LoyaltyCurrency'] === 'string' || data['LoyaltyCurrency'] instanceof String)) {
            throw new Error("Expected the field `LoyaltyCurrency` to be a primitive type in the JSON string but got " + data['LoyaltyCurrency']);
        }
        if (data['LoyaltyTotals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['LoyaltyTotals'])) {
                throw new Error("Expected the field `LoyaltyTotals` to be an array in the JSON data but got " + data['LoyaltyTotals']);
            }
            // validate the optional field `LoyaltyTotals` (array)
            for (const item of data['LoyaltyTotals']) {
                LoyaltyTotals.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['OperatorID'] && !(typeof data['OperatorID'] === 'string' || data['OperatorID'] instanceof String)) {
            throw new Error("Expected the field `OperatorID` to be a primitive type in the JSON string but got " + data['OperatorID']);
        }
        // ensure the json data is a string
        if (data['POIID'] && !(typeof data['POIID'] === 'string' || data['POIID'] instanceof String)) {
            throw new Error("Expected the field `POIID` to be a primitive type in the JSON string but got " + data['POIID']);
        }
        // ensure the json data is a string
        if (data['PaymentCurrency'] && !(typeof data['PaymentCurrency'] === 'string' || data['PaymentCurrency'] instanceof String)) {
            throw new Error("Expected the field `PaymentCurrency` to be a primitive type in the JSON string but got " + data['PaymentCurrency']);
        }
        if (data['PaymentTotals']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['PaymentTotals'])) {
                throw new Error("Expected the field `PaymentTotals` to be an array in the JSON data but got " + data['PaymentTotals']);
            }
            // validate the optional field `PaymentTotals` (array)
            for (const item of data['PaymentTotals']) {
                PaymentTotals.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['SaleID'] && !(typeof data['SaleID'] === 'string' || data['SaleID'] instanceof String)) {
            throw new Error("Expected the field `SaleID` to be a primitive type in the JSON string but got " + data['SaleID']);
        }
        // ensure the json data is a string
        if (data['ShiftNumber'] && !(typeof data['ShiftNumber'] === 'string' || data['ShiftNumber'] instanceof String)) {
            throw new Error("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got " + data['ShiftNumber']);
        }
        // ensure the json data is a string
        if (data['TotalsGroupID'] && !(typeof data['TotalsGroupID'] === 'string' || data['TotalsGroupID'] instanceof String)) {
            throw new Error("Expected the field `TotalsGroupID` to be a primitive type in the JSON string but got " + data['TotalsGroupID']);
        }

        return true;
    }


}

TransactionTotals.RequiredProperties = ["PaymentInstrumentType"];

/**
 * If available.
 * @member {Number} AcquirerID
 */
TransactionTotals.prototype['AcquirerID'] = undefined;

/**
 * If configured to present totals per card brand, and Response.Result is Success.
 * @member {String} CardBrand
 */
TransactionTotals.prototype['CardBrand'] = undefined;

/**
 * If available.
 * @member {String} HostReconciliationID
 */
TransactionTotals.prototype['HostReconciliationID'] = undefined;

/**
 * If LoyaltyUnit is Monetary.
 * @member {String} LoyaltyCurrency
 */
TransactionTotals.prototype['LoyaltyCurrency'] = undefined;

/**
 * @member {Array.<module:model/LoyaltyTotals>} LoyaltyTotals
 */
TransactionTotals.prototype['LoyaltyTotals'] = undefined;

/**
 * @member {module:model/LoyaltyUnit} LoyaltyUnit
 */
TransactionTotals.prototype['LoyaltyUnit'] = undefined;

/**
 * If requested in the message request.
 * @member {String} OperatorID
 */
TransactionTotals.prototype['OperatorID'] = undefined;

/**
 * If requested in the message request.
 * @member {String} POIID
 */
TransactionTotals.prototype['POIID'] = undefined;

/**
 * Currency of a monetary amount.
 * @member {String} PaymentCurrency
 */
TransactionTotals.prototype['PaymentCurrency'] = undefined;

/**
 * @member {module:model/PaymentInstrumentType} PaymentInstrumentType
 */
TransactionTotals.prototype['PaymentInstrumentType'] = undefined;

/**
 * @member {Array.<module:model/PaymentTotals>} PaymentTotals
 */
TransactionTotals.prototype['PaymentTotals'] = undefined;

/**
 * If requested in the message request.
 * @member {String} SaleID
 */
TransactionTotals.prototype['SaleID'] = undefined;

/**
 * If requested in the message request.
 * @member {String} ShiftNumber
 */
TransactionTotals.prototype['ShiftNumber'] = undefined;

/**
 * If requested in the message request.
 * @member {String} TotalsGroupID
 */
TransactionTotals.prototype['TotalsGroupID'] = undefined;






export default TransactionTotals;

