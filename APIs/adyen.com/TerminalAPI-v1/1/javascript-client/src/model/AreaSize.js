/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AreaSize model module.
 * @module model/AreaSize
 * @version 1
 */
class AreaSize {
    /**
     * Constructs a new <code>AreaSize</code>.
     * @alias module:model/AreaSize
     * @param X {String} 
     * @param Y {String} 
     */
    constructor(X, Y) { 
        
        AreaSize.initialize(this, X, Y);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, X, Y) { 
        obj['X'] = X;
        obj['Y'] = Y;
    }

    /**
     * Constructs a <code>AreaSize</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AreaSize} obj Optional instance to populate.
     * @return {module:model/AreaSize} The populated <code>AreaSize</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AreaSize();

            if (data.hasOwnProperty('X')) {
                obj['X'] = ApiClient.convertToType(data['X'], 'String');
            }
            if (data.hasOwnProperty('Y')) {
                obj['Y'] = ApiClient.convertToType(data['Y'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AreaSize</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AreaSize</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AreaSize.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['X'] && !(typeof data['X'] === 'string' || data['X'] instanceof String)) {
            throw new Error("Expected the field `X` to be a primitive type in the JSON string but got " + data['X']);
        }
        // ensure the json data is a string
        if (data['Y'] && !(typeof data['Y'] === 'string' || data['Y'] instanceof String)) {
            throw new Error("Expected the field `Y` to be a primitive type in the JSON string but got " + data['Y']);
        }

        return true;
    }


}

AreaSize.RequiredProperties = ["X", "Y"];

/**
 * @member {String} X
 */
AreaSize.prototype['X'] = undefined;

/**
 * @member {String} Y
 */
AreaSize.prototype['Y'] = undefined;






export default AreaSize;

