/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoyaltyAccount from './LoyaltyAccount';
import LoyaltyAcquirerData from './LoyaltyAcquirerData';
import LoyaltyAmount from './LoyaltyAmount';
import Rebates from './Rebates';

/**
 * The LoyaltyResult model module.
 * @module model/LoyaltyResult
 * @version 1
 */
class LoyaltyResult {
    /**
     * Constructs a new <code>LoyaltyResult</code>.
     * In the Message Response, the result of each loyalty brand transaction. Data related to the result of a processed loyalty transaction.
     * @alias module:model/LoyaltyResult
     * @param loyaltyAccount {module:model/LoyaltyAccount} 
     */
    constructor(loyaltyAccount) { 
        
        LoyaltyResult.initialize(this, loyaltyAccount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, loyaltyAccount) { 
        obj['LoyaltyAccount'] = loyaltyAccount;
    }

    /**
     * Constructs a <code>LoyaltyResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyResult} obj Optional instance to populate.
     * @return {module:model/LoyaltyResult} The populated <code>LoyaltyResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyResult();

            if (data.hasOwnProperty('CurrentBalance')) {
                obj['CurrentBalance'] = ApiClient.convertToType(data['CurrentBalance'], 'Number');
            }
            if (data.hasOwnProperty('LoyaltyAccount')) {
                obj['LoyaltyAccount'] = LoyaltyAccount.constructFromObject(data['LoyaltyAccount']);
            }
            if (data.hasOwnProperty('LoyaltyAcquirerData')) {
                obj['LoyaltyAcquirerData'] = LoyaltyAcquirerData.constructFromObject(data['LoyaltyAcquirerData']);
            }
            if (data.hasOwnProperty('LoyaltyAmount')) {
                obj['LoyaltyAmount'] = LoyaltyAmount.constructFromObject(data['LoyaltyAmount']);
            }
            if (data.hasOwnProperty('Rebates')) {
                obj['Rebates'] = Rebates.constructFromObject(data['Rebates']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `LoyaltyAccount`
        if (data['LoyaltyAccount']) { // data not null
          LoyaltyAccount.validateJSON(data['LoyaltyAccount']);
        }
        // validate the optional field `LoyaltyAcquirerData`
        if (data['LoyaltyAcquirerData']) { // data not null
          LoyaltyAcquirerData.validateJSON(data['LoyaltyAcquirerData']);
        }
        // validate the optional field `LoyaltyAmount`
        if (data['LoyaltyAmount']) { // data not null
          LoyaltyAmount.validateJSON(data['LoyaltyAmount']);
        }
        // validate the optional field `Rebates`
        if (data['Rebates']) { // data not null
          Rebates.validateJSON(data['Rebates']);
        }

        return true;
    }


}

LoyaltyResult.RequiredProperties = ["LoyaltyAccount"];

/**
 * if known (provided by the card or an external host).
 * @member {Number} CurrentBalance
 */
LoyaltyResult.prototype['CurrentBalance'] = undefined;

/**
 * @member {module:model/LoyaltyAccount} LoyaltyAccount
 */
LoyaltyResult.prototype['LoyaltyAccount'] = undefined;

/**
 * @member {module:model/LoyaltyAcquirerData} LoyaltyAcquirerData
 */
LoyaltyResult.prototype['LoyaltyAcquirerData'] = undefined;

/**
 * @member {module:model/LoyaltyAmount} LoyaltyAmount
 */
LoyaltyResult.prototype['LoyaltyAmount'] = undefined;

/**
 * @member {module:model/Rebates} Rebates
 */
LoyaltyResult.prototype['Rebates'] = undefined;






export default LoyaltyResult;

