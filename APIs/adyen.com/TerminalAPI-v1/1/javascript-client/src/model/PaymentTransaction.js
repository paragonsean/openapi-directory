/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AmountsReq from './AmountsReq';
import OriginalPOITransaction from './OriginalPOITransaction';
import SaleItem from './SaleItem';
import TransactionConditions from './TransactionConditions';

/**
 * The PaymentTransaction model module.
 * @module model/PaymentTransaction
 * @version 1
 */
class PaymentTransaction {
    /**
     * Constructs a new <code>PaymentTransaction</code>.
     * @alias module:model/PaymentTransaction
     * @param amountsReq {module:model/AmountsReq} 
     */
    constructor(amountsReq) { 
        
        PaymentTransaction.initialize(this, amountsReq);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountsReq) { 
        obj['AmountsReq'] = amountsReq;
    }

    /**
     * Constructs a <code>PaymentTransaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentTransaction} obj Optional instance to populate.
     * @return {module:model/PaymentTransaction} The populated <code>PaymentTransaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentTransaction();

            if (data.hasOwnProperty('AmountsReq')) {
                obj['AmountsReq'] = AmountsReq.constructFromObject(data['AmountsReq']);
            }
            if (data.hasOwnProperty('OriginalPOITransaction')) {
                obj['OriginalPOITransaction'] = OriginalPOITransaction.constructFromObject(data['OriginalPOITransaction']);
            }
            if (data.hasOwnProperty('SaleItem')) {
                obj['SaleItem'] = ApiClient.convertToType(data['SaleItem'], [SaleItem]);
            }
            if (data.hasOwnProperty('TransactionConditions')) {
                obj['TransactionConditions'] = TransactionConditions.constructFromObject(data['TransactionConditions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentTransaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentTransaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PaymentTransaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `AmountsReq`
        if (data['AmountsReq']) { // data not null
          AmountsReq.validateJSON(data['AmountsReq']);
        }
        // validate the optional field `OriginalPOITransaction`
        if (data['OriginalPOITransaction']) { // data not null
          OriginalPOITransaction.validateJSON(data['OriginalPOITransaction']);
        }
        if (data['SaleItem']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['SaleItem'])) {
                throw new Error("Expected the field `SaleItem` to be an array in the JSON data but got " + data['SaleItem']);
            }
            // validate the optional field `SaleItem` (array)
            for (const item of data['SaleItem']) {
                SaleItem.validateJSON(item);
            };
        }
        // validate the optional field `TransactionConditions`
        if (data['TransactionConditions']) { // data not null
          TransactionConditions.validateJSON(data['TransactionConditions']);
        }

        return true;
    }


}

PaymentTransaction.RequiredProperties = ["AmountsReq"];

/**
 * @member {module:model/AmountsReq} AmountsReq
 */
PaymentTransaction.prototype['AmountsReq'] = undefined;

/**
 * @member {module:model/OriginalPOITransaction} OriginalPOITransaction
 */
PaymentTransaction.prototype['OriginalPOITransaction'] = undefined;

/**
 * @member {Array.<module:model/SaleItem>} SaleItem
 */
PaymentTransaction.prototype['SaleItem'] = undefined;

/**
 * @member {module:model/TransactionConditions} TransactionConditions
 */
PaymentTransaction.prototype['TransactionConditions'] = undefined;






export default PaymentTransaction;

