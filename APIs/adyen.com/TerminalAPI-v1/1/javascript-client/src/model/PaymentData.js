/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerOrder from './CustomerOrder';
import Instalment from './Instalment';
import PaymentInstrumentData from './PaymentInstrumentData';
import PaymentType from './PaymentType';
import TransactionIDType from './TransactionIDType';

/**
 * The PaymentData model module.
 * @module model/PaymentData
 * @version 1
 */
class PaymentData {
    /**
     * Constructs a new <code>PaymentData</code>.
     * @alias module:model/PaymentData
     */
    constructor() { 
        
        PaymentData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['SplitPaymentFlag'] = false;
    }

    /**
     * Constructs a <code>PaymentData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PaymentData} obj Optional instance to populate.
     * @return {module:model/PaymentData} The populated <code>PaymentData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PaymentData();

            if (data.hasOwnProperty('CardAcquisitionReference')) {
                obj['CardAcquisitionReference'] = TransactionIDType.constructFromObject(data['CardAcquisitionReference']);
            }
            if (data.hasOwnProperty('CustomerOrder')) {
                obj['CustomerOrder'] = CustomerOrder.constructFromObject(data['CustomerOrder']);
            }
            if (data.hasOwnProperty('Instalment')) {
                obj['Instalment'] = Instalment.constructFromObject(data['Instalment']);
            }
            if (data.hasOwnProperty('PaymentInstrumentData')) {
                obj['PaymentInstrumentData'] = PaymentInstrumentData.constructFromObject(data['PaymentInstrumentData']);
            }
            if (data.hasOwnProperty('PaymentType')) {
                obj['PaymentType'] = PaymentType.constructFromObject(data['PaymentType']);
            }
            if (data.hasOwnProperty('RequestedValidityDate')) {
                obj['RequestedValidityDate'] = ApiClient.convertToType(data['RequestedValidityDate'], 'Date');
            }
            if (data.hasOwnProperty('SplitPaymentFlag')) {
                obj['SplitPaymentFlag'] = ApiClient.convertToType(data['SplitPaymentFlag'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PaymentData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PaymentData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `CardAcquisitionReference`
        if (data['CardAcquisitionReference']) { // data not null
          TransactionIDType.validateJSON(data['CardAcquisitionReference']);
        }
        // validate the optional field `CustomerOrder`
        if (data['CustomerOrder']) { // data not null
          CustomerOrder.validateJSON(data['CustomerOrder']);
        }
        // validate the optional field `Instalment`
        if (data['Instalment']) { // data not null
          Instalment.validateJSON(data['Instalment']);
        }
        // validate the optional field `PaymentInstrumentData`
        if (data['PaymentInstrumentData']) { // data not null
          PaymentInstrumentData.validateJSON(data['PaymentInstrumentData']);
        }

        return true;
    }


}



/**
 * @member {module:model/TransactionIDType} CardAcquisitionReference
 */
PaymentData.prototype['CardAcquisitionReference'] = undefined;

/**
 * @member {module:model/CustomerOrder} CustomerOrder
 */
PaymentData.prototype['CustomerOrder'] = undefined;

/**
 * @member {module:model/Instalment} Instalment
 */
PaymentData.prototype['Instalment'] = undefined;

/**
 * @member {module:model/PaymentInstrumentData} PaymentInstrumentData
 */
PaymentData.prototype['PaymentInstrumentData'] = undefined;

/**
 * @member {module:model/PaymentType} PaymentType
 */
PaymentData.prototype['PaymentType'] = undefined;

/**
 * @member {Date} RequestedValidityDate
 */
PaymentData.prototype['RequestedValidityDate'] = undefined;

/**
 * @member {Boolean} SplitPaymentFlag
 * @default false
 */
PaymentData.prototype['SplitPaymentFlag'] = false;






export default PaymentData;

