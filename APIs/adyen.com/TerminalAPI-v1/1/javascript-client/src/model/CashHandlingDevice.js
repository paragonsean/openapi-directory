/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CoinsOrBills from './CoinsOrBills';

/**
 * The CashHandlingDevice model module.
 * @module model/CashHandlingDevice
 * @version 1
 */
class CashHandlingDevice {
    /**
     * Constructs a new <code>CashHandlingDevice</code>.
     * Indicate the status and the remaining coins and bill in a cash handling device. Status of cash handling device.
     * @alias module:model/CashHandlingDevice
     * @param cashHandlingOKFlag {Boolean} Indicates if the cash handling device is working and usable.
     * @param coinsOrBills {Array.<module:model/CoinsOrBills>} 
     * @param currency {String} Currency of a monetary amount.
     */
    constructor(cashHandlingOKFlag, coinsOrBills, currency) { 
        
        CashHandlingDevice.initialize(this, cashHandlingOKFlag, coinsOrBills, currency);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cashHandlingOKFlag, coinsOrBills, currency) { 
        obj['CashHandlingOKFlag'] = cashHandlingOKFlag;
        obj['CoinsOrBills'] = coinsOrBills;
        obj['Currency'] = currency;
    }

    /**
     * Constructs a <code>CashHandlingDevice</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CashHandlingDevice} obj Optional instance to populate.
     * @return {module:model/CashHandlingDevice} The populated <code>CashHandlingDevice</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CashHandlingDevice();

            if (data.hasOwnProperty('CashHandlingOKFlag')) {
                obj['CashHandlingOKFlag'] = ApiClient.convertToType(data['CashHandlingOKFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('CoinsOrBills')) {
                obj['CoinsOrBills'] = ApiClient.convertToType(data['CoinsOrBills'], [CoinsOrBills]);
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CashHandlingDevice</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CashHandlingDevice</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CashHandlingDevice.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['CoinsOrBills']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['CoinsOrBills'])) {
                throw new Error("Expected the field `CoinsOrBills` to be an array in the JSON data but got " + data['CoinsOrBills']);
            }
            // validate the optional field `CoinsOrBills` (array)
            for (const item of data['CoinsOrBills']) {
                CoinsOrBills.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }

        return true;
    }


}

CashHandlingDevice.RequiredProperties = ["CashHandlingOKFlag", "CoinsOrBills", "Currency"];

/**
 * Indicates if the cash handling device is working and usable.
 * @member {Boolean} CashHandlingOKFlag
 */
CashHandlingDevice.prototype['CashHandlingOKFlag'] = undefined;

/**
 * @member {Array.<module:model/CoinsOrBills>} CoinsOrBills
 */
CashHandlingDevice.prototype['CoinsOrBills'] = undefined;

/**
 * Currency of a monetary amount.
 * @member {String} Currency
 */
CashHandlingDevice.prototype['Currency'] = undefined;






export default CashHandlingDevice;

