/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackFormat from './TrackFormat';

/**
 * The TrackData model module.
 * @module model/TrackData
 * @version 1
 */
class TrackData {
    /**
     * Constructs a new <code>TrackData</code>.
     * ISO 7813 - ISO 4909.  Generic data structure for a card track, used when the magstripe card reader is located on the Sale Terminal, or for magstripe Card Reader device request. The data structure is also used to store the line at the bottom of a bank check. Magnetic track or magnetic ink characters line.
     * @alias module:model/TrackData
     * @param trackValue {String} 
     */
    constructor(trackValue) { 
        
        TrackData.initialize(this, trackValue);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, trackValue) { 
        obj['TrackNumb'] = 2;
        obj['TrackValue'] = trackValue;
    }

    /**
     * Constructs a <code>TrackData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackData} obj Optional instance to populate.
     * @return {module:model/TrackData} The populated <code>TrackData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackData();

            if (data.hasOwnProperty('TrackFormat')) {
                obj['TrackFormat'] = TrackFormat.constructFromObject(data['TrackFormat']);
            }
            if (data.hasOwnProperty('TrackNumb')) {
                obj['TrackNumb'] = ApiClient.convertToType(data['TrackNumb'], 'Number');
            }
            if (data.hasOwnProperty('TrackValue')) {
                obj['TrackValue'] = ApiClient.convertToType(data['TrackValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrackData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['TrackValue'] && !(typeof data['TrackValue'] === 'string' || data['TrackValue'] instanceof String)) {
            throw new Error("Expected the field `TrackValue` to be a primitive type in the JSON string but got " + data['TrackValue']);
        }

        return true;
    }


}

TrackData.RequiredProperties = ["TrackValue"];

/**
 * @member {module:model/TrackFormat} TrackFormat
 */
TrackData.prototype['TrackFormat'] = undefined;

/**
 * @member {Number} TrackNumb
 * @default 2
 */
TrackData.prototype['TrackNumb'] = 2;

/**
 * @member {String} TrackValue
 */
TrackData.prototype['TrackValue'] = undefined;






export default TrackData;

