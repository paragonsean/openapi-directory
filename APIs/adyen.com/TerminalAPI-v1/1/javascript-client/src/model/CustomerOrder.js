/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomerOrder model module.
 * @module model/CustomerOrder
 * @version 1
 */
class CustomerOrder {
    /**
     * Constructs a new <code>CustomerOrder</code>.
     * Customer order attached to a customer, recorded in the POI system.  Allows the management of customer orders by the POI, for instance in a multi-channel or a click and collect sale transaction.
     * @alias module:model/CustomerOrder
     * @param currentAmount {Number} Total amount of all completed transactions of a customer order.
     * @param forecastedAmount {Number} 
     * @param saleReferenceID {String} 
     * @param startDate {Date} Date time of the beginning of an operation.
     */
    constructor(currentAmount, forecastedAmount, saleReferenceID, startDate) { 
        
        CustomerOrder.initialize(this, currentAmount, forecastedAmount, saleReferenceID, startDate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentAmount, forecastedAmount, saleReferenceID, startDate) { 
        obj['CurrentAmount'] = currentAmount;
        obj['ForecastedAmount'] = forecastedAmount;
        obj['OpenOrderState'] = true;
        obj['SaleReferenceID'] = saleReferenceID;
        obj['StartDate'] = startDate;
    }

    /**
     * Constructs a <code>CustomerOrder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomerOrder} obj Optional instance to populate.
     * @return {module:model/CustomerOrder} The populated <code>CustomerOrder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomerOrder();

            if (data.hasOwnProperty('AccessedBy')) {
                obj['AccessedBy'] = ApiClient.convertToType(data['AccessedBy'], 'String');
            }
            if (data.hasOwnProperty('AdditionalInformation')) {
                obj['AdditionalInformation'] = ApiClient.convertToType(data['AdditionalInformation'], 'String');
            }
            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('CurrentAmount')) {
                obj['CurrentAmount'] = ApiClient.convertToType(data['CurrentAmount'], 'Number');
            }
            if (data.hasOwnProperty('CustomerOrderID')) {
                obj['CustomerOrderID'] = ApiClient.convertToType(data['CustomerOrderID'], 'String');
            }
            if (data.hasOwnProperty('EndDate')) {
                obj['EndDate'] = ApiClient.convertToType(data['EndDate'], 'Date');
            }
            if (data.hasOwnProperty('ForecastedAmount')) {
                obj['ForecastedAmount'] = ApiClient.convertToType(data['ForecastedAmount'], 'Number');
            }
            if (data.hasOwnProperty('OpenOrderState')) {
                obj['OpenOrderState'] = ApiClient.convertToType(data['OpenOrderState'], 'Boolean');
            }
            if (data.hasOwnProperty('SaleReferenceID')) {
                obj['SaleReferenceID'] = ApiClient.convertToType(data['SaleReferenceID'], 'String');
            }
            if (data.hasOwnProperty('StartDate')) {
                obj['StartDate'] = ApiClient.convertToType(data['StartDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomerOrder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomerOrder</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomerOrder.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AccessedBy'] && !(typeof data['AccessedBy'] === 'string' || data['AccessedBy'] instanceof String)) {
            throw new Error("Expected the field `AccessedBy` to be a primitive type in the JSON string but got " + data['AccessedBy']);
        }
        // ensure the json data is a string
        if (data['AdditionalInformation'] && !(typeof data['AdditionalInformation'] === 'string' || data['AdditionalInformation'] instanceof String)) {
            throw new Error("Expected the field `AdditionalInformation` to be a primitive type in the JSON string but got " + data['AdditionalInformation']);
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // ensure the json data is a string
        if (data['CustomerOrderID'] && !(typeof data['CustomerOrderID'] === 'string' || data['CustomerOrderID'] instanceof String)) {
            throw new Error("Expected the field `CustomerOrderID` to be a primitive type in the JSON string but got " + data['CustomerOrderID']);
        }
        // ensure the json data is a string
        if (data['SaleReferenceID'] && !(typeof data['SaleReferenceID'] === 'string' || data['SaleReferenceID'] instanceof String)) {
            throw new Error("Expected the field `SaleReferenceID` to be a primitive type in the JSON string but got " + data['SaleReferenceID']);
        }

        return true;
    }


}

CustomerOrder.RequiredProperties = ["CurrentAmount", "ForecastedAmount", "SaleReferenceID", "StartDate"];

/**
 * @member {String} AccessedBy
 */
CustomerOrder.prototype['AccessedBy'] = undefined;

/**
 * Unqualified information.
 * @member {String} AdditionalInformation
 */
CustomerOrder.prototype['AdditionalInformation'] = undefined;

/**
 * Currency of a monetary amount.
 * @member {String} Currency
 */
CustomerOrder.prototype['Currency'] = undefined;

/**
 * Total amount of all completed transactions of a customer order.
 * @member {Number} CurrentAmount
 */
CustomerOrder.prototype['CurrentAmount'] = undefined;

/**
 * Additional and optional identification of a customer order.
 * @member {String} CustomerOrderID
 */
CustomerOrder.prototype['CustomerOrderID'] = undefined;

/**
 * Date time of the end of an operation.
 * @member {Date} EndDate
 */
CustomerOrder.prototype['EndDate'] = undefined;

/**
 * @member {Number} ForecastedAmount
 */
CustomerOrder.prototype['ForecastedAmount'] = undefined;

/**
 * @member {Boolean} OpenOrderState
 * @default true
 */
CustomerOrder.prototype['OpenOrderState'] = true;

/**
 * @member {String} SaleReferenceID
 */
CustomerOrder.prototype['SaleReferenceID'] = undefined;

/**
 * Date time of the beginning of an operation.
 * @member {Date} StartDate
 */
CustomerOrder.prototype['StartDate'] = undefined;






export default CustomerOrder;

