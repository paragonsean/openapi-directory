/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DisplayOutput from './DisplayOutput';
import EventToNotify from './EventToNotify';

/**
 * The EventNotification model module.
 * @module model/EventNotification
 * @version 1
 */
class EventNotification {
    /**
     * Constructs a new <code>EventNotification</code>.
     * It conveys Information related to the event, and possible action (maintenance, message to display). Content of the EventNotification message.
     * @alias module:model/EventNotification
     * @param eventToNotify {module:model/EventToNotify} 
     * @param timeStamp {Date} Date and time of a transaction for the Sale System, the POI System or the Acquirer.
     */
    constructor(eventToNotify, timeStamp) { 
        
        EventNotification.initialize(this, eventToNotify, timeStamp);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventToNotify, timeStamp) { 
        obj['EventToNotify'] = eventToNotify;
        obj['MaintenanceRequiredFlag'] = false;
        obj['TimeStamp'] = timeStamp;
    }

    /**
     * Constructs a <code>EventNotification</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventNotification} obj Optional instance to populate.
     * @return {module:model/EventNotification} The populated <code>EventNotification</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventNotification();

            if (data.hasOwnProperty('CustomerLanguage')) {
                obj['CustomerLanguage'] = ApiClient.convertToType(data['CustomerLanguage'], 'String');
            }
            if (data.hasOwnProperty('DisplayOutput')) {
                obj['DisplayOutput'] = ApiClient.convertToType(data['DisplayOutput'], [DisplayOutput]);
            }
            if (data.hasOwnProperty('EventDetails')) {
                obj['EventDetails'] = ApiClient.convertToType(data['EventDetails'], 'String');
            }
            if (data.hasOwnProperty('EventToNotify')) {
                obj['EventToNotify'] = EventToNotify.constructFromObject(data['EventToNotify']);
            }
            if (data.hasOwnProperty('MaintenanceRequiredFlag')) {
                obj['MaintenanceRequiredFlag'] = ApiClient.convertToType(data['MaintenanceRequiredFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('RejectedMessage')) {
                obj['RejectedMessage'] = ApiClient.convertToType(data['RejectedMessage'], 'String');
            }
            if (data.hasOwnProperty('TimeStamp')) {
                obj['TimeStamp'] = ApiClient.convertToType(data['TimeStamp'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventNotification</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventNotification</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EventNotification.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CustomerLanguage'] && !(typeof data['CustomerLanguage'] === 'string' || data['CustomerLanguage'] instanceof String)) {
            throw new Error("Expected the field `CustomerLanguage` to be a primitive type in the JSON string but got " + data['CustomerLanguage']);
        }
        if (data['DisplayOutput']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['DisplayOutput'])) {
                throw new Error("Expected the field `DisplayOutput` to be an array in the JSON data but got " + data['DisplayOutput']);
            }
            // validate the optional field `DisplayOutput` (array)
            for (const item of data['DisplayOutput']) {
                DisplayOutput.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['EventDetails'] && !(typeof data['EventDetails'] === 'string' || data['EventDetails'] instanceof String)) {
            throw new Error("Expected the field `EventDetails` to be a primitive type in the JSON string but got " + data['EventDetails']);
        }
        // ensure the json data is a string
        if (data['RejectedMessage'] && !(typeof data['RejectedMessage'] === 'string' || data['RejectedMessage'] instanceof String)) {
            throw new Error("Expected the field `RejectedMessage` to be a primitive type in the JSON string but got " + data['RejectedMessage']);
        }

        return true;
    }


}

EventNotification.RequiredProperties = ["EventToNotify", "TimeStamp"];

/**
 * If the language is selected by the Sale System before the request to the POI.
 * @member {String} CustomerLanguage
 */
EventNotification.prototype['CustomerLanguage'] = undefined;

/**
 * @member {Array.<module:model/DisplayOutput>} DisplayOutput
 */
EventNotification.prototype['DisplayOutput'] = undefined;

/**
 * If present, the Sale logs it for further examination.
 * @member {String} EventDetails
 */
EventNotification.prototype['EventDetails'] = undefined;

/**
 * @member {module:model/EventToNotify} EventToNotify
 */
EventNotification.prototype['EventToNotify'] = undefined;

/**
 * Indicates if the occurred event requires maintenance call or action.
 * @member {Boolean} MaintenanceRequiredFlag
 * @default false
 */
EventNotification.prototype['MaintenanceRequiredFlag'] = false;

/**
 * Mandatory if EventToNotify is Reject, absent in other cases.
 * @member {String} RejectedMessage
 */
EventNotification.prototype['RejectedMessage'] = undefined;

/**
 * Date and time of a transaction for the Sale System, the POI System or the Acquirer.
 * @member {Date} TimeStamp
 */
EventNotification.prototype['TimeStamp'] = undefined;






export default EventNotification;

