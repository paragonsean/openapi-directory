/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MessageCategory from './MessageCategory';
import MessageClass from './MessageClass';
import MessageType from './MessageType';

/**
 * The MessageHeader model module.
 * @module model/MessageHeader
 * @version 1
 */
class MessageHeader {
    /**
     * Constructs a new <code>MessageHeader</code>.
     * It conveys Information related to the Sale to POI protocol management. Message header of the Sale to POI protocol message.
     * @alias module:model/MessageHeader
     * @param messageCategory {module:model/MessageCategory} 
     * @param messageClass {module:model/MessageClass} 
     * @param messageType {module:model/MessageType} 
     * @param POIID {String} Identification of a POI System or a POI Terminal for the Sale to POI protocol.
     * @param saleID {String} Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
     */
    constructor(messageCategory, messageClass, messageType, POIID, saleID) { 
        
        MessageHeader.initialize(this, messageCategory, messageClass, messageType, POIID, saleID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageCategory, messageClass, messageType, POIID, saleID) { 
        obj['MessageCategory'] = messageCategory;
        obj['MessageClass'] = messageClass;
        obj['MessageType'] = messageType;
        obj['POIID'] = POIID;
        obj['SaleID'] = saleID;
    }

    /**
     * Constructs a <code>MessageHeader</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MessageHeader} obj Optional instance to populate.
     * @return {module:model/MessageHeader} The populated <code>MessageHeader</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MessageHeader();

            if (data.hasOwnProperty('DeviceID')) {
                obj['DeviceID'] = ApiClient.convertToType(data['DeviceID'], 'String');
            }
            if (data.hasOwnProperty('MessageCategory')) {
                obj['MessageCategory'] = MessageCategory.constructFromObject(data['MessageCategory']);
            }
            if (data.hasOwnProperty('MessageClass')) {
                obj['MessageClass'] = MessageClass.constructFromObject(data['MessageClass']);
            }
            if (data.hasOwnProperty('MessageType')) {
                obj['MessageType'] = MessageType.constructFromObject(data['MessageType']);
            }
            if (data.hasOwnProperty('POIID')) {
                obj['POIID'] = ApiClient.convertToType(data['POIID'], 'String');
            }
            if (data.hasOwnProperty('ProtocolVersion')) {
                obj['ProtocolVersion'] = ApiClient.convertToType(data['ProtocolVersion'], 'String');
            }
            if (data.hasOwnProperty('SaleID')) {
                obj['SaleID'] = ApiClient.convertToType(data['SaleID'], 'String');
            }
            if (data.hasOwnProperty('ServiceID')) {
                obj['ServiceID'] = ApiClient.convertToType(data['ServiceID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MessageHeader</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MessageHeader</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of MessageHeader.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['DeviceID'] && !(typeof data['DeviceID'] === 'string' || data['DeviceID'] instanceof String)) {
            throw new Error("Expected the field `DeviceID` to be a primitive type in the JSON string but got " + data['DeviceID']);
        }
        // ensure the json data is a string
        if (data['POIID'] && !(typeof data['POIID'] === 'string' || data['POIID'] instanceof String)) {
            throw new Error("Expected the field `POIID` to be a primitive type in the JSON string but got " + data['POIID']);
        }
        // ensure the json data is a string
        if (data['ProtocolVersion'] && !(typeof data['ProtocolVersion'] === 'string' || data['ProtocolVersion'] instanceof String)) {
            throw new Error("Expected the field `ProtocolVersion` to be a primitive type in the JSON string but got " + data['ProtocolVersion']);
        }
        // ensure the json data is a string
        if (data['SaleID'] && !(typeof data['SaleID'] === 'string' || data['SaleID'] instanceof String)) {
            throw new Error("Expected the field `SaleID` to be a primitive type in the JSON string but got " + data['SaleID']);
        }
        // ensure the json data is a string
        if (data['ServiceID'] && !(typeof data['ServiceID'] === 'string' || data['ServiceID'] instanceof String)) {
            throw new Error("Expected the field `ServiceID` to be a primitive type in the JSON string but got " + data['ServiceID']);
        }

        return true;
    }


}

MessageHeader.RequiredProperties = ["MessageCategory", "MessageClass", "MessageType", "POIID", "SaleID"];

/**
 * If Device MessageClass.
 * @member {String} DeviceID
 */
MessageHeader.prototype['DeviceID'] = undefined;

/**
 * @member {module:model/MessageCategory} MessageCategory
 */
MessageHeader.prototype['MessageCategory'] = undefined;

/**
 * @member {module:model/MessageClass} MessageClass
 */
MessageHeader.prototype['MessageClass'] = undefined;

/**
 * @member {module:model/MessageType} MessageType
 */
MessageHeader.prototype['MessageType'] = undefined;

/**
 * Identification of a POI System or a POI Terminal for the Sale to POI protocol.
 * @member {String} POIID
 */
MessageHeader.prototype['POIID'] = undefined;

/**
 * If MessageCategory is Login or Diagnosis.
 * @member {String} ProtocolVersion
 */
MessageHeader.prototype['ProtocolVersion'] = undefined;

/**
 * Identification of a Sale System or a Sale Terminal for the Sale to POI protocol.
 * @member {String} SaleID
 */
MessageHeader.prototype['SaleID'] = undefined;

/**
 * Required if Service or Event MessageClass message or if Device MessageClass and request from POI or response from Sale.
 * @member {String} ServiceID
 */
MessageHeader.prototype['ServiceID'] = undefined;






export default MessageHeader;

