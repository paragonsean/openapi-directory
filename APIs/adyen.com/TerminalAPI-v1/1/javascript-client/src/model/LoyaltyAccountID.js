/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IdentificationSupport from './IdentificationSupport';
import IdentificationType from './IdentificationType';

/**
 * The LoyaltyAccountID model module.
 * @module model/LoyaltyAccountID
 * @version 1
 */
class LoyaltyAccountID {
    /**
     * Constructs a new <code>LoyaltyAccountID</code>.
     * In the Payment or the Loyalty Request message, it allows to identify the loyalty account by the Sale Terminal instead of the POI Terminal (e.g. because the account identification is a bar-code read by the Cashier on a scanner device). Identification of a Loyalty account.
     * @alias module:model/LoyaltyAccountID
     * @param entryMode {Array.<module:model/LoyaltyAccountID.EntryModeEnum>} 
     * @param identificationType {module:model/IdentificationType} 
     * @param loyaltyID {String} 
     */
    constructor(entryMode, identificationType, loyaltyID) { 
        
        LoyaltyAccountID.initialize(this, entryMode, identificationType, loyaltyID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, entryMode, identificationType, loyaltyID) { 
        obj['EntryMode'] = entryMode;
        obj['IdentificationType'] = identificationType;
        obj['LoyaltyID'] = loyaltyID;
    }

    /**
     * Constructs a <code>LoyaltyAccountID</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoyaltyAccountID} obj Optional instance to populate.
     * @return {module:model/LoyaltyAccountID} The populated <code>LoyaltyAccountID</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoyaltyAccountID();

            if (data.hasOwnProperty('EntryMode')) {
                obj['EntryMode'] = ApiClient.convertToType(data['EntryMode'], ['String']);
            }
            if (data.hasOwnProperty('IdentificationSupport')) {
                obj['IdentificationSupport'] = IdentificationSupport.constructFromObject(data['IdentificationSupport']);
            }
            if (data.hasOwnProperty('IdentificationType')) {
                obj['IdentificationType'] = IdentificationType.constructFromObject(data['IdentificationType']);
            }
            if (data.hasOwnProperty('LoyaltyID')) {
                obj['LoyaltyID'] = ApiClient.convertToType(data['LoyaltyID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoyaltyAccountID</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoyaltyAccountID</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LoyaltyAccountID.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['EntryMode'])) {
            throw new Error("Expected the field `EntryMode` to be an array in the JSON data but got " + data['EntryMode']);
        }
        // ensure the json data is a string
        if (data['LoyaltyID'] && !(typeof data['LoyaltyID'] === 'string' || data['LoyaltyID'] instanceof String)) {
            throw new Error("Expected the field `LoyaltyID` to be a primitive type in the JSON string but got " + data['LoyaltyID']);
        }

        return true;
    }


}

LoyaltyAccountID.RequiredProperties = ["EntryMode", "IdentificationType", "LoyaltyID"];

/**
 * @member {Array.<module:model/LoyaltyAccountID.EntryModeEnum>} EntryMode
 */
LoyaltyAccountID.prototype['EntryMode'] = undefined;

/**
 * @member {module:model/IdentificationSupport} IdentificationSupport
 */
LoyaltyAccountID.prototype['IdentificationSupport'] = undefined;

/**
 * @member {module:model/IdentificationType} IdentificationType
 */
LoyaltyAccountID.prototype['IdentificationType'] = undefined;

/**
 * @member {String} LoyaltyID
 */
LoyaltyAccountID.prototype['LoyaltyID'] = undefined;





/**
 * Allowed values for the <code>entryMode</code> property.
 * @enum {String}
 * @readonly
 */
LoyaltyAccountID['EntryModeEnum'] = {

    /**
     * value: "Contactless"
     * @const
     */
    "Contactless": "Contactless",

    /**
     * value: "File"
     * @const
     */
    "File": "File",

    /**
     * value: "ICC"
     * @const
     */
    "ICC": "ICC",

    /**
     * value: "Keyed"
     * @const
     */
    "Keyed": "Keyed",

    /**
     * value: "MagStripe"
     * @const
     */
    "MagStripe": "MagStripe",

    /**
     * value: "Manual"
     * @const
     */
    "Manual": "Manual",

    /**
     * value: "Mobile"
     * @const
     */
    "Mobile": "Mobile",

    /**
     * value: "RFID"
     * @const
     */
    "RFID": "RFID",

    /**
     * value: "Scanned"
     * @const
     */
    "Scanned": "Scanned",

    /**
     * value: "SynchronousICC"
     * @const
     */
    "SynchronousICC": "SynchronousICC",

    /**
     * value: "Tapped"
     * @const
     */
    "Tapped": "Tapped"
};



export default LoyaltyAccountID;

