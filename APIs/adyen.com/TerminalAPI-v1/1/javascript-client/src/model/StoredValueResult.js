/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StoredValueAccountStatus from './StoredValueAccountStatus';
import StoredValueTransactionType from './StoredValueTransactionType';
import TransactionIDType from './TransactionIDType';

/**
 * The StoredValueResult model module.
 * @module model/StoredValueResult
 * @version 1
 */
class StoredValueResult {
    /**
     * Constructs a new <code>StoredValueResult</code>.
     * For each stored value card loaded or reloaded, in the StoredValue response message. Result of loading/reloading a stored value card..
     * @alias module:model/StoredValueResult
     * @param storedValueTransactionType {module:model/StoredValueTransactionType} 
     */
    constructor(storedValueTransactionType) { 
        
        StoredValueResult.initialize(this, storedValueTransactionType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, storedValueTransactionType) { 
        obj['StoredValueTransactionType'] = storedValueTransactionType;
    }

    /**
     * Constructs a <code>StoredValueResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoredValueResult} obj Optional instance to populate.
     * @return {module:model/StoredValueResult} The populated <code>StoredValueResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoredValueResult();

            if (data.hasOwnProperty('Currency')) {
                obj['Currency'] = ApiClient.convertToType(data['Currency'], 'String');
            }
            if (data.hasOwnProperty('EanUpc')) {
                obj['EanUpc'] = ApiClient.convertToType(data['EanUpc'], 'Number');
            }
            if (data.hasOwnProperty('HostTransactionID')) {
                obj['HostTransactionID'] = TransactionIDType.constructFromObject(data['HostTransactionID']);
            }
            if (data.hasOwnProperty('ItemAmount')) {
                obj['ItemAmount'] = ApiClient.convertToType(data['ItemAmount'], 'Number');
            }
            if (data.hasOwnProperty('ProductCode')) {
                obj['ProductCode'] = ApiClient.convertToType(data['ProductCode'], 'Number');
            }
            if (data.hasOwnProperty('StoredValueAccountStatus')) {
                obj['StoredValueAccountStatus'] = StoredValueAccountStatus.constructFromObject(data['StoredValueAccountStatus']);
            }
            if (data.hasOwnProperty('StoredValueTransactionType')) {
                obj['StoredValueTransactionType'] = StoredValueTransactionType.constructFromObject(data['StoredValueTransactionType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoredValueResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoredValueResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoredValueResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['Currency'] && !(typeof data['Currency'] === 'string' || data['Currency'] instanceof String)) {
            throw new Error("Expected the field `Currency` to be a primitive type in the JSON string but got " + data['Currency']);
        }
        // validate the optional field `HostTransactionID`
        if (data['HostTransactionID']) { // data not null
          TransactionIDType.validateJSON(data['HostTransactionID']);
        }
        // validate the optional field `StoredValueAccountStatus`
        if (data['StoredValueAccountStatus']) { // data not null
          StoredValueAccountStatus.validateJSON(data['StoredValueAccountStatus']);
        }

        return true;
    }


}

StoredValueResult.RequiredProperties = ["StoredValueTransactionType"];

/**
 * Copy.
 * @member {String} Currency
 */
StoredValueResult.prototype['Currency'] = undefined;

/**
 * Copy.
 * @member {Number} EanUpc
 */
StoredValueResult.prototype['EanUpc'] = undefined;

/**
 * @member {module:model/TransactionIDType} HostTransactionID
 */
StoredValueResult.prototype['HostTransactionID'] = undefined;

/**
 * Total amount of the item line.
 * @member {Number} ItemAmount
 */
StoredValueResult.prototype['ItemAmount'] = undefined;

/**
 * Copy.
 * @member {Number} ProductCode
 */
StoredValueResult.prototype['ProductCode'] = undefined;

/**
 * @member {module:model/StoredValueAccountStatus} StoredValueAccountStatus
 */
StoredValueResult.prototype['StoredValueAccountStatus'] = undefined;

/**
 * @member {module:model/StoredValueTransactionType} StoredValueTransactionType
 */
StoredValueResult.prototype['StoredValueTransactionType'] = undefined;






export default StoredValueResult;

