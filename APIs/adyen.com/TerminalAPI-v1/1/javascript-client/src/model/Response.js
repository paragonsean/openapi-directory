/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorCondition from './ErrorCondition';
import Result from './Result';

/**
 * The Response model module.
 * @module model/Response
 * @version 1
 */
class Response {
    /**
     * Constructs a new <code>Response</code>.
     * If Result is Success, ErrorCondition is absent or not used in the processing of the message. In the other cases, the ErrorCondition has to be present and can refine the processing of the message response. AdditionalResponse gives more information about the success or the failure of the message request processing, for logging without real time involvements. Result of a message request processing.
     * @alias module:model/Response
     * @param result {module:model/Result} 
     */
    constructor(result) { 
        
        Response.initialize(this, result);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, result) { 
        obj['Result'] = result;
    }

    /**
     * Constructs a <code>Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Response} obj Optional instance to populate.
     * @return {module:model/Response} The populated <code>Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Response();

            if (data.hasOwnProperty('AdditionalResponse')) {
                obj['AdditionalResponse'] = ApiClient.convertToType(data['AdditionalResponse'], 'String');
            }
            if (data.hasOwnProperty('ErrorCondition')) {
                obj['ErrorCondition'] = ErrorCondition.constructFromObject(data['ErrorCondition']);
            }
            if (data.hasOwnProperty('Result')) {
                obj['Result'] = Result.constructFromObject(data['Result']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Response</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Response.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['AdditionalResponse'] && !(typeof data['AdditionalResponse'] === 'string' || data['AdditionalResponse'] instanceof String)) {
            throw new Error("Expected the field `AdditionalResponse` to be a primitive type in the JSON string but got " + data['AdditionalResponse']);
        }

        return true;
    }


}

Response.RequiredProperties = ["Result"];

/**
 * If present, the POI logs it for further examination.
 * @member {String} AdditionalResponse
 */
Response.prototype['AdditionalResponse'] = undefined;

/**
 * @member {module:model/ErrorCondition} ErrorCondition
 */
Response.prototype['ErrorCondition'] = undefined;

/**
 * @member {module:model/Result} Result
 */
Response.prototype['Result'] = undefined;






export default Response;

