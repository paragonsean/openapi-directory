/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DiagnosisRequest model module.
 * @module model/DiagnosisRequest
 * @version 1
 */
class DiagnosisRequest {
    /**
     * Constructs a new <code>DiagnosisRequest</code>.
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     * @alias module:model/DiagnosisRequest
     */
    constructor() { 
        
        DiagnosisRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['HostDiagnosisFlag'] = false;
    }

    /**
     * Constructs a <code>DiagnosisRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DiagnosisRequest} obj Optional instance to populate.
     * @return {module:model/DiagnosisRequest} The populated <code>DiagnosisRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DiagnosisRequest();

            if (data.hasOwnProperty('AcquirerID')) {
                obj['AcquirerID'] = ApiClient.convertToType(data['AcquirerID'], ['Number']);
            }
            if (data.hasOwnProperty('HostDiagnosisFlag')) {
                obj['HostDiagnosisFlag'] = ApiClient.convertToType(data['HostDiagnosisFlag'], 'Boolean');
            }
            if (data.hasOwnProperty('POIID')) {
                obj['POIID'] = ApiClient.convertToType(data['POIID'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DiagnosisRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DiagnosisRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['AcquirerID'])) {
            throw new Error("Expected the field `AcquirerID` to be an array in the JSON data but got " + data['AcquirerID']);
        }
        // ensure the json data is a string
        if (data['POIID'] && !(typeof data['POIID'] === 'string' || data['POIID'] instanceof String)) {
            throw new Error("Expected the field `POIID` to be a primitive type in the JSON string but got " + data['POIID']);
        }

        return true;
    }


}



/**
 * @member {Array.<Number>} AcquirerID
 */
DiagnosisRequest.prototype['AcquirerID'] = undefined;

/**
 * Indicates if Host Diagnosis are required.
 * @member {Boolean} HostDiagnosisFlag
 * @default false
 */
DiagnosisRequest.prototype['HostDiagnosisFlag'] = false;

/**
 * MessageHeader.POIID.
 * @member {String} POIID
 */
DiagnosisRequest.prototype['POIID'] = undefined;






export default DiagnosisRequest;

