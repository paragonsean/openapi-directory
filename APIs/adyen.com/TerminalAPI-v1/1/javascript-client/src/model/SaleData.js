/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SaleTerminalData from './SaleTerminalData';
import SaleToIssuerData from './SaleToIssuerData';
import TokenRequestedType from './TokenRequestedType';
import TransactionIDType from './TransactionIDType';

/**
 * The SaleData model module.
 * @module model/SaleData
 * @version 1
 */
class SaleData {
    /**
     * Constructs a new <code>SaleData</code>.
     * Data associated to the Sale System, with a particular value during the processing of the payment by the POI, including the cards acquisition. Data related to the Sale System.
     * @alias module:model/SaleData
     * @param saleTransactionID {module:model/TransactionIDType} 
     */
    constructor(saleTransactionID) { 
        
        SaleData.initialize(this, saleTransactionID);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, saleTransactionID) { 
        obj['SaleTransactionID'] = saleTransactionID;
    }

    /**
     * Constructs a <code>SaleData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SaleData} obj Optional instance to populate.
     * @return {module:model/SaleData} The populated <code>SaleData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SaleData();

            if (data.hasOwnProperty('CustomerOrderID')) {
                obj['CustomerOrderID'] = ApiClient.convertToType(data['CustomerOrderID'], 'String');
            }
            if (data.hasOwnProperty('CustomerOrderReq')) {
                obj['CustomerOrderReq'] = ApiClient.convertToType(data['CustomerOrderReq'], ['String']);
            }
            if (data.hasOwnProperty('OperatorID')) {
                obj['OperatorID'] = ApiClient.convertToType(data['OperatorID'], 'String');
            }
            if (data.hasOwnProperty('OperatorLanguage')) {
                obj['OperatorLanguage'] = ApiClient.convertToType(data['OperatorLanguage'], 'String');
            }
            if (data.hasOwnProperty('SaleReferenceID')) {
                obj['SaleReferenceID'] = ApiClient.convertToType(data['SaleReferenceID'], 'String');
            }
            if (data.hasOwnProperty('SaleTerminalData')) {
                obj['SaleTerminalData'] = SaleTerminalData.constructFromObject(data['SaleTerminalData']);
            }
            if (data.hasOwnProperty('SaleToAcquirerData')) {
                obj['SaleToAcquirerData'] = ApiClient.convertToType(data['SaleToAcquirerData'], 'String');
            }
            if (data.hasOwnProperty('SaleToIssuerData')) {
                obj['SaleToIssuerData'] = SaleToIssuerData.constructFromObject(data['SaleToIssuerData']);
            }
            if (data.hasOwnProperty('SaleToPOIData')) {
                obj['SaleToPOIData'] = ApiClient.convertToType(data['SaleToPOIData'], 'String');
            }
            if (data.hasOwnProperty('SaleTransactionID')) {
                obj['SaleTransactionID'] = TransactionIDType.constructFromObject(data['SaleTransactionID']);
            }
            if (data.hasOwnProperty('ShiftNumber')) {
                obj['ShiftNumber'] = ApiClient.convertToType(data['ShiftNumber'], 'String');
            }
            if (data.hasOwnProperty('TokenRequestedType')) {
                obj['TokenRequestedType'] = TokenRequestedType.constructFromObject(data['TokenRequestedType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SaleData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SaleData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SaleData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['CustomerOrderID'] && !(typeof data['CustomerOrderID'] === 'string' || data['CustomerOrderID'] instanceof String)) {
            throw new Error("Expected the field `CustomerOrderID` to be a primitive type in the JSON string but got " + data['CustomerOrderID']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['CustomerOrderReq'])) {
            throw new Error("Expected the field `CustomerOrderReq` to be an array in the JSON data but got " + data['CustomerOrderReq']);
        }
        // ensure the json data is a string
        if (data['OperatorID'] && !(typeof data['OperatorID'] === 'string' || data['OperatorID'] instanceof String)) {
            throw new Error("Expected the field `OperatorID` to be a primitive type in the JSON string but got " + data['OperatorID']);
        }
        // ensure the json data is a string
        if (data['OperatorLanguage'] && !(typeof data['OperatorLanguage'] === 'string' || data['OperatorLanguage'] instanceof String)) {
            throw new Error("Expected the field `OperatorLanguage` to be a primitive type in the JSON string but got " + data['OperatorLanguage']);
        }
        // ensure the json data is a string
        if (data['SaleReferenceID'] && !(typeof data['SaleReferenceID'] === 'string' || data['SaleReferenceID'] instanceof String)) {
            throw new Error("Expected the field `SaleReferenceID` to be a primitive type in the JSON string but got " + data['SaleReferenceID']);
        }
        // validate the optional field `SaleTerminalData`
        if (data['SaleTerminalData']) { // data not null
          SaleTerminalData.validateJSON(data['SaleTerminalData']);
        }
        // ensure the json data is a string
        if (data['SaleToAcquirerData'] && !(typeof data['SaleToAcquirerData'] === 'string' || data['SaleToAcquirerData'] instanceof String)) {
            throw new Error("Expected the field `SaleToAcquirerData` to be a primitive type in the JSON string but got " + data['SaleToAcquirerData']);
        }
        // validate the optional field `SaleToIssuerData`
        if (data['SaleToIssuerData']) { // data not null
          SaleToIssuerData.validateJSON(data['SaleToIssuerData']);
        }
        // ensure the json data is a string
        if (data['SaleToPOIData'] && !(typeof data['SaleToPOIData'] === 'string' || data['SaleToPOIData'] instanceof String)) {
            throw new Error("Expected the field `SaleToPOIData` to be a primitive type in the JSON string but got " + data['SaleToPOIData']);
        }
        // validate the optional field `SaleTransactionID`
        if (data['SaleTransactionID']) { // data not null
          TransactionIDType.validateJSON(data['SaleTransactionID']);
        }
        // ensure the json data is a string
        if (data['ShiftNumber'] && !(typeof data['ShiftNumber'] === 'string' || data['ShiftNumber'] instanceof String)) {
            throw new Error("Expected the field `ShiftNumber` to be a primitive type in the JSON string but got " + data['ShiftNumber']);
        }

        return true;
    }


}

SaleData.RequiredProperties = ["SaleTransactionID"];

/**
 * Additional and optional identification of a customer order.
 * @member {String} CustomerOrderID
 */
SaleData.prototype['CustomerOrderID'] = undefined;

/**
 * @member {Array.<module:model/SaleData.CustomerOrderReqEnum>} CustomerOrderReq
 */
SaleData.prototype['CustomerOrderReq'] = undefined;

/**
 * @member {String} OperatorID
 */
SaleData.prototype['OperatorID'] = undefined;

/**
 * if different from the Login.
 * @member {String} OperatorLanguage
 */
SaleData.prototype['OperatorLanguage'] = undefined;

/**
 * If payment reservation.
 * @member {String} SaleReferenceID
 */
SaleData.prototype['SaleReferenceID'] = undefined;

/**
 * @member {module:model/SaleTerminalData} SaleTerminalData
 */
SaleData.prototype['SaleTerminalData'] = undefined;

/**
 * Send to the Acquirer if present.
 * @member {String} SaleToAcquirerData
 */
SaleData.prototype['SaleToAcquirerData'] = undefined;

/**
 * @member {module:model/SaleToIssuerData} SaleToIssuerData
 */
SaleData.prototype['SaleToIssuerData'] = undefined;

/**
 * Stored with the transaction.
 * @member {String} SaleToPOIData
 */
SaleData.prototype['SaleToPOIData'] = undefined;

/**
 * @member {module:model/TransactionIDType} SaleTransactionID
 */
SaleData.prototype['SaleTransactionID'] = undefined;

/**
 * if different from the Login and  see Login .SaleData.
 * @member {String} ShiftNumber
 */
SaleData.prototype['ShiftNumber'] = undefined;

/**
 * @member {module:model/TokenRequestedType} TokenRequestedType
 */
SaleData.prototype['TokenRequestedType'] = undefined;





/**
 * Allowed values for the <code>customerOrderReq</code> property.
 * @enum {String}
 * @readonly
 */
SaleData['CustomerOrderReqEnum'] = {

    /**
     * value: "Both"
     * @const
     */
    "Both": "Both",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Open"
     * @const
     */
    "Open": "Open"
};



export default SaleData;

