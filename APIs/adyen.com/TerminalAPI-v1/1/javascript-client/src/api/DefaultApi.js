/**
 * Adyen Terminal API
 * The Adyen Terminal API lets you make payments, issue refunds, collect shopper information, and perform other shopper-terminal interactions using a payment terminal supplied by Adyen.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AdminRequest from '../model/AdminRequest';
import AdminResponse from '../model/AdminResponse';
import BalanceInquiryRequest from '../model/BalanceInquiryRequest';
import BalanceInquiryResponse from '../model/BalanceInquiryResponse';
import CardAcquisitionRequest from '../model/CardAcquisitionRequest';
import CardAcquisitionResponse from '../model/CardAcquisitionResponse';
import CardReaderAPDURequest from '../model/CardReaderAPDURequest';
import CardReaderAPDUResponse from '../model/CardReaderAPDUResponse';
import DiagnosisRequest from '../model/DiagnosisRequest';
import DiagnosisResponse from '../model/DiagnosisResponse';
import DisplayRequest from '../model/DisplayRequest';
import DisplayResponse from '../model/DisplayResponse';
import EnableServiceRequest from '../model/EnableServiceRequest';
import EnableServiceResponse from '../model/EnableServiceResponse';
import GetTotalsRequest from '../model/GetTotalsRequest';
import GetTotalsResponse from '../model/GetTotalsResponse';
import InputRequest from '../model/InputRequest';
import InputResponse from '../model/InputResponse';
import LoginRequest from '../model/LoginRequest';
import LoginResponse from '../model/LoginResponse';
import LogoutRequest from '../model/LogoutRequest';
import LogoutResponse from '../model/LogoutResponse';
import LoyaltyRequest from '../model/LoyaltyRequest';
import LoyaltyResponse from '../model/LoyaltyResponse';
import PaymentRequest from '../model/PaymentRequest';
import PaymentResponse from '../model/PaymentResponse';
import PrintRequest from '../model/PrintRequest';
import PrintResponse from '../model/PrintResponse';
import ReconciliationRequest from '../model/ReconciliationRequest';
import ReconciliationResponse from '../model/ReconciliationResponse';
import ReversalRequest from '../model/ReversalRequest';
import ReversalResponse from '../model/ReversalResponse';
import StoredValueRequest from '../model/StoredValueRequest';
import StoredValueResponse from '../model/StoredValueResponse';
import TransactionStatusRequest from '../model/TransactionStatusRequest';
import TransactionStatusResponse from '../model/TransactionStatusResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the adminPost operation.
     * @callback module:api/DefaultApi~adminPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Admin Request
     * Empty. Content of the Custom Admin Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/AdminRequest} [adminRequest] 
     * @param {module:api/DefaultApi~adminPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminResponse}
     */
    adminPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['adminRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AdminResponse;
      return this.apiClient.callApi(
        '/admin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the balanceinquiryPost operation.
     * @callback module:api/DefaultApi~balanceinquiryPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BalanceInquiryResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * BalanceInquiry Request
     * It conveys Information related to the account for which a Balance Inquiry is requested. Content of the Balance Inquiry Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/BalanceInquiryRequest} [balanceInquiryRequest] 
     * @param {module:api/DefaultApi~balanceinquiryPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BalanceInquiryResponse}
     */
    balanceinquiryPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['balanceInquiryRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BalanceInquiryResponse;
      return this.apiClient.callApi(
        '/balanceinquiry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardacquisitionPost operation.
     * @callback module:api/DefaultApi~cardacquisitionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardAcquisitionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CardAcquisition Request
     * It conveys Information related to the payment and loyalty cards to read and analyse. This message pair is usually followed by a message pair (e.g. payment or loyalty) which refers to this Card Acquisition message pair. Content of the Card Acquisition Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/CardAcquisitionRequest} [cardAcquisitionRequest] 
     * @param {module:api/DefaultApi~cardacquisitionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardAcquisitionResponse}
     */
    cardacquisitionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['cardAcquisitionRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardAcquisitionResponse;
      return this.apiClient.callApi(
        '/cardacquisition', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cardreaderapduPost operation.
     * @callback module:api/DefaultApi~cardreaderapduPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CardReaderAPDUResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * CardReaderAPDU Request
     * It contains the APDU request to send to the chip of the card, and a possible invitation message to display on the CashierInterface or the CustomerInterface. Content of the Card Reader APDU Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/CardReaderAPDURequest} [cardReaderAPDURequest] 
     * @param {module:api/DefaultApi~cardreaderapduPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CardReaderAPDUResponse}
     */
    cardreaderapduPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['cardReaderAPDURequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CardReaderAPDUResponse;
      return this.apiClient.callApi(
        '/cardreaderapdu', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the diagnosisPost operation.
     * @callback module:api/DefaultApi~diagnosisPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DiagnosisResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Diagnosis Request
     * It conveys Information related to the target POI for which the diagnosis is requested. Content of the Diagnosis Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/DiagnosisRequest} [diagnosisRequest] 
     * @param {module:api/DefaultApi~diagnosisPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DiagnosisResponse}
     */
    diagnosisPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['diagnosisRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DiagnosisResponse;
      return this.apiClient.callApi(
        '/diagnosis', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the displayPost operation.
     * @callback module:api/DefaultApi~displayPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisplayResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Display Request
     * It conveys the data to display and the way to process the display. It contains the complete content to display. It might contain an operation (the DisplayOutput element) per Display Device type. Content of the Display Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/DisplayRequest} [displayRequest] 
     * @param {module:api/DefaultApi~displayPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisplayResponse}
     */
    displayPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['displayRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DisplayResponse;
      return this.apiClient.callApi(
        '/display', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableservicePost operation.
     * @callback module:api/DefaultApi~enableservicePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EnableServiceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * EnableService Request
     * It conveys the services that will be enabled for the  POI Terminal without the request of the Sale System, and a possible invitation for the Customer to start the services. Content of the Enable Service Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/EnableServiceRequest} [enableServiceRequest] 
     * @param {module:api/DefaultApi~enableservicePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EnableServiceResponse}
     */
    enableservicePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['enableServiceRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EnableServiceResponse;
      return this.apiClient.callApi(
        '/enableservice', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the gettotalsPost operation.
     * @callback module:api/DefaultApi~gettotalsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTotalsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetTotals Request
     * It conveys information from the Sale System related to the scope and the format of the totals to be computed by the POI System. Content of the Get Totals Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTotalsRequest} [getTotalsRequest] 
     * @param {module:api/DefaultApi~gettotalsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTotalsResponse}
     */
    gettotalsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['getTotalsRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTotalsResponse;
      return this.apiClient.callApi(
        '/gettotals', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inputPost operation.
     * @callback module:api/DefaultApi~inputPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InputResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Input Request
     * It conveys data to display and the way to process the display, and contains the complete content to display. In addition to the display on the Input Device, it might contain an operation (the DisplayOutput element) per Display Device type. Content of the Input Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/InputRequest} [inputRequest] 
     * @param {module:api/DefaultApi~inputPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InputResponse}
     */
    inputPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['inputRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InputResponse;
      return this.apiClient.callApi(
        '/input', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPost operation.
     * @callback module:api/DefaultApi~loginPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login Request
     * It conveys Information related to the session (period between a Login and the following Logout) to process. Content of the Login Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginRequest} [loginRequest] 
     * @param {module:api/DefaultApi~loginPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginResponse}
     */
    loginPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['loginRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoginResponse;
      return this.apiClient.callApi(
        '/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logoutPost operation.
     * @callback module:api/DefaultApi~logoutPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LogoutResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Logout Request
     * Empty. Content of the Logout Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/LogoutRequest} [logoutRequest] 
     * @param {module:api/DefaultApi~logoutPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LogoutResponse}
     */
    logoutPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['logoutRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LogoutResponse;
      return this.apiClient.callApi(
        '/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loyaltyPost operation.
     * @callback module:api/DefaultApi~loyaltyPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoyaltyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loyalty Request
     * It conveys Information related to the Loyalty transaction to process. Content of the Loyalty Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/LoyaltyRequest} [loyaltyRequest] 
     * @param {module:api/DefaultApi~loyaltyPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoyaltyResponse}
     */
    loyaltyPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['loyaltyRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LoyaltyResponse;
      return this.apiClient.callApi(
        '/loyalty', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentPost operation.
     * @callback module:api/DefaultApi~paymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Payment Request
     * Request sent to terminal to initiate payment.  It conveys Information related to the Payment transaction to process. Content of the Payment Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentRequest} [paymentRequest] 
     * @param {module:api/DefaultApi~paymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PaymentResponse}
     */
    paymentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['paymentRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentResponse;
      return this.apiClient.callApi(
        '/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the printPost operation.
     * @callback module:api/DefaultApi~printPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PrintResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Print Request
     * It conveys the data to print and the way to process the print. It contains the complete content to print. Content of the Print Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/PrintRequest} [printRequest] 
     * @param {module:api/DefaultApi~printPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PrintResponse}
     */
    printPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['printRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PrintResponse;
      return this.apiClient.callApi(
        '/print', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reconciliationPost operation.
     * @callback module:api/DefaultApi~reconciliationPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReconciliationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reconciliation Request
     * It conveys Information related to the Reconciliation requested by the Sale System. Content of the Reconciliation Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReconciliationRequest} [reconciliationRequest] 
     * @param {module:api/DefaultApi~reconciliationPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReconciliationResponse}
     */
    reconciliationPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['reconciliationRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReconciliationResponse;
      return this.apiClient.callApi(
        '/reconciliation', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reversalPost operation.
     * @callback module:api/DefaultApi~reversalPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReversalResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reversal Request
     * It conveys Information related to the reversal of a previous payment or a loyalty transaction. Content of the Reversal Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/ReversalRequest} [reversalRequest] 
     * @param {module:api/DefaultApi~reversalPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReversalResponse}
     */
    reversalPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['reversalRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReversalResponse;
      return this.apiClient.callApi(
        '/reversal', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the storedvaluePost operation.
     * @callback module:api/DefaultApi~storedvaluePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StoredValueResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * StoredValue Request
     * It conveys Information related to the Stored Value transaction to process. Content of the Stored Value Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/StoredValueRequest} [storedValueRequest] 
     * @param {module:api/DefaultApi~storedvaluePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StoredValueResponse}
     */
    storedvaluePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['storedValueRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoredValueResponse;
      return this.apiClient.callApi(
        '/storedvalue', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the transactionstatusPost operation.
     * @callback module:api/DefaultApi~transactionstatusPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * TransactionStatus Request
     * It conveys Information requested for status of the last or current Payment, Loyalty or Reversal transaction. Content of the TransactionStatus Request message.
     * @param {Object} opts Optional parameters
     * @param {module:model/TransactionStatusRequest} [transactionStatusRequest] 
     * @param {module:api/DefaultApi~transactionstatusPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionStatusResponse}
     */
    transactionstatusPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['transactionStatusRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TransactionStatusResponse;
      return this.apiClient.callApi(
        '/transactionstatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
