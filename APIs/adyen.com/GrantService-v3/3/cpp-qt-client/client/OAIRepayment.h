/**
 * Capital API
 * Adyen Capital allows you to build an embedded financing offering for your users to serve their operational needs. Learn more about [Adyen Capital](https://docs.adyen.com/marketplaces-and-platforms/capital).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Capital API, you need an additional role for your API credential. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Capital API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/grants ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRepayment.h
 *
 * 
 */

#ifndef OAIRepayment_H
#define OAIRepayment_H

#include <QJsonObject>

#include "OAIRepaymentTerm.h"
#include "OAIThresholdRepayment.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRepaymentTerm;
class OAIThresholdRepayment;

class OAIRepayment : public OAIObject {
public:
    OAIRepayment();
    OAIRepayment(QString json);
    ~OAIRepayment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBasisPoints() const;
    void setBasisPoints(const qint32 &basis_points);
    bool is_basis_points_Set() const;
    bool is_basis_points_Valid() const;

    OAIRepaymentTerm getTerm() const;
    void setTerm(const OAIRepaymentTerm &term);
    bool is_term_Set() const;
    bool is_term_Valid() const;

    OAIThresholdRepayment getThreshold() const;
    void setThreshold(const OAIThresholdRepayment &threshold);
    bool is_threshold_Set() const;
    bool is_threshold_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_basis_points;
    bool m_basis_points_isSet;
    bool m_basis_points_isValid;

    OAIRepaymentTerm m_term;
    bool m_term_isSet;
    bool m_term_isValid;

    OAIThresholdRepayment m_threshold;
    bool m_threshold_isSet;
    bool m_threshold_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRepayment)

#endif // OAIRepayment_H
