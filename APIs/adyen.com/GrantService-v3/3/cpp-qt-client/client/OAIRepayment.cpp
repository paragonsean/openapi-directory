/**
 * Capital API
 * Adyen Capital allows you to build an embedded financing offering for your users to serve their operational needs. Learn more about [Adyen Capital](https://docs.adyen.com/marketplaces-and-platforms/capital).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Capital API, you need an additional role for your API credential. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Capital API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/grants ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepayment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepayment::OAIRepayment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepayment::OAIRepayment() {
    this->initializeModel();
}

OAIRepayment::~OAIRepayment() {}

void OAIRepayment::initializeModel() {

    m_basis_points_isSet = false;
    m_basis_points_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_threshold_isSet = false;
    m_threshold_isValid = false;
}

void OAIRepayment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepayment::fromJsonObject(QJsonObject json) {

    m_basis_points_isValid = ::OpenAPI::fromJsonValue(m_basis_points, json[QString("basisPoints")]);
    m_basis_points_isSet = !json[QString("basisPoints")].isNull() && m_basis_points_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_threshold_isValid = ::OpenAPI::fromJsonValue(m_threshold, json[QString("threshold")]);
    m_threshold_isSet = !json[QString("threshold")].isNull() && m_threshold_isValid;
}

QString OAIRepayment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepayment::asJsonObject() const {
    QJsonObject obj;
    if (m_basis_points_isSet) {
        obj.insert(QString("basisPoints"), ::OpenAPI::toJsonValue(m_basis_points));
    }
    if (m_term.isSet()) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_threshold.isSet()) {
        obj.insert(QString("threshold"), ::OpenAPI::toJsonValue(m_threshold));
    }
    return obj;
}

qint32 OAIRepayment::getBasisPoints() const {
    return m_basis_points;
}
void OAIRepayment::setBasisPoints(const qint32 &basis_points) {
    m_basis_points = basis_points;
    m_basis_points_isSet = true;
}

bool OAIRepayment::is_basis_points_Set() const{
    return m_basis_points_isSet;
}

bool OAIRepayment::is_basis_points_Valid() const{
    return m_basis_points_isValid;
}

OAIRepaymentTerm OAIRepayment::getTerm() const {
    return m_term;
}
void OAIRepayment::setTerm(const OAIRepaymentTerm &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIRepayment::is_term_Set() const{
    return m_term_isSet;
}

bool OAIRepayment::is_term_Valid() const{
    return m_term_isValid;
}

OAIThresholdRepayment OAIRepayment::getThreshold() const {
    return m_threshold;
}
void OAIRepayment::setThreshold(const OAIThresholdRepayment &threshold) {
    m_threshold = threshold;
    m_threshold_isSet = true;
}

bool OAIRepayment::is_threshold_Set() const{
    return m_threshold_isSet;
}

bool OAIRepayment::is_threshold_Valid() const{
    return m_threshold_isValid;
}

bool OAIRepayment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_basis_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_threshold.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepayment::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_basis_points_isValid && true;
}

} // namespace OpenAPI
