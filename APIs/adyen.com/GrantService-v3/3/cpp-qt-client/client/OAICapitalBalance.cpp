/**
 * Capital API
 * Adyen Capital allows you to build an embedded financing offering for your users to serve their operational needs. Learn more about [Adyen Capital](https://docs.adyen.com/marketplaces-and-platforms/capital).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Capital API, you need an additional role for your API credential. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Capital API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/grants ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICapitalBalance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICapitalBalance::OAICapitalBalance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICapitalBalance::OAICapitalBalance() {
    this->initializeModel();
}

OAICapitalBalance::~OAICapitalBalance() {}

void OAICapitalBalance::initializeModel() {

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_fee_isSet = false;
    m_fee_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAICapitalBalance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICapitalBalance::fromJsonObject(QJsonObject json) {

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_fee_isValid = ::OpenAPI::fromJsonValue(m_fee, json[QString("fee")]);
    m_fee_isSet = !json[QString("fee")].isNull() && m_fee_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAICapitalBalance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICapitalBalance::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_fee_isSet) {
        obj.insert(QString("fee"), ::OpenAPI::toJsonValue(m_fee));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAICapitalBalance::getCurrency() const {
    return m_currency;
}
void OAICapitalBalance::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICapitalBalance::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICapitalBalance::is_currency_Valid() const{
    return m_currency_isValid;
}

qint64 OAICapitalBalance::getFee() const {
    return m_fee;
}
void OAICapitalBalance::setFee(const qint64 &fee) {
    m_fee = fee;
    m_fee_isSet = true;
}

bool OAICapitalBalance::is_fee_Set() const{
    return m_fee_isSet;
}

bool OAICapitalBalance::is_fee_Valid() const{
    return m_fee_isValid;
}

qint64 OAICapitalBalance::getPrincipal() const {
    return m_principal;
}
void OAICapitalBalance::setPrincipal(const qint64 &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAICapitalBalance::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAICapitalBalance::is_principal_Valid() const{
    return m_principal_isValid;
}

qint64 OAICapitalBalance::getTotal() const {
    return m_total;
}
void OAICapitalBalance::setTotal(const qint64 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAICapitalBalance::is_total_Set() const{
    return m_total_isSet;
}

bool OAICapitalBalance::is_total_Valid() const{
    return m_total_isValid;
}

bool OAICapitalBalance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICapitalBalance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_isValid && m_fee_isValid && m_principal_isValid && m_total_isValid && true;
}

} // namespace OpenAPI
