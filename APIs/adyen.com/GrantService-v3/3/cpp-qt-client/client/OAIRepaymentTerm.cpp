/**
 * Capital API
 * Adyen Capital allows you to build an embedded financing offering for your users to serve their operational needs. Learn more about [Adyen Capital](https://docs.adyen.com/marketplaces-and-platforms/capital).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Capital API, you need an additional role for your API credential. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Capital API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/grants ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRepaymentTerm.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRepaymentTerm::OAIRepaymentTerm(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRepaymentTerm::OAIRepaymentTerm() {
    this->initializeModel();
}

OAIRepaymentTerm::~OAIRepaymentTerm() {}

void OAIRepaymentTerm::initializeModel() {

    m_estimated_days_isSet = false;
    m_estimated_days_isValid = false;

    m_maximum_days_isSet = false;
    m_maximum_days_isValid = false;
}

void OAIRepaymentTerm::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRepaymentTerm::fromJsonObject(QJsonObject json) {

    m_estimated_days_isValid = ::OpenAPI::fromJsonValue(m_estimated_days, json[QString("estimatedDays")]);
    m_estimated_days_isSet = !json[QString("estimatedDays")].isNull() && m_estimated_days_isValid;

    m_maximum_days_isValid = ::OpenAPI::fromJsonValue(m_maximum_days, json[QString("maximumDays")]);
    m_maximum_days_isSet = !json[QString("maximumDays")].isNull() && m_maximum_days_isValid;
}

QString OAIRepaymentTerm::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRepaymentTerm::asJsonObject() const {
    QJsonObject obj;
    if (m_estimated_days_isSet) {
        obj.insert(QString("estimatedDays"), ::OpenAPI::toJsonValue(m_estimated_days));
    }
    if (m_maximum_days_isSet) {
        obj.insert(QString("maximumDays"), ::OpenAPI::toJsonValue(m_maximum_days));
    }
    return obj;
}

qint32 OAIRepaymentTerm::getEstimatedDays() const {
    return m_estimated_days;
}
void OAIRepaymentTerm::setEstimatedDays(const qint32 &estimated_days) {
    m_estimated_days = estimated_days;
    m_estimated_days_isSet = true;
}

bool OAIRepaymentTerm::is_estimated_days_Set() const{
    return m_estimated_days_isSet;
}

bool OAIRepaymentTerm::is_estimated_days_Valid() const{
    return m_estimated_days_isValid;
}

qint32 OAIRepaymentTerm::getMaximumDays() const {
    return m_maximum_days;
}
void OAIRepaymentTerm::setMaximumDays(const qint32 &maximum_days) {
    m_maximum_days = maximum_days;
    m_maximum_days_isSet = true;
}

bool OAIRepaymentTerm::is_maximum_days_Set() const{
    return m_maximum_days_isSet;
}

bool OAIRepaymentTerm::is_maximum_days_Valid() const{
    return m_maximum_days_isValid;
}

bool OAIRepaymentTerm::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimated_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRepaymentTerm::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_estimated_days_isValid && true;
}

} // namespace OpenAPI
