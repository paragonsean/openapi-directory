/**
 * Capital API
 * Adyen Capital allows you to build an embedded financing offering for your users to serve their operational needs. Learn more about [Adyen Capital](https://docs.adyen.com/marketplaces-and-platforms/capital).  ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -H \"Content-Type: application/json\" \\ -U \"ws@BalancePlatform.YOUR_BALANCE_PLATFORM\":\"YOUR_WS_PASSWORD\" \\ ... ``` ## Roles and permissions To use the Capital API, you need an additional role for your API credential. Your Adyen contact will set up the roles and permissions for you. ## Versioning The Capital API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://balanceplatform-api-test.adyen.com/btl/v3/grants ``` ## Going live When going live, your Adyen contact will provide your API credential for the live environment. You can then use the username and password to send requests to `https://balanceplatform-api-live.adyen.com/btl/v3`.  
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import CapitalBalance from './CapitalBalance';
import Counterparty from './Counterparty';
import Fee from './Fee';
import Repayment from './Repayment';

/**
 * The CapitalGrant model module.
 * @module model/CapitalGrant
 * @version 3
 */
class CapitalGrant {
    /**
     * Constructs a new <code>CapitalGrant</code>.
     * @alias module:model/CapitalGrant
     * @param balances {module:model/CapitalBalance} An object containing the details of the existing grant.
     * @param grantAccountId {String} The identifier of the grant account used for the grant.
     * @param grantOfferId {String} The identifier of the grant offer that has been selected and from which the grant details will be used.
     * @param id {String} The identifier of the grant reference.
     * @param status {module:model/CapitalGrant.StatusEnum} The current status of the grant. Possible values: **Pending**, **Active**, **Repaid**.
     */
    constructor(balances, grantAccountId, grantOfferId, id, status) { 
        
        CapitalGrant.initialize(this, balances, grantAccountId, grantOfferId, id, status);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, balances, grantAccountId, grantOfferId, id, status) { 
        obj['balances'] = balances;
        obj['grantAccountId'] = grantAccountId;
        obj['grantOfferId'] = grantOfferId;
        obj['id'] = id;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>CapitalGrant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CapitalGrant} obj Optional instance to populate.
     * @return {module:model/CapitalGrant} The populated <code>CapitalGrant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CapitalGrant();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('balances')) {
                obj['balances'] = CapitalBalance.constructFromObject(data['balances']);
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = Counterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('fee')) {
                obj['fee'] = Fee.constructFromObject(data['fee']);
            }
            if (data.hasOwnProperty('grantAccountId')) {
                obj['grantAccountId'] = ApiClient.convertToType(data['grantAccountId'], 'String');
            }
            if (data.hasOwnProperty('grantOfferId')) {
                obj['grantOfferId'] = ApiClient.convertToType(data['grantOfferId'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('repayment')) {
                obj['repayment'] = Repayment.constructFromObject(data['repayment']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CapitalGrant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CapitalGrant</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CapitalGrant.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `balances`
        if (data['balances']) { // data not null
          CapitalBalance.validateJSON(data['balances']);
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          Counterparty.validateJSON(data['counterparty']);
        }
        // validate the optional field `fee`
        if (data['fee']) { // data not null
          Fee.validateJSON(data['fee']);
        }
        // ensure the json data is a string
        if (data['grantAccountId'] && !(typeof data['grantAccountId'] === 'string' || data['grantAccountId'] instanceof String)) {
            throw new Error("Expected the field `grantAccountId` to be a primitive type in the JSON string but got " + data['grantAccountId']);
        }
        // ensure the json data is a string
        if (data['grantOfferId'] && !(typeof data['grantOfferId'] === 'string' || data['grantOfferId'] instanceof String)) {
            throw new Error("Expected the field `grantOfferId` to be a primitive type in the JSON string but got " + data['grantOfferId']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `repayment`
        if (data['repayment']) { // data not null
          Repayment.validateJSON(data['repayment']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

CapitalGrant.RequiredProperties = ["balances", "grantAccountId", "grantOfferId", "id", "status"];

/**
 * An object containing the amount of the grant, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
 * @member {module:model/Amount} amount
 */
CapitalGrant.prototype['amount'] = undefined;

/**
 * An object containing the details of the existing grant.
 * @member {module:model/CapitalBalance} balances
 */
CapitalGrant.prototype['balances'] = undefined;

/**
 * An object containing the details of the receiving party of the grant. Setting either an `accountHolderId`, `balanceAccountId`, or both is required.
 * @member {module:model/Counterparty} counterparty
 */
CapitalGrant.prototype['counterparty'] = undefined;

/**
 * An object containing the fee currency and value, in [minor units](https://docs.adyen.com/development-resources/currency-codes).
 * @member {module:model/Fee} fee
 */
CapitalGrant.prototype['fee'] = undefined;

/**
 * The identifier of the grant account used for the grant.
 * @member {String} grantAccountId
 */
CapitalGrant.prototype['grantAccountId'] = undefined;

/**
 * The identifier of the grant offer that has been selected and from which the grant details will be used.
 * @member {String} grantOfferId
 */
CapitalGrant.prototype['grantOfferId'] = undefined;

/**
 * The identifier of the grant reference.
 * @member {String} id
 */
CapitalGrant.prototype['id'] = undefined;

/**
 * An object containing the details of the 30-day repayment threshold.
 * @member {module:model/Repayment} repayment
 */
CapitalGrant.prototype['repayment'] = undefined;

/**
 * The current status of the grant. Possible values: **Pending**, **Active**, **Repaid**.
 * @member {module:model/CapitalGrant.StatusEnum} status
 */
CapitalGrant.prototype['status'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
CapitalGrant['StatusEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Repaid"
     * @const
     */
    "Repaid": "Repaid"
};



export default CapitalGrant;

