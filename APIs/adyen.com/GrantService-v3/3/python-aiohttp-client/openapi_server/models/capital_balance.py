# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CapitalBalance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency: str=None, fee: int=None, principal: int=None, total: int=None):
        """CapitalBalance - a model defined in OpenAPI

        :param currency: The currency of this CapitalBalance.
        :param fee: The fee of this CapitalBalance.
        :param principal: The principal of this CapitalBalance.
        :param total: The total of this CapitalBalance.
        """
        self.openapi_types = {
            'currency': str,
            'fee': int,
            'principal': int,
            'total': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'fee': 'fee',
            'principal': 'principal',
            'total': 'total'
        }

        self._currency = currency
        self._fee = fee
        self._principal = principal
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapitalBalance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapitalBalance of this CapitalBalance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self):
        """Gets the currency of this CapitalBalance.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :return: The currency of this CapitalBalance.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CapitalBalance.

        The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes).

        :param currency: The currency of this CapitalBalance.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def fee(self):
        """Gets the fee of this CapitalBalance.

        Fee amount.

        :return: The fee of this CapitalBalance.
        :rtype: int
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this CapitalBalance.

        Fee amount.

        :param fee: The fee of this CapitalBalance.
        :type fee: int
        """
        if fee is None:
            raise ValueError("Invalid value for `fee`, must not be `None`")

        self._fee = fee

    @property
    def principal(self):
        """Gets the principal of this CapitalBalance.

        Principal amount.

        :return: The principal of this CapitalBalance.
        :rtype: int
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this CapitalBalance.

        Principal amount.

        :param principal: The principal of this CapitalBalance.
        :type principal: int
        """
        if principal is None:
            raise ValueError("Invalid value for `principal`, must not be `None`")

        self._principal = principal

    @property
    def total(self):
        """Gets the total of this CapitalBalance.

        Total amount. A sum of principal amount and fee amount.

        :return: The total of this CapitalBalance.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this CapitalBalance.

        Total amount. A sum of principal amount and fee amount.

        :param total: The total of this CapitalBalance.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")

        self._total = total
