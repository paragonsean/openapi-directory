# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.capital_balance import CapitalBalance
from openapi_server.models.counterparty import Counterparty
from openapi_server.models.fee import Fee
from openapi_server.models.repayment import Repayment
from openapi_server import util


class CapitalGrant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, balances: CapitalBalance=None, counterparty: Counterparty=None, fee: Fee=None, grant_account_id: str=None, grant_offer_id: str=None, id: str=None, repayment: Repayment=None, status: str=None):
        """CapitalGrant - a model defined in OpenAPI

        :param amount: The amount of this CapitalGrant.
        :param balances: The balances of this CapitalGrant.
        :param counterparty: The counterparty of this CapitalGrant.
        :param fee: The fee of this CapitalGrant.
        :param grant_account_id: The grant_account_id of this CapitalGrant.
        :param grant_offer_id: The grant_offer_id of this CapitalGrant.
        :param id: The id of this CapitalGrant.
        :param repayment: The repayment of this CapitalGrant.
        :param status: The status of this CapitalGrant.
        """
        self.openapi_types = {
            'amount': Amount,
            'balances': CapitalBalance,
            'counterparty': Counterparty,
            'fee': Fee,
            'grant_account_id': str,
            'grant_offer_id': str,
            'id': str,
            'repayment': Repayment,
            'status': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'balances': 'balances',
            'counterparty': 'counterparty',
            'fee': 'fee',
            'grant_account_id': 'grantAccountId',
            'grant_offer_id': 'grantOfferId',
            'id': 'id',
            'repayment': 'repayment',
            'status': 'status'
        }

        self._amount = amount
        self._balances = balances
        self._counterparty = counterparty
        self._fee = fee
        self._grant_account_id = grant_account_id
        self._grant_offer_id = grant_offer_id
        self._id = id
        self._repayment = repayment
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CapitalGrant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CapitalGrant of this CapitalGrant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CapitalGrant.

        An object containing the amount of the grant, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The amount of this CapitalGrant.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CapitalGrant.

        An object containing the amount of the grant, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param amount: The amount of this CapitalGrant.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def balances(self):
        """Gets the balances of this CapitalGrant.

        An object containing the details of the existing grant.

        :return: The balances of this CapitalGrant.
        :rtype: CapitalBalance
        """
        return self._balances

    @balances.setter
    def balances(self, balances):
        """Sets the balances of this CapitalGrant.

        An object containing the details of the existing grant.

        :param balances: The balances of this CapitalGrant.
        :type balances: CapitalBalance
        """
        if balances is None:
            raise ValueError("Invalid value for `balances`, must not be `None`")

        self._balances = balances

    @property
    def counterparty(self):
        """Gets the counterparty of this CapitalGrant.

        An object containing the details of the receiving party of the grant. Setting either an `accountHolderId`, `balanceAccountId`, or both is required.

        :return: The counterparty of this CapitalGrant.
        :rtype: Counterparty
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this CapitalGrant.

        An object containing the details of the receiving party of the grant. Setting either an `accountHolderId`, `balanceAccountId`, or both is required.

        :param counterparty: The counterparty of this CapitalGrant.
        :type counterparty: Counterparty
        """

        self._counterparty = counterparty

    @property
    def fee(self):
        """Gets the fee of this CapitalGrant.

        An object containing the fee currency and value, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :return: The fee of this CapitalGrant.
        :rtype: Fee
        """
        return self._fee

    @fee.setter
    def fee(self, fee):
        """Sets the fee of this CapitalGrant.

        An object containing the fee currency and value, in [minor units](https://docs.adyen.com/development-resources/currency-codes).

        :param fee: The fee of this CapitalGrant.
        :type fee: Fee
        """

        self._fee = fee

    @property
    def grant_account_id(self):
        """Gets the grant_account_id of this CapitalGrant.

        The identifier of the grant account used for the grant.

        :return: The grant_account_id of this CapitalGrant.
        :rtype: str
        """
        return self._grant_account_id

    @grant_account_id.setter
    def grant_account_id(self, grant_account_id):
        """Sets the grant_account_id of this CapitalGrant.

        The identifier of the grant account used for the grant.

        :param grant_account_id: The grant_account_id of this CapitalGrant.
        :type grant_account_id: str
        """
        if grant_account_id is None:
            raise ValueError("Invalid value for `grant_account_id`, must not be `None`")

        self._grant_account_id = grant_account_id

    @property
    def grant_offer_id(self):
        """Gets the grant_offer_id of this CapitalGrant.

        The identifier of the grant offer that has been selected and from which the grant details will be used.

        :return: The grant_offer_id of this CapitalGrant.
        :rtype: str
        """
        return self._grant_offer_id

    @grant_offer_id.setter
    def grant_offer_id(self, grant_offer_id):
        """Sets the grant_offer_id of this CapitalGrant.

        The identifier of the grant offer that has been selected and from which the grant details will be used.

        :param grant_offer_id: The grant_offer_id of this CapitalGrant.
        :type grant_offer_id: str
        """
        if grant_offer_id is None:
            raise ValueError("Invalid value for `grant_offer_id`, must not be `None`")

        self._grant_offer_id = grant_offer_id

    @property
    def id(self):
        """Gets the id of this CapitalGrant.

        The identifier of the grant reference.

        :return: The id of this CapitalGrant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CapitalGrant.

        The identifier of the grant reference.

        :param id: The id of this CapitalGrant.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def repayment(self):
        """Gets the repayment of this CapitalGrant.

        An object containing the details of the 30-day repayment threshold.

        :return: The repayment of this CapitalGrant.
        :rtype: Repayment
        """
        return self._repayment

    @repayment.setter
    def repayment(self, repayment):
        """Sets the repayment of this CapitalGrant.

        An object containing the details of the 30-day repayment threshold.

        :param repayment: The repayment of this CapitalGrant.
        :type repayment: Repayment
        """

        self._repayment = repayment

    @property
    def status(self):
        """Gets the status of this CapitalGrant.

        The current status of the grant. Possible values: **Pending**, **Active**, **Repaid**.

        :return: The status of this CapitalGrant.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CapitalGrant.

        The current status of the grant. Possible values: **Pending**, **Active**, **Repaid**.

        :param status: The status of this CapitalGrant.
        :type status: str
        """
        allowed_values = ["Pending", "Active", "Repaid"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
