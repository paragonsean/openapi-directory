/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMigrationData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMigrationData::OAIMigrationData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMigrationData::OAIMigrationData() {
    this->initializeModel();
}

OAIMigrationData::~OAIMigrationData() {}

void OAIMigrationData::initializeModel() {

    m_account_holder_id_isSet = false;
    m_account_holder_id_isValid = false;

    m_balance_platform_isSet = false;
    m_balance_platform_isValid = false;

    m_migrated_isSet = false;
    m_migrated_isValid = false;

    m_migrated_accounts_isSet = false;
    m_migrated_accounts_isValid = false;

    m_migrated_shareholders_isSet = false;
    m_migrated_shareholders_isValid = false;

    m_migrated_stores_isSet = false;
    m_migrated_stores_isValid = false;

    m_migration_date_isSet = false;
    m_migration_date_isValid = false;
}

void OAIMigrationData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMigrationData::fromJsonObject(QJsonObject json) {

    m_account_holder_id_isValid = ::OpenAPI::fromJsonValue(m_account_holder_id, json[QString("accountHolderId")]);
    m_account_holder_id_isSet = !json[QString("accountHolderId")].isNull() && m_account_holder_id_isValid;

    m_balance_platform_isValid = ::OpenAPI::fromJsonValue(m_balance_platform, json[QString("balancePlatform")]);
    m_balance_platform_isSet = !json[QString("balancePlatform")].isNull() && m_balance_platform_isValid;

    m_migrated_isValid = ::OpenAPI::fromJsonValue(m_migrated, json[QString("migrated")]);
    m_migrated_isSet = !json[QString("migrated")].isNull() && m_migrated_isValid;

    m_migrated_accounts_isValid = ::OpenAPI::fromJsonValue(m_migrated_accounts, json[QString("migratedAccounts")]);
    m_migrated_accounts_isSet = !json[QString("migratedAccounts")].isNull() && m_migrated_accounts_isValid;

    m_migrated_shareholders_isValid = ::OpenAPI::fromJsonValue(m_migrated_shareholders, json[QString("migratedShareholders")]);
    m_migrated_shareholders_isSet = !json[QString("migratedShareholders")].isNull() && m_migrated_shareholders_isValid;

    m_migrated_stores_isValid = ::OpenAPI::fromJsonValue(m_migrated_stores, json[QString("migratedStores")]);
    m_migrated_stores_isSet = !json[QString("migratedStores")].isNull() && m_migrated_stores_isValid;

    m_migration_date_isValid = ::OpenAPI::fromJsonValue(m_migration_date, json[QString("migrationDate")]);
    m_migration_date_isSet = !json[QString("migrationDate")].isNull() && m_migration_date_isValid;
}

QString OAIMigrationData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMigrationData::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_id_isSet) {
        obj.insert(QString("accountHolderId"), ::OpenAPI::toJsonValue(m_account_holder_id));
    }
    if (m_balance_platform_isSet) {
        obj.insert(QString("balancePlatform"), ::OpenAPI::toJsonValue(m_balance_platform));
    }
    if (m_migrated_isSet) {
        obj.insert(QString("migrated"), ::OpenAPI::toJsonValue(m_migrated));
    }
    if (m_migrated_accounts.size() > 0) {
        obj.insert(QString("migratedAccounts"), ::OpenAPI::toJsonValue(m_migrated_accounts));
    }
    if (m_migrated_shareholders.size() > 0) {
        obj.insert(QString("migratedShareholders"), ::OpenAPI::toJsonValue(m_migrated_shareholders));
    }
    if (m_migrated_stores.size() > 0) {
        obj.insert(QString("migratedStores"), ::OpenAPI::toJsonValue(m_migrated_stores));
    }
    if (m_migration_date_isSet) {
        obj.insert(QString("migrationDate"), ::OpenAPI::toJsonValue(m_migration_date));
    }
    return obj;
}

QString OAIMigrationData::getAccountHolderId() const {
    return m_account_holder_id;
}
void OAIMigrationData::setAccountHolderId(const QString &account_holder_id) {
    m_account_holder_id = account_holder_id;
    m_account_holder_id_isSet = true;
}

bool OAIMigrationData::is_account_holder_id_Set() const{
    return m_account_holder_id_isSet;
}

bool OAIMigrationData::is_account_holder_id_Valid() const{
    return m_account_holder_id_isValid;
}

QString OAIMigrationData::getBalancePlatform() const {
    return m_balance_platform;
}
void OAIMigrationData::setBalancePlatform(const QString &balance_platform) {
    m_balance_platform = balance_platform;
    m_balance_platform_isSet = true;
}

bool OAIMigrationData::is_balance_platform_Set() const{
    return m_balance_platform_isSet;
}

bool OAIMigrationData::is_balance_platform_Valid() const{
    return m_balance_platform_isValid;
}

bool OAIMigrationData::isMigrated() const {
    return m_migrated;
}
void OAIMigrationData::setMigrated(const bool &migrated) {
    m_migrated = migrated;
    m_migrated_isSet = true;
}

bool OAIMigrationData::is_migrated_Set() const{
    return m_migrated_isSet;
}

bool OAIMigrationData::is_migrated_Valid() const{
    return m_migrated_isValid;
}

QList<OAIMigratedAccounts> OAIMigrationData::getMigratedAccounts() const {
    return m_migrated_accounts;
}
void OAIMigrationData::setMigratedAccounts(const QList<OAIMigratedAccounts> &migrated_accounts) {
    m_migrated_accounts = migrated_accounts;
    m_migrated_accounts_isSet = true;
}

bool OAIMigrationData::is_migrated_accounts_Set() const{
    return m_migrated_accounts_isSet;
}

bool OAIMigrationData::is_migrated_accounts_Valid() const{
    return m_migrated_accounts_isValid;
}

QList<OAIMigratedShareholders> OAIMigrationData::getMigratedShareholders() const {
    return m_migrated_shareholders;
}
void OAIMigrationData::setMigratedShareholders(const QList<OAIMigratedShareholders> &migrated_shareholders) {
    m_migrated_shareholders = migrated_shareholders;
    m_migrated_shareholders_isSet = true;
}

bool OAIMigrationData::is_migrated_shareholders_Set() const{
    return m_migrated_shareholders_isSet;
}

bool OAIMigrationData::is_migrated_shareholders_Valid() const{
    return m_migrated_shareholders_isValid;
}

QList<OAIMigratedStores> OAIMigrationData::getMigratedStores() const {
    return m_migrated_stores;
}
void OAIMigrationData::setMigratedStores(const QList<OAIMigratedStores> &migrated_stores) {
    m_migrated_stores = migrated_stores;
    m_migrated_stores_isSet = true;
}

bool OAIMigrationData::is_migrated_stores_Set() const{
    return m_migrated_stores_isSet;
}

bool OAIMigrationData::is_migrated_stores_Valid() const{
    return m_migrated_stores_isValid;
}

QDateTime OAIMigrationData::getMigrationDate() const {
    return m_migration_date;
}
void OAIMigrationData::setMigrationDate(const QDateTime &migration_date) {
    m_migration_date = migration_date;
    m_migration_date_isSet = true;
}

bool OAIMigrationData::is_migration_date_Set() const{
    return m_migration_date_isSet;
}

bool OAIMigrationData::is_migration_date_Valid() const{
    return m_migration_date_isValid;
}

bool OAIMigrationData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_balance_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_shareholders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_stores.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_migration_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMigrationData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
