/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccountRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccountRequest::OAICreateAccountRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccountRequest::OAICreateAccountRequest() {
    this->initializeModel();
}

OAICreateAccountRequest::~OAICreateAccountRequest() {}

void OAICreateAccountRequest::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_payout_method_code_isSet = false;
    m_payout_method_code_isValid = false;

    m_payout_schedule_isSet = false;
    m_payout_schedule_isValid = false;

    m_payout_schedule_reason_isSet = false;
    m_payout_schedule_reason_isValid = false;

    m_payout_speed_isSet = false;
    m_payout_speed_isValid = false;
}

void OAICreateAccountRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccountRequest::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_payout_method_code_isValid = ::OpenAPI::fromJsonValue(m_payout_method_code, json[QString("payoutMethodCode")]);
    m_payout_method_code_isSet = !json[QString("payoutMethodCode")].isNull() && m_payout_method_code_isValid;

    m_payout_schedule_isValid = ::OpenAPI::fromJsonValue(m_payout_schedule, json[QString("payoutSchedule")]);
    m_payout_schedule_isSet = !json[QString("payoutSchedule")].isNull() && m_payout_schedule_isValid;

    m_payout_schedule_reason_isValid = ::OpenAPI::fromJsonValue(m_payout_schedule_reason, json[QString("payoutScheduleReason")]);
    m_payout_schedule_reason_isSet = !json[QString("payoutScheduleReason")].isNull() && m_payout_schedule_reason_isValid;

    m_payout_speed_isValid = ::OpenAPI::fromJsonValue(m_payout_speed, json[QString("payoutSpeed")]);
    m_payout_speed_isSet = !json[QString("payoutSpeed")].isNull() && m_payout_speed_isValid;
}

QString OAICreateAccountRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccountRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_payout_method_code_isSet) {
        obj.insert(QString("payoutMethodCode"), ::OpenAPI::toJsonValue(m_payout_method_code));
    }
    if (m_payout_schedule_isSet) {
        obj.insert(QString("payoutSchedule"), ::OpenAPI::toJsonValue(m_payout_schedule));
    }
    if (m_payout_schedule_reason_isSet) {
        obj.insert(QString("payoutScheduleReason"), ::OpenAPI::toJsonValue(m_payout_schedule_reason));
    }
    if (m_payout_speed_isSet) {
        obj.insert(QString("payoutSpeed"), ::OpenAPI::toJsonValue(m_payout_speed));
    }
    return obj;
}

QString OAICreateAccountRequest::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAICreateAccountRequest::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAICreateAccountRequest::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAICreateAccountRequest::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QString OAICreateAccountRequest::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAICreateAccountRequest::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAICreateAccountRequest::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAICreateAccountRequest::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAICreateAccountRequest::getDescription() const {
    return m_description;
}
void OAICreateAccountRequest::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICreateAccountRequest::is_description_Set() const{
    return m_description_isSet;
}

bool OAICreateAccountRequest::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAICreateAccountRequest::getMetadata() const {
    return m_metadata;
}
void OAICreateAccountRequest::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAICreateAccountRequest::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAICreateAccountRequest::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAICreateAccountRequest::getPayoutMethodCode() const {
    return m_payout_method_code;
}
void OAICreateAccountRequest::setPayoutMethodCode(const QString &payout_method_code) {
    m_payout_method_code = payout_method_code;
    m_payout_method_code_isSet = true;
}

bool OAICreateAccountRequest::is_payout_method_code_Set() const{
    return m_payout_method_code_isSet;
}

bool OAICreateAccountRequest::is_payout_method_code_Valid() const{
    return m_payout_method_code_isValid;
}

QString OAICreateAccountRequest::getPayoutSchedule() const {
    return m_payout_schedule;
}
void OAICreateAccountRequest::setPayoutSchedule(const QString &payout_schedule) {
    m_payout_schedule = payout_schedule;
    m_payout_schedule_isSet = true;
}

bool OAICreateAccountRequest::is_payout_schedule_Set() const{
    return m_payout_schedule_isSet;
}

bool OAICreateAccountRequest::is_payout_schedule_Valid() const{
    return m_payout_schedule_isValid;
}

QString OAICreateAccountRequest::getPayoutScheduleReason() const {
    return m_payout_schedule_reason;
}
void OAICreateAccountRequest::setPayoutScheduleReason(const QString &payout_schedule_reason) {
    m_payout_schedule_reason = payout_schedule_reason;
    m_payout_schedule_reason_isSet = true;
}

bool OAICreateAccountRequest::is_payout_schedule_reason_Set() const{
    return m_payout_schedule_reason_isSet;
}

bool OAICreateAccountRequest::is_payout_schedule_reason_Valid() const{
    return m_payout_schedule_reason_isValid;
}

QString OAICreateAccountRequest::getPayoutSpeed() const {
    return m_payout_speed;
}
void OAICreateAccountRequest::setPayoutSpeed(const QString &payout_speed) {
    m_payout_speed = payout_speed;
    m_payout_speed_isSet = true;
}

bool OAICreateAccountRequest::is_payout_speed_Set() const{
    return m_payout_speed_isSet;
}

bool OAICreateAccountRequest::is_payout_speed_Valid() const{
    return m_payout_speed_isValid;
}

bool OAICreateAccountRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_method_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_schedule_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_speed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccountRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_code_isValid && true;
}

} // namespace OpenAPI
