/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVerificationApi_H
#define OAI_OAIVerificationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDeleteBankAccountRequest.h"
#include "OAIDeleteLegalArrangementRequest.h"
#include "OAIDeletePayoutMethodRequest.h"
#include "OAIDeleteShareholderRequest.h"
#include "OAIDeleteSignatoriesRequest.h"
#include "OAIGenericResponse.h"
#include "OAIGetUploadedDocumentsRequest.h"
#include "OAIGetUploadedDocumentsResponse.h"
#include "OAIPerformVerificationRequest.h"
#include "OAIServiceError.h"
#include "OAIUpdateAccountHolderResponse.h"
#include "OAIUploadDocumentRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVerificationApi : public QObject {
    Q_OBJECT

public:
    OAIVerificationApi(const int timeOut = 0);
    ~OAIVerificationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_perform_verification_request OAIPerformVerificationRequest [optional]
    */
    virtual void postCheckAccountHolder(const ::OpenAPI::OptionalParam<OAIPerformVerificationRequest> &oai_perform_verification_request = ::OpenAPI::OptionalParam<OAIPerformVerificationRequest>());

    /**
    * @param[in]  oai_delete_bank_account_request OAIDeleteBankAccountRequest [optional]
    */
    virtual void postDeleteBankAccounts(const ::OpenAPI::OptionalParam<OAIDeleteBankAccountRequest> &oai_delete_bank_account_request = ::OpenAPI::OptionalParam<OAIDeleteBankAccountRequest>());

    /**
    * @param[in]  oai_delete_legal_arrangement_request OAIDeleteLegalArrangementRequest [optional]
    */
    virtual void postDeleteLegalArrangements(const ::OpenAPI::OptionalParam<OAIDeleteLegalArrangementRequest> &oai_delete_legal_arrangement_request = ::OpenAPI::OptionalParam<OAIDeleteLegalArrangementRequest>());

    /**
    * @param[in]  oai_delete_payout_method_request OAIDeletePayoutMethodRequest [optional]
    */
    virtual void postDeletePayoutMethods(const ::OpenAPI::OptionalParam<OAIDeletePayoutMethodRequest> &oai_delete_payout_method_request = ::OpenAPI::OptionalParam<OAIDeletePayoutMethodRequest>());

    /**
    * @param[in]  oai_delete_shareholder_request OAIDeleteShareholderRequest [optional]
    */
    virtual void postDeleteShareholders(const ::OpenAPI::OptionalParam<OAIDeleteShareholderRequest> &oai_delete_shareholder_request = ::OpenAPI::OptionalParam<OAIDeleteShareholderRequest>());

    /**
    * @param[in]  oai_delete_signatories_request OAIDeleteSignatoriesRequest [optional]
    */
    virtual void postDeleteSignatories(const ::OpenAPI::OptionalParam<OAIDeleteSignatoriesRequest> &oai_delete_signatories_request = ::OpenAPI::OptionalParam<OAIDeleteSignatoriesRequest>());

    /**
    * @param[in]  oai_get_uploaded_documents_request OAIGetUploadedDocumentsRequest [optional]
    */
    virtual void postGetUploadedDocuments(const ::OpenAPI::OptionalParam<OAIGetUploadedDocumentsRequest> &oai_get_uploaded_documents_request = ::OpenAPI::OptionalParam<OAIGetUploadedDocumentsRequest>());

    /**
    * @param[in]  oai_upload_document_request OAIUploadDocumentRequest [optional]
    */
    virtual void postUploadDocument(const ::OpenAPI::OptionalParam<OAIUploadDocumentRequest> &oai_upload_document_request = ::OpenAPI::OptionalParam<OAIUploadDocumentRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCheckAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postDeleteBankAccountsCallback(OAIHttpRequestWorker *worker);
    void postDeleteLegalArrangementsCallback(OAIHttpRequestWorker *worker);
    void postDeletePayoutMethodsCallback(OAIHttpRequestWorker *worker);
    void postDeleteShareholdersCallback(OAIHttpRequestWorker *worker);
    void postDeleteSignatoriesCallback(OAIHttpRequestWorker *worker);
    void postGetUploadedDocumentsCallback(OAIHttpRequestWorker *worker);
    void postUploadDocumentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCheckAccountHolderSignal(OAIGenericResponse summary);
    void postDeleteBankAccountsSignal(OAIGenericResponse summary);
    void postDeleteLegalArrangementsSignal(OAIGenericResponse summary);
    void postDeletePayoutMethodsSignal(OAIGenericResponse summary);
    void postDeleteShareholdersSignal(OAIGenericResponse summary);
    void postDeleteSignatoriesSignal(OAIGenericResponse summary);
    void postGetUploadedDocumentsSignal(OAIGetUploadedDocumentsResponse summary);
    void postUploadDocumentSignal(OAIUpdateAccountHolderResponse summary);


    void postCheckAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postDeleteBankAccountsSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postDeleteLegalArrangementsSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postDeletePayoutMethodsSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postDeleteShareholdersSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postDeleteSignatoriesSignalFull(OAIHttpRequestWorker *worker, OAIGenericResponse summary);
    void postGetUploadedDocumentsSignalFull(OAIHttpRequestWorker *worker, OAIGetUploadedDocumentsResponse summary);
    void postUploadDocumentSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountHolderResponse summary);

    Q_DECL_DEPRECATED_X("Use postCheckAccountHolderSignalError() instead")
    void postCheckAccountHolderSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCheckAccountHolderSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteBankAccountsSignalError() instead")
    void postDeleteBankAccountsSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteBankAccountsSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteLegalArrangementsSignalError() instead")
    void postDeleteLegalArrangementsSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteLegalArrangementsSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeletePayoutMethodsSignalError() instead")
    void postDeletePayoutMethodsSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeletePayoutMethodsSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteShareholdersSignalError() instead")
    void postDeleteShareholdersSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteShareholdersSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteSignatoriesSignalError() instead")
    void postDeleteSignatoriesSignalE(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteSignatoriesSignalError(OAIGenericResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetUploadedDocumentsSignalError() instead")
    void postGetUploadedDocumentsSignalE(OAIGetUploadedDocumentsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetUploadedDocumentsSignalError(OAIGetUploadedDocumentsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUploadDocumentSignalError() instead")
    void postUploadDocumentSignalE(OAIUpdateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUploadDocumentSignalError(OAIUpdateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCheckAccountHolderSignalErrorFull() instead")
    void postCheckAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCheckAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteBankAccountsSignalErrorFull() instead")
    void postDeleteBankAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteBankAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteLegalArrangementsSignalErrorFull() instead")
    void postDeleteLegalArrangementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteLegalArrangementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeletePayoutMethodsSignalErrorFull() instead")
    void postDeletePayoutMethodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeletePayoutMethodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteShareholdersSignalErrorFull() instead")
    void postDeleteShareholdersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteShareholdersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postDeleteSignatoriesSignalErrorFull() instead")
    void postDeleteSignatoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postDeleteSignatoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetUploadedDocumentsSignalErrorFull() instead")
    void postGetUploadedDocumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetUploadedDocumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUploadDocumentSignalErrorFull() instead")
    void postUploadDocumentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUploadDocumentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
