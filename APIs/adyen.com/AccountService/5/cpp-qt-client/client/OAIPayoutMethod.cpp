/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPayoutMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPayoutMethod::OAIPayoutMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPayoutMethod::OAIPayoutMethod() {
    this->initializeModel();
}

OAIPayoutMethod::~OAIPayoutMethod() {}

void OAIPayoutMethod::initializeModel() {

    m_merchant_account_isSet = false;
    m_merchant_account_isValid = false;

    m_payout_method_code_isSet = false;
    m_payout_method_code_isValid = false;

    m_payout_method_reference_isSet = false;
    m_payout_method_reference_isValid = false;

    m_recurring_detail_reference_isSet = false;
    m_recurring_detail_reference_isValid = false;

    m_shopper_reference_isSet = false;
    m_shopper_reference_isValid = false;
}

void OAIPayoutMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPayoutMethod::fromJsonObject(QJsonObject json) {

    m_merchant_account_isValid = ::OpenAPI::fromJsonValue(m_merchant_account, json[QString("merchantAccount")]);
    m_merchant_account_isSet = !json[QString("merchantAccount")].isNull() && m_merchant_account_isValid;

    m_payout_method_code_isValid = ::OpenAPI::fromJsonValue(m_payout_method_code, json[QString("payoutMethodCode")]);
    m_payout_method_code_isSet = !json[QString("payoutMethodCode")].isNull() && m_payout_method_code_isValid;

    m_payout_method_reference_isValid = ::OpenAPI::fromJsonValue(m_payout_method_reference, json[QString("payoutMethodReference")]);
    m_payout_method_reference_isSet = !json[QString("payoutMethodReference")].isNull() && m_payout_method_reference_isValid;

    m_recurring_detail_reference_isValid = ::OpenAPI::fromJsonValue(m_recurring_detail_reference, json[QString("recurringDetailReference")]);
    m_recurring_detail_reference_isSet = !json[QString("recurringDetailReference")].isNull() && m_recurring_detail_reference_isValid;

    m_shopper_reference_isValid = ::OpenAPI::fromJsonValue(m_shopper_reference, json[QString("shopperReference")]);
    m_shopper_reference_isSet = !json[QString("shopperReference")].isNull() && m_shopper_reference_isValid;
}

QString OAIPayoutMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPayoutMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_merchant_account_isSet) {
        obj.insert(QString("merchantAccount"), ::OpenAPI::toJsonValue(m_merchant_account));
    }
    if (m_payout_method_code_isSet) {
        obj.insert(QString("payoutMethodCode"), ::OpenAPI::toJsonValue(m_payout_method_code));
    }
    if (m_payout_method_reference_isSet) {
        obj.insert(QString("payoutMethodReference"), ::OpenAPI::toJsonValue(m_payout_method_reference));
    }
    if (m_recurring_detail_reference_isSet) {
        obj.insert(QString("recurringDetailReference"), ::OpenAPI::toJsonValue(m_recurring_detail_reference));
    }
    if (m_shopper_reference_isSet) {
        obj.insert(QString("shopperReference"), ::OpenAPI::toJsonValue(m_shopper_reference));
    }
    return obj;
}

QString OAIPayoutMethod::getMerchantAccount() const {
    return m_merchant_account;
}
void OAIPayoutMethod::setMerchantAccount(const QString &merchant_account) {
    m_merchant_account = merchant_account;
    m_merchant_account_isSet = true;
}

bool OAIPayoutMethod::is_merchant_account_Set() const{
    return m_merchant_account_isSet;
}

bool OAIPayoutMethod::is_merchant_account_Valid() const{
    return m_merchant_account_isValid;
}

QString OAIPayoutMethod::getPayoutMethodCode() const {
    return m_payout_method_code;
}
void OAIPayoutMethod::setPayoutMethodCode(const QString &payout_method_code) {
    m_payout_method_code = payout_method_code;
    m_payout_method_code_isSet = true;
}

bool OAIPayoutMethod::is_payout_method_code_Set() const{
    return m_payout_method_code_isSet;
}

bool OAIPayoutMethod::is_payout_method_code_Valid() const{
    return m_payout_method_code_isValid;
}

QString OAIPayoutMethod::getPayoutMethodReference() const {
    return m_payout_method_reference;
}
void OAIPayoutMethod::setPayoutMethodReference(const QString &payout_method_reference) {
    m_payout_method_reference = payout_method_reference;
    m_payout_method_reference_isSet = true;
}

bool OAIPayoutMethod::is_payout_method_reference_Set() const{
    return m_payout_method_reference_isSet;
}

bool OAIPayoutMethod::is_payout_method_reference_Valid() const{
    return m_payout_method_reference_isValid;
}

QString OAIPayoutMethod::getRecurringDetailReference() const {
    return m_recurring_detail_reference;
}
void OAIPayoutMethod::setRecurringDetailReference(const QString &recurring_detail_reference) {
    m_recurring_detail_reference = recurring_detail_reference;
    m_recurring_detail_reference_isSet = true;
}

bool OAIPayoutMethod::is_recurring_detail_reference_Set() const{
    return m_recurring_detail_reference_isSet;
}

bool OAIPayoutMethod::is_recurring_detail_reference_Valid() const{
    return m_recurring_detail_reference_isValid;
}

QString OAIPayoutMethod::getShopperReference() const {
    return m_shopper_reference;
}
void OAIPayoutMethod::setShopperReference(const QString &shopper_reference) {
    m_shopper_reference = shopper_reference;
    m_shopper_reference_isSet = true;
}

bool OAIPayoutMethod::is_shopper_reference_Set() const{
    return m_shopper_reference_isSet;
}

bool OAIPayoutMethod::is_shopper_reference_Valid() const{
    return m_shopper_reference_isValid;
}

bool OAIPayoutMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_merchant_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_method_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_method_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurring_detail_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shopper_reference_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPayoutMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_merchant_account_isValid && m_recurring_detail_reference_isValid && m_shopper_reference_isValid && true;
}

} // namespace OpenAPI
