/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloseAccountRequest.h"
#include "OAICloseAccountResponse.h"
#include "OAICreateAccountRequest.h"
#include "OAICreateAccountResponse.h"
#include "OAIServiceError.h"
#include "OAIUpdateAccountRequest.h"
#include "OAIUpdateAccountResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_close_account_request OAICloseAccountRequest [optional]
    */
    virtual void postCloseAccount(const ::OpenAPI::OptionalParam<OAICloseAccountRequest> &oai_close_account_request = ::OpenAPI::OptionalParam<OAICloseAccountRequest>());

    /**
    * @param[in]  oai_create_account_request OAICreateAccountRequest [optional]
    */
    virtual void postCreateAccount(const ::OpenAPI::OptionalParam<OAICreateAccountRequest> &oai_create_account_request = ::OpenAPI::OptionalParam<OAICreateAccountRequest>());

    /**
    * @param[in]  oai_update_account_request OAIUpdateAccountRequest [optional]
    */
    virtual void postUpdateAccount(const ::OpenAPI::OptionalParam<OAIUpdateAccountRequest> &oai_update_account_request = ::OpenAPI::OptionalParam<OAIUpdateAccountRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCloseAccountCallback(OAIHttpRequestWorker *worker);
    void postCreateAccountCallback(OAIHttpRequestWorker *worker);
    void postUpdateAccountCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCloseAccountSignal(OAICloseAccountResponse summary);
    void postCreateAccountSignal(OAICreateAccountResponse summary);
    void postUpdateAccountSignal(OAIUpdateAccountResponse summary);


    void postCloseAccountSignalFull(OAIHttpRequestWorker *worker, OAICloseAccountResponse summary);
    void postCreateAccountSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountResponse summary);
    void postUpdateAccountSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountResponse summary);

    Q_DECL_DEPRECATED_X("Use postCloseAccountSignalError() instead")
    void postCloseAccountSignalE(OAICloseAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCloseAccountSignalError(OAICloseAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCreateAccountSignalError() instead")
    void postCreateAccountSignalE(OAICreateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateAccountSignalError(OAICreateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountSignalError() instead")
    void postUpdateAccountSignalE(OAIUpdateAccountResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountSignalError(OAIUpdateAccountResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCloseAccountSignalErrorFull() instead")
    void postCloseAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCloseAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCreateAccountSignalErrorFull() instead")
    void postCreateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountSignalErrorFull() instead")
    void postUpdateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
