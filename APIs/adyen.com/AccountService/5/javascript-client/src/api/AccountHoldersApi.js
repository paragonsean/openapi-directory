/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CloseAccountHolderRequest from '../model/CloseAccountHolderRequest';
import CloseAccountHolderResponse from '../model/CloseAccountHolderResponse';
import CloseStoresRequest from '../model/CloseStoresRequest';
import CreateAccountHolderRequest from '../model/CreateAccountHolderRequest';
import CreateAccountHolderResponse from '../model/CreateAccountHolderResponse';
import GenericResponse from '../model/GenericResponse';
import GetAccountHolderRequest from '../model/GetAccountHolderRequest';
import GetAccountHolderResponse from '../model/GetAccountHolderResponse';
import GetAccountHolderStatusResponse from '../model/GetAccountHolderStatusResponse';
import GetTaxFormRequest from '../model/GetTaxFormRequest';
import GetTaxFormResponse from '../model/GetTaxFormResponse';
import ServiceError from '../model/ServiceError';
import SuspendAccountHolderRequest from '../model/SuspendAccountHolderRequest';
import SuspendAccountHolderResponse from '../model/SuspendAccountHolderResponse';
import UnSuspendAccountHolderRequest from '../model/UnSuspendAccountHolderRequest';
import UnSuspendAccountHolderResponse from '../model/UnSuspendAccountHolderResponse';
import UpdateAccountHolderRequest from '../model/UpdateAccountHolderRequest';
import UpdateAccountHolderResponse from '../model/UpdateAccountHolderResponse';
import UpdateAccountHolderStateRequest from '../model/UpdateAccountHolderStateRequest';

/**
* AccountHolders service.
* @module api/AccountHoldersApi
* @version 5
*/
export default class AccountHoldersApi {

    /**
    * Constructs a new AccountHoldersApi. 
    * @alias module:api/AccountHoldersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the postCloseAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postCloseAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CloseAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close an account holder
     * Changes the [status of an account holder](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#account-holder-statuses) to **Closed**. This state is final. If an account holder is closed, you can't process transactions, pay out funds, or reopen it. If payments are made to an account of an account holder with a **Closed** [`status`](https://docs.adyen.com/api-explorer/#/Account/latest/post/getAccountHolder__resParam_verification-accountHolder-checks-status), the payments are sent to your liable account.
     * @param {Object} opts Optional parameters
     * @param {module:model/CloseAccountHolderRequest} [closeAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postCloseAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CloseAccountHolderResponse}
     */
    postCloseAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['closeAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CloseAccountHolderResponse;
      return this.apiClient.callApi(
        '/closeAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCloseStores operation.
     * @callback module:api/AccountHoldersApi~postCloseStoresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Close stores
     * Closes stores associated with an account holder.
     * @param {Object} opts Optional parameters
     * @param {module:model/CloseStoresRequest} [closeStoresRequest] 
     * @param {module:api/AccountHoldersApi~postCloseStoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericResponse}
     */
    postCloseStores(opts, callback) {
      opts = opts || {};
      let postBody = opts['closeStoresRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GenericResponse;
      return this.apiClient.callApi(
        '/closeStores', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCreateAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postCreateAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an account holder
     * Creates an account holder that [represents the sub-merchant's entity](https://docs.adyen.com/marketplaces-and-platforms/classic/account-structure#your-platform) in your platform. The details that you need to provide in the request depend on the sub-merchant's legal entity type. For more information, refer to [Account holder and accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#legal-entity-types).
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAccountHolderRequest} [createAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postCreateAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateAccountHolderResponse}
     */
    postCreateAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateAccountHolderResponse;
      return this.apiClient.callApi(
        '/createAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGetAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postGetAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an account holder
     * Returns the details of an account holder.
     * @param {Object} opts Optional parameters
     * @param {module:model/GetAccountHolderRequest} [getAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postGetAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountHolderResponse}
     */
    postGetAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['getAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountHolderResponse;
      return this.apiClient.callApi(
        '/getAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postGetTaxForm operation.
     * @callback module:api/AccountHoldersApi~postGetTaxFormCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTaxFormResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a tax form
     * Generates a tax form for account holders operating in the US. For more information, refer to [Providing tax forms](https://docs.adyen.com/marketplaces-and-platforms/classic/tax-forms).
     * @param {Object} opts Optional parameters
     * @param {module:model/GetTaxFormRequest} [getTaxFormRequest] 
     * @param {module:api/AccountHoldersApi~postGetTaxFormCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTaxFormResponse}
     */
    postGetTaxForm(opts, callback) {
      opts = opts || {};
      let postBody = opts['getTaxFormRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetTaxFormResponse;
      return this.apiClient.callApi(
        '/getTaxForm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSuspendAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postSuspendAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SuspendAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend an account holder
     * Changes the [status of an account holder](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#account-holder-statuses) to **Suspended**.
     * @param {Object} opts Optional parameters
     * @param {module:model/SuspendAccountHolderRequest} [suspendAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postSuspendAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SuspendAccountHolderResponse}
     */
    postSuspendAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['suspendAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuspendAccountHolderResponse;
      return this.apiClient.callApi(
        '/suspendAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUnSuspendAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postUnSuspendAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnSuspendAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unsuspend an account holder
     * Changes the [status of an account holder](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#account-holder-statuses) from **Suspended** to **Inactive**.  Account holders can have a **Suspended** [`status`](https://docs.adyen.com/api-explorer/#/Account/latest/post/getAccountHolder__resParam_verification-accountHolder-checks-status) if you suspend them through the [`/suspendAccountHolder`](https://docs.adyen.com/api-explorer/#/Account/v5/post/suspendAccountHolder) endpoint or if a verification deadline expires.  You can only unsuspend account holders if they do not have verification checks with a **FAILED** [`status`](https://docs.adyen.com/api-explorer/#/Account/latest/post/getAccountHolder__resParam_verification-accountHolder-checks-status).
     * @param {Object} opts Optional parameters
     * @param {module:model/UnSuspendAccountHolderRequest} [unSuspendAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postUnSuspendAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnSuspendAccountHolderResponse}
     */
    postUnSuspendAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['unSuspendAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnSuspendAccountHolderResponse;
      return this.apiClient.callApi(
        '/unSuspendAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdateAccountHolder operation.
     * @callback module:api/AccountHoldersApi~postUpdateAccountHolderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateAccountHolderResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an account holder
     * Updates the `accountHolderDetails` and `processingTier` of an account holder, and adds bank accounts and shareholders.  When updating `accountHolderDetails`, parameters that are not included in the request are left unchanged except for the following object:  * `metadata`: Updating the metadata replaces the entire object. This means that to update an existing key-value pair, you must provide the changes, as well as other existing key-value pairs.  When updating any field in the following objects, you must submit all the fields required for validation:   * `address`  * `fullPhoneNumber`  * `bankAccountDetails.BankAccountDetail`  * `businessDetails.shareholders.ShareholderContact`   For example, to update the `address.postalCode`, you must also submit the `address.country`, `.city`, `.street`, `.postalCode`, and possibly `.stateOrProvince` so that the address can be validated.  To add a bank account or shareholder, provide the bank account or shareholder details without a `bankAccountUUID` or a `shareholderCode`.  
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAccountHolderRequest} [updateAccountHolderRequest] 
     * @param {module:api/AccountHoldersApi~postUpdateAccountHolderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateAccountHolderResponse}
     */
    postUpdateAccountHolder(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAccountHolderRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateAccountHolderResponse;
      return this.apiClient.callApi(
        '/updateAccountHolder', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUpdateAccountHolderState operation.
     * @callback module:api/AccountHoldersApi~postUpdateAccountHolderStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetAccountHolderStatusResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update payout or processing state
     * Disables or enables the processing or payout state of an account holder.
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateAccountHolderStateRequest} [updateAccountHolderStateRequest] 
     * @param {module:api/AccountHoldersApi~postUpdateAccountHolderStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetAccountHolderStatusResponse}
     */
    postUpdateAccountHolderState(opts, callback) {
      opts = opts || {};
      let postBody = opts['updateAccountHolderStateRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BasicAuth', 'ApiKeyAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GetAccountHolderStatusResponse;
      return this.apiClient.callApi(
        '/updateAccountHolderState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
