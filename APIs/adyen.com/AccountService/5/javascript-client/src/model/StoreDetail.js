/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ViasAddress from './ViasAddress';
import ViasPhoneNumber from './ViasPhoneNumber';

/**
 * The StoreDetail model module.
 * @module model/StoreDetail
 * @version 5
 */
class StoreDetail {
    /**
     * Constructs a new <code>StoreDetail</code>.
     * @alias module:model/StoreDetail
     * @param address {module:model/ViasAddress} The address of the physical store where the account holder will process payments from.
     * @param merchantAccount {String} The merchant account to which the store belongs.
     * @param merchantCategoryCode {String} The merchant category code (MCC) that classifies the business of the account holder.
     */
    constructor(address, merchantAccount, merchantCategoryCode) { 
        
        StoreDetail.initialize(this, address, merchantAccount, merchantCategoryCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, address, merchantAccount, merchantCategoryCode) { 
        obj['address'] = address;
        obj['merchantAccount'] = merchantAccount;
        obj['merchantCategoryCode'] = merchantCategoryCode;
    }

    /**
     * Constructs a <code>StoreDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StoreDetail} obj Optional instance to populate.
     * @return {module:model/StoreDetail} The populated <code>StoreDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StoreDetail();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ViasAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('fullPhoneNumber')) {
                obj['fullPhoneNumber'] = ApiClient.convertToType(data['fullPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('merchantAccount')) {
                obj['merchantAccount'] = ApiClient.convertToType(data['merchantAccount'], 'String');
            }
            if (data.hasOwnProperty('merchantCategoryCode')) {
                obj['merchantCategoryCode'] = ApiClient.convertToType(data['merchantCategoryCode'], 'String');
            }
            if (data.hasOwnProperty('merchantHouseNumber')) {
                obj['merchantHouseNumber'] = ApiClient.convertToType(data['merchantHouseNumber'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ViasPhoneNumber.constructFromObject(data['phoneNumber']);
            }
            if (data.hasOwnProperty('shopperInteraction')) {
                obj['shopperInteraction'] = ApiClient.convertToType(data['shopperInteraction'], 'String');
            }
            if (data.hasOwnProperty('splitConfigurationUUID')) {
                obj['splitConfigurationUUID'] = ApiClient.convertToType(data['splitConfigurationUUID'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('store')) {
                obj['store'] = ApiClient.convertToType(data['store'], 'String');
            }
            if (data.hasOwnProperty('storeName')) {
                obj['storeName'] = ApiClient.convertToType(data['storeName'], 'String');
            }
            if (data.hasOwnProperty('storeReference')) {
                obj['storeReference'] = ApiClient.convertToType(data['storeReference'], 'String');
            }
            if (data.hasOwnProperty('virtualAccount')) {
                obj['virtualAccount'] = ApiClient.convertToType(data['virtualAccount'], 'String');
            }
            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StoreDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StoreDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of StoreDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `address`
        if (data['address']) { // data not null
          ViasAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['fullPhoneNumber'] && !(typeof data['fullPhoneNumber'] === 'string' || data['fullPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got " + data['fullPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is a string
        if (data['merchantAccount'] && !(typeof data['merchantAccount'] === 'string' || data['merchantAccount'] instanceof String)) {
            throw new Error("Expected the field `merchantAccount` to be a primitive type in the JSON string but got " + data['merchantAccount']);
        }
        // ensure the json data is a string
        if (data['merchantCategoryCode'] && !(typeof data['merchantCategoryCode'] === 'string' || data['merchantCategoryCode'] instanceof String)) {
            throw new Error("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got " + data['merchantCategoryCode']);
        }
        // ensure the json data is a string
        if (data['merchantHouseNumber'] && !(typeof data['merchantHouseNumber'] === 'string' || data['merchantHouseNumber'] instanceof String)) {
            throw new Error("Expected the field `merchantHouseNumber` to be a primitive type in the JSON string but got " + data['merchantHouseNumber']);
        }
        // validate the optional field `phoneNumber`
        if (data['phoneNumber']) { // data not null
          ViasPhoneNumber.validateJSON(data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['shopperInteraction'] && !(typeof data['shopperInteraction'] === 'string' || data['shopperInteraction'] instanceof String)) {
            throw new Error("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got " + data['shopperInteraction']);
        }
        // ensure the json data is a string
        if (data['splitConfigurationUUID'] && !(typeof data['splitConfigurationUUID'] === 'string' || data['splitConfigurationUUID'] instanceof String)) {
            throw new Error("Expected the field `splitConfigurationUUID` to be a primitive type in the JSON string but got " + data['splitConfigurationUUID']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['store'] && !(typeof data['store'] === 'string' || data['store'] instanceof String)) {
            throw new Error("Expected the field `store` to be a primitive type in the JSON string but got " + data['store']);
        }
        // ensure the json data is a string
        if (data['storeName'] && !(typeof data['storeName'] === 'string' || data['storeName'] instanceof String)) {
            throw new Error("Expected the field `storeName` to be a primitive type in the JSON string but got " + data['storeName']);
        }
        // ensure the json data is a string
        if (data['storeReference'] && !(typeof data['storeReference'] === 'string' || data['storeReference'] instanceof String)) {
            throw new Error("Expected the field `storeReference` to be a primitive type in the JSON string but got " + data['storeReference']);
        }
        // ensure the json data is a string
        if (data['virtualAccount'] && !(typeof data['virtualAccount'] === 'string' || data['virtualAccount'] instanceof String)) {
            throw new Error("Expected the field `virtualAccount` to be a primitive type in the JSON string but got " + data['virtualAccount']);
        }
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }

        return true;
    }


}

StoreDetail.RequiredProperties = ["address", "merchantAccount", "merchantCategoryCode"];

/**
 * The address of the physical store where the account holder will process payments from.
 * @member {module:model/ViasAddress} address
 */
StoreDetail.prototype['address'] = undefined;

/**
 * The phone number of the store provided as a single string.  It will be handled as a landline phone.  Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"
 * @member {String} fullPhoneNumber
 */
StoreDetail.prototype['fullPhoneNumber'] = undefined;

/**
 * Store logo for payment method setup.
 * @member {String} logo
 */
StoreDetail.prototype['logo'] = undefined;

/**
 * The merchant account to which the store belongs.
 * @member {String} merchantAccount
 */
StoreDetail.prototype['merchantAccount'] = undefined;

/**
 * The merchant category code (MCC) that classifies the business of the account holder.
 * @member {String} merchantCategoryCode
 */
StoreDetail.prototype['merchantCategoryCode'] = undefined;

/**
 * Merchant house number for payment method setup.
 * @member {String} merchantHouseNumber
 */
StoreDetail.prototype['merchantHouseNumber'] = undefined;

/**
 * The phone number of the store.
 * @member {module:model/ViasPhoneNumber} phoneNumber
 */
StoreDetail.prototype['phoneNumber'] = undefined;

/**
 * The sales channel. Possible values: **Ecommerce**, **POS**.
 * @member {module:model/StoreDetail.ShopperInteractionEnum} shopperInteraction
 */
StoreDetail.prototype['shopperInteraction'] = undefined;

/**
 * The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the `virtualAccount` is also required. Adyen uses the configuration and the `virtualAccount` to split funds between accounts in your platform.
 * @member {String} splitConfigurationUUID
 */
StoreDetail.prototype['splitConfigurationUUID'] = undefined;

/**
 * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
 * @member {module:model/StoreDetail.StatusEnum} status
 */
StoreDetail.prototype['status'] = undefined;

/**
 * Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an `/updateAccountHolder` request.
 * @member {String} store
 */
StoreDetail.prototype['store'] = undefined;

/**
 * The name of the account holder's store. This value is shown in shopper statements.  * Length: Between 3 to 22 characters   * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**
 * @member {String} storeName
 */
StoreDetail.prototype['storeName'] = undefined;

/**
 * Your unique identifier for the store. The Customer Area also uses this value for the store description.   * Length: Between 3 to 128 characters  * The following characters are *not* supported: **:;}{$#@!|<>%^*+=\\\\**
 * @member {String} storeReference
 */
StoreDetail.prototype['storeReference'] = undefined;

/**
 * The account holder's `accountCode` where the split amount will be sent. Required when you provide the `splitConfigurationUUID`.
 * @member {String} virtualAccount
 */
StoreDetail.prototype['virtualAccount'] = undefined;

/**
 * URL of the ecommerce store.
 * @member {String} webAddress
 */
StoreDetail.prototype['webAddress'] = undefined;





/**
 * Allowed values for the <code>shopperInteraction</code> property.
 * @enum {String}
 * @readonly
 */
StoreDetail['ShopperInteractionEnum'] = {

    /**
     * value: "Ecommerce"
     * @const
     */
    "Ecommerce": "Ecommerce",

    /**
     * value: "POS"
     * @const
     */
    "POS": "POS"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
StoreDetail['StatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "InactiveWithModifications"
     * @const
     */
    "InactiveWithModifications": "InactiveWithModifications",

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending"
};



export default StoreDetail;

