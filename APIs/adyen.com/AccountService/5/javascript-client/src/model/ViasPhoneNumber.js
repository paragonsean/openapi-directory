/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ViasPhoneNumber model module.
 * @module model/ViasPhoneNumber
 * @version 5
 */
class ViasPhoneNumber {
    /**
     * Constructs a new <code>ViasPhoneNumber</code>.
     * @alias module:model/ViasPhoneNumber
     */
    constructor() { 
        
        ViasPhoneNumber.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViasPhoneNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViasPhoneNumber} obj Optional instance to populate.
     * @return {module:model/ViasPhoneNumber} The populated <code>ViasPhoneNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViasPhoneNumber();

            if (data.hasOwnProperty('phoneCountryCode')) {
                obj['phoneCountryCode'] = ApiClient.convertToType(data['phoneCountryCode'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('phoneType')) {
                obj['phoneType'] = ApiClient.convertToType(data['phoneType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViasPhoneNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViasPhoneNumber</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['phoneCountryCode'] && !(typeof data['phoneCountryCode'] === 'string' || data['phoneCountryCode'] instanceof String)) {
            throw new Error("Expected the field `phoneCountryCode` to be a primitive type in the JSON string but got " + data['phoneCountryCode']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['phoneType'] && !(typeof data['phoneType'] === 'string' || data['phoneType'] instanceof String)) {
            throw new Error("Expected the field `phoneType` to be a primitive type in the JSON string but got " + data['phoneType']);
        }

        return true;
    }


}



/**
 * The two-character country code of the phone number. >The permitted country codes are defined in ISO-3166-1 alpha-2 (e.g. 'NL').
 * @member {String} phoneCountryCode
 */
ViasPhoneNumber.prototype['phoneCountryCode'] = undefined;

/**
 * The phone number. >The inclusion of the phone number country code is not necessary.
 * @member {String} phoneNumber
 */
ViasPhoneNumber.prototype['phoneNumber'] = undefined;

/**
 * The type of the phone number. >The following values are permitted: `Landline`, `Mobile`, `SIP`, `Fax`.
 * @member {module:model/ViasPhoneNumber.PhoneTypeEnum} phoneType
 */
ViasPhoneNumber.prototype['phoneType'] = undefined;





/**
 * Allowed values for the <code>phoneType</code> property.
 * @enum {String}
 * @readonly
 */
ViasPhoneNumber['PhoneTypeEnum'] = {

    /**
     * value: "Fax"
     * @const
     */
    "Fax": "Fax",

    /**
     * value: "Landline"
     * @const
     */
    "Landline": "Landline",

    /**
     * value: "Mobile"
     * @const
     */
    "Mobile": "Mobile",

    /**
     * value: "SIP"
     * @const
     */
    "SIP": "SIP"
};



export default ViasPhoneNumber;

