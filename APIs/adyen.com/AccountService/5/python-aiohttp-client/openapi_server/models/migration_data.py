# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.migrated_accounts import MigratedAccounts
from openapi_server.models.migrated_shareholders import MigratedShareholders
from openapi_server.models.migrated_stores import MigratedStores
from openapi_server import util


class MigrationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_id: str=None, balance_platform: str=None, migrated: bool=None, migrated_accounts: List[MigratedAccounts]=None, migrated_shareholders: List[MigratedShareholders]=None, migrated_stores: List[MigratedStores]=None, migration_date: datetime=None):
        """MigrationData - a model defined in OpenAPI

        :param account_holder_id: The account_holder_id of this MigrationData.
        :param balance_platform: The balance_platform of this MigrationData.
        :param migrated: The migrated of this MigrationData.
        :param migrated_accounts: The migrated_accounts of this MigrationData.
        :param migrated_shareholders: The migrated_shareholders of this MigrationData.
        :param migrated_stores: The migrated_stores of this MigrationData.
        :param migration_date: The migration_date of this MigrationData.
        """
        self.openapi_types = {
            'account_holder_id': str,
            'balance_platform': str,
            'migrated': bool,
            'migrated_accounts': List[MigratedAccounts],
            'migrated_shareholders': List[MigratedShareholders],
            'migrated_stores': List[MigratedStores],
            'migration_date': datetime
        }

        self.attribute_map = {
            'account_holder_id': 'accountHolderId',
            'balance_platform': 'balancePlatform',
            'migrated': 'migrated',
            'migrated_accounts': 'migratedAccounts',
            'migrated_shareholders': 'migratedShareholders',
            'migrated_stores': 'migratedStores',
            'migration_date': 'migrationDate'
        }

        self._account_holder_id = account_holder_id
        self._balance_platform = balance_platform
        self._migrated = migrated
        self._migrated_accounts = migrated_accounts
        self._migrated_shareholders = migrated_shareholders
        self._migrated_stores = migrated_stores
        self._migration_date = migration_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigrationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigrationData of this MigrationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this MigrationData.

        The unique identifier of the account holder in the balance platform.

        :return: The account_holder_id of this MigrationData.
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this MigrationData.

        The unique identifier of the account holder in the balance platform.

        :param account_holder_id: The account_holder_id of this MigrationData.
        :type account_holder_id: str
        """

        self._account_holder_id = account_holder_id

    @property
    def balance_platform(self):
        """Gets the balance_platform of this MigrationData.

        The unique identifier of the balance platfrom to which the account holder was migrated.

        :return: The balance_platform of this MigrationData.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this MigrationData.

        The unique identifier of the balance platfrom to which the account holder was migrated.

        :param balance_platform: The balance_platform of this MigrationData.
        :type balance_platform: str
        """

        self._balance_platform = balance_platform

    @property
    def migrated(self):
        """Gets the migrated of this MigrationData.

        Set to **true** if the account holder has been migrated.

        :return: The migrated of this MigrationData.
        :rtype: bool
        """
        return self._migrated

    @migrated.setter
    def migrated(self, migrated):
        """Sets the migrated of this MigrationData.

        Set to **true** if the account holder has been migrated.

        :param migrated: The migrated of this MigrationData.
        :type migrated: bool
        """

        self._migrated = migrated

    @property
    def migrated_accounts(self):
        """Gets the migrated_accounts of this MigrationData.

        Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder.

        :return: The migrated_accounts of this MigrationData.
        :rtype: List[MigratedAccounts]
        """
        return self._migrated_accounts

    @migrated_accounts.setter
    def migrated_accounts(self, migrated_accounts):
        """Sets the migrated_accounts of this MigrationData.

        Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder.

        :param migrated_accounts: The migrated_accounts of this MigrationData.
        :type migrated_accounts: List[MigratedAccounts]
        """

        self._migrated_accounts = migrated_accounts

    @property
    def migrated_shareholders(self):
        """Gets the migrated_shareholders of this MigrationData.

        Contains the mapping of shareholders associated with the migrated legal entities.

        :return: The migrated_shareholders of this MigrationData.
        :rtype: List[MigratedShareholders]
        """
        return self._migrated_shareholders

    @migrated_shareholders.setter
    def migrated_shareholders(self, migrated_shareholders):
        """Sets the migrated_shareholders of this MigrationData.

        Contains the mapping of shareholders associated with the migrated legal entities.

        :param migrated_shareholders: The migrated_shareholders of this MigrationData.
        :type migrated_shareholders: List[MigratedShareholders]
        """

        self._migrated_shareholders = migrated_shareholders

    @property
    def migrated_stores(self):
        """Gets the migrated_stores of this MigrationData.

        Contains the mapping of business lines and stores associated with the migrated account holder.

        :return: The migrated_stores of this MigrationData.
        :rtype: List[MigratedStores]
        """
        return self._migrated_stores

    @migrated_stores.setter
    def migrated_stores(self, migrated_stores):
        """Sets the migrated_stores of this MigrationData.

        Contains the mapping of business lines and stores associated with the migrated account holder.

        :param migrated_stores: The migrated_stores of this MigrationData.
        :type migrated_stores: List[MigratedStores]
        """

        self._migrated_stores = migrated_stores

    @property
    def migration_date(self):
        """Gets the migration_date of this MigrationData.

        The date when account holder was migrated.

        :return: The migration_date of this MigrationData.
        :rtype: datetime
        """
        return self._migration_date

    @migration_date.setter
    def migration_date(self, migration_date):
        """Sets the migration_date of this MigrationData.

        The date when account holder was migrated.

        :param migration_date: The migration_date of this MigrationData.
        :type migration_date: datetime
        """

        self._migration_date = migration_date
