# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LegalArrangementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, legal_arrangement_code: str=None, legal_arrangement_entity_codes: List[str]=None):
        """LegalArrangementRequest - a model defined in OpenAPI

        :param legal_arrangement_code: The legal_arrangement_code of this LegalArrangementRequest.
        :param legal_arrangement_entity_codes: The legal_arrangement_entity_codes of this LegalArrangementRequest.
        """
        self.openapi_types = {
            'legal_arrangement_code': str,
            'legal_arrangement_entity_codes': List[str]
        }

        self.attribute_map = {
            'legal_arrangement_code': 'legalArrangementCode',
            'legal_arrangement_entity_codes': 'legalArrangementEntityCodes'
        }

        self._legal_arrangement_code = legal_arrangement_code
        self._legal_arrangement_entity_codes = legal_arrangement_entity_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LegalArrangementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LegalArrangementRequest of this LegalArrangementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def legal_arrangement_code(self):
        """Gets the legal_arrangement_code of this LegalArrangementRequest.

        The code of the legal arrangement to be deleted. If you also send `legalArrangementEntityCodes`, only the entities listed will be deleted.

        :return: The legal_arrangement_code of this LegalArrangementRequest.
        :rtype: str
        """
        return self._legal_arrangement_code

    @legal_arrangement_code.setter
    def legal_arrangement_code(self, legal_arrangement_code):
        """Sets the legal_arrangement_code of this LegalArrangementRequest.

        The code of the legal arrangement to be deleted. If you also send `legalArrangementEntityCodes`, only the entities listed will be deleted.

        :param legal_arrangement_code: The legal_arrangement_code of this LegalArrangementRequest.
        :type legal_arrangement_code: str
        """
        if legal_arrangement_code is None:
            raise ValueError("Invalid value for `legal_arrangement_code`, must not be `None`")

        self._legal_arrangement_code = legal_arrangement_code

    @property
    def legal_arrangement_entity_codes(self):
        """Gets the legal_arrangement_entity_codes of this LegalArrangementRequest.

        List of legal arrangement entities to be deleted.

        :return: The legal_arrangement_entity_codes of this LegalArrangementRequest.
        :rtype: List[str]
        """
        return self._legal_arrangement_entity_codes

    @legal_arrangement_entity_codes.setter
    def legal_arrangement_entity_codes(self, legal_arrangement_entity_codes):
        """Sets the legal_arrangement_entity_codes of this LegalArrangementRequest.

        List of legal arrangement entities to be deleted.

        :param legal_arrangement_entity_codes: The legal_arrangement_entity_codes of this LegalArrangementRequest.
        :type legal_arrangement_entity_codes: List[str]
        """

        self._legal_arrangement_entity_codes = legal_arrangement_entity_codes
