# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayoutMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account: str=None, payout_method_code: str=None, payout_method_reference: str=None, recurring_detail_reference: str=None, shopper_reference: str=None):
        """PayoutMethod - a model defined in OpenAPI

        :param merchant_account: The merchant_account of this PayoutMethod.
        :param payout_method_code: The payout_method_code of this PayoutMethod.
        :param payout_method_reference: The payout_method_reference of this PayoutMethod.
        :param recurring_detail_reference: The recurring_detail_reference of this PayoutMethod.
        :param shopper_reference: The shopper_reference of this PayoutMethod.
        """
        self.openapi_types = {
            'merchant_account': str,
            'payout_method_code': str,
            'payout_method_reference': str,
            'recurring_detail_reference': str,
            'shopper_reference': str
        }

        self.attribute_map = {
            'merchant_account': 'merchantAccount',
            'payout_method_code': 'payoutMethodCode',
            'payout_method_reference': 'payoutMethodReference',
            'recurring_detail_reference': 'recurringDetailReference',
            'shopper_reference': 'shopperReference'
        }

        self._merchant_account = merchant_account
        self._payout_method_code = payout_method_code
        self._payout_method_reference = payout_method_reference
        self._recurring_detail_reference = recurring_detail_reference
        self._shopper_reference = shopper_reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutMethod of this PayoutMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account(self):
        """Gets the merchant_account of this PayoutMethod.

        The [`merchantAccount`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_merchantAccount) you used in the `/payments` request when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :return: The merchant_account of this PayoutMethod.
        :rtype: str
        """
        return self._merchant_account

    @merchant_account.setter
    def merchant_account(self, merchant_account):
        """Sets the merchant_account of this PayoutMethod.

        The [`merchantAccount`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_merchantAccount) you used in the `/payments` request when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :param merchant_account: The merchant_account of this PayoutMethod.
        :type merchant_account: str
        """
        if merchant_account is None:
            raise ValueError("Invalid value for `merchant_account`, must not be `None`")

        self._merchant_account = merchant_account

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this PayoutMethod.

        Adyen-generated unique alphanumeric identifier (UUID) for the payout method, returned in the response when you create a payout method. Required when updating an existing payout method in an `/updateAccountHolder` request.

        :return: The payout_method_code of this PayoutMethod.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this PayoutMethod.

        Adyen-generated unique alphanumeric identifier (UUID) for the payout method, returned in the response when you create a payout method. Required when updating an existing payout method in an `/updateAccountHolder` request.

        :param payout_method_code: The payout_method_code of this PayoutMethod.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def payout_method_reference(self):
        """Gets the payout_method_reference of this PayoutMethod.

        Your reference for the payout method.

        :return: The payout_method_reference of this PayoutMethod.
        :rtype: str
        """
        return self._payout_method_reference

    @payout_method_reference.setter
    def payout_method_reference(self, payout_method_reference):
        """Sets the payout_method_reference of this PayoutMethod.

        Your reference for the payout method.

        :param payout_method_reference: The payout_method_reference of this PayoutMethod.
        :type payout_method_reference: str
        """

        self._payout_method_reference = payout_method_reference

    @property
    def recurring_detail_reference(self):
        """Gets the recurring_detail_reference of this PayoutMethod.

        The [`recurringDetailReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-recurring-recurringDetailReference)  returned in the `/payments` response when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :return: The recurring_detail_reference of this PayoutMethod.
        :rtype: str
        """
        return self._recurring_detail_reference

    @recurring_detail_reference.setter
    def recurring_detail_reference(self, recurring_detail_reference):
        """Sets the recurring_detail_reference of this PayoutMethod.

        The [`recurringDetailReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__resParam_additionalData-ResponseAdditionalDataCommon-recurring-recurringDetailReference)  returned in the `/payments` response when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :param recurring_detail_reference: The recurring_detail_reference of this PayoutMethod.
        :type recurring_detail_reference: str
        """
        if recurring_detail_reference is None:
            raise ValueError("Invalid value for `recurring_detail_reference`, must not be `None`")

        self._recurring_detail_reference = recurring_detail_reference

    @property
    def shopper_reference(self):
        """Gets the shopper_reference of this PayoutMethod.

        The [`shopperReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_shopperReference) you sent in the `/payments` request when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :return: The shopper_reference of this PayoutMethod.
        :rtype: str
        """
        return self._shopper_reference

    @shopper_reference.setter
    def shopper_reference(self, shopper_reference):
        """Sets the shopper_reference of this PayoutMethod.

        The [`shopperReference`](https://docs.adyen.com/api-explorer/#/CheckoutService/latest/post/payments__reqParam_shopperReference) you sent in the `/payments` request when you [saved the account holder's card details](https://docs.adyen.com/marketplaces-and-platforms/classic/payouts/manual-payout/payout-to-cards#check-and-store).

        :param shopper_reference: The shopper_reference of this PayoutMethod.
        :type shopper_reference: str
        """
        if shopper_reference is None:
            raise ValueError("Invalid value for `shopper_reference`, must not be `None`")

        self._shopper_reference = shopper_reference
