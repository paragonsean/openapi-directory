# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CloseAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None):
        """CloseAccountRequest - a model defined in OpenAPI

        :param account_code: The account_code of this CloseAccountRequest.
        """
        self.openapi_types = {
            'account_code': str
        }

        self.attribute_map = {
            'account_code': 'accountCode'
        }

        self._account_code = account_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloseAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloseAccountRequest of this CloseAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this CloseAccountRequest.

        The code of account to be closed.

        :return: The account_code of this CloseAccountRequest.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this CloseAccountRequest.

        The code of account to be closed.

        :param account_code: The account_code of this CloseAccountRequest.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code
