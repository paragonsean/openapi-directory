# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateAccountHolderStateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, disable: bool=None, reason: str=None, state_type: str=None):
        """UpdateAccountHolderStateRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this UpdateAccountHolderStateRequest.
        :param disable: The disable of this UpdateAccountHolderStateRequest.
        :param reason: The reason of this UpdateAccountHolderStateRequest.
        :param state_type: The state_type of this UpdateAccountHolderStateRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'disable': bool,
            'reason': str,
            'state_type': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'disable': 'disable',
            'reason': 'reason',
            'state_type': 'stateType'
        }

        self._account_holder_code = account_holder_code
        self._disable = disable
        self._reason = reason
        self._state_type = state_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountHolderStateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountHolderStateRequest of this UpdateAccountHolderStateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this UpdateAccountHolderStateRequest.

        The code of the Account Holder on which to update the state.

        :return: The account_holder_code of this UpdateAccountHolderStateRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this UpdateAccountHolderStateRequest.

        The code of the Account Holder on which to update the state.

        :param account_holder_code: The account_holder_code of this UpdateAccountHolderStateRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def disable(self):
        """Gets the disable of this UpdateAccountHolderStateRequest.

        If true, disable the requested state.  If false, enable the requested state.

        :return: The disable of this UpdateAccountHolderStateRequest.
        :rtype: bool
        """
        return self._disable

    @disable.setter
    def disable(self, disable):
        """Sets the disable of this UpdateAccountHolderStateRequest.

        If true, disable the requested state.  If false, enable the requested state.

        :param disable: The disable of this UpdateAccountHolderStateRequest.
        :type disable: bool
        """
        if disable is None:
            raise ValueError("Invalid value for `disable`, must not be `None`")

        self._disable = disable

    @property
    def reason(self):
        """Gets the reason of this UpdateAccountHolderStateRequest.

        The reason that the state is being updated. >Required if the state is being disabled.

        :return: The reason of this UpdateAccountHolderStateRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this UpdateAccountHolderStateRequest.

        The reason that the state is being updated. >Required if the state is being disabled.

        :param reason: The reason of this UpdateAccountHolderStateRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def state_type(self):
        """Gets the state_type of this UpdateAccountHolderStateRequest.

        The state to be updated. >Permitted values are: `Processing`, `Payout`

        :return: The state_type of this UpdateAccountHolderStateRequest.
        :rtype: str
        """
        return self._state_type

    @state_type.setter
    def state_type(self, state_type):
        """Sets the state_type of this UpdateAccountHolderStateRequest.

        The state to be updated. >Permitted values are: `Processing`, `Payout`

        :param state_type: The state_type of this UpdateAccountHolderStateRequest.
        :type state_type: str
        """
        allowed_values = ["LimitedPayout", "LimitedProcessing", "LimitlessPayout", "LimitlessProcessing", "Payout", "Processing"]  # noqa: E501
        if state_type not in allowed_values:
            raise ValueError(
                "Invalid value for `state_type` ({0}), must be one of {1}"
                .format(state_type, allowed_values)
            )

        self._state_type = state_type
