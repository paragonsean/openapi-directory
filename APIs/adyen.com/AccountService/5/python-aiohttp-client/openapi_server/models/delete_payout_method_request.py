# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeletePayoutMethodRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, payout_method_codes: List[str]=None):
        """DeletePayoutMethodRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DeletePayoutMethodRequest.
        :param payout_method_codes: The payout_method_codes of this DeletePayoutMethodRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'payout_method_codes': List[str]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'payout_method_codes': 'payoutMethodCodes'
        }

        self._account_holder_code = account_holder_code
        self._payout_method_codes = payout_method_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeletePayoutMethodRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeletePayoutMethodRequest of this DeletePayoutMethodRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DeletePayoutMethodRequest.

        The code of the account holder, from which to delete the payout methods.

        :return: The account_holder_code of this DeletePayoutMethodRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DeletePayoutMethodRequest.

        The code of the account holder, from which to delete the payout methods.

        :param account_holder_code: The account_holder_code of this DeletePayoutMethodRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def payout_method_codes(self):
        """Gets the payout_method_codes of this DeletePayoutMethodRequest.

        The codes of the payout methods to be deleted.

        :return: The payout_method_codes of this DeletePayoutMethodRequest.
        :rtype: List[str]
        """
        return self._payout_method_codes

    @payout_method_codes.setter
    def payout_method_codes(self, payout_method_codes):
        """Sets the payout_method_codes of this DeletePayoutMethodRequest.

        The codes of the payout methods to be deleted.

        :param payout_method_codes: The payout_method_codes of this DeletePayoutMethodRequest.
        :type payout_method_codes: List[str]
        """
        if payout_method_codes is None:
            raise ValueError("Invalid value for `payout_method_codes`, must not be `None`")

        self._payout_method_codes = payout_method_codes
