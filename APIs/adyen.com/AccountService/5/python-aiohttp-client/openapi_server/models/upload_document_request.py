# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_detail import DocumentDetail
from openapi_server import util


class UploadDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_content: str=None, document_detail: DocumentDetail=None):
        """UploadDocumentRequest - a model defined in OpenAPI

        :param document_content: The document_content of this UploadDocumentRequest.
        :param document_detail: The document_detail of this UploadDocumentRequest.
        """
        self.openapi_types = {
            'document_content': str,
            'document_detail': DocumentDetail
        }

        self.attribute_map = {
            'document_content': 'documentContent',
            'document_detail': 'documentDetail'
        }

        self._document_content = document_content
        self._document_detail = document_detail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadDocumentRequest of this UploadDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_content(self):
        """Gets the document_content of this UploadDocumentRequest.

        The content of the document, in Base64-encoded string format.  To learn about document requirements, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks).

        :return: The document_content of this UploadDocumentRequest.
        :rtype: str
        """
        return self._document_content

    @document_content.setter
    def document_content(self, document_content):
        """Sets the document_content of this UploadDocumentRequest.

        The content of the document, in Base64-encoded string format.  To learn about document requirements, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks).

        :param document_content: The document_content of this UploadDocumentRequest.
        :type document_content: str
        """
        if document_content is None:
            raise ValueError("Invalid value for `document_content`, must not be `None`")

        self._document_content = document_content

    @property
    def document_detail(self):
        """Gets the document_detail of this UploadDocumentRequest.

        Details of the document being submitted.

        :return: The document_detail of this UploadDocumentRequest.
        :rtype: DocumentDetail
        """
        return self._document_detail

    @document_detail.setter
    def document_detail(self, document_detail):
        """Sets the document_detail of this UploadDocumentRequest.

        Details of the document being submitted.

        :param document_detail: The document_detail of this UploadDocumentRequest.
        :type document_detail: DocumentDetail
        """
        if document_detail is None:
            raise ValueError("Invalid value for `document_detail`, must not be `None`")

        self._document_detail = document_detail
