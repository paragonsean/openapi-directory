# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.legal_arrangement_request import LegalArrangementRequest
from openapi_server import util


class DeleteLegalArrangementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, legal_arrangements: List[LegalArrangementRequest]=None):
        """DeleteLegalArrangementRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DeleteLegalArrangementRequest.
        :param legal_arrangements: The legal_arrangements of this DeleteLegalArrangementRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'legal_arrangements': List[LegalArrangementRequest]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'legal_arrangements': 'legalArrangements'
        }

        self._account_holder_code = account_holder_code
        self._legal_arrangements = legal_arrangements

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteLegalArrangementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteLegalArrangementRequest of this DeleteLegalArrangementRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DeleteLegalArrangementRequest.

        The code of the account holder.

        :return: The account_holder_code of this DeleteLegalArrangementRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DeleteLegalArrangementRequest.

        The code of the account holder.

        :param account_holder_code: The account_holder_code of this DeleteLegalArrangementRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def legal_arrangements(self):
        """Gets the legal_arrangements of this DeleteLegalArrangementRequest.

        List of legal arrangements.

        :return: The legal_arrangements of this DeleteLegalArrangementRequest.
        :rtype: List[LegalArrangementRequest]
        """
        return self._legal_arrangements

    @legal_arrangements.setter
    def legal_arrangements(self, legal_arrangements):
        """Sets the legal_arrangements of this DeleteLegalArrangementRequest.

        List of legal arrangements.

        :param legal_arrangements: The legal_arrangements of this DeleteLegalArrangementRequest.
        :type legal_arrangements: List[LegalArrangementRequest]
        """
        if legal_arrangements is None:
            raise ValueError("Invalid value for `legal_arrangements`, must not be `None`")

        self._legal_arrangements = legal_arrangements
