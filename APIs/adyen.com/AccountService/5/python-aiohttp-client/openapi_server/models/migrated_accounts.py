# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MigratedAccounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance_account_id: str=None, virtual_account_code: str=None):
        """MigratedAccounts - a model defined in OpenAPI

        :param balance_account_id: The balance_account_id of this MigratedAccounts.
        :param virtual_account_code: The virtual_account_code of this MigratedAccounts.
        """
        self.openapi_types = {
            'balance_account_id': str,
            'virtual_account_code': str
        }

        self.attribute_map = {
            'balance_account_id': 'balanceAccountId',
            'virtual_account_code': 'virtualAccountCode'
        }

        self._balance_account_id = balance_account_id
        self._virtual_account_code = virtual_account_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MigratedAccounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MigratedAccounts of this MigratedAccounts.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance_account_id(self):
        """Gets the balance_account_id of this MigratedAccounts.

        The unique identifier of the account of the migrated account holder in the balance platform.

        :return: The balance_account_id of this MigratedAccounts.
        :rtype: str
        """
        return self._balance_account_id

    @balance_account_id.setter
    def balance_account_id(self, balance_account_id):
        """Sets the balance_account_id of this MigratedAccounts.

        The unique identifier of the account of the migrated account holder in the balance platform.

        :param balance_account_id: The balance_account_id of this MigratedAccounts.
        :type balance_account_id: str
        """

        self._balance_account_id = balance_account_id

    @property
    def virtual_account_code(self):
        """Gets the virtual_account_code of this MigratedAccounts.

        The unique identifier of the account of the migrated account holder in the classic integration.

        :return: The virtual_account_code of this MigratedAccounts.
        :rtype: str
        """
        return self._virtual_account_code

    @virtual_account_code.setter
    def virtual_account_code(self, virtual_account_code):
        """Sets the virtual_account_code of this MigratedAccounts.

        The unique identifier of the account of the migrated account holder in the classic integration.

        :param virtual_account_code: The virtual_account_code of this MigratedAccounts.
        :type virtual_account_code: str
        """

        self._virtual_account_code = virtual_account_code
