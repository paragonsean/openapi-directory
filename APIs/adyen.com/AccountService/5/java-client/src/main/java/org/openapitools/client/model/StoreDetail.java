/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ViasAddress;
import org.openapitools.client.model.ViasPhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StoreDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:32.936423-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StoreDetail {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_FULL_PHONE_NUMBER = "fullPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FULL_PHONE_NUMBER)
  private String fullPhoneNumber;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_MERCHANT_ACCOUNT = "merchantAccount";
  @SerializedName(SERIALIZED_NAME_MERCHANT_ACCOUNT)
  private String merchantAccount;

  public static final String SERIALIZED_NAME_MERCHANT_CATEGORY_CODE = "merchantCategoryCode";
  @SerializedName(SERIALIZED_NAME_MERCHANT_CATEGORY_CODE)
  private String merchantCategoryCode;

  public static final String SERIALIZED_NAME_MERCHANT_HOUSE_NUMBER = "merchantHouseNumber";
  @SerializedName(SERIALIZED_NAME_MERCHANT_HOUSE_NUMBER)
  private String merchantHouseNumber;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private ViasPhoneNumber phoneNumber;

  /**
   * The sales channel. Possible values: **Ecommerce**, **POS**.
   */
  @JsonAdapter(ShopperInteractionEnum.Adapter.class)
  public enum ShopperInteractionEnum {
    ECOMMERCE("Ecommerce"),
    
    POS("POS");

    private String value;

    ShopperInteractionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShopperInteractionEnum fromValue(String value) {
      for (ShopperInteractionEnum b : ShopperInteractionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShopperInteractionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShopperInteractionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShopperInteractionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShopperInteractionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShopperInteractionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHOPPER_INTERACTION = "shopperInteraction";
  @SerializedName(SERIALIZED_NAME_SHOPPER_INTERACTION)
  private ShopperInteractionEnum shopperInteraction;

  public static final String SERIALIZED_NAME_SPLIT_CONFIGURATION_U_U_I_D = "splitConfigurationUUID";
  @SerializedName(SERIALIZED_NAME_SPLIT_CONFIGURATION_U_U_I_D)
  private String splitConfigurationUUID;

  /**
   * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("Active"),
    
    CLOSED("Closed"),
    
    INACTIVE("Inactive"),
    
    INACTIVE_WITH_MODIFICATIONS("InactiveWithModifications"),
    
    PENDING("Pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_STORE = "store";
  @SerializedName(SERIALIZED_NAME_STORE)
  private String store;

  public static final String SERIALIZED_NAME_STORE_NAME = "storeName";
  @SerializedName(SERIALIZED_NAME_STORE_NAME)
  private String storeName;

  public static final String SERIALIZED_NAME_STORE_REFERENCE = "storeReference";
  @SerializedName(SERIALIZED_NAME_STORE_REFERENCE)
  private String storeReference;

  public static final String SERIALIZED_NAME_VIRTUAL_ACCOUNT = "virtualAccount";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ACCOUNT)
  private String virtualAccount;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public StoreDetail() {
  }

  public StoreDetail address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the physical store where the account holder will process payments from.
   * @return address
   */
  @javax.annotation.Nonnull
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public StoreDetail fullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
    return this;
  }

  /**
   * The phone number of the store provided as a single string.  It will be handled as a landline phone.  Examples: \&quot;0031 6 11 22 33 44\&quot;, \&quot;+316/1122-3344\&quot;, \&quot;(0031) 611223344\&quot;
   * @return fullPhoneNumber
   */
  @javax.annotation.Nullable
  public String getFullPhoneNumber() {
    return fullPhoneNumber;
  }

  public void setFullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
  }


  public StoreDetail logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Store logo for payment method setup.
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public StoreDetail merchantAccount(String merchantAccount) {
    this.merchantAccount = merchantAccount;
    return this;
  }

  /**
   * The merchant account to which the store belongs.
   * @return merchantAccount
   */
  @javax.annotation.Nonnull
  public String getMerchantAccount() {
    return merchantAccount;
  }

  public void setMerchantAccount(String merchantAccount) {
    this.merchantAccount = merchantAccount;
  }


  public StoreDetail merchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
    return this;
  }

  /**
   * The merchant category code (MCC) that classifies the business of the account holder.
   * @return merchantCategoryCode
   */
  @javax.annotation.Nonnull
  public String getMerchantCategoryCode() {
    return merchantCategoryCode;
  }

  public void setMerchantCategoryCode(String merchantCategoryCode) {
    this.merchantCategoryCode = merchantCategoryCode;
  }


  public StoreDetail merchantHouseNumber(String merchantHouseNumber) {
    this.merchantHouseNumber = merchantHouseNumber;
    return this;
  }

  /**
   * Merchant house number for payment method setup.
   * @return merchantHouseNumber
   */
  @javax.annotation.Nullable
  public String getMerchantHouseNumber() {
    return merchantHouseNumber;
  }

  public void setMerchantHouseNumber(String merchantHouseNumber) {
    this.merchantHouseNumber = merchantHouseNumber;
  }


  public StoreDetail phoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the store.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public ViasPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public StoreDetail shopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
    return this;
  }

  /**
   * The sales channel. Possible values: **Ecommerce**, **POS**.
   * @return shopperInteraction
   */
  @javax.annotation.Nullable
  public ShopperInteractionEnum getShopperInteraction() {
    return shopperInteraction;
  }

  public void setShopperInteraction(ShopperInteractionEnum shopperInteraction) {
    this.shopperInteraction = shopperInteraction;
  }


  public StoreDetail splitConfigurationUUID(String splitConfigurationUUID) {
    this.splitConfigurationUUID = splitConfigurationUUID;
    return this;
  }

  /**
   * The unique reference for the split configuration, returned when you configure splits in your Customer Area. When this is provided, the &#x60;virtualAccount&#x60; is also required. Adyen uses the configuration and the &#x60;virtualAccount&#x60; to split funds between accounts in your platform.
   * @return splitConfigurationUUID
   */
  @javax.annotation.Nullable
  public String getSplitConfigurationUUID() {
    return splitConfigurationUUID;
  }

  public void setSplitConfigurationUUID(String splitConfigurationUUID) {
    this.splitConfigurationUUID = splitConfigurationUUID;
  }


  public StoreDetail status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the store. Possible values: **Pending**, **Active**, **Inactive**, **InactiveWithModifications**, **Closed**.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public StoreDetail store(String store) {
    this.store = store;
    return this;
  }

  /**
   * Adyen-generated unique alphanumeric identifier (UUID) for the store, returned in the response when you create a store. Required when updating an existing store in an &#x60;/updateAccountHolder&#x60; request.
   * @return store
   */
  @javax.annotation.Nullable
  public String getStore() {
    return store;
  }

  public void setStore(String store) {
    this.store = store;
  }


  public StoreDetail storeName(String storeName) {
    this.storeName = storeName;
    return this;
  }

  /**
   * The name of the account holder&#39;s store. This value is shown in shopper statements.  * Length: Between 3 to 22 characters   * The following characters are *not* supported: **:;}{$#@!|&lt;&gt;%^*+&#x3D;\\\\**
   * @return storeName
   */
  @javax.annotation.Nullable
  public String getStoreName() {
    return storeName;
  }

  public void setStoreName(String storeName) {
    this.storeName = storeName;
  }


  public StoreDetail storeReference(String storeReference) {
    this.storeReference = storeReference;
    return this;
  }

  /**
   * Your unique identifier for the store. The Customer Area also uses this value for the store description.   * Length: Between 3 to 128 characters  * The following characters are *not* supported: **:;}{$#@!|&lt;&gt;%^*+&#x3D;\\\\**
   * @return storeReference
   */
  @javax.annotation.Nullable
  public String getStoreReference() {
    return storeReference;
  }

  public void setStoreReference(String storeReference) {
    this.storeReference = storeReference;
  }


  public StoreDetail virtualAccount(String virtualAccount) {
    this.virtualAccount = virtualAccount;
    return this;
  }

  /**
   * The account holder&#39;s &#x60;accountCode&#x60; where the split amount will be sent. Required when you provide the &#x60;splitConfigurationUUID&#x60;.
   * @return virtualAccount
   */
  @javax.annotation.Nullable
  public String getVirtualAccount() {
    return virtualAccount;
  }

  public void setVirtualAccount(String virtualAccount) {
    this.virtualAccount = virtualAccount;
  }


  public StoreDetail webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * URL of the ecommerce store.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoreDetail storeDetail = (StoreDetail) o;
    return Objects.equals(this.address, storeDetail.address) &&
        Objects.equals(this.fullPhoneNumber, storeDetail.fullPhoneNumber) &&
        Objects.equals(this.logo, storeDetail.logo) &&
        Objects.equals(this.merchantAccount, storeDetail.merchantAccount) &&
        Objects.equals(this.merchantCategoryCode, storeDetail.merchantCategoryCode) &&
        Objects.equals(this.merchantHouseNumber, storeDetail.merchantHouseNumber) &&
        Objects.equals(this.phoneNumber, storeDetail.phoneNumber) &&
        Objects.equals(this.shopperInteraction, storeDetail.shopperInteraction) &&
        Objects.equals(this.splitConfigurationUUID, storeDetail.splitConfigurationUUID) &&
        Objects.equals(this.status, storeDetail.status) &&
        Objects.equals(this.store, storeDetail.store) &&
        Objects.equals(this.storeName, storeDetail.storeName) &&
        Objects.equals(this.storeReference, storeDetail.storeReference) &&
        Objects.equals(this.virtualAccount, storeDetail.virtualAccount) &&
        Objects.equals(this.webAddress, storeDetail.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, fullPhoneNumber, logo, merchantAccount, merchantCategoryCode, merchantHouseNumber, phoneNumber, shopperInteraction, splitConfigurationUUID, status, store, storeName, storeReference, virtualAccount, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoreDetail {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    fullPhoneNumber: ").append(toIndentedString(fullPhoneNumber)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    merchantAccount: ").append(toIndentedString(merchantAccount)).append("\n");
    sb.append("    merchantCategoryCode: ").append(toIndentedString(merchantCategoryCode)).append("\n");
    sb.append("    merchantHouseNumber: ").append(toIndentedString(merchantHouseNumber)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    shopperInteraction: ").append(toIndentedString(shopperInteraction)).append("\n");
    sb.append("    splitConfigurationUUID: ").append(toIndentedString(splitConfigurationUUID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    store: ").append(toIndentedString(store)).append("\n");
    sb.append("    storeName: ").append(toIndentedString(storeName)).append("\n");
    sb.append("    storeReference: ").append(toIndentedString(storeReference)).append("\n");
    sb.append("    virtualAccount: ").append(toIndentedString(virtualAccount)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("fullPhoneNumber");
    openapiFields.add("logo");
    openapiFields.add("merchantAccount");
    openapiFields.add("merchantCategoryCode");
    openapiFields.add("merchantHouseNumber");
    openapiFields.add("phoneNumber");
    openapiFields.add("shopperInteraction");
    openapiFields.add("splitConfigurationUUID");
    openapiFields.add("status");
    openapiFields.add("store");
    openapiFields.add("storeName");
    openapiFields.add("storeReference");
    openapiFields.add("virtualAccount");
    openapiFields.add("webAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("merchantAccount");
    openapiRequiredFields.add("merchantCategoryCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StoreDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoreDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoreDetail is not found in the empty JSON string", StoreDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoreDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoreDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : StoreDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      ViasAddress.validateJsonElement(jsonObj.get("address"));
      if ((jsonObj.get("fullPhoneNumber") != null && !jsonObj.get("fullPhoneNumber").isJsonNull()) && !jsonObj.get("fullPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPhoneNumber").toString()));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if (!jsonObj.get("merchantAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantAccount").toString()));
      }
      if (!jsonObj.get("merchantCategoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantCategoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantCategoryCode").toString()));
      }
      if ((jsonObj.get("merchantHouseNumber") != null && !jsonObj.get("merchantHouseNumber").isJsonNull()) && !jsonObj.get("merchantHouseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchantHouseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchantHouseNumber").toString()));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        ViasPhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) && !jsonObj.get("shopperInteraction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shopperInteraction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shopperInteraction").toString()));
      }
      // validate the optional field `shopperInteraction`
      if (jsonObj.get("shopperInteraction") != null && !jsonObj.get("shopperInteraction").isJsonNull()) {
        ShopperInteractionEnum.validateJsonElement(jsonObj.get("shopperInteraction"));
      }
      if ((jsonObj.get("splitConfigurationUUID") != null && !jsonObj.get("splitConfigurationUUID").isJsonNull()) && !jsonObj.get("splitConfigurationUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `splitConfigurationUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("splitConfigurationUUID").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("store") != null && !jsonObj.get("store").isJsonNull()) && !jsonObj.get("store").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `store` to be a primitive type in the JSON string but got `%s`", jsonObj.get("store").toString()));
      }
      if ((jsonObj.get("storeName") != null && !jsonObj.get("storeName").isJsonNull()) && !jsonObj.get("storeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeName").toString()));
      }
      if ((jsonObj.get("storeReference") != null && !jsonObj.get("storeReference").isJsonNull()) && !jsonObj.get("storeReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storeReference").toString()));
      }
      if ((jsonObj.get("virtualAccount") != null && !jsonObj.get("virtualAccount").isJsonNull()) && !jsonObj.get("virtualAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualAccount").toString()));
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoreDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoreDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoreDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoreDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<StoreDetail>() {
           @Override
           public void write(JsonWriter out, StoreDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoreDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StoreDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StoreDetail
   * @throws IOException if the JSON string is invalid with respect to StoreDetail
   */
  public static StoreDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoreDetail.class);
  }

  /**
   * Convert an instance of StoreDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

