/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MigratedAccounts;
import org.openapitools.client.model.MigratedShareholders;
import org.openapitools.client.model.MigratedStores;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MigrationData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:32.936423-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MigrationData {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_ID = "accountHolderId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_ID)
  private String accountHolderId;

  public static final String SERIALIZED_NAME_BALANCE_PLATFORM = "balancePlatform";
  @SerializedName(SERIALIZED_NAME_BALANCE_PLATFORM)
  private String balancePlatform;

  public static final String SERIALIZED_NAME_MIGRATED = "migrated";
  @SerializedName(SERIALIZED_NAME_MIGRATED)
  private Boolean migrated;

  public static final String SERIALIZED_NAME_MIGRATED_ACCOUNTS = "migratedAccounts";
  @SerializedName(SERIALIZED_NAME_MIGRATED_ACCOUNTS)
  private List<MigratedAccounts> migratedAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIGRATED_SHAREHOLDERS = "migratedShareholders";
  @SerializedName(SERIALIZED_NAME_MIGRATED_SHAREHOLDERS)
  private List<MigratedShareholders> migratedShareholders = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIGRATED_STORES = "migratedStores";
  @SerializedName(SERIALIZED_NAME_MIGRATED_STORES)
  private List<MigratedStores> migratedStores = new ArrayList<>();

  public static final String SERIALIZED_NAME_MIGRATION_DATE = "migrationDate";
  @SerializedName(SERIALIZED_NAME_MIGRATION_DATE)
  private OffsetDateTime migrationDate;

  public MigrationData() {
  }

  public MigrationData accountHolderId(String accountHolderId) {
    this.accountHolderId = accountHolderId;
    return this;
  }

  /**
   * The unique identifier of the account holder in the balance platform.
   * @return accountHolderId
   */
  @javax.annotation.Nullable
  public String getAccountHolderId() {
    return accountHolderId;
  }

  public void setAccountHolderId(String accountHolderId) {
    this.accountHolderId = accountHolderId;
  }


  public MigrationData balancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
    return this;
  }

  /**
   * The unique identifier of the balance platfrom to which the account holder was migrated.
   * @return balancePlatform
   */
  @javax.annotation.Nullable
  public String getBalancePlatform() {
    return balancePlatform;
  }

  public void setBalancePlatform(String balancePlatform) {
    this.balancePlatform = balancePlatform;
  }


  public MigrationData migrated(Boolean migrated) {
    this.migrated = migrated;
    return this;
  }

  /**
   * Set to **true** if the account holder has been migrated.
   * @return migrated
   */
  @javax.annotation.Nullable
  public Boolean getMigrated() {
    return migrated;
  }

  public void setMigrated(Boolean migrated) {
    this.migrated = migrated;
  }


  public MigrationData migratedAccounts(List<MigratedAccounts> migratedAccounts) {
    this.migratedAccounts = migratedAccounts;
    return this;
  }

  public MigrationData addMigratedAccountsItem(MigratedAccounts migratedAccountsItem) {
    if (this.migratedAccounts == null) {
      this.migratedAccounts = new ArrayList<>();
    }
    this.migratedAccounts.add(migratedAccountsItem);
    return this;
  }

  /**
   * Contains the mapping of virtual account codes (classic integration) to the balance account codes (balance platform) associated with the migrated account holder.
   * @return migratedAccounts
   */
  @javax.annotation.Nullable
  public List<MigratedAccounts> getMigratedAccounts() {
    return migratedAccounts;
  }

  public void setMigratedAccounts(List<MigratedAccounts> migratedAccounts) {
    this.migratedAccounts = migratedAccounts;
  }


  public MigrationData migratedShareholders(List<MigratedShareholders> migratedShareholders) {
    this.migratedShareholders = migratedShareholders;
    return this;
  }

  public MigrationData addMigratedShareholdersItem(MigratedShareholders migratedShareholdersItem) {
    if (this.migratedShareholders == null) {
      this.migratedShareholders = new ArrayList<>();
    }
    this.migratedShareholders.add(migratedShareholdersItem);
    return this;
  }

  /**
   * Contains the mapping of shareholders associated with the migrated legal entities.
   * @return migratedShareholders
   */
  @javax.annotation.Nullable
  public List<MigratedShareholders> getMigratedShareholders() {
    return migratedShareholders;
  }

  public void setMigratedShareholders(List<MigratedShareholders> migratedShareholders) {
    this.migratedShareholders = migratedShareholders;
  }


  public MigrationData migratedStores(List<MigratedStores> migratedStores) {
    this.migratedStores = migratedStores;
    return this;
  }

  public MigrationData addMigratedStoresItem(MigratedStores migratedStoresItem) {
    if (this.migratedStores == null) {
      this.migratedStores = new ArrayList<>();
    }
    this.migratedStores.add(migratedStoresItem);
    return this;
  }

  /**
   * Contains the mapping of business lines and stores associated with the migrated account holder.
   * @return migratedStores
   */
  @javax.annotation.Nullable
  public List<MigratedStores> getMigratedStores() {
    return migratedStores;
  }

  public void setMigratedStores(List<MigratedStores> migratedStores) {
    this.migratedStores = migratedStores;
  }


  public MigrationData migrationDate(OffsetDateTime migrationDate) {
    this.migrationDate = migrationDate;
    return this;
  }

  /**
   * The date when account holder was migrated.
   * @return migrationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMigrationDate() {
    return migrationDate;
  }

  public void setMigrationDate(OffsetDateTime migrationDate) {
    this.migrationDate = migrationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MigrationData migrationData = (MigrationData) o;
    return Objects.equals(this.accountHolderId, migrationData.accountHolderId) &&
        Objects.equals(this.balancePlatform, migrationData.balancePlatform) &&
        Objects.equals(this.migrated, migrationData.migrated) &&
        Objects.equals(this.migratedAccounts, migrationData.migratedAccounts) &&
        Objects.equals(this.migratedShareholders, migrationData.migratedShareholders) &&
        Objects.equals(this.migratedStores, migrationData.migratedStores) &&
        Objects.equals(this.migrationDate, migrationData.migrationDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderId, balancePlatform, migrated, migratedAccounts, migratedShareholders, migratedStores, migrationDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MigrationData {\n");
    sb.append("    accountHolderId: ").append(toIndentedString(accountHolderId)).append("\n");
    sb.append("    balancePlatform: ").append(toIndentedString(balancePlatform)).append("\n");
    sb.append("    migrated: ").append(toIndentedString(migrated)).append("\n");
    sb.append("    migratedAccounts: ").append(toIndentedString(migratedAccounts)).append("\n");
    sb.append("    migratedShareholders: ").append(toIndentedString(migratedShareholders)).append("\n");
    sb.append("    migratedStores: ").append(toIndentedString(migratedStores)).append("\n");
    sb.append("    migrationDate: ").append(toIndentedString(migrationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderId");
    openapiFields.add("balancePlatform");
    openapiFields.add("migrated");
    openapiFields.add("migratedAccounts");
    openapiFields.add("migratedShareholders");
    openapiFields.add("migratedStores");
    openapiFields.add("migrationDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MigrationData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MigrationData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MigrationData is not found in the empty JSON string", MigrationData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MigrationData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MigrationData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderId") != null && !jsonObj.get("accountHolderId").isJsonNull()) && !jsonObj.get("accountHolderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderId").toString()));
      }
      if ((jsonObj.get("balancePlatform") != null && !jsonObj.get("balancePlatform").isJsonNull()) && !jsonObj.get("balancePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `balancePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("balancePlatform").toString()));
      }
      if (jsonObj.get("migratedAccounts") != null && !jsonObj.get("migratedAccounts").isJsonNull()) {
        JsonArray jsonArraymigratedAccounts = jsonObj.getAsJsonArray("migratedAccounts");
        if (jsonArraymigratedAccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("migratedAccounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `migratedAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("migratedAccounts").toString()));
          }

          // validate the optional field `migratedAccounts` (array)
          for (int i = 0; i < jsonArraymigratedAccounts.size(); i++) {
            MigratedAccounts.validateJsonElement(jsonArraymigratedAccounts.get(i));
          };
        }
      }
      if (jsonObj.get("migratedShareholders") != null && !jsonObj.get("migratedShareholders").isJsonNull()) {
        JsonArray jsonArraymigratedShareholders = jsonObj.getAsJsonArray("migratedShareholders");
        if (jsonArraymigratedShareholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("migratedShareholders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `migratedShareholders` to be an array in the JSON string but got `%s`", jsonObj.get("migratedShareholders").toString()));
          }

          // validate the optional field `migratedShareholders` (array)
          for (int i = 0; i < jsonArraymigratedShareholders.size(); i++) {
            MigratedShareholders.validateJsonElement(jsonArraymigratedShareholders.get(i));
          };
        }
      }
      if (jsonObj.get("migratedStores") != null && !jsonObj.get("migratedStores").isJsonNull()) {
        JsonArray jsonArraymigratedStores = jsonObj.getAsJsonArray("migratedStores");
        if (jsonArraymigratedStores != null) {
          // ensure the json data is an array
          if (!jsonObj.get("migratedStores").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `migratedStores` to be an array in the JSON string but got `%s`", jsonObj.get("migratedStores").toString()));
          }

          // validate the optional field `migratedStores` (array)
          for (int i = 0; i < jsonArraymigratedStores.size(); i++) {
            MigratedStores.validateJsonElement(jsonArraymigratedStores.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MigrationData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MigrationData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MigrationData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MigrationData.class));

       return (TypeAdapter<T>) new TypeAdapter<MigrationData>() {
           @Override
           public void write(JsonWriter out, MigrationData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MigrationData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MigrationData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MigrationData
   * @throws IOException if the JSON string is invalid with respect to MigrationData
   */
  public static MigrationData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MigrationData.class);
  }

  /**
   * Convert an instance of MigrationData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

