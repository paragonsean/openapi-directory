/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v5/createAccountHolder ```
 *
 * The version of the OpenAPI document: 5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ShareholderContact;
import org.openapitools.client.model.SignatoryContact;
import org.openapitools.client.model.UltimateParentCompany;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BusinessDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:32.936423-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BusinessDetails {
  public static final String SERIALIZED_NAME_DOING_BUSINESS_AS = "doingBusinessAs";
  @SerializedName(SERIALIZED_NAME_DOING_BUSINESS_AS)
  private String doingBusinessAs;

  public static final String SERIALIZED_NAME_LEGAL_BUSINESS_NAME = "legalBusinessName";
  @SerializedName(SERIALIZED_NAME_LEGAL_BUSINESS_NAME)
  private String legalBusinessName;

  public static final String SERIALIZED_NAME_LISTED_ULTIMATE_PARENT_COMPANY = "listedUltimateParentCompany";
  @SerializedName(SERIALIZED_NAME_LISTED_ULTIMATE_PARENT_COMPANY)
  private List<UltimateParentCompany> listedUltimateParentCompany = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_SHAREHOLDERS = "shareholders";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDERS)
  private List<ShareholderContact> shareholders = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIGNATORIES = "signatories";
  @SerializedName(SERIALIZED_NAME_SIGNATORIES)
  private List<SignatoryContact> signatories = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_ID = "taxId";
  @SerializedName(SERIALIZED_NAME_TAX_ID)
  private String taxId;

  public BusinessDetails() {
  }

  public BusinessDetails doingBusinessAs(String doingBusinessAs) {
    this.doingBusinessAs = doingBusinessAs;
    return this;
  }

  /**
   * The registered name of the company (if it differs from the legal name of the company).
   * @return doingBusinessAs
   */
  @javax.annotation.Nullable
  public String getDoingBusinessAs() {
    return doingBusinessAs;
  }

  public void setDoingBusinessAs(String doingBusinessAs) {
    this.doingBusinessAs = doingBusinessAs;
  }


  public BusinessDetails legalBusinessName(String legalBusinessName) {
    this.legalBusinessName = legalBusinessName;
    return this;
  }

  /**
   * The legal name of the company.
   * @return legalBusinessName
   */
  @javax.annotation.Nullable
  public String getLegalBusinessName() {
    return legalBusinessName;
  }

  public void setLegalBusinessName(String legalBusinessName) {
    this.legalBusinessName = legalBusinessName;
  }


  public BusinessDetails listedUltimateParentCompany(List<UltimateParentCompany> listedUltimateParentCompany) {
    this.listedUltimateParentCompany = listedUltimateParentCompany;
    return this;
  }

  public BusinessDetails addListedUltimateParentCompanyItem(UltimateParentCompany listedUltimateParentCompanyItem) {
    if (this.listedUltimateParentCompany == null) {
      this.listedUltimateParentCompany = new ArrayList<>();
    }
    this.listedUltimateParentCompany.add(listedUltimateParentCompanyItem);
    return this;
  }

  /**
   * Information about the parent public company. Required if the account holder is 100% owned by a publicly listed company.
   * @return listedUltimateParentCompany
   */
  @javax.annotation.Nullable
  public List<UltimateParentCompany> getListedUltimateParentCompany() {
    return listedUltimateParentCompany;
  }

  public void setListedUltimateParentCompany(List<UltimateParentCompany> listedUltimateParentCompany) {
    this.listedUltimateParentCompany = listedUltimateParentCompany;
  }


  public BusinessDetails registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The registration number of the company.
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public BusinessDetails shareholders(List<ShareholderContact> shareholders) {
    this.shareholders = shareholders;
    return this;
  }

  public BusinessDetails addShareholdersItem(ShareholderContact shareholdersItem) {
    if (this.shareholders == null) {
      this.shareholders = new ArrayList<>();
    }
    this.shareholders.add(shareholdersItem);
    return this;
  }

  /**
   * Array containing information about individuals associated with the account holder either through ownership or control. For details about how you can identify them, refer to [our verification guide](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process#identify-ubos).
   * @return shareholders
   */
  @javax.annotation.Nullable
  public List<ShareholderContact> getShareholders() {
    return shareholders;
  }

  public void setShareholders(List<ShareholderContact> shareholders) {
    this.shareholders = shareholders;
  }


  public BusinessDetails signatories(List<SignatoryContact> signatories) {
    this.signatories = signatories;
    return this;
  }

  public BusinessDetails addSignatoriesItem(SignatoryContact signatoriesItem) {
    if (this.signatories == null) {
      this.signatories = new ArrayList<>();
    }
    this.signatories.add(signatoriesItem);
    return this;
  }

  /**
   * Signatories associated with the company. Each array entry should represent one signatory.
   * @return signatories
   */
  @javax.annotation.Nullable
  public List<SignatoryContact> getSignatories() {
    return signatories;
  }

  public void setSignatories(List<SignatoryContact> signatories) {
    this.signatories = signatories;
  }


  public BusinessDetails taxId(String taxId) {
    this.taxId = taxId;
    return this;
  }

  /**
   * The tax ID of the company.
   * @return taxId
   */
  @javax.annotation.Nullable
  public String getTaxId() {
    return taxId;
  }

  public void setTaxId(String taxId) {
    this.taxId = taxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDetails businessDetails = (BusinessDetails) o;
    return Objects.equals(this.doingBusinessAs, businessDetails.doingBusinessAs) &&
        Objects.equals(this.legalBusinessName, businessDetails.legalBusinessName) &&
        Objects.equals(this.listedUltimateParentCompany, businessDetails.listedUltimateParentCompany) &&
        Objects.equals(this.registrationNumber, businessDetails.registrationNumber) &&
        Objects.equals(this.shareholders, businessDetails.shareholders) &&
        Objects.equals(this.signatories, businessDetails.signatories) &&
        Objects.equals(this.taxId, businessDetails.taxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(doingBusinessAs, legalBusinessName, listedUltimateParentCompany, registrationNumber, shareholders, signatories, taxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDetails {\n");
    sb.append("    doingBusinessAs: ").append(toIndentedString(doingBusinessAs)).append("\n");
    sb.append("    legalBusinessName: ").append(toIndentedString(legalBusinessName)).append("\n");
    sb.append("    listedUltimateParentCompany: ").append(toIndentedString(listedUltimateParentCompany)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    shareholders: ").append(toIndentedString(shareholders)).append("\n");
    sb.append("    signatories: ").append(toIndentedString(signatories)).append("\n");
    sb.append("    taxId: ").append(toIndentedString(taxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("doingBusinessAs");
    openapiFields.add("legalBusinessName");
    openapiFields.add("listedUltimateParentCompany");
    openapiFields.add("registrationNumber");
    openapiFields.add("shareholders");
    openapiFields.add("signatories");
    openapiFields.add("taxId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDetails is not found in the empty JSON string", BusinessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("doingBusinessAs") != null && !jsonObj.get("doingBusinessAs").isJsonNull()) && !jsonObj.get("doingBusinessAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doingBusinessAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doingBusinessAs").toString()));
      }
      if ((jsonObj.get("legalBusinessName") != null && !jsonObj.get("legalBusinessName").isJsonNull()) && !jsonObj.get("legalBusinessName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalBusinessName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalBusinessName").toString()));
      }
      if (jsonObj.get("listedUltimateParentCompany") != null && !jsonObj.get("listedUltimateParentCompany").isJsonNull()) {
        JsonArray jsonArraylistedUltimateParentCompany = jsonObj.getAsJsonArray("listedUltimateParentCompany");
        if (jsonArraylistedUltimateParentCompany != null) {
          // ensure the json data is an array
          if (!jsonObj.get("listedUltimateParentCompany").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `listedUltimateParentCompany` to be an array in the JSON string but got `%s`", jsonObj.get("listedUltimateParentCompany").toString()));
          }

          // validate the optional field `listedUltimateParentCompany` (array)
          for (int i = 0; i < jsonArraylistedUltimateParentCompany.size(); i++) {
            UltimateParentCompany.validateJsonElement(jsonArraylistedUltimateParentCompany.get(i));
          };
        }
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if (jsonObj.get("shareholders") != null && !jsonObj.get("shareholders").isJsonNull()) {
        JsonArray jsonArrayshareholders = jsonObj.getAsJsonArray("shareholders");
        if (jsonArrayshareholders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("shareholders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `shareholders` to be an array in the JSON string but got `%s`", jsonObj.get("shareholders").toString()));
          }

          // validate the optional field `shareholders` (array)
          for (int i = 0; i < jsonArrayshareholders.size(); i++) {
            ShareholderContact.validateJsonElement(jsonArrayshareholders.get(i));
          };
        }
      }
      if (jsonObj.get("signatories") != null && !jsonObj.get("signatories").isJsonNull()) {
        JsonArray jsonArraysignatories = jsonObj.getAsJsonArray("signatories");
        if (jsonArraysignatories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("signatories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `signatories` to be an array in the JSON string but got `%s`", jsonObj.get("signatories").toString()));
          }

          // validate the optional field `signatories` (array)
          for (int i = 0; i < jsonArraysignatories.size(); i++) {
            SignatoryContact.validateJsonElement(jsonArraysignatories.get(i));
          };
        }
      }
      if ((jsonObj.get("taxId") != null && !jsonObj.get("taxId").isJsonNull()) && !jsonObj.get("taxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDetails>() {
           @Override
           public void write(JsonWriter out, BusinessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessDetails
   * @throws IOException if the JSON string is invalid with respect to BusinessDetails
   */
  public static BusinessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDetails.class);
  }

  /**
   * Convert an instance of BusinessDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

