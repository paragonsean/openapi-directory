/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PersonalDocumentData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PersonalDocumentDataWrapper
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:31.122416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PersonalDocumentDataWrapper {
  public static final String SERIALIZED_NAME_PERSONAL_DOCUMENT_DATA = "PersonalDocumentData";
  @SerializedName(SERIALIZED_NAME_PERSONAL_DOCUMENT_DATA)
  private PersonalDocumentData personalDocumentData;

  public PersonalDocumentDataWrapper() {
  }

  public PersonalDocumentDataWrapper personalDocumentData(PersonalDocumentData personalDocumentData) {
    this.personalDocumentData = personalDocumentData;
    return this;
  }

  /**
   * Get personalDocumentData
   * @return personalDocumentData
   */
  @javax.annotation.Nullable
  public PersonalDocumentData getPersonalDocumentData() {
    return personalDocumentData;
  }

  public void setPersonalDocumentData(PersonalDocumentData personalDocumentData) {
    this.personalDocumentData = personalDocumentData;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PersonalDocumentDataWrapper personalDocumentDataWrapper = (PersonalDocumentDataWrapper) o;
    return Objects.equals(this.personalDocumentData, personalDocumentDataWrapper.personalDocumentData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(personalDocumentData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PersonalDocumentDataWrapper {\n");
    sb.append("    personalDocumentData: ").append(toIndentedString(personalDocumentData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PersonalDocumentData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PersonalDocumentDataWrapper
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PersonalDocumentDataWrapper.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PersonalDocumentDataWrapper is not found in the empty JSON string", PersonalDocumentDataWrapper.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PersonalDocumentDataWrapper.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PersonalDocumentDataWrapper` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `PersonalDocumentData`
      if (jsonObj.get("PersonalDocumentData") != null && !jsonObj.get("PersonalDocumentData").isJsonNull()) {
        PersonalDocumentData.validateJsonElement(jsonObj.get("PersonalDocumentData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PersonalDocumentDataWrapper.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PersonalDocumentDataWrapper' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PersonalDocumentDataWrapper> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PersonalDocumentDataWrapper.class));

       return (TypeAdapter<T>) new TypeAdapter<PersonalDocumentDataWrapper>() {
           @Override
           public void write(JsonWriter out, PersonalDocumentDataWrapper value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PersonalDocumentDataWrapper read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PersonalDocumentDataWrapper given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PersonalDocumentDataWrapper
   * @throws IOException if the JSON string is invalid with respect to PersonalDocumentDataWrapper
   */
  public static PersonalDocumentDataWrapper fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PersonalDocumentDataWrapper.class);
  }

  /**
   * Convert an instance of PersonalDocumentDataWrapper to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

