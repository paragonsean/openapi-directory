/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PersonalDocumentDataWrapper;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ViasPersonalData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:31.122416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ViasPersonalData {
  public static final String SERIALIZED_NAME_DATE_OF_BIRTH = "dateOfBirth";
  @SerializedName(SERIALIZED_NAME_DATE_OF_BIRTH)
  private String dateOfBirth;

  public static final String SERIALIZED_NAME_DOCUMENT_DATA = "documentData";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DATA)
  private List<PersonalDocumentDataWrapper> documentData = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID_NUMBER = "idNumber";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ID_NUMBER)
  private String idNumber;

  public static final String SERIALIZED_NAME_NATIONALITY = "nationality";
  @SerializedName(SERIALIZED_NAME_NATIONALITY)
  private String nationality;

  public ViasPersonalData() {
  }

  public ViasPersonalData dateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
    return this;
  }

  /**
   * The person&#39;s date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.
   * @return dateOfBirth
   */
  @javax.annotation.Nullable
  public String getDateOfBirth() {
    return dateOfBirth;
  }

  public void setDateOfBirth(String dateOfBirth) {
    this.dateOfBirth = dateOfBirth;
  }


  public ViasPersonalData documentData(List<PersonalDocumentDataWrapper> documentData) {
    this.documentData = documentData;
    return this;
  }

  public ViasPersonalData addDocumentDataItem(PersonalDocumentDataWrapper documentDataItem) {
    if (this.documentData == null) {
      this.documentData = new ArrayList<>();
    }
    this.documentData.add(documentDataItem);
    return this;
  }

  /**
   * Array that contains information about the person&#39;s identification document. You can submit only one entry per document type.
   * @return documentData
   */
  @javax.annotation.Nullable
  public List<PersonalDocumentDataWrapper> getDocumentData() {
    return documentData;
  }

  public void setDocumentData(List<PersonalDocumentDataWrapper> documentData) {
    this.documentData = documentData;
  }


  @Deprecated
  public ViasPersonalData idNumber(String idNumber) {
    this.idNumber = idNumber;
    return this;
  }

  /**
   * An ID number of the person.
   * @return idNumber
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getIdNumber() {
    return idNumber;
  }

  @Deprecated
  public void setIdNumber(String idNumber) {
    this.idNumber = idNumber;
  }


  public ViasPersonalData nationality(String nationality) {
    this.nationality = nationality;
    return this;
  }

  /**
   * The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. 
   * @return nationality
   */
  @javax.annotation.Nullable
  public String getNationality() {
    return nationality;
  }

  public void setNationality(String nationality) {
    this.nationality = nationality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViasPersonalData viasPersonalData = (ViasPersonalData) o;
    return Objects.equals(this.dateOfBirth, viasPersonalData.dateOfBirth) &&
        Objects.equals(this.documentData, viasPersonalData.documentData) &&
        Objects.equals(this.idNumber, viasPersonalData.idNumber) &&
        Objects.equals(this.nationality, viasPersonalData.nationality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateOfBirth, documentData, idNumber, nationality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViasPersonalData {\n");
    sb.append("    dateOfBirth: ").append(toIndentedString(dateOfBirth)).append("\n");
    sb.append("    documentData: ").append(toIndentedString(documentData)).append("\n");
    sb.append("    idNumber: ").append(toIndentedString(idNumber)).append("\n");
    sb.append("    nationality: ").append(toIndentedString(nationality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dateOfBirth");
    openapiFields.add("documentData");
    openapiFields.add("idNumber");
    openapiFields.add("nationality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ViasPersonalData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ViasPersonalData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViasPersonalData is not found in the empty JSON string", ViasPersonalData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ViasPersonalData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViasPersonalData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dateOfBirth") != null && !jsonObj.get("dateOfBirth").isJsonNull()) && !jsonObj.get("dateOfBirth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfBirth").toString()));
      }
      if (jsonObj.get("documentData") != null && !jsonObj.get("documentData").isJsonNull()) {
        JsonArray jsonArraydocumentData = jsonObj.getAsJsonArray("documentData");
        if (jsonArraydocumentData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("documentData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `documentData` to be an array in the JSON string but got `%s`", jsonObj.get("documentData").toString()));
          }

          // validate the optional field `documentData` (array)
          for (int i = 0; i < jsonArraydocumentData.size(); i++) {
            PersonalDocumentDataWrapper.validateJsonElement(jsonArraydocumentData.get(i));
          };
        }
      }
      if ((jsonObj.get("idNumber") != null && !jsonObj.get("idNumber").isJsonNull()) && !jsonObj.get("idNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idNumber").toString()));
      }
      if ((jsonObj.get("nationality") != null && !jsonObj.get("nationality").isJsonNull()) && !jsonObj.get("nationality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationality").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViasPersonalData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViasPersonalData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViasPersonalData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViasPersonalData.class));

       return (TypeAdapter<T>) new TypeAdapter<ViasPersonalData>() {
           @Override
           public void write(JsonWriter out, ViasPersonalData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViasPersonalData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ViasPersonalData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ViasPersonalData
   * @throws IOException if the JSON string is invalid with respect to ViasPersonalData
   */
  public static ViasPersonalData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViasPersonalData.class);
  }

  /**
   * Convert an instance of ViasPersonalData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

