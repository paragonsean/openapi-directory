/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ViasAddress;
import org.openapitools.client.model.ViasName;
import org.openapitools.client.model.ViasPersonalData;
import org.openapitools.client.model.ViasPhoneNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ShareholderContact
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:31.122416-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareholderContact {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FULL_PHONE_NUMBER = "fullPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FULL_PHONE_NUMBER)
  private String fullPhoneNumber;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private ViasName name;

  public static final String SERIALIZED_NAME_PERSONAL_DATA = "personalData";
  @SerializedName(SERIALIZED_NAME_PERSONAL_DATA)
  private ViasPersonalData personalData;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  private ViasPhoneNumber phoneNumber;

  public static final String SERIALIZED_NAME_SHAREHOLDER_CODE = "shareholderCode";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_CODE)
  private String shareholderCode;

  /**
   * Specifies how the person is associated with the account holder.   Possible values:   * **Owner**: Individuals who directly or indirectly own 25% or more of a company.  * **Controller**: Individuals who are members of senior management staff responsible for managing a company or organization.
   */
  @JsonAdapter(ShareholderTypeEnum.Adapter.class)
  public enum ShareholderTypeEnum {
    CONTROLLER("Controller"),
    
    OWNER("Owner"),
    
    SIGNATORY("Signatory");

    private String value;

    ShareholderTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareholderTypeEnum fromValue(String value) {
      for (ShareholderTypeEnum b : ShareholderTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareholderTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareholderTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareholderTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareholderTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareholderTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHAREHOLDER_TYPE = "shareholderType";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_TYPE)
  private ShareholderTypeEnum shareholderType;

  public static final String SERIALIZED_NAME_WEB_ADDRESS = "webAddress";
  @SerializedName(SERIALIZED_NAME_WEB_ADDRESS)
  private String webAddress;

  public ShareholderContact() {
  }

  public ShareholderContact address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the person.
   * @return address
   */
  @javax.annotation.Nullable
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public ShareholderContact email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The e-mail address of the person.
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ShareholderContact fullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
    return this;
  }

  /**
   * The phone number of the person provided as a single string.  It will be handled as a landline phone. Examples: \&quot;0031 6 11 22 33 44\&quot;, \&quot;+316/1122-3344\&quot;, \&quot;(0031) 611223344\&quot;
   * @return fullPhoneNumber
   */
  @javax.annotation.Nullable
  public String getFullPhoneNumber() {
    return fullPhoneNumber;
  }

  public void setFullPhoneNumber(String fullPhoneNumber) {
    this.fullPhoneNumber = fullPhoneNumber;
  }


  public ShareholderContact jobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
    return this;
  }

  /**
   * Job title of the person. Required when the &#x60;shareholderType&#x60; is **Controller**.  Example values: **Chief Executive Officer**, **Chief Financial Officer**, **Chief Operating Officer**, **President**, **Vice President**, **Executive President**, **Managing Member**, **Partner**, **Treasurer**, **Director**, or **Other**.
   * @return jobTitle
   */
  @javax.annotation.Nullable
  public String getJobTitle() {
    return jobTitle;
  }

  public void setJobTitle(String jobTitle) {
    this.jobTitle = jobTitle;
  }


  public ShareholderContact name(ViasName name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the person.
   * @return name
   */
  @javax.annotation.Nullable
  public ViasName getName() {
    return name;
  }

  public void setName(ViasName name) {
    this.name = name;
  }


  public ShareholderContact personalData(ViasPersonalData personalData) {
    this.personalData = personalData;
    return this;
  }

  /**
   * Contains information about the person.
   * @return personalData
   */
  @javax.annotation.Nullable
  public ViasPersonalData getPersonalData() {
    return personalData;
  }

  public void setPersonalData(ViasPersonalData personalData) {
    this.personalData = personalData;
  }


  public ShareholderContact phoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * The phone number of the person.
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public ViasPhoneNumber getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(ViasPhoneNumber phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public ShareholderContact shareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
    return this;
  }

  /**
   * The unique identifier (UUID) of the shareholder entry. &gt;**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Shareholder will be created with a procedurally-generated UUID.**  &gt;**If, during an Account Holder create request, a UUID is provided, the creation of Account Holder will fail with a validation Error..**  &gt;**If, during an Account Holder update request, a UUID that is not correlated with an existing Shareholder is provided, the update of the Shareholder will fail.**  &gt;**If, during an Account Holder update request, a UUID that is correlated with an existing Shareholder is provided, the existing Shareholder will be updated.** 
   * @return shareholderCode
   */
  @javax.annotation.Nullable
  public String getShareholderCode() {
    return shareholderCode;
  }

  public void setShareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
  }


  public ShareholderContact shareholderType(ShareholderTypeEnum shareholderType) {
    this.shareholderType = shareholderType;
    return this;
  }

  /**
   * Specifies how the person is associated with the account holder.   Possible values:   * **Owner**: Individuals who directly or indirectly own 25% or more of a company.  * **Controller**: Individuals who are members of senior management staff responsible for managing a company or organization.
   * @return shareholderType
   */
  @javax.annotation.Nullable
  public ShareholderTypeEnum getShareholderType() {
    return shareholderType;
  }

  public void setShareholderType(ShareholderTypeEnum shareholderType) {
    this.shareholderType = shareholderType;
  }


  public ShareholderContact webAddress(String webAddress) {
    this.webAddress = webAddress;
    return this;
  }

  /**
   * The URL of the person&#39;s website.
   * @return webAddress
   */
  @javax.annotation.Nullable
  public String getWebAddress() {
    return webAddress;
  }

  public void setWebAddress(String webAddress) {
    this.webAddress = webAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareholderContact shareholderContact = (ShareholderContact) o;
    return Objects.equals(this.address, shareholderContact.address) &&
        Objects.equals(this.email, shareholderContact.email) &&
        Objects.equals(this.fullPhoneNumber, shareholderContact.fullPhoneNumber) &&
        Objects.equals(this.jobTitle, shareholderContact.jobTitle) &&
        Objects.equals(this.name, shareholderContact.name) &&
        Objects.equals(this.personalData, shareholderContact.personalData) &&
        Objects.equals(this.phoneNumber, shareholderContact.phoneNumber) &&
        Objects.equals(this.shareholderCode, shareholderContact.shareholderCode) &&
        Objects.equals(this.shareholderType, shareholderContact.shareholderType) &&
        Objects.equals(this.webAddress, shareholderContact.webAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, fullPhoneNumber, jobTitle, name, personalData, phoneNumber, shareholderCode, shareholderType, webAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareholderContact {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    fullPhoneNumber: ").append(toIndentedString(fullPhoneNumber)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    personalData: ").append(toIndentedString(personalData)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    shareholderCode: ").append(toIndentedString(shareholderCode)).append("\n");
    sb.append("    shareholderType: ").append(toIndentedString(shareholderType)).append("\n");
    sb.append("    webAddress: ").append(toIndentedString(webAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("fullPhoneNumber");
    openapiFields.add("jobTitle");
    openapiFields.add("name");
    openapiFields.add("personalData");
    openapiFields.add("phoneNumber");
    openapiFields.add("shareholderCode");
    openapiFields.add("shareholderType");
    openapiFields.add("webAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareholderContact
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareholderContact.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareholderContact is not found in the empty JSON string", ShareholderContact.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareholderContact.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareholderContact` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        ViasAddress.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("fullPhoneNumber") != null && !jsonObj.get("fullPhoneNumber").isJsonNull()) && !jsonObj.get("fullPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullPhoneNumber").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      // validate the optional field `name`
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        ViasName.validateJsonElement(jsonObj.get("name"));
      }
      // validate the optional field `personalData`
      if (jsonObj.get("personalData") != null && !jsonObj.get("personalData").isJsonNull()) {
        ViasPersonalData.validateJsonElement(jsonObj.get("personalData"));
      }
      // validate the optional field `phoneNumber`
      if (jsonObj.get("phoneNumber") != null && !jsonObj.get("phoneNumber").isJsonNull()) {
        ViasPhoneNumber.validateJsonElement(jsonObj.get("phoneNumber"));
      }
      if ((jsonObj.get("shareholderCode") != null && !jsonObj.get("shareholderCode").isJsonNull()) && !jsonObj.get("shareholderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderCode").toString()));
      }
      if ((jsonObj.get("shareholderType") != null && !jsonObj.get("shareholderType").isJsonNull()) && !jsonObj.get("shareholderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderType").toString()));
      }
      // validate the optional field `shareholderType`
      if (jsonObj.get("shareholderType") != null && !jsonObj.get("shareholderType").isJsonNull()) {
        ShareholderTypeEnum.validateJsonElement(jsonObj.get("shareholderType"));
      }
      if ((jsonObj.get("webAddress") != null && !jsonObj.get("webAddress").isJsonNull()) && !jsonObj.get("webAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareholderContact.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareholderContact' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareholderContact> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareholderContact.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareholderContact>() {
           @Override
           public void write(JsonWriter out, ShareholderContact value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareholderContact read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareholderContact given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareholderContact
   * @throws IOException if the JSON string is invalid with respect to ShareholderContact
   */
  public static ShareholderContact fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareholderContact.class);
  }

  /**
   * Convert an instance of ShareholderContact to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

