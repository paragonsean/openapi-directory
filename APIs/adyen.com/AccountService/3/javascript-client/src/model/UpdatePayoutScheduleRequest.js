/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdatePayoutScheduleRequest model module.
 * @module model/UpdatePayoutScheduleRequest
 * @version 3
 */
class UpdatePayoutScheduleRequest {
    /**
     * Constructs a new <code>UpdatePayoutScheduleRequest</code>.
     * @alias module:model/UpdatePayoutScheduleRequest
     * @param schedule {module:model/UpdatePayoutScheduleRequest.ScheduleEnum} The payout schedule to which the account is to be updated. Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`. `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
     */
    constructor(schedule) { 
        
        UpdatePayoutScheduleRequest.initialize(this, schedule);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schedule) { 
        obj['schedule'] = schedule;
    }

    /**
     * Constructs a <code>UpdatePayoutScheduleRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdatePayoutScheduleRequest} obj Optional instance to populate.
     * @return {module:model/UpdatePayoutScheduleRequest} The populated <code>UpdatePayoutScheduleRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdatePayoutScheduleRequest();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
            if (data.hasOwnProperty('schedule')) {
                obj['schedule'] = ApiClient.convertToType(data['schedule'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdatePayoutScheduleRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdatePayoutScheduleRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UpdatePayoutScheduleRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }
        // ensure the json data is a string
        if (data['schedule'] && !(typeof data['schedule'] === 'string' || data['schedule'] instanceof String)) {
            throw new Error("Expected the field `schedule` to be a primitive type in the JSON string but got " + data['schedule']);
        }

        return true;
    }


}

UpdatePayoutScheduleRequest.RequiredProperties = ["schedule"];

/**
 * Direction on how to handle any payouts that have already been scheduled. Permitted values: * `CLOSE` will close the existing batch of payouts. * `UPDATE` will reschedule the existing batch to the new schedule. * `NOTHING` (**default**) will allow the payout to proceed.
 * @member {module:model/UpdatePayoutScheduleRequest.ActionEnum} action
 */
UpdatePayoutScheduleRequest.prototype['action'] = undefined;

/**
 * The reason for the payout schedule update. > This field is required when the `schedule` parameter is set to `HOLD`.
 * @member {String} reason
 */
UpdatePayoutScheduleRequest.prototype['reason'] = undefined;

/**
 * The payout schedule to which the account is to be updated. Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`. `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.
 * @member {module:model/UpdatePayoutScheduleRequest.ScheduleEnum} schedule
 */
UpdatePayoutScheduleRequest.prototype['schedule'] = undefined;





/**
 * Allowed values for the <code>action</code> property.
 * @enum {String}
 * @readonly
 */
UpdatePayoutScheduleRequest['ActionEnum'] = {

    /**
     * value: "CLOSE"
     * @const
     */
    "CLOSE": "CLOSE",

    /**
     * value: "NOTHING"
     * @const
     */
    "NOTHING": "NOTHING",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE"
};


/**
 * Allowed values for the <code>schedule</code> property.
 * @enum {String}
 * @readonly
 */
UpdatePayoutScheduleRequest['ScheduleEnum'] = {

    /**
     * value: "BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT"
     * @const
     */
    "BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT": "BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT",

    /**
     * value: "DAILY"
     * @const
     */
    "DAILY": "DAILY",

    /**
     * value: "DAILY_AU"
     * @const
     */
    "DAILY_AU": "DAILY_AU",

    /**
     * value: "DAILY_EU"
     * @const
     */
    "DAILY_EU": "DAILY_EU",

    /**
     * value: "DAILY_SG"
     * @const
     */
    "DAILY_SG": "DAILY_SG",

    /**
     * value: "DAILY_US"
     * @const
     */
    "DAILY_US": "DAILY_US",

    /**
     * value: "HOLD"
     * @const
     */
    "HOLD": "HOLD",

    /**
     * value: "MONTHLY"
     * @const
     */
    "MONTHLY": "MONTHLY",

    /**
     * value: "WEEKLY"
     * @const
     */
    "WEEKLY": "WEEKLY",

    /**
     * value: "WEEKLY_MON_TO_FRI_AU"
     * @const
     */
    "WEEKLY_MON_TO_FRI_AU": "WEEKLY_MON_TO_FRI_AU",

    /**
     * value: "WEEKLY_MON_TO_FRI_EU"
     * @const
     */
    "WEEKLY_MON_TO_FRI_EU": "WEEKLY_MON_TO_FRI_EU",

    /**
     * value: "WEEKLY_MON_TO_FRI_US"
     * @const
     */
    "WEEKLY_MON_TO_FRI_US": "WEEKLY_MON_TO_FRI_US",

    /**
     * value: "WEEKLY_ON_TUE_FRI_MIDNIGHT"
     * @const
     */
    "WEEKLY_ON_TUE_FRI_MIDNIGHT": "WEEKLY_ON_TUE_FRI_MIDNIGHT",

    /**
     * value: "WEEKLY_SUN_TO_THU_AU"
     * @const
     */
    "WEEKLY_SUN_TO_THU_AU": "WEEKLY_SUN_TO_THU_AU",

    /**
     * value: "WEEKLY_SUN_TO_THU_US"
     * @const
     */
    "WEEKLY_SUN_TO_THU_US": "WEEKLY_SUN_TO_THU_US"
};



export default UpdatePayoutScheduleRequest;

