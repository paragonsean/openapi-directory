/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DocumentDetail model module.
 * @module model/DocumentDetail
 * @version 3
 */
class DocumentDetail {
    /**
     * Constructs a new <code>DocumentDetail</code>.
     * @alias module:model/DocumentDetail
     * @param documentType {module:model/DocumentDetail.DocumentTypeEnum} The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder's legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 
     */
    constructor(documentType) { 
        
        DocumentDetail.initialize(this, documentType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, documentType) { 
        obj['documentType'] = documentType;
    }

    /**
     * Constructs a <code>DocumentDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DocumentDetail} obj Optional instance to populate.
     * @return {module:model/DocumentDetail} The populated <code>DocumentDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DocumentDetail();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('bankAccountUUID')) {
                obj['bankAccountUUID'] = ApiClient.convertToType(data['bankAccountUUID'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('shareholderCode')) {
                obj['shareholderCode'] = ApiClient.convertToType(data['shareholderCode'], 'String');
            }
            if (data.hasOwnProperty('signatoryCode')) {
                obj['signatoryCode'] = ApiClient.convertToType(data['signatoryCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DocumentDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DocumentDetail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DocumentDetail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        // ensure the json data is a string
        if (data['bankAccountUUID'] && !(typeof data['bankAccountUUID'] === 'string' || data['bankAccountUUID'] instanceof String)) {
            throw new Error("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got " + data['bankAccountUUID']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['documentType'] && !(typeof data['documentType'] === 'string' || data['documentType'] instanceof String)) {
            throw new Error("Expected the field `documentType` to be a primitive type in the JSON string but got " + data['documentType']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is a string
        if (data['shareholderCode'] && !(typeof data['shareholderCode'] === 'string' || data['shareholderCode'] instanceof String)) {
            throw new Error("Expected the field `shareholderCode` to be a primitive type in the JSON string but got " + data['shareholderCode']);
        }
        // ensure the json data is a string
        if (data['signatoryCode'] && !(typeof data['signatoryCode'] === 'string' || data['signatoryCode'] instanceof String)) {
            throw new Error("Expected the field `signatoryCode` to be a primitive type in the JSON string but got " + data['signatoryCode']);
        }

        return true;
    }


}

DocumentDetail.RequiredProperties = ["documentType"];

/**
 * The code of account holder, to which the document applies.
 * @member {String} accountHolderCode
 */
DocumentDetail.prototype['accountHolderCode'] = undefined;

/**
 * The Adyen-generated [`bankAccountUUID`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-bankAccountDetails-bankAccountUUID) to which the document must be linked. Refer to [Bank account check](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/bank-account-check#uploading-a-bank-statement) for details on when a document should be submitted. >Required if the `documentType` is **BANK_STATEMENT**, where a document is being submitted in order to verify a bank account. 
 * @member {String} bankAccountUUID
 */
DocumentDetail.prototype['bankAccountUUID'] = undefined;

/**
 * Description of the document.
 * @member {String} description
 */
DocumentDetail.prototype['description'] = undefined;

/**
 * The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder's legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 
 * @member {module:model/DocumentDetail.DocumentTypeEnum} documentType
 */
DocumentDetail.prototype['documentType'] = undefined;

/**
 * Filename of the document.
 * @member {String} filename
 */
DocumentDetail.prototype['filename'] = undefined;

/**
 * The Adyen-generated [`shareholderCode`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-shareholders-shareholderCode) to which the document must be linked. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when a document should be submitted. >Required if the account holder has a `legalEntity` of type **Business** and the `documentType` is either **PASSPORT**, **ID_CARD_FRONT**, **ID_CARD_BACK**, **DRIVING_LICENCE_FRONT**, or **DRIVING_LICENCE_BACK**. 
 * @member {String} shareholderCode
 */
DocumentDetail.prototype['shareholderCode'] = undefined;

/**
 * The Adyen-generated [`signatoryCode`](https://docs.adyen.com/api-explorer/#/Account/v6/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-signatories-signatoryCode) to which the document must be linked.
 * @member {String} signatoryCode
 */
DocumentDetail.prototype['signatoryCode'] = undefined;





/**
 * Allowed values for the <code>documentType</code> property.
 * @enum {String}
 * @readonly
 */
DocumentDetail['DocumentTypeEnum'] = {

    /**
     * value: "BANK_STATEMENT"
     * @const
     */
    "BANK_STATEMENT": "BANK_STATEMENT",

    /**
     * value: "BSN"
     * @const
     */
    "BSN": "BSN",

    /**
     * value: "DRIVING_LICENCE"
     * @const
     */
    "DRIVING_LICENCE": "DRIVING_LICENCE",

    /**
     * value: "DRIVING_LICENCE_BACK"
     * @const
     */
    "DRIVING_LICENCE_BACK": "DRIVING_LICENCE_BACK",

    /**
     * value: "DRIVING_LICENCE_FRONT"
     * @const
     */
    "DRIVING_LICENCE_FRONT": "DRIVING_LICENCE_FRONT",

    /**
     * value: "ID_CARD"
     * @const
     */
    "ID_CARD": "ID_CARD",

    /**
     * value: "ID_CARD_BACK"
     * @const
     */
    "ID_CARD_BACK": "ID_CARD_BACK",

    /**
     * value: "ID_CARD_FRONT"
     * @const
     */
    "ID_CARD_FRONT": "ID_CARD_FRONT",

    /**
     * value: "PASSPORT"
     * @const
     */
    "PASSPORT": "PASSPORT",

    /**
     * value: "PROOF_OF_RESIDENCY"
     * @const
     */
    "PROOF_OF_RESIDENCY": "PROOF_OF_RESIDENCY",

    /**
     * value: "SSN"
     * @const
     */
    "SSN": "SSN"
};



export default DocumentDetail;

