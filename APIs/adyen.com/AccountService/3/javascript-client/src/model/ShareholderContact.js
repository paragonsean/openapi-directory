/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ViasAddress from './ViasAddress';
import ViasName from './ViasName';
import ViasPersonalData from './ViasPersonalData';
import ViasPhoneNumber from './ViasPhoneNumber';

/**
 * The ShareholderContact model module.
 * @module model/ShareholderContact
 * @version 3
 */
class ShareholderContact {
    /**
     * Constructs a new <code>ShareholderContact</code>.
     * @alias module:model/ShareholderContact
     */
    constructor() { 
        
        ShareholderContact.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareholderContact</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareholderContact} obj Optional instance to populate.
     * @return {module:model/ShareholderContact} The populated <code>ShareholderContact</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareholderContact();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ViasAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fullPhoneNumber')) {
                obj['fullPhoneNumber'] = ApiClient.convertToType(data['fullPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ViasName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('personalData')) {
                obj['personalData'] = ViasPersonalData.constructFromObject(data['personalData']);
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ViasPhoneNumber.constructFromObject(data['phoneNumber']);
            }
            if (data.hasOwnProperty('shareholderCode')) {
                obj['shareholderCode'] = ApiClient.convertToType(data['shareholderCode'], 'String');
            }
            if (data.hasOwnProperty('shareholderType')) {
                obj['shareholderType'] = ApiClient.convertToType(data['shareholderType'], 'String');
            }
            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareholderContact</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareholderContact</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          ViasAddress.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fullPhoneNumber'] && !(typeof data['fullPhoneNumber'] === 'string' || data['fullPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got " + data['fullPhoneNumber']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          ViasName.validateJSON(data['name']);
        }
        // validate the optional field `personalData`
        if (data['personalData']) { // data not null
          ViasPersonalData.validateJSON(data['personalData']);
        }
        // validate the optional field `phoneNumber`
        if (data['phoneNumber']) { // data not null
          ViasPhoneNumber.validateJSON(data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['shareholderCode'] && !(typeof data['shareholderCode'] === 'string' || data['shareholderCode'] instanceof String)) {
            throw new Error("Expected the field `shareholderCode` to be a primitive type in the JSON string but got " + data['shareholderCode']);
        }
        // ensure the json data is a string
        if (data['shareholderType'] && !(typeof data['shareholderType'] === 'string' || data['shareholderType'] instanceof String)) {
            throw new Error("Expected the field `shareholderType` to be a primitive type in the JSON string but got " + data['shareholderType']);
        }
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }

        return true;
    }


}



/**
 * The address of the person.
 * @member {module:model/ViasAddress} address
 */
ShareholderContact.prototype['address'] = undefined;

/**
 * The e-mail address of the person.
 * @member {String} email
 */
ShareholderContact.prototype['email'] = undefined;

/**
 * The phone number of the person provided as a single string.  It will be handled as a landline phone. Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"
 * @member {String} fullPhoneNumber
 */
ShareholderContact.prototype['fullPhoneNumber'] = undefined;

/**
 * Job title of the person. Required when the `shareholderType` is **Controller**.  Example values: **Chief Executive Officer**, **Chief Financial Officer**, **Chief Operating Officer**, **President**, **Vice President**, **Executive President**, **Managing Member**, **Partner**, **Treasurer**, **Director**, or **Other**.
 * @member {String} jobTitle
 */
ShareholderContact.prototype['jobTitle'] = undefined;

/**
 * The name of the person.
 * @member {module:model/ViasName} name
 */
ShareholderContact.prototype['name'] = undefined;

/**
 * Contains information about the person.
 * @member {module:model/ViasPersonalData} personalData
 */
ShareholderContact.prototype['personalData'] = undefined;

/**
 * The phone number of the person.
 * @member {module:model/ViasPhoneNumber} phoneNumber
 */
ShareholderContact.prototype['phoneNumber'] = undefined;

/**
 * The unique identifier (UUID) of the shareholder entry. >**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Shareholder will be created with a procedurally-generated UUID.**  >**If, during an Account Holder create request, a UUID is provided, the creation of Account Holder will fail with a validation Error..**  >**If, during an Account Holder update request, a UUID that is not correlated with an existing Shareholder is provided, the update of the Shareholder will fail.**  >**If, during an Account Holder update request, a UUID that is correlated with an existing Shareholder is provided, the existing Shareholder will be updated.** 
 * @member {String} shareholderCode
 */
ShareholderContact.prototype['shareholderCode'] = undefined;

/**
 * Specifies how the person is associated with the account holder.   Possible values:   * **Owner**: Individuals who directly or indirectly own 25% or more of a company.  * **Controller**: Individuals who are members of senior management staff responsible for managing a company or organization.
 * @member {module:model/ShareholderContact.ShareholderTypeEnum} shareholderType
 */
ShareholderContact.prototype['shareholderType'] = undefined;

/**
 * The URL of the person's website.
 * @member {String} webAddress
 */
ShareholderContact.prototype['webAddress'] = undefined;





/**
 * Allowed values for the <code>shareholderType</code> property.
 * @enum {String}
 * @readonly
 */
ShareholderContact['ShareholderTypeEnum'] = {

    /**
     * value: "Controller"
     * @const
     */
    "Controller": "Controller",

    /**
     * value: "Owner"
     * @const
     */
    "Owner": "Owner",

    /**
     * value: "Signatory"
     * @const
     */
    "Signatory": "Signatory"
};



export default ShareholderContact;

