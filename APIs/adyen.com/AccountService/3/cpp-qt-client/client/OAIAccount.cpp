/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v3/createAccountHolder ```
 *
 * The version of the OpenAPI document: 3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_account_code_isSet = false;
    m_account_code_isValid = false;

    m_beneficiary_account_isSet = false;
    m_beneficiary_account_isValid = false;

    m_beneficiary_merchant_reference_isSet = false;
    m_beneficiary_merchant_reference_isValid = false;

    m_payout_schedule_isSet = false;
    m_payout_schedule_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_account_code_isValid = ::OpenAPI::fromJsonValue(m_account_code, json[QString("accountCode")]);
    m_account_code_isSet = !json[QString("accountCode")].isNull() && m_account_code_isValid;

    m_beneficiary_account_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_account, json[QString("beneficiaryAccount")]);
    m_beneficiary_account_isSet = !json[QString("beneficiaryAccount")].isNull() && m_beneficiary_account_isValid;

    m_beneficiary_merchant_reference_isValid = ::OpenAPI::fromJsonValue(m_beneficiary_merchant_reference, json[QString("beneficiaryMerchantReference")]);
    m_beneficiary_merchant_reference_isSet = !json[QString("beneficiaryMerchantReference")].isNull() && m_beneficiary_merchant_reference_isValid;

    m_payout_schedule_isValid = ::OpenAPI::fromJsonValue(m_payout_schedule, json[QString("payoutSchedule")]);
    m_payout_schedule_isSet = !json[QString("payoutSchedule")].isNull() && m_payout_schedule_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_code_isSet) {
        obj.insert(QString("accountCode"), ::OpenAPI::toJsonValue(m_account_code));
    }
    if (m_beneficiary_account_isSet) {
        obj.insert(QString("beneficiaryAccount"), ::OpenAPI::toJsonValue(m_beneficiary_account));
    }
    if (m_beneficiary_merchant_reference_isSet) {
        obj.insert(QString("beneficiaryMerchantReference"), ::OpenAPI::toJsonValue(m_beneficiary_merchant_reference));
    }
    if (m_payout_schedule.isSet()) {
        obj.insert(QString("payoutSchedule"), ::OpenAPI::toJsonValue(m_payout_schedule));
    }
    return obj;
}

QString OAIAccount::getAccountCode() const {
    return m_account_code;
}
void OAIAccount::setAccountCode(const QString &account_code) {
    m_account_code = account_code;
    m_account_code_isSet = true;
}

bool OAIAccount::is_account_code_Set() const{
    return m_account_code_isSet;
}

bool OAIAccount::is_account_code_Valid() const{
    return m_account_code_isValid;
}

QString OAIAccount::getBeneficiaryAccount() const {
    return m_beneficiary_account;
}
void OAIAccount::setBeneficiaryAccount(const QString &beneficiary_account) {
    m_beneficiary_account = beneficiary_account;
    m_beneficiary_account_isSet = true;
}

bool OAIAccount::is_beneficiary_account_Set() const{
    return m_beneficiary_account_isSet;
}

bool OAIAccount::is_beneficiary_account_Valid() const{
    return m_beneficiary_account_isValid;
}

QString OAIAccount::getBeneficiaryMerchantReference() const {
    return m_beneficiary_merchant_reference;
}
void OAIAccount::setBeneficiaryMerchantReference(const QString &beneficiary_merchant_reference) {
    m_beneficiary_merchant_reference = beneficiary_merchant_reference;
    m_beneficiary_merchant_reference_isSet = true;
}

bool OAIAccount::is_beneficiary_merchant_reference_Set() const{
    return m_beneficiary_merchant_reference_isSet;
}

bool OAIAccount::is_beneficiary_merchant_reference_Valid() const{
    return m_beneficiary_merchant_reference_isValid;
}

OAIPayoutScheduleResponse OAIAccount::getPayoutSchedule() const {
    return m_payout_schedule;
}
void OAIAccount::setPayoutSchedule(const OAIPayoutScheduleResponse &payout_schedule) {
    m_payout_schedule = payout_schedule;
    m_payout_schedule_isSet = true;
}

bool OAIAccount::is_payout_schedule_Set() const{
    return m_payout_schedule_isSet;
}

bool OAIAccount::is_payout_schedule_Valid() const{
    return m_payout_schedule_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_beneficiary_merchant_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payout_schedule.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
