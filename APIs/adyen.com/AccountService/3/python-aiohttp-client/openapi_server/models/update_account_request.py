# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_payout_schedule_request import UpdatePayoutScheduleRequest
from openapi_server import util


class UpdateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, payout_schedule: UpdatePayoutScheduleRequest=None):
        """UpdateAccountRequest - a model defined in OpenAPI

        :param account_code: The account_code of this UpdateAccountRequest.
        :param payout_schedule: The payout_schedule of this UpdateAccountRequest.
        """
        self.openapi_types = {
            'account_code': str,
            'payout_schedule': UpdatePayoutScheduleRequest
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'payout_schedule': 'payoutSchedule'
        }

        self._account_code = account_code
        self._payout_schedule = payout_schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountRequest of this UpdateAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this UpdateAccountRequest.

        The code of the account to update.

        :return: The account_code of this UpdateAccountRequest.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this UpdateAccountRequest.

        The code of the account to update.

        :param account_code: The account_code of this UpdateAccountRequest.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this UpdateAccountRequest.

        The details of the payout schedule, to which the account should be updated.

        :return: The payout_schedule of this UpdateAccountRequest.
        :rtype: UpdatePayoutScheduleRequest
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this UpdateAccountRequest.

        The details of the payout schedule, to which the account should be updated.

        :param payout_schedule: The payout_schedule of this UpdateAccountRequest.
        :type payout_schedule: UpdatePayoutScheduleRequest
        """
        if payout_schedule is None:
            raise ValueError("Invalid value for `payout_schedule`, must not be `None`")

        self._payout_schedule = payout_schedule
