# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteSignatoriesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, signatory_codes: List[str]=None):
        """DeleteSignatoriesRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DeleteSignatoriesRequest.
        :param signatory_codes: The signatory_codes of this DeleteSignatoriesRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'signatory_codes': List[str]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'signatory_codes': 'signatoryCodes'
        }

        self._account_holder_code = account_holder_code
        self._signatory_codes = signatory_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteSignatoriesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteSignatoriesRequest of this DeleteSignatoriesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DeleteSignatoriesRequest.

        The code of the account holder from which to delete the signatories.

        :return: The account_holder_code of this DeleteSignatoriesRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DeleteSignatoriesRequest.

        The code of the account holder from which to delete the signatories.

        :param account_holder_code: The account_holder_code of this DeleteSignatoriesRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def signatory_codes(self):
        """Gets the signatory_codes of this DeleteSignatoriesRequest.

        Array of codes of the signatories to be deleted.

        :return: The signatory_codes of this DeleteSignatoriesRequest.
        :rtype: List[str]
        """
        return self._signatory_codes

    @signatory_codes.setter
    def signatory_codes(self, signatory_codes):
        """Sets the signatory_codes of this DeleteSignatoriesRequest.

        Array of codes of the signatories to be deleted.

        :param signatory_codes: The signatory_codes of this DeleteSignatoriesRequest.
        :type signatory_codes: List[str]
        """
        if signatory_codes is None:
            raise ValueError("Invalid value for `signatory_codes`, must not be `None`")

        self._signatory_codes = signatory_codes
