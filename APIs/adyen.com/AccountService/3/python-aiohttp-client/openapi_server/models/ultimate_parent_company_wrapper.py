# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ultimate_parent_company import UltimateParentCompany
from openapi_server import util


class UltimateParentCompanyWrapper(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ultimate_parent_company: UltimateParentCompany=None):
        """UltimateParentCompanyWrapper - a model defined in OpenAPI

        :param ultimate_parent_company: The ultimate_parent_company of this UltimateParentCompanyWrapper.
        """
        self.openapi_types = {
            'ultimate_parent_company': UltimateParentCompany
        }

        self.attribute_map = {
            'ultimate_parent_company': 'UltimateParentCompany'
        }

        self._ultimate_parent_company = ultimate_parent_company

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UltimateParentCompanyWrapper':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UltimateParentCompanyWrapper of this UltimateParentCompanyWrapper.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ultimate_parent_company(self):
        """Gets the ultimate_parent_company of this UltimateParentCompanyWrapper.


        :return: The ultimate_parent_company of this UltimateParentCompanyWrapper.
        :rtype: UltimateParentCompany
        """
        return self._ultimate_parent_company

    @ultimate_parent_company.setter
    def ultimate_parent_company(self, ultimate_parent_company):
        """Sets the ultimate_parent_company of this UltimateParentCompanyWrapper.


        :param ultimate_parent_company: The ultimate_parent_company of this UltimateParentCompanyWrapper.
        :type ultimate_parent_company: UltimateParentCompany
        """

        self._ultimate_parent_company = ultimate_parent_company
