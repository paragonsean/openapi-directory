# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DeleteShareholderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, shareholder_codes: List[str]=None):
        """DeleteShareholderRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DeleteShareholderRequest.
        :param shareholder_codes: The shareholder_codes of this DeleteShareholderRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'shareholder_codes': List[str]
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'shareholder_codes': 'shareholderCodes'
        }

        self._account_holder_code = account_holder_code
        self._shareholder_codes = shareholder_codes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DeleteShareholderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DeleteShareholderRequest of this DeleteShareholderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DeleteShareholderRequest.

        The code of the Account Holder from which to delete the Shareholders.

        :return: The account_holder_code of this DeleteShareholderRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DeleteShareholderRequest.

        The code of the Account Holder from which to delete the Shareholders.

        :param account_holder_code: The account_holder_code of this DeleteShareholderRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def shareholder_codes(self):
        """Gets the shareholder_codes of this DeleteShareholderRequest.

        The code(s) of the Shareholders to be deleted.

        :return: The shareholder_codes of this DeleteShareholderRequest.
        :rtype: List[str]
        """
        return self._shareholder_codes

    @shareholder_codes.setter
    def shareholder_codes(self, shareholder_codes):
        """Sets the shareholder_codes of this DeleteShareholderRequest.

        The code(s) of the Shareholders to be deleted.

        :param shareholder_codes: The shareholder_codes of this DeleteShareholderRequest.
        :type shareholder_codes: List[str]
        """
        if shareholder_codes is None:
            raise ValueError("Invalid value for `shareholder_codes`, must not be `None`")

        self._shareholder_codes = shareholder_codes
