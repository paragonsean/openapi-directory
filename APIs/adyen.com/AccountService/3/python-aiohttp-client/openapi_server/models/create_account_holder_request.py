# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_holder_details import AccountHolderDetails
from openapi_server import util


class CreateAccountHolderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, account_holder_details: AccountHolderDetails=None, create_default_account: bool=None, legal_entity: str=None, processing_tier: int=None):
        """CreateAccountHolderRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this CreateAccountHolderRequest.
        :param account_holder_details: The account_holder_details of this CreateAccountHolderRequest.
        :param create_default_account: The create_default_account of this CreateAccountHolderRequest.
        :param legal_entity: The legal_entity of this CreateAccountHolderRequest.
        :param processing_tier: The processing_tier of this CreateAccountHolderRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'account_holder_details': AccountHolderDetails,
            'create_default_account': bool,
            'legal_entity': str,
            'processing_tier': int
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'account_holder_details': 'accountHolderDetails',
            'create_default_account': 'createDefaultAccount',
            'legal_entity': 'legalEntity',
            'processing_tier': 'processingTier'
        }

        self._account_holder_code = account_holder_code
        self._account_holder_details = account_holder_details
        self._create_default_account = create_default_account
        self._legal_entity = legal_entity
        self._processing_tier = processing_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccountHolderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccountHolderRequest of this CreateAccountHolderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this CreateAccountHolderRequest.

        Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.

        :return: The account_holder_code of this CreateAccountHolderRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this CreateAccountHolderRequest.

        Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.

        :param account_holder_code: The account_holder_code of this CreateAccountHolderRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def account_holder_details(self):
        """Gets the account_holder_details of this CreateAccountHolderRequest.

        The details of the prospective account holder.

        :return: The account_holder_details of this CreateAccountHolderRequest.
        :rtype: AccountHolderDetails
        """
        return self._account_holder_details

    @account_holder_details.setter
    def account_holder_details(self, account_holder_details):
        """Sets the account_holder_details of this CreateAccountHolderRequest.

        The details of the prospective account holder.

        :param account_holder_details: The account_holder_details of this CreateAccountHolderRequest.
        :type account_holder_details: AccountHolderDetails
        """
        if account_holder_details is None:
            raise ValueError("Invalid value for `account_holder_details`, must not be `None`")

        self._account_holder_details = account_holder_details

    @property
    def create_default_account(self):
        """Gets the create_default_account of this CreateAccountHolderRequest.

        If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**.

        :return: The create_default_account of this CreateAccountHolderRequest.
        :rtype: bool
        """
        return self._create_default_account

    @create_default_account.setter
    def create_default_account(self, create_default_account):
        """Sets the create_default_account of this CreateAccountHolderRequest.

        If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**.

        :param create_default_account: The create_default_account of this CreateAccountHolderRequest.
        :type create_default_account: bool
        """

        self._create_default_account = create_default_account

    @property
    def legal_entity(self):
        """Gets the legal_entity of this CreateAccountHolderRequest.

        The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then `accountHolderDetails.businessDetails` must be provided, with at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.  * If set to **Individual**, then `accountHolderDetails.individualDetails` must be provided.

        :return: The legal_entity of this CreateAccountHolderRequest.
        :rtype: str
        """
        return self._legal_entity

    @legal_entity.setter
    def legal_entity(self, legal_entity):
        """Sets the legal_entity of this CreateAccountHolderRequest.

        The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then `accountHolderDetails.businessDetails` must be provided, with at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.  * If set to **Individual**, then `accountHolderDetails.individualDetails` must be provided.

        :param legal_entity: The legal_entity of this CreateAccountHolderRequest.
        :type legal_entity: str
        """
        allowed_values = ["Business", "Individual", "NonProfit"]  # noqa: E501
        if legal_entity not in allowed_values:
            raise ValueError(
                "Invalid value for `legal_entity` ({0}), must be one of {1}"
                .format(legal_entity, allowed_values)
            )

        self._legal_entity = legal_entity

    @property
    def processing_tier(self):
        """Gets the processing_tier of this CreateAccountHolderRequest.

        The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder.

        :return: The processing_tier of this CreateAccountHolderRequest.
        :rtype: int
        """
        return self._processing_tier

    @processing_tier.setter
    def processing_tier(self, processing_tier):
        """Sets the processing_tier of this CreateAccountHolderRequest.

        The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder.

        :param processing_tier: The processing_tier of this CreateAccountHolderRequest.
        :type processing_tier: int
        """

        self._processing_tier = processing_tier
