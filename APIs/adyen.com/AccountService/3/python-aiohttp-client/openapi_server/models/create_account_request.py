# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, payout_schedule: str=None, payout_schedule_reason: str=None):
        """CreateAccountRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this CreateAccountRequest.
        :param payout_schedule: The payout_schedule of this CreateAccountRequest.
        :param payout_schedule_reason: The payout_schedule_reason of this CreateAccountRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'payout_schedule': str,
            'payout_schedule_reason': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'payout_schedule': 'payoutSchedule',
            'payout_schedule_reason': 'payoutScheduleReason'
        }

        self._account_holder_code = account_holder_code
        self._payout_schedule = payout_schedule
        self._payout_schedule_reason = payout_schedule_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateAccountRequest of this CreateAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this CreateAccountRequest.

        The code of Account Holder under which to create the account.

        :return: The account_holder_code of this CreateAccountRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this CreateAccountRequest.

        The code of Account Holder under which to create the account.

        :param account_holder_code: The account_holder_code of this CreateAccountRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this CreateAccountRequest.

        The payout schedule of the prospective account. >Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.

        :return: The payout_schedule of this CreateAccountRequest.
        :rtype: str
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this CreateAccountRequest.

        The payout schedule of the prospective account. >Permitted values: `DEFAULT`, `HOLD`, `DAILY`, `WEEKLY`, `MONTHLY`.

        :param payout_schedule: The payout_schedule of this CreateAccountRequest.
        :type payout_schedule: str
        """
        allowed_values = ["BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT", "DAILY", "DAILY_AU", "DAILY_EU", "DAILY_SG", "DAILY_US", "HOLD", "MONTHLY", "WEEKLY", "WEEKLY_MON_TO_FRI_AU", "WEEKLY_MON_TO_FRI_EU", "WEEKLY_MON_TO_FRI_US", "WEEKLY_ON_TUE_FRI_MIDNIGHT", "WEEKLY_SUN_TO_THU_AU", "WEEKLY_SUN_TO_THU_US"]  # noqa: E501
        if payout_schedule not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_schedule` ({0}), must be one of {1}"
                .format(payout_schedule, allowed_values)
            )

        self._payout_schedule = payout_schedule

    @property
    def payout_schedule_reason(self):
        """Gets the payout_schedule_reason of this CreateAccountRequest.

        The reason for the payout schedule choice. >Required if the payoutSchedule is `HOLD`.

        :return: The payout_schedule_reason of this CreateAccountRequest.
        :rtype: str
        """
        return self._payout_schedule_reason

    @payout_schedule_reason.setter
    def payout_schedule_reason(self, payout_schedule_reason):
        """Sets the payout_schedule_reason of this CreateAccountRequest.

        The reason for the payout schedule choice. >Required if the payoutSchedule is `HOLD`.

        :param payout_schedule_reason: The payout_schedule_reason of this CreateAccountRequest.
        :type payout_schedule_reason: str
        """

        self._payout_schedule_reason = payout_schedule_reason
