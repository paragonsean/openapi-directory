# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePayoutScheduleRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, reason: str=None, schedule: str=None):
        """UpdatePayoutScheduleRequest - a model defined in OpenAPI

        :param action: The action of this UpdatePayoutScheduleRequest.
        :param reason: The reason of this UpdatePayoutScheduleRequest.
        :param schedule: The schedule of this UpdatePayoutScheduleRequest.
        """
        self.openapi_types = {
            'action': str,
            'reason': str,
            'schedule': str
        }

        self.attribute_map = {
            'action': 'action',
            'reason': 'reason',
            'schedule': 'schedule'
        }

        self._action = action
        self._reason = reason
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatePayoutScheduleRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatePayoutScheduleRequest of this UpdatePayoutScheduleRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this UpdatePayoutScheduleRequest.

        Direction on how to handle any payouts that have already been scheduled. Permitted values: * `CLOSE` will close the existing batch of payouts. * `UPDATE` will reschedule the existing batch to the new schedule. * `NOTHING` (**default**) will allow the payout to proceed.

        :return: The action of this UpdatePayoutScheduleRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this UpdatePayoutScheduleRequest.

        Direction on how to handle any payouts that have already been scheduled. Permitted values: * `CLOSE` will close the existing batch of payouts. * `UPDATE` will reschedule the existing batch to the new schedule. * `NOTHING` (**default**) will allow the payout to proceed.

        :param action: The action of this UpdatePayoutScheduleRequest.
        :type action: str
        """
        allowed_values = ["CLOSE", "NOTHING", "UPDATE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def reason(self):
        """Gets the reason of this UpdatePayoutScheduleRequest.

        The reason for the payout schedule update. > This field is required when the `schedule` parameter is set to `HOLD`.

        :return: The reason of this UpdatePayoutScheduleRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this UpdatePayoutScheduleRequest.

        The reason for the payout schedule update. > This field is required when the `schedule` parameter is set to `HOLD`.

        :param reason: The reason of this UpdatePayoutScheduleRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def schedule(self):
        """Gets the schedule of this UpdatePayoutScheduleRequest.

        The payout schedule to which the account is to be updated. Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`. `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.

        :return: The schedule of this UpdatePayoutScheduleRequest.
        :rtype: str
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this UpdatePayoutScheduleRequest.

        The payout schedule to which the account is to be updated. Permitted values: `DAILY`, `DAILY_US`, `DAILY_EU`, `DAILY_AU`, `DAILY_SG`, `WEEKLY`, `WEEKLY_ON_TUE_FRI_MIDNIGHT`, `BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT`, `MONTHLY`, `HOLD`. `HOLD` will prevent scheduled payouts from happening but will still allow manual payouts to occur.

        :param schedule: The schedule of this UpdatePayoutScheduleRequest.
        :type schedule: str
        """
        allowed_values = ["BIWEEKLY_ON_1ST_AND_15TH_AT_MIDNIGHT", "DAILY", "DAILY_AU", "DAILY_EU", "DAILY_SG", "DAILY_US", "HOLD", "MONTHLY", "WEEKLY", "WEEKLY_MON_TO_FRI_AU", "WEEKLY_MON_TO_FRI_EU", "WEEKLY_MON_TO_FRI_US", "WEEKLY_ON_TUE_FRI_MIDNIGHT", "WEEKLY_SUN_TO_THU_AU", "WEEKLY_SUN_TO_THU_US"]  # noqa: E501
        if schedule not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule` ({0}), must be one of {1}"
                .format(schedule, allowed_values)
            )

        self._schedule = schedule
