# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentDetail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, bank_account_uuid: str=None, description: str=None, document_type: str=None, filename: str=None, shareholder_code: str=None, signatory_code: str=None):
        """DocumentDetail - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this DocumentDetail.
        :param bank_account_uuid: The bank_account_uuid of this DocumentDetail.
        :param description: The description of this DocumentDetail.
        :param document_type: The document_type of this DocumentDetail.
        :param filename: The filename of this DocumentDetail.
        :param shareholder_code: The shareholder_code of this DocumentDetail.
        :param signatory_code: The signatory_code of this DocumentDetail.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'bank_account_uuid': str,
            'description': str,
            'document_type': str,
            'filename': str,
            'shareholder_code': str,
            'signatory_code': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'bank_account_uuid': 'bankAccountUUID',
            'description': 'description',
            'document_type': 'documentType',
            'filename': 'filename',
            'shareholder_code': 'shareholderCode',
            'signatory_code': 'signatoryCode'
        }

        self._account_holder_code = account_holder_code
        self._bank_account_uuid = bank_account_uuid
        self._description = description
        self._document_type = document_type
        self._filename = filename
        self._shareholder_code = shareholder_code
        self._signatory_code = signatory_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentDetail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentDetail of this DocumentDetail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this DocumentDetail.

        The code of account holder, to which the document applies.

        :return: The account_holder_code of this DocumentDetail.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this DocumentDetail.

        The code of account holder, to which the document applies.

        :param account_holder_code: The account_holder_code of this DocumentDetail.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this DocumentDetail.

        The Adyen-generated [`bankAccountUUID`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-bankAccountDetails-bankAccountUUID) to which the document must be linked. Refer to [Bank account check](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/bank-account-check#uploading-a-bank-statement) for details on when a document should be submitted. >Required if the `documentType` is **BANK_STATEMENT**, where a document is being submitted in order to verify a bank account. 

        :return: The bank_account_uuid of this DocumentDetail.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this DocumentDetail.

        The Adyen-generated [`bankAccountUUID`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-bankAccountDetails-bankAccountUUID) to which the document must be linked. Refer to [Bank account check](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/bank-account-check#uploading-a-bank-statement) for details on when a document should be submitted. >Required if the `documentType` is **BANK_STATEMENT**, where a document is being submitted in order to verify a bank account. 

        :param bank_account_uuid: The bank_account_uuid of this DocumentDetail.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def description(self):
        """Gets the description of this DocumentDetail.

        Description of the document.

        :return: The description of this DocumentDetail.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentDetail.

        Description of the document.

        :param description: The description of this DocumentDetail.
        :type description: str
        """

        self._description = description

    @property
    def document_type(self):
        """Gets the document_type of this DocumentDetail.

        The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder's legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 

        :return: The document_type of this DocumentDetail.
        :rtype: str
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this DocumentDetail.

        The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder's legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 

        :param document_type: The document_type of this DocumentDetail.
        :type document_type: str
        """
        allowed_values = ["BANK_STATEMENT", "BSN", "DRIVING_LICENCE", "DRIVING_LICENCE_BACK", "DRIVING_LICENCE_FRONT", "ID_CARD", "ID_CARD_BACK", "ID_CARD_FRONT", "PASSPORT", "PROOF_OF_RESIDENCY", "SSN"]  # noqa: E501
        if document_type not in allowed_values:
            raise ValueError(
                "Invalid value for `document_type` ({0}), must be one of {1}"
                .format(document_type, allowed_values)
            )

        self._document_type = document_type

    @property
    def filename(self):
        """Gets the filename of this DocumentDetail.

        Filename of the document.

        :return: The filename of this DocumentDetail.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this DocumentDetail.

        Filename of the document.

        :param filename: The filename of this DocumentDetail.
        :type filename: str
        """

        self._filename = filename

    @property
    def shareholder_code(self):
        """Gets the shareholder_code of this DocumentDetail.

        The Adyen-generated [`shareholderCode`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-shareholders-shareholderCode) to which the document must be linked. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when a document should be submitted. >Required if the account holder has a `legalEntity` of type **Business** and the `documentType` is either **PASSPORT**, **ID_CARD_FRONT**, **ID_CARD_BACK**, **DRIVING_LICENCE_FRONT**, or **DRIVING_LICENCE_BACK**. 

        :return: The shareholder_code of this DocumentDetail.
        :rtype: str
        """
        return self._shareholder_code

    @shareholder_code.setter
    def shareholder_code(self, shareholder_code):
        """Sets the shareholder_code of this DocumentDetail.

        The Adyen-generated [`shareholderCode`](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-shareholders-shareholderCode) to which the document must be linked. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when a document should be submitted. >Required if the account holder has a `legalEntity` of type **Business** and the `documentType` is either **PASSPORT**, **ID_CARD_FRONT**, **ID_CARD_BACK**, **DRIVING_LICENCE_FRONT**, or **DRIVING_LICENCE_BACK**. 

        :param shareholder_code: The shareholder_code of this DocumentDetail.
        :type shareholder_code: str
        """

        self._shareholder_code = shareholder_code

    @property
    def signatory_code(self):
        """Gets the signatory_code of this DocumentDetail.

        The Adyen-generated [`signatoryCode`](https://docs.adyen.com/api-explorer/#/Account/v6/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-signatories-signatoryCode) to which the document must be linked.

        :return: The signatory_code of this DocumentDetail.
        :rtype: str
        """
        return self._signatory_code

    @signatory_code.setter
    def signatory_code(self, signatory_code):
        """Sets the signatory_code of this DocumentDetail.

        The Adyen-generated [`signatoryCode`](https://docs.adyen.com/api-explorer/#/Account/v6/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-signatories-signatoryCode) to which the document must be linked.

        :param signatory_code: The signatory_code of this DocumentDetail.
        :type signatory_code: str
        """

        self._signatory_code = signatory_code
