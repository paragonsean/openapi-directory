/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AccountHolderDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateAccountHolderRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:38.843345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UpdateAccountHolderRequest {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS = "accountHolderDetails";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS)
  private AccountHolderDetails accountHolderDetails;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.
   */
  @JsonAdapter(LegalEntityEnum.Adapter.class)
  public enum LegalEntityEnum {
    BUSINESS("Business"),
    
    INDIVIDUAL("Individual"),
    
    NON_PROFIT("NonProfit"),
    
    PARTNERSHIP("Partnership"),
    
    PUBLIC_COMPANY("PublicCompany");

    private String value;

    LegalEntityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalEntityEnum fromValue(String value) {
      for (LegalEntityEnum b : LegalEntityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalEntityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalEntityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalEntityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalEntityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalEntityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private LegalEntityEnum legalEntity;

  public static final String SERIALIZED_NAME_PRIMARY_CURRENCY = "primaryCurrency";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PRIMARY_CURRENCY)
  private String primaryCurrency;

  public static final String SERIALIZED_NAME_PROCESSING_TIER = "processingTier";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIER)
  private Integer processingTier;

  public static final String SERIALIZED_NAME_VERIFICATION_PROFILE = "verificationProfile";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PROFILE)
  private String verificationProfile;

  public UpdateAccountHolderRequest() {
  }

  public UpdateAccountHolderRequest accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the Account Holder to be updated.
   * @return accountHolderCode
   */
  @javax.annotation.Nonnull
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public UpdateAccountHolderRequest accountHolderDetails(AccountHolderDetails accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
    return this;
  }

  /**
   * The details to which the Account Holder should be updated.  Required if a processingTier is not provided.
   * @return accountHolderDetails
   */
  @javax.annotation.Nullable
  public AccountHolderDetails getAccountHolderDetails() {
    return accountHolderDetails;
  }

  public void setAccountHolderDetails(AccountHolderDetails accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
  }


  public UpdateAccountHolderRequest description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores &#x60;_&#x60;.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public UpdateAccountHolderRequest legalEntity(LegalEntityEnum legalEntity) {
    this.legalEntity = legalEntity;
    return this;
  }

  /**
   * The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then &#x60;accountHolderDetails.businessDetails&#x60; must be provided, with at least one entry in the &#x60;accountHolderDetails.businessDetails.shareholders&#x60; list.  * If set to **Individual**, then &#x60;accountHolderDetails.individualDetails&#x60; must be provided.
   * @return legalEntity
   */
  @javax.annotation.Nullable
  public LegalEntityEnum getLegalEntity() {
    return legalEntity;
  }

  public void setLegalEntity(LegalEntityEnum legalEntity) {
    this.legalEntity = legalEntity;
  }


  @Deprecated
  public UpdateAccountHolderRequest primaryCurrency(String primaryCurrency) {
    this.primaryCurrency = primaryCurrency;
    return this;
  }

  /**
   * The primary three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), to which the account holder should be updated.
   * @return primaryCurrency
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getPrimaryCurrency() {
    return primaryCurrency;
  }

  @Deprecated
  public void setPrimaryCurrency(String primaryCurrency) {
    this.primaryCurrency = primaryCurrency;
  }


  public UpdateAccountHolderRequest processingTier(Integer processingTier) {
    this.processingTier = processingTier;
    return this;
  }

  /**
   * The processing tier to which the Account Holder should be updated. &gt;The processing tier can not be lowered through this request.  &gt;Required if accountHolderDetails are not provided.
   * @return processingTier
   */
  @javax.annotation.Nullable
  public Integer getProcessingTier() {
    return processingTier;
  }

  public void setProcessingTier(Integer processingTier) {
    this.processingTier = processingTier;
  }


  public UpdateAccountHolderRequest verificationProfile(String verificationProfile) {
    this.verificationProfile = verificationProfile;
    return this;
  }

  /**
   * The identifier of the profile that applies to this entity.
   * @return verificationProfile
   */
  @javax.annotation.Nullable
  public String getVerificationProfile() {
    return verificationProfile;
  }

  public void setVerificationProfile(String verificationProfile) {
    this.verificationProfile = verificationProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateAccountHolderRequest updateAccountHolderRequest = (UpdateAccountHolderRequest) o;
    return Objects.equals(this.accountHolderCode, updateAccountHolderRequest.accountHolderCode) &&
        Objects.equals(this.accountHolderDetails, updateAccountHolderRequest.accountHolderDetails) &&
        Objects.equals(this.description, updateAccountHolderRequest.description) &&
        Objects.equals(this.legalEntity, updateAccountHolderRequest.legalEntity) &&
        Objects.equals(this.primaryCurrency, updateAccountHolderRequest.primaryCurrency) &&
        Objects.equals(this.processingTier, updateAccountHolderRequest.processingTier) &&
        Objects.equals(this.verificationProfile, updateAccountHolderRequest.verificationProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, accountHolderDetails, description, legalEntity, primaryCurrency, processingTier, verificationProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateAccountHolderRequest {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    accountHolderDetails: ").append(toIndentedString(accountHolderDetails)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    primaryCurrency: ").append(toIndentedString(primaryCurrency)).append("\n");
    sb.append("    processingTier: ").append(toIndentedString(processingTier)).append("\n");
    sb.append("    verificationProfile: ").append(toIndentedString(verificationProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("accountHolderDetails");
    openapiFields.add("description");
    openapiFields.add("legalEntity");
    openapiFields.add("primaryCurrency");
    openapiFields.add("processingTier");
    openapiFields.add("verificationProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accountHolderCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UpdateAccountHolderRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UpdateAccountHolderRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UpdateAccountHolderRequest is not found in the empty JSON string", UpdateAccountHolderRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UpdateAccountHolderRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UpdateAccountHolderRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UpdateAccountHolderRequest.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      // validate the optional field `accountHolderDetails`
      if (jsonObj.get("accountHolderDetails") != null && !jsonObj.get("accountHolderDetails").isJsonNull()) {
        AccountHolderDetails.validateJsonElement(jsonObj.get("accountHolderDetails"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) && !jsonObj.get("legalEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalEntity").toString()));
      }
      // validate the optional field `legalEntity`
      if (jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) {
        LegalEntityEnum.validateJsonElement(jsonObj.get("legalEntity"));
      }
      if ((jsonObj.get("primaryCurrency") != null && !jsonObj.get("primaryCurrency").isJsonNull()) && !jsonObj.get("primaryCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryCurrency").toString()));
      }
      if ((jsonObj.get("verificationProfile") != null && !jsonObj.get("verificationProfile").isJsonNull()) && !jsonObj.get("verificationProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationProfile").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UpdateAccountHolderRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UpdateAccountHolderRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UpdateAccountHolderRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UpdateAccountHolderRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UpdateAccountHolderRequest>() {
           @Override
           public void write(JsonWriter out, UpdateAccountHolderRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UpdateAccountHolderRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UpdateAccountHolderRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UpdateAccountHolderRequest
   * @throws IOException if the JSON string is invalid with respect to UpdateAccountHolderRequest
   */
  public static UpdateAccountHolderRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UpdateAccountHolderRequest.class);
  }

  /**
   * Convert an instance of UpdateAccountHolderRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

