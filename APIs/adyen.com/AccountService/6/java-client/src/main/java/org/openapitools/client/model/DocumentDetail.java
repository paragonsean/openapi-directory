/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DocumentDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:38.843345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DocumentDetail {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D = "bankAccountUUID";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D)
  private String bankAccountUUID;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder&#39;s legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 
   */
  @JsonAdapter(DocumentTypeEnum.Adapter.class)
  public enum DocumentTypeEnum {
    BANK_STATEMENT("BANK_STATEMENT"),
    
    BSN("BSN"),
    
    COMPANY_REGISTRATION_SCREENING("COMPANY_REGISTRATION_SCREENING"),
    
    CONSTITUTIONAL_DOCUMENT("CONSTITUTIONAL_DOCUMENT"),
    
    DRIVING_LICENCE("DRIVING_LICENCE"),
    
    DRIVING_LICENCE_BACK("DRIVING_LICENCE_BACK"),
    
    DRIVING_LICENCE_FRONT("DRIVING_LICENCE_FRONT"),
    
    ID_CARD("ID_CARD"),
    
    ID_CARD_BACK("ID_CARD_BACK"),
    
    ID_CARD_FRONT("ID_CARD_FRONT"),
    
    PASSPORT("PASSPORT"),
    
    PROOF_OF_RESIDENCY("PROOF_OF_RESIDENCY"),
    
    SSN("SSN"),
    
    SUPPORTING_DOCUMENTS("SUPPORTING_DOCUMENTS");

    private String value;

    DocumentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DocumentTypeEnum fromValue(String value) {
      for (DocumentTypeEnum b : DocumentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DocumentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DocumentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DocumentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DocumentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DocumentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOCUMENT_TYPE = "documentType";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TYPE)
  private DocumentTypeEnum documentType;

  public static final String SERIALIZED_NAME_FILENAME = "filename";
  @SerializedName(SERIALIZED_NAME_FILENAME)
  private String filename;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE = "legalArrangementCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE)
  private String legalArrangementCode;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE = "legalArrangementEntityCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITY_CODE)
  private String legalArrangementEntityCode;

  public static final String SERIALIZED_NAME_SHAREHOLDER_CODE = "shareholderCode";
  @SerializedName(SERIALIZED_NAME_SHAREHOLDER_CODE)
  private String shareholderCode;

  public static final String SERIALIZED_NAME_SIGNATORY_CODE = "signatoryCode";
  @SerializedName(SERIALIZED_NAME_SIGNATORY_CODE)
  private String signatoryCode;

  public DocumentDetail() {
  }

  public DocumentDetail accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of account holder, to which the document applies.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public DocumentDetail bankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
    return this;
  }

  /**
   * The Adyen-generated [&#x60;bankAccountUUID&#x60;](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-bankAccountDetails-bankAccountUUID) to which the document must be linked. Refer to [Bank account check](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks/bank-account-check#uploading-a-bank-statement) for details on when a document should be submitted. &gt;Required if the &#x60;documentType&#x60; is **BANK_STATEMENT**, where a document is being submitted in order to verify a bank account. 
   * @return bankAccountUUID
   */
  @javax.annotation.Nullable
  public String getBankAccountUUID() {
    return bankAccountUUID;
  }

  public void setBankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
  }


  public DocumentDetail description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the document.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DocumentDetail documentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
    return this;
  }

  /**
   * The type of the document. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when each document type should be submitted and for the accepted file formats.  Permitted values: * **BANK_STATEMENT**: A file containing a bank statement or other document proving ownership of a specific bank account. * **COMPANY_REGISTRATION_SCREENING** (Supported from v5 and later): A file containing a company registration document. * **CONSTITUTIONAL_DOCUMENT**: A file containing information about the account holder&#39;s legal arrangement. * **PASSPORT**: A file containing the identity page(s) of a passport. * **ID_CARD_FRONT**: A file containing only the front of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **ID_CARD_BACK**: A file containing only the back of the ID card. In order for a document to be usable, both the **ID_CARD_FRONT** and **ID_CARD_BACK** must be submitted. * **DRIVING_LICENCE_FRONT**: A file containing only the front of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_BACK** must be submitted. * **DRIVING_LICENCE_BACK**: A file containing only the back of the driving licence. In order for a document to be usable, both the **DRIVING_LICENCE_FRONT** and **DRIVING_LICENCE_FRONT** must be submitted. 
   * @return documentType
   */
  @javax.annotation.Nonnull
  public DocumentTypeEnum getDocumentType() {
    return documentType;
  }

  public void setDocumentType(DocumentTypeEnum documentType) {
    this.documentType = documentType;
  }


  public DocumentDetail filename(String filename) {
    this.filename = filename;
    return this;
  }

  /**
   * Filename of the document.
   * @return filename
   */
  @javax.annotation.Nullable
  public String getFilename() {
    return filename;
  }

  public void setFilename(String filename) {
    this.filename = filename;
  }


  public DocumentDetail legalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
    return this;
  }

  /**
   * The Adyen-generated [&#x60;legalArrangementCode&#x60;](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-legalArrangements-legalArrangementCode) to which the document must be linked.
   * @return legalArrangementCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementCode() {
    return legalArrangementCode;
  }

  public void setLegalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
  }


  public DocumentDetail legalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
    return this;
  }

  /**
   * The Adyen-generated [&#x60;legalArrangementEntityCode&#x60;](https://docs.adyen.com/api-explorer/#/Account/v6/post/createAccountHolder__resParam_accountHolderDetails-legalArrangements-legalArrangementEntities-legalArrangementEntityCode)  to which the document must be linked.
   * @return legalArrangementEntityCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementEntityCode() {
    return legalArrangementEntityCode;
  }

  public void setLegalArrangementEntityCode(String legalArrangementEntityCode) {
    this.legalArrangementEntityCode = legalArrangementEntityCode;
  }


  public DocumentDetail shareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
    return this;
  }

  /**
   * The Adyen-generated [&#x60;shareholderCode&#x60;](https://docs.adyen.com/api-explorer/#/Account/latest/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-shareholders-shareholderCode) to which the document must be linked. Refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks) for details on when a document should be submitted. &gt;Required if the account holder has a &#x60;legalEntity&#x60; of type **Business** and the &#x60;documentType&#x60; is either **PASSPORT**, **ID_CARD_FRONT**, **ID_CARD_BACK**, **DRIVING_LICENCE_FRONT**, or **DRIVING_LICENCE_BACK**. 
   * @return shareholderCode
   */
  @javax.annotation.Nullable
  public String getShareholderCode() {
    return shareholderCode;
  }

  public void setShareholderCode(String shareholderCode) {
    this.shareholderCode = shareholderCode;
  }


  public DocumentDetail signatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
    return this;
  }

  /**
   * The Adyen-generated [&#x60;signatoryCode&#x60;](https://docs.adyen.com/api-explorer/#/Account/v6/post/createAccountHolder__resParam_accountHolderDetails-businessDetails-signatories-signatoryCode) to which the document must be linked.
   * @return signatoryCode
   */
  @javax.annotation.Nullable
  public String getSignatoryCode() {
    return signatoryCode;
  }

  public void setSignatoryCode(String signatoryCode) {
    this.signatoryCode = signatoryCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDetail documentDetail = (DocumentDetail) o;
    return Objects.equals(this.accountHolderCode, documentDetail.accountHolderCode) &&
        Objects.equals(this.bankAccountUUID, documentDetail.bankAccountUUID) &&
        Objects.equals(this.description, documentDetail.description) &&
        Objects.equals(this.documentType, documentDetail.documentType) &&
        Objects.equals(this.filename, documentDetail.filename) &&
        Objects.equals(this.legalArrangementCode, documentDetail.legalArrangementCode) &&
        Objects.equals(this.legalArrangementEntityCode, documentDetail.legalArrangementEntityCode) &&
        Objects.equals(this.shareholderCode, documentDetail.shareholderCode) &&
        Objects.equals(this.signatoryCode, documentDetail.signatoryCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, bankAccountUUID, description, documentType, filename, legalArrangementCode, legalArrangementEntityCode, shareholderCode, signatoryCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDetail {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    bankAccountUUID: ").append(toIndentedString(bankAccountUUID)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    documentType: ").append(toIndentedString(documentType)).append("\n");
    sb.append("    filename: ").append(toIndentedString(filename)).append("\n");
    sb.append("    legalArrangementCode: ").append(toIndentedString(legalArrangementCode)).append("\n");
    sb.append("    legalArrangementEntityCode: ").append(toIndentedString(legalArrangementEntityCode)).append("\n");
    sb.append("    shareholderCode: ").append(toIndentedString(shareholderCode)).append("\n");
    sb.append("    signatoryCode: ").append(toIndentedString(signatoryCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("bankAccountUUID");
    openapiFields.add("description");
    openapiFields.add("documentType");
    openapiFields.add("filename");
    openapiFields.add("legalArrangementCode");
    openapiFields.add("legalArrangementEntityCode");
    openapiFields.add("shareholderCode");
    openapiFields.add("signatoryCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("documentType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DocumentDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DocumentDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentDetail is not found in the empty JSON string", DocumentDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DocumentDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DocumentDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      if ((jsonObj.get("bankAccountUUID") != null && !jsonObj.get("bankAccountUUID").isJsonNull()) && !jsonObj.get("bankAccountUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountUUID").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("documentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentType").toString()));
      }
      // validate the required field `documentType`
      DocumentTypeEnum.validateJsonElement(jsonObj.get("documentType"));
      if ((jsonObj.get("filename") != null && !jsonObj.get("filename").isJsonNull()) && !jsonObj.get("filename").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filename` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filename").toString()));
      }
      if ((jsonObj.get("legalArrangementCode") != null && !jsonObj.get("legalArrangementCode").isJsonNull()) && !jsonObj.get("legalArrangementCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementCode").toString()));
      }
      if ((jsonObj.get("legalArrangementEntityCode") != null && !jsonObj.get("legalArrangementEntityCode").isJsonNull()) && !jsonObj.get("legalArrangementEntityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementEntityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementEntityCode").toString()));
      }
      if ((jsonObj.get("shareholderCode") != null && !jsonObj.get("shareholderCode").isJsonNull()) && !jsonObj.get("shareholderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareholderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareholderCode").toString()));
      }
      if ((jsonObj.get("signatoryCode") != null && !jsonObj.get("signatoryCode").isJsonNull()) && !jsonObj.get("signatoryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signatoryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signatoryCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentDetail>() {
           @Override
           public void write(JsonWriter out, DocumentDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DocumentDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DocumentDetail
   * @throws IOException if the JSON string is invalid with respect to DocumentDetail
   */
  public static DocumentDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentDetail.class);
  }

  /**
   * Convert an instance of DocumentDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

