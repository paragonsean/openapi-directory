/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LegalArrangementEntityDetail;
import org.openapitools.client.model.ViasAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LegalArrangementDetail
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:38.843345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LegalArrangementDetail {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private ViasAddress address;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE = "legalArrangementCode";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_CODE)
  private String legalArrangementCode;

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITIES = "legalArrangementEntities";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_ENTITIES)
  private List<LegalArrangementEntityDetail> legalArrangementEntities = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGAL_ARRANGEMENT_REFERENCE = "legalArrangementReference";
  @SerializedName(SERIALIZED_NAME_LEGAL_ARRANGEMENT_REFERENCE)
  private String legalArrangementReference;

  /**
   * The form of legal arrangement. Required if &#x60;type&#x60; is **Trust** or **Partnership**.  The possible values depend on the &#x60;type&#x60;.  - For &#x60;type&#x60; **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.  - For &#x60;type&#x60; **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**
   */
  @JsonAdapter(LegalFormEnum.Adapter.class)
  public enum LegalFormEnum {
    CASH_MANAGEMENT_TRUST("CashManagementTrust"),
    
    CORPORATE_UNIT_TRUST("CorporateUnitTrust"),
    
    DECEASED_ESTATE("DeceasedEstate"),
    
    DISCRETIONARY_INVESTMENT_TRUST("DiscretionaryInvestmentTrust"),
    
    DISCRETIONARY_SERVICES_MANAGEMENT_TRUST("DiscretionaryServicesManagementTrust"),
    
    DISCRETIONARY_TRADING_TRUST("DiscretionaryTradingTrust"),
    
    FIRST_HOME_SAVER_ACCOUNTS_TRUST("FirstHomeSaverAccountsTrust"),
    
    FIXED_TRUST("FixedTrust"),
    
    FIXED_UNIT_TRUST("FixedUnitTrust"),
    
    HYBRID_TRUST("HybridTrust"),
    
    LISTED_PUBLIC_UNIT_TRUST("ListedPublicUnitTrust"),
    
    OTHER_TRUST("OtherTrust"),
    
    POOLED_SUPERANNUATION_TRUST("PooledSuperannuationTrust"),
    
    PUBLIC_TRADING_TRUST("PublicTradingTrust"),
    
    UNLISTED_PUBLIC_UNIT_TRUST("UnlistedPublicUnitTrust"),
    
    LIMITED_PARTNERSHIP("LimitedPartnership"),
    
    FAMILY_PARTNERSHIP("FamilyPartnership"),
    
    OTHER_PARTNERSHIP("OtherPartnership");

    private String value;

    LegalFormEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalFormEnum fromValue(String value) {
      for (LegalFormEnum b : LegalFormEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalFormEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalFormEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalFormEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalFormEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalFormEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_FORM = "legalForm";
  @SerializedName(SERIALIZED_NAME_LEGAL_FORM)
  private LegalFormEnum legalForm;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REGISTRATION_NUMBER = "registrationNumber";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_NUMBER)
  private String registrationNumber;

  public static final String SERIALIZED_NAME_TAX_NUMBER = "taxNumber";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER)
  private String taxNumber;

  /**
   * The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ASSOCIATION("Association"),
    
    PARTNERSHIP("Partnership"),
    
    SOLE_PROPRIETORSHIP("SoleProprietorship"),
    
    TRUST("Trust");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public LegalArrangementDetail() {
  }

  public LegalArrangementDetail address(ViasAddress address) {
    this.address = address;
    return this;
  }

  /**
   * The address of the legal arrangement.
   * @return address
   */
  @javax.annotation.Nonnull
  public ViasAddress getAddress() {
    return address;
  }

  public void setAddress(ViasAddress address) {
    this.address = address;
  }


  public LegalArrangementDetail legalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
    return this;
  }

  /**
   * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
   * @return legalArrangementCode
   */
  @javax.annotation.Nullable
  public String getLegalArrangementCode() {
    return legalArrangementCode;
  }

  public void setLegalArrangementCode(String legalArrangementCode) {
    this.legalArrangementCode = legalArrangementCode;
  }


  public LegalArrangementDetail legalArrangementEntities(List<LegalArrangementEntityDetail> legalArrangementEntities) {
    this.legalArrangementEntities = legalArrangementEntities;
    return this;
  }

  public LegalArrangementDetail addLegalArrangementEntitiesItem(LegalArrangementEntityDetail legalArrangementEntitiesItem) {
    if (this.legalArrangementEntities == null) {
      this.legalArrangementEntities = new ArrayList<>();
    }
    this.legalArrangementEntities.add(legalArrangementEntitiesItem);
    return this;
  }

  /**
   * An array containing information about other entities that are part of the legal arrangement.
   * @return legalArrangementEntities
   */
  @javax.annotation.Nullable
  public List<LegalArrangementEntityDetail> getLegalArrangementEntities() {
    return legalArrangementEntities;
  }

  public void setLegalArrangementEntities(List<LegalArrangementEntityDetail> legalArrangementEntities) {
    this.legalArrangementEntities = legalArrangementEntities;
  }


  public LegalArrangementDetail legalArrangementReference(String legalArrangementReference) {
    this.legalArrangementReference = legalArrangementReference;
    return this;
  }

  /**
   * Your reference for the legal arrangement. Must be between 3 to 128 characters.
   * @return legalArrangementReference
   */
  @javax.annotation.Nullable
  public String getLegalArrangementReference() {
    return legalArrangementReference;
  }

  public void setLegalArrangementReference(String legalArrangementReference) {
    this.legalArrangementReference = legalArrangementReference;
  }


  public LegalArrangementDetail legalForm(LegalFormEnum legalForm) {
    this.legalForm = legalForm;
    return this;
  }

  /**
   * The form of legal arrangement. Required if &#x60;type&#x60; is **Trust** or **Partnership**.  The possible values depend on the &#x60;type&#x60;.  - For &#x60;type&#x60; **Trust**:  **CashManagementTrust**, **CorporateUnitTrust**, **DeceasedEstate**, **DiscretionaryInvestmentTrust**, **DiscretionaryServicesManagementTrust**, **DiscretionaryTradingTrust**, **FirstHomeSaverAccountsTrust**, **FixedTrust**, **FixedUnitTrust**, **HybridTrust**, **ListedPublicUnitTrust**, **OtherTrust**, **PooledSuperannuationTrust**, **PublicTradingTrust**, or **UnlistedPublicUnitTrust**.  - For &#x60;type&#x60; **Partnership**: **LimitedPartnership**, **FamilyPartnership**, or **OtherPartnership**
   * @return legalForm
   */
  @javax.annotation.Nullable
  public LegalFormEnum getLegalForm() {
    return legalForm;
  }

  public void setLegalForm(LegalFormEnum legalForm) {
    this.legalForm = legalForm;
  }


  public LegalArrangementDetail name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The legal name of the legal arrangement. Minimum length: 3 characters.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public LegalArrangementDetail registrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
    return this;
  }

  /**
   * The registration number of the legal arrangement.
   * @return registrationNumber
   */
  @javax.annotation.Nullable
  public String getRegistrationNumber() {
    return registrationNumber;
  }

  public void setRegistrationNumber(String registrationNumber) {
    this.registrationNumber = registrationNumber;
  }


  public LegalArrangementDetail taxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
    return this;
  }

  /**
   * The tax identification number of the legal arrangement.
   * @return taxNumber
   */
  @javax.annotation.Nullable
  public String getTaxNumber() {
    return taxNumber;
  }

  public void setTaxNumber(String taxNumber) {
    this.taxNumber = taxNumber;
  }


  public LegalArrangementDetail type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The [type of legal arrangement](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process/legal-arrangements#types-of-legal-arrangements).  Possible values:  - **Association**   - **Partnership**   - **SoleProprietorship**   - **Trust**   
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LegalArrangementDetail legalArrangementDetail = (LegalArrangementDetail) o;
    return Objects.equals(this.address, legalArrangementDetail.address) &&
        Objects.equals(this.legalArrangementCode, legalArrangementDetail.legalArrangementCode) &&
        Objects.equals(this.legalArrangementEntities, legalArrangementDetail.legalArrangementEntities) &&
        Objects.equals(this.legalArrangementReference, legalArrangementDetail.legalArrangementReference) &&
        Objects.equals(this.legalForm, legalArrangementDetail.legalForm) &&
        Objects.equals(this.name, legalArrangementDetail.name) &&
        Objects.equals(this.registrationNumber, legalArrangementDetail.registrationNumber) &&
        Objects.equals(this.taxNumber, legalArrangementDetail.taxNumber) &&
        Objects.equals(this.type, legalArrangementDetail.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, legalArrangementCode, legalArrangementEntities, legalArrangementReference, legalForm, name, registrationNumber, taxNumber, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LegalArrangementDetail {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    legalArrangementCode: ").append(toIndentedString(legalArrangementCode)).append("\n");
    sb.append("    legalArrangementEntities: ").append(toIndentedString(legalArrangementEntities)).append("\n");
    sb.append("    legalArrangementReference: ").append(toIndentedString(legalArrangementReference)).append("\n");
    sb.append("    legalForm: ").append(toIndentedString(legalForm)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    registrationNumber: ").append(toIndentedString(registrationNumber)).append("\n");
    sb.append("    taxNumber: ").append(toIndentedString(taxNumber)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("legalArrangementCode");
    openapiFields.add("legalArrangementEntities");
    openapiFields.add("legalArrangementReference");
    openapiFields.add("legalForm");
    openapiFields.add("name");
    openapiFields.add("registrationNumber");
    openapiFields.add("taxNumber");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LegalArrangementDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LegalArrangementDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LegalArrangementDetail is not found in the empty JSON string", LegalArrangementDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LegalArrangementDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LegalArrangementDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LegalArrangementDetail.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `address`
      ViasAddress.validateJsonElement(jsonObj.get("address"));
      if ((jsonObj.get("legalArrangementCode") != null && !jsonObj.get("legalArrangementCode").isJsonNull()) && !jsonObj.get("legalArrangementCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementCode").toString()));
      }
      if (jsonObj.get("legalArrangementEntities") != null && !jsonObj.get("legalArrangementEntities").isJsonNull()) {
        JsonArray jsonArraylegalArrangementEntities = jsonObj.getAsJsonArray("legalArrangementEntities");
        if (jsonArraylegalArrangementEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("legalArrangementEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `legalArrangementEntities` to be an array in the JSON string but got `%s`", jsonObj.get("legalArrangementEntities").toString()));
          }

          // validate the optional field `legalArrangementEntities` (array)
          for (int i = 0; i < jsonArraylegalArrangementEntities.size(); i++) {
            LegalArrangementEntityDetail.validateJsonElement(jsonArraylegalArrangementEntities.get(i));
          };
        }
      }
      if ((jsonObj.get("legalArrangementReference") != null && !jsonObj.get("legalArrangementReference").isJsonNull()) && !jsonObj.get("legalArrangementReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalArrangementReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalArrangementReference").toString()));
      }
      if ((jsonObj.get("legalForm") != null && !jsonObj.get("legalForm").isJsonNull()) && !jsonObj.get("legalForm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalForm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalForm").toString()));
      }
      // validate the optional field `legalForm`
      if (jsonObj.get("legalForm") != null && !jsonObj.get("legalForm").isJsonNull()) {
        LegalFormEnum.validateJsonElement(jsonObj.get("legalForm"));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("registrationNumber") != null && !jsonObj.get("registrationNumber").isJsonNull()) && !jsonObj.get("registrationNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrationNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrationNumber").toString()));
      }
      if ((jsonObj.get("taxNumber") != null && !jsonObj.get("taxNumber").isJsonNull()) && !jsonObj.get("taxNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxNumber").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the required field `type`
      TypeEnum.validateJsonElement(jsonObj.get("type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LegalArrangementDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LegalArrangementDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LegalArrangementDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LegalArrangementDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<LegalArrangementDetail>() {
           @Override
           public void write(JsonWriter out, LegalArrangementDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LegalArrangementDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LegalArrangementDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LegalArrangementDetail
   * @throws IOException if the JSON string is invalid with respect to LegalArrangementDetail
   */
  public static LegalArrangementDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LegalArrangementDetail.class);
  }

  /**
   * Convert an instance of LegalArrangementDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

