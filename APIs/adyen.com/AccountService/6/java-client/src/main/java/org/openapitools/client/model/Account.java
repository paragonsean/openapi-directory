/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.PayoutScheduleResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Account
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:38.843345-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Account {
  public static final String SERIALIZED_NAME_ACCOUNT_CODE = "accountCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_CODE)
  private String accountCode;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D = "bankAccountUUID";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_U_U_I_D)
  private String bankAccountUUID;

  public static final String SERIALIZED_NAME_BENEFICIARY_ACCOUNT = "beneficiaryAccount";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_ACCOUNT)
  private String beneficiaryAccount;

  public static final String SERIALIZED_NAME_BENEFICIARY_MERCHANT_REFERENCE = "beneficiaryMerchantReference";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_MERCHANT_REFERENCE)
  private String beneficiaryMerchantReference;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYOUT_METHOD_CODE = "payoutMethodCode";
  @SerializedName(SERIALIZED_NAME_PAYOUT_METHOD_CODE)
  private String payoutMethodCode;

  public static final String SERIALIZED_NAME_PAYOUT_SCHEDULE = "payoutSchedule";
  @SerializedName(SERIALIZED_NAME_PAYOUT_SCHEDULE)
  private PayoutScheduleResponse payoutSchedule;

  /**
   * Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
   */
  @JsonAdapter(PayoutSpeedEnum.Adapter.class)
  public enum PayoutSpeedEnum {
    INSTANT("INSTANT"),
    
    SAME_DAY("SAME_DAY"),
    
    STANDARD("STANDARD");

    private String value;

    PayoutSpeedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PayoutSpeedEnum fromValue(String value) {
      for (PayoutSpeedEnum b : PayoutSpeedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PayoutSpeedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PayoutSpeedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PayoutSpeedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PayoutSpeedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PayoutSpeedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYOUT_SPEED = "payoutSpeed";
  @SerializedName(SERIALIZED_NAME_PAYOUT_SPEED)
  private PayoutSpeedEnum payoutSpeed;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Account() {
  }

  public Account accountCode(String accountCode) {
    this.accountCode = accountCode;
    return this;
  }

  /**
   * The code of the account.
   * @return accountCode
   */
  @javax.annotation.Nullable
  public String getAccountCode() {
    return accountCode;
  }

  public void setAccountCode(String accountCode) {
    this.accountCode = accountCode;
  }


  public Account bankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
    return this;
  }

  /**
   * The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.
   * @return bankAccountUUID
   */
  @javax.annotation.Nullable
  public String getBankAccountUUID() {
    return bankAccountUUID;
  }

  public void setBankAccountUUID(String bankAccountUUID) {
    this.bankAccountUUID = bankAccountUUID;
  }


  public Account beneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
    return this;
  }

  /**
   * The beneficiary of the account.
   * @return beneficiaryAccount
   */
  @javax.annotation.Nullable
  public String getBeneficiaryAccount() {
    return beneficiaryAccount;
  }

  public void setBeneficiaryAccount(String beneficiaryAccount) {
    this.beneficiaryAccount = beneficiaryAccount;
  }


  public Account beneficiaryMerchantReference(String beneficiaryMerchantReference) {
    this.beneficiaryMerchantReference = beneficiaryMerchantReference;
    return this;
  }

  /**
   * The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.
   * @return beneficiaryMerchantReference
   */
  @javax.annotation.Nullable
  public String getBeneficiaryMerchantReference() {
    return beneficiaryMerchantReference;
  }

  public void setBeneficiaryMerchantReference(String beneficiaryMerchantReference) {
    this.beneficiaryMerchantReference = beneficiaryMerchantReference;
  }


  public Account description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of the account.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Account metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Account putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. &gt; Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public Account payoutMethodCode(String payoutMethodCode) {
    this.payoutMethodCode = payoutMethodCode;
    return this;
  }

  /**
   * The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.
   * @return payoutMethodCode
   */
  @javax.annotation.Nullable
  public String getPayoutMethodCode() {
    return payoutMethodCode;
  }

  public void setPayoutMethodCode(String payoutMethodCode) {
    this.payoutMethodCode = payoutMethodCode;
  }


  public Account payoutSchedule(PayoutScheduleResponse payoutSchedule) {
    this.payoutSchedule = payoutSchedule;
    return this;
  }

  /**
   * The account&#39;s payout schedule.
   * @return payoutSchedule
   */
  @javax.annotation.Nullable
  public PayoutScheduleResponse getPayoutSchedule() {
    return payoutSchedule;
  }

  public void setPayoutSchedule(PayoutScheduleResponse payoutSchedule) {
    this.payoutSchedule = payoutSchedule;
  }


  public Account payoutSpeed(PayoutSpeedEnum payoutSpeed) {
    this.payoutSpeed = payoutSpeed;
    return this;
  }

  /**
   * Speed with which payouts for this account are processed. Permitted values: &#x60;STANDARD&#x60;, &#x60;SAME_DAY&#x60;.
   * @return payoutSpeed
   */
  @javax.annotation.Nullable
  public PayoutSpeedEnum getPayoutSpeed() {
    return payoutSpeed;
  }

  public void setPayoutSpeed(PayoutSpeedEnum payoutSpeed) {
    this.payoutSpeed = payoutSpeed;
  }


  public Account status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the account. Possible values: &#x60;Active&#x60;, &#x60;Inactive&#x60;, &#x60;Suspended&#x60;, &#x60;Closed&#x60;.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Account account = (Account) o;
    return Objects.equals(this.accountCode, account.accountCode) &&
        Objects.equals(this.bankAccountUUID, account.bankAccountUUID) &&
        Objects.equals(this.beneficiaryAccount, account.beneficiaryAccount) &&
        Objects.equals(this.beneficiaryMerchantReference, account.beneficiaryMerchantReference) &&
        Objects.equals(this.description, account.description) &&
        Objects.equals(this.metadata, account.metadata) &&
        Objects.equals(this.payoutMethodCode, account.payoutMethodCode) &&
        Objects.equals(this.payoutSchedule, account.payoutSchedule) &&
        Objects.equals(this.payoutSpeed, account.payoutSpeed) &&
        Objects.equals(this.status, account.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountCode, bankAccountUUID, beneficiaryAccount, beneficiaryMerchantReference, description, metadata, payoutMethodCode, payoutSchedule, payoutSpeed, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Account {\n");
    sb.append("    accountCode: ").append(toIndentedString(accountCode)).append("\n");
    sb.append("    bankAccountUUID: ").append(toIndentedString(bankAccountUUID)).append("\n");
    sb.append("    beneficiaryAccount: ").append(toIndentedString(beneficiaryAccount)).append("\n");
    sb.append("    beneficiaryMerchantReference: ").append(toIndentedString(beneficiaryMerchantReference)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    payoutMethodCode: ").append(toIndentedString(payoutMethodCode)).append("\n");
    sb.append("    payoutSchedule: ").append(toIndentedString(payoutSchedule)).append("\n");
    sb.append("    payoutSpeed: ").append(toIndentedString(payoutSpeed)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountCode");
    openapiFields.add("bankAccountUUID");
    openapiFields.add("beneficiaryAccount");
    openapiFields.add("beneficiaryMerchantReference");
    openapiFields.add("description");
    openapiFields.add("metadata");
    openapiFields.add("payoutMethodCode");
    openapiFields.add("payoutSchedule");
    openapiFields.add("payoutSpeed");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Account
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Account.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Account is not found in the empty JSON string", Account.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Account.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Account` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountCode") != null && !jsonObj.get("accountCode").isJsonNull()) && !jsonObj.get("accountCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountCode").toString()));
      }
      if ((jsonObj.get("bankAccountUUID") != null && !jsonObj.get("bankAccountUUID").isJsonNull()) && !jsonObj.get("bankAccountUUID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountUUID").toString()));
      }
      if ((jsonObj.get("beneficiaryAccount") != null && !jsonObj.get("beneficiaryAccount").isJsonNull()) && !jsonObj.get("beneficiaryAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryAccount").toString()));
      }
      if ((jsonObj.get("beneficiaryMerchantReference") != null && !jsonObj.get("beneficiaryMerchantReference").isJsonNull()) && !jsonObj.get("beneficiaryMerchantReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryMerchantReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryMerchantReference").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("payoutMethodCode") != null && !jsonObj.get("payoutMethodCode").isJsonNull()) && !jsonObj.get("payoutMethodCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutMethodCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutMethodCode").toString()));
      }
      // validate the optional field `payoutSchedule`
      if (jsonObj.get("payoutSchedule") != null && !jsonObj.get("payoutSchedule").isJsonNull()) {
        PayoutScheduleResponse.validateJsonElement(jsonObj.get("payoutSchedule"));
      }
      if ((jsonObj.get("payoutSpeed") != null && !jsonObj.get("payoutSpeed").isJsonNull()) && !jsonObj.get("payoutSpeed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payoutSpeed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payoutSpeed").toString()));
      }
      // validate the optional field `payoutSpeed`
      if (jsonObj.get("payoutSpeed") != null && !jsonObj.get("payoutSpeed").isJsonNull()) {
        PayoutSpeedEnum.validateJsonElement(jsonObj.get("payoutSpeed"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Account.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Account' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Account> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Account.class));

       return (TypeAdapter<T>) new TypeAdapter<Account>() {
           @Override
           public void write(JsonWriter out, Account value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Account read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Account given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Account
   * @throws IOException if the JSON string is invalid with respect to Account
   */
  public static Account fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Account.class);
  }

  /**
   * Convert an instance of Account to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

