/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.AccountHolderDetails;
import org.openapitools.client.model.AccountHolderStatus;
import org.openapitools.client.model.ErrorFieldType;
import org.openapitools.client.model.KYCVerificationResult;
import org.openapitools.client.model.MigrationData;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for GetAccountHolderResponse
 */
public class GetAccountHolderResponseTest {
    private final GetAccountHolderResponse model = new GetAccountHolderResponse();

    /**
     * Model tests for GetAccountHolderResponse
     */
    @Test
    public void testGetAccountHolderResponse() {
        // TODO: test GetAccountHolderResponse
    }

    /**
     * Test the property 'accountHolderCode'
     */
    @Test
    public void accountHolderCodeTest() {
        // TODO: test accountHolderCode
    }

    /**
     * Test the property 'accountHolderDetails'
     */
    @Test
    public void accountHolderDetailsTest() {
        // TODO: test accountHolderDetails
    }

    /**
     * Test the property 'accountHolderStatus'
     */
    @Test
    public void accountHolderStatusTest() {
        // TODO: test accountHolderStatus
    }

    /**
     * Test the property 'accounts'
     */
    @Test
    public void accountsTest() {
        // TODO: test accounts
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'invalidFields'
     */
    @Test
    public void invalidFieldsTest() {
        // TODO: test invalidFields
    }

    /**
     * Test the property 'legalEntity'
     */
    @Test
    public void legalEntityTest() {
        // TODO: test legalEntity
    }

    /**
     * Test the property 'migrationData'
     */
    @Test
    public void migrationDataTest() {
        // TODO: test migrationData
    }

    /**
     * Test the property 'primaryCurrency'
     */
    @Test
    public void primaryCurrencyTest() {
        // TODO: test primaryCurrency
    }

    /**
     * Test the property 'pspReference'
     */
    @Test
    public void pspReferenceTest() {
        // TODO: test pspReference
    }

    /**
     * Test the property 'resultCode'
     */
    @Test
    public void resultCodeTest() {
        // TODO: test resultCode
    }

    /**
     * Test the property 'systemUpToDateTime'
     */
    @Test
    public void systemUpToDateTimeTest() {
        // TODO: test systemUpToDateTime
    }

    /**
     * Test the property 'verification'
     */
    @Test
    public void verificationTest() {
        // TODO: test verification
    }

    /**
     * Test the property 'verificationProfile'
     */
    @Test
    public void verificationProfileTest() {
        // TODO: test verificationProfile
    }

}
