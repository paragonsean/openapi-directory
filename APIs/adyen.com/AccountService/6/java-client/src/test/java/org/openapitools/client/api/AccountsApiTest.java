/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CloseAccountRequest;
import org.openapitools.client.model.CloseAccountResponse;
import org.openapitools.client.model.CreateAccountRequest;
import org.openapitools.client.model.CreateAccountResponse;
import org.openapitools.client.model.ServiceError;
import org.openapitools.client.model.UpdateAccountRequest;
import org.openapitools.client.model.UpdateAccountResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Close an account
     *
     * Closes an account. If an account is closed, you cannot process transactions, pay out its funds, or reopen it. If payments are made to a closed account, the payments are sent to your liable account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCloseAccountTest() throws ApiException {
        CloseAccountRequest closeAccountRequest = null;
        CloseAccountResponse response = api.postCloseAccount(closeAccountRequest);
        // TODO: test validations
    }

    /**
     * Create an account
     *
     * Creates an account under an account holder. An account holder can have [multiple accounts](https://docs.adyen.com/marketplaces-and-platforms/classic/account-holders-and-accounts#create-additional-accounts).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postCreateAccountTest() throws ApiException {
        CreateAccountRequest createAccountRequest = null;
        CreateAccountResponse response = api.postCreateAccount(createAccountRequest);
        // TODO: test validations
    }

    /**
     * Update an account
     *
     * Updates the description or payout schedule of an account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postUpdateAccountTest() throws ApiException {
        UpdateAccountRequest updateAccountRequest = null;
        UpdateAccountResponse response = api.postUpdateAccount(updateAccountRequest);
        // TODO: test validations
    }

}
