/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalArrangementDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalArrangementDetail::OAILegalArrangementDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalArrangementDetail::OAILegalArrangementDetail() {
    this->initializeModel();
}

OAILegalArrangementDetail::~OAILegalArrangementDetail() {}

void OAILegalArrangementDetail::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_legal_arrangement_code_isSet = false;
    m_legal_arrangement_code_isValid = false;

    m_legal_arrangement_entities_isSet = false;
    m_legal_arrangement_entities_isValid = false;

    m_legal_arrangement_reference_isSet = false;
    m_legal_arrangement_reference_isValid = false;

    m_legal_form_isSet = false;
    m_legal_form_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_number_isSet = false;
    m_registration_number_isValid = false;

    m_tax_number_isSet = false;
    m_tax_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILegalArrangementDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalArrangementDetail::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_legal_arrangement_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_code, json[QString("legalArrangementCode")]);
    m_legal_arrangement_code_isSet = !json[QString("legalArrangementCode")].isNull() && m_legal_arrangement_code_isValid;

    m_legal_arrangement_entities_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_entities, json[QString("legalArrangementEntities")]);
    m_legal_arrangement_entities_isSet = !json[QString("legalArrangementEntities")].isNull() && m_legal_arrangement_entities_isValid;

    m_legal_arrangement_reference_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_reference, json[QString("legalArrangementReference")]);
    m_legal_arrangement_reference_isSet = !json[QString("legalArrangementReference")].isNull() && m_legal_arrangement_reference_isValid;

    m_legal_form_isValid = ::OpenAPI::fromJsonValue(m_legal_form, json[QString("legalForm")]);
    m_legal_form_isSet = !json[QString("legalForm")].isNull() && m_legal_form_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_number_isValid = ::OpenAPI::fromJsonValue(m_registration_number, json[QString("registrationNumber")]);
    m_registration_number_isSet = !json[QString("registrationNumber")].isNull() && m_registration_number_isValid;

    m_tax_number_isValid = ::OpenAPI::fromJsonValue(m_tax_number, json[QString("taxNumber")]);
    m_tax_number_isSet = !json[QString("taxNumber")].isNull() && m_tax_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILegalArrangementDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalArrangementDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_legal_arrangement_code_isSet) {
        obj.insert(QString("legalArrangementCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_code));
    }
    if (m_legal_arrangement_entities.size() > 0) {
        obj.insert(QString("legalArrangementEntities"), ::OpenAPI::toJsonValue(m_legal_arrangement_entities));
    }
    if (m_legal_arrangement_reference_isSet) {
        obj.insert(QString("legalArrangementReference"), ::OpenAPI::toJsonValue(m_legal_arrangement_reference));
    }
    if (m_legal_form_isSet) {
        obj.insert(QString("legalForm"), ::OpenAPI::toJsonValue(m_legal_form));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_number_isSet) {
        obj.insert(QString("registrationNumber"), ::OpenAPI::toJsonValue(m_registration_number));
    }
    if (m_tax_number_isSet) {
        obj.insert(QString("taxNumber"), ::OpenAPI::toJsonValue(m_tax_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIViasAddress OAILegalArrangementDetail::getAddress() const {
    return m_address;
}
void OAILegalArrangementDetail::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILegalArrangementDetail::is_address_Set() const{
    return m_address_isSet;
}

bool OAILegalArrangementDetail::is_address_Valid() const{
    return m_address_isValid;
}

QString OAILegalArrangementDetail::getLegalArrangementCode() const {
    return m_legal_arrangement_code;
}
void OAILegalArrangementDetail::setLegalArrangementCode(const QString &legal_arrangement_code) {
    m_legal_arrangement_code = legal_arrangement_code;
    m_legal_arrangement_code_isSet = true;
}

bool OAILegalArrangementDetail::is_legal_arrangement_code_Set() const{
    return m_legal_arrangement_code_isSet;
}

bool OAILegalArrangementDetail::is_legal_arrangement_code_Valid() const{
    return m_legal_arrangement_code_isValid;
}

QList<OAILegalArrangementEntityDetail> OAILegalArrangementDetail::getLegalArrangementEntities() const {
    return m_legal_arrangement_entities;
}
void OAILegalArrangementDetail::setLegalArrangementEntities(const QList<OAILegalArrangementEntityDetail> &legal_arrangement_entities) {
    m_legal_arrangement_entities = legal_arrangement_entities;
    m_legal_arrangement_entities_isSet = true;
}

bool OAILegalArrangementDetail::is_legal_arrangement_entities_Set() const{
    return m_legal_arrangement_entities_isSet;
}

bool OAILegalArrangementDetail::is_legal_arrangement_entities_Valid() const{
    return m_legal_arrangement_entities_isValid;
}

QString OAILegalArrangementDetail::getLegalArrangementReference() const {
    return m_legal_arrangement_reference;
}
void OAILegalArrangementDetail::setLegalArrangementReference(const QString &legal_arrangement_reference) {
    m_legal_arrangement_reference = legal_arrangement_reference;
    m_legal_arrangement_reference_isSet = true;
}

bool OAILegalArrangementDetail::is_legal_arrangement_reference_Set() const{
    return m_legal_arrangement_reference_isSet;
}

bool OAILegalArrangementDetail::is_legal_arrangement_reference_Valid() const{
    return m_legal_arrangement_reference_isValid;
}

QString OAILegalArrangementDetail::getLegalForm() const {
    return m_legal_form;
}
void OAILegalArrangementDetail::setLegalForm(const QString &legal_form) {
    m_legal_form = legal_form;
    m_legal_form_isSet = true;
}

bool OAILegalArrangementDetail::is_legal_form_Set() const{
    return m_legal_form_isSet;
}

bool OAILegalArrangementDetail::is_legal_form_Valid() const{
    return m_legal_form_isValid;
}

QString OAILegalArrangementDetail::getName() const {
    return m_name;
}
void OAILegalArrangementDetail::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAILegalArrangementDetail::is_name_Set() const{
    return m_name_isSet;
}

bool OAILegalArrangementDetail::is_name_Valid() const{
    return m_name_isValid;
}

QString OAILegalArrangementDetail::getRegistrationNumber() const {
    return m_registration_number;
}
void OAILegalArrangementDetail::setRegistrationNumber(const QString &registration_number) {
    m_registration_number = registration_number;
    m_registration_number_isSet = true;
}

bool OAILegalArrangementDetail::is_registration_number_Set() const{
    return m_registration_number_isSet;
}

bool OAILegalArrangementDetail::is_registration_number_Valid() const{
    return m_registration_number_isValid;
}

QString OAILegalArrangementDetail::getTaxNumber() const {
    return m_tax_number;
}
void OAILegalArrangementDetail::setTaxNumber(const QString &tax_number) {
    m_tax_number = tax_number;
    m_tax_number_isSet = true;
}

bool OAILegalArrangementDetail::is_tax_number_Set() const{
    return m_tax_number_isSet;
}

bool OAILegalArrangementDetail::is_tax_number_Valid() const{
    return m_tax_number_isValid;
}

QString OAILegalArrangementDetail::getType() const {
    return m_type;
}
void OAILegalArrangementDetail::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILegalArrangementDetail::is_type_Set() const{
    return m_type_isSet;
}

bool OAILegalArrangementDetail::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILegalArrangementDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_form_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalArrangementDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
