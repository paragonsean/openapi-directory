/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentDetail::OAIDocumentDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentDetail::OAIDocumentDetail() {
    this->initializeModel();
}

OAIDocumentDetail::~OAIDocumentDetail() {}

void OAIDocumentDetail::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_bank_account_uuid_isSet = false;
    m_bank_account_uuid_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_document_type_isSet = false;
    m_document_type_isValid = false;

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_legal_arrangement_code_isSet = false;
    m_legal_arrangement_code_isValid = false;

    m_legal_arrangement_entity_code_isSet = false;
    m_legal_arrangement_entity_code_isValid = false;

    m_shareholder_code_isSet = false;
    m_shareholder_code_isValid = false;

    m_signatory_code_isSet = false;
    m_signatory_code_isValid = false;
}

void OAIDocumentDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentDetail::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_bank_account_uuid_isValid = ::OpenAPI::fromJsonValue(m_bank_account_uuid, json[QString("bankAccountUUID")]);
    m_bank_account_uuid_isSet = !json[QString("bankAccountUUID")].isNull() && m_bank_account_uuid_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_document_type_isValid = ::OpenAPI::fromJsonValue(m_document_type, json[QString("documentType")]);
    m_document_type_isSet = !json[QString("documentType")].isNull() && m_document_type_isValid;

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_legal_arrangement_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_code, json[QString("legalArrangementCode")]);
    m_legal_arrangement_code_isSet = !json[QString("legalArrangementCode")].isNull() && m_legal_arrangement_code_isValid;

    m_legal_arrangement_entity_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_entity_code, json[QString("legalArrangementEntityCode")]);
    m_legal_arrangement_entity_code_isSet = !json[QString("legalArrangementEntityCode")].isNull() && m_legal_arrangement_entity_code_isValid;

    m_shareholder_code_isValid = ::OpenAPI::fromJsonValue(m_shareholder_code, json[QString("shareholderCode")]);
    m_shareholder_code_isSet = !json[QString("shareholderCode")].isNull() && m_shareholder_code_isValid;

    m_signatory_code_isValid = ::OpenAPI::fromJsonValue(m_signatory_code, json[QString("signatoryCode")]);
    m_signatory_code_isSet = !json[QString("signatoryCode")].isNull() && m_signatory_code_isValid;
}

QString OAIDocumentDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_bank_account_uuid_isSet) {
        obj.insert(QString("bankAccountUUID"), ::OpenAPI::toJsonValue(m_bank_account_uuid));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_document_type_isSet) {
        obj.insert(QString("documentType"), ::OpenAPI::toJsonValue(m_document_type));
    }
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_legal_arrangement_code_isSet) {
        obj.insert(QString("legalArrangementCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_code));
    }
    if (m_legal_arrangement_entity_code_isSet) {
        obj.insert(QString("legalArrangementEntityCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_entity_code));
    }
    if (m_shareholder_code_isSet) {
        obj.insert(QString("shareholderCode"), ::OpenAPI::toJsonValue(m_shareholder_code));
    }
    if (m_signatory_code_isSet) {
        obj.insert(QString("signatoryCode"), ::OpenAPI::toJsonValue(m_signatory_code));
    }
    return obj;
}

QString OAIDocumentDetail::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIDocumentDetail::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIDocumentDetail::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIDocumentDetail::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

QString OAIDocumentDetail::getBankAccountUuid() const {
    return m_bank_account_uuid;
}
void OAIDocumentDetail::setBankAccountUuid(const QString &bank_account_uuid) {
    m_bank_account_uuid = bank_account_uuid;
    m_bank_account_uuid_isSet = true;
}

bool OAIDocumentDetail::is_bank_account_uuid_Set() const{
    return m_bank_account_uuid_isSet;
}

bool OAIDocumentDetail::is_bank_account_uuid_Valid() const{
    return m_bank_account_uuid_isValid;
}

QString OAIDocumentDetail::getDescription() const {
    return m_description;
}
void OAIDocumentDetail::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDocumentDetail::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDocumentDetail::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDocumentDetail::getDocumentType() const {
    return m_document_type;
}
void OAIDocumentDetail::setDocumentType(const QString &document_type) {
    m_document_type = document_type;
    m_document_type_isSet = true;
}

bool OAIDocumentDetail::is_document_type_Set() const{
    return m_document_type_isSet;
}

bool OAIDocumentDetail::is_document_type_Valid() const{
    return m_document_type_isValid;
}

QString OAIDocumentDetail::getFilename() const {
    return m_filename;
}
void OAIDocumentDetail::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAIDocumentDetail::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAIDocumentDetail::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAIDocumentDetail::getLegalArrangementCode() const {
    return m_legal_arrangement_code;
}
void OAIDocumentDetail::setLegalArrangementCode(const QString &legal_arrangement_code) {
    m_legal_arrangement_code = legal_arrangement_code;
    m_legal_arrangement_code_isSet = true;
}

bool OAIDocumentDetail::is_legal_arrangement_code_Set() const{
    return m_legal_arrangement_code_isSet;
}

bool OAIDocumentDetail::is_legal_arrangement_code_Valid() const{
    return m_legal_arrangement_code_isValid;
}

QString OAIDocumentDetail::getLegalArrangementEntityCode() const {
    return m_legal_arrangement_entity_code;
}
void OAIDocumentDetail::setLegalArrangementEntityCode(const QString &legal_arrangement_entity_code) {
    m_legal_arrangement_entity_code = legal_arrangement_entity_code;
    m_legal_arrangement_entity_code_isSet = true;
}

bool OAIDocumentDetail::is_legal_arrangement_entity_code_Set() const{
    return m_legal_arrangement_entity_code_isSet;
}

bool OAIDocumentDetail::is_legal_arrangement_entity_code_Valid() const{
    return m_legal_arrangement_entity_code_isValid;
}

QString OAIDocumentDetail::getShareholderCode() const {
    return m_shareholder_code;
}
void OAIDocumentDetail::setShareholderCode(const QString &shareholder_code) {
    m_shareholder_code = shareholder_code;
    m_shareholder_code_isSet = true;
}

bool OAIDocumentDetail::is_shareholder_code_Set() const{
    return m_shareholder_code_isSet;
}

bool OAIDocumentDetail::is_shareholder_code_Valid() const{
    return m_shareholder_code_isValid;
}

QString OAIDocumentDetail::getSignatoryCode() const {
    return m_signatory_code;
}
void OAIDocumentDetail::setSignatoryCode(const QString &signatory_code) {
    m_signatory_code = signatory_code;
    m_signatory_code_isSet = true;
}

bool OAIDocumentDetail::is_signatory_code_Set() const{
    return m_signatory_code_isSet;
}

bool OAIDocumentDetail::is_signatory_code_Valid() const{
    return m_signatory_code_isValid;
}

bool OAIDocumentDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_uuid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_entity_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shareholder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signatory_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_document_type_isValid && true;
}

} // namespace OpenAPI
