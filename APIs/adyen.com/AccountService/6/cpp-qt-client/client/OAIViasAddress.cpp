/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViasAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViasAddress::OAIViasAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViasAddress::OAIViasAddress() {
    this->initializeModel();
}

OAIViasAddress::~OAIViasAddress() {}

void OAIViasAddress::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_house_number_or_name_isSet = false;
    m_house_number_or_name_isValid = false;

    m_postal_code_isSet = false;
    m_postal_code_isValid = false;

    m_state_or_province_isSet = false;
    m_state_or_province_isValid = false;

    m_street_isSet = false;
    m_street_isValid = false;
}

void OAIViasAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViasAddress::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_house_number_or_name_isValid = ::OpenAPI::fromJsonValue(m_house_number_or_name, json[QString("houseNumberOrName")]);
    m_house_number_or_name_isSet = !json[QString("houseNumberOrName")].isNull() && m_house_number_or_name_isValid;

    m_postal_code_isValid = ::OpenAPI::fromJsonValue(m_postal_code, json[QString("postalCode")]);
    m_postal_code_isSet = !json[QString("postalCode")].isNull() && m_postal_code_isValid;

    m_state_or_province_isValid = ::OpenAPI::fromJsonValue(m_state_or_province, json[QString("stateOrProvince")]);
    m_state_or_province_isSet = !json[QString("stateOrProvince")].isNull() && m_state_or_province_isValid;

    m_street_isValid = ::OpenAPI::fromJsonValue(m_street, json[QString("street")]);
    m_street_isSet = !json[QString("street")].isNull() && m_street_isValid;
}

QString OAIViasAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViasAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_house_number_or_name_isSet) {
        obj.insert(QString("houseNumberOrName"), ::OpenAPI::toJsonValue(m_house_number_or_name));
    }
    if (m_postal_code_isSet) {
        obj.insert(QString("postalCode"), ::OpenAPI::toJsonValue(m_postal_code));
    }
    if (m_state_or_province_isSet) {
        obj.insert(QString("stateOrProvince"), ::OpenAPI::toJsonValue(m_state_or_province));
    }
    if (m_street_isSet) {
        obj.insert(QString("street"), ::OpenAPI::toJsonValue(m_street));
    }
    return obj;
}

QString OAIViasAddress::getCity() const {
    return m_city;
}
void OAIViasAddress::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIViasAddress::is_city_Set() const{
    return m_city_isSet;
}

bool OAIViasAddress::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIViasAddress::getCountry() const {
    return m_country;
}
void OAIViasAddress::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIViasAddress::is_country_Set() const{
    return m_country_isSet;
}

bool OAIViasAddress::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIViasAddress::getHouseNumberOrName() const {
    return m_house_number_or_name;
}
void OAIViasAddress::setHouseNumberOrName(const QString &house_number_or_name) {
    m_house_number_or_name = house_number_or_name;
    m_house_number_or_name_isSet = true;
}

bool OAIViasAddress::is_house_number_or_name_Set() const{
    return m_house_number_or_name_isSet;
}

bool OAIViasAddress::is_house_number_or_name_Valid() const{
    return m_house_number_or_name_isValid;
}

QString OAIViasAddress::getPostalCode() const {
    return m_postal_code;
}
void OAIViasAddress::setPostalCode(const QString &postal_code) {
    m_postal_code = postal_code;
    m_postal_code_isSet = true;
}

bool OAIViasAddress::is_postal_code_Set() const{
    return m_postal_code_isSet;
}

bool OAIViasAddress::is_postal_code_Valid() const{
    return m_postal_code_isValid;
}

QString OAIViasAddress::getStateOrProvince() const {
    return m_state_or_province;
}
void OAIViasAddress::setStateOrProvince(const QString &state_or_province) {
    m_state_or_province = state_or_province;
    m_state_or_province_isSet = true;
}

bool OAIViasAddress::is_state_or_province_Set() const{
    return m_state_or_province_isSet;
}

bool OAIViasAddress::is_state_or_province_Valid() const{
    return m_state_or_province_isValid;
}

QString OAIViasAddress::getStreet() const {
    return m_street;
}
void OAIViasAddress::setStreet(const QString &street) {
    m_street = street;
    m_street_isSet = true;
}

bool OAIViasAddress::is_street_Set() const{
    return m_street_isSet;
}

bool OAIViasAddress::is_street_Valid() const{
    return m_street_isValid;
}

bool OAIViasAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_house_number_or_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_or_province_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_street_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViasAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && true;
}

} // namespace OpenAPI
