/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILegalArrangementEntityDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILegalArrangementEntityDetail::OAILegalArrangementEntityDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILegalArrangementEntityDetail::OAILegalArrangementEntityDetail() {
    this->initializeModel();
}

OAILegalArrangementEntityDetail::~OAILegalArrangementEntityDetail() {}

void OAILegalArrangementEntityDetail::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_business_details_isSet = false;
    m_business_details_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_individual_details_isSet = false;
    m_individual_details_isValid = false;

    m_legal_arrangement_entity_code_isSet = false;
    m_legal_arrangement_entity_code_isValid = false;

    m_legal_arrangement_entity_reference_isSet = false;
    m_legal_arrangement_entity_reference_isValid = false;

    m_legal_arrangement_members_isSet = false;
    m_legal_arrangement_members_isValid = false;

    m_legal_entity_type_isSet = false;
    m_legal_entity_type_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAILegalArrangementEntityDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILegalArrangementEntityDetail::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_business_details_isValid = ::OpenAPI::fromJsonValue(m_business_details, json[QString("businessDetails")]);
    m_business_details_isSet = !json[QString("businessDetails")].isNull() && m_business_details_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_individual_details_isValid = ::OpenAPI::fromJsonValue(m_individual_details, json[QString("individualDetails")]);
    m_individual_details_isSet = !json[QString("individualDetails")].isNull() && m_individual_details_isValid;

    m_legal_arrangement_entity_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_entity_code, json[QString("legalArrangementEntityCode")]);
    m_legal_arrangement_entity_code_isSet = !json[QString("legalArrangementEntityCode")].isNull() && m_legal_arrangement_entity_code_isValid;

    m_legal_arrangement_entity_reference_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_entity_reference, json[QString("legalArrangementEntityReference")]);
    m_legal_arrangement_entity_reference_isSet = !json[QString("legalArrangementEntityReference")].isNull() && m_legal_arrangement_entity_reference_isValid;

    m_legal_arrangement_members_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_members, json[QString("legalArrangementMembers")]);
    m_legal_arrangement_members_isSet = !json[QString("legalArrangementMembers")].isNull() && m_legal_arrangement_members_isValid;

    m_legal_entity_type_isValid = ::OpenAPI::fromJsonValue(m_legal_entity_type, json[QString("legalEntityType")]);
    m_legal_entity_type_isSet = !json[QString("legalEntityType")].isNull() && m_legal_entity_type_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAILegalArrangementEntityDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILegalArrangementEntityDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_business_details.isSet()) {
        obj.insert(QString("businessDetails"), ::OpenAPI::toJsonValue(m_business_details));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_individual_details.isSet()) {
        obj.insert(QString("individualDetails"), ::OpenAPI::toJsonValue(m_individual_details));
    }
    if (m_legal_arrangement_entity_code_isSet) {
        obj.insert(QString("legalArrangementEntityCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_entity_code));
    }
    if (m_legal_arrangement_entity_reference_isSet) {
        obj.insert(QString("legalArrangementEntityReference"), ::OpenAPI::toJsonValue(m_legal_arrangement_entity_reference));
    }
    if (m_legal_arrangement_members.size() > 0) {
        obj.insert(QString("legalArrangementMembers"), ::OpenAPI::toJsonValue(m_legal_arrangement_members));
    }
    if (m_legal_entity_type_isSet) {
        obj.insert(QString("legalEntityType"), ::OpenAPI::toJsonValue(m_legal_entity_type));
    }
    if (m_phone_number.isSet()) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIViasAddress OAILegalArrangementEntityDetail::getAddress() const {
    return m_address;
}
void OAILegalArrangementEntityDetail::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_address_Set() const{
    return m_address_isSet;
}

bool OAILegalArrangementEntityDetail::is_address_Valid() const{
    return m_address_isValid;
}

OAIBusinessDetails OAILegalArrangementEntityDetail::getBusinessDetails() const {
    return m_business_details;
}
void OAILegalArrangementEntityDetail::setBusinessDetails(const OAIBusinessDetails &business_details) {
    m_business_details = business_details;
    m_business_details_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_business_details_Set() const{
    return m_business_details_isSet;
}

bool OAILegalArrangementEntityDetail::is_business_details_Valid() const{
    return m_business_details_isValid;
}

QString OAILegalArrangementEntityDetail::getEmail() const {
    return m_email;
}
void OAILegalArrangementEntityDetail::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_email_Set() const{
    return m_email_isSet;
}

bool OAILegalArrangementEntityDetail::is_email_Valid() const{
    return m_email_isValid;
}

QString OAILegalArrangementEntityDetail::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAILegalArrangementEntityDetail::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAILegalArrangementEntityDetail::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

OAIIndividualDetails OAILegalArrangementEntityDetail::getIndividualDetails() const {
    return m_individual_details;
}
void OAILegalArrangementEntityDetail::setIndividualDetails(const OAIIndividualDetails &individual_details) {
    m_individual_details = individual_details;
    m_individual_details_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_individual_details_Set() const{
    return m_individual_details_isSet;
}

bool OAILegalArrangementEntityDetail::is_individual_details_Valid() const{
    return m_individual_details_isValid;
}

QString OAILegalArrangementEntityDetail::getLegalArrangementEntityCode() const {
    return m_legal_arrangement_entity_code;
}
void OAILegalArrangementEntityDetail::setLegalArrangementEntityCode(const QString &legal_arrangement_entity_code) {
    m_legal_arrangement_entity_code = legal_arrangement_entity_code;
    m_legal_arrangement_entity_code_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_entity_code_Set() const{
    return m_legal_arrangement_entity_code_isSet;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_entity_code_Valid() const{
    return m_legal_arrangement_entity_code_isValid;
}

QString OAILegalArrangementEntityDetail::getLegalArrangementEntityReference() const {
    return m_legal_arrangement_entity_reference;
}
void OAILegalArrangementEntityDetail::setLegalArrangementEntityReference(const QString &legal_arrangement_entity_reference) {
    m_legal_arrangement_entity_reference = legal_arrangement_entity_reference;
    m_legal_arrangement_entity_reference_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_entity_reference_Set() const{
    return m_legal_arrangement_entity_reference_isSet;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_entity_reference_Valid() const{
    return m_legal_arrangement_entity_reference_isValid;
}

QList<QString> OAILegalArrangementEntityDetail::getLegalArrangementMembers() const {
    return m_legal_arrangement_members;
}
void OAILegalArrangementEntityDetail::setLegalArrangementMembers(const QList<QString> &legal_arrangement_members) {
    m_legal_arrangement_members = legal_arrangement_members;
    m_legal_arrangement_members_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_members_Set() const{
    return m_legal_arrangement_members_isSet;
}

bool OAILegalArrangementEntityDetail::is_legal_arrangement_members_Valid() const{
    return m_legal_arrangement_members_isValid;
}

QString OAILegalArrangementEntityDetail::getLegalEntityType() const {
    return m_legal_entity_type;
}
void OAILegalArrangementEntityDetail::setLegalEntityType(const QString &legal_entity_type) {
    m_legal_entity_type = legal_entity_type;
    m_legal_entity_type_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_legal_entity_type_Set() const{
    return m_legal_entity_type_isSet;
}

bool OAILegalArrangementEntityDetail::is_legal_entity_type_Valid() const{
    return m_legal_entity_type_isValid;
}

OAIViasPhoneNumber OAILegalArrangementEntityDetail::getPhoneNumber() const {
    return m_phone_number;
}
void OAILegalArrangementEntityDetail::setPhoneNumber(const OAIViasPhoneNumber &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAILegalArrangementEntityDetail::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QString OAILegalArrangementEntityDetail::getWebAddress() const {
    return m_web_address;
}
void OAILegalArrangementEntityDetail::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAILegalArrangementEntityDetail::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAILegalArrangementEntityDetail::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAILegalArrangementEntityDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_entity_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_entity_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILegalArrangementEntityDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
