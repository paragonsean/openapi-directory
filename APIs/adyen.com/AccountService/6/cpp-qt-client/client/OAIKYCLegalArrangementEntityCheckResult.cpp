/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKYCLegalArrangementEntityCheckResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKYCLegalArrangementEntityCheckResult::OAIKYCLegalArrangementEntityCheckResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKYCLegalArrangementEntityCheckResult::OAIKYCLegalArrangementEntityCheckResult() {
    this->initializeModel();
}

OAIKYCLegalArrangementEntityCheckResult::~OAIKYCLegalArrangementEntityCheckResult() {}

void OAIKYCLegalArrangementEntityCheckResult::initializeModel() {

    m_checks_isSet = false;
    m_checks_isValid = false;

    m_legal_arrangement_code_isSet = false;
    m_legal_arrangement_code_isValid = false;

    m_legal_arrangement_entity_code_isSet = false;
    m_legal_arrangement_entity_code_isValid = false;
}

void OAIKYCLegalArrangementEntityCheckResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKYCLegalArrangementEntityCheckResult::fromJsonObject(QJsonObject json) {

    m_checks_isValid = ::OpenAPI::fromJsonValue(m_checks, json[QString("checks")]);
    m_checks_isSet = !json[QString("checks")].isNull() && m_checks_isValid;

    m_legal_arrangement_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_code, json[QString("legalArrangementCode")]);
    m_legal_arrangement_code_isSet = !json[QString("legalArrangementCode")].isNull() && m_legal_arrangement_code_isValid;

    m_legal_arrangement_entity_code_isValid = ::OpenAPI::fromJsonValue(m_legal_arrangement_entity_code, json[QString("legalArrangementEntityCode")]);
    m_legal_arrangement_entity_code_isSet = !json[QString("legalArrangementEntityCode")].isNull() && m_legal_arrangement_entity_code_isValid;
}

QString OAIKYCLegalArrangementEntityCheckResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKYCLegalArrangementEntityCheckResult::asJsonObject() const {
    QJsonObject obj;
    if (m_checks.size() > 0) {
        obj.insert(QString("checks"), ::OpenAPI::toJsonValue(m_checks));
    }
    if (m_legal_arrangement_code_isSet) {
        obj.insert(QString("legalArrangementCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_code));
    }
    if (m_legal_arrangement_entity_code_isSet) {
        obj.insert(QString("legalArrangementEntityCode"), ::OpenAPI::toJsonValue(m_legal_arrangement_entity_code));
    }
    return obj;
}

QList<OAIKYCCheckStatusData> OAIKYCLegalArrangementEntityCheckResult::getChecks() const {
    return m_checks;
}
void OAIKYCLegalArrangementEntityCheckResult::setChecks(const QList<OAIKYCCheckStatusData> &checks) {
    m_checks = checks;
    m_checks_isSet = true;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_checks_Set() const{
    return m_checks_isSet;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_checks_Valid() const{
    return m_checks_isValid;
}

QString OAIKYCLegalArrangementEntityCheckResult::getLegalArrangementCode() const {
    return m_legal_arrangement_code;
}
void OAIKYCLegalArrangementEntityCheckResult::setLegalArrangementCode(const QString &legal_arrangement_code) {
    m_legal_arrangement_code = legal_arrangement_code;
    m_legal_arrangement_code_isSet = true;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_legal_arrangement_code_Set() const{
    return m_legal_arrangement_code_isSet;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_legal_arrangement_code_Valid() const{
    return m_legal_arrangement_code_isValid;
}

QString OAIKYCLegalArrangementEntityCheckResult::getLegalArrangementEntityCode() const {
    return m_legal_arrangement_entity_code;
}
void OAIKYCLegalArrangementEntityCheckResult::setLegalArrangementEntityCode(const QString &legal_arrangement_entity_code) {
    m_legal_arrangement_entity_code = legal_arrangement_entity_code;
    m_legal_arrangement_entity_code_isSet = true;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_legal_arrangement_entity_code_Set() const{
    return m_legal_arrangement_entity_code_isSet;
}

bool OAIKYCLegalArrangementEntityCheckResult::is_legal_arrangement_entity_code_Valid() const{
    return m_legal_arrangement_entity_code_isValid;
}

bool OAIKYCLegalArrangementEntityCheckResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_arrangement_entity_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKYCLegalArrangementEntityCheckResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
