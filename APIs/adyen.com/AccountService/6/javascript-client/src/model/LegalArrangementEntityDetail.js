/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessDetails from './BusinessDetails';
import IndividualDetails from './IndividualDetails';
import ViasAddress from './ViasAddress';
import ViasPhoneNumber from './ViasPhoneNumber';

/**
 * The LegalArrangementEntityDetail model module.
 * @module model/LegalArrangementEntityDetail
 * @version 6
 */
class LegalArrangementEntityDetail {
    /**
     * Constructs a new <code>LegalArrangementEntityDetail</code>.
     * @alias module:model/LegalArrangementEntityDetail
     */
    constructor() { 
        
        LegalArrangementEntityDetail.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LegalArrangementEntityDetail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LegalArrangementEntityDetail} obj Optional instance to populate.
     * @return {module:model/LegalArrangementEntityDetail} The populated <code>LegalArrangementEntityDetail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LegalArrangementEntityDetail();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ViasAddress.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('businessDetails')) {
                obj['businessDetails'] = BusinessDetails.constructFromObject(data['businessDetails']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('fullPhoneNumber')) {
                obj['fullPhoneNumber'] = ApiClient.convertToType(data['fullPhoneNumber'], 'String');
            }
            if (data.hasOwnProperty('individualDetails')) {
                obj['individualDetails'] = IndividualDetails.constructFromObject(data['individualDetails']);
            }
            if (data.hasOwnProperty('legalArrangementEntityCode')) {
                obj['legalArrangementEntityCode'] = ApiClient.convertToType(data['legalArrangementEntityCode'], 'String');
            }
            if (data.hasOwnProperty('legalArrangementEntityReference')) {
                obj['legalArrangementEntityReference'] = ApiClient.convertToType(data['legalArrangementEntityReference'], 'String');
            }
            if (data.hasOwnProperty('legalArrangementMembers')) {
                obj['legalArrangementMembers'] = ApiClient.convertToType(data['legalArrangementMembers'], ['String']);
            }
            if (data.hasOwnProperty('legalEntityType')) {
                obj['legalEntityType'] = ApiClient.convertToType(data['legalEntityType'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ViasPhoneNumber.constructFromObject(data['phoneNumber']);
            }
            if (data.hasOwnProperty('webAddress')) {
                obj['webAddress'] = ApiClient.convertToType(data['webAddress'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LegalArrangementEntityDetail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LegalArrangementEntityDetail</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          ViasAddress.validateJSON(data['address']);
        }
        // validate the optional field `businessDetails`
        if (data['businessDetails']) { // data not null
          BusinessDetails.validateJSON(data['businessDetails']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['fullPhoneNumber'] && !(typeof data['fullPhoneNumber'] === 'string' || data['fullPhoneNumber'] instanceof String)) {
            throw new Error("Expected the field `fullPhoneNumber` to be a primitive type in the JSON string but got " + data['fullPhoneNumber']);
        }
        // validate the optional field `individualDetails`
        if (data['individualDetails']) { // data not null
          IndividualDetails.validateJSON(data['individualDetails']);
        }
        // ensure the json data is a string
        if (data['legalArrangementEntityCode'] && !(typeof data['legalArrangementEntityCode'] === 'string' || data['legalArrangementEntityCode'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementEntityCode` to be a primitive type in the JSON string but got " + data['legalArrangementEntityCode']);
        }
        // ensure the json data is a string
        if (data['legalArrangementEntityReference'] && !(typeof data['legalArrangementEntityReference'] === 'string' || data['legalArrangementEntityReference'] instanceof String)) {
            throw new Error("Expected the field `legalArrangementEntityReference` to be a primitive type in the JSON string but got " + data['legalArrangementEntityReference']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['legalArrangementMembers'])) {
            throw new Error("Expected the field `legalArrangementMembers` to be an array in the JSON data but got " + data['legalArrangementMembers']);
        }
        // ensure the json data is a string
        if (data['legalEntityType'] && !(typeof data['legalEntityType'] === 'string' || data['legalEntityType'] instanceof String)) {
            throw new Error("Expected the field `legalEntityType` to be a primitive type in the JSON string but got " + data['legalEntityType']);
        }
        // validate the optional field `phoneNumber`
        if (data['phoneNumber']) { // data not null
          ViasPhoneNumber.validateJSON(data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['webAddress'] && !(typeof data['webAddress'] === 'string' || data['webAddress'] instanceof String)) {
            throw new Error("Expected the field `webAddress` to be a primitive type in the JSON string but got " + data['webAddress']);
        }

        return true;
    }


}



/**
 * The address of the entity.
 * @member {module:model/ViasAddress} address
 */
LegalArrangementEntityDetail.prototype['address'] = undefined;

/**
 * Required when creating an entity with `legalEntityType` **Business**, **NonProfit**, **PublicCompany**, or **Partnership**.
 * @member {module:model/BusinessDetails} businessDetails
 */
LegalArrangementEntityDetail.prototype['businessDetails'] = undefined;

/**
 * The e-mail address of the entity.
 * @member {String} email
 */
LegalArrangementEntityDetail.prototype['email'] = undefined;

/**
 * The phone number of the contact provided as a single string.  It will be handled as a landline phone. **Examples:** \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"
 * @member {String} fullPhoneNumber
 */
LegalArrangementEntityDetail.prototype['fullPhoneNumber'] = undefined;

/**
 * Required when creating an entity with `legalEntityType` **Individual**.
 * @member {module:model/IndividualDetails} individualDetails
 */
LegalArrangementEntityDetail.prototype['individualDetails'] = undefined;

/**
 * Adyen-generated unique alphanumeric identifier (UUID) for the entry, returned in the response when you create a legal arrangement entity. Use only when updating an account holder. If you include this field when creating an account holder, the request will fail.
 * @member {String} legalArrangementEntityCode
 */
LegalArrangementEntityDetail.prototype['legalArrangementEntityCode'] = undefined;

/**
 * Your reference for the legal arrangement entity.
 * @member {String} legalArrangementEntityReference
 */
LegalArrangementEntityDetail.prototype['legalArrangementEntityReference'] = undefined;

/**
 * An array containing the roles of the entity in the legal arrangement.  The possible values depend on the legal arrangement `type`.  - For `type` **Association**: **ControllingPerson** and **Shareholder**.  - For `type` **Partnership**: **Partner** and **Shareholder**.  - For `type` **Trust**: **Trustee**, **Settlor**, **Protector**, **Beneficiary**,  and **Shareholder**.  
 * @member {Array.<module:model/LegalArrangementEntityDetail.LegalArrangementMembersEnum>} legalArrangementMembers
 */
LegalArrangementEntityDetail.prototype['legalArrangementMembers'] = undefined;

/**
 * The legal entity type.  Possible values: **Business**, **Individual**, **NonProfit**, **PublicCompany**, or **Partnership**. 
 * @member {module:model/LegalArrangementEntityDetail.LegalEntityTypeEnum} legalEntityType
 */
LegalArrangementEntityDetail.prototype['legalEntityType'] = undefined;

/**
 * The phone number of the entity.
 * @member {module:model/ViasPhoneNumber} phoneNumber
 */
LegalArrangementEntityDetail.prototype['phoneNumber'] = undefined;

/**
 * The URL of the website of the contact.
 * @member {String} webAddress
 */
LegalArrangementEntityDetail.prototype['webAddress'] = undefined;





/**
 * Allowed values for the <code>legalArrangementMembers</code> property.
 * @enum {String}
 * @readonly
 */
LegalArrangementEntityDetail['LegalArrangementMembersEnum'] = {

    /**
     * value: "Beneficiary"
     * @const
     */
    "Beneficiary": "Beneficiary",

    /**
     * value: "ControllingPerson"
     * @const
     */
    "ControllingPerson": "ControllingPerson",

    /**
     * value: "Partner"
     * @const
     */
    "Partner": "Partner",

    /**
     * value: "Protector"
     * @const
     */
    "Protector": "Protector",

    /**
     * value: "Settlor"
     * @const
     */
    "Settlor": "Settlor",

    /**
     * value: "Shareholder"
     * @const
     */
    "Shareholder": "Shareholder",

    /**
     * value: "Trustee"
     * @const
     */
    "Trustee": "Trustee"
};


/**
 * Allowed values for the <code>legalEntityType</code> property.
 * @enum {String}
 * @readonly
 */
LegalArrangementEntityDetail['LegalEntityTypeEnum'] = {

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Individual"
     * @const
     */
    "Individual": "Individual",

    /**
     * value: "NonProfit"
     * @const
     */
    "NonProfit": "NonProfit",

    /**
     * value: "Partnership"
     * @const
     */
    "Partnership": "Partnership",

    /**
     * value: "PublicCompany"
     * @const
     */
    "PublicCompany": "PublicCompany"
};



export default LegalArrangementEntityDetail;

