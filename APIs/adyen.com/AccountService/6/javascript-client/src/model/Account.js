/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PayoutScheduleResponse from './PayoutScheduleResponse';

/**
 * The Account model module.
 * @module model/Account
 * @version 6
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     */
    constructor() { 
        
        Account.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('accountCode')) {
                obj['accountCode'] = ApiClient.convertToType(data['accountCode'], 'String');
            }
            if (data.hasOwnProperty('bankAccountUUID')) {
                obj['bankAccountUUID'] = ApiClient.convertToType(data['bankAccountUUID'], 'String');
            }
            if (data.hasOwnProperty('beneficiaryAccount')) {
                obj['beneficiaryAccount'] = ApiClient.convertToType(data['beneficiaryAccount'], 'String');
            }
            if (data.hasOwnProperty('beneficiaryMerchantReference')) {
                obj['beneficiaryMerchantReference'] = ApiClient.convertToType(data['beneficiaryMerchantReference'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('payoutMethodCode')) {
                obj['payoutMethodCode'] = ApiClient.convertToType(data['payoutMethodCode'], 'String');
            }
            if (data.hasOwnProperty('payoutSchedule')) {
                obj['payoutSchedule'] = PayoutScheduleResponse.constructFromObject(data['payoutSchedule']);
            }
            if (data.hasOwnProperty('payoutSpeed')) {
                obj['payoutSpeed'] = ApiClient.convertToType(data['payoutSpeed'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountCode'] && !(typeof data['accountCode'] === 'string' || data['accountCode'] instanceof String)) {
            throw new Error("Expected the field `accountCode` to be a primitive type in the JSON string but got " + data['accountCode']);
        }
        // ensure the json data is a string
        if (data['bankAccountUUID'] && !(typeof data['bankAccountUUID'] === 'string' || data['bankAccountUUID'] instanceof String)) {
            throw new Error("Expected the field `bankAccountUUID` to be a primitive type in the JSON string but got " + data['bankAccountUUID']);
        }
        // ensure the json data is a string
        if (data['beneficiaryAccount'] && !(typeof data['beneficiaryAccount'] === 'string' || data['beneficiaryAccount'] instanceof String)) {
            throw new Error("Expected the field `beneficiaryAccount` to be a primitive type in the JSON string but got " + data['beneficiaryAccount']);
        }
        // ensure the json data is a string
        if (data['beneficiaryMerchantReference'] && !(typeof data['beneficiaryMerchantReference'] === 'string' || data['beneficiaryMerchantReference'] instanceof String)) {
            throw new Error("Expected the field `beneficiaryMerchantReference` to be a primitive type in the JSON string but got " + data['beneficiaryMerchantReference']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['payoutMethodCode'] && !(typeof data['payoutMethodCode'] === 'string' || data['payoutMethodCode'] instanceof String)) {
            throw new Error("Expected the field `payoutMethodCode` to be a primitive type in the JSON string but got " + data['payoutMethodCode']);
        }
        // validate the optional field `payoutSchedule`
        if (data['payoutSchedule']) { // data not null
          PayoutScheduleResponse.validateJSON(data['payoutSchedule']);
        }
        // ensure the json data is a string
        if (data['payoutSpeed'] && !(typeof data['payoutSpeed'] === 'string' || data['payoutSpeed'] instanceof String)) {
            throw new Error("Expected the field `payoutSpeed` to be a primitive type in the JSON string but got " + data['payoutSpeed']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * The code of the account.
 * @member {String} accountCode
 */
Account.prototype['accountCode'] = undefined;

/**
 * The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.
 * @member {String} bankAccountUUID
 */
Account.prototype['bankAccountUUID'] = undefined;

/**
 * The beneficiary of the account.
 * @member {String} beneficiaryAccount
 */
Account.prototype['beneficiaryAccount'] = undefined;

/**
 * The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.
 * @member {String} beneficiaryMerchantReference
 */
Account.prototype['beneficiaryMerchantReference'] = undefined;

/**
 * A description of the account.
 * @member {String} description
 */
Account.prototype['description'] = undefined;

/**
 * A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.
 * @member {Object.<String, String>} metadata
 */
Account.prototype['metadata'] = undefined;

/**
 * The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.
 * @member {String} payoutMethodCode
 */
Account.prototype['payoutMethodCode'] = undefined;

/**
 * The account's payout schedule.
 * @member {module:model/PayoutScheduleResponse} payoutSchedule
 */
Account.prototype['payoutSchedule'] = undefined;

/**
 * Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.
 * @member {module:model/Account.PayoutSpeedEnum} payoutSpeed
 */
Account.prototype['payoutSpeed'] = undefined;

/**
 * The status of the account. Possible values: `Active`, `Inactive`, `Suspended`, `Closed`.
 * @member {String} status
 */
Account.prototype['status'] = undefined;





/**
 * Allowed values for the <code>payoutSpeed</code> property.
 * @enum {String}
 * @readonly
 */
Account['PayoutSpeedEnum'] = {

    /**
     * value: "INSTANT"
     * @const
     */
    "INSTANT": "INSTANT",

    /**
     * value: "SAME_DAY"
     * @const
     */
    "SAME_DAY": "SAME_DAY",

    /**
     * value: "STANDARD"
     * @const
     */
    "STANDARD": "STANDARD"
};



export default Account;

