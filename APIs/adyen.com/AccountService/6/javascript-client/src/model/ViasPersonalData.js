/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PersonalDocumentData from './PersonalDocumentData';

/**
 * The ViasPersonalData model module.
 * @module model/ViasPersonalData
 * @version 6
 */
class ViasPersonalData {
    /**
     * Constructs a new <code>ViasPersonalData</code>.
     * @alias module:model/ViasPersonalData
     */
    constructor() { 
        
        ViasPersonalData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViasPersonalData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViasPersonalData} obj Optional instance to populate.
     * @return {module:model/ViasPersonalData} The populated <code>ViasPersonalData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViasPersonalData();

            if (data.hasOwnProperty('dateOfBirth')) {
                obj['dateOfBirth'] = ApiClient.convertToType(data['dateOfBirth'], 'String');
            }
            if (data.hasOwnProperty('documentData')) {
                obj['documentData'] = ApiClient.convertToType(data['documentData'], [PersonalDocumentData]);
            }
            if (data.hasOwnProperty('nationality')) {
                obj['nationality'] = ApiClient.convertToType(data['nationality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViasPersonalData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViasPersonalData</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dateOfBirth'] && !(typeof data['dateOfBirth'] === 'string' || data['dateOfBirth'] instanceof String)) {
            throw new Error("Expected the field `dateOfBirth` to be a primitive type in the JSON string but got " + data['dateOfBirth']);
        }
        if (data['documentData']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['documentData'])) {
                throw new Error("Expected the field `documentData` to be an array in the JSON data but got " + data['documentData']);
            }
            // validate the optional field `documentData` (array)
            for (const item of data['documentData']) {
                PersonalDocumentData.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nationality'] && !(typeof data['nationality'] === 'string' || data['nationality'] instanceof String)) {
            throw new Error("Expected the field `nationality` to be a primitive type in the JSON string but got " + data['nationality']);
        }

        return true;
    }


}



/**
 * The person's date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.
 * @member {String} dateOfBirth
 */
ViasPersonalData.prototype['dateOfBirth'] = undefined;

/**
 * Array that contains information about the person's identification document. You can submit only one entry per document type.
 * @member {Array.<module:model/PersonalDocumentData>} documentData
 */
ViasPersonalData.prototype['documentData'] = undefined;

/**
 * The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. 
 * @member {String} nationality
 */
ViasPersonalData.prototype['nationality'] = undefined;






export default ViasPersonalData;

