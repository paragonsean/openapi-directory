/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ShareholderContact from './ShareholderContact';
import SignatoryContact from './SignatoryContact';
import UltimateParentCompany from './UltimateParentCompany';

/**
 * The BusinessDetails model module.
 * @module model/BusinessDetails
 * @version 6
 */
class BusinessDetails {
    /**
     * Constructs a new <code>BusinessDetails</code>.
     * @alias module:model/BusinessDetails
     */
    constructor() { 
        
        BusinessDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BusinessDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BusinessDetails} obj Optional instance to populate.
     * @return {module:model/BusinessDetails} The populated <code>BusinessDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BusinessDetails();

            if (data.hasOwnProperty('doingBusinessAs')) {
                obj['doingBusinessAs'] = ApiClient.convertToType(data['doingBusinessAs'], 'String');
            }
            if (data.hasOwnProperty('legalBusinessName')) {
                obj['legalBusinessName'] = ApiClient.convertToType(data['legalBusinessName'], 'String');
            }
            if (data.hasOwnProperty('listedUltimateParentCompany')) {
                obj['listedUltimateParentCompany'] = ApiClient.convertToType(data['listedUltimateParentCompany'], [UltimateParentCompany]);
            }
            if (data.hasOwnProperty('registrationNumber')) {
                obj['registrationNumber'] = ApiClient.convertToType(data['registrationNumber'], 'String');
            }
            if (data.hasOwnProperty('shareholders')) {
                obj['shareholders'] = ApiClient.convertToType(data['shareholders'], [ShareholderContact]);
            }
            if (data.hasOwnProperty('signatories')) {
                obj['signatories'] = ApiClient.convertToType(data['signatories'], [SignatoryContact]);
            }
            if (data.hasOwnProperty('stockExchange')) {
                obj['stockExchange'] = ApiClient.convertToType(data['stockExchange'], 'String');
            }
            if (data.hasOwnProperty('stockNumber')) {
                obj['stockNumber'] = ApiClient.convertToType(data['stockNumber'], 'String');
            }
            if (data.hasOwnProperty('stockTicker')) {
                obj['stockTicker'] = ApiClient.convertToType(data['stockTicker'], 'String');
            }
            if (data.hasOwnProperty('taxId')) {
                obj['taxId'] = ApiClient.convertToType(data['taxId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BusinessDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BusinessDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['doingBusinessAs'] && !(typeof data['doingBusinessAs'] === 'string' || data['doingBusinessAs'] instanceof String)) {
            throw new Error("Expected the field `doingBusinessAs` to be a primitive type in the JSON string but got " + data['doingBusinessAs']);
        }
        // ensure the json data is a string
        if (data['legalBusinessName'] && !(typeof data['legalBusinessName'] === 'string' || data['legalBusinessName'] instanceof String)) {
            throw new Error("Expected the field `legalBusinessName` to be a primitive type in the JSON string but got " + data['legalBusinessName']);
        }
        if (data['listedUltimateParentCompany']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['listedUltimateParentCompany'])) {
                throw new Error("Expected the field `listedUltimateParentCompany` to be an array in the JSON data but got " + data['listedUltimateParentCompany']);
            }
            // validate the optional field `listedUltimateParentCompany` (array)
            for (const item of data['listedUltimateParentCompany']) {
                UltimateParentCompany.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['registrationNumber'] && !(typeof data['registrationNumber'] === 'string' || data['registrationNumber'] instanceof String)) {
            throw new Error("Expected the field `registrationNumber` to be a primitive type in the JSON string but got " + data['registrationNumber']);
        }
        if (data['shareholders']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['shareholders'])) {
                throw new Error("Expected the field `shareholders` to be an array in the JSON data but got " + data['shareholders']);
            }
            // validate the optional field `shareholders` (array)
            for (const item of data['shareholders']) {
                ShareholderContact.validateJSON(item);
            };
        }
        if (data['signatories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['signatories'])) {
                throw new Error("Expected the field `signatories` to be an array in the JSON data but got " + data['signatories']);
            }
            // validate the optional field `signatories` (array)
            for (const item of data['signatories']) {
                SignatoryContact.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['stockExchange'] && !(typeof data['stockExchange'] === 'string' || data['stockExchange'] instanceof String)) {
            throw new Error("Expected the field `stockExchange` to be a primitive type in the JSON string but got " + data['stockExchange']);
        }
        // ensure the json data is a string
        if (data['stockNumber'] && !(typeof data['stockNumber'] === 'string' || data['stockNumber'] instanceof String)) {
            throw new Error("Expected the field `stockNumber` to be a primitive type in the JSON string but got " + data['stockNumber']);
        }
        // ensure the json data is a string
        if (data['stockTicker'] && !(typeof data['stockTicker'] === 'string' || data['stockTicker'] instanceof String)) {
            throw new Error("Expected the field `stockTicker` to be a primitive type in the JSON string but got " + data['stockTicker']);
        }
        // ensure the json data is a string
        if (data['taxId'] && !(typeof data['taxId'] === 'string' || data['taxId'] instanceof String)) {
            throw new Error("Expected the field `taxId` to be a primitive type in the JSON string but got " + data['taxId']);
        }

        return true;
    }


}



/**
 * The registered name of the company (if it differs from the legal name of the company).
 * @member {String} doingBusinessAs
 */
BusinessDetails.prototype['doingBusinessAs'] = undefined;

/**
 * The legal name of the company.
 * @member {String} legalBusinessName
 */
BusinessDetails.prototype['legalBusinessName'] = undefined;

/**
 * Information about the parent public company. Required if the account holder is 100% owned by a publicly listed company.
 * @member {Array.<module:model/UltimateParentCompany>} listedUltimateParentCompany
 */
BusinessDetails.prototype['listedUltimateParentCompany'] = undefined;

/**
 * The registration number of the company.
 * @member {String} registrationNumber
 */
BusinessDetails.prototype['registrationNumber'] = undefined;

/**
 * Array containing information about individuals associated with the account holder either through ownership or control. For details about how you can identify them, refer to [our verification guide](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-process#identify-ubos).
 * @member {Array.<module:model/ShareholderContact>} shareholders
 */
BusinessDetails.prototype['shareholders'] = undefined;

/**
 * Signatories associated with the company. Each array entry should represent one signatory.
 * @member {Array.<module:model/SignatoryContact>} signatories
 */
BusinessDetails.prototype['signatories'] = undefined;

/**
 * Market Identifier Code (MIC).
 * @member {String} stockExchange
 */
BusinessDetails.prototype['stockExchange'] = undefined;

/**
 * International Securities Identification Number (ISIN).
 * @member {String} stockNumber
 */
BusinessDetails.prototype['stockNumber'] = undefined;

/**
 * Stock Ticker symbol.
 * @member {String} stockTicker
 */
BusinessDetails.prototype['stockTicker'] = undefined;

/**
 * The tax ID of the company.
 * @member {String} taxId
 */
BusinessDetails.prototype['taxId'] = undefined;






export default BusinessDetails;

