/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v6/createAccountHolder ```
 *
 * The version of the OpenAPI document: 6
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AccountApi);
  }
}(this, function(expect, AccountApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AccountApi.GetAccountHolderResponse();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('GetAccountHolderResponse', function() {
    it('should create an instance of GetAccountHolderResponse', function() {
      // uncomment below and update the code to test GetAccountHolderResponse
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be.a(AccountApi.GetAccountHolderResponse);
    });

    it('should have the property accountHolderCode (base name: "accountHolderCode")', function() {
      // uncomment below and update the code to test the property accountHolderCode
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property accountHolderDetails (base name: "accountHolderDetails")', function() {
      // uncomment below and update the code to test the property accountHolderDetails
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property accountHolderStatus (base name: "accountHolderStatus")', function() {
      // uncomment below and update the code to test the property accountHolderStatus
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property accounts (base name: "accounts")', function() {
      // uncomment below and update the code to test the property accounts
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property invalidFields (base name: "invalidFields")', function() {
      // uncomment below and update the code to test the property invalidFields
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property legalEntity (base name: "legalEntity")', function() {
      // uncomment below and update the code to test the property legalEntity
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property migrationData (base name: "migrationData")', function() {
      // uncomment below and update the code to test the property migrationData
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property primaryCurrency (base name: "primaryCurrency")', function() {
      // uncomment below and update the code to test the property primaryCurrency
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property pspReference (base name: "pspReference")', function() {
      // uncomment below and update the code to test the property pspReference
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property resultCode (base name: "resultCode")', function() {
      // uncomment below and update the code to test the property resultCode
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property systemUpToDateTime (base name: "systemUpToDateTime")', function() {
      // uncomment below and update the code to test the property systemUpToDateTime
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property verification (base name: "verification")', function() {
      // uncomment below and update the code to test the property verification
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

    it('should have the property verificationProfile (base name: "verificationProfile")', function() {
      // uncomment below and update the code to test the property verificationProfile
      //var instance = new AccountApi.GetAccountHolderResponse();
      //expect(instance).to.be();
    });

  });

}));
