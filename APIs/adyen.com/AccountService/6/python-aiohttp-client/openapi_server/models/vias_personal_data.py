# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.personal_document_data import PersonalDocumentData
from openapi_server import util


class ViasPersonalData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_of_birth: str=None, document_data: List[PersonalDocumentData]=None, nationality: str=None):
        """ViasPersonalData - a model defined in OpenAPI

        :param date_of_birth: The date_of_birth of this ViasPersonalData.
        :param document_data: The document_data of this ViasPersonalData.
        :param nationality: The nationality of this ViasPersonalData.
        """
        self.openapi_types = {
            'date_of_birth': str,
            'document_data': List[PersonalDocumentData],
            'nationality': str
        }

        self.attribute_map = {
            'date_of_birth': 'dateOfBirth',
            'document_data': 'documentData',
            'nationality': 'nationality'
        }

        self._date_of_birth = date_of_birth
        self._document_data = document_data
        self._nationality = nationality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViasPersonalData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViasPersonalData of this ViasPersonalData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this ViasPersonalData.

        The person's date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.

        :return: The date_of_birth of this ViasPersonalData.
        :rtype: str
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this ViasPersonalData.

        The person's date of birth, in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.

        :param date_of_birth: The date_of_birth of this ViasPersonalData.
        :type date_of_birth: str
        """

        self._date_of_birth = date_of_birth

    @property
    def document_data(self):
        """Gets the document_data of this ViasPersonalData.

        Array that contains information about the person's identification document. You can submit only one entry per document type.

        :return: The document_data of this ViasPersonalData.
        :rtype: List[PersonalDocumentData]
        """
        return self._document_data

    @document_data.setter
    def document_data(self, document_data):
        """Sets the document_data of this ViasPersonalData.

        Array that contains information about the person's identification document. You can submit only one entry per document type.

        :param document_data: The document_data of this ViasPersonalData.
        :type document_data: List[PersonalDocumentData]
        """

        self._document_data = document_data

    @property
    def nationality(self):
        """Gets the nationality of this ViasPersonalData.

        The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. 

        :return: The nationality of this ViasPersonalData.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this ViasPersonalData.

        The nationality of the person represented by a two-character country code,  in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**. 

        :param nationality: The nationality of this ViasPersonalData.
        :type nationality: str
        """
        if nationality is not None and len(nationality) > 2:
            raise ValueError("Invalid value for `nationality`, length must be less than or equal to `2`")
        if nationality is not None and len(nationality) < 2:
            raise ValueError("Invalid value for `nationality`, length must be greater than or equal to `2`")

        self._nationality = nationality
