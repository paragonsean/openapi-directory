# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PerformVerificationRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, account_state_type: str=None, tier: int=None):
        """PerformVerificationRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this PerformVerificationRequest.
        :param account_state_type: The account_state_type of this PerformVerificationRequest.
        :param tier: The tier of this PerformVerificationRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'account_state_type': str,
            'tier': int
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'account_state_type': 'accountStateType',
            'tier': 'tier'
        }

        self._account_holder_code = account_holder_code
        self._account_state_type = account_state_type
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PerformVerificationRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PerformVerificationRequest of this PerformVerificationRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this PerformVerificationRequest.

        The code of the account holder to verify.

        :return: The account_holder_code of this PerformVerificationRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this PerformVerificationRequest.

        The code of the account holder to verify.

        :param account_holder_code: The account_holder_code of this PerformVerificationRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def account_state_type(self):
        """Gets the account_state_type of this PerformVerificationRequest.

        The state required for the account holder. > Permitted values: `Processing`, `Payout`.

        :return: The account_state_type of this PerformVerificationRequest.
        :rtype: str
        """
        return self._account_state_type

    @account_state_type.setter
    def account_state_type(self, account_state_type):
        """Sets the account_state_type of this PerformVerificationRequest.

        The state required for the account holder. > Permitted values: `Processing`, `Payout`.

        :param account_state_type: The account_state_type of this PerformVerificationRequest.
        :type account_state_type: str
        """
        allowed_values = ["LimitedPayout", "LimitedProcessing", "LimitlessPayout", "LimitlessProcessing", "Payout", "Processing"]  # noqa: E501
        if account_state_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_state_type` ({0}), must be one of {1}"
                .format(account_state_type, allowed_values)
            )

        self._account_state_type = account_state_type

    @property
    def tier(self):
        """Gets the tier of this PerformVerificationRequest.

        The tier required for the account holder.

        :return: The tier of this PerformVerificationRequest.
        :rtype: int
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this PerformVerificationRequest.

        The tier required for the account holder.

        :param tier: The tier of this PerformVerificationRequest.
        :type tier: int
        """
        if tier is None:
            raise ValueError("Invalid value for `tier`, must not be `None`")

        self._tier = tier
