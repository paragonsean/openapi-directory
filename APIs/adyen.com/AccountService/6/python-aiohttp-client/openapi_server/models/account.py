# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payout_schedule_response import PayoutScheduleResponse
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, bank_account_uuid: str=None, beneficiary_account: str=None, beneficiary_merchant_reference: str=None, description: str=None, metadata: Dict[str, str]=None, payout_method_code: str=None, payout_schedule: PayoutScheduleResponse=None, payout_speed: str=None, status: str=None):
        """Account - a model defined in OpenAPI

        :param account_code: The account_code of this Account.
        :param bank_account_uuid: The bank_account_uuid of this Account.
        :param beneficiary_account: The beneficiary_account of this Account.
        :param beneficiary_merchant_reference: The beneficiary_merchant_reference of this Account.
        :param description: The description of this Account.
        :param metadata: The metadata of this Account.
        :param payout_method_code: The payout_method_code of this Account.
        :param payout_schedule: The payout_schedule of this Account.
        :param payout_speed: The payout_speed of this Account.
        :param status: The status of this Account.
        """
        self.openapi_types = {
            'account_code': str,
            'bank_account_uuid': str,
            'beneficiary_account': str,
            'beneficiary_merchant_reference': str,
            'description': str,
            'metadata': Dict[str, str],
            'payout_method_code': str,
            'payout_schedule': PayoutScheduleResponse,
            'payout_speed': str,
            'status': str
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'bank_account_uuid': 'bankAccountUUID',
            'beneficiary_account': 'beneficiaryAccount',
            'beneficiary_merchant_reference': 'beneficiaryMerchantReference',
            'description': 'description',
            'metadata': 'metadata',
            'payout_method_code': 'payoutMethodCode',
            'payout_schedule': 'payoutSchedule',
            'payout_speed': 'payoutSpeed',
            'status': 'status'
        }

        self._account_code = account_code
        self._bank_account_uuid = bank_account_uuid
        self._beneficiary_account = beneficiary_account
        self._beneficiary_merchant_reference = beneficiary_merchant_reference
        self._description = description
        self._metadata = metadata
        self._payout_method_code = payout_method_code
        self._payout_schedule = payout_schedule
        self._payout_speed = payout_speed
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this Account.

        The code of the account.

        :return: The account_code of this Account.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this Account.

        The code of the account.

        :param account_code: The account_code of this Account.
        :type account_code: str
        """

        self._account_code = account_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this Account.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :return: The bank_account_uuid of this Account.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this Account.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :param bank_account_uuid: The bank_account_uuid of this Account.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def beneficiary_account(self):
        """Gets the beneficiary_account of this Account.

        The beneficiary of the account.

        :return: The beneficiary_account of this Account.
        :rtype: str
        """
        return self._beneficiary_account

    @beneficiary_account.setter
    def beneficiary_account(self, beneficiary_account):
        """Sets the beneficiary_account of this Account.

        The beneficiary of the account.

        :param beneficiary_account: The beneficiary_account of this Account.
        :type beneficiary_account: str
        """

        self._beneficiary_account = beneficiary_account

    @property
    def beneficiary_merchant_reference(self):
        """Gets the beneficiary_merchant_reference of this Account.

        The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.

        :return: The beneficiary_merchant_reference of this Account.
        :rtype: str
        """
        return self._beneficiary_merchant_reference

    @beneficiary_merchant_reference.setter
    def beneficiary_merchant_reference(self, beneficiary_merchant_reference):
        """Sets the beneficiary_merchant_reference of this Account.

        The reason that a beneficiary has been set up for this account. This may have been supplied during the setup of a beneficiary at the discretion of the executing user.

        :param beneficiary_merchant_reference: The beneficiary_merchant_reference of this Account.
        :type beneficiary_merchant_reference: str
        """

        self._beneficiary_merchant_reference = beneficiary_merchant_reference

    @property
    def description(self):
        """Gets the description of this Account.

        A description of the account.

        :return: The description of this Account.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.

        A description of the account.

        :param description: The description of this Account.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this Account.

        A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :return: The metadata of this Account.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Account.

        A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :param metadata: The metadata of this Account.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this Account.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :return: The payout_method_code of this Account.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this Account.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :param payout_method_code: The payout_method_code of this Account.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this Account.

        The account's payout schedule.

        :return: The payout_schedule of this Account.
        :rtype: PayoutScheduleResponse
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this Account.

        The account's payout schedule.

        :param payout_schedule: The payout_schedule of this Account.
        :type payout_schedule: PayoutScheduleResponse
        """

        self._payout_schedule = payout_schedule

    @property
    def payout_speed(self):
        """Gets the payout_speed of this Account.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :return: The payout_speed of this Account.
        :rtype: str
        """
        return self._payout_speed

    @payout_speed.setter
    def payout_speed(self, payout_speed):
        """Sets the payout_speed of this Account.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :param payout_speed: The payout_speed of this Account.
        :type payout_speed: str
        """
        allowed_values = ["INSTANT", "SAME_DAY", "STANDARD"]  # noqa: E501
        if payout_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_speed` ({0}), must be one of {1}"
                .format(payout_speed, allowed_values)
            )

        self._payout_speed = payout_speed

    @property
    def status(self):
        """Gets the status of this Account.

        The status of the account. Possible values: `Active`, `Inactive`, `Suspended`, `Closed`.

        :return: The status of this Account.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Account.

        The status of the account. Possible values: `Active`, `Inactive`, `Suspended`, `Closed`.

        :param status: The status of this Account.
        :type status: str
        """

        self._status = status
