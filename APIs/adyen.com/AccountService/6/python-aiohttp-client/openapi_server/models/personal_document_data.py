# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PersonalDocumentData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_date: str=None, issuer_country: str=None, issuer_state: str=None, number: str=None, type: str=None):
        """PersonalDocumentData - a model defined in OpenAPI

        :param expiration_date: The expiration_date of this PersonalDocumentData.
        :param issuer_country: The issuer_country of this PersonalDocumentData.
        :param issuer_state: The issuer_state of this PersonalDocumentData.
        :param number: The number of this PersonalDocumentData.
        :param type: The type of this PersonalDocumentData.
        """
        self.openapi_types = {
            'expiration_date': str,
            'issuer_country': str,
            'issuer_state': str,
            'number': str,
            'type': str
        }

        self.attribute_map = {
            'expiration_date': 'expirationDate',
            'issuer_country': 'issuerCountry',
            'issuer_state': 'issuerState',
            'number': 'number',
            'type': 'type'
        }

        self._expiration_date = expiration_date
        self._issuer_country = issuer_country
        self._issuer_state = issuer_state
        self._number = number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PersonalDocumentData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PersonalDocumentData of this PersonalDocumentData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_date(self):
        """Gets the expiration_date of this PersonalDocumentData.

        The expiry date of the document,   in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.

        :return: The expiration_date of this PersonalDocumentData.
        :rtype: str
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this PersonalDocumentData.

        The expiry date of the document,   in ISO-8601 YYYY-MM-DD format. For example, **2000-01-31**.

        :param expiration_date: The expiration_date of this PersonalDocumentData.
        :type expiration_date: str
        """

        self._expiration_date = expiration_date

    @property
    def issuer_country(self):
        """Gets the issuer_country of this PersonalDocumentData.

        The country where the document was issued, in the two-character  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**.

        :return: The issuer_country of this PersonalDocumentData.
        :rtype: str
        """
        return self._issuer_country

    @issuer_country.setter
    def issuer_country(self, issuer_country):
        """Sets the issuer_country of this PersonalDocumentData.

        The country where the document was issued, in the two-character  [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **NL**.

        :param issuer_country: The issuer_country of this PersonalDocumentData.
        :type issuer_country: str
        """
        if issuer_country is not None and len(issuer_country) > 2:
            raise ValueError("Invalid value for `issuer_country`, length must be less than or equal to `2`")
        if issuer_country is not None and len(issuer_country) < 2:
            raise ValueError("Invalid value for `issuer_country`, length must be greater than or equal to `2`")

        self._issuer_country = issuer_country

    @property
    def issuer_state(self):
        """Gets the issuer_state of this PersonalDocumentData.

        The state where the document was issued (if applicable).

        :return: The issuer_state of this PersonalDocumentData.
        :rtype: str
        """
        return self._issuer_state

    @issuer_state.setter
    def issuer_state(self, issuer_state):
        """Sets the issuer_state of this PersonalDocumentData.

        The state where the document was issued (if applicable).

        :param issuer_state: The issuer_state of this PersonalDocumentData.
        :type issuer_state: str
        """

        self._issuer_state = issuer_state

    @property
    def number(self):
        """Gets the number of this PersonalDocumentData.

        The number in the document.

        :return: The number of this PersonalDocumentData.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PersonalDocumentData.

        The number in the document.

        :param number: The number of this PersonalDocumentData.
        :type number: str
        """

        self._number = number

    @property
    def type(self):
        """Gets the type of this PersonalDocumentData.

        The type of the document. Possible values: **ID**, **DRIVINGLICENSE**, **PASSPORT**, **SOCIALSECURITY**, **VISA**.  To delete an existing entry for a document `type`, send only the `type` field in your request. 

        :return: The type of this PersonalDocumentData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PersonalDocumentData.

        The type of the document. Possible values: **ID**, **DRIVINGLICENSE**, **PASSPORT**, **SOCIALSECURITY**, **VISA**.  To delete an existing entry for a document `type`, send only the `type` field in your request. 

        :param type: The type of this PersonalDocumentData.
        :type type: str
        """
        allowed_values = ["DRIVINGLICENSE", "ID", "PASSPORT", "SOCIALSECURITY", "VISA"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
