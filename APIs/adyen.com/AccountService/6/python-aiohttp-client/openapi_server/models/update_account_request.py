# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_payout_schedule_request import UpdatePayoutScheduleRequest
from openapi_server import util


class UpdateAccountRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_code: str=None, bank_account_uuid: str=None, description: str=None, metadata: Dict[str, str]=None, payout_method_code: str=None, payout_schedule: UpdatePayoutScheduleRequest=None, payout_speed: str=None):
        """UpdateAccountRequest - a model defined in OpenAPI

        :param account_code: The account_code of this UpdateAccountRequest.
        :param bank_account_uuid: The bank_account_uuid of this UpdateAccountRequest.
        :param description: The description of this UpdateAccountRequest.
        :param metadata: The metadata of this UpdateAccountRequest.
        :param payout_method_code: The payout_method_code of this UpdateAccountRequest.
        :param payout_schedule: The payout_schedule of this UpdateAccountRequest.
        :param payout_speed: The payout_speed of this UpdateAccountRequest.
        """
        self.openapi_types = {
            'account_code': str,
            'bank_account_uuid': str,
            'description': str,
            'metadata': Dict[str, str],
            'payout_method_code': str,
            'payout_schedule': UpdatePayoutScheduleRequest,
            'payout_speed': str
        }

        self.attribute_map = {
            'account_code': 'accountCode',
            'bank_account_uuid': 'bankAccountUUID',
            'description': 'description',
            'metadata': 'metadata',
            'payout_method_code': 'payoutMethodCode',
            'payout_schedule': 'payoutSchedule',
            'payout_speed': 'payoutSpeed'
        }

        self._account_code = account_code
        self._bank_account_uuid = bank_account_uuid
        self._description = description
        self._metadata = metadata
        self._payout_method_code = payout_method_code
        self._payout_schedule = payout_schedule
        self._payout_speed = payout_speed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountRequest of this UpdateAccountRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_code(self):
        """Gets the account_code of this UpdateAccountRequest.

        The code of the account to update.

        :return: The account_code of this UpdateAccountRequest.
        :rtype: str
        """
        return self._account_code

    @account_code.setter
    def account_code(self, account_code):
        """Sets the account_code of this UpdateAccountRequest.

        The code of the account to update.

        :param account_code: The account_code of this UpdateAccountRequest.
        :type account_code: str
        """
        if account_code is None:
            raise ValueError("Invalid value for `account_code`, must not be `None`")

        self._account_code = account_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this UpdateAccountRequest.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :return: The bank_account_uuid of this UpdateAccountRequest.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this UpdateAccountRequest.

        The bankAccountUUID of the bank account held by the account holder to couple the account with. Scheduled payouts in currencies matching the currency of this bank account will be sent to this bank account. Payouts in different currencies will be sent to a matching bank account of the account holder.

        :param bank_account_uuid: The bank_account_uuid of this UpdateAccountRequest.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def description(self):
        """Gets the description of this UpdateAccountRequest.

        A description of the account, maximum 256 characters.You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores `_`.

        :return: The description of this UpdateAccountRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAccountRequest.

        A description of the account, maximum 256 characters.You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores `_`.

        :param description: The description of this UpdateAccountRequest.
        :type description: str
        """

        self._description = description

    @property
    def metadata(self):
        """Gets the metadata of this UpdateAccountRequest.

        A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :return: The metadata of this UpdateAccountRequest.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this UpdateAccountRequest.

        A set of key and value pairs for general use by the merchant. The keys do not have specific names and may be used for storing miscellaneous data as desired. > Note that during an update of metadata, the omission of existing key-value pairs will result in the deletion of those key-value pairs.

        :param metadata: The metadata of this UpdateAccountRequest.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def payout_method_code(self):
        """Gets the payout_method_code of this UpdateAccountRequest.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :return: The payout_method_code of this UpdateAccountRequest.
        :rtype: str
        """
        return self._payout_method_code

    @payout_method_code.setter
    def payout_method_code(self, payout_method_code):
        """Sets the payout_method_code of this UpdateAccountRequest.

        The payout method code held by the account holder to couple the account with. Scheduled card payouts will be sent using this payout method code.

        :param payout_method_code: The payout_method_code of this UpdateAccountRequest.
        :type payout_method_code: str
        """

        self._payout_method_code = payout_method_code

    @property
    def payout_schedule(self):
        """Gets the payout_schedule of this UpdateAccountRequest.

        The details of the payout schedule, to which the account should be updated.

        :return: The payout_schedule of this UpdateAccountRequest.
        :rtype: UpdatePayoutScheduleRequest
        """
        return self._payout_schedule

    @payout_schedule.setter
    def payout_schedule(self, payout_schedule):
        """Sets the payout_schedule of this UpdateAccountRequest.

        The details of the payout schedule, to which the account should be updated.

        :param payout_schedule: The payout_schedule of this UpdateAccountRequest.
        :type payout_schedule: UpdatePayoutScheduleRequest
        """

        self._payout_schedule = payout_schedule

    @property
    def payout_speed(self):
        """Gets the payout_speed of this UpdateAccountRequest.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :return: The payout_speed of this UpdateAccountRequest.
        :rtype: str
        """
        return self._payout_speed

    @payout_speed.setter
    def payout_speed(self, payout_speed):
        """Sets the payout_speed of this UpdateAccountRequest.

        Speed with which payouts for this account are processed. Permitted values: `STANDARD`, `SAME_DAY`.

        :param payout_speed: The payout_speed of this UpdateAccountRequest.
        :type payout_speed: str
        """
        allowed_values = ["INSTANT", "SAME_DAY", "STANDARD"]  # noqa: E501
        if payout_speed not in allowed_values:
            raise ValueError(
                "Invalid value for `payout_speed` ({0}), must be one of {1}"
                .format(payout_speed, allowed_values)
            )

        self._payout_speed = payout_speed
