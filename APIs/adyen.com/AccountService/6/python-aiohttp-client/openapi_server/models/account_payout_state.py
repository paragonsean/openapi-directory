# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class AccountPayoutState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_payout: bool=None, disable_reason: str=None, disabled: bool=None, not_allowed_reason: str=None, payout_limit: Amount=None, tier_number: int=None):
        """AccountPayoutState - a model defined in OpenAPI

        :param allow_payout: The allow_payout of this AccountPayoutState.
        :param disable_reason: The disable_reason of this AccountPayoutState.
        :param disabled: The disabled of this AccountPayoutState.
        :param not_allowed_reason: The not_allowed_reason of this AccountPayoutState.
        :param payout_limit: The payout_limit of this AccountPayoutState.
        :param tier_number: The tier_number of this AccountPayoutState.
        """
        self.openapi_types = {
            'allow_payout': bool,
            'disable_reason': str,
            'disabled': bool,
            'not_allowed_reason': str,
            'payout_limit': Amount,
            'tier_number': int
        }

        self.attribute_map = {
            'allow_payout': 'allowPayout',
            'disable_reason': 'disableReason',
            'disabled': 'disabled',
            'not_allowed_reason': 'notAllowedReason',
            'payout_limit': 'payoutLimit',
            'tier_number': 'tierNumber'
        }

        self._allow_payout = allow_payout
        self._disable_reason = disable_reason
        self._disabled = disabled
        self._not_allowed_reason = not_allowed_reason
        self._payout_limit = payout_limit
        self._tier_number = tier_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccountPayoutState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccountPayoutState of this AccountPayoutState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_payout(self):
        """Gets the allow_payout of this AccountPayoutState.

        Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.

        :return: The allow_payout of this AccountPayoutState.
        :rtype: bool
        """
        return self._allow_payout

    @allow_payout.setter
    def allow_payout(self, allow_payout):
        """Sets the allow_payout of this AccountPayoutState.

        Indicates whether payouts are allowed. This field is the overarching payout status, and is the aggregate of multiple conditions (e.g., KYC status, disabled flag, etc). If this field is false, no payouts will be permitted for any of the account holder's accounts. If this field is true, payouts will be permitted for any of the account holder's accounts.

        :param allow_payout: The allow_payout of this AccountPayoutState.
        :type allow_payout: bool
        """

        self._allow_payout = allow_payout

    @property
    def disable_reason(self):
        """Gets the disable_reason of this AccountPayoutState.

        The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.

        :return: The disable_reason of this AccountPayoutState.
        :rtype: str
        """
        return self._disable_reason

    @disable_reason.setter
    def disable_reason(self, disable_reason):
        """Sets the disable_reason of this AccountPayoutState.

        The reason why payouts (to all of the account holder's accounts) have been disabled (by the platform). If the `disabled` field is true, this field can be used to explain why.

        :param disable_reason: The disable_reason of this AccountPayoutState.
        :type disable_reason: str
        """

        self._disable_reason = disable_reason

    @property
    def disabled(self):
        """Gets the disabled of this AccountPayoutState.

        Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.

        :return: The disabled of this AccountPayoutState.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this AccountPayoutState.

        Indicates whether payouts have been disabled (by the platform) for all of the account holder's accounts. A platform may enable and disable this field at their discretion. If this field is true, `allowPayout` will be false and no payouts will be permitted for any of the account holder's accounts. If this field is false, `allowPayout` may or may not be enabled, depending on other factors.

        :param disabled: The disabled of this AccountPayoutState.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def not_allowed_reason(self):
        """Gets the not_allowed_reason of this AccountPayoutState.

        The reason why payouts (to all of the account holder's accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.

        :return: The not_allowed_reason of this AccountPayoutState.
        :rtype: str
        """
        return self._not_allowed_reason

    @not_allowed_reason.setter
    def not_allowed_reason(self, not_allowed_reason):
        """Sets the not_allowed_reason of this AccountPayoutState.

        The reason why payouts (to all of the account holder's accounts) have been disabled (by Adyen). If payouts have been disabled by Adyen, this field will explain why. If this field is blank, payouts have not been disabled by Adyen.

        :param not_allowed_reason: The not_allowed_reason of this AccountPayoutState.
        :type not_allowed_reason: str
        """

        self._not_allowed_reason = not_allowed_reason

    @property
    def payout_limit(self):
        """Gets the payout_limit of this AccountPayoutState.

        The maximum amount that payouts are limited to. Only applies if payouts are allowed but limited.

        :return: The payout_limit of this AccountPayoutState.
        :rtype: Amount
        """
        return self._payout_limit

    @payout_limit.setter
    def payout_limit(self, payout_limit):
        """Sets the payout_limit of this AccountPayoutState.

        The maximum amount that payouts are limited to. Only applies if payouts are allowed but limited.

        :param payout_limit: The payout_limit of this AccountPayoutState.
        :type payout_limit: Amount
        """

        self._payout_limit = payout_limit

    @property
    def tier_number(self):
        """Gets the tier_number of this AccountPayoutState.

        The payout tier that the account holder occupies.

        :return: The tier_number of this AccountPayoutState.
        :rtype: int
        """
        return self._tier_number

    @tier_number.setter
    def tier_number(self, tier_number):
        """Sets the tier_number of this AccountPayoutState.

        The payout tier that the account holder occupies.

        :param tier_number: The tier_number of this AccountPayoutState.
        :type tier_number: int
        """

        self._tier_number = tier_number
