/*
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountHolderDetails;
import org.openapitools.client.model.AccountHolderStatus;
import org.openapitools.client.model.AccountWrapper;
import org.openapitools.client.model.KYCVerificationResult;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetAccountHolderResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:17:31.915566-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetAccountHolderResponse {
  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_CODE = "accountHolderCode";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_CODE)
  private String accountHolderCode;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS = "accountHolderDetails";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_DETAILS)
  private AccountHolderDetails accountHolderDetails;

  public static final String SERIALIZED_NAME_ACCOUNT_HOLDER_STATUS = "accountHolderStatus";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_HOLDER_STATUS)
  private AccountHolderStatus accountHolderStatus;

  public static final String SERIALIZED_NAME_ACCOUNTS = "accounts";
  @SerializedName(SERIALIZED_NAME_ACCOUNTS)
  private List<AccountWrapper> accounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * The legal entity of the account holder.
   */
  @JsonAdapter(LegalEntityEnum.Adapter.class)
  public enum LegalEntityEnum {
    BUSINESS("Business"),
    
    INDIVIDUAL("Individual"),
    
    NON_PROFIT("NonProfit");

    private String value;

    LegalEntityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static LegalEntityEnum fromValue(String value) {
      for (LegalEntityEnum b : LegalEntityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<LegalEntityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final LegalEntityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public LegalEntityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return LegalEntityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      LegalEntityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_LEGAL_ENTITY = "legalEntity";
  @SerializedName(SERIALIZED_NAME_LEGAL_ENTITY)
  private LegalEntityEnum legalEntity;

  public static final String SERIALIZED_NAME_PRIMARY_CURRENCY = "primaryCurrency";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CURRENCY)
  private String primaryCurrency;

  public static final String SERIALIZED_NAME_PSP_REFERENCE = "pspReference";
  @SerializedName(SERIALIZED_NAME_PSP_REFERENCE)
  private String pspReference;

  public static final String SERIALIZED_NAME_RESULT_CODE = "resultCode";
  @SerializedName(SERIALIZED_NAME_RESULT_CODE)
  private String resultCode;

  public static final String SERIALIZED_NAME_SUBMITTED_ASYNC = "submittedAsync";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_ASYNC)
  private Boolean submittedAsync;

  public static final String SERIALIZED_NAME_VERIFICATION = "verification";
  @SerializedName(SERIALIZED_NAME_VERIFICATION)
  private KYCVerificationResult verification;

  public GetAccountHolderResponse() {
  }

  public GetAccountHolderResponse accountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
    return this;
  }

  /**
   * The code of the account holder.
   * @return accountHolderCode
   */
  @javax.annotation.Nullable
  public String getAccountHolderCode() {
    return accountHolderCode;
  }

  public void setAccountHolderCode(String accountHolderCode) {
    this.accountHolderCode = accountHolderCode;
  }


  public GetAccountHolderResponse accountHolderDetails(AccountHolderDetails accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
    return this;
  }

  /**
   * Details of the account holder.
   * @return accountHolderDetails
   */
  @javax.annotation.Nullable
  public AccountHolderDetails getAccountHolderDetails() {
    return accountHolderDetails;
  }

  public void setAccountHolderDetails(AccountHolderDetails accountHolderDetails) {
    this.accountHolderDetails = accountHolderDetails;
  }


  public GetAccountHolderResponse accountHolderStatus(AccountHolderStatus accountHolderStatus) {
    this.accountHolderStatus = accountHolderStatus;
    return this;
  }

  /**
   * The status of the account holder.
   * @return accountHolderStatus
   */
  @javax.annotation.Nullable
  public AccountHolderStatus getAccountHolderStatus() {
    return accountHolderStatus;
  }

  public void setAccountHolderStatus(AccountHolderStatus accountHolderStatus) {
    this.accountHolderStatus = accountHolderStatus;
  }


  public GetAccountHolderResponse accounts(List<AccountWrapper> accounts) {
    this.accounts = accounts;
    return this;
  }

  public GetAccountHolderResponse addAccountsItem(AccountWrapper accountsItem) {
    if (this.accounts == null) {
      this.accounts = new ArrayList<>();
    }
    this.accounts.add(accountsItem);
    return this;
  }

  /**
   * A list of the accounts under the account holder.
   * @return accounts
   */
  @javax.annotation.Nullable
  public List<AccountWrapper> getAccounts() {
    return accounts;
  }

  public void setAccounts(List<AccountWrapper> accounts) {
    this.accounts = accounts;
  }


  public GetAccountHolderResponse description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the account holder.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GetAccountHolderResponse legalEntity(LegalEntityEnum legalEntity) {
    this.legalEntity = legalEntity;
    return this;
  }

  /**
   * The legal entity of the account holder.
   * @return legalEntity
   */
  @javax.annotation.Nullable
  public LegalEntityEnum getLegalEntity() {
    return legalEntity;
  }

  public void setLegalEntity(LegalEntityEnum legalEntity) {
    this.legalEntity = legalEntity;
  }


  public GetAccountHolderResponse primaryCurrency(String primaryCurrency) {
    this.primaryCurrency = primaryCurrency;
    return this;
  }

  /**
   * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.
   * @return primaryCurrency
   */
  @javax.annotation.Nullable
  public String getPrimaryCurrency() {
    return primaryCurrency;
  }

  public void setPrimaryCurrency(String primaryCurrency) {
    this.primaryCurrency = primaryCurrency;
  }


  public GetAccountHolderResponse pspReference(String pspReference) {
    this.pspReference = pspReference;
    return this;
  }

  /**
   * The reference of a request. Can be used to uniquely identify the request.
   * @return pspReference
   */
  @javax.annotation.Nullable
  public String getPspReference() {
    return pspReference;
  }

  public void setPspReference(String pspReference) {
    this.pspReference = pspReference;
  }


  public GetAccountHolderResponse resultCode(String resultCode) {
    this.resultCode = resultCode;
    return this;
  }

  /**
   * The result code.
   * @return resultCode
   */
  @javax.annotation.Nullable
  public String getResultCode() {
    return resultCode;
  }

  public void setResultCode(String resultCode) {
    this.resultCode = resultCode;
  }


  public GetAccountHolderResponse submittedAsync(Boolean submittedAsync) {
    this.submittedAsync = submittedAsync;
    return this;
  }

  /**
   * Indicates whether the request is processed asynchronously. Depending on the request&#39;s platform settings, the following scenarios may be applied: * **true**: The request is queued and will be executed when the providing service is available in the order in which the requests are received. * **false**: The processing of the request is immediately attempted; it may result in an error if the providing service is unavailable.
   * @return submittedAsync
   */
  @javax.annotation.Nullable
  public Boolean getSubmittedAsync() {
    return submittedAsync;
  }

  public void setSubmittedAsync(Boolean submittedAsync) {
    this.submittedAsync = submittedAsync;
  }


  public GetAccountHolderResponse verification(KYCVerificationResult verification) {
    this.verification = verification;
    return this;
  }

  /**
   * The details of KYC Verification of the account holder.
   * @return verification
   */
  @javax.annotation.Nullable
  public KYCVerificationResult getVerification() {
    return verification;
  }

  public void setVerification(KYCVerificationResult verification) {
    this.verification = verification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetAccountHolderResponse getAccountHolderResponse = (GetAccountHolderResponse) o;
    return Objects.equals(this.accountHolderCode, getAccountHolderResponse.accountHolderCode) &&
        Objects.equals(this.accountHolderDetails, getAccountHolderResponse.accountHolderDetails) &&
        Objects.equals(this.accountHolderStatus, getAccountHolderResponse.accountHolderStatus) &&
        Objects.equals(this.accounts, getAccountHolderResponse.accounts) &&
        Objects.equals(this.description, getAccountHolderResponse.description) &&
        Objects.equals(this.legalEntity, getAccountHolderResponse.legalEntity) &&
        Objects.equals(this.primaryCurrency, getAccountHolderResponse.primaryCurrency) &&
        Objects.equals(this.pspReference, getAccountHolderResponse.pspReference) &&
        Objects.equals(this.resultCode, getAccountHolderResponse.resultCode) &&
        Objects.equals(this.submittedAsync, getAccountHolderResponse.submittedAsync) &&
        Objects.equals(this.verification, getAccountHolderResponse.verification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountHolderCode, accountHolderDetails, accountHolderStatus, accounts, description, legalEntity, primaryCurrency, pspReference, resultCode, submittedAsync, verification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetAccountHolderResponse {\n");
    sb.append("    accountHolderCode: ").append(toIndentedString(accountHolderCode)).append("\n");
    sb.append("    accountHolderDetails: ").append(toIndentedString(accountHolderDetails)).append("\n");
    sb.append("    accountHolderStatus: ").append(toIndentedString(accountHolderStatus)).append("\n");
    sb.append("    accounts: ").append(toIndentedString(accounts)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    legalEntity: ").append(toIndentedString(legalEntity)).append("\n");
    sb.append("    primaryCurrency: ").append(toIndentedString(primaryCurrency)).append("\n");
    sb.append("    pspReference: ").append(toIndentedString(pspReference)).append("\n");
    sb.append("    resultCode: ").append(toIndentedString(resultCode)).append("\n");
    sb.append("    submittedAsync: ").append(toIndentedString(submittedAsync)).append("\n");
    sb.append("    verification: ").append(toIndentedString(verification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountHolderCode");
    openapiFields.add("accountHolderDetails");
    openapiFields.add("accountHolderStatus");
    openapiFields.add("accounts");
    openapiFields.add("description");
    openapiFields.add("legalEntity");
    openapiFields.add("primaryCurrency");
    openapiFields.add("pspReference");
    openapiFields.add("resultCode");
    openapiFields.add("submittedAsync");
    openapiFields.add("verification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetAccountHolderResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetAccountHolderResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetAccountHolderResponse is not found in the empty JSON string", GetAccountHolderResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetAccountHolderResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetAccountHolderResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountHolderCode") != null && !jsonObj.get("accountHolderCode").isJsonNull()) && !jsonObj.get("accountHolderCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountHolderCode").toString()));
      }
      // validate the optional field `accountHolderDetails`
      if (jsonObj.get("accountHolderDetails") != null && !jsonObj.get("accountHolderDetails").isJsonNull()) {
        AccountHolderDetails.validateJsonElement(jsonObj.get("accountHolderDetails"));
      }
      // validate the optional field `accountHolderStatus`
      if (jsonObj.get("accountHolderStatus") != null && !jsonObj.get("accountHolderStatus").isJsonNull()) {
        AccountHolderStatus.validateJsonElement(jsonObj.get("accountHolderStatus"));
      }
      if (jsonObj.get("accounts") != null && !jsonObj.get("accounts").isJsonNull()) {
        JsonArray jsonArrayaccounts = jsonObj.getAsJsonArray("accounts");
        if (jsonArrayaccounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accounts` to be an array in the JSON string but got `%s`", jsonObj.get("accounts").toString()));
          }

          // validate the optional field `accounts` (array)
          for (int i = 0; i < jsonArrayaccounts.size(); i++) {
            AccountWrapper.validateJsonElement(jsonArrayaccounts.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) && !jsonObj.get("legalEntity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legalEntity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legalEntity").toString()));
      }
      // validate the optional field `legalEntity`
      if (jsonObj.get("legalEntity") != null && !jsonObj.get("legalEntity").isJsonNull()) {
        LegalEntityEnum.validateJsonElement(jsonObj.get("legalEntity"));
      }
      if ((jsonObj.get("primaryCurrency") != null && !jsonObj.get("primaryCurrency").isJsonNull()) && !jsonObj.get("primaryCurrency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryCurrency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryCurrency").toString()));
      }
      if ((jsonObj.get("pspReference") != null && !jsonObj.get("pspReference").isJsonNull()) && !jsonObj.get("pspReference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pspReference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pspReference").toString()));
      }
      if ((jsonObj.get("resultCode") != null && !jsonObj.get("resultCode").isJsonNull()) && !jsonObj.get("resultCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultCode").toString()));
      }
      // validate the optional field `verification`
      if (jsonObj.get("verification") != null && !jsonObj.get("verification").isJsonNull()) {
        KYCVerificationResult.validateJsonElement(jsonObj.get("verification"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetAccountHolderResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetAccountHolderResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetAccountHolderResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetAccountHolderResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GetAccountHolderResponse>() {
           @Override
           public void write(JsonWriter out, GetAccountHolderResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetAccountHolderResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetAccountHolderResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetAccountHolderResponse
   * @throws IOException if the JSON string is invalid with respect to GetAccountHolderResponse
   */
  public static GetAccountHolderResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetAccountHolderResponse.class);
  }

  /**
   * Convert an instance of GetAccountHolderResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

