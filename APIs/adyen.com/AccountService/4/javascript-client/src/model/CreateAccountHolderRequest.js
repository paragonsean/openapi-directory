/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountHolderDetails from './AccountHolderDetails';

/**
 * The CreateAccountHolderRequest model module.
 * @module model/CreateAccountHolderRequest
 * @version 4
 */
class CreateAccountHolderRequest {
    /**
     * Constructs a new <code>CreateAccountHolderRequest</code>.
     * @alias module:model/CreateAccountHolderRequest
     * @param accountHolderCode {String} Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.
     * @param accountHolderDetails {module:model/AccountHolderDetails} The details of the prospective account holder.
     * @param legalEntity {module:model/CreateAccountHolderRequest.LegalEntityEnum} The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then `accountHolderDetails.businessDetails` must be provided, with at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.  * If set to **Individual**, then `accountHolderDetails.individualDetails` must be provided.
     */
    constructor(accountHolderCode, accountHolderDetails, legalEntity) { 
        
        CreateAccountHolderRequest.initialize(this, accountHolderCode, accountHolderDetails, legalEntity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accountHolderCode, accountHolderDetails, legalEntity) { 
        obj['accountHolderCode'] = accountHolderCode;
        obj['accountHolderDetails'] = accountHolderDetails;
        obj['legalEntity'] = legalEntity;
    }

    /**
     * Constructs a <code>CreateAccountHolderRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAccountHolderRequest} obj Optional instance to populate.
     * @return {module:model/CreateAccountHolderRequest} The populated <code>CreateAccountHolderRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAccountHolderRequest();

            if (data.hasOwnProperty('accountHolderCode')) {
                obj['accountHolderCode'] = ApiClient.convertToType(data['accountHolderCode'], 'String');
            }
            if (data.hasOwnProperty('accountHolderDetails')) {
                obj['accountHolderDetails'] = AccountHolderDetails.constructFromObject(data['accountHolderDetails']);
            }
            if (data.hasOwnProperty('createDefaultAccount')) {
                obj['createDefaultAccount'] = ApiClient.convertToType(data['createDefaultAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('legalEntity')) {
                obj['legalEntity'] = ApiClient.convertToType(data['legalEntity'], 'String');
            }
            if (data.hasOwnProperty('primaryCurrency')) {
                obj['primaryCurrency'] = ApiClient.convertToType(data['primaryCurrency'], 'String');
            }
            if (data.hasOwnProperty('processingTier')) {
                obj['processingTier'] = ApiClient.convertToType(data['processingTier'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAccountHolderRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAccountHolderRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAccountHolderRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['accountHolderCode'] && !(typeof data['accountHolderCode'] === 'string' || data['accountHolderCode'] instanceof String)) {
            throw new Error("Expected the field `accountHolderCode` to be a primitive type in the JSON string but got " + data['accountHolderCode']);
        }
        // validate the optional field `accountHolderDetails`
        if (data['accountHolderDetails']) { // data not null
          AccountHolderDetails.validateJSON(data['accountHolderDetails']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['legalEntity'] && !(typeof data['legalEntity'] === 'string' || data['legalEntity'] instanceof String)) {
            throw new Error("Expected the field `legalEntity` to be a primitive type in the JSON string but got " + data['legalEntity']);
        }
        // ensure the json data is a string
        if (data['primaryCurrency'] && !(typeof data['primaryCurrency'] === 'string' || data['primaryCurrency'] instanceof String)) {
            throw new Error("Expected the field `primaryCurrency` to be a primitive type in the JSON string but got " + data['primaryCurrency']);
        }

        return true;
    }


}

CreateAccountHolderRequest.RequiredProperties = ["accountHolderCode", "accountHolderDetails", "legalEntity"];

/**
 * Your unique identifier for the prospective account holder. The length must be between three (3) and fifty (50) characters long. Only letters, digits, and hyphens (-) are allowed.
 * @member {String} accountHolderCode
 */
CreateAccountHolderRequest.prototype['accountHolderCode'] = undefined;

/**
 * The details of the prospective account holder.
 * @member {module:model/AccountHolderDetails} accountHolderDetails
 */
CreateAccountHolderRequest.prototype['accountHolderDetails'] = undefined;

/**
 * If set to **true**, an account with the default options is automatically created for the account holder. By default, this field is set to **true**.
 * @member {Boolean} createDefaultAccount
 */
CreateAccountHolderRequest.prototype['createDefaultAccount'] = undefined;

/**
 * A description of the prospective account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores `_`.
 * @member {String} description
 */
CreateAccountHolderRequest.prototype['description'] = undefined;

/**
 * The legal entity type of the account holder. This determines the information that should be provided in the request.  Possible values: **Business**, **Individual**, or **NonProfit**.  * If set to **Business** or **NonProfit**, then `accountHolderDetails.businessDetails` must be provided, with at least one entry in the `accountHolderDetails.businessDetails.shareholders` list.  * If set to **Individual**, then `accountHolderDetails.individualDetails` must be provided.
 * @member {module:model/CreateAccountHolderRequest.LegalEntityEnum} legalEntity
 */
CreateAccountHolderRequest.prototype['legalEntity'] = undefined;

/**
 * The three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), with which the prospective account holder primarily deals.
 * @member {String} primaryCurrency
 */
CreateAccountHolderRequest.prototype['primaryCurrency'] = undefined;

/**
 * The starting [processing tier](https://docs.adyen.com/marketplaces-and-platforms/classic/onboarding-and-verification/precheck-kyc-information) for the prospective account holder.
 * @member {Number} processingTier
 */
CreateAccountHolderRequest.prototype['processingTier'] = undefined;





/**
 * Allowed values for the <code>legalEntity</code> property.
 * @enum {String}
 * @readonly
 */
CreateAccountHolderRequest['LegalEntityEnum'] = {

    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",

    /**
     * value: "Individual"
     * @const
     */
    "Individual": "Individual",

    /**
     * value: "NonProfit"
     * @const
     */
    "NonProfit": "NonProfit"
};



export default CreateAccountHolderRequest;

