/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountHolderDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountHolderDetails::OAIAccountHolderDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountHolderDetails::OAIAccountHolderDetails() {
    this->initializeModel();
}

OAIAccountHolderDetails::~OAIAccountHolderDetails() {}

void OAIAccountHolderDetails::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_bank_account_details_isSet = false;
    m_bank_account_details_isValid = false;

    m_business_details_isSet = false;
    m_business_details_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_full_phone_number_isSet = false;
    m_full_phone_number_isValid = false;

    m_individual_details_isSet = false;
    m_individual_details_isValid = false;

    m_last_review_date_isSet = false;
    m_last_review_date_isValid = false;

    m_merchant_category_code_isSet = false;
    m_merchant_category_code_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_principal_business_address_isSet = false;
    m_principal_business_address_isValid = false;

    m_web_address_isSet = false;
    m_web_address_isValid = false;
}

void OAIAccountHolderDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountHolderDetails::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_bank_account_details_isValid = ::OpenAPI::fromJsonValue(m_bank_account_details, json[QString("bankAccountDetails")]);
    m_bank_account_details_isSet = !json[QString("bankAccountDetails")].isNull() && m_bank_account_details_isValid;

    m_business_details_isValid = ::OpenAPI::fromJsonValue(m_business_details, json[QString("businessDetails")]);
    m_business_details_isSet = !json[QString("businessDetails")].isNull() && m_business_details_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_full_phone_number_isValid = ::OpenAPI::fromJsonValue(m_full_phone_number, json[QString("fullPhoneNumber")]);
    m_full_phone_number_isSet = !json[QString("fullPhoneNumber")].isNull() && m_full_phone_number_isValid;

    m_individual_details_isValid = ::OpenAPI::fromJsonValue(m_individual_details, json[QString("individualDetails")]);
    m_individual_details_isSet = !json[QString("individualDetails")].isNull() && m_individual_details_isValid;

    m_last_review_date_isValid = ::OpenAPI::fromJsonValue(m_last_review_date, json[QString("lastReviewDate")]);
    m_last_review_date_isSet = !json[QString("lastReviewDate")].isNull() && m_last_review_date_isValid;

    m_merchant_category_code_isValid = ::OpenAPI::fromJsonValue(m_merchant_category_code, json[QString("merchantCategoryCode")]);
    m_merchant_category_code_isSet = !json[QString("merchantCategoryCode")].isNull() && m_merchant_category_code_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_principal_business_address_isValid = ::OpenAPI::fromJsonValue(m_principal_business_address, json[QString("principalBusinessAddress")]);
    m_principal_business_address_isSet = !json[QString("principalBusinessAddress")].isNull() && m_principal_business_address_isValid;

    m_web_address_isValid = ::OpenAPI::fromJsonValue(m_web_address, json[QString("webAddress")]);
    m_web_address_isSet = !json[QString("webAddress")].isNull() && m_web_address_isValid;
}

QString OAIAccountHolderDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountHolderDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_bank_account_details.size() > 0) {
        obj.insert(QString("bankAccountDetails"), ::OpenAPI::toJsonValue(m_bank_account_details));
    }
    if (m_business_details.isSet()) {
        obj.insert(QString("businessDetails"), ::OpenAPI::toJsonValue(m_business_details));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_full_phone_number_isSet) {
        obj.insert(QString("fullPhoneNumber"), ::OpenAPI::toJsonValue(m_full_phone_number));
    }
    if (m_individual_details.isSet()) {
        obj.insert(QString("individualDetails"), ::OpenAPI::toJsonValue(m_individual_details));
    }
    if (m_last_review_date_isSet) {
        obj.insert(QString("lastReviewDate"), ::OpenAPI::toJsonValue(m_last_review_date));
    }
    if (m_merchant_category_code_isSet) {
        obj.insert(QString("merchantCategoryCode"), ::OpenAPI::toJsonValue(m_merchant_category_code));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_principal_business_address.isSet()) {
        obj.insert(QString("principalBusinessAddress"), ::OpenAPI::toJsonValue(m_principal_business_address));
    }
    if (m_web_address_isSet) {
        obj.insert(QString("webAddress"), ::OpenAPI::toJsonValue(m_web_address));
    }
    return obj;
}

OAIViasAddress OAIAccountHolderDetails::getAddress() const {
    return m_address;
}
void OAIAccountHolderDetails::setAddress(const OAIViasAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIAccountHolderDetails::is_address_Set() const{
    return m_address_isSet;
}

bool OAIAccountHolderDetails::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIBankAccountDetailWrapper> OAIAccountHolderDetails::getBankAccountDetails() const {
    return m_bank_account_details;
}
void OAIAccountHolderDetails::setBankAccountDetails(const QList<OAIBankAccountDetailWrapper> &bank_account_details) {
    m_bank_account_details = bank_account_details;
    m_bank_account_details_isSet = true;
}

bool OAIAccountHolderDetails::is_bank_account_details_Set() const{
    return m_bank_account_details_isSet;
}

bool OAIAccountHolderDetails::is_bank_account_details_Valid() const{
    return m_bank_account_details_isValid;
}

OAIBusinessDetails OAIAccountHolderDetails::getBusinessDetails() const {
    return m_business_details;
}
void OAIAccountHolderDetails::setBusinessDetails(const OAIBusinessDetails &business_details) {
    m_business_details = business_details;
    m_business_details_isSet = true;
}

bool OAIAccountHolderDetails::is_business_details_Set() const{
    return m_business_details_isSet;
}

bool OAIAccountHolderDetails::is_business_details_Valid() const{
    return m_business_details_isValid;
}

QString OAIAccountHolderDetails::getEmail() const {
    return m_email;
}
void OAIAccountHolderDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAccountHolderDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAccountHolderDetails::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAccountHolderDetails::getFullPhoneNumber() const {
    return m_full_phone_number;
}
void OAIAccountHolderDetails::setFullPhoneNumber(const QString &full_phone_number) {
    m_full_phone_number = full_phone_number;
    m_full_phone_number_isSet = true;
}

bool OAIAccountHolderDetails::is_full_phone_number_Set() const{
    return m_full_phone_number_isSet;
}

bool OAIAccountHolderDetails::is_full_phone_number_Valid() const{
    return m_full_phone_number_isValid;
}

OAIIndividualDetails OAIAccountHolderDetails::getIndividualDetails() const {
    return m_individual_details;
}
void OAIAccountHolderDetails::setIndividualDetails(const OAIIndividualDetails &individual_details) {
    m_individual_details = individual_details;
    m_individual_details_isSet = true;
}

bool OAIAccountHolderDetails::is_individual_details_Set() const{
    return m_individual_details_isSet;
}

bool OAIAccountHolderDetails::is_individual_details_Valid() const{
    return m_individual_details_isValid;
}

QString OAIAccountHolderDetails::getLastReviewDate() const {
    return m_last_review_date;
}
void OAIAccountHolderDetails::setLastReviewDate(const QString &last_review_date) {
    m_last_review_date = last_review_date;
    m_last_review_date_isSet = true;
}

bool OAIAccountHolderDetails::is_last_review_date_Set() const{
    return m_last_review_date_isSet;
}

bool OAIAccountHolderDetails::is_last_review_date_Valid() const{
    return m_last_review_date_isValid;
}

QString OAIAccountHolderDetails::getMerchantCategoryCode() const {
    return m_merchant_category_code;
}
void OAIAccountHolderDetails::setMerchantCategoryCode(const QString &merchant_category_code) {
    m_merchant_category_code = merchant_category_code;
    m_merchant_category_code_isSet = true;
}

bool OAIAccountHolderDetails::is_merchant_category_code_Set() const{
    return m_merchant_category_code_isSet;
}

bool OAIAccountHolderDetails::is_merchant_category_code_Valid() const{
    return m_merchant_category_code_isValid;
}

QMap<QString, QString> OAIAccountHolderDetails::getMetadata() const {
    return m_metadata;
}
void OAIAccountHolderDetails::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAccountHolderDetails::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAccountHolderDetails::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIViasAddress OAIAccountHolderDetails::getPrincipalBusinessAddress() const {
    return m_principal_business_address;
}
void OAIAccountHolderDetails::setPrincipalBusinessAddress(const OAIViasAddress &principal_business_address) {
    m_principal_business_address = principal_business_address;
    m_principal_business_address_isSet = true;
}

bool OAIAccountHolderDetails::is_principal_business_address_Set() const{
    return m_principal_business_address_isSet;
}

bool OAIAccountHolderDetails::is_principal_business_address_Valid() const{
    return m_principal_business_address_isValid;
}

QString OAIAccountHolderDetails::getWebAddress() const {
    return m_web_address;
}
void OAIAccountHolderDetails::setWebAddress(const QString &web_address) {
    m_web_address = web_address;
    m_web_address_isSet = true;
}

bool OAIAccountHolderDetails::is_web_address_Set() const{
    return m_web_address_isSet;
}

bool OAIAccountHolderDetails::is_web_address_Valid() const{
    return m_web_address_isValid;
}

bool OAIAccountHolderDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bank_account_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_review_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_category_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_business_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountHolderDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_address_isValid && true;
}

} // namespace OpenAPI
