/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetAccountHolderResponse.h
 *
 * 
 */

#ifndef OAIGetAccountHolderResponse_H
#define OAIGetAccountHolderResponse_H

#include <QJsonObject>

#include "OAIAccountHolderDetails.h"
#include "OAIAccountHolderStatus.h"
#include "OAIAccountWrapper.h"
#include "OAIKYCVerificationResult.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAccountHolderDetails;
class OAIAccountHolderStatus;
class OAIAccountWrapper;
class OAIKYCVerificationResult;

class OAIGetAccountHolderResponse : public OAIObject {
public:
    OAIGetAccountHolderResponse();
    OAIGetAccountHolderResponse(QString json);
    ~OAIGetAccountHolderResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAccountHolderCode() const;
    void setAccountHolderCode(const QString &account_holder_code);
    bool is_account_holder_code_Set() const;
    bool is_account_holder_code_Valid() const;

    OAIAccountHolderDetails getAccountHolderDetails() const;
    void setAccountHolderDetails(const OAIAccountHolderDetails &account_holder_details);
    bool is_account_holder_details_Set() const;
    bool is_account_holder_details_Valid() const;

    OAIAccountHolderStatus getAccountHolderStatus() const;
    void setAccountHolderStatus(const OAIAccountHolderStatus &account_holder_status);
    bool is_account_holder_status_Set() const;
    bool is_account_holder_status_Valid() const;

    QList<OAIAccountWrapper> getAccounts() const;
    void setAccounts(const QList<OAIAccountWrapper> &accounts);
    bool is_accounts_Set() const;
    bool is_accounts_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getLegalEntity() const;
    void setLegalEntity(const QString &legal_entity);
    bool is_legal_entity_Set() const;
    bool is_legal_entity_Valid() const;

    QString getPrimaryCurrency() const;
    void setPrimaryCurrency(const QString &primary_currency);
    bool is_primary_currency_Set() const;
    bool is_primary_currency_Valid() const;

    QString getPspReference() const;
    void setPspReference(const QString &psp_reference);
    bool is_psp_reference_Set() const;
    bool is_psp_reference_Valid() const;

    QString getResultCode() const;
    void setResultCode(const QString &result_code);
    bool is_result_code_Set() const;
    bool is_result_code_Valid() const;

    bool isSubmittedAsync() const;
    void setSubmittedAsync(const bool &submitted_async);
    bool is_submitted_async_Set() const;
    bool is_submitted_async_Valid() const;

    OAIKYCVerificationResult getVerification() const;
    void setVerification(const OAIKYCVerificationResult &verification);
    bool is_verification_Set() const;
    bool is_verification_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_account_holder_code;
    bool m_account_holder_code_isSet;
    bool m_account_holder_code_isValid;

    OAIAccountHolderDetails m_account_holder_details;
    bool m_account_holder_details_isSet;
    bool m_account_holder_details_isValid;

    OAIAccountHolderStatus m_account_holder_status;
    bool m_account_holder_status_isSet;
    bool m_account_holder_status_isValid;

    QList<OAIAccountWrapper> m_accounts;
    bool m_accounts_isSet;
    bool m_accounts_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_legal_entity;
    bool m_legal_entity_isSet;
    bool m_legal_entity_isValid;

    QString m_primary_currency;
    bool m_primary_currency_isSet;
    bool m_primary_currency_isValid;

    QString m_psp_reference;
    bool m_psp_reference_isSet;
    bool m_psp_reference_isValid;

    QString m_result_code;
    bool m_result_code_isSet;
    bool m_result_code_isValid;

    bool m_submitted_async;
    bool m_submitted_async_isSet;
    bool m_submitted_async_isValid;

    OAIKYCVerificationResult m_verification;
    bool m_verification_isSet;
    bool m_verification_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetAccountHolderResponse)

#endif // OAIGetAccountHolderResponse_H
