/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPersonalDocumentData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPersonalDocumentData::OAIPersonalDocumentData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPersonalDocumentData::OAIPersonalDocumentData() {
    this->initializeModel();
}

OAIPersonalDocumentData::~OAIPersonalDocumentData() {}

void OAIPersonalDocumentData::initializeModel() {

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_issuer_country_isSet = false;
    m_issuer_country_isValid = false;

    m_issuer_state_isSet = false;
    m_issuer_state_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPersonalDocumentData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPersonalDocumentData::fromJsonObject(QJsonObject json) {

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expirationDate")]);
    m_expiration_date_isSet = !json[QString("expirationDate")].isNull() && m_expiration_date_isValid;

    m_issuer_country_isValid = ::OpenAPI::fromJsonValue(m_issuer_country, json[QString("issuerCountry")]);
    m_issuer_country_isSet = !json[QString("issuerCountry")].isNull() && m_issuer_country_isValid;

    m_issuer_state_isValid = ::OpenAPI::fromJsonValue(m_issuer_state, json[QString("issuerState")]);
    m_issuer_state_isSet = !json[QString("issuerState")].isNull() && m_issuer_state_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPersonalDocumentData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPersonalDocumentData::asJsonObject() const {
    QJsonObject obj;
    if (m_expiration_date_isSet) {
        obj.insert(QString("expirationDate"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_issuer_country_isSet) {
        obj.insert(QString("issuerCountry"), ::OpenAPI::toJsonValue(m_issuer_country));
    }
    if (m_issuer_state_isSet) {
        obj.insert(QString("issuerState"), ::OpenAPI::toJsonValue(m_issuer_state));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPersonalDocumentData::getExpirationDate() const {
    return m_expiration_date;
}
void OAIPersonalDocumentData::setExpirationDate(const QString &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIPersonalDocumentData::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIPersonalDocumentData::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIPersonalDocumentData::getIssuerCountry() const {
    return m_issuer_country;
}
void OAIPersonalDocumentData::setIssuerCountry(const QString &issuer_country) {
    m_issuer_country = issuer_country;
    m_issuer_country_isSet = true;
}

bool OAIPersonalDocumentData::is_issuer_country_Set() const{
    return m_issuer_country_isSet;
}

bool OAIPersonalDocumentData::is_issuer_country_Valid() const{
    return m_issuer_country_isValid;
}

QString OAIPersonalDocumentData::getIssuerState() const {
    return m_issuer_state;
}
void OAIPersonalDocumentData::setIssuerState(const QString &issuer_state) {
    m_issuer_state = issuer_state;
    m_issuer_state_isSet = true;
}

bool OAIPersonalDocumentData::is_issuer_state_Set() const{
    return m_issuer_state_isSet;
}

bool OAIPersonalDocumentData::is_issuer_state_Valid() const{
    return m_issuer_state_isValid;
}

QString OAIPersonalDocumentData::getNumber() const {
    return m_number;
}
void OAIPersonalDocumentData::setNumber(const QString &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIPersonalDocumentData::is_number_Set() const{
    return m_number_isSet;
}

bool OAIPersonalDocumentData::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIPersonalDocumentData::getType() const {
    return m_type;
}
void OAIPersonalDocumentData::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPersonalDocumentData::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPersonalDocumentData::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPersonalDocumentData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPersonalDocumentData::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_type_isValid && true;
}

} // namespace OpenAPI
