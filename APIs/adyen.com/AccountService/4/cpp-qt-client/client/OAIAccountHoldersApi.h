/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountHoldersApi_H
#define OAI_OAIAccountHoldersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloseAccountHolderRequest.h"
#include "OAICloseAccountHolderResponse.h"
#include "OAICreateAccountHolderRequest.h"
#include "OAICreateAccountHolderResponse.h"
#include "OAIGetAccountHolderRequest.h"
#include "OAIGetAccountHolderResponse.h"
#include "OAIGetAccountHolderStatusResponse.h"
#include "OAIGetTaxFormRequest.h"
#include "OAIGetTaxFormResponse.h"
#include "OAIServiceError.h"
#include "OAISuspendAccountHolderRequest.h"
#include "OAISuspendAccountHolderResponse.h"
#include "OAIUnSuspendAccountHolderRequest.h"
#include "OAIUnSuspendAccountHolderResponse.h"
#include "OAIUpdateAccountHolderRequest.h"
#include "OAIUpdateAccountHolderResponse.h"
#include "OAIUpdateAccountHolderStateRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountHoldersApi : public QObject {
    Q_OBJECT

public:
    OAIAccountHoldersApi(const int timeOut = 0);
    ~OAIAccountHoldersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_close_account_holder_request OAICloseAccountHolderRequest [optional]
    */
    virtual void postCloseAccountHolder(const ::OpenAPI::OptionalParam<OAICloseAccountHolderRequest> &oai_close_account_holder_request = ::OpenAPI::OptionalParam<OAICloseAccountHolderRequest>());

    /**
    * @param[in]  oai_create_account_holder_request OAICreateAccountHolderRequest [optional]
    */
    virtual void postCreateAccountHolder(const ::OpenAPI::OptionalParam<OAICreateAccountHolderRequest> &oai_create_account_holder_request = ::OpenAPI::OptionalParam<OAICreateAccountHolderRequest>());

    /**
    * @param[in]  oai_get_account_holder_request OAIGetAccountHolderRequest [optional]
    */
    virtual void postGetAccountHolder(const ::OpenAPI::OptionalParam<OAIGetAccountHolderRequest> &oai_get_account_holder_request = ::OpenAPI::OptionalParam<OAIGetAccountHolderRequest>());

    /**
    * @param[in]  oai_get_tax_form_request OAIGetTaxFormRequest [optional]
    */
    virtual void postGetTaxForm(const ::OpenAPI::OptionalParam<OAIGetTaxFormRequest> &oai_get_tax_form_request = ::OpenAPI::OptionalParam<OAIGetTaxFormRequest>());

    /**
    * @param[in]  oai_suspend_account_holder_request OAISuspendAccountHolderRequest [optional]
    */
    virtual void postSuspendAccountHolder(const ::OpenAPI::OptionalParam<OAISuspendAccountHolderRequest> &oai_suspend_account_holder_request = ::OpenAPI::OptionalParam<OAISuspendAccountHolderRequest>());

    /**
    * @param[in]  oaiun_suspend_account_holder_request OAIUnSuspendAccountHolderRequest [optional]
    */
    virtual void postUnSuspendAccountHolder(const ::OpenAPI::OptionalParam<OAIUnSuspendAccountHolderRequest> &oaiun_suspend_account_holder_request = ::OpenAPI::OptionalParam<OAIUnSuspendAccountHolderRequest>());

    /**
    * @param[in]  oai_update_account_holder_request OAIUpdateAccountHolderRequest [optional]
    */
    virtual void postUpdateAccountHolder(const ::OpenAPI::OptionalParam<OAIUpdateAccountHolderRequest> &oai_update_account_holder_request = ::OpenAPI::OptionalParam<OAIUpdateAccountHolderRequest>());

    /**
    * @param[in]  oai_update_account_holder_state_request OAIUpdateAccountHolderStateRequest [optional]
    */
    virtual void postUpdateAccountHolderState(const ::OpenAPI::OptionalParam<OAIUpdateAccountHolderStateRequest> &oai_update_account_holder_state_request = ::OpenAPI::OptionalParam<OAIUpdateAccountHolderStateRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void postCloseAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postCreateAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postGetAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postGetTaxFormCallback(OAIHttpRequestWorker *worker);
    void postSuspendAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postUnSuspendAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postUpdateAccountHolderCallback(OAIHttpRequestWorker *worker);
    void postUpdateAccountHolderStateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void postCloseAccountHolderSignal(OAICloseAccountHolderResponse summary);
    void postCreateAccountHolderSignal(OAICreateAccountHolderResponse summary);
    void postGetAccountHolderSignal(OAIGetAccountHolderResponse summary);
    void postGetTaxFormSignal(OAIGetTaxFormResponse summary);
    void postSuspendAccountHolderSignal(OAISuspendAccountHolderResponse summary);
    void postUnSuspendAccountHolderSignal(OAIUnSuspendAccountHolderResponse summary);
    void postUpdateAccountHolderSignal(OAIUpdateAccountHolderResponse summary);
    void postUpdateAccountHolderStateSignal(OAIGetAccountHolderStatusResponse summary);


    void postCloseAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAICloseAccountHolderResponse summary);
    void postCreateAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAICreateAccountHolderResponse summary);
    void postGetAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountHolderResponse summary);
    void postGetTaxFormSignalFull(OAIHttpRequestWorker *worker, OAIGetTaxFormResponse summary);
    void postSuspendAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAISuspendAccountHolderResponse summary);
    void postUnSuspendAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIUnSuspendAccountHolderResponse summary);
    void postUpdateAccountHolderSignalFull(OAIHttpRequestWorker *worker, OAIUpdateAccountHolderResponse summary);
    void postUpdateAccountHolderStateSignalFull(OAIHttpRequestWorker *worker, OAIGetAccountHolderStatusResponse summary);

    Q_DECL_DEPRECATED_X("Use postCloseAccountHolderSignalError() instead")
    void postCloseAccountHolderSignalE(OAICloseAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCloseAccountHolderSignalError(OAICloseAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCreateAccountHolderSignalError() instead")
    void postCreateAccountHolderSignalE(OAICreateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateAccountHolderSignalError(OAICreateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetAccountHolderSignalError() instead")
    void postGetAccountHolderSignalE(OAIGetAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetAccountHolderSignalError(OAIGetAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTaxFormSignalError() instead")
    void postGetTaxFormSignalE(OAIGetTaxFormResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTaxFormSignalError(OAIGetTaxFormResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSuspendAccountHolderSignalError() instead")
    void postSuspendAccountHolderSignalE(OAISuspendAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSuspendAccountHolderSignalError(OAISuspendAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUnSuspendAccountHolderSignalError() instead")
    void postUnSuspendAccountHolderSignalE(OAIUnSuspendAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUnSuspendAccountHolderSignalError(OAIUnSuspendAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountHolderSignalError() instead")
    void postUpdateAccountHolderSignalE(OAIUpdateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountHolderSignalError(OAIUpdateAccountHolderResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountHolderStateSignalError() instead")
    void postUpdateAccountHolderStateSignalE(OAIGetAccountHolderStatusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountHolderStateSignalError(OAIGetAccountHolderStatusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use postCloseAccountHolderSignalErrorFull() instead")
    void postCloseAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCloseAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postCreateAccountHolderSignalErrorFull() instead")
    void postCreateAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postCreateAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetAccountHolderSignalErrorFull() instead")
    void postGetAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postGetTaxFormSignalErrorFull() instead")
    void postGetTaxFormSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postGetTaxFormSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSuspendAccountHolderSignalErrorFull() instead")
    void postSuspendAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSuspendAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUnSuspendAccountHolderSignalErrorFull() instead")
    void postUnSuspendAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUnSuspendAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountHolderSignalErrorFull() instead")
    void postUpdateAccountHolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountHolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUpdateAccountHolderStateSignalErrorFull() instead")
    void postUpdateAccountHolderStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUpdateAccountHolderStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
