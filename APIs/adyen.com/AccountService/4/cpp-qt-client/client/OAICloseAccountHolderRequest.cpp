/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloseAccountHolderRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloseAccountHolderRequest::OAICloseAccountHolderRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloseAccountHolderRequest::OAICloseAccountHolderRequest() {
    this->initializeModel();
}

OAICloseAccountHolderRequest::~OAICloseAccountHolderRequest() {}

void OAICloseAccountHolderRequest::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;
}

void OAICloseAccountHolderRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloseAccountHolderRequest::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;
}

QString OAICloseAccountHolderRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloseAccountHolderRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    return obj;
}

QString OAICloseAccountHolderRequest::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAICloseAccountHolderRequest::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAICloseAccountHolderRequest::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAICloseAccountHolderRequest::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

bool OAICloseAccountHolderRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloseAccountHolderRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_account_holder_code_isValid && true;
}

} // namespace OpenAPI
