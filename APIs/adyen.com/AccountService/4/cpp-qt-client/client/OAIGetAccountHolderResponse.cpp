/**
 * Account API
 * This API is used for the classic integration. If you are just starting your implementation, refer to our [new integration guide](https://docs.adyen.com/marketplaces-and-platforms) instead.  The Account API provides endpoints for managing account-related entities on your platform. These related entities include account holders, accounts, bank accounts, shareholders, and verification-related documents. The management operations include actions such as creation, retrieval, updating, and deletion of them.  For more information, refer to our [documentation](https://docs.adyen.com/marketplaces-and-platforms/classic). ## Authentication Your Adyen contact will provide your API credential and an API key. To connect to the API, add an `X-API-Key` header with the API key as the value, for example:   ``` curl -H \"Content-Type: application/json\" \\ -H \"X-API-Key: YOUR_API_KEY\" \\ ... ```  Alternatively, you can use the username and password to connect to the API using basic authentication. For example:  ``` curl -U \"ws@MarketPlace.YOUR_PLATFORM_ACCOUNT\":\"YOUR_WS_PASSWORD\" \\ -H \"Content-Type: application/json\" \\ ... ``` When going live, you need to generate new web service user credentials to access the [live endpoints](https://docs.adyen.com/development-resources/live-endpoints).  ## Versioning The Account API supports [versioning](https://docs.adyen.com/development-resources/versioning) using a version suffix in the endpoint URL. This suffix has the following format: \"vXX\", where XX is the version number.  For example: ``` https://cal-test.adyen.com/cal/services/Account/v4/createAccountHolder ```
 *
 * The version of the OpenAPI document: 4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetAccountHolderResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetAccountHolderResponse::OAIGetAccountHolderResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetAccountHolderResponse::OAIGetAccountHolderResponse() {
    this->initializeModel();
}

OAIGetAccountHolderResponse::~OAIGetAccountHolderResponse() {}

void OAIGetAccountHolderResponse::initializeModel() {

    m_account_holder_code_isSet = false;
    m_account_holder_code_isValid = false;

    m_account_holder_details_isSet = false;
    m_account_holder_details_isValid = false;

    m_account_holder_status_isSet = false;
    m_account_holder_status_isValid = false;

    m_accounts_isSet = false;
    m_accounts_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_legal_entity_isSet = false;
    m_legal_entity_isValid = false;

    m_primary_currency_isSet = false;
    m_primary_currency_isValid = false;

    m_psp_reference_isSet = false;
    m_psp_reference_isValid = false;

    m_result_code_isSet = false;
    m_result_code_isValid = false;

    m_submitted_async_isSet = false;
    m_submitted_async_isValid = false;

    m_verification_isSet = false;
    m_verification_isValid = false;
}

void OAIGetAccountHolderResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetAccountHolderResponse::fromJsonObject(QJsonObject json) {

    m_account_holder_code_isValid = ::OpenAPI::fromJsonValue(m_account_holder_code, json[QString("accountHolderCode")]);
    m_account_holder_code_isSet = !json[QString("accountHolderCode")].isNull() && m_account_holder_code_isValid;

    m_account_holder_details_isValid = ::OpenAPI::fromJsonValue(m_account_holder_details, json[QString("accountHolderDetails")]);
    m_account_holder_details_isSet = !json[QString("accountHolderDetails")].isNull() && m_account_holder_details_isValid;

    m_account_holder_status_isValid = ::OpenAPI::fromJsonValue(m_account_holder_status, json[QString("accountHolderStatus")]);
    m_account_holder_status_isSet = !json[QString("accountHolderStatus")].isNull() && m_account_holder_status_isValid;

    m_accounts_isValid = ::OpenAPI::fromJsonValue(m_accounts, json[QString("accounts")]);
    m_accounts_isSet = !json[QString("accounts")].isNull() && m_accounts_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_legal_entity_isValid = ::OpenAPI::fromJsonValue(m_legal_entity, json[QString("legalEntity")]);
    m_legal_entity_isSet = !json[QString("legalEntity")].isNull() && m_legal_entity_isValid;

    m_primary_currency_isValid = ::OpenAPI::fromJsonValue(m_primary_currency, json[QString("primaryCurrency")]);
    m_primary_currency_isSet = !json[QString("primaryCurrency")].isNull() && m_primary_currency_isValid;

    m_psp_reference_isValid = ::OpenAPI::fromJsonValue(m_psp_reference, json[QString("pspReference")]);
    m_psp_reference_isSet = !json[QString("pspReference")].isNull() && m_psp_reference_isValid;

    m_result_code_isValid = ::OpenAPI::fromJsonValue(m_result_code, json[QString("resultCode")]);
    m_result_code_isSet = !json[QString("resultCode")].isNull() && m_result_code_isValid;

    m_submitted_async_isValid = ::OpenAPI::fromJsonValue(m_submitted_async, json[QString("submittedAsync")]);
    m_submitted_async_isSet = !json[QString("submittedAsync")].isNull() && m_submitted_async_isValid;

    m_verification_isValid = ::OpenAPI::fromJsonValue(m_verification, json[QString("verification")]);
    m_verification_isSet = !json[QString("verification")].isNull() && m_verification_isValid;
}

QString OAIGetAccountHolderResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetAccountHolderResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_account_holder_code_isSet) {
        obj.insert(QString("accountHolderCode"), ::OpenAPI::toJsonValue(m_account_holder_code));
    }
    if (m_account_holder_details.isSet()) {
        obj.insert(QString("accountHolderDetails"), ::OpenAPI::toJsonValue(m_account_holder_details));
    }
    if (m_account_holder_status.isSet()) {
        obj.insert(QString("accountHolderStatus"), ::OpenAPI::toJsonValue(m_account_holder_status));
    }
    if (m_accounts.size() > 0) {
        obj.insert(QString("accounts"), ::OpenAPI::toJsonValue(m_accounts));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_legal_entity_isSet) {
        obj.insert(QString("legalEntity"), ::OpenAPI::toJsonValue(m_legal_entity));
    }
    if (m_primary_currency_isSet) {
        obj.insert(QString("primaryCurrency"), ::OpenAPI::toJsonValue(m_primary_currency));
    }
    if (m_psp_reference_isSet) {
        obj.insert(QString("pspReference"), ::OpenAPI::toJsonValue(m_psp_reference));
    }
    if (m_result_code_isSet) {
        obj.insert(QString("resultCode"), ::OpenAPI::toJsonValue(m_result_code));
    }
    if (m_submitted_async_isSet) {
        obj.insert(QString("submittedAsync"), ::OpenAPI::toJsonValue(m_submitted_async));
    }
    if (m_verification.isSet()) {
        obj.insert(QString("verification"), ::OpenAPI::toJsonValue(m_verification));
    }
    return obj;
}

QString OAIGetAccountHolderResponse::getAccountHolderCode() const {
    return m_account_holder_code;
}
void OAIGetAccountHolderResponse::setAccountHolderCode(const QString &account_holder_code) {
    m_account_holder_code = account_holder_code;
    m_account_holder_code_isSet = true;
}

bool OAIGetAccountHolderResponse::is_account_holder_code_Set() const{
    return m_account_holder_code_isSet;
}

bool OAIGetAccountHolderResponse::is_account_holder_code_Valid() const{
    return m_account_holder_code_isValid;
}

OAIAccountHolderDetails OAIGetAccountHolderResponse::getAccountHolderDetails() const {
    return m_account_holder_details;
}
void OAIGetAccountHolderResponse::setAccountHolderDetails(const OAIAccountHolderDetails &account_holder_details) {
    m_account_holder_details = account_holder_details;
    m_account_holder_details_isSet = true;
}

bool OAIGetAccountHolderResponse::is_account_holder_details_Set() const{
    return m_account_holder_details_isSet;
}

bool OAIGetAccountHolderResponse::is_account_holder_details_Valid() const{
    return m_account_holder_details_isValid;
}

OAIAccountHolderStatus OAIGetAccountHolderResponse::getAccountHolderStatus() const {
    return m_account_holder_status;
}
void OAIGetAccountHolderResponse::setAccountHolderStatus(const OAIAccountHolderStatus &account_holder_status) {
    m_account_holder_status = account_holder_status;
    m_account_holder_status_isSet = true;
}

bool OAIGetAccountHolderResponse::is_account_holder_status_Set() const{
    return m_account_holder_status_isSet;
}

bool OAIGetAccountHolderResponse::is_account_holder_status_Valid() const{
    return m_account_holder_status_isValid;
}

QList<OAIAccountWrapper> OAIGetAccountHolderResponse::getAccounts() const {
    return m_accounts;
}
void OAIGetAccountHolderResponse::setAccounts(const QList<OAIAccountWrapper> &accounts) {
    m_accounts = accounts;
    m_accounts_isSet = true;
}

bool OAIGetAccountHolderResponse::is_accounts_Set() const{
    return m_accounts_isSet;
}

bool OAIGetAccountHolderResponse::is_accounts_Valid() const{
    return m_accounts_isValid;
}

QString OAIGetAccountHolderResponse::getDescription() const {
    return m_description;
}
void OAIGetAccountHolderResponse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGetAccountHolderResponse::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGetAccountHolderResponse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGetAccountHolderResponse::getLegalEntity() const {
    return m_legal_entity;
}
void OAIGetAccountHolderResponse::setLegalEntity(const QString &legal_entity) {
    m_legal_entity = legal_entity;
    m_legal_entity_isSet = true;
}

bool OAIGetAccountHolderResponse::is_legal_entity_Set() const{
    return m_legal_entity_isSet;
}

bool OAIGetAccountHolderResponse::is_legal_entity_Valid() const{
    return m_legal_entity_isValid;
}

QString OAIGetAccountHolderResponse::getPrimaryCurrency() const {
    return m_primary_currency;
}
void OAIGetAccountHolderResponse::setPrimaryCurrency(const QString &primary_currency) {
    m_primary_currency = primary_currency;
    m_primary_currency_isSet = true;
}

bool OAIGetAccountHolderResponse::is_primary_currency_Set() const{
    return m_primary_currency_isSet;
}

bool OAIGetAccountHolderResponse::is_primary_currency_Valid() const{
    return m_primary_currency_isValid;
}

QString OAIGetAccountHolderResponse::getPspReference() const {
    return m_psp_reference;
}
void OAIGetAccountHolderResponse::setPspReference(const QString &psp_reference) {
    m_psp_reference = psp_reference;
    m_psp_reference_isSet = true;
}

bool OAIGetAccountHolderResponse::is_psp_reference_Set() const{
    return m_psp_reference_isSet;
}

bool OAIGetAccountHolderResponse::is_psp_reference_Valid() const{
    return m_psp_reference_isValid;
}

QString OAIGetAccountHolderResponse::getResultCode() const {
    return m_result_code;
}
void OAIGetAccountHolderResponse::setResultCode(const QString &result_code) {
    m_result_code = result_code;
    m_result_code_isSet = true;
}

bool OAIGetAccountHolderResponse::is_result_code_Set() const{
    return m_result_code_isSet;
}

bool OAIGetAccountHolderResponse::is_result_code_Valid() const{
    return m_result_code_isValid;
}

bool OAIGetAccountHolderResponse::isSubmittedAsync() const {
    return m_submitted_async;
}
void OAIGetAccountHolderResponse::setSubmittedAsync(const bool &submitted_async) {
    m_submitted_async = submitted_async;
    m_submitted_async_isSet = true;
}

bool OAIGetAccountHolderResponse::is_submitted_async_Set() const{
    return m_submitted_async_isSet;
}

bool OAIGetAccountHolderResponse::is_submitted_async_Valid() const{
    return m_submitted_async_isValid;
}

OAIKYCVerificationResult OAIGetAccountHolderResponse::getVerification() const {
    return m_verification;
}
void OAIGetAccountHolderResponse::setVerification(const OAIKYCVerificationResult &verification) {
    m_verification = verification;
    m_verification_isSet = true;
}

bool OAIGetAccountHolderResponse::is_verification_Set() const{
    return m_verification_isSet;
}

bool OAIGetAccountHolderResponse::is_verification_Valid() const{
    return m_verification_isValid;
}

bool OAIGetAccountHolderResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_holder_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_holder_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_legal_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psp_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_async_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetAccountHolderResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
