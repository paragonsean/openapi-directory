# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_detail import DocumentDetail
from openapi_server import util


class UploadDocumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, bank_account_uuid: str=None, document_content: str=None, document_detail: DocumentDetail=None, shareholder_code: str=None):
        """UploadDocumentRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this UploadDocumentRequest.
        :param bank_account_uuid: The bank_account_uuid of this UploadDocumentRequest.
        :param document_content: The document_content of this UploadDocumentRequest.
        :param document_detail: The document_detail of this UploadDocumentRequest.
        :param shareholder_code: The shareholder_code of this UploadDocumentRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'bank_account_uuid': str,
            'document_content': str,
            'document_detail': DocumentDetail,
            'shareholder_code': str
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'bank_account_uuid': 'bankAccountUUID',
            'document_content': 'documentContent',
            'document_detail': 'documentDetail',
            'shareholder_code': 'shareholderCode'
        }

        self._account_holder_code = account_holder_code
        self._bank_account_uuid = bank_account_uuid
        self._document_content = document_content
        self._document_detail = document_detail
        self._shareholder_code = shareholder_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UploadDocumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UploadDocumentRequest of this UploadDocumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this UploadDocumentRequest.

        The code of the account holder, for which the document is submitted.

        :return: The account_holder_code of this UploadDocumentRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this UploadDocumentRequest.

        The code of the account holder, for which the document is submitted.

        :param account_holder_code: The account_holder_code of this UploadDocumentRequest.
        :type account_holder_code: str
        """

        self._account_holder_code = account_holder_code

    @property
    def bank_account_uuid(self):
        """Gets the bank_account_uuid of this UploadDocumentRequest.

        The unique ID of the bank account, for which the document is submitted. >Required if the document is being submitted in order to verify a bank account.

        :return: The bank_account_uuid of this UploadDocumentRequest.
        :rtype: str
        """
        return self._bank_account_uuid

    @bank_account_uuid.setter
    def bank_account_uuid(self, bank_account_uuid):
        """Sets the bank_account_uuid of this UploadDocumentRequest.

        The unique ID of the bank account, for which the document is submitted. >Required if the document is being submitted in order to verify a bank account.

        :param bank_account_uuid: The bank_account_uuid of this UploadDocumentRequest.
        :type bank_account_uuid: str
        """

        self._bank_account_uuid = bank_account_uuid

    @property
    def document_content(self):
        """Gets the document_content of this UploadDocumentRequest.

        The content of the document, in Base64-encoded string format.  To learn about document requirements, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks).

        :return: The document_content of this UploadDocumentRequest.
        :rtype: str
        """
        return self._document_content

    @document_content.setter
    def document_content(self, document_content):
        """Sets the document_content of this UploadDocumentRequest.

        The content of the document, in Base64-encoded string format.  To learn about document requirements, refer to [Verification checks](https://docs.adyen.com/marketplaces-and-platforms/classic/verification-checks).

        :param document_content: The document_content of this UploadDocumentRequest.
        :type document_content: str
        """
        if document_content is None:
            raise ValueError("Invalid value for `document_content`, must not be `None`")

        self._document_content = document_content

    @property
    def document_detail(self):
        """Gets the document_detail of this UploadDocumentRequest.

        Details of the document being submitted.

        :return: The document_detail of this UploadDocumentRequest.
        :rtype: DocumentDetail
        """
        return self._document_detail

    @document_detail.setter
    def document_detail(self, document_detail):
        """Sets the document_detail of this UploadDocumentRequest.

        Details of the document being submitted.

        :param document_detail: The document_detail of this UploadDocumentRequest.
        :type document_detail: DocumentDetail
        """
        if document_detail is None:
            raise ValueError("Invalid value for `document_detail`, must not be `None`")

        self._document_detail = document_detail

    @property
    def shareholder_code(self):
        """Gets the shareholder_code of this UploadDocumentRequest.

        The code of the shareholder, for which the document is submitted. >Required if the document is being submitted in order to verify a shareholder.

        :return: The shareholder_code of this UploadDocumentRequest.
        :rtype: str
        """
        return self._shareholder_code

    @shareholder_code.setter
    def shareholder_code(self, shareholder_code):
        """Sets the shareholder_code of this UploadDocumentRequest.

        The code of the shareholder, for which the document is submitted. >Required if the document is being submitted in order to verify a shareholder.

        :param shareholder_code: The shareholder_code of this UploadDocumentRequest.
        :type shareholder_code: str
        """

        self._shareholder_code = shareholder_code
