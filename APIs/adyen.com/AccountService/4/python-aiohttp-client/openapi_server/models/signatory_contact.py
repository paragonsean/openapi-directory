# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vias_address import ViasAddress
from openapi_server.models.vias_name import ViasName
from openapi_server.models.vias_personal_data import ViasPersonalData
from openapi_server.models.vias_phone_number import ViasPhoneNumber
from openapi_server import util


class SignatoryContact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ViasAddress=None, email: str=None, full_phone_number: str=None, job_title: str=None, name: ViasName=None, personal_data: ViasPersonalData=None, phone_number: ViasPhoneNumber=None, signatory_code: str=None, signatory_reference: str=None, web_address: str=None):
        """SignatoryContact - a model defined in OpenAPI

        :param address: The address of this SignatoryContact.
        :param email: The email of this SignatoryContact.
        :param full_phone_number: The full_phone_number of this SignatoryContact.
        :param job_title: The job_title of this SignatoryContact.
        :param name: The name of this SignatoryContact.
        :param personal_data: The personal_data of this SignatoryContact.
        :param phone_number: The phone_number of this SignatoryContact.
        :param signatory_code: The signatory_code of this SignatoryContact.
        :param signatory_reference: The signatory_reference of this SignatoryContact.
        :param web_address: The web_address of this SignatoryContact.
        """
        self.openapi_types = {
            'address': ViasAddress,
            'email': str,
            'full_phone_number': str,
            'job_title': str,
            'name': ViasName,
            'personal_data': ViasPersonalData,
            'phone_number': ViasPhoneNumber,
            'signatory_code': str,
            'signatory_reference': str,
            'web_address': str
        }

        self.attribute_map = {
            'address': 'address',
            'email': 'email',
            'full_phone_number': 'fullPhoneNumber',
            'job_title': 'jobTitle',
            'name': 'name',
            'personal_data': 'personalData',
            'phone_number': 'phoneNumber',
            'signatory_code': 'signatoryCode',
            'signatory_reference': 'signatoryReference',
            'web_address': 'webAddress'
        }

        self._address = address
        self._email = email
        self._full_phone_number = full_phone_number
        self._job_title = job_title
        self._name = name
        self._personal_data = personal_data
        self._phone_number = phone_number
        self._signatory_code = signatory_code
        self._signatory_reference = signatory_reference
        self._web_address = web_address

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SignatoryContact':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SignatoryContact of this SignatoryContact.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this SignatoryContact.

        The address of the person.

        :return: The address of this SignatoryContact.
        :rtype: ViasAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this SignatoryContact.

        The address of the person.

        :param address: The address of this SignatoryContact.
        :type address: ViasAddress
        """

        self._address = address

    @property
    def email(self):
        """Gets the email of this SignatoryContact.

        The e-mail address of the person.

        :return: The email of this SignatoryContact.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignatoryContact.

        The e-mail address of the person.

        :param email: The email of this SignatoryContact.
        :type email: str
        """

        self._email = email

    @property
    def full_phone_number(self):
        """Gets the full_phone_number of this SignatoryContact.

        The phone number of the person provided as a single string.  It will be handled as a landline phone. Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :return: The full_phone_number of this SignatoryContact.
        :rtype: str
        """
        return self._full_phone_number

    @full_phone_number.setter
    def full_phone_number(self, full_phone_number):
        """Sets the full_phone_number of this SignatoryContact.

        The phone number of the person provided as a single string.  It will be handled as a landline phone. Examples: \"0031 6 11 22 33 44\", \"+316/1122-3344\", \"(0031) 611223344\"

        :param full_phone_number: The full_phone_number of this SignatoryContact.
        :type full_phone_number: str
        """

        self._full_phone_number = full_phone_number

    @property
    def job_title(self):
        """Gets the job_title of this SignatoryContact.

        Job title of the signatory.  Example values: **Chief Executive Officer**, **Chief Financial Officer**, **Chief Operating Officer**, **President**, **Vice President**, **Executive President**, **Managing Member**, **Partner**, **Treasurer**, **Director**, or **Other**.

        :return: The job_title of this SignatoryContact.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this SignatoryContact.

        Job title of the signatory.  Example values: **Chief Executive Officer**, **Chief Financial Officer**, **Chief Operating Officer**, **President**, **Vice President**, **Executive President**, **Managing Member**, **Partner**, **Treasurer**, **Director**, or **Other**.

        :param job_title: The job_title of this SignatoryContact.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def name(self):
        """Gets the name of this SignatoryContact.

        The name of the person.

        :return: The name of this SignatoryContact.
        :rtype: ViasName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SignatoryContact.

        The name of the person.

        :param name: The name of this SignatoryContact.
        :type name: ViasName
        """

        self._name = name

    @property
    def personal_data(self):
        """Gets the personal_data of this SignatoryContact.

        Contains information about the person.

        :return: The personal_data of this SignatoryContact.
        :rtype: ViasPersonalData
        """
        return self._personal_data

    @personal_data.setter
    def personal_data(self, personal_data):
        """Sets the personal_data of this SignatoryContact.

        Contains information about the person.

        :param personal_data: The personal_data of this SignatoryContact.
        :type personal_data: ViasPersonalData
        """

        self._personal_data = personal_data

    @property
    def phone_number(self):
        """Gets the phone_number of this SignatoryContact.

        The phone number of the person.

        :return: The phone_number of this SignatoryContact.
        :rtype: ViasPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this SignatoryContact.

        The phone number of the person.

        :param phone_number: The phone_number of this SignatoryContact.
        :type phone_number: ViasPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def signatory_code(self):
        """Gets the signatory_code of this SignatoryContact.

        The unique identifier (UUID) of the signatory. >**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Signatory will be created with a procedurally-generated UUID.**  >**If, during an Account Holder create request, a UUID is provided, the creation of the Signatory will fail while the creation of the Account Holder will continue.**  >**If, during an Account Holder update request, a UUID that is not correlated with an existing Signatory is provided, the update of the Signatory will fail.**  >**If, during an Account Holder update request, a UUID that is correlated with an existing Signatory is provided, the existing Signatory will be updated.** 

        :return: The signatory_code of this SignatoryContact.
        :rtype: str
        """
        return self._signatory_code

    @signatory_code.setter
    def signatory_code(self, signatory_code):
        """Sets the signatory_code of this SignatoryContact.

        The unique identifier (UUID) of the signatory. >**If, during an Account Holder create or update request, this field is left blank (but other fields provided), a new Signatory will be created with a procedurally-generated UUID.**  >**If, during an Account Holder create request, a UUID is provided, the creation of the Signatory will fail while the creation of the Account Holder will continue.**  >**If, during an Account Holder update request, a UUID that is not correlated with an existing Signatory is provided, the update of the Signatory will fail.**  >**If, during an Account Holder update request, a UUID that is correlated with an existing Signatory is provided, the existing Signatory will be updated.** 

        :param signatory_code: The signatory_code of this SignatoryContact.
        :type signatory_code: str
        """

        self._signatory_code = signatory_code

    @property
    def signatory_reference(self):
        """Gets the signatory_reference of this SignatoryContact.

        Your reference for the signatory.

        :return: The signatory_reference of this SignatoryContact.
        :rtype: str
        """
        return self._signatory_reference

    @signatory_reference.setter
    def signatory_reference(self, signatory_reference):
        """Sets the signatory_reference of this SignatoryContact.

        Your reference for the signatory.

        :param signatory_reference: The signatory_reference of this SignatoryContact.
        :type signatory_reference: str
        """

        self._signatory_reference = signatory_reference

    @property
    def web_address(self):
        """Gets the web_address of this SignatoryContact.

        The URL of the person's website.

        :return: The web_address of this SignatoryContact.
        :rtype: str
        """
        return self._web_address

    @web_address.setter
    def web_address(self, web_address):
        """Sets the web_address of this SignatoryContact.

        The URL of the person's website.

        :param web_address: The web_address of this SignatoryContact.
        :type web_address: str
        """

        self._web_address = web_address
