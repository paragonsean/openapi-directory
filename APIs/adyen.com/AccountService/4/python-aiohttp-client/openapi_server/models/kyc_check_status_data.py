# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kyc_check_summary import KYCCheckSummary
from openapi_server import util


class KYCCheckStatusData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, required_fields: List[str]=None, status: str=None, summary: KYCCheckSummary=None, type: str=None):
        """KYCCheckStatusData - a model defined in OpenAPI

        :param required_fields: The required_fields of this KYCCheckStatusData.
        :param status: The status of this KYCCheckStatusData.
        :param summary: The summary of this KYCCheckStatusData.
        :param type: The type of this KYCCheckStatusData.
        """
        self.openapi_types = {
            'required_fields': List[str],
            'status': str,
            'summary': KYCCheckSummary,
            'type': str
        }

        self.attribute_map = {
            'required_fields': 'requiredFields',
            'status': 'status',
            'summary': 'summary',
            'type': 'type'
        }

        self._required_fields = required_fields
        self._status = status
        self._summary = summary
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KYCCheckStatusData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KYCCheckStatusData of this KYCCheckStatusData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def required_fields(self):
        """Gets the required_fields of this KYCCheckStatusData.

        A list of the fields required for execution of the check.

        :return: The required_fields of this KYCCheckStatusData.
        :rtype: List[str]
        """
        return self._required_fields

    @required_fields.setter
    def required_fields(self, required_fields):
        """Sets the required_fields of this KYCCheckStatusData.

        A list of the fields required for execution of the check.

        :param required_fields: The required_fields of this KYCCheckStatusData.
        :type required_fields: List[str]
        """

        self._required_fields = required_fields

    @property
    def status(self):
        """Gets the status of this KYCCheckStatusData.

        The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.

        :return: The status of this KYCCheckStatusData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KYCCheckStatusData.

        The status of the check.  Possible values: **AWAITING_DATA** , **DATA_PROVIDED**, **FAILED**, **INVALID_DATA**, **PASSED**, **PENDING**, **RETRY_LIMIT_REACHED**.

        :param status: The status of this KYCCheckStatusData.
        :type status: str
        """
        allowed_values = ["AWAITING_DATA", "DATA_PROVIDED", "FAILED", "INVALID_DATA", "PASSED", "PENDING", "PENDING_REVIEW", "RETRY_LIMIT_REACHED", "UNCHECKED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def summary(self):
        """Gets the summary of this KYCCheckStatusData.

        A summary of the execution of the check.

        :return: The summary of this KYCCheckStatusData.
        :rtype: KYCCheckSummary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this KYCCheckStatusData.

        A summary of the execution of the check.

        :param summary: The summary of this KYCCheckStatusData.
        :type summary: KYCCheckSummary
        """

        self._summary = summary

    @property
    def type(self):
        """Gets the type of this KYCCheckStatusData.

        The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**

        :return: The type of this KYCCheckStatusData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this KYCCheckStatusData.

        The type of check.  Possible values:   * **BANK_ACCOUNT_VERIFICATION**: Used in v5 and earlier. Replaced by **PAYOUT_METHOD_VERIFICATION** in v6 and later.   * **COMPANY_VERIFICATION**    * **CARD_VERIFICATION**  * **IDENTITY_VERIFICATION**  * **LEGAL_ARRANGEMENT_VERIFICATION**  * **NONPROFIT_VERIFICATION**   * **PASSPORT_VERIFICATION**  * **PAYOUT_METHOD_VERIFICATION**: Used in v6 and later.  * **PCI_VERIFICATION**

        :param type: The type of this KYCCheckStatusData.
        :type type: str
        """
        allowed_values = ["BANK_ACCOUNT_VERIFICATION", "CARD_VERIFICATION", "COMPANY_VERIFICATION", "IDENTITY_VERIFICATION", "LEGAL_ARRANGEMENT_VERIFICATION", "NONPROFIT_VERIFICATION", "PASSPORT_VERIFICATION", "PAYOUT_METHOD_VERIFICATION", "PCI_VERIFICATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
