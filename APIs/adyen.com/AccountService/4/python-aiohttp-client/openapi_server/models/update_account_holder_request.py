# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.account_holder_details import AccountHolderDetails
from openapi_server import util


class UpdateAccountHolderRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_code: str=None, account_holder_details: AccountHolderDetails=None, description: str=None, primary_currency: str=None, processing_tier: int=None):
        """UpdateAccountHolderRequest - a model defined in OpenAPI

        :param account_holder_code: The account_holder_code of this UpdateAccountHolderRequest.
        :param account_holder_details: The account_holder_details of this UpdateAccountHolderRequest.
        :param description: The description of this UpdateAccountHolderRequest.
        :param primary_currency: The primary_currency of this UpdateAccountHolderRequest.
        :param processing_tier: The processing_tier of this UpdateAccountHolderRequest.
        """
        self.openapi_types = {
            'account_holder_code': str,
            'account_holder_details': AccountHolderDetails,
            'description': str,
            'primary_currency': str,
            'processing_tier': int
        }

        self.attribute_map = {
            'account_holder_code': 'accountHolderCode',
            'account_holder_details': 'accountHolderDetails',
            'description': 'description',
            'primary_currency': 'primaryCurrency',
            'processing_tier': 'processingTier'
        }

        self._account_holder_code = account_holder_code
        self._account_holder_details = account_holder_details
        self._description = description
        self._primary_currency = primary_currency
        self._processing_tier = processing_tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateAccountHolderRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateAccountHolderRequest of this UpdateAccountHolderRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_code(self):
        """Gets the account_holder_code of this UpdateAccountHolderRequest.

        The code of the Account Holder to be updated.

        :return: The account_holder_code of this UpdateAccountHolderRequest.
        :rtype: str
        """
        return self._account_holder_code

    @account_holder_code.setter
    def account_holder_code(self, account_holder_code):
        """Sets the account_holder_code of this UpdateAccountHolderRequest.

        The code of the Account Holder to be updated.

        :param account_holder_code: The account_holder_code of this UpdateAccountHolderRequest.
        :type account_holder_code: str
        """
        if account_holder_code is None:
            raise ValueError("Invalid value for `account_holder_code`, must not be `None`")

        self._account_holder_code = account_holder_code

    @property
    def account_holder_details(self):
        """Gets the account_holder_details of this UpdateAccountHolderRequest.

        The details to which the Account Holder should be updated.  Required if a processingTier is not provided.

        :return: The account_holder_details of this UpdateAccountHolderRequest.
        :rtype: AccountHolderDetails
        """
        return self._account_holder_details

    @account_holder_details.setter
    def account_holder_details(self, account_holder_details):
        """Sets the account_holder_details of this UpdateAccountHolderRequest.

        The details to which the Account Holder should be updated.  Required if a processingTier is not provided.

        :param account_holder_details: The account_holder_details of this UpdateAccountHolderRequest.
        :type account_holder_details: AccountHolderDetails
        """

        self._account_holder_details = account_holder_details

    @property
    def description(self):
        """Gets the description of this UpdateAccountHolderRequest.

        A description of the account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores `_`.

        :return: The description of this UpdateAccountHolderRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateAccountHolderRequest.

        A description of the account holder, maximum 256 characters. You can use alphanumeric characters (A-Z, a-z, 0-9), white spaces, and underscores `_`.

        :param description: The description of this UpdateAccountHolderRequest.
        :type description: str
        """

        self._description = description

    @property
    def primary_currency(self):
        """Gets the primary_currency of this UpdateAccountHolderRequest.

        The primary three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), to which the account holder should be updated.

        :return: The primary_currency of this UpdateAccountHolderRequest.
        :rtype: str
        """
        return self._primary_currency

    @primary_currency.setter
    def primary_currency(self, primary_currency):
        """Sets the primary_currency of this UpdateAccountHolderRequest.

        The primary three-character [ISO currency code](https://docs.adyen.com/development-resources/currency-codes), to which the account holder should be updated.

        :param primary_currency: The primary_currency of this UpdateAccountHolderRequest.
        :type primary_currency: str
        """

        self._primary_currency = primary_currency

    @property
    def processing_tier(self):
        """Gets the processing_tier of this UpdateAccountHolderRequest.

        The processing tier to which the Account Holder should be updated. >The processing tier can not be lowered through this request.  >Required if accountHolderDetails are not provided.

        :return: The processing_tier of this UpdateAccountHolderRequest.
        :rtype: int
        """
        return self._processing_tier

    @processing_tier.setter
    def processing_tier(self, processing_tier):
        """Sets the processing_tier of this UpdateAccountHolderRequest.

        The processing tier to which the Account Holder should be updated. >The processing tier can not be lowered through this request.  >Required if accountHolderDetails are not provided.

        :param processing_tier: The processing_tier of this UpdateAccountHolderRequest.
        :type processing_tier: int
        """

        self._processing_tier = processing_tier
