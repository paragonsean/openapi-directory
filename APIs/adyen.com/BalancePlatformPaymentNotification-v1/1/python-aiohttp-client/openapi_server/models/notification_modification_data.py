# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server import util


class NotificationModificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: Amount=None, type: str=None):
        """NotificationModificationData - a model defined in OpenAPI

        :param amount: The amount of this NotificationModificationData.
        :param type: The type of this NotificationModificationData.
        """
        self.openapi_types = {
            'amount': Amount,
            'type': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'type': 'type'
        }

        self._amount = amount
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NotificationModificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NotificationModificationData of this NotificationModificationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this NotificationModificationData.

        The amount of the modification converted to the balance account's currency, in case the original transaction currency is different. For example, if a part of an authorised amount was cancelled, the value shows the amount that was cancelled.   * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :return: The amount of this NotificationModificationData.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this NotificationModificationData.

        The amount of the modification converted to the balance account's currency, in case the original transaction currency is different. For example, if a part of an authorised amount was cancelled, the value shows the amount that was cancelled.   * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :param amount: The amount of this NotificationModificationData.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def type(self):
        """Gets the type of this NotificationModificationData.

        The type of modification.  Possible values: **Authorised**, **Cancelled**, **Captured**, **Error**, **Expired**, **OutgoingTransfer**, **PendingIncomingTransfer**, **PendingRefund**, **IncomingTransfer**, **Refunded**, **Refused**, **AuthAdjustmentAuthorised**.

        :return: The type of this NotificationModificationData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this NotificationModificationData.

        The type of modification.  Possible values: **Authorised**, **Cancelled**, **Captured**, **Error**, **Expired**, **OutgoingTransfer**, **PendingIncomingTransfer**, **PendingRefund**, **IncomingTransfer**, **Refunded**, **Refused**, **AuthAdjustmentAuthorised**.

        :param type: The type of this NotificationModificationData.
        :type type: str
        """

        self._type = type
