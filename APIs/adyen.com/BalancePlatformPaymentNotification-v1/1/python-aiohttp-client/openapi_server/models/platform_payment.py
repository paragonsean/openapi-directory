# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlatformPayment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, description: str=None, modification_merchant_reference: str=None, modification_psp_reference: str=None, payment_merchant_reference: str=None, payment_psp_reference: str=None, reference: str=None, type: str=None):
        """PlatformPayment - a model defined in OpenAPI

        :param account: The account of this PlatformPayment.
        :param description: The description of this PlatformPayment.
        :param modification_merchant_reference: The modification_merchant_reference of this PlatformPayment.
        :param modification_psp_reference: The modification_psp_reference of this PlatformPayment.
        :param payment_merchant_reference: The payment_merchant_reference of this PlatformPayment.
        :param payment_psp_reference: The payment_psp_reference of this PlatformPayment.
        :param reference: The reference of this PlatformPayment.
        :param type: The type of this PlatformPayment.
        """
        self.openapi_types = {
            'account': str,
            'description': str,
            'modification_merchant_reference': str,
            'modification_psp_reference': str,
            'payment_merchant_reference': str,
            'payment_psp_reference': str,
            'reference': str,
            'type': str
        }

        self.attribute_map = {
            'account': 'account',
            'description': 'description',
            'modification_merchant_reference': 'modificationMerchantReference',
            'modification_psp_reference': 'modificationPspReference',
            'payment_merchant_reference': 'paymentMerchantReference',
            'payment_psp_reference': 'paymentPspReference',
            'reference': 'reference',
            'type': 'type'
        }

        self._account = account
        self._description = description
        self._modification_merchant_reference = modification_merchant_reference
        self._modification_psp_reference = modification_psp_reference
        self._payment_merchant_reference = payment_merchant_reference
        self._payment_psp_reference = payment_psp_reference
        self._reference = reference
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlatformPayment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlatformPayment of this PlatformPayment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this PlatformPayment.

        The account given in the related split.

        :return: The account of this PlatformPayment.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this PlatformPayment.

        The account given in the related split.

        :param account: The account of this PlatformPayment.
        :type account: str
        """

        self._account = account

    @property
    def description(self):
        """Gets the description of this PlatformPayment.

        The description of the related split.

        :return: The description of this PlatformPayment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PlatformPayment.

        The description of the related split.

        :param description: The description of this PlatformPayment.
        :type description: str
        """

        self._description = description

    @property
    def modification_merchant_reference(self):
        """Gets the modification_merchant_reference of this PlatformPayment.

        The merchant reference of the modification.

        :return: The modification_merchant_reference of this PlatformPayment.
        :rtype: str
        """
        return self._modification_merchant_reference

    @modification_merchant_reference.setter
    def modification_merchant_reference(self, modification_merchant_reference):
        """Sets the modification_merchant_reference of this PlatformPayment.

        The merchant reference of the modification.

        :param modification_merchant_reference: The modification_merchant_reference of this PlatformPayment.
        :type modification_merchant_reference: str
        """

        self._modification_merchant_reference = modification_merchant_reference

    @property
    def modification_psp_reference(self):
        """Gets the modification_psp_reference of this PlatformPayment.

        The pspReference of the modification.

        :return: The modification_psp_reference of this PlatformPayment.
        :rtype: str
        """
        return self._modification_psp_reference

    @modification_psp_reference.setter
    def modification_psp_reference(self, modification_psp_reference):
        """Sets the modification_psp_reference of this PlatformPayment.

        The pspReference of the modification.

        :param modification_psp_reference: The modification_psp_reference of this PlatformPayment.
        :type modification_psp_reference: str
        """

        self._modification_psp_reference = modification_psp_reference

    @property
    def payment_merchant_reference(self):
        """Gets the payment_merchant_reference of this PlatformPayment.

        The merchant reference of the payment.

        :return: The payment_merchant_reference of this PlatformPayment.
        :rtype: str
        """
        return self._payment_merchant_reference

    @payment_merchant_reference.setter
    def payment_merchant_reference(self, payment_merchant_reference):
        """Sets the payment_merchant_reference of this PlatformPayment.

        The merchant reference of the payment.

        :param payment_merchant_reference: The payment_merchant_reference of this PlatformPayment.
        :type payment_merchant_reference: str
        """

        self._payment_merchant_reference = payment_merchant_reference

    @property
    def payment_psp_reference(self):
        """Gets the payment_psp_reference of this PlatformPayment.

        The pspReference of the payment.

        :return: The payment_psp_reference of this PlatformPayment.
        :rtype: str
        """
        return self._payment_psp_reference

    @payment_psp_reference.setter
    def payment_psp_reference(self, payment_psp_reference):
        """Sets the payment_psp_reference of this PlatformPayment.

        The pspReference of the payment.

        :param payment_psp_reference: The payment_psp_reference of this PlatformPayment.
        :type payment_psp_reference: str
        """

        self._payment_psp_reference = payment_psp_reference

    @property
    def reference(self):
        """Gets the reference of this PlatformPayment.

        The reference of the related split.

        :return: The reference of this PlatformPayment.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PlatformPayment.

        The reference of the related split.

        :param reference: The reference of this PlatformPayment.
        :type reference: str
        """

        self._reference = reference

    @property
    def type(self):
        """Gets the type of this PlatformPayment.

        The type of the related split.

        :return: The type of this PlatformPayment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PlatformPayment.

        The type of the related split.

        :param type: The type of this PlatformPayment.
        :type type: str
        """
        allowed_values = ["AcquiringFees", "AdyenCommission", "AdyenFees", "AdyenMarkup", "BalanceAccount", "Commission", "Default", "Interchange", "PaymentFee", "Remainder", "SchemeFee", "TopUp", "VAT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
