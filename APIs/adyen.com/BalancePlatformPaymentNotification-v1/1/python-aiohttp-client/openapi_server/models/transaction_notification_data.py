# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.amount import Amount
from openapi_server.models.counterparty import Counterparty
from openapi_server.models.merchant_data import MerchantData
from openapi_server.models.notification_modification_data import NotificationModificationData
from openapi_server.models.platform_payment import PlatformPayment
from openapi_server.models.relayed_authorisation_data import RelayedAuthorisationData
from openapi_server.models.resource_reference import ResourceReference
from openapi_server.models.transaction_rules_result import TransactionRulesResult
from openapi_server.models.validation_result import ValidationResult
from openapi_server import util


class TransactionNotificationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder: ResourceReference=None, amount: Amount=None, auth_code: str=None, balance_account: ResourceReference=None, balance_platform: str=None, counterparty: Counterparty=None, creation_date: datetime=None, description: str=None, id: str=None, merchant_data: MerchantData=None, modification: NotificationModificationData=None, original_amount: Amount=None, payment_id: str=None, payment_instrument: ResourceReference=None, platform_payment: PlatformPayment=None, processing_type: str=None, purpose_code: str=None, reference: str=None, reference_for_beneficiary: str=None, relayed_authorisation_data: RelayedAuthorisationData=None, status: str=None, transaction_rules_result: TransactionRulesResult=None, validation_result: List[ValidationResult]=None, value_date: datetime=None):
        """TransactionNotificationData - a model defined in OpenAPI

        :param account_holder: The account_holder of this TransactionNotificationData.
        :param amount: The amount of this TransactionNotificationData.
        :param auth_code: The auth_code of this TransactionNotificationData.
        :param balance_account: The balance_account of this TransactionNotificationData.
        :param balance_platform: The balance_platform of this TransactionNotificationData.
        :param counterparty: The counterparty of this TransactionNotificationData.
        :param creation_date: The creation_date of this TransactionNotificationData.
        :param description: The description of this TransactionNotificationData.
        :param id: The id of this TransactionNotificationData.
        :param merchant_data: The merchant_data of this TransactionNotificationData.
        :param modification: The modification of this TransactionNotificationData.
        :param original_amount: The original_amount of this TransactionNotificationData.
        :param payment_id: The payment_id of this TransactionNotificationData.
        :param payment_instrument: The payment_instrument of this TransactionNotificationData.
        :param platform_payment: The platform_payment of this TransactionNotificationData.
        :param processing_type: The processing_type of this TransactionNotificationData.
        :param purpose_code: The purpose_code of this TransactionNotificationData.
        :param reference: The reference of this TransactionNotificationData.
        :param reference_for_beneficiary: The reference_for_beneficiary of this TransactionNotificationData.
        :param relayed_authorisation_data: The relayed_authorisation_data of this TransactionNotificationData.
        :param status: The status of this TransactionNotificationData.
        :param transaction_rules_result: The transaction_rules_result of this TransactionNotificationData.
        :param validation_result: The validation_result of this TransactionNotificationData.
        :param value_date: The value_date of this TransactionNotificationData.
        """
        self.openapi_types = {
            'account_holder': ResourceReference,
            'amount': Amount,
            'auth_code': str,
            'balance_account': ResourceReference,
            'balance_platform': str,
            'counterparty': Counterparty,
            'creation_date': datetime,
            'description': str,
            'id': str,
            'merchant_data': MerchantData,
            'modification': NotificationModificationData,
            'original_amount': Amount,
            'payment_id': str,
            'payment_instrument': ResourceReference,
            'platform_payment': PlatformPayment,
            'processing_type': str,
            'purpose_code': str,
            'reference': str,
            'reference_for_beneficiary': str,
            'relayed_authorisation_data': RelayedAuthorisationData,
            'status': str,
            'transaction_rules_result': TransactionRulesResult,
            'validation_result': List[ValidationResult],
            'value_date': datetime
        }

        self.attribute_map = {
            'account_holder': 'accountHolder',
            'amount': 'amount',
            'auth_code': 'authCode',
            'balance_account': 'balanceAccount',
            'balance_platform': 'balancePlatform',
            'counterparty': 'counterparty',
            'creation_date': 'creationDate',
            'description': 'description',
            'id': 'id',
            'merchant_data': 'merchantData',
            'modification': 'modification',
            'original_amount': 'originalAmount',
            'payment_id': 'paymentId',
            'payment_instrument': 'paymentInstrument',
            'platform_payment': 'platformPayment',
            'processing_type': 'processingType',
            'purpose_code': 'purposeCode',
            'reference': 'reference',
            'reference_for_beneficiary': 'referenceForBeneficiary',
            'relayed_authorisation_data': 'relayedAuthorisationData',
            'status': 'status',
            'transaction_rules_result': 'transactionRulesResult',
            'validation_result': 'validationResult',
            'value_date': 'valueDate'
        }

        self._account_holder = account_holder
        self._amount = amount
        self._auth_code = auth_code
        self._balance_account = balance_account
        self._balance_platform = balance_platform
        self._counterparty = counterparty
        self._creation_date = creation_date
        self._description = description
        self._id = id
        self._merchant_data = merchant_data
        self._modification = modification
        self._original_amount = original_amount
        self._payment_id = payment_id
        self._payment_instrument = payment_instrument
        self._platform_payment = platform_payment
        self._processing_type = processing_type
        self._purpose_code = purpose_code
        self._reference = reference
        self._reference_for_beneficiary = reference_for_beneficiary
        self._relayed_authorisation_data = relayed_authorisation_data
        self._status = status
        self._transaction_rules_result = transaction_rules_result
        self._validation_result = validation_result
        self._value_date = value_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionNotificationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionNotificationData of this TransactionNotificationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder(self):
        """Gets the account_holder of this TransactionNotificationData.

        Contains information about the account holder.

        :return: The account_holder of this TransactionNotificationData.
        :rtype: ResourceReference
        """
        return self._account_holder

    @account_holder.setter
    def account_holder(self, account_holder):
        """Sets the account_holder of this TransactionNotificationData.

        Contains information about the account holder.

        :param account_holder: The account_holder of this TransactionNotificationData.
        :type account_holder: ResourceReference
        """

        self._account_holder = account_holder

    @property
    def amount(self):
        """Gets the amount of this TransactionNotificationData.

        The amount converted to the balance account's currency, in case the original transaction currency is different.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :return: The amount of this TransactionNotificationData.
        :rtype: Amount
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionNotificationData.

        The amount converted to the balance account's currency, in case the original transaction currency is different.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :param amount: The amount of this TransactionNotificationData.
        :type amount: Amount
        """

        self._amount = amount

    @property
    def auth_code(self):
        """Gets the auth_code of this TransactionNotificationData.

        The authorisation code for the payment.

        :return: The auth_code of this TransactionNotificationData.
        :rtype: str
        """
        return self._auth_code

    @auth_code.setter
    def auth_code(self, auth_code):
        """Sets the auth_code of this TransactionNotificationData.

        The authorisation code for the payment.

        :param auth_code: The auth_code of this TransactionNotificationData.
        :type auth_code: str
        """

        self._auth_code = auth_code

    @property
    def balance_account(self):
        """Gets the balance_account of this TransactionNotificationData.

        Contains information about the balance account.

        :return: The balance_account of this TransactionNotificationData.
        :rtype: ResourceReference
        """
        return self._balance_account

    @balance_account.setter
    def balance_account(self, balance_account):
        """Sets the balance_account of this TransactionNotificationData.

        Contains information about the balance account.

        :param balance_account: The balance_account of this TransactionNotificationData.
        :type balance_account: ResourceReference
        """

        self._balance_account = balance_account

    @property
    def balance_platform(self):
        """Gets the balance_platform of this TransactionNotificationData.

        The unique identifier of the balance platform.

        :return: The balance_platform of this TransactionNotificationData.
        :rtype: str
        """
        return self._balance_platform

    @balance_platform.setter
    def balance_platform(self, balance_platform):
        """Sets the balance_platform of this TransactionNotificationData.

        The unique identifier of the balance platform.

        :param balance_platform: The balance_platform of this TransactionNotificationData.
        :type balance_platform: str
        """

        self._balance_platform = balance_platform

    @property
    def counterparty(self):
        """Gets the counterparty of this TransactionNotificationData.

        Contains information about the other party in the transaction.

        :return: The counterparty of this TransactionNotificationData.
        :rtype: Counterparty
        """
        return self._counterparty

    @counterparty.setter
    def counterparty(self, counterparty):
        """Sets the counterparty of this TransactionNotificationData.

        Contains information about the other party in the transaction.

        :param counterparty: The counterparty of this TransactionNotificationData.
        :type counterparty: Counterparty
        """
        if counterparty is None:
            raise ValueError("Invalid value for `counterparty`, must not be `None`")

        self._counterparty = counterparty

    @property
    def creation_date(self):
        """Gets the creation_date of this TransactionNotificationData.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :return: The creation_date of this TransactionNotificationData.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TransactionNotificationData.

        The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.

        :param creation_date: The creation_date of this TransactionNotificationData.
        :type creation_date: datetime
        """

        self._creation_date = creation_date

    @property
    def description(self):
        """Gets the description of this TransactionNotificationData.

        Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.

        :return: The description of this TransactionNotificationData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransactionNotificationData.

        Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.

        :param description: The description of this TransactionNotificationData.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this TransactionNotificationData.

        The ID of the resource.

        :return: The id of this TransactionNotificationData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionNotificationData.

        The ID of the resource.

        :param id: The id of this TransactionNotificationData.
        :type id: str
        """

        self._id = id

    @property
    def merchant_data(self):
        """Gets the merchant_data of this TransactionNotificationData.

        Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.

        :return: The merchant_data of this TransactionNotificationData.
        :rtype: MerchantData
        """
        return self._merchant_data

    @merchant_data.setter
    def merchant_data(self, merchant_data):
        """Sets the merchant_data of this TransactionNotificationData.

        Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.

        :param merchant_data: The merchant_data of this TransactionNotificationData.
        :type merchant_data: MerchantData
        """

        self._merchant_data = merchant_data

    @property
    def modification(self):
        """Gets the modification of this TransactionNotificationData.

        Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.

        :return: The modification of this TransactionNotificationData.
        :rtype: NotificationModificationData
        """
        return self._modification

    @modification.setter
    def modification(self, modification):
        """Sets the modification of this TransactionNotificationData.

        Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.

        :param modification: The modification of this TransactionNotificationData.
        :type modification: NotificationModificationData
        """

        self._modification = modification

    @property
    def original_amount(self):
        """Gets the original_amount of this TransactionNotificationData.

        The amount in the original currency of the transaction.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :return: The original_amount of this TransactionNotificationData.
        :rtype: Amount
        """
        return self._original_amount

    @original_amount.setter
    def original_amount(self, original_amount):
        """Sets the original_amount of this TransactionNotificationData.

        The amount in the original currency of the transaction.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 

        :param original_amount: The original_amount of this TransactionNotificationData.
        :type original_amount: Amount
        """

        self._original_amount = original_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this TransactionNotificationData.

        The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.

        :return: The payment_id of this TransactionNotificationData.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this TransactionNotificationData.

        The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.

        :param payment_id: The payment_id of this TransactionNotificationData.
        :type payment_id: str
        """

        self._payment_id = payment_id

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this TransactionNotificationData.

        Contains information about the payment instrument.

        :return: The payment_instrument of this TransactionNotificationData.
        :rtype: ResourceReference
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this TransactionNotificationData.

        Contains information about the payment instrument.

        :param payment_instrument: The payment_instrument of this TransactionNotificationData.
        :type payment_instrument: ResourceReference
        """

        self._payment_instrument = payment_instrument

    @property
    def platform_payment(self):
        """Gets the platform_payment of this TransactionNotificationData.

        Contains information about the related platform payment.

        :return: The platform_payment of this TransactionNotificationData.
        :rtype: PlatformPayment
        """
        return self._platform_payment

    @platform_payment.setter
    def platform_payment(self, platform_payment):
        """Sets the platform_payment of this TransactionNotificationData.

        Contains information about the related platform payment.

        :param platform_payment: The platform_payment of this TransactionNotificationData.
        :type platform_payment: PlatformPayment
        """

        self._platform_payment = platform_payment

    @property
    def processing_type(self):
        """Gets the processing_type of this TransactionNotificationData.

        Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.

        :return: The processing_type of this TransactionNotificationData.
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this TransactionNotificationData.

        Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.

        :param processing_type: The processing_type of this TransactionNotificationData.
        :type processing_type: str
        """
        allowed_values = ["atmWithdraw", "balanceInquiry", "ecommerce", "moto", "pos", "purchaseWithCashback", "recurring", "token", "unknown"]  # noqa: E501
        if processing_type not in allowed_values:
            raise ValueError(
                "Invalid value for `processing_type` ({0}), must be one of {1}"
                .format(processing_type, allowed_values)
            )

        self._processing_type = processing_type

    @property
    def purpose_code(self):
        """Gets the purpose_code of this TransactionNotificationData.

        Indicates the purpose of the outgoing transfer. Adyen sets this to:  * **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.   * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).

        :return: The purpose_code of this TransactionNotificationData.
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code):
        """Sets the purpose_code of this TransactionNotificationData.

        Indicates the purpose of the outgoing transfer. Adyen sets this to:  * **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.   * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).

        :param purpose_code: The purpose_code of this TransactionNotificationData.
        :type purpose_code: str
        """

        self._purpose_code = purpose_code

    @property
    def reference(self):
        """Gets the reference of this TransactionNotificationData.

        The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.

        :return: The reference of this TransactionNotificationData.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this TransactionNotificationData.

        The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.

        :param reference: The reference of this TransactionNotificationData.
        :type reference: str
        """
        if reference is not None and len(reference) > 80:
            raise ValueError("Invalid value for `reference`, length must be less than or equal to `80`")

        self._reference = reference

    @property
    def reference_for_beneficiary(self):
        """Gets the reference_for_beneficiary of this TransactionNotificationData.

        The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.

        :return: The reference_for_beneficiary of this TransactionNotificationData.
        :rtype: str
        """
        return self._reference_for_beneficiary

    @reference_for_beneficiary.setter
    def reference_for_beneficiary(self, reference_for_beneficiary):
        """Sets the reference_for_beneficiary of this TransactionNotificationData.

        The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.

        :param reference_for_beneficiary: The reference_for_beneficiary of this TransactionNotificationData.
        :type reference_for_beneficiary: str
        """
        if reference_for_beneficiary is not None and len(reference_for_beneficiary) > 80:
            raise ValueError("Invalid value for `reference_for_beneficiary`, length must be less than or equal to `80`")

        self._reference_for_beneficiary = reference_for_beneficiary

    @property
    def relayed_authorisation_data(self):
        """Gets the relayed_authorisation_data of this TransactionNotificationData.

        If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.

        :return: The relayed_authorisation_data of this TransactionNotificationData.
        :rtype: RelayedAuthorisationData
        """
        return self._relayed_authorisation_data

    @relayed_authorisation_data.setter
    def relayed_authorisation_data(self, relayed_authorisation_data):
        """Sets the relayed_authorisation_data of this TransactionNotificationData.

        If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.

        :param relayed_authorisation_data: The relayed_authorisation_data of this TransactionNotificationData.
        :type relayed_authorisation_data: RelayedAuthorisationData
        """

        self._relayed_authorisation_data = relayed_authorisation_data

    @property
    def status(self):
        """Gets the status of this TransactionNotificationData.

        The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`    

        :return: The status of this TransactionNotificationData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TransactionNotificationData.

        The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`    

        :param status: The status of this TransactionNotificationData.
        :type status: str
        """

        self._status = status

    @property
    def transaction_rules_result(self):
        """Gets the transaction_rules_result of this TransactionNotificationData.

        Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).

        :return: The transaction_rules_result of this TransactionNotificationData.
        :rtype: TransactionRulesResult
        """
        return self._transaction_rules_result

    @transaction_rules_result.setter
    def transaction_rules_result(self, transaction_rules_result):
        """Sets the transaction_rules_result of this TransactionNotificationData.

        Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).

        :param transaction_rules_result: The transaction_rules_result of this TransactionNotificationData.
        :type transaction_rules_result: TransactionRulesResult
        """

        self._transaction_rules_result = transaction_rules_result

    @property
    def validation_result(self):
        """Gets the validation_result of this TransactionNotificationData.

        Array of checks that Adyen performed to validate the payment and the result of each.

        :return: The validation_result of this TransactionNotificationData.
        :rtype: List[ValidationResult]
        """
        return self._validation_result

    @validation_result.setter
    def validation_result(self, validation_result):
        """Sets the validation_result of this TransactionNotificationData.

        Array of checks that Adyen performed to validate the payment and the result of each.

        :param validation_result: The validation_result of this TransactionNotificationData.
        :type validation_result: List[ValidationResult]
        """

        self._validation_result = validation_result

    @property
    def value_date(self):
        """Gets the value_date of this TransactionNotificationData.

        Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.

        :return: The value_date of this TransactionNotificationData.
        :rtype: datetime
        """
        return self._value_date

    @value_date.setter
    def value_date(self, value_date):
        """Sets the value_date of this TransactionNotificationData.

        Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.

        :param value_date: The value_date of this TransactionNotificationData.
        :type value_date: datetime
        """

        self._value_date = value_date
