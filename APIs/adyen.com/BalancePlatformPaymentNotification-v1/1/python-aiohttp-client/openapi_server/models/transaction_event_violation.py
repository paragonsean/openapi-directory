# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_rule_reference import TransactionRuleReference
from openapi_server.models.transaction_rule_source import TransactionRuleSource
from openapi_server import util


class TransactionEventViolation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, reason: str=None, transaction_rule: TransactionRuleReference=None, transaction_rule_source: TransactionRuleSource=None):
        """TransactionEventViolation - a model defined in OpenAPI

        :param reason: The reason of this TransactionEventViolation.
        :param transaction_rule: The transaction_rule of this TransactionEventViolation.
        :param transaction_rule_source: The transaction_rule_source of this TransactionEventViolation.
        """
        self.openapi_types = {
            'reason': str,
            'transaction_rule': TransactionRuleReference,
            'transaction_rule_source': TransactionRuleSource
        }

        self.attribute_map = {
            'reason': 'reason',
            'transaction_rule': 'transactionRule',
            'transaction_rule_source': 'transactionRuleSource'
        }

        self._reason = reason
        self._transaction_rule = transaction_rule
        self._transaction_rule_source = transaction_rule_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionEventViolation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionEventViolation of this TransactionEventViolation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def reason(self):
        """Gets the reason of this TransactionEventViolation.

        An explanation about why the transaction rule failed.

        :return: The reason of this TransactionEventViolation.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this TransactionEventViolation.

        An explanation about why the transaction rule failed.

        :param reason: The reason of this TransactionEventViolation.
        :type reason: str
        """

        self._reason = reason

    @property
    def transaction_rule(self):
        """Gets the transaction_rule of this TransactionEventViolation.

        Contains information about the transaction rule.

        :return: The transaction_rule of this TransactionEventViolation.
        :rtype: TransactionRuleReference
        """
        return self._transaction_rule

    @transaction_rule.setter
    def transaction_rule(self, transaction_rule):
        """Sets the transaction_rule of this TransactionEventViolation.

        Contains information about the transaction rule.

        :param transaction_rule: The transaction_rule of this TransactionEventViolation.
        :type transaction_rule: TransactionRuleReference
        """

        self._transaction_rule = transaction_rule

    @property
    def transaction_rule_source(self):
        """Gets the transaction_rule_source of this TransactionEventViolation.

        Contains the type and ID of the resource to which the transaction rule is linked.

        :return: The transaction_rule_source of this TransactionEventViolation.
        :rtype: TransactionRuleSource
        """
        return self._transaction_rule_source

    @transaction_rule_source.setter
    def transaction_rule_source(self, transaction_rule_source):
        """Sets the transaction_rule_source of this TransactionEventViolation.

        Contains the type and ID of the resource to which the transaction rule is linked.

        :param transaction_rule_source: The transaction_rule_source of this TransactionEventViolation.
        :type transaction_rule_source: TransactionRuleSource
        """

        self._transaction_rule_source = transaction_rule_source
