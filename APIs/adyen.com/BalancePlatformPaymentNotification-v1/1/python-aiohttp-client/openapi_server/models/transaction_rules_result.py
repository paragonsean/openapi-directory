# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_event_violation import TransactionEventViolation
from openapi_server import util


class TransactionRulesResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advice: str=None, all_rules_passed: bool=None, failed_transaction_rules: List[TransactionEventViolation]=None, score: int=None):
        """TransactionRulesResult - a model defined in OpenAPI

        :param advice: The advice of this TransactionRulesResult.
        :param all_rules_passed: The all_rules_passed of this TransactionRulesResult.
        :param failed_transaction_rules: The failed_transaction_rules of this TransactionRulesResult.
        :param score: The score of this TransactionRulesResult.
        """
        self.openapi_types = {
            'advice': str,
            'all_rules_passed': bool,
            'failed_transaction_rules': List[TransactionEventViolation],
            'score': int
        }

        self.attribute_map = {
            'advice': 'advice',
            'all_rules_passed': 'allRulesPassed',
            'failed_transaction_rules': 'failedTransactionRules',
            'score': 'score'
        }

        self._advice = advice
        self._all_rules_passed = all_rules_passed
        self._failed_transaction_rules = failed_transaction_rules
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionRulesResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionRulesResult of this TransactionRulesResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advice(self):
        """Gets the advice of this TransactionRulesResult.

        The advice given by the Risk analysis.

        :return: The advice of this TransactionRulesResult.
        :rtype: str
        """
        return self._advice

    @advice.setter
    def advice(self, advice):
        """Sets the advice of this TransactionRulesResult.

        The advice given by the Risk analysis.

        :param advice: The advice of this TransactionRulesResult.
        :type advice: str
        """

        self._advice = advice

    @property
    def all_rules_passed(self):
        """Gets the all_rules_passed of this TransactionRulesResult.

        Indicates whether the transaction passed the evaluation for all transaction rules.

        :return: The all_rules_passed of this TransactionRulesResult.
        :rtype: bool
        """
        return self._all_rules_passed

    @all_rules_passed.setter
    def all_rules_passed(self, all_rules_passed):
        """Sets the all_rules_passed of this TransactionRulesResult.

        Indicates whether the transaction passed the evaluation for all transaction rules.

        :param all_rules_passed: The all_rules_passed of this TransactionRulesResult.
        :type all_rules_passed: bool
        """

        self._all_rules_passed = all_rules_passed

    @property
    def failed_transaction_rules(self):
        """Gets the failed_transaction_rules of this TransactionRulesResult.

        Array containing all the transaction rules that the transaction violated. This list is only sent when `allRulesPassed` is **false**.

        :return: The failed_transaction_rules of this TransactionRulesResult.
        :rtype: List[TransactionEventViolation]
        """
        return self._failed_transaction_rules

    @failed_transaction_rules.setter
    def failed_transaction_rules(self, failed_transaction_rules):
        """Sets the failed_transaction_rules of this TransactionRulesResult.

        Array containing all the transaction rules that the transaction violated. This list is only sent when `allRulesPassed` is **false**.

        :param failed_transaction_rules: The failed_transaction_rules of this TransactionRulesResult.
        :type failed_transaction_rules: List[TransactionEventViolation]
        """

        self._failed_transaction_rules = failed_transaction_rules

    @property
    def score(self):
        """Gets the score of this TransactionRulesResult.

        The score of the Risk analysis.

        :return: The score of this TransactionRulesResult.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TransactionRulesResult.

        The score of the Risk analysis.

        :param score: The score of this TransactionRulesResult.
        :type score: int
        """

        self._score = score
