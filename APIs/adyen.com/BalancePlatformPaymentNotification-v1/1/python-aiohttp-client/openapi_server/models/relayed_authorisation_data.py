# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RelayedAuthorisationData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, str]=None, reference: str=None, status: str=None):
        """RelayedAuthorisationData - a model defined in OpenAPI

        :param metadata: The metadata of this RelayedAuthorisationData.
        :param reference: The reference of this RelayedAuthorisationData.
        :param status: The status of this RelayedAuthorisationData.
        """
        self.openapi_types = {
            'metadata': Dict[str, str],
            'reference': str,
            'status': str
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'reference': 'reference',
            'status': 'status'
        }

        self._metadata = metadata
        self._reference = reference
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RelayedAuthorisationData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RelayedAuthorisationData of this RelayedAuthorisationData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this RelayedAuthorisationData.

        The `metadata` object from the relayed authorisation response from your server.

        :return: The metadata of this RelayedAuthorisationData.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this RelayedAuthorisationData.

        The `metadata` object from the relayed authorisation response from your server.

        :param metadata: The metadata of this RelayedAuthorisationData.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def reference(self):
        """Gets the reference of this RelayedAuthorisationData.

        The `reference` from the relayed authorisation response from your server.

        :return: The reference of this RelayedAuthorisationData.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this RelayedAuthorisationData.

        The `reference` from the relayed authorisation response from your server.

        :param reference: The reference of this RelayedAuthorisationData.
        :type reference: str
        """

        self._reference = reference

    @property
    def status(self):
        """Gets the status of this RelayedAuthorisationData.

        The value can be **Authorised** or **Refused**, based on the `authorisationDecision.status` in the relayed authorisation response from your server.

        :return: The status of this RelayedAuthorisationData.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RelayedAuthorisationData.

        The value can be **Authorised** or **Refused**, based on the `authorisationDecision.status` in the relayed authorisation response from your server.

        :param status: The status of this RelayedAuthorisationData.
        :type status: str
        """

        self._status = status
