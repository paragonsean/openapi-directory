/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import Counterparty from './Counterparty';
import NotificationModificationData from './NotificationModificationData';
import PlatformPayment from './PlatformPayment';
import ResourceReference from './ResourceReference';

/**
 * The IncomingTransferNotificationData model module.
 * @module model/IncomingTransferNotificationData
 * @version 1
 */
class IncomingTransferNotificationData {
    /**
     * Constructs a new <code>IncomingTransferNotificationData</code>.
     * @alias module:model/IncomingTransferNotificationData
     */
    constructor() { 
        
        IncomingTransferNotificationData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncomingTransferNotificationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncomingTransferNotificationData} obj Optional instance to populate.
     * @return {module:model/IncomingTransferNotificationData} The populated <code>IncomingTransferNotificationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncomingTransferNotificationData();

            if (data.hasOwnProperty('accountHolder')) {
                obj['accountHolder'] = ResourceReference.constructFromObject(data['accountHolder']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('balanceAccount')) {
                obj['balanceAccount'] = ResourceReference.constructFromObject(data['balanceAccount']);
            }
            if (data.hasOwnProperty('balancePlatform')) {
                obj['balancePlatform'] = ApiClient.convertToType(data['balancePlatform'], 'String');
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = Counterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('modification')) {
                obj['modification'] = NotificationModificationData.constructFromObject(data['modification']);
            }
            if (data.hasOwnProperty('originalAmount')) {
                obj['originalAmount'] = Amount.constructFromObject(data['originalAmount']);
            }
            if (data.hasOwnProperty('paymentId')) {
                obj['paymentId'] = ApiClient.convertToType(data['paymentId'], 'String');
            }
            if (data.hasOwnProperty('paymentInstrument')) {
                obj['paymentInstrument'] = ResourceReference.constructFromObject(data['paymentInstrument']);
            }
            if (data.hasOwnProperty('platformPayment')) {
                obj['platformPayment'] = PlatformPayment.constructFromObject(data['platformPayment']);
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('referenceForBeneficiary')) {
                obj['referenceForBeneficiary'] = ApiClient.convertToType(data['referenceForBeneficiary'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('valueDate')) {
                obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncomingTransferNotificationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncomingTransferNotificationData</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accountHolder`
        if (data['accountHolder']) { // data not null
          ResourceReference.validateJSON(data['accountHolder']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `balanceAccount`
        if (data['balanceAccount']) { // data not null
          ResourceReference.validateJSON(data['balanceAccount']);
        }
        // ensure the json data is a string
        if (data['balancePlatform'] && !(typeof data['balancePlatform'] === 'string' || data['balancePlatform'] instanceof String)) {
            throw new Error("Expected the field `balancePlatform` to be a primitive type in the JSON string but got " + data['balancePlatform']);
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          Counterparty.validateJSON(data['counterparty']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `modification`
        if (data['modification']) { // data not null
          NotificationModificationData.validateJSON(data['modification']);
        }
        // validate the optional field `originalAmount`
        if (data['originalAmount']) { // data not null
          Amount.validateJSON(data['originalAmount']);
        }
        // ensure the json data is a string
        if (data['paymentId'] && !(typeof data['paymentId'] === 'string' || data['paymentId'] instanceof String)) {
            throw new Error("Expected the field `paymentId` to be a primitive type in the JSON string but got " + data['paymentId']);
        }
        // validate the optional field `paymentInstrument`
        if (data['paymentInstrument']) { // data not null
          ResourceReference.validateJSON(data['paymentInstrument']);
        }
        // validate the optional field `platformPayment`
        if (data['platformPayment']) { // data not null
          PlatformPayment.validateJSON(data['platformPayment']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['referenceForBeneficiary'] && !(typeof data['referenceForBeneficiary'] === 'string' || data['referenceForBeneficiary'] instanceof String)) {
            throw new Error("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got " + data['referenceForBeneficiary']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}



/**
 * Contains information about the account holder.
 * @member {module:model/ResourceReference} accountHolder
 */
IncomingTransferNotificationData.prototype['accountHolder'] = undefined;

/**
 * The amount converted to the balance account's currency, in case the original transaction currency is different.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
 * @member {module:model/Amount} amount
 */
IncomingTransferNotificationData.prototype['amount'] = undefined;

/**
 * Contains information about the balance account.
 * @member {module:model/ResourceReference} balanceAccount
 */
IncomingTransferNotificationData.prototype['balanceAccount'] = undefined;

/**
 * The unique identifier of the balance platform.
 * @member {String} balancePlatform
 */
IncomingTransferNotificationData.prototype['balancePlatform'] = undefined;

/**
 * Contains information about the other party in the transaction.
 * @member {module:model/Counterparty} counterparty
 */
IncomingTransferNotificationData.prototype['counterparty'] = undefined;

/**
 * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} creationDate
 */
IncomingTransferNotificationData.prototype['creationDate'] = undefined;

/**
 * Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.
 * @member {String} description
 */
IncomingTransferNotificationData.prototype['description'] = undefined;

/**
 * The ID of the resource.
 * @member {String} id
 */
IncomingTransferNotificationData.prototype['id'] = undefined;

/**
 * Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.
 * @member {module:model/NotificationModificationData} modification
 */
IncomingTransferNotificationData.prototype['modification'] = undefined;

/**
 * The amount in the original currency of the transaction.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
 * @member {module:model/Amount} originalAmount
 */
IncomingTransferNotificationData.prototype['originalAmount'] = undefined;

/**
 * The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.
 * @member {String} paymentId
 */
IncomingTransferNotificationData.prototype['paymentId'] = undefined;

/**
 * Contains information about the payment instrument.
 * @member {module:model/ResourceReference} paymentInstrument
 */
IncomingTransferNotificationData.prototype['paymentInstrument'] = undefined;

/**
 * Contains information about the related platform payment.
 * @member {module:model/PlatformPayment} platformPayment
 */
IncomingTransferNotificationData.prototype['platformPayment'] = undefined;

/**
 * An Adyen-generated unique reference for the transfer.
 * @member {String} reference
 */
IncomingTransferNotificationData.prototype['reference'] = undefined;

/**
 * The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.
 * @member {String} referenceForBeneficiary
 */
IncomingTransferNotificationData.prototype['referenceForBeneficiary'] = undefined;

/**
 * The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`    
 * @member {String} status
 */
IncomingTransferNotificationData.prototype['status'] = undefined;

/**
 * Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.
 * @member {Date} valueDate
 */
IncomingTransferNotificationData.prototype['valueDate'] = undefined;






export default IncomingTransferNotificationData;

