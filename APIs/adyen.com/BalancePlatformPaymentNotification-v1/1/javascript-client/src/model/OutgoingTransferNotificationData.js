/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Amount from './Amount';
import Counterparty from './Counterparty';
import MerchantData from './MerchantData';
import NotificationModificationData from './NotificationModificationData';
import PlatformPayment from './PlatformPayment';
import RelayedAuthorisationData from './RelayedAuthorisationData';
import ResourceReference from './ResourceReference';
import TransactionRulesResult from './TransactionRulesResult';

/**
 * The OutgoingTransferNotificationData model module.
 * @module model/OutgoingTransferNotificationData
 * @version 1
 */
class OutgoingTransferNotificationData {
    /**
     * Constructs a new <code>OutgoingTransferNotificationData</code>.
     * @alias module:model/OutgoingTransferNotificationData
     * @param counterparty {module:model/Counterparty} Contains information about the other party in the transaction.
     */
    constructor(counterparty) { 
        
        OutgoingTransferNotificationData.initialize(this, counterparty);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, counterparty) { 
        obj['counterparty'] = counterparty;
    }

    /**
     * Constructs a <code>OutgoingTransferNotificationData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutgoingTransferNotificationData} obj Optional instance to populate.
     * @return {module:model/OutgoingTransferNotificationData} The populated <code>OutgoingTransferNotificationData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutgoingTransferNotificationData();

            if (data.hasOwnProperty('accountHolder')) {
                obj['accountHolder'] = ResourceReference.constructFromObject(data['accountHolder']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = Amount.constructFromObject(data['amount']);
            }
            if (data.hasOwnProperty('balanceAccount')) {
                obj['balanceAccount'] = ResourceReference.constructFromObject(data['balanceAccount']);
            }
            if (data.hasOwnProperty('balancePlatform')) {
                obj['balancePlatform'] = ApiClient.convertToType(data['balancePlatform'], 'String');
            }
            if (data.hasOwnProperty('counterparty')) {
                obj['counterparty'] = Counterparty.constructFromObject(data['counterparty']);
            }
            if (data.hasOwnProperty('creationDate')) {
                obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('merchantData')) {
                obj['merchantData'] = MerchantData.constructFromObject(data['merchantData']);
            }
            if (data.hasOwnProperty('modification')) {
                obj['modification'] = NotificationModificationData.constructFromObject(data['modification']);
            }
            if (data.hasOwnProperty('originalAmount')) {
                obj['originalAmount'] = Amount.constructFromObject(data['originalAmount']);
            }
            if (data.hasOwnProperty('paymentId')) {
                obj['paymentId'] = ApiClient.convertToType(data['paymentId'], 'String');
            }
            if (data.hasOwnProperty('paymentInstrument')) {
                obj['paymentInstrument'] = ResourceReference.constructFromObject(data['paymentInstrument']);
            }
            if (data.hasOwnProperty('platformPayment')) {
                obj['platformPayment'] = PlatformPayment.constructFromObject(data['platformPayment']);
            }
            if (data.hasOwnProperty('processingType')) {
                obj['processingType'] = ApiClient.convertToType(data['processingType'], 'String');
            }
            if (data.hasOwnProperty('purposeCode')) {
                obj['purposeCode'] = ApiClient.convertToType(data['purposeCode'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('referenceForBeneficiary')) {
                obj['referenceForBeneficiary'] = ApiClient.convertToType(data['referenceForBeneficiary'], 'String');
            }
            if (data.hasOwnProperty('relayedAuthorisationData')) {
                obj['relayedAuthorisationData'] = RelayedAuthorisationData.constructFromObject(data['relayedAuthorisationData']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('transactionRulesResult')) {
                obj['transactionRulesResult'] = TransactionRulesResult.constructFromObject(data['transactionRulesResult']);
            }
            if (data.hasOwnProperty('valueDate')) {
                obj['valueDate'] = ApiClient.convertToType(data['valueDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutgoingTransferNotificationData</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutgoingTransferNotificationData</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OutgoingTransferNotificationData.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `accountHolder`
        if (data['accountHolder']) { // data not null
          ResourceReference.validateJSON(data['accountHolder']);
        }
        // validate the optional field `amount`
        if (data['amount']) { // data not null
          Amount.validateJSON(data['amount']);
        }
        // validate the optional field `balanceAccount`
        if (data['balanceAccount']) { // data not null
          ResourceReference.validateJSON(data['balanceAccount']);
        }
        // ensure the json data is a string
        if (data['balancePlatform'] && !(typeof data['balancePlatform'] === 'string' || data['balancePlatform'] instanceof String)) {
            throw new Error("Expected the field `balancePlatform` to be a primitive type in the JSON string but got " + data['balancePlatform']);
        }
        // validate the optional field `counterparty`
        if (data['counterparty']) { // data not null
          Counterparty.validateJSON(data['counterparty']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `merchantData`
        if (data['merchantData']) { // data not null
          MerchantData.validateJSON(data['merchantData']);
        }
        // validate the optional field `modification`
        if (data['modification']) { // data not null
          NotificationModificationData.validateJSON(data['modification']);
        }
        // validate the optional field `originalAmount`
        if (data['originalAmount']) { // data not null
          Amount.validateJSON(data['originalAmount']);
        }
        // ensure the json data is a string
        if (data['paymentId'] && !(typeof data['paymentId'] === 'string' || data['paymentId'] instanceof String)) {
            throw new Error("Expected the field `paymentId` to be a primitive type in the JSON string but got " + data['paymentId']);
        }
        // validate the optional field `paymentInstrument`
        if (data['paymentInstrument']) { // data not null
          ResourceReference.validateJSON(data['paymentInstrument']);
        }
        // validate the optional field `platformPayment`
        if (data['platformPayment']) { // data not null
          PlatformPayment.validateJSON(data['platformPayment']);
        }
        // ensure the json data is a string
        if (data['processingType'] && !(typeof data['processingType'] === 'string' || data['processingType'] instanceof String)) {
            throw new Error("Expected the field `processingType` to be a primitive type in the JSON string but got " + data['processingType']);
        }
        // ensure the json data is a string
        if (data['purposeCode'] && !(typeof data['purposeCode'] === 'string' || data['purposeCode'] instanceof String)) {
            throw new Error("Expected the field `purposeCode` to be a primitive type in the JSON string but got " + data['purposeCode']);
        }
        // ensure the json data is a string
        if (data['reference'] && !(typeof data['reference'] === 'string' || data['reference'] instanceof String)) {
            throw new Error("Expected the field `reference` to be a primitive type in the JSON string but got " + data['reference']);
        }
        // ensure the json data is a string
        if (data['referenceForBeneficiary'] && !(typeof data['referenceForBeneficiary'] === 'string' || data['referenceForBeneficiary'] instanceof String)) {
            throw new Error("Expected the field `referenceForBeneficiary` to be a primitive type in the JSON string but got " + data['referenceForBeneficiary']);
        }
        // validate the optional field `relayedAuthorisationData`
        if (data['relayedAuthorisationData']) { // data not null
          RelayedAuthorisationData.validateJSON(data['relayedAuthorisationData']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `transactionRulesResult`
        if (data['transactionRulesResult']) { // data not null
          TransactionRulesResult.validateJSON(data['transactionRulesResult']);
        }

        return true;
    }


}

OutgoingTransferNotificationData.RequiredProperties = ["counterparty"];

/**
 * Contains information about the account holder.
 * @member {module:model/ResourceReference} accountHolder
 */
OutgoingTransferNotificationData.prototype['accountHolder'] = undefined;

/**
 * The amount converted to the balance account's currency, in case the original transaction currency is different.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
 * @member {module:model/Amount} amount
 */
OutgoingTransferNotificationData.prototype['amount'] = undefined;

/**
 * Contains information about the balance account.
 * @member {module:model/ResourceReference} balanceAccount
 */
OutgoingTransferNotificationData.prototype['balanceAccount'] = undefined;

/**
 * The unique identifier of the balance platform.
 * @member {String} balancePlatform
 */
OutgoingTransferNotificationData.prototype['balancePlatform'] = undefined;

/**
 * Contains information about the other party in the transaction.
 * @member {module:model/Counterparty} counterparty
 */
OutgoingTransferNotificationData.prototype['counterparty'] = undefined;

/**
 * The date and time when the event was triggered, in ISO 8601 extended format. For example, **2020-12-18T10:15:30+01:00**.
 * @member {Date} creationDate
 */
OutgoingTransferNotificationData.prototype['creationDate'] = undefined;

/**
 * Your description for the transfer. If you send a description longer than 140 characters, the text is truncated.
 * @member {String} description
 */
OutgoingTransferNotificationData.prototype['description'] = undefined;

/**
 * The ID of the resource.
 * @member {String} id
 */
OutgoingTransferNotificationData.prototype['id'] = undefined;

/**
 * Contains information about the merchant that processed the payment. This object is only included for payment authorisation requests and captures.
 * @member {module:model/MerchantData} merchantData
 */
OutgoingTransferNotificationData.prototype['merchantData'] = undefined;

/**
 * Contains the amount and type of modification that triggered the notification. For example, this object contains the amount of a partial cancellation or partial expired authorisation.
 * @member {module:model/NotificationModificationData} modification
 */
OutgoingTransferNotificationData.prototype['modification'] = undefined;

/**
 * The amount in the original currency of the transaction.  * A _positive_ value means the amount is added to the balance account.   * A _negative_ value means the amount is deducted from the balance account. 
 * @member {module:model/Amount} originalAmount
 */
OutgoingTransferNotificationData.prototype['originalAmount'] = undefined;

/**
 * The ID of the original payment authorisation, refund, or funds transfer request. Use this to trace the original request from the `balancePlatform.payment.created` webhook.
 * @member {String} paymentId
 */
OutgoingTransferNotificationData.prototype['paymentId'] = undefined;

/**
 * Contains information about the payment instrument.
 * @member {module:model/ResourceReference} paymentInstrument
 */
OutgoingTransferNotificationData.prototype['paymentInstrument'] = undefined;

/**
 * Contains information about the related platform payment.
 * @member {module:model/PlatformPayment} platformPayment
 */
OutgoingTransferNotificationData.prototype['platformPayment'] = undefined;

/**
 * Contains information about how the payment was processed. Possible values: **atmWithdraw**, **balanceInquiry**, **ecommerce**, **moto**, **pos**, **purchaseWithCashback**, **recurring**, **token**, **unknown**.
 * @member {module:model/OutgoingTransferNotificationData.ProcessingTypeEnum} processingType
 */
OutgoingTransferNotificationData.prototype['processingType'] = undefined;

/**
 * Indicates the purpose of the outgoing transfer. Adyen sets this to:  * **payoutManual** when the transfer was triggered by a one-off payout using the [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) endpoint.   * **payoutSweep** when the transfer was triggered by a scheduled payout using [`sweepConfigurations`](https://docs.adyen.com/api-explorer/#/balanceplatform/latest/post/balanceAccounts__resParam_sweepConfigurations).
 * @member {String} purposeCode
 */
OutgoingTransferNotificationData.prototype['purposeCode'] = undefined;

/**
 * The [`reference`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__reqParam_reference) from the `/transfers` request. If you haven't provided any, Adyen generates a unique reference.
 * @member {String} reference
 */
OutgoingTransferNotificationData.prototype['reference'] = undefined;

/**
 * The reference sent to or received from the counterparty.  * For outgoing funds, this is the [`referenceForBeneficiary`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers__resParam_referenceForBeneficiary) from the  [`/transfers`](https://docs.adyen.com/api-explorer/#/transfers/latest/post/transfers) request.   * For incoming funds, this is the reference from the sender.
 * @member {String} referenceForBeneficiary
 */
OutgoingTransferNotificationData.prototype['referenceForBeneficiary'] = undefined;

/**
 * If you're using [relayed authorisation](https://docs.adyen.com/issuing/processing-payments-for-cards#relayed-authorisation), this object contains information from the relayed authorisation response from your server.
 * @member {module:model/RelayedAuthorisationData} relayedAuthorisationData
 */
OutgoingTransferNotificationData.prototype['relayedAuthorisationData'] = undefined;

/**
 * The event status. The possible values depend on the `type`.  * **Authorised**, **Refused**, or **Error** for type `balancePlatform.payment.created`   * **Expired** or **Cancelled** or **AuthAdjustmentAuthorised** or **AuthAdjustmentRefused** for type `balancePlatform.payment.updated`  * **PendingIncomingTransfer** for type `balancePlatform.incomingTransfer.created`   * **Refunded** or **IncomingTransfer** for type `balancePlatform.incomingTransfer.updated`   * **Captured** or **OutgoingTransfer** for type `balancePlatform.outgoingTransfer.created`  * **TransferConfirmed**, **TransferSentOut**, or **TransferFailed** for type `balancePlatform.outgoingTransfer.updated`    
 * @member {String} status
 */
OutgoingTransferNotificationData.prototype['status'] = undefined;

/**
 * Contains results from the evaluation of [transaction rules](https://docs.adyen.com/issuing/transaction-rules).
 * @member {module:model/TransactionRulesResult} transactionRulesResult
 */
OutgoingTransferNotificationData.prototype['transactionRulesResult'] = undefined;

/**
 * Indicates the expected settlement date of this transaction, in ISO 8601 extended format. For example, **2021-08-17T15:34:37+02:00**.
 * @member {Date} valueDate
 */
OutgoingTransferNotificationData.prototype['valueDate'] = undefined;





/**
 * Allowed values for the <code>processingType</code> property.
 * @enum {String}
 * @readonly
 */
OutgoingTransferNotificationData['ProcessingTypeEnum'] = {

    /**
     * value: "atmWithdraw"
     * @const
     */
    "atmWithdraw": "atmWithdraw",

    /**
     * value: "balanceInquiry"
     * @const
     */
    "balanceInquiry": "balanceInquiry",

    /**
     * value: "ecommerce"
     * @const
     */
    "ecommerce": "ecommerce",

    /**
     * value: "moto"
     * @const
     */
    "moto": "moto",

    /**
     * value: "pos"
     * @const
     */
    "pos": "pos",

    /**
     * value: "purchaseWithCashback"
     * @const
     */
    "purchaseWithCashback": "purchaseWithCashback",

    /**
     * value: "recurring"
     * @const
     */
    "recurring": "recurring",

    /**
     * value: "token"
     * @const
     */
    "token": "token",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};



export default OutgoingTransferNotificationData;

