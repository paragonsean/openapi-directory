/**
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TransactionEventViolation from './TransactionEventViolation';

/**
 * The TransactionRulesResult model module.
 * @module model/TransactionRulesResult
 * @version 1
 */
class TransactionRulesResult {
    /**
     * Constructs a new <code>TransactionRulesResult</code>.
     * @alias module:model/TransactionRulesResult
     */
    constructor() { 
        
        TransactionRulesResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TransactionRulesResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TransactionRulesResult} obj Optional instance to populate.
     * @return {module:model/TransactionRulesResult} The populated <code>TransactionRulesResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TransactionRulesResult();

            if (data.hasOwnProperty('advice')) {
                obj['advice'] = ApiClient.convertToType(data['advice'], 'String');
            }
            if (data.hasOwnProperty('allRulesPassed')) {
                obj['allRulesPassed'] = ApiClient.convertToType(data['allRulesPassed'], 'Boolean');
            }
            if (data.hasOwnProperty('failedTransactionRules')) {
                obj['failedTransactionRules'] = ApiClient.convertToType(data['failedTransactionRules'], [TransactionEventViolation]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TransactionRulesResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TransactionRulesResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['advice'] && !(typeof data['advice'] === 'string' || data['advice'] instanceof String)) {
            throw new Error("Expected the field `advice` to be a primitive type in the JSON string but got " + data['advice']);
        }
        if (data['failedTransactionRules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['failedTransactionRules'])) {
                throw new Error("Expected the field `failedTransactionRules` to be an array in the JSON data but got " + data['failedTransactionRules']);
            }
            // validate the optional field `failedTransactionRules` (array)
            for (const item of data['failedTransactionRules']) {
                TransactionEventViolation.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The advice given by the Risk analysis.
 * @member {String} advice
 */
TransactionRulesResult.prototype['advice'] = undefined;

/**
 * Indicates whether the transaction passed the evaluation for all transaction rules.
 * @member {Boolean} allRulesPassed
 */
TransactionRulesResult.prototype['allRulesPassed'] = undefined;

/**
 * Array containing all the transaction rules that the transaction violated. This list is only sent when `allRulesPassed` is **false**.
 * @member {Array.<module:model/TransactionEventViolation>} failedTransactionRules
 */
TransactionRulesResult.prototype['failedTransactionRules'] = undefined;

/**
 * The score of the Risk analysis.
 * @member {Number} score
 */
TransactionRulesResult.prototype['score'] = undefined;






export default TransactionRulesResult;

