/*
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TransactionRuleReference;
import org.openapitools.client.model.TransactionRuleSource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionEventViolation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:26.984580-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionEventViolation {
  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_TRANSACTION_RULE = "transactionRule";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RULE)
  private TransactionRuleReference transactionRule;

  public static final String SERIALIZED_NAME_TRANSACTION_RULE_SOURCE = "transactionRuleSource";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_RULE_SOURCE)
  private TransactionRuleSource transactionRuleSource;

  public TransactionEventViolation() {
  }

  public TransactionEventViolation reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * An explanation about why the transaction rule failed.
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public TransactionEventViolation transactionRule(TransactionRuleReference transactionRule) {
    this.transactionRule = transactionRule;
    return this;
  }

  /**
   * Contains information about the transaction rule.
   * @return transactionRule
   */
  @javax.annotation.Nullable
  public TransactionRuleReference getTransactionRule() {
    return transactionRule;
  }

  public void setTransactionRule(TransactionRuleReference transactionRule) {
    this.transactionRule = transactionRule;
  }


  public TransactionEventViolation transactionRuleSource(TransactionRuleSource transactionRuleSource) {
    this.transactionRuleSource = transactionRuleSource;
    return this;
  }

  /**
   * Contains the type and ID of the resource to which the transaction rule is linked.
   * @return transactionRuleSource
   */
  @javax.annotation.Nullable
  public TransactionRuleSource getTransactionRuleSource() {
    return transactionRuleSource;
  }

  public void setTransactionRuleSource(TransactionRuleSource transactionRuleSource) {
    this.transactionRuleSource = transactionRuleSource;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionEventViolation transactionEventViolation = (TransactionEventViolation) o;
    return Objects.equals(this.reason, transactionEventViolation.reason) &&
        Objects.equals(this.transactionRule, transactionEventViolation.transactionRule) &&
        Objects.equals(this.transactionRuleSource, transactionEventViolation.transactionRuleSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reason, transactionRule, transactionRuleSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionEventViolation {\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    transactionRule: ").append(toIndentedString(transactionRule)).append("\n");
    sb.append("    transactionRuleSource: ").append(toIndentedString(transactionRuleSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reason");
    openapiFields.add("transactionRule");
    openapiFields.add("transactionRuleSource");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionEventViolation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionEventViolation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionEventViolation is not found in the empty JSON string", TransactionEventViolation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionEventViolation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionEventViolation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `transactionRule`
      if (jsonObj.get("transactionRule") != null && !jsonObj.get("transactionRule").isJsonNull()) {
        TransactionRuleReference.validateJsonElement(jsonObj.get("transactionRule"));
      }
      // validate the optional field `transactionRuleSource`
      if (jsonObj.get("transactionRuleSource") != null && !jsonObj.get("transactionRuleSource").isJsonNull()) {
        TransactionRuleSource.validateJsonElement(jsonObj.get("transactionRuleSource"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionEventViolation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionEventViolation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionEventViolation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionEventViolation.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionEventViolation>() {
           @Override
           public void write(JsonWriter out, TransactionEventViolation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionEventViolation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionEventViolation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionEventViolation
   * @throws IOException if the JSON string is invalid with respect to TransactionEventViolation
   */
  public static TransactionEventViolation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionEventViolation.class);
  }

  /**
   * Convert an instance of TransactionEventViolation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

