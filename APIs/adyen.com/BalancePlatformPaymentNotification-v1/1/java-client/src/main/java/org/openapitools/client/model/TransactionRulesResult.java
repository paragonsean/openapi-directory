/*
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TransactionEventViolation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionRulesResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:15:26.984580-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionRulesResult {
  public static final String SERIALIZED_NAME_ADVICE = "advice";
  @SerializedName(SERIALIZED_NAME_ADVICE)
  private String advice;

  public static final String SERIALIZED_NAME_ALL_RULES_PASSED = "allRulesPassed";
  @SerializedName(SERIALIZED_NAME_ALL_RULES_PASSED)
  private Boolean allRulesPassed;

  public static final String SERIALIZED_NAME_FAILED_TRANSACTION_RULES = "failedTransactionRules";
  @SerializedName(SERIALIZED_NAME_FAILED_TRANSACTION_RULES)
  private List<TransactionEventViolation> failedTransactionRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public TransactionRulesResult() {
  }

  public TransactionRulesResult advice(String advice) {
    this.advice = advice;
    return this;
  }

  /**
   * The advice given by the Risk analysis.
   * @return advice
   */
  @javax.annotation.Nullable
  public String getAdvice() {
    return advice;
  }

  public void setAdvice(String advice) {
    this.advice = advice;
  }


  public TransactionRulesResult allRulesPassed(Boolean allRulesPassed) {
    this.allRulesPassed = allRulesPassed;
    return this;
  }

  /**
   * Indicates whether the transaction passed the evaluation for all transaction rules.
   * @return allRulesPassed
   */
  @javax.annotation.Nullable
  public Boolean getAllRulesPassed() {
    return allRulesPassed;
  }

  public void setAllRulesPassed(Boolean allRulesPassed) {
    this.allRulesPassed = allRulesPassed;
  }


  public TransactionRulesResult failedTransactionRules(List<TransactionEventViolation> failedTransactionRules) {
    this.failedTransactionRules = failedTransactionRules;
    return this;
  }

  public TransactionRulesResult addFailedTransactionRulesItem(TransactionEventViolation failedTransactionRulesItem) {
    if (this.failedTransactionRules == null) {
      this.failedTransactionRules = new ArrayList<>();
    }
    this.failedTransactionRules.add(failedTransactionRulesItem);
    return this;
  }

  /**
   * Array containing all the transaction rules that the transaction violated. This list is only sent when &#x60;allRulesPassed&#x60; is **false**.
   * @return failedTransactionRules
   */
  @javax.annotation.Nullable
  public List<TransactionEventViolation> getFailedTransactionRules() {
    return failedTransactionRules;
  }

  public void setFailedTransactionRules(List<TransactionEventViolation> failedTransactionRules) {
    this.failedTransactionRules = failedTransactionRules;
  }


  public TransactionRulesResult score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * The score of the Risk analysis.
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionRulesResult transactionRulesResult = (TransactionRulesResult) o;
    return Objects.equals(this.advice, transactionRulesResult.advice) &&
        Objects.equals(this.allRulesPassed, transactionRulesResult.allRulesPassed) &&
        Objects.equals(this.failedTransactionRules, transactionRulesResult.failedTransactionRules) &&
        Objects.equals(this.score, transactionRulesResult.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advice, allRulesPassed, failedTransactionRules, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionRulesResult {\n");
    sb.append("    advice: ").append(toIndentedString(advice)).append("\n");
    sb.append("    allRulesPassed: ").append(toIndentedString(allRulesPassed)).append("\n");
    sb.append("    failedTransactionRules: ").append(toIndentedString(failedTransactionRules)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advice");
    openapiFields.add("allRulesPassed");
    openapiFields.add("failedTransactionRules");
    openapiFields.add("score");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionRulesResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionRulesResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionRulesResult is not found in the empty JSON string", TransactionRulesResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionRulesResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionRulesResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advice") != null && !jsonObj.get("advice").isJsonNull()) && !jsonObj.get("advice").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advice` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advice").toString()));
      }
      if (jsonObj.get("failedTransactionRules") != null && !jsonObj.get("failedTransactionRules").isJsonNull()) {
        JsonArray jsonArrayfailedTransactionRules = jsonObj.getAsJsonArray("failedTransactionRules");
        if (jsonArrayfailedTransactionRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failedTransactionRules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failedTransactionRules` to be an array in the JSON string but got `%s`", jsonObj.get("failedTransactionRules").toString()));
          }

          // validate the optional field `failedTransactionRules` (array)
          for (int i = 0; i < jsonArrayfailedTransactionRules.size(); i++) {
            TransactionEventViolation.validateJsonElement(jsonArrayfailedTransactionRules.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionRulesResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionRulesResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionRulesResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionRulesResult.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionRulesResult>() {
           @Override
           public void write(JsonWriter out, TransactionRulesResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionRulesResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionRulesResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionRulesResult
   * @throws IOException if the JSON string is invalid with respect to TransactionRulesResult
   */
  public static TransactionRulesResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionRulesResult.class);
  }

  /**
   * Convert an instance of TransactionRulesResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

