/*
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BalancePlatformNotificationResponse;
import org.openapitools.client.model.PaymentNotificationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentAuthorisationRefundOrFundsTransferInitiatedApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PaymentAuthorisationRefundOrFundsTransferInitiatedApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentAuthorisationRefundOrFundsTransferInitiatedApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postBalancePlatformPaymentCreated
     * @param paymentNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformPaymentCreatedCall(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.payment.created";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformPaymentCreatedValidateBeforeCall(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformPaymentCreatedCall(paymentNotificationRequest, _callback);

    }

    /**
     * Payment authorisation, refund, or funds transfer initiated
     * Adyen sends this webhook when a payment authorisation, a refund, or a funds transfer has been initiated. This webhook only informs your server of requests. For the actual fund movements, you&#39;ll get the information from the subsequent outgoing or incoming transfer webhooks.   To differentiate the requests, check the content of the webhook.  * For payments, the webhook contains the authorisation result, information about the processing merchant, and shows a negative amount.   * For refunds, the webhook contains to which payment instrument the funds will be refunded, and shows a positive amount.  * For outgoing or incoming fund transfers, the webhook shows a positive or negative amount depending on the direction of the transfer, and only includes information about the balance account.
     * @param paymentNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformPaymentCreated(PaymentNotificationRequest paymentNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformPaymentCreatedWithHttpInfo(paymentNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Payment authorisation, refund, or funds transfer initiated
     * Adyen sends this webhook when a payment authorisation, a refund, or a funds transfer has been initiated. This webhook only informs your server of requests. For the actual fund movements, you&#39;ll get the information from the subsequent outgoing or incoming transfer webhooks.   To differentiate the requests, check the content of the webhook.  * For payments, the webhook contains the authorisation result, information about the processing merchant, and shows a negative amount.   * For refunds, the webhook contains to which payment instrument the funds will be refunded, and shows a positive amount.  * For outgoing or incoming fund transfers, the webhook shows a positive or negative amount depending on the direction of the transfer, and only includes information about the balance account.
     * @param paymentNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformPaymentCreatedWithHttpInfo(PaymentNotificationRequest paymentNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformPaymentCreatedValidateBeforeCall(paymentNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payment authorisation, refund, or funds transfer initiated (asynchronously)
     * Adyen sends this webhook when a payment authorisation, a refund, or a funds transfer has been initiated. This webhook only informs your server of requests. For the actual fund movements, you&#39;ll get the information from the subsequent outgoing or incoming transfer webhooks.   To differentiate the requests, check the content of the webhook.  * For payments, the webhook contains the authorisation result, information about the processing merchant, and shows a negative amount.   * For refunds, the webhook contains to which payment instrument the funds will be refunded, and shows a positive amount.  * For outgoing or incoming fund transfers, the webhook shows a positive or negative amount depending on the direction of the transfer, and only includes information about the balance account.
     * @param paymentNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformPaymentCreatedAsync(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformPaymentCreatedValidateBeforeCall(paymentNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBalancePlatformPaymentUpdated
     * @param paymentNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformPaymentUpdatedCall(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = paymentNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.payment.updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformPaymentUpdatedValidateBeforeCall(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformPaymentUpdatedCall(paymentNotificationRequest, _callback);

    }

    /**
     * Payment authorisation expired or cancelled
     * Adyen sends this webhook when a payment authorisation has expired or has been cancelled. Use the &#x60;data.id&#x60; to track the original payment authorisation from the &#x60;balancePlatform.payment.created&#x60; webhook.
     * @param paymentNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformPaymentUpdated(PaymentNotificationRequest paymentNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformPaymentUpdatedWithHttpInfo(paymentNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Payment authorisation expired or cancelled
     * Adyen sends this webhook when a payment authorisation has expired or has been cancelled. Use the &#x60;data.id&#x60; to track the original payment authorisation from the &#x60;balancePlatform.payment.created&#x60; webhook.
     * @param paymentNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformPaymentUpdatedWithHttpInfo(PaymentNotificationRequest paymentNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformPaymentUpdatedValidateBeforeCall(paymentNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Payment authorisation expired or cancelled (asynchronously)
     * Adyen sends this webhook when a payment authorisation has expired or has been cancelled. Use the &#x60;data.id&#x60; to track the original payment authorisation from the &#x60;balancePlatform.payment.created&#x60; webhook.
     * @param paymentNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformPaymentUpdatedAsync(PaymentNotificationRequest paymentNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformPaymentUpdatedValidateBeforeCall(paymentNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
