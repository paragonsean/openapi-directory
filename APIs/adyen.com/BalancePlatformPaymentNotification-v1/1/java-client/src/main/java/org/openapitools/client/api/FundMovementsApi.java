/*
 * Payment webhooks (deprecated)
 * The payment webhooks are deprecated. Use the [accounting webhooks](https://docs.adyen.com/api-explorer/transfer-webhooks/latest/overview) instead.  Adyen sends webhooks to inform your system about the creation of payment resources and money movements in your platform.  You can use these webhooks to build your implementation. For example, you can use this information to update balances in your own dashboards or to keep track of incoming funds.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BalancePlatformNotificationResponse;
import org.openapitools.client.model.IncomingTransferNotificationRequest;
import org.openapitools.client.model.OutgoingTransferNotificationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FundMovementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FundMovementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FundMovementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postBalancePlatformIncomingTransferCreated
     * @param incomingTransferNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformIncomingTransferCreatedCall(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomingTransferNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.incomingTransfer.created";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformIncomingTransferCreatedValidateBeforeCall(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformIncomingTransferCreatedCall(incomingTransferNotificationRequest, _callback);

    }

    /**
     * Incoming transfer created
     * Adyen sends this webhook when there are incoming funds due to a refund or a fund transfer. Use the &#x60;paymentId&#x60; to link to the original refund request or funds transfer request. Check the content of the webhook to differentiate the events.  * For refunds, the webhook includes the payment instrument to which funds will be refunded.  * For incoming fund transfers, the webhook only includes information about the balance account.
     * @param incomingTransferNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformIncomingTransferCreated(IncomingTransferNotificationRequest incomingTransferNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformIncomingTransferCreatedWithHttpInfo(incomingTransferNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Incoming transfer created
     * Adyen sends this webhook when there are incoming funds due to a refund or a fund transfer. Use the &#x60;paymentId&#x60; to link to the original refund request or funds transfer request. Check the content of the webhook to differentiate the events.  * For refunds, the webhook includes the payment instrument to which funds will be refunded.  * For incoming fund transfers, the webhook only includes information about the balance account.
     * @param incomingTransferNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformIncomingTransferCreatedWithHttpInfo(IncomingTransferNotificationRequest incomingTransferNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformIncomingTransferCreatedValidateBeforeCall(incomingTransferNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Incoming transfer created (asynchronously)
     * Adyen sends this webhook when there are incoming funds due to a refund or a fund transfer. Use the &#x60;paymentId&#x60; to link to the original refund request or funds transfer request. Check the content of the webhook to differentiate the events.  * For refunds, the webhook includes the payment instrument to which funds will be refunded.  * For incoming fund transfers, the webhook only includes information about the balance account.
     * @param incomingTransferNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformIncomingTransferCreatedAsync(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformIncomingTransferCreatedValidateBeforeCall(incomingTransferNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBalancePlatformIncomingTransferUpdated
     * @param incomingTransferNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformIncomingTransferUpdatedCall(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = incomingTransferNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.incomingTransfer.updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformIncomingTransferUpdatedValidateBeforeCall(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformIncomingTransferUpdatedCall(incomingTransferNotificationRequest, _callback);

    }

    /**
     * Incoming transfer updated
     * Adyen sends this webhook when funds were added to the balance account. This could be due to a refund or a funds transfer. Use the &#x60;data.id&#x60; to track the original incoming transfer resource in the &#x60;balancePlatform.incomingTransfer.created&#x60; webhook.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For refunds, the &#x60;status&#x60; is **Refunded**.   * For incoming fund transfers, the &#x60;status&#x60; is **IncomingTransfer**.
     * @param incomingTransferNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformIncomingTransferUpdated(IncomingTransferNotificationRequest incomingTransferNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformIncomingTransferUpdatedWithHttpInfo(incomingTransferNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Incoming transfer updated
     * Adyen sends this webhook when funds were added to the balance account. This could be due to a refund or a funds transfer. Use the &#x60;data.id&#x60; to track the original incoming transfer resource in the &#x60;balancePlatform.incomingTransfer.created&#x60; webhook.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For refunds, the &#x60;status&#x60; is **Refunded**.   * For incoming fund transfers, the &#x60;status&#x60; is **IncomingTransfer**.
     * @param incomingTransferNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformIncomingTransferUpdatedWithHttpInfo(IncomingTransferNotificationRequest incomingTransferNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformIncomingTransferUpdatedValidateBeforeCall(incomingTransferNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Incoming transfer updated (asynchronously)
     * Adyen sends this webhook when funds were added to the balance account. This could be due to a refund or a funds transfer. Use the &#x60;data.id&#x60; to track the original incoming transfer resource in the &#x60;balancePlatform.incomingTransfer.created&#x60; webhook.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For refunds, the &#x60;status&#x60; is **Refunded**.   * For incoming fund transfers, the &#x60;status&#x60; is **IncomingTransfer**.
     * @param incomingTransferNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformIncomingTransferUpdatedAsync(IncomingTransferNotificationRequest incomingTransferNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformIncomingTransferUpdatedValidateBeforeCall(incomingTransferNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBalancePlatformOutgoingTransferCreated
     * @param outgoingTransferNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformOutgoingTransferCreatedCall(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outgoingTransferNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.outgoingTransfer.created";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformOutgoingTransferCreatedValidateBeforeCall(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformOutgoingTransferCreatedCall(outgoingTransferNotificationRequest, _callback);

    }

    /**
     * Outgoing transfer created
     * Adyen sends this webhook when funds were deducted from a balance account due to a capture or a funds transfer. Use the &#x60;paymentId&#x60; to link to the original payment authorisation or funds transfer request.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For captures, the &#x60;status&#x60; will be **Captured**.   * For outgoing fund transfers, the &#x60;status&#x60; will be **OutgoingTransfer**.
     * @param outgoingTransferNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformOutgoingTransferCreated(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformOutgoingTransferCreatedWithHttpInfo(outgoingTransferNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Outgoing transfer created
     * Adyen sends this webhook when funds were deducted from a balance account due to a capture or a funds transfer. Use the &#x60;paymentId&#x60; to link to the original payment authorisation or funds transfer request.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For captures, the &#x60;status&#x60; will be **Captured**.   * For outgoing fund transfers, the &#x60;status&#x60; will be **OutgoingTransfer**.
     * @param outgoingTransferNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformOutgoingTransferCreatedWithHttpInfo(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformOutgoingTransferCreatedValidateBeforeCall(outgoingTransferNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Outgoing transfer created (asynchronously)
     * Adyen sends this webhook when funds were deducted from a balance account due to a capture or a funds transfer. Use the &#x60;paymentId&#x60; to link to the original payment authorisation or funds transfer request.  The &#x60;status&#x60; field indicates the event that triggered the webhook.   * For captures, the &#x60;status&#x60; will be **Captured**.   * For outgoing fund transfers, the &#x60;status&#x60; will be **OutgoingTransfer**.
     * @param outgoingTransferNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformOutgoingTransferCreatedAsync(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformOutgoingTransferCreatedValidateBeforeCall(outgoingTransferNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postBalancePlatformOutgoingTransferUpdated
     * @param outgoingTransferNotificationRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformOutgoingTransferUpdatedCall(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outgoingTransferNotificationRequest;

        // create path and map variables
        String localVarPath = "/balancePlatform.outgoingTransfer.updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call postBalancePlatformOutgoingTransferUpdatedValidateBeforeCall(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback _callback) throws ApiException {
        return postBalancePlatformOutgoingTransferUpdatedCall(outgoingTransferNotificationRequest, _callback);

    }

    /**
     * Outgoing transfer updated
     * Adyen sends this webhook when there is updated information after funds have been deducted from a balance account. For example, if the fund transfer failed.  Use the &#x60;data.id&#x60; to track the original outgoing transfer resource from the &#x60;balancePlatform.outgoingTransfer.created&#x60; webhook.
     * @param outgoingTransferNotificationRequest  (optional)
     * @return BalancePlatformNotificationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public BalancePlatformNotificationResponse postBalancePlatformOutgoingTransferUpdated(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest) throws ApiException {
        ApiResponse<BalancePlatformNotificationResponse> localVarResp = postBalancePlatformOutgoingTransferUpdatedWithHttpInfo(outgoingTransferNotificationRequest);
        return localVarResp.getData();
    }

    /**
     * Outgoing transfer updated
     * Adyen sends this webhook when there is updated information after funds have been deducted from a balance account. For example, if the fund transfer failed.  Use the &#x60;data.id&#x60; to track the original outgoing transfer resource from the &#x60;balancePlatform.outgoingTransfer.created&#x60; webhook.
     * @param outgoingTransferNotificationRequest  (optional)
     * @return ApiResponse&lt;BalancePlatformNotificationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<BalancePlatformNotificationResponse> postBalancePlatformOutgoingTransferUpdatedWithHttpInfo(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest) throws ApiException {
        okhttp3.Call localVarCall = postBalancePlatformOutgoingTransferUpdatedValidateBeforeCall(outgoingTransferNotificationRequest, null);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Outgoing transfer updated (asynchronously)
     * Adyen sends this webhook when there is updated information after funds have been deducted from a balance account. For example, if the fund transfer failed.  Use the &#x60;data.id&#x60; to track the original outgoing transfer resource from the &#x60;balancePlatform.outgoingTransfer.created&#x60; webhook.
     * @param outgoingTransferNotificationRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK - the request has succeeded. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call postBalancePlatformOutgoingTransferUpdatedAsync(OutgoingTransferNotificationRequest outgoingTransferNotificationRequest, final ApiCallback<BalancePlatformNotificationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postBalancePlatformOutgoingTransferUpdatedValidateBeforeCall(outgoingTransferNotificationRequest, _callback);
        Type localVarReturnType = new TypeToken<BalancePlatformNotificationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
